00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002428 0000 0000                  	dc.l Pal_Idiot
0000242C FB20                       	dc.w $FB20
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
000025D0                            Pal_GHZ:	incbin	pallet\ghz.bin
00002630                            Pal_LZ:		incbin	pallet\lz.bin
00002690                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002710                            Pal_MZ:		incbin	pallet\mz.bin
00002770                            Pal_SLZ:	incbin	pallet\slz.bin
000027D0                            Pal_SYZ:	incbin	pallet\syz.bin
00002830                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002890                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028F0                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002970                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029D0                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A50                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A70                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A90                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B10                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B50                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BD0                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BF0                            
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            
00002BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BF0                            
00002BF0                            
00002BF0                            DelayProgram:				; XREF: PauseGame
00002BF0 46FC 2300                  		move	#$2300,sr
00002BF4                            
00002BF4                            loc_29AC:
00002BF4 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BF8 66FA                       		bne.s	loc_29AC
00002BFA 4E75                       		rts	
00002BFC                            ; End of function DelayProgram
00002BFC                            
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            ; Subroutine to	generate a pseudo-random number	in d0
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            
00002BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BFC                            
00002BFC                            
00002BFC                            RandomNumber:
00002BFC 2238 F636                  		move.l	($FFFFF636).w,d1
00002C00 6600                       		bne.s	loc_29C0
00002C02 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C08                            
00002C08                            loc_29C0:
00002C08 2001                       		move.l	d1,d0
00002C0A E581                       		asl.l	#2,d1
00002C0C D280                       		add.l	d0,d1
00002C0E E781                       		asl.l	#3,d1
00002C10 D280                       		add.l	d0,d1
00002C12 3001                       		move.w	d1,d0
00002C14 4841                       		swap	d1
00002C16 D041                       		add.w	d1,d0
00002C18 3200                       		move.w	d0,d1
00002C1A 4841                       		swap	d1
00002C1C 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C20 4E75                       		rts	
00002C22                            ; End of function RandomNumber
00002C22                            
00002C22                            
00002C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C22                            
00002C22                            
00002C22                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C22 0240 00FF                  		andi.w	#$FF,d0
00002C26 D040                       		add.w	d0,d0
00002C28 0640 0080                  		addi.w	#$80,d0
00002C2C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C30 0440 0080                  		subi.w	#$80,d0
00002C34 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C38 4E75                       		rts	
00002C3A                            ; End of function CalcSine
00002C3A                            
00002C3A                            ; ===========================================================================
00002C3A                            
00002C3A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EBA                            
00002EBA                            ; ===========================================================================
00002EBA 48E7 6000                  		movem.l	d1-d2,-(sp)
00002EBE 3200                       		move.w	d0,d1
00002EC0 4841                       		swap	d1
00002EC2 7000                       		moveq	#0,d0
00002EC4 3200                       		move.w	d0,d1
00002EC6 7407                       		moveq	#7,d2
00002EC8                            
00002EC8                            loc_2C80:
00002EC8 E599                       		rol.l	#2,d1
00002ECA D040                       		add.w	d0,d0
00002ECC 5240                       		addq.w	#1,d0
00002ECE 9240                       		sub.w	d0,d1
00002ED0 6400                       		bcc.s	loc_2C9A
00002ED2 D240                       		add.w	d0,d1
00002ED4 5340                       		subq.w	#1,d0
00002ED6 51CA FFF0                  		dbf	d2,loc_2C80
00002EDA E248                       		lsr.w	#1,d0
00002EDC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EE0 4E75                       		rts	
00002EE2                            ; ===========================================================================
00002EE2                            
00002EE2                            loc_2C9A:
00002EE2 5240                       		addq.w	#1,d0
00002EE4 51CA FFE2                  		dbf	d2,loc_2C80
00002EE8 E248                       		lsr.w	#1,d0
00002EEA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EEE 4E75                       		rts	
00002EF0                            
00002EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EF0                            
00002EF0                            
00002EF0                            CalcAngle:
00002EF0 48E7 1800                  		movem.l	d3-d4,-(sp)
00002EF4 7600                       		moveq	#0,d3
00002EF6 7800                       		moveq	#0,d4
00002EF8 3601                       		move.w	d1,d3
00002EFA 3802                       		move.w	d2,d4
00002EFC 8843                       		or.w	d3,d4
00002EFE 6700                       		beq.s	loc_2D04
00002F00 3802                       		move.w	d2,d4
00002F02 4A43                       		tst.w	d3
00002F04 6A00 0000                  		bpl.w	loc_2CC2
00002F08 4443                       		neg.w	d3
00002F0A                            
00002F0A                            loc_2CC2:
00002F0A 4A44                       		tst.w	d4
00002F0C 6A00 0000                  		bpl.w	loc_2CCA
00002F10 4444                       		neg.w	d4
00002F12                            
00002F12                            loc_2CCA:
00002F12 B843                       		cmp.w	d3,d4
00002F14 6400 0000                  		bcc.w	loc_2CDC
00002F18 E18C                       		lsl.l	#8,d4
00002F1A 88C3                       		divu.w	d3,d4
00002F1C 7000                       		moveq	#0,d0
00002F1E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F22 6000                       		bra.s	loc_2CE6
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2CDC:				; XREF: CalcAngle
00002F24 E18B                       		lsl.l	#8,d3
00002F26 86C4                       		divu.w	d4,d3
00002F28 7040                       		moveq	#$40,d0
00002F2A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F2E                            
00002F2E                            loc_2CE6:
00002F2E 4A41                       		tst.w	d1
00002F30 6A00 0000                  		bpl.w	loc_2CF2
00002F34 4440                       		neg.w	d0
00002F36 0640 0080                  		addi.w	#$80,d0
00002F3A                            
00002F3A                            loc_2CF2:
00002F3A 4A42                       		tst.w	d2
00002F3C 6A00 0000                  		bpl.w	loc_2CFE
00002F40 4440                       		neg.w	d0
00002F42 0640 0100                  		addi.w	#$100,d0
00002F46                            
00002F46                            loc_2CFE:
00002F46 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F4A 4E75                       		rts	
00002F4C                            ; ===========================================================================
00002F4C                            
00002F4C                            loc_2D04:				; XREF: CalcAngle
00002F4C 303C 0040                  		move.w	#$40,d0
00002F50 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F54 4E75                       		rts	
00002F56                            ; End of function CalcAngle
00002F56                            
00002F56                            ; ===========================================================================
00002F56                            
00002F56                            Angle_Data:	incbin	misc\angles.bin
00003058                            
00003058                            ; ===========================================================================
00003058                            
00003058                            ; ---------------------------------------------------------------------------
00003058                            ; Sega screen
00003058                            ; ---------------------------------------------------------------------------
00003058                            
00003058                            SegaScreen:				; XREF: GameModeArray
00003058 103C 00E4                  		move.b	#$E4,d0
0000305C 6100 E55E                  		bsr.w	PlaySound_Special ; stop music
00003060 6100 E79C                  		bsr.w	ClearPLC
00003064 6100 F00C                  		bsr.w	Pal_FadeFrom
00003068 4DF9 00C0 0004             		lea	($C00004).l,a6
0000306E 3CBC 8004                  		move.w	#$8004,(a6)
00003072 3CBC 8230                  		move.w	#$8230,(a6)
00003076 3CBC 8407                  		move.w	#$8407,(a6)
0000307A 3CBC 8700                  		move.w	#$8700,(a6)
0000307E 3CBC 8B00                  		move.w	#$8B00,(a6)
00003082 4238 F64E                  		clr.b	($FFFFF64E).w
00003086 46FC 2700                  		move	#$2700,sr
0000308A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000308E 0200 00BF                  		andi.b	#$BF,d0
00003092 33C0 00C0 0004             		move.w	d0,($C00004).l
00003098 6100 E44A                  		bsr.w	ClearScreen
0000309C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030A6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030AC 6100 E5B2                  		bsr.w	NemDec
000030B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B6 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030BC 303C 0000                  		move.w	#0,d0
000030C0 6100 E87C                  		bsr.w	EniDec
000030C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000030CA 203C 6510 0003             		move.l	#$65100003,d0
000030D0 7217                       		moveq	#$17,d1
000030D2 7407                       		moveq	#7,d2
000030D4 6100 E56A                  		bsr.w	ShowVDPGraphics
000030D8 43F9 00FF 0180             		lea	($FF0180).l,a1
000030DE 203C 4000 0003             		move.l	#$40000003,d0
000030E4 7227                       		moveq	#$27,d1
000030E6 741B                       		moveq	#$1B,d2
000030E8 6100 E556                  		bsr.w	ShowVDPGraphics
000030EC 7000                       		moveq	#0,d0
000030EE 6100 F248                  		bsr.w	PalLoad2	; load Sega logo pallet
000030F2 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030FE 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003104 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000310A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000310E 0000 0040                  		ori.b	#$40,d0
00003112 33C0 00C0 0004             		move.w	d0,($C00004).l
00003118                            
00003118                            Sega_WaitPallet:
00003118 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000311E 6100 FAD0                  		bsr.w	DelayProgram
00003122 6100 F106                  		bsr.w	PalCycle_Sega
00003126 66F0                       		bne.s	Sega_WaitPallet
00003128                            
00003128 103C 00E1                  		move.b	#$E1,d0
0000312C 6100 E48E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003130 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003136 6100 FAB8                  		bsr.w	DelayProgram
0000313A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003140                            
00003140                            Sega_WaitEnd:
00003140 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003146 6100 FAA8                  		bsr.w	DelayProgram
0000314A 4A78 F614                  		tst.w	($FFFFF614).w
0000314E 6700                       		beq.s	Sega_GotoTitle
00003150 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003156 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003158                            
00003158                            Sega_GotoTitle:
00003158 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000315E 4E75                       		rts	
00003160                            ; ===========================================================================
00003160                            
00003160                            ; ---------------------------------------------------------------------------
00003160                            ; Title	screen
00003160                            ; ---------------------------------------------------------------------------
00003160                            
00003160                            TitleScreen:				; XREF: GameModeArray
00003160 103C 00E4                  		move.b	#$E4,d0
00003164 6100 E456                  		bsr.w	PlaySound_Special ; stop music
00003168 6100 E694                  		bsr.w	ClearPLC
0000316C 6100 EF04                  		bsr.w	Pal_FadeFrom
00003170 46FC 2700                  		move	#$2700,sr
00003174 6100 E3FC                  		bsr.w	SoundDriverLoad
00003178 4DF9 00C0 0004             		lea	($C00004).l,a6
0000317E 3CBC 8004                  		move.w	#$8004,(a6)
00003182 3CBC 8230                  		move.w	#$8230,(a6)
00003186 3CBC 8407                  		move.w	#$8407,(a6)
0000318A 3CBC 9001                  		move.w	#$9001,(a6)
0000318E 3CBC 9200                  		move.w	#$9200,(a6)
00003192 3CBC 8B03                  		move.w	#$8B03,(a6)
00003196 3CBC 8720                  		move.w	#$8720,(a6)
0000319A 4238 F64E                  		clr.b	($FFFFF64E).w
0000319E 6100 E344                  		bsr.w	ClearScreen
000031A2 43F8 D000                  		lea	($FFFFD000).w,a1
000031A6 7000                       		moveq	#0,d0
000031A8 323C 07FF                  		move.w	#$7FF,d1
000031AC                            
000031AC                            Title_ClrObjRam:
000031AC 22C0                       		move.l	d0,(a1)+
000031AE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031B2                            
000031B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BC 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000031C2 6100 E49C                  		bsr.w	NemDec
000031C6 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000031D0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000031D6 6100 E488                  		bsr.w	NemDec
000031DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000031E0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031E6 303C 0000                  		move.w	#0,d0
000031EA 6100 E752                  		bsr.w	EniDec
000031EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000031F4 203C 4000 0003             		move.l	#$40000003,d0
000031FA 7227                       		moveq	#$27,d1
000031FC 741B                       		moveq	#$1B,d2
000031FE 6100 E440                  		bsr.w	ShowVDPGraphics
00003202 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003206 7000                       		moveq	#0,d0
00003208 323C 001F                  		move.w	#$1F,d1
0000320C                            
0000320C                            Title_ClrPallet:
0000320C 22C0                       		move.l	d0,(a1)+
0000320E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003212                            
00003212 7003                       		moveq	#3,d0		; load Sonic's pallet
00003214 6100 F106                  		bsr.w	PalLoad1
00003218 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000321E 4EB9 0000 0000             		jsr	ObjectsLoad
00003224 4EB9 0000 0000             		jsr	BuildSprites
0000322A 6100 EDA0                  		bsr.w	Pal_FadeTo
0000322E 46FC 2700                  		move	#$2700,sr
00003232 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000323C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003242 6100 E41C                  		bsr.w	NemDec
00003246 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003250 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003256 6100 E408                  		bsr.w	NemDec
0000325A 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003264 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000326A 6100 E3F4                  		bsr.w	NemDec
0000326E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003274 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000327C 4BF9 0000 05F0             		lea	(Art_Text).l,a5
00003282 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003286                            
00003286                            Title_LoadText:
00003286 2C9D                       		move.l	(a5)+,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000328C                            
0000328C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003292 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003298 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000329E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032A4 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032B0 6100 0000                  		bsr.w	LevelSizeLoad
000032B4 6100 0000                  		bsr.w	DeformBgLayer
000032B8 43F8 B000                  		lea	($FFFFB000).w,a1
000032BC 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000032C2 303C 0000                  		move.w	#0,d0
000032C6 6100 E676                  		bsr.w	EniDec
000032CA 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000032D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D6 6100 E7E4                  		bsr.w	KosDec
000032DA 6100 0000                  		bsr.w	LevelLayoutLoad
000032DE 6100 ED92                  		bsr.w	Pal_FadeFrom
000032E2 46FC 2700                  		move	#$2700,sr
000032E6 6100 E1FC                  		bsr.w	ClearScreen
000032EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000032F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032F6 47F8 F708                  		lea	($FFFFF708).w,a3
000032FA 49F8 A440                  		lea	($FFFFA440).w,a4
000032FE 343C 6000                  		move.w	#$6000,d2
00003302 6100 0000                  		bsr.w	LoadTilesFromStart2
00003306 43F9 00FF 0000             		lea	($FF0000).l,a1
0000330C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003312 303C 0000                  		move.w	#0,d0
00003316 6100 E626                  		bsr.w	EniDec
0000331A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003320 203C 4206 0003             		move.l	#$42060003,d0
00003326 7221                       		moveq	#$21,d1
00003328 7415                       		moveq	#$15,d2
0000332A 6100 E314                  		bsr.w	ShowVDPGraphics
0000332E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003338 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000333E 6100 E320                  		bsr.w	NemDec
00003342 7001                       		moveq	#1,d0		; load title screen pallet
00003344 6100 EFD6                  		bsr.w	PalLoad1
00003348 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000334C 6100 E26E                  		bsr.w	PlaySound_Special
00003350 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003356 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000335C 43F8 D080                  		lea	($FFFFD080).w,a1
00003360 7000                       		moveq	#0,d0
00003362 323C 0007                  		move.w	#7,d1
00003366                            
00003366                            Title_ClrObjRam2:
00003366 22C0                       		move.l	d0,(a1)+
00003368 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000336C                            
0000336C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003372 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003378 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000337E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003384 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000338A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003390 4EB9 0000 0000             		jsr	ObjectsLoad
00003396 6100 0000                  		bsr.w	DeformBgLayer
0000339A 4EB9 0000 0000             		jsr	BuildSprites
000033A0 7000                       		moveq	#0,d0
000033A2 6100 E42E                  		bsr.w	LoadPLC2
000033A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033AC 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033B6 0000 0040                  		ori.b	#$40,d0
000033BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000033C0 6100 EC0A                  		bsr.w	Pal_FadeTo
000033C4                            
000033C4                            loc_317C:
000033C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033CA 6100 F824                  		bsr.w	DelayProgram
000033CE 4EB9 0000 0000             		jsr	ObjectsLoad
000033D4 6100 0000                  		bsr.w	DeformBgLayer
000033D8 4EB9 0000 0000             		jsr	BuildSprites
000033DE 6100 E79C                  		bsr.w	PalCycle_Title
000033E2 6100 E428                  		bsr.w	RunPLC_RAM
000033E6 3038 D008                  		move.w	($FFFFD008).w,d0
000033EA 5440                       		addq.w	#2,d0
000033EC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033F0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033F4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033FC 4E75                       		rts	
000033FE                            ; ===========================================================================
000033FE                            
000033FE                            Title_ChkRegion:
000033FE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003402 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003404 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000340A 6000                       		bra.s	Title_EnterCheat
0000340C                            ; ===========================================================================
0000340C                            
0000340C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000340C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003412                            
00003412                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003412 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003416 D0C0                       		adda.w	d0,a0
00003418 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000341C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003420 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003422 6600                       		bne.s	loc_3210	; if not, branch
00003424 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003428 4A00                       		tst.b	d0
0000342A 6600                       		bne.s	Title_CountC
0000342C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003430 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003434 E249                       		lsr.w	#1,d1
00003436 0241 0003                  		andi.w	#3,d1
0000343A 6700                       		beq.s	Title_PlayRing
0000343C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003440 6A00                       		bpl.s	Title_PlayRing
00003442 7201                       		moveq	#1,d1
00003444 1181 1001                  		move.b	d1,1(a0,d1.w)
00003448                            
00003448                            Title_PlayRing:
00003448 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000344E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003452 6100 E168                  		bsr.w	PlaySound_Special
00003456 6000                       		bra.s	Title_CountC
00003458                            ; ===========================================================================
00003458                            
00003458                            loc_3210:				; XREF: Title_EnterCheat
00003458 4A00                       		tst.b	d0
0000345A 6700                       		beq.s	Title_CountC
0000345C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003462 6700                       		beq.s	Title_CountC
00003464 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000346A                            
0000346A                            Title_CountC:
0000346A 1038 F605                  		move.b	($FFFFF605).w,d0
0000346E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003472 6700                       		beq.s	loc_3230	; if not, branch
00003474 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003478                            
00003478                            loc_3230:
00003478 4A78 F614                  		tst.w	($FFFFF614).w
0000347C 6700 0000                  		beq.w	Demo
00003480 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003486 6700 FF3C                  		beq.w	loc_317C	; if not, branch
0000348A                            
0000348A                            Title_ChkLevSel:
0000348A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000348E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003492 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003498 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000349C 7002                       		moveq	#2,d0
0000349E 6100 EE98                  		bsr.w	PalLoad2	; load level select pallet
000034A2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034A6 7000                       		moveq	#0,d0
000034A8 323C 00DF                  		move.w	#$DF,d1
000034AC                            
000034AC                            Title_ClrScroll:
000034AC 22C0                       		move.l	d0,(a1)+
000034AE 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000034B2                            
000034B2 21C0 F616                  		move.l	d0,($FFFFF616).w
000034B6 46FC 2700                  		move	#$2700,sr
000034BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C0 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000034CA 323C 03FF                  		move.w	#$3FF,d1
000034CE                            
000034CE                            Title_ClrVram:
000034CE 2C80                       		move.l	d0,(a6)
000034D0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000034D4                            
000034D4 6100 0000                  		bsr.w	LevSelTextLoad
000034D8                            		
000034D8                            		; sound test fix
000034D8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034DC 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034E2 363C E65F                  		move.w	#$E680-$21,d3
000034E6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034EA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034EE 6000 0000                  		bra.w	LevelSelect
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            ; Level	Select
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            YouAreAnIdiot:
000034F2 6100 DFF0                  		bsr.w	ClearScreen
000034F6                            		
000034F6 4DF9 00C0 0004             		lea	($C00004).l,a6
000034FC 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003500                            		
00003500 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000350A 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003510 6100 E14E                  		bsr.w	NemDec
00003514 43F9 00FF 0000             		lea	($FF0000).l,a1
0000351A 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003520 303C 0000                  		move.w	#0,d0
00003524 6100 E418                  		bsr.w	EniDec
00003528 43F9 00FF 0000             		lea	($FF0000).l,a1
0000352E 203C 4304 0003             		move.l	#$43040003,d0
00003534 7223                       		moveq	#35,d1
00003536 740D                       		moveq	#13,d2
00003538 6100 E106                  		bsr.w	ShowVDPGraphics
0000353C 7014                       		moveq	#20,d0
0000353E 6100 EDF8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003542                            		
00003542 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
00003546 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000354A                            	@wait:
0000354A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003550 6100 F69E                  		bsr.w	DelayProgram
00003554 60F4                       		bra.s	@wait
00003556                            LevelSelect:
00003556 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000355C 6100 F692                  		bsr.w	DelayProgram
00003560 6100 0000                  		bsr.w	LevSelControls
00003564 6100 E2A6                  		bsr.w	RunPLC_RAM
00003568 4AB8 F680                  		tst.l	($FFFFF680).w
0000356C 66E8                       		bne.s	LevelSelect
0000356E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003574 67E0                       		beq.s	LevelSelect	; if not, branch
00003576 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000357A 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
0000357E 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
00003582                            		
00003582 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003586 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003588                            		
00003588 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000358C 0640 0080                  		addi.w	#$80,d0
00003590 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003594                            		
00003594 4EB9 0000 0000             		jsr		ShowNow_Playing
0000359A 60BA                       		bra.s	LevelSelect
0000359C                            ; ===========================================================================
0000359C                            
0000359C                            LevSel_Ending:				; XREF: LevelSelect
0000359C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035A2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035A8 4E75                       		rts	
000035AA                            ; ===========================================================================
000035AA                            
000035AA                            LevSel_Credits:				; XREF: LevelSelect
000035AA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000035B0 103C 0091                  		move.b	#$91,d0
000035B4 6100 E006                  		bsr.w	PlaySound_Special ; play credits music
000035B8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000035BE 4E75                       		rts	
000035C0                            ; ===========================================================================
000035C0                            
000035C0                            LevSel_Level_SS:			; XREF: LevelSelect
000035C0 D040                       		add.w	d0,d0
000035C2 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000035C6 6B00 FF8E                  		bmi.w	LevelSelect
000035CA 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000035CE 6600                       		bne.s	LevSel_Level	; if not, branch
000035D0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000035D6 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000035DA 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000035E0 7000                       		moveq	#0,d0
000035E2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035E6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035EA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035EE 4E75                       		rts	
000035F0                            ; ===========================================================================
000035F0                            
000035F0                            LevSel_Level:				; XREF: LevSel_Level_SS
000035F0 0240 3FFF                  		andi.w	#$3FFF,d0
000035F4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035F8                            
000035F8                            PlayLevel:				; XREF: ROM:00003246j ...
000035F8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035FE 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003604 7000                       		moveq	#0,d0
00003606 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000360A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000360E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003612 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003616 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000361A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000361E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003622 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003626 103C 00E0                  		move.b	#$E0,d0
0000362A 6100 DF90                  		bsr.w	PlaySound_Special ; fade out music
0000362E 4E75                       		rts	
00003630                            ; ===========================================================================
00003630                            ; ---------------------------------------------------------------------------
00003630                            ; Level	select - level pointers
00003630                            ; ---------------------------------------------------------------------------
00003630                            LSelectPointers:
00003630                            		incbin	misc\ls_point.bin
0000365A                            		even
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            ; Level	select codes
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            LevelSelectCode_J:
0000365A                            		incbin	misc\ls_jcode.bin
00003660                            		even
00003660                            
00003660                            LevelSelectCode_US:
00003660                            		incbin	misc\ls_ucode.bin
00003666                            		even
00003666                            ; ===========================================================================
00003666                            
00003666                            ; ---------------------------------------------------------------------------
00003666                            ; Demo mode
00003666                            ; ---------------------------------------------------------------------------
00003666                            
00003666                            Demo:					; XREF: TitleScreen
00003666 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000366C                            
0000366C                            loc_33B6:				; XREF: loc_33E4
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F57C                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	DeformBgLayer
0000367A 6100 E4E0                  		bsr.w	PalCycle_Load
0000367E 6100 E18C                  		bsr.w	RunPLC_RAM
00003682 3038 D008                  		move.w	($FFFFD008).w,d0
00003686 5440                       		addq.w	#2,d0
00003688 31C0 D008                  		move.w	d0,($FFFFD008).w
0000368C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003690 6500                       		bcs.s	loc_33E4
00003692 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003698 4E75                       		rts	
0000369A                            ; ===========================================================================
0000369A                            
0000369A                            loc_33E4:				; XREF: Demo
0000369A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036A0 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
000036A4 4A78 F614                  		tst.w	($FFFFF614).w
000036A8 6600 FFC2                  		bne.w	loc_33B6
000036AC 103C 00E0                  		move.b	#$E0,d0
000036B0 6100 DF0A                  		bsr.w	PlaySound_Special ; fade out music
000036B4 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000036B8 0240 0007                  		andi.w	#7,d0
000036BC D040                       		add.w	d0,d0
000036BE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000036C2 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000036C6 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000036CA 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000036D0 6500                       		bcs.s	loc_3422	; if yes, branch
000036D2 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000036D8                            
000036D8                            loc_3422:
000036D8 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000036DE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000036E4 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000036E8 6600                       		bne.s	Demo_Level	; if not, branch
000036EA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036F0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036F4 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036F8                            
000036F8                            Demo_Level:
000036F8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000036FE 7000                       		moveq	#0,d0
00003700 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003704 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003708 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000370C 4E75                       		rts	
0000370E                            ; ===========================================================================
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            ; Levels used in demos
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003716                            		even
00003716                            
00003716                            ; ---------------------------------------------------------------------------
00003716                            ; Subroutine to	change what you're selecting in the level select
00003716                            ; ---------------------------------------------------------------------------
00003716                            
00003716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003716                            
00003716                            
00003716                            LevSelControls:				; XREF: LevelSelect
00003716 1238 F605                  		move.b	($FFFFF605).w,d1
0000371A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000371E 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003720 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003724 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003726                            
00003726                            LevSel_UpDown:
00003726 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000372C 1238 F604                  		move.b	($FFFFF604).w,d1
00003730 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003734 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003736 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000373A 0801 0000                  		btst	#0,d1		; is up	pressed?
0000373E 6700                       		beq.s	LevSel_Down	; if not, branch
00003740 5346                       		subq.w	#1,d6		; move up 1 selection
00003742 6400                       		bcc.s	LevSel_Down
00003744 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003746                            
00003746                            LevSel_Down:
00003746 0801 0001                  		btst	#1,d1		; is down pressed?
0000374A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000374C 5246                       		addq.w	#1,d6		; move down 1 selection
0000374E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003752 6500                       		bcs.s	LevSel_Refresh
00003754 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003756 6000                       		bra.s	LevSel_Refresh
00003758                            		
00003758                            LevSel_GoLR:
00003758 0801 0002                  		btst	#2,d1		; is left pressed?
0000375C 6700                       		beq.s	LevSel_GoRight	; if not, branch
0000375E 0446 0000                  		sub.w	#lsrow2size,d6
00003762 64E2                       		bcc.s	LevSel_Down
00003764 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003768 6000                       		bra.s	LevSel_Refresh
0000376A                            LevSel_GoRight:
0000376A 0646 0000                  		add.w	#lsrow1size,d6
0000376E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003772 6500                       		bcs.s	LevSel_Refresh
00003774 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003778                            ; ===========================================================================
00003778                            LevSel_Refresh:
00003778 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000377C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003780 363C C65F                  		move.w	#$C680-$21,d3
00003784 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003788 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000378C 4E75                       		rts	
0000378E                            		
0000378E                            LevSel_SndTest:				; XREF: LevSelControls
0000378E 1238 F605                  		move.b	($FFFFF605).w,d1
00003792 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003796 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003798 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
0000379E 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037A0                            		
000037A0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037A4 0801 0002                  		btst	#2,d1		; is left pressed?
000037A8 6700                       		beq.s	LevSel_Right	; if not, branch
000037AA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000037AC 6400                       		bcc.s	LevSel_Right
000037AE 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000037B0                            
000037B0                            LevSel_Right:
000037B0 0801 0003                  		btst	#3,d1		; is right pressed?
000037B4 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000037B6 5240                       		addq.w	#1,d0		; add 1	to sound test
000037B8 0C40 0050                  		cmpi.w	#$50,d0
000037BC 6500                       		bcs.s	LevSel_Refresh2
000037BE 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000037C0                            
000037C0                            LevSel_Refresh2:
000037C0 363C C65F                  		move.w	#$C680-$21,d3
000037C4 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000037C8 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037CC                            
000037CC                            LevSel_NoMove:
000037CC 4E75                       		rts	
000037CE                            ; End of function LevSelControls
000037CE                            
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            ; Subroutine to load level select text
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            
000037CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037CE =60860003                  lsscrpos = $60860003
000037CE =00240000                  lsoff = $240000
000037CE =64C00003                  lsstpos = lsscrpos+$43A0000
000037CE                            
000037CE                            LevSelTextLoad_loop:
000037CE 2D44 0004                  		move.l	d4,4(a6)
000037D2 6100 0000                  		bsr.w	LevSel_ChgLine
000037D6 0684 0080 0000             		addi.l	#$800000,d4
000037DC 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037E0 4E75                       		rts
000037E2                            LevSelTextLoad:				; XREF: TitleScreen
000037E2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000037EE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037F2 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037F8                            		
000037F8 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037FC 61D0                       		bsr.s	LevSelTextLoad_loop
000037FE                            		
000037FE                            		
000037FE 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003804 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003808 61C4                       		bsr.s	LevSelTextLoad_loop
0000380A 363C C65F                  		move.w	#$C680-$21,d3
0000380E                            		
0000380E                            LevSelHighlightCode:
0000380E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003814 7000                       		moveq	#0,d0
00003816 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000381A 3200                       		move.w	d0,d1
0000381C 283C 6086 0003             		move.l	#lsscrpos,d4
00003822                            		
00003822 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003826 6D00                       		blt.s	@notsecond
00003828                            		
00003828 0440 0000                  		sub.w	#lsrow1size,d0
0000382C 0684 0024 0000             		addi.l	#lsoff,d4
00003832                            	@notsecond:
00003832 EF48                       		lsl.w	#7,d0
00003834 4840                       		swap	d0
00003836 D880                       		add.l	d0,d4
00003838 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000383E E749                       		lsl.w	#3,d1
00003840 D241                       		add.w	d1,d1
00003842 D2C1                       		adda.w	d1,a1
00003844 2D44 0004                  		move.l	d4,4(a6)
00003848 6100 0000                  		bsr.w	LevSel_ChgLine
0000384C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003852 6700                       		beq.s	LevSelSndTest
00003854 4E75                       		rts
00003856                            
00003856                            LevSelSndTest:
00003856 0643 0030                  		add.w	#$30,d3
0000385A 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003864 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003868 0640 0080                  		addi.w	#$80,d0
0000386C 1400                       		move.b	d0,d2
0000386E E808                       		lsr.b	#4,d0
00003870 6100 0000                  		bsr.w	LevSel_ChgSnd
00003874 1002                       		move.b	d2,d0
00003876 6100 0000                  		bsr.w	LevSel_ChgSnd
0000387A 4E75                       		rts	
0000387C                            ; End of function LevSelTextLoad
0000387C                            
0000387C                            
0000387C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000387C                            
0000387C                            
0000387C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000387C 0240 000F                  		andi.w	#$F,d0
00003880 0C00 000A                  		cmpi.b	#$A,d0
00003884 6500                       		bcs.s	loc_3580
00003886 5E00                       		addi.b	#7,d0
00003888                            
00003888                            loc_3580:
00003888 D043                       		add.w	d3,d0
0000388A 3C80                       		move.w	d0,(a6)
0000388C 4E75                       		rts	
0000388E                            ; End of function LevSel_ChgSnd
0000388E                            
0000388E                            
0000388E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000388E                            
0000388E                            
0000388E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000388E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003890                            
00003890                            @loop:
00003890 7000                       		moveq	#0,d0
00003892 1019                       		move.b	(a1)+,d0
00003894 0C00 0020                  		cmpi.b	#$20,d0
00003898 6E00                       		bgt.s	@draw
0000389A 3CBC 0000                  		move.w	#0,(a6)
0000389E 51CA FFF0                  		dbf	d2,@loop
000038A2 4E75                       		rts	
000038A4                            ; ===========================================================================
000038A4                            
000038A4                            @draw:				; XREF: LevSel_ChgLine
000038A4 D043                       		add.w	d3,d0
000038A6 3C80                       		move.w	d0,(a6)
000038A8 51CA FFE6                  		dbf	d2,@loop
000038AC 4E75                       		rts	
000038AE                            ; End of function LevSel_ChgLine
000038AE                            		
000038AE                            CStringSlop_draw:
000038AE D043                       		add.w	d3,d0
000038B0 3C80                       		move.w	d0,(a6)
000038B2                            CStringSlop:				; XREF: LevSelTextLoad
000038B2 7000                       		moveq	#0,d0
000038B4 1019                       		move.b	(a1)+,d0
000038B6 0C00 0020                  		cmpi.b	#$20,d0
000038BA 6EF2                       		bgt.s	CStringSlop_draw
000038BC 4A00                       		tst.b	d0
000038BE 6700                       		beq.s	@end
000038C0 3CBC 0000                  		move.w	#0,(a6)
000038C4 60EC                       		bra.s	CStringSlop
000038C6                            	@end:
000038C6 4E75                       		rts
000038C8                            ; End of function LevSel_ChgLine
000038C8                            
000038C8                            ; ===========================================================================
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            LevelMenuText:	
000038C8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000038D8 2020 2020 2020 2020 2020+          dc.b    "               2"
000038E8 2020 2020 2020 2020 2020+          dc.b    "               3"
000038F8 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
00003908 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
00003918 2020 2020 2020 2020 2020+          dc.b    "               3"
00003928 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003938 2020 2020 2020 2020 2020+          dc.b    "               2"
00003948 2020 2020 2020 2020 2020+          dc.b    "               3"
00003958 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
00003968 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
00003978 2020 2020 2020 2020 2020+          dc.b    "               3"
00003988                            LMTSecondRow:
00003988 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003998 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
000039A8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B8 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000039C8 2020 2020 2020 2020 2020+          dc.b    "               2"
000039D8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000039F8 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A08 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A18 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A28 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A38                            LMTSelectableEnd:
00003A38 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A48                            LMTEnd:
00003A48                            
00003A48                            
00003A48 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003A48 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003A48 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003A48                            ; just to not break these
00003A48 =00000014                  lssndtest = lsrow2size+8
00003A48 =00000015                  lswifi = lsrow2size+9
00003A48                            
00003A48 =6C820003                  nppos = $6C820003
00003A48                            Now_Playing:
00003A48 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A58                            		even
00003A58                            NP_Track:
00003A58 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A60                            		even
00003A60                            NP_SFX:
00003A60 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003A68                            		even
00003A68                            
00003A68                            ShowNow_Playing:
00003A68 1C00                       		move.b	d0,d6
00003A6A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003A6E 43FA FFD8                  		lea	Now_Playing(pc),a1
00003A72 4DF9 00C0 0000             		lea		($C00000).l,a6
00003A78 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003A80 6100 FE30                  		bsr.w	CStringSlop
00003A84                            		
00003A84 43FA FFD2                  		lea	NP_Track(pc),a1
00003A88 0C06 00A0                  		cmpi.b	#$A0,d6
00003A8C 6D00                       		blt.s	@track
00003A8E                            		
00003A8E 43FA FFD0                  		lea	NP_SFX(pc),a1
00003A92                            	@track:
00003A92 6100 FE1E                  		bsr.w	CStringSlop
00003A96                            		
00003A96 0643 0030                  		add.w	#$30,d3
00003A9A 1006                       		move.b	d6,d0
00003A9C 1400                       		move.b	d0,d2
00003A9E E808                       		lsr.b	#4,d0
00003AA0 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003AA4 1002                       		move.b	d2,d0
00003AA6 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003AAA 4E75                       		rts	
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            ; Music	playlist
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            MusicList1:	incbin	misc\muslist1.bin
00003AB4                            		even
00003AB4                            MusicList2:	incbin	misc\muslist2.bin
00003ABA                            		even
00003ABA                            MusicList3:	incbin	misc\muslist3.bin
00003AC0                            		even
00003AC0                            MusicList4:	incbin	misc\muslist4.bin
00003AC6                            		even
00003AC6                            ; ===========================================================================
00003AC6                            
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            ; Level
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            
00003AC6                            Level:					; XREF: GameModeArray
00003AC6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003ACC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AD0 6B00                       		bmi.s	loc_37B6
00003AD2 103C 00E0                  		move.b	#$E0,d0
00003AD6 6100 DAE4                  		bsr.w	PlaySound_Special ; fade out music
00003ADA                            
00003ADA                            loc_37B6:
00003ADA 6100 DD22                  		bsr.w	ClearPLC
00003ADE 6100 E592                  		bsr.w	Pal_FadeFrom
00003AE2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AE6 6B00                       		bmi.s	Level_ClrRam
00003AE8 46FC 2700                  		move	#$2700,sr
00003AEC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003AF6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003AFC 6100 DB62                  		bsr.w	NemDec
00003B00 46FC 2300                  		move	#$2300,sr
00003B04 7000                       		moveq	#0,d0
00003B06 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B0A E948                       		lsl.w	#4,d0
00003B0C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B12 45F2 0000                  		lea	(a2,d0.w),a2
00003B16 7000                       		moveq	#0,d0
00003B18 1012                       		move.b	(a2),d0
00003B1A 6700                       		beq.s	loc_37FC
00003B1C 6100 DC82                  		bsr.w	LoadPLC		; load level patterns
00003B20                            
00003B20                            loc_37FC:
00003B20 7001                       		moveq	#1,d0
00003B22 6100 DC7C                  		bsr.w	LoadPLC		; load standard	patterns
00003B26                            
00003B26                            Level_ClrRam:
00003B26 43F8 D000                  		lea	($FFFFD000).w,a1
00003B2A 7000                       		moveq	#0,d0
00003B2C 323C 07FF                  		move.w	#$7FF,d1
00003B30                            
00003B30                            Level_ClrObjRam:
00003B30 22C0                       		move.l	d0,(a1)+
00003B32 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B36                            
00003B36 43F8 F628                  		lea	($FFFFF628).w,a1
00003B3A 7000                       		moveq	#0,d0
00003B3C 323C 0015                  		move.w	#$15,d1
00003B40                            
00003B40                            Level_ClrVars:
00003B40 22C0                       		move.l	d0,(a1)+
00003B42 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B46                            
00003B46 43F8 F700                  		lea	($FFFFF700).w,a1
00003B4A 7000                       		moveq	#0,d0
00003B4C 323C 003F                  		move.w	#$3F,d1
00003B50                            
00003B50                            Level_ClrVars2:
00003B50 22C0                       		move.l	d0,(a1)+
00003B52 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003B56                            
00003B56 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003B5A 7000                       		moveq	#0,d0
00003B5C 323C 0047                  		move.w	#$47,d1
00003B60                            
00003B60                            Level_ClrVars3:
00003B60 22C0                       		move.l	d0,(a1)+
00003B62 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003B66                            
00003B66 46FC 2700                  		move	#$2700,sr
00003B6A 6100 D978                  		bsr.w	ClearScreen
00003B6E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003B74 3CBC 8B03                  		move.w	#$8B03,(a6)
00003B78 3CBC 8230                  		move.w	#$8230,(a6)
00003B7C 3CBC 8407                  		move.w	#$8407,(a6)
00003B80 3CBC 857C                  		move.w	#$857C,(a6)
00003B84 3CBC 9001                  		move.w	#$9001,(a6)
00003B88 3CBC 8004                  		move.w	#$8004,(a6)
00003B8C 3CBC 8720                  		move.w	#$8720,(a6)
00003B90 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003B96 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BA0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003BA2 3CBC 8014                  		move.w	#$8014,(a6)
00003BA6 7000                       		moveq	#0,d0
00003BA8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003BAC D040                       		add.w	d0,d0
00003BAE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003BB4 3031 0000                  		move.w	(a1,d0.w),d0
00003BB8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003BBC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003BC0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003BC4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003BC8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003BCC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003BD2                            
00003BD2                            Level_LoadPal:
00003BD2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003BD8 46FC 2300                  		move	#$2300,sr
00003BDC 7003                       		moveq	#3,d0
00003BDE 6100 E758                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003BE2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BE8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003BEA 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003BEC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003BF2 6600                       		bne.s	Level_WaterPal	; if not, branch
00003BF4 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003BF6                            
00003BF6                            Level_WaterPal:
00003BF6 6100 E758                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003BFA 4A38 FE30                  		tst.b	($FFFFFE30).w
00003BFE 6700                       		beq.s	Level_GetBgm
00003C00 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C06                            
00003C06                            ; NineKode begins here - How to play different songs on different acts
00003C06                             
00003C06                            Level_GetBgm:
00003C06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C0A 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C0E 7000                       		moveq	#0,d0
00003C10 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C14                             
00003C14 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C1A 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C1C 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003C22 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C24                             
00003C24                            Level_GetBgm2:
00003C24 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003C2A 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003C2C 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003C32 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C34                             
00003C34                            Level_GetBgm3:
00003C34 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003C3A 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003C3C 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003C42 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C44                             
00003C44                            Level_GetBgm4:
00003C44 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003C4A 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003C4C 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003C52                             
00003C52                            Level_PlayBgm:
00003C52 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003C56 6100 D95E                  		bsr.w	PlaySound	; play music
00003C5A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003C60                             
00003C60                            ; NineKode ends here
00003C60                            
00003C60                            Level_TtlCard:
00003C60 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003C66 6100 EF88                  		bsr.w	DelayProgram
00003C6A 4EB9 0000 0000             		jsr	ObjectsLoad
00003C70 4EB9 0000 0000             		jsr	BuildSprites
00003C76 6100 DB94                  		bsr.w	RunPLC_RAM
00003C7A 3038 D108                  		move.w	($FFFFD108).w,d0
00003C7E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003C82 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003C84 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003C88 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003C8A 4EB9 0000 0000             		jsr	Hud_Base
00003C90                            
00003C90                            loc_3946:
00003C90 7003                       		moveq	#3,d0
00003C92 6100 E688                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003C96 6100 0000                  		bsr.w	LevelSizeLoad
00003C9A 6100 0000                  		bsr.w	DeformBgLayer
00003C9E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003CA4 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003CA8 6100 0000                  		bsr.w	LoadTilesFromStart
00003CAC 4EB9 0000 0000             		jsr	FloorLog_Unk
00003CB2 6100 0000                  		bsr.w	ColIndexLoad
00003CB6 6100 0000                  		bsr.w	LZWaterEffects
00003CBA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003CC0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CC4 6B00                       		bmi.s	Level_ChkDebug
00003CC6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003CCC                            
00003CCC                            Level_ChkDebug:
00003CCC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003CD0 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CD2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003CD8 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CDA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003CE0                            
00003CE0                            Level_ChkWater:
00003CE0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003CE6 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003CEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CF2 6600                       		bne.s	Level_LoadObj	; if not, branch
00003CF4 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003CFA 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D00 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D06 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D0C                            
00003D0C                            Level_LoadObj:
00003D0C 4EB9 0000 0000             		jsr	ObjPosLoad
00003D12 4EB9 0000 0000             		jsr	ObjectsLoad
00003D18 4EB9 0000 0000             		jsr	BuildSprites
00003D1E 7000                       		moveq	#0,d0
00003D20 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003D24 6600                       		bne.s	loc_39E8	; if yes, branch
00003D26 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D2A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D2E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003D32                            
00003D32                            loc_39E8:
00003D32 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003D36 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003D3A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003D3E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003D42                            		; move.b	d0,($FFFFFE2F).w
00003D42 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003D48 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003D4C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003D50 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003D54 6100 0000                  		bsr.w	OscillateNumInit
00003D58 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003D5E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003D64 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003D6A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003D70 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003D76 7000                       		moveq	#0,d0
00003D78 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D7C E548                       		lsl.w	#2,d0
00003D7E 2271 0000                  		movea.l	(a1,d0.w),a1
00003D82 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003D86 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003D88 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003D8E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003D92 5340                       		subq.w	#1,d0
00003D94 E548                       		lsl.w	#2,d0
00003D96 2271 0000                  		movea.l	(a1,d0.w),a1
00003D9A                            
00003D9A                            Level_Demo:
00003D9A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003DA0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003DA4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003DAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DAE 6A00                       		bpl.s	Level_ChkWaterPal
00003DB0 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003DB6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003DBC 6600                       		bne.s	Level_ChkWaterPal
00003DBE 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003DC4                            
00003DC4                            Level_ChkWaterPal:
00003DC4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003DCA 6600                       		bne.s	Level_Delay	; if not, branch
00003DCC 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003DCE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003DD4 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003DD6 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003DD8                            
00003DD8                            Level_WaterPal2:
00003DD8 6100 E592                  		bsr.w	PalLoad4_Water
00003DDC                            
00003DDC                            Level_Delay:
00003DDC 323C 0003                  		move.w	#3,d1
00003DE0                            
00003DE0                            Level_DelayLoop:
00003DE0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DE6 6100 EE08                  		bsr.w	DelayProgram
00003DEA 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003DEE                            
00003DEE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003DF4 6100 E1DC                  		bsr.w	Pal_FadeTo2
00003DF8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFC 6B00                       		bmi.s	Level_ClrCardArt
00003DFE 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E02 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E06 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E0A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E0E 6000                       		bra.s	Level_StartGame
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            Level_ClrCardArt:
00003E10 7002                       		moveq	#2,d0
00003E12 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003E18 7000                       		moveq	#0,d0
00003E1A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E1E 0640 0015                  		addi.w	#$15,d0
00003E22 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003E28                            
00003E28                            Level_StartGame:
00003E28 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003E2E                            
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            ; Main level loop (when	all title card and loading sequences are finished)
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            
00003E2E                            Level_MainLoop:
00003E2E 6100 D798                  		bsr.w	PauseGame
00003E32 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E38 6100 EDB6                  		bsr.w	DelayProgram
00003E3C 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003E40 6100 0000                  		bsr.w	MoveSonicInDemo
00003E44 6100 0000                  		bsr.w	LZWaterEffects
00003E48 4EB9 0000 0000             		jsr	ObjectsLoad
00003E4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00003E52 6600                       		bne.s	loc_3B10
00003E54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E5A 6400                       		bcc.s	loc_3B14
00003E5C                            
00003E5C                            loc_3B10:
00003E5C 6100 0000                  		bsr.w	DeformBgLayer
00003E60                            
00003E60                            loc_3B14:
00003E60 4EB9 0000 0000             		jsr	BuildSprites
00003E66 4EB9 0000 0000             		jsr	ObjPosLoad
00003E6C 6100 DCEE                  		bsr.w	PalCycle_Load
00003E70 6100 D99A                  		bsr.w	RunPLC_RAM
00003E74 6100 0000                  		bsr.w	OscillateNumDo
00003E78 6100 0000                  		bsr.w	ChangeRingFrame
00003E7C 6100 0000                  		bsr.w	SignpostArtLoad
00003E80 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E86 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003E88 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003E8C 6600 FC38                  		bne.w	Level		; if yes, branch
00003E90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003E96 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003E9A 4E75                       		rts	
00003E9C                            ; ===========================================================================
00003E9C                            
00003E9C                            Level_ChkDemo:				; XREF: Level_MainLoop
00003E9C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003EA0 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003EA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003EA6 6700                       		beq.s	Level_EndDemo	; if not, branch
00003EA8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003EAE 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003EB2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EB8 4E75                       		rts	
00003EBA                            ; ===========================================================================
00003EBA                            
00003EBA                            Level_EndDemo:				; XREF: Level_ChkDemo
00003EBA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003EC0 6600                       		bne.s	loc_3B88	; if not, branch
00003EC2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003ECC 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003ECE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003ED4                            
00003ED4                            loc_3B88:
00003ED4 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003EDA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003EE0 4278 F794                  		clr.w	($FFFFF794).w
00003EE4                            
00003EE4                            loc_3B98:
00003EE4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EEA 6100 ED04                  		bsr.w	DelayProgram
00003EEE 6100 0000                  		bsr.w	MoveSonicInDemo
00003EF2 4EB9 0000 0000             		jsr	ObjectsLoad
00003EF8 4EB9 0000 0000             		jsr	BuildSprites
00003EFE 4EB9 0000 0000             		jsr	ObjPosLoad
00003F04 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F08 6A00                       		bpl.s	loc_3BC8
00003F0A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F10 6100 E180                  		bsr.w	Pal_FadeOut
00003F14                            
00003F14                            loc_3BC8:
00003F14 4A78 F614                  		tst.w	($FFFFF614).w
00003F18 66CA                       		bne.s	loc_3B98
00003F1A 4E75                       		rts	
00003F1C                            ; ===========================================================================
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            
00003F1C                            LZWaterEffects:				; XREF: Level
00003F1C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003F22 6600                       		bne.s	locret_3C28	; if not, branch
00003F24 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F2A 6400                       		bcc.s	LZMoveWater
00003F2C 6100 0000                  		bsr.w	LZWindTunnels
00003F30 6100 0000                  		bsr.w	LZWaterSlides
00003F34 6100 0000                  		bsr.w	LZDynamicWater
00003F38                            
00003F38                            LZMoveWater:
00003F38 4238 F64E                  		clr.b	($FFFFF64E).w
00003F3C 7000                       		moveq	#0,d0
00003F3E 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003F42 E248                       		lsr.w	#1,d0
00003F44 D078 F648                  		add.w	($FFFFF648).w,d0
00003F48 31C0 F646                  		move.w	d0,($FFFFF646).w
00003F4C 3038 F646                  		move.w	($FFFFF646).w,d0
00003F50 9078 F704                  		sub.w	($FFFFF704).w,d0
00003F54 6400                       		bcc.s	loc_3C1A
00003F56 4A40                       		tst.w	d0
00003F58 6A00                       		bpl.s	loc_3C1A
00003F5A 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003F60 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003F66                            
00003F66                            loc_3C1A:
00003F66 0C40 00DF                  		cmpi.w	#$DF,d0
00003F6A 6500                       		bcs.s	loc_3C24
00003F6C 303C 00DF                  		move.w	#$DF,d0
00003F70                            
00003F70                            loc_3C24:
00003F70 11C0 F625                  		move.b	d0,($FFFFF625).w
00003F74                            
00003F74                            locret_3C28:
00003F74 4E75                       		rts	
00003F76                            ; ===========================================================================
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            ; Labyrinth default water heights
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            WaterHeight:	incbin	misc\lz_heigh.bin
00003F7E                            		even
00003F7E                            ; ===========================================================================
00003F7E                            
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            ; Labyrinth dynamic water routines
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            
00003F7E                            LZDynamicWater:				; XREF: LZWaterEffects
00003F7E 7000                       		moveq	#0,d0
00003F80 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F84 D040                       		add.w	d0,d0
00003F86 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003F8A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003F8E 7200                       		moveq	#0,d1
00003F90 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003F94 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003F98 9078 F648                  		sub.w	($FFFFF648).w,d0
00003F9C 6700                       		beq.s	locret_3C5A
00003F9E 6400                       		bcc.s	loc_3C56
00003FA0 4441                       		neg.w	d1
00003FA2                            
00003FA2                            loc_3C56:
00003FA2 D378 F648                  		add.w	d1,($FFFFF648).w
00003FA6                            
00003FA6                            locret_3C5A:
00003FA6 4E75                       		rts	
00003FA8                            ; ===========================================================================
00003FA8 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003FAA 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003FAC 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003FAE 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003FB0                            ; ===========================================================================
00003FB0                            
00003FB0                            DynWater_LZ1:				; XREF: DynWater_Index
00003FB0 3038 F700                  		move.w	($FFFFF700).w,d0
00003FB4 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003FB8 6600                       		bne.s	loc_3CD0
00003FBA 323C 00B8                  		move.w	#$B8,d1
00003FBE 0C40 0600                  		cmpi.w	#$600,d0
00003FC2 6500                       		bcs.s	loc_3CB4
00003FC4 323C 0108                  		move.w	#$108,d1
00003FC8 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003FCE 6500                       		bcs.s	loc_3CBA
00003FD0 0C40 0C00                  		cmpi.w	#$C00,d0
00003FD4 6500                       		bcs.s	loc_3CB4
00003FD6 323C 0318                  		move.w	#$318,d1
00003FDA 0C40 1080                  		cmpi.w	#$1080,d0
00003FDE 6500                       		bcs.s	loc_3CB4
00003FE0 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003FE6 323C 05C8                  		move.w	#$5C8,d1
00003FEA 0C40 1380                  		cmpi.w	#$1380,d0
00003FEE 6500                       		bcs.s	loc_3CB4
00003FF0 323C 03A8                  		move.w	#$3A8,d1
00003FF4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003FF8 6600                       		bne.s	loc_3CB4
00003FFA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004000                            
00004000                            loc_3CB4:
00004000 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004004 4E75                       		rts	
00004006                            ; ===========================================================================
00004006                            
00004006                            loc_3CBA:				; XREF: DynWater_LZ1
00004006 0C40 0C80                  		cmpi.w	#$C80,d0
0000400A 65F4                       		bcs.s	loc_3CB4
0000400C 323C 00E8                  		move.w	#$E8,d1
00004010 0C40 1500                  		cmpi.w	#$1500,d0
00004014 65EA                       		bcs.s	loc_3CB4
00004016 323C 0108                  		move.w	#$108,d1
0000401A 60E4                       		bra.s	loc_3CB4
0000401C                            ; ===========================================================================
0000401C                            
0000401C                            loc_3CD0:				; XREF: DynWater_LZ1
0000401C 5302                       		subq.b	#1,d2
0000401E 6600                       		bne.s	locret_3CF4
00004020 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004026 6400                       		bcc.s	locret_3CF4
00004028 323C 03A8                  		move.w	#$3A8,d1
0000402C 0C40 1300                  		cmpi.w	#$1300,d0
00004030 6500                       		bcs.s	loc_3CF0
00004032 323C 0108                  		move.w	#$108,d1
00004036 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000403C                            
0000403C                            loc_3CF0:
0000403C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004040                            
00004040                            locret_3CF4:
00004040 4E75                       		rts	
00004042                            ; ===========================================================================
00004042                            
00004042                            DynWater_LZ2:				; XREF: DynWater_Index
00004042 3038 F700                  		move.w	($FFFFF700).w,d0
00004046 323C 0328                  		move.w	#$328,d1
0000404A 0C40 0500                  		cmpi.w	#$500,d0
0000404E 6500                       		bcs.s	loc_3D12
00004050 323C 03C8                  		move.w	#$3C8,d1
00004054 0C40 0B00                  		cmpi.w	#$B00,d0
00004058 6500                       		bcs.s	loc_3D12
0000405A 323C 0428                  		move.w	#$428,d1
0000405E                            
0000405E                            loc_3D12:
0000405E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004062 4E75                       		rts	
00004064                            ; ===========================================================================
00004064                            
00004064                            DynWater_LZ3:				; XREF: DynWater_Index
00004064 3038 F700                  		move.w	($FFFFF700).w,d0
00004068 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000406C 6600                       		bne.s	loc_3D5E
0000406E 323C 0900                  		move.w	#$900,d1
00004072 0C40 0600                  		cmpi.w	#$600,d0
00004076 6500                       		bcs.s	loc_3D54
00004078 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000407E 6500                       		bcs.s	loc_3D54
00004080 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004086 6400                       		bcc.s	loc_3D54
00004088 323C 04C8                  		move.w	#$4C8,d1
0000408C 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004092 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004098 303C 00B7                  		move.w	#$B7,d0
0000409C 6100 D51E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000040A0                            
000040A0                            loc_3D54:
000040A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000040A8 4E75                       		rts	
000040AA                            ; ===========================================================================
000040AA                            
000040AA                            loc_3D5E:				; XREF: DynWater_LZ3
000040AA 5302                       		subq.b	#1,d2
000040AC 6600                       		bne.s	loc_3DA8
000040AE 323C 04C8                  		move.w	#$4C8,d1
000040B2 0C40 0770                  		cmpi.w	#$770,d0
000040B6 6500                       		bcs.s	loc_3DA2
000040B8 323C 0308                  		move.w	#$308,d1
000040BC 0C40 1400                  		cmpi.w	#$1400,d0
000040C0 6500                       		bcs.s	loc_3DA2
000040C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000040C8 6700                       		beq.s	loc_3D8E
000040CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000040D0 6400                       		bcc.s	loc_3D8E
000040D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000040D8 6400                       		bcc.s	loc_3DA2
000040DA                            
000040DA                            loc_3D8E:
000040DA 323C 0508                  		move.w	#$508,d1
000040DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000040E2 0C40 1770                  		cmpi.w	#$1770,d0
000040E6 6500                       		bcs.s	loc_3DA2
000040E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040EE                            
000040EE                            loc_3DA2:
000040EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040F2 4E75                       		rts	
000040F4                            ; ===========================================================================
000040F4                            
000040F4                            loc_3DA8:
000040F4 5302                       		subq.b	#1,d2
000040F6 6600                       		bne.s	loc_3DD2
000040F8 323C 0508                  		move.w	#$508,d1
000040FC 0C40 1860                  		cmpi.w	#$1860,d0
00004100 6500                       		bcs.s	loc_3DCC
00004102 323C 0188                  		move.w	#$188,d1
00004106 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000410A 6400                       		bcc.s	loc_3DC6
0000410C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004110 6600                       		bne.s	loc_3DCC
00004112                            
00004112                            loc_3DC6:
00004112 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004118                            
00004118                            loc_3DCC:
00004118 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000411C 4E75                       		rts	
0000411E                            ; ===========================================================================
0000411E                            
0000411E                            loc_3DD2:
0000411E 5302                       		subq.b	#1,d2
00004120 6600                       		bne.s	loc_3E0E
00004122 323C 0188                  		move.w	#$188,d1
00004126 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000412A 6500                       		bcs.s	loc_3E04
0000412C 323C 0900                  		move.w	#$900,d1
00004130 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004134 6500                       		bcs.s	loc_3E04
00004136 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000413C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004142 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004148 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000414E 4E75                       		rts	
00004150                            ; ===========================================================================
00004150                            
00004150                            loc_3E04:
00004150 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004154 31C1 F648                  		move.w	d1,($FFFFF648).w
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            loc_3E0E:
0000415A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000415E 6500                       		bcs.s	locret_3E1A
00004160 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004166                            
00004166                            locret_3E1A:
00004166 4E75                       		rts	
00004168                            ; ===========================================================================
00004168                            
00004168                            DynWater_SBZ3:				; XREF: DynWater_Index
00004168 323C 0228                  		move.w	#$228,d1
0000416C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004172 6500                       		bcs.s	loc_3E2C
00004174 323C 04C8                  		move.w	#$4C8,d1
00004178                            
00004178                            loc_3E2C:
00004178 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000417C 4E75                       		rts
0000417E                            
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            
0000417E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000417E                            
0000417E                            
0000417E                            LZWindTunnels:				; XREF: LZWaterEffects
0000417E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004182 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004186 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000418C 7000                       		moveq	#0,d0
0000418E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004192 E748                       		lsl.w	#3,d0
00004194 D4C0                       		adda.w	d0,a2
00004196 7200                       		moveq	#0,d1
00004198 4A38 FE11                  		tst.b	($FFFFFE11).w
0000419C 6600                       		bne.s	loc_3E56
0000419E 7201                       		moveq	#1,d1
000041A0 514A                       		subq.w	#8,a2
000041A2                            
000041A2                            loc_3E56:
000041A2 43F8 D000                  		lea	($FFFFD000).w,a1
000041A6                            
000041A6                            LZWind_Loop:
000041A6 3029 0008                  		move.w	8(a1),d0
000041AA B052                       		cmp.w	(a2),d0
000041AC 6500 0000                  		bcs.w	loc_3EF4
000041B0 B06A 0004                  		cmp.w	4(a2),d0
000041B4 6400 0000                  		bcc.w	loc_3EF4
000041B8 3429 000C                  		move.w	$C(a1),d2
000041BC B46A 0002                  		cmp.w	2(a2),d2
000041C0 6500                       		bcs.s	loc_3EF4
000041C2 B46A 0006                  		cmp.w	6(a2),d2
000041C6 6400                       		bcc.s	loc_3EF4
000041C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000041CC 0200 003F                  		andi.b	#$3F,d0
000041D0 6600                       		bne.s	loc_3E90
000041D2 303C 00D0                  		move.w	#$D0,d0
000041D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
000041DC                            
000041DC                            loc_3E90:
000041DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000041E0 6600 0000                  		bne.w	locret_3F0A
000041E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000041EA 6400                       		bcc.s	loc_3F06
000041EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000041F2 0440 0080                  		subi.w	#$80,d0
000041F6 B052                       		cmp.w	(a2),d0
000041F8 6400                       		bcc.s	LZWind_Move
000041FA 7002                       		moveq	#2,d0
000041FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004202 6600                       		bne.s	loc_3EBA
00004204 4440                       		neg.w	d0
00004206                            
00004206                            loc_3EBA:
00004206 D169 000C                  		add.w	d0,$C(a1)
0000420A                            
0000420A                            LZWind_Move:
0000420A 5869 0008                  		addq.w	#4,8(a1)
0000420E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004214 337C 0000 0012             		move.w	#0,$12(a1)
0000421A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004220 08E9 0001 0022             		bset	#1,$22(a1)
00004226 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000422C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000422E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004232                            
00004232                            LZWind_MoveDown:
00004232 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004238 6700                       		beq.s	locret_3EF2	; if not, branch
0000423A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000423E                            
0000423E                            locret_3EF2:
0000423E 4E75                       		rts	
00004240                            ; ===========================================================================
00004240                            
00004240                            loc_3EF4:				; XREF: LZWindTunnels
00004240 504A                       		addq.w	#8,a2
00004242 51C9 FF62                  		dbf	d1,LZWind_Loop
00004246 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000424A 6700                       		beq.s	locret_3F0A
0000424C 137C 0000 001C             		move.b	#0,$1C(a1)
00004252                            
00004252                            loc_3F06:
00004252 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004256                            
00004256                            locret_3F0A:
00004256 4E75                       		rts	
00004258                            ; End of function LZWindTunnels
00004258                            
00004258                            ; ===========================================================================
00004258 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004260 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004272 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004280                            					; XREF: LZWindTunnels
00004280                            		even
00004280                            
00004280                            ; ---------------------------------------------------------------------------
00004280                            ; Labyrinth Zone water slide subroutine
00004280                            ; ---------------------------------------------------------------------------
00004280                            
00004280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004280                            
00004280                            
00004280                            LZWaterSlides:				; XREF: LZWaterEffects
00004280 43F8 D000                  		lea	($FFFFD000).w,a1
00004284 0829 0001 0022             		btst	#1,$22(a1)
0000428A 6600                       		bne.s	loc_3F6A
0000428C 3029 000C                  		move.w	$C(a1),d0
00004290 E248                       		lsr.w	#1,d0
00004292 0240 0380                  		andi.w	#$380,d0
00004296 1229 0008                  		move.b	8(a1),d1
0000429A 0241 007F                  		andi.w	#$7F,d1
0000429E D041                       		add.w	d1,d0
000042A0 45F8 A400                  		lea	($FFFFA400).w,a2
000042A4 1032 0000                  		move.b	(a2,d0.w),d0
000042A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000042AC 7206                       		moveq	#6,d1
000042AE                            
000042AE                            loc_3F62:
000042AE B022                       		cmp.b	-(a2),d0
000042B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000042B4 6700                       		beq.s	LZSlide_Move
000042B6                            
000042B6                            loc_3F6A:
000042B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000042BA 6700                       		beq.s	locret_3F7A
000042BC 337C 0005 003E             		move.w	#5,$3E(a1)
000042C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000042C6                            
000042C6                            locret_3F7A:
000042C6 4E75                       		rts	
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            LZSlide_Move:				; XREF: LZWaterSlides
000042C8 0C41 0003                  		cmpi.w	#3,d1
000042CC 6400                       		bcc.s	loc_3F84
000042CE 4E71                       		nop	
000042D0                            
000042D0                            loc_3F84:
000042D0 08A9 0000 0022             		bclr	#0,$22(a1)
000042D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000042DA 1340 0014                  		move.b	d0,$14(a1)
000042DE 6A00                       		bpl.s	loc_3F9A
000042E0 08E9 0000 0022             		bset	#0,$22(a1)
000042E6                            
000042E6                            loc_3F9A:
000042E6 4229 0015                  		clr.b	$15(a1)
000042EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000042F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000042F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042FA 0200 001F                  		andi.b	#$1F,d0
000042FE 6600                       		bne.s	locret_3FBE
00004300 303C 00D0                  		move.w	#$D0,d0
00004304 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
0000430A                            
0000430A                            locret_3FBE:
0000430A 4E75                       		rts	
0000430C                            ; End of function LZWaterSlides
0000430C                            
0000430C                            ; ===========================================================================
0000430C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000431B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000431C                            		even
0000431C                            
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            ; Subroutine to	move Sonic in demo mode
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            
0000431C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000431C                            
0000431C                            
0000431C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000431C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004320 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            ; This is an unused subroutine for recording a demo
00004324                            
00004324                            MoveDemo_Record:
00004324 43F9 0008 0000             		lea	($80000).l,a1
0000432A 3038 F790                  		move.w	($FFFFF790).w,d0
0000432E D2C0                       		adda.w	d0,a1
00004330 1038 F604                  		move.b	($FFFFF604).w,d0
00004334 B011                       		cmp.b	(a1),d0
00004336 6600                       		bne.s	loc_3FFA
00004338 5229 0001                  		addq.b	#1,1(a1)
0000433C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004342 6700                       		beq.s	loc_3FFA
00004344 4E75                       		rts	
00004346                            ; ===========================================================================
00004346                            
00004346                            loc_3FFA:				; XREF: MoveDemo_Record
00004346 1340 0002                  		move.b	d0,2(a1)
0000434A 137C 0000 0003             		move.b	#0,3(a1)
00004350 5478 F790                  		addq.w	#2,($FFFFF790).w
00004354 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000435C 4A38 F604                  		tst.b	($FFFFF604).w
00004360 6A00                       		bpl.s	loc_4022
00004362 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004366 6B00                       		bmi.s	loc_4022
00004368 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000436E                            
0000436E                            loc_4022:
0000436E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004374 7000                       		moveq	#0,d0
00004376 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000437A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004380 6600                       		bne.s	loc_4038
00004382 7006                       		moveq	#6,d0
00004384                            
00004384                            loc_4038:
00004384 E548                       		lsl.w	#2,d0
00004386 2271 0000                  		movea.l	(a1,d0.w),a1
0000438A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000438E 6A00                       		bpl.s	loc_4056
00004390 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004396 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000439A 5340                       		subq.w	#1,d0
0000439C E548                       		lsl.w	#2,d0
0000439E 2271 0000                  		movea.l	(a1,d0.w),a1
000043A2                            
000043A2                            loc_4056:
000043A2 3038 F790                  		move.w	($FFFFF790).w,d0
000043A6 D2C0                       		adda.w	d0,a1
000043A8 1011                       		move.b	(a1),d0
000043AA 41F8 F604                  		lea	($FFFFF604).w,a0
000043AE 1200                       		move.b	d0,d1
000043B0 1410                       		move.b	(a0),d2
000043B2 B500                       		eor.b	d2,d0
000043B4 10C1                       		move.b	d1,(a0)+
000043B6 C001                       		and.b	d1,d0
000043B8 10C0                       		move.b	d0,(a0)+
000043BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000043BE 6400                       		bcc.s	locret_407E
000043C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000043C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000043CA                            
000043CA                            locret_407E:
000043CA 4E75                       		rts	
000043CC                            ; End of function MoveSonicInDemo
000043CC                            
000043CC                            ; ===========================================================================
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            Demo_Index:
000043CC                            	include "_inc\Demo pointers for intro.asm"
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC 0000 0000                  	dc.l Demo_GHZ
000043D0 0000 0000                  	dc.l Demo_GHZ
000043D4 0000 0000                  	dc.l Demo_MZ
000043D8 0000 0000                  	dc.l Demo_MZ
000043DC 0000 0000                  	dc.l Demo_SYZ
000043E0 0000 0000                  	dc.l Demo_SYZ
000043E4 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043EC                            
000043EC                            Demo_EndIndex:
000043EC                            	include "_inc\Demo pointers for ending.asm"
000043EC                            ; ---------------------------------------------------------------------------
000043EC                            ; Demo (ending) sequence pointers
000043EC                            ; ---------------------------------------------------------------------------
000043EC 0000 0000                  	dc.l Demo_EndGHZ1
000043F0 0000 0000                  	dc.l Demo_EndMZ
000043F4 0000 0000                  	dc.l Demo_EndSYZ
000043F8 0000 0000                  	dc.l Demo_EndLZ
000043FC 0000 0000                  	dc.l Demo_EndSLZ
00004400 0000 0000                  	dc.l Demo_EndSBZ1
00004404 0000 0000                  	dc.l Demo_EndSBZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
0000440C                            
0000440C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000441C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000442C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000443C                            		even
0000443C                            
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            ; Collision index loading subroutine
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            
0000443C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000443C                            
0000443C                            
0000443C                            ColIndexLoad:				; XREF: Level
0000443C 7000                       		moveq	#0,d0
0000443E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004442 E548                       		lsl.w	#2,d0
00004444 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000444A 4E75                       		rts	
0000444C                            ; End of function ColIndexLoad
0000444C                            
0000444C                            ; ===========================================================================
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ColPointers:
0000444C                            	include "_inc\Collision index pointers.asm"
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C 0000 0000                  	dc.l Col_GHZ
00004450 0000 0000                  	dc.l Col_LZ
00004454 0000 0000                  	dc.l Col_MZ
00004458 0000 0000                  	dc.l Col_SLZ
0000445C 0000 0000                  	dc.l Col_SYZ
00004460 0000 0000                  	dc.l Col_SBZ
00004460 0000 0000                  	dc.l Col_SBZ
00004464                            
00004464                            ; ---------------------------------------------------------------------------
00004464                            ; Oscillating number subroutine
00004464                            ; ---------------------------------------------------------------------------
00004464                            
00004464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004464                            
00004464                            
00004464                            OscillateNumInit:			; XREF: Level
00004464 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004468 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000446E 7220                       		moveq	#$20,d1
00004470                            
00004470                            Osc_Loop:
00004470 32DA                       		move.w	(a2)+,(a1)+
00004472 51C9 FFFC                  		dbf	d1,Osc_Loop
00004476 4E75                       		rts	
00004478                            ; End of function OscillateNumInit
00004478                            
00004478                            ; ===========================================================================
00004478 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000447C 0000 0080                  		dc.w 0,	$80
00004480 0000 0080                  		dc.w 0,	$80
00004484 0000 0080                  		dc.w 0,	$80
00004488 0000 0080                  		dc.w 0,	$80
0000448C 0000 0080                  		dc.w 0,	$80
00004490 0000 0080                  		dc.w 0,	$80
00004494 0000 0080                  		dc.w 0,	$80
00004498 0000 0080                  		dc.w 0,	$80
0000449C 0000 50F0                  		dc.w 0,	$50F0
000044A0 011E 2080                  		dc.w $11E, $2080
000044A4 00B4 3080                  		dc.w $B4, $3080
000044A8 010E 5080                  		dc.w $10E, $5080
000044AC 01C2 7080                  		dc.w $1C2, $7080
000044B0 0276 0080                  		dc.w $276, $80
000044B4 0000 0080                  		dc.w 0,	$80
000044B8 0000                       		dc.w 0
000044BA                            		even
000044BA                            
000044BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044BA                            
000044BA                            
000044BA                            OscillateNumDo:				; XREF: Level
000044BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000044C0 6400                       		bcc.s	locret_41C4
000044C2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044C6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000044CC 3619                       		move.w	(a1)+,d3
000044CE 720F                       		moveq	#$F,d1
000044D0                            
000044D0                            loc_4184:
000044D0 341A                       		move.w	(a2)+,d2
000044D2 381A                       		move.w	(a2)+,d4
000044D4 0303                       		btst	d1,d3
000044D6 6600                       		bne.s	loc_41A4
000044D8 3029 0002                  		move.w	2(a1),d0
000044DC D042                       		add.w	d2,d0
000044DE 3340 0002                  		move.w	d0,2(a1)
000044E2 D151                       		add.w	d0,0(a1)
000044E4 B811                       		cmp.b	0(a1),d4
000044E6 6200                       		bhi.s	loc_41BA
000044E8 03C3                       		bset	d1,d3
000044EA 6000                       		bra.s	loc_41BA
000044EC                            ; ===========================================================================
000044EC                            
000044EC                            loc_41A4:				; XREF: OscillateNumDo
000044EC 3029 0002                  		move.w	2(a1),d0
000044F0 9042                       		sub.w	d2,d0
000044F2 3340 0002                  		move.w	d0,2(a1)
000044F6 D151                       		add.w	d0,0(a1)
000044F8 B811                       		cmp.b	0(a1),d4
000044FA 6300                       		bls.s	loc_41BA
000044FC 0383                       		bclr	d1,d3
000044FE                            
000044FE                            loc_41BA:
000044FE 5849                       		addq.w	#4,a1
00004500 51C9 FFCE                  		dbf	d1,loc_4184
00004504 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004508                            
00004508                            locret_41C4:
00004508 4E75                       		rts	
0000450A                            ; End of function OscillateNumDo
0000450A                            
0000450A                            ; ===========================================================================
0000450A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000450E 0002 0018                  		dc.w 2,	$18
00004512 0002 0020                  		dc.w 2,	$20
00004516 0002 0030                  		dc.w 2,	$30
0000451A 0004 0020                  		dc.w 4,	$20
0000451E 0008 0008                  		dc.w 8,	8
00004522 0008 0040                  		dc.w 8,	$40
00004526 0004 0040                  		dc.w 4,	$40
0000452A 0002 0050                  		dc.w 2,	$50
0000452E 0002 0050                  		dc.w 2,	$50
00004532 0002 0020                  		dc.w 2,	$20
00004536 0003 0030                  		dc.w 3,	$30
0000453A 0005 0050                  		dc.w 5,	$50
0000453E 0007 0070                  		dc.w 7,	$70
00004542 0002 0010                  		dc.w 2,	$10
00004546 0002 0010                  		dc.w 2,	$10
0000454A                            		even
0000454A                            
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            
0000454A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000454A                            
0000454A                            
0000454A                            ChangeRingFrame:			; XREF: Level
0000454A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000454E 6A00                       		bpl.s	loc_421C
00004550 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004556 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000455A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004560                            
00004560                            loc_421C:
00004560 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004564 6A00                       		bpl.s	loc_4232
00004566 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000456C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004570 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004576                            
00004576                            loc_4232:
00004576 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000457A 6A00                       		bpl.s	loc_4250
0000457C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004582 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004586 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000458C 6500                       		bcs.s	loc_4250
0000458E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004594                            
00004594                            loc_4250:
00004594 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004598 6700                       		beq.s	locret_4272
0000459A 7000                       		moveq	#0,d0
0000459C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000045A0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000045A4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000045A8 EF58                       		rol.w	#7,d0
000045AA 0240 0003                  		andi.w	#3,d0
000045AE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000045B2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000045B6                            
000045B6                            locret_4272:
000045B6 4E75                       		rts	
000045B8                            ; End of function ChangeRingFrame
000045B8                            
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            ; End-of-act signpost pattern loading subroutine
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            
000045B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B8                            
000045B8                            
000045B8                            SignpostArtLoad:			; XREF: Level
000045B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000045BC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000045C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000045C6 6700                       		beq.s	Signpost_Exit	; if yes, branch
000045C8 3038 F700                  		move.w	($FFFFF700).w,d0
000045CC 3238 F72A                  		move.w	($FFFFF72A).w,d1
000045D0 0441 0100                  		subi.w	#$100,d1
000045D4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000045D6 6D00                       		blt.s	Signpost_Exit	; if not, branch
000045D8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000045DC 6700                       		beq.s	Signpost_Exit
000045DE B278 F728                  		cmp.w	($FFFFF728).w,d1
000045E2 6700                       		beq.s	Signpost_Exit
000045E4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000045E8 7012                       		moveq	#$12,d0
000045EA 6000 D1E6                  		bra.w	LoadPLC2	; load signpost	patterns
000045EE                            ; ===========================================================================
000045EE                            
000045EE                            Signpost_Exit:
000045EE 4E75                       		rts	
000045F0                            ; End of function SignpostArtLoad
000045F0                            
000045F0                            ; ===========================================================================
000045F0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004670                            Demo_MZ:	incbin	demodata\i_mz.bin
000047A0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004820                            Demo_SS:	incbin	demodata\i_ss.bin
00004920                            ; ===========================================================================
00004920                            
00004920                            ; ---------------------------------------------------------------------------
00004920                            ; Special Stage
00004920                            ; ---------------------------------------------------------------------------
00004920                            
00004920                            SpecialStage:				; XREF: GameModeArray
00004920 303C 00CA                  		move.w	#$CA,d0
00004924 6100 CC96                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004928 6100 D872                  		bsr.w	Pal_MakeFlash
0000492C 46FC 2700                  		move	#$2700,sr
00004930 4DF9 00C0 0004             		lea	($C00004).l,a6
00004936 3CBC 8B03                  		move.w	#$8B03,(a6)
0000493A 3CBC 8004                  		move.w	#$8004,(a6)
0000493E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004944 3CBC 9011                  		move.w	#$9011,(a6)
00004948 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000494C 0200 00BF                  		andi.b	#$BF,d0
00004950 33C0 00C0 0004             		move.w	d0,($C00004).l
00004956 6100 CB8C                  		bsr.w	ClearScreen
0000495A 46FC 2300                  		move	#$2300,sr
0000495E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004964 3ABC 8F01                  		move.w	#$8F01,(a5)
00004968 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000496E 3ABC 9780                  		move.w	#$9780,(a5)
00004972 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004978 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004980                            
00004980                            loc_463C:
00004980 3215                       		move.w	(a5),d1
00004982 0801 0001                  		btst	#1,d1
00004986 66F8                       		bne.s	loc_463C
00004988 3ABC 8F02                  		move.w	#$8F02,(a5)
0000498C 6100 0000                  		bsr.w	SS_BGLoad
00004990 7014                       		moveq	#$14,d0
00004992 6100 CF78                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004996 43F8 D000                  		lea	($FFFFD000).w,a1
0000499A 7000                       		moveq	#0,d0
0000499C 323C 07FF                  		move.w	#$7FF,d1
000049A0                            
000049A0                            SS_ClrObjRam:
000049A0 22C0                       		move.l	d0,(a1)+
000049A2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000049A6                            
000049A6 43F8 F700                  		lea	($FFFFF700).w,a1
000049AA 7000                       		moveq	#0,d0
000049AC 323C 003F                  		move.w	#$3F,d1
000049B0                            
000049B0                            SS_ClrRam:
000049B0 22C0                       		move.l	d0,(a1)+
000049B2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000049B6                            
000049B6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000049BA 7000                       		moveq	#0,d0
000049BC 323C 0027                  		move.w	#$27,d1
000049C0                            
000049C0                            SS_ClrRam2:
000049C0 22C0                       		move.l	d0,(a1)+
000049C2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000049C6                            
000049C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000049CA 7000                       		moveq	#0,d0
000049CC 323C 007F                  		move.w	#$7F,d1
000049D0                            
000049D0                            SS_ClrNemRam:
000049D0 22C0                       		move.l	d0,(a1)+
000049D2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000049D6                            
000049D6 4238 F64E                  		clr.b	($FFFFF64E).w
000049DA 4278 FE02                  		clr.w	($FFFFFE02).w
000049DE 700A                       		moveq	#$A,d0
000049E0 6100 D93A                  		bsr.w	PalLoad1	; load special stage pallet
000049E4 4EB9 0000 0000             		jsr	SS_Load
000049EA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000049F2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000049FA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A00 6100 0000                  		bsr.w	PalCycle_SS
00004A04 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A08 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A0E 303C 0089                  		move.w	#$89,d0
00004A12 6100 CBA2                  		bsr.w	PlaySound	; play special stage BG	music
00004A16 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A1C 43F9 0000 43CC             		lea	(Demo_Index).l,a1
00004A22 7006                       		moveq	#6,d0
00004A24 E548                       		lsl.w	#2,d0
00004A26 2271 0000                  		movea.l	(a1,d0.w),a1
00004A2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004A30 5338 F792                  		subq.b	#1,($FFFFF792).w
00004A34 4278 FE20                  		clr.w	($FFFFFE20).w
00004A38 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004A3C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004A42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004A48 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004A4C 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A4E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004A54 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A56 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004A5C                            
00004A5C                            SS_NoDebug:
00004A5C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A60 0000 0040                  		ori.b	#$40,d0
00004A64 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A6A 6100 D684                  		bsr.w	Pal_MakeWhite
00004A6E                            
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            ; Main Special Stage loop
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            
00004A6E                            SS_MainLoop:
00004A6E 6100 CB58                  		bsr.w	PauseGame
00004A72 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004A78 6100 E176                  		bsr.w	DelayProgram
00004A7C 6100 F89E                  		bsr.w	MoveSonicInDemo
00004A80 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004A86 4EB9 0000 0000             		jsr	ObjectsLoad
00004A8C 4EB9 0000 0000             		jsr	BuildSprites
00004A92 4EB9 0000 0000             		jsr	SS_ShowLayout
00004A98 6100 0000                  		bsr.w	SS_BGAnimate
00004A9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AA0 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004AA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004AA6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004AAA                            
00004AAA                            SS_ChkEnd:
00004AAA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004AB0 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004AB4                            
00004AB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AB8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004ABC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004AC2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004AC8 6500                       		bcs.s	SS_End		; if not, branch
00004ACA 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004ACE                            
00004ACE                            SS_End:
00004ACE 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004AD4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004ADA 4278 F794                  		clr.w	($FFFFF794).w
00004ADE                            
00004ADE                            SS_EndLoop:
00004ADE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004AE4 6100 E10A                  		bsr.w	DelayProgram
00004AE8 6100 F832                  		bsr.w	MoveSonicInDemo
00004AEC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004AF2 4EB9 0000 0000             		jsr	ObjectsLoad
00004AF8 4EB9 0000 0000             		jsr	BuildSprites
00004AFE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B04 6100 0000                  		bsr.w	SS_BGAnimate
00004B08 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B0C 6A00                       		bpl.s	loc_47D4
00004B0E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B14 6100 D6A6                  		bsr.w	Pal_ToWhite
00004B18                            
00004B18                            loc_47D4:
00004B18 4A78 F614                  		tst.w	($FFFFF614).w
00004B1C 66C0                       		bne.s	SS_EndLoop
00004B1E                            
00004B1E 46FC 2700                  		move	#$2700,sr
00004B22 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B28 3CBC 8230                  		move.w	#$8230,(a6)
00004B2C 3CBC 8407                  		move.w	#$8407,(a6)
00004B30 3CBC 9001                  		move.w	#$9001,(a6)
00004B34 6100 C9AE                  		bsr.w	ClearScreen
00004B38 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004B42 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004B48 6100 CB16                  		bsr.w	NemDec
00004B4C 4EB9 0000 0000             		jsr	Hud_Base
00004B52 46FC 2300                  		move	#$2300,sr
00004B56 7011                       		moveq	#$11,d0
00004B58 6100 D7DE                  		bsr.w	PalLoad2	; load results screen pallet
00004B5C 7000                       		moveq	#0,d0
00004B5E 6100 CC72                  		bsr.w	LoadPLC2
00004B62 701B                       		moveq	#$1B,d0
00004B64 6100 CC3A                  		bsr.w	LoadPLC		; load results screen patterns
00004B68 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004B6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004B74 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004B78 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004B7C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004B80 303C 008E                  		move.w	#$8E,d0
00004B84 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004B8A 43F8 D000                  		lea	($FFFFD000).w,a1
00004B8E 7000                       		moveq	#0,d0
00004B90 323C 07FF                  		move.w	#$7FF,d1
00004B94                            
00004B94                            SS_EndClrObjRam:
00004B94 22C0                       		move.l	d0,(a1)+
00004B96 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004B9A                            
00004B9A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004BA0                            
00004BA0                            SS_NormalExit:
00004BA0 6100 CA26                  		bsr.w	PauseGame
00004BA4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004BAA 6100 E044                  		bsr.w	DelayProgram
00004BAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004BB4 4EB9 0000 0000             		jsr	BuildSprites
00004BBA 6100 CC50                  		bsr.w	RunPLC_RAM
00004BBE 4A78 FE02                  		tst.w	($FFFFFE02).w
00004BC2 67DC                       		beq.s	SS_NormalExit
00004BC4 4AB8 F680                  		tst.l	($FFFFF680).w
00004BC8 66D6                       		bne.s	SS_NormalExit
00004BCA 303C 00CA                  		move.w	#$CA,d0
00004BCE 6100 C9EC                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004BD2 6100 D5C8                  		bsr.w	Pal_MakeFlash
00004BD6 4E75                       		rts	
00004BD8                            ; ===========================================================================
00004BD8                            
00004BD8                            SS_ToSegaScreen:
00004BD8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004BDE 4E75                       		rts
00004BE0                            
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            ; Special stage	background loading subroutine
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            
00004BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BE0                            
00004BE0                            
00004BE0                            SS_BGLoad:				; XREF: SpecialStage
00004BE0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BE6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004BEC 303C 4051                  		move.w	#$4051,d0
00004BF0 6100 CD4C                  		bsr.w	EniDec
00004BF4 263C 5000 0001             		move.l	#$50000001,d3
00004BFA 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C00 7E06                       		moveq	#6,d7
00004C02                            
00004C02                            loc_48BE:
00004C02 2003                       		move.l	d3,d0
00004C04 7C03                       		moveq	#3,d6
00004C06 7800                       		moveq	#0,d4
00004C08 0C47 0003                  		cmpi.w	#3,d7
00004C0C 6400                       		bcc.s	loc_48CC
00004C0E 7801                       		moveq	#1,d4
00004C10                            
00004C10                            loc_48CC:
00004C10 7A07                       		moveq	#7,d5
00004C12                            
00004C12                            loc_48CE:
00004C12 224A                       		movea.l	a2,a1
00004C14 0A04 0001                  		eori.b	#1,d4
00004C18 6600                       		bne.s	loc_48E2
00004C1A 0C47 0006                  		cmpi.w	#6,d7
00004C1E 6600                       		bne.s	loc_48F2
00004C20 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C26                            
00004C26                            loc_48E2:
00004C26 48E7 F800                  		movem.l	d0-d4,-(sp)
00004C2A 7207                       		moveq	#7,d1
00004C2C 7407                       		moveq	#7,d2
00004C2E 6100 CA10                  		bsr.w	ShowVDPGraphics
00004C32 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004C36                            
00004C36                            loc_48F2:
00004C36 0680 0010 0000             		addi.l	#$100000,d0
00004C3C 51CD FFD4                  		dbf	d5,loc_48CE
00004C40 0680 0380 0000             		addi.l	#$3800000,d0
00004C46 0A04 0001                  		eori.b	#1,d4
00004C4A 51CE FFC4                  		dbf	d6,loc_48CC
00004C4E 0683 1000 0000             		addi.l	#$10000000,d3
00004C54 6A00                       		bpl.s	loc_491C
00004C56 4843                       		swap	d3
00004C58 0683 0000 C000             		addi.l	#$C000,d3
00004C5E 4843                       		swap	d3
00004C60                            
00004C60                            loc_491C:
00004C60 D4FC 0080                  		adda.w	#$80,a2
00004C64 51CF FF9C                  		dbf	d7,loc_48BE
00004C68 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C6E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004C74 303C 4000                  		move.w	#$4000,d0
00004C78 6100 CCC4                  		bsr.w	EniDec
00004C7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C82 203C 4000 0003             		move.l	#$40000003,d0
00004C88 723F                       		moveq	#$3F,d1
00004C8A 741F                       		moveq	#$1F,d2
00004C8C 6100 C9B2                  		bsr.w	ShowVDPGraphics
00004C90 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C96 203C 5000 0003             		move.l	#$50000003,d0
00004C9C 723F                       		moveq	#$3F,d1
00004C9E 743F                       		moveq	#$3F,d2
00004CA0 6100 C99E                  		bsr.w	ShowVDPGraphics
00004CA4 4E75                       		rts	
00004CA6                            ; End of function SS_BGLoad
00004CA6                            
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            ; Pallet cycling routine - special stage
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            
00004CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CA6                            
00004CA6                            
00004CA6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004CA6 4A78 F63A                  		tst.w	($FFFFF63A).w
00004CAA 6600                       		bne.s	locret_49E6
00004CAC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004CB0 6A00                       		bpl.s	locret_49E6
00004CB2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CB8 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004CBC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004CC0 0240 001F                  		andi.w	#$1F,d0
00004CC4 E548                       		lsl.w	#2,d0
00004CC6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004CCC D0C0                       		adda.w	d0,a0
00004CCE 1018                       		move.b	(a0)+,d0
00004CD0 6A00                       		bpl.s	loc_4992
00004CD2 303C 01FF                  		move.w	#$1FF,d0
00004CD6                            
00004CD6                            loc_4992:
00004CD6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004CDA 7000                       		moveq	#0,d0
00004CDC 1018                       		move.b	(a0)+,d0
00004CDE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004CE2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004CE8 43F1 0000                  		lea	(a1,d0.w),a1
00004CEC 303C 8200                  		move.w	#-$7E00,d0
00004CF0 1019                       		move.b	(a1)+,d0
00004CF2 3C80                       		move.w	d0,(a6)
00004CF4 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004CF8 303C 8400                  		move.w	#-$7C00,d0
00004CFC 1018                       		move.b	(a0)+,d0
00004CFE 3C80                       		move.w	d0,(a6)
00004D00 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D0A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D12 7000                       		moveq	#0,d0
00004D14 1018                       		move.b	(a0)+,d0
00004D16 6B00                       		bmi.s	loc_49E8
00004D18 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D1E D2C0                       		adda.w	d0,a1
00004D20 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004D24 24D9                       		move.l	(a1)+,(a2)+
00004D26 24D9                       		move.l	(a1)+,(a2)+
00004D28 24D9                       		move.l	(a1)+,(a2)+
00004D2A                            
00004D2A                            locret_49E6:
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            
00004D2C                            loc_49E8:				; XREF: PalCycle_SS
00004D2C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004D30 0C40 008A                  		cmpi.w	#$8A,d0
00004D34 6500                       		bcs.s	loc_49F4
00004D36 5241                       		addq.w	#1,d1
00004D38                            
00004D38                            loc_49F4:
00004D38 C2FC 002A                  		mulu.w	#$2A,d1
00004D3C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004D42 D2C1                       		adda.w	d1,a1
00004D44 0240 007F                  		andi.w	#$7F,d0
00004D48 0880 0000                  		bclr	#0,d0
00004D4C 6700                       		beq.s	loc_4A18
00004D4E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004D52 24D1                       		move.l	(a1),(a2)+
00004D54 24E9 0004                  		move.l	4(a1),(a2)+
00004D58 24E9 0008                  		move.l	8(a1),(a2)+
00004D5C                            
00004D5C                            loc_4A18:
00004D5C D2FC 000C                  		adda.w	#$C,a1
00004D60 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004D64 0C40 000A                  		cmpi.w	#$A,d0
00004D68 6500                       		bcs.s	loc_4A2E
00004D6A 0440 000A                  		subi.w	#$A,d0
00004D6E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004D72                            
00004D72                            loc_4A2E:
00004D72 3200                       		move.w	d0,d1
00004D74 D040                       		add.w	d0,d0
00004D76 D041                       		add.w	d1,d0
00004D78 D2C0                       		adda.w	d0,a1
00004D7A 24D9                       		move.l	(a1)+,(a2)+
00004D7C 34D9                       		move.w	(a1)+,(a2)+
00004D7E 4E75                       		rts	
00004D80                            ; End of function PalCycle_SS
00004D80                            
00004D80                            ; ===========================================================================
00004D80 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004D90                            					; XREF: PalCycle_SS
00004D90 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004DA0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004DB0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004DC0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004DD0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004DE0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004DF0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E00                            		even
00004E00 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E0E                            					; XREF: PalCycle_SS
00004E0E                            		even
00004E0E                            
00004E0E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004E56                            		even
00004E56                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004F28                            		even
00004F28                            
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            ; Subroutine to	make the special stage background animated
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            
00004F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F28                            
00004F28                            
00004F28                            SS_BGAnimate:				; XREF: SpecialStage
00004F28 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004F2C 6600                       		bne.s	loc_4BF6
00004F2E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004F34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F3A                            
00004F3A                            loc_4BF6:
00004F3A 0C40 0008                  		cmpi.w	#8,d0
00004F3E 6400                       		bcc.s	loc_4C4E
00004F40 0C40 0006                  		cmpi.w	#6,d0
00004F44 6600                       		bne.s	loc_4C10
00004F46 5278 F718                  		addq.w	#1,($FFFFF718).w
00004F4A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004F4E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F54                            
00004F54                            loc_4C10:
00004F54 7000                       		moveq	#0,d0
00004F56 3038 F708                  		move.w	($FFFFF708).w,d0
00004F5A 4440                       		neg.w	d0
00004F5C 4840                       		swap	d0
00004F5E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004F64 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F68 7609                       		moveq	#9,d3
00004F6A                            
00004F6A                            loc_4C26:
00004F6A 302B 0002                  		move.w	2(a3),d0
00004F6E 6100 DCB2                  		bsr.w	CalcSine
00004F72 7400                       		moveq	#0,d2
00004F74 1419                       		move.b	(a1)+,d2
00004F76 C1C2                       		muls.w	d2,d0
00004F78 E080                       		asr.l	#8,d0
00004F7A 36C0                       		move.w	d0,(a3)+
00004F7C 1419                       		move.b	(a1)+,d2
00004F7E 4882                       		ext.w	d2
00004F80 D55B                       		add.w	d2,(a3)+
00004F82 51CB FFE6                  		dbf	d3,loc_4C26
00004F86 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F8A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004F90 6000                       		bra.s	loc_4C7E
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            loc_4C4E:				; XREF: SS_BGAnimate
00004F92 0C40 000C                  		cmpi.w	#$C,d0
00004F96 6600                       		bne.s	loc_4C74
00004F98 5378 F718                  		subq.w	#1,($FFFFF718).w
00004F9C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FA0 243C 0001 8000             		move.l	#$18000,d2
00004FA6 7206                       		moveq	#6,d1
00004FA8                            
00004FA8                            loc_4C64:
00004FA8 2013                       		move.l	(a3),d0
00004FAA 9082                       		sub.l	d2,d0
00004FAC 26C0                       		move.l	d0,(a3)+
00004FAE 0482 0000 2000             		subi.l	#$2000,d2
00004FB4 51C9 FFF2                  		dbf	d1,loc_4C64
00004FB8                            
00004FB8                            loc_4C74:
00004FB8 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FBC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004FC2                            
00004FC2                            loc_4C7E:
00004FC2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004FC6 3038 F718                  		move.w	($FFFFF718).w,d0
00004FCA 4440                       		neg.w	d0
00004FCC 4840                       		swap	d0
00004FCE 7600                       		moveq	#0,d3
00004FD0 161A                       		move.b	(a2)+,d3
00004FD2 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004FD6 4442                       		neg.w	d2
00004FD8 0242 00FF                  		andi.w	#$FF,d2
00004FDC E54A                       		lsl.w	#2,d2
00004FDE                            
00004FDE                            loc_4C9A:
00004FDE 301B                       		move.w	(a3)+,d0
00004FE0 544B                       		addq.w	#2,a3
00004FE2 7200                       		moveq	#0,d1
00004FE4 121A                       		move.b	(a2)+,d1
00004FE6 5341                       		subq.w	#1,d1
00004FE8                            
00004FE8                            loc_4CA4:
00004FE8 2380 2000                  		move.l	d0,(a1,d2.w)
00004FEC 5842                       		addq.w	#4,d2
00004FEE 0242 03FC                  		andi.w	#$3FC,d2
00004FF2 51C9 FFF4                  		dbf	d1,loc_4CA4
00004FF6 51CB FFE6                  		dbf	d3,loc_4C9A
00004FFA 4E75                       		rts	
00004FFC                            ; End of function SS_BGAnimate
00004FFC                            
00004FFC                            ; ===========================================================================
00004FFC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005008                            		even
00005008 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005010                            		even
00005010 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005024                            		even
00005024                            					; XREF: SS_BGAnimate
00005024                            ; ===========================================================================
00005024                            
00005024                            ; ---------------------------------------------------------------------------
00005024                            ; Continue screen
00005024                            ; ---------------------------------------------------------------------------
00005024                            
00005024                            ContinueScreen:				; XREF: GameModeArray
00005024 6100 D04C                  		bsr.w	Pal_FadeFrom
00005028 46FC 2700                  		move	#$2700,sr
0000502C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005030 0200 00BF                  		andi.b	#$BF,d0
00005034 33C0 00C0 0004             		move.w	d0,($C00004).l
0000503A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005040 3CBC 8004                  		move.w	#$8004,(a6)
00005044 3CBC 8700                  		move.w	#$8700,(a6)
00005048 6100 C49A                  		bsr.w	ClearScreen
0000504C 43F8 D000                  		lea	($FFFFD000).w,a1
00005050 7000                       		moveq	#0,d0
00005052 323C 07FF                  		move.w	#$7FF,d1
00005056                            
00005056                            Cont_ClrObjRam:
00005056 22C0                       		move.l	d0,(a1)+
00005058 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000505C                            
0000505C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005066 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000506C 6100 C5F2                  		bsr.w	NemDec
00005070 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000507A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005080 6100 C5DE                  		bsr.w	NemDec
00005084 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000508E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005094 6100 C5CA                  		bsr.w	NemDec
00005098 720A                       		moveq	#10,d1
0000509A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000050A0 7012                       		moveq	#$12,d0
000050A2 6100 D278                  		bsr.w	PalLoad1	; load continue	screen pallet
000050A6 103C 0090                  		move.b	#$90,d0
000050AA 6100 C50A                  		bsr.w	PlaySound	; play continue	music
000050AE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000050B4 42B8 F700                  		clr.l	($FFFFF700).w
000050B8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000050C0 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000050C6 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000050CC 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000050D2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000050D8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000050DE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000050E4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000050EA 4EB9 0000 0000             		jsr	ObjectsLoad
000050F0 4EB9 0000 0000             		jsr	BuildSprites
000050F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050FA 0000 0040                  		ori.b	#$40,d0
000050FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005104 6100 CEC6                  		bsr.w	Pal_FadeTo
00005108                            
00005108                            ; ---------------------------------------------------------------------------
00005108                            ; Continue screen main loop
00005108                            ; ---------------------------------------------------------------------------
00005108                            
00005108                            Cont_MainLoop:
00005108 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000510E 6100 DAE0                  		bsr.w	DelayProgram
00005112 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005118 6400                       		bcc.s	loc_4DF2
0000511A 46FC 2700                  		move	#$2700,sr
0000511E 3238 F614                  		move.w	($FFFFF614).w,d1
00005122 82FC 003C                  		divu.w	#$3C,d1
00005126 0281 0000 000F             		andi.l	#$F,d1
0000512C 4EB9 0000 0000             		jsr	ContScrCounter
00005132 46FC 2300                  		move	#$2300,sr
00005136                            
00005136                            loc_4DF2:
00005136 4EB9 0000 0000             		jsr	ObjectsLoad
0000513C 4EB9 0000 0000             		jsr	BuildSprites
00005142 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005148 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000514A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005150 64B6                       		bcc.s	Cont_MainLoop
00005152 4A78 F614                  		tst.w	($FFFFF614).w
00005156 6600 FFB0                  		bne.w	Cont_MainLoop
0000515A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005160 4E75                       		rts	
00005162                            ; ===========================================================================
00005162                            
00005162                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005162 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005168 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000516E 7000                       		moveq	#0,d0
00005170 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005174 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005178 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000517C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005180 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005184 4E75                       		rts	
00005186                            ; ===========================================================================
00005186                            
00005186                            ; ---------------------------------------------------------------------------
00005186                            ; Object 80 - Continue screen elements
00005186                            ; ---------------------------------------------------------------------------
00005186                            
00005186                            Obj80:					; XREF: Obj_Index
00005186 7000                       		moveq	#0,d0
00005188 1028 0024                  		move.b	$24(a0),d0
0000518C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005190 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005194                            ; ===========================================================================
00005194 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005196 0000                       		dc.w Obj80_Display-Obj80_Index
00005198 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000519A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000519C                            ; ===========================================================================
0000519C                            
0000519C                            Obj80_Main:				; XREF: Obj80_Index
0000519C 5428 0024                  		addq.b	#2,$24(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051A8 317C 8500 0002             		move.w	#$8500,2(a0)
000051AE 117C 0000 0001             		move.b	#0,1(a0)
000051B4 117C 003C 0019             		move.b	#$3C,$19(a0)
000051BA 317C 0120 0008             		move.w	#$120,8(a0)
000051C0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000051C6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000051CC                            
000051CC                            Obj80_Display:				; XREF: Obj80_Index
000051CC 4EF9 0000 0000             		jmp	DisplaySprite
000051D2                            ; ===========================================================================
000051D2                            Obj80_MiniSonicPos:
000051D2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000051E4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000051F0                            ; ===========================================================================
000051F0                            
000051F0                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000051F0 2248                       		movea.l	a0,a1
000051F2 45F9 0000 51D2             		lea	(Obj80_MiniSonicPos).l,a2
000051F8 7200                       		moveq	#0,d1
000051FA 1238 FE18                  		move.b	($FFFFFE18).w,d1
000051FE 5501                       		subq.b	#2,d1
00005200 6400                       		bcc.s	loc_4EC4
00005202 4EF9 0000 0000             		jmp	DeleteObject
00005208                            ; ===========================================================================
00005208                            
00005208                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005208 7601                       		moveq	#1,d3
0000520A 0C01 000E                  		cmpi.b	#$E,d1
0000520E 6500                       		bcs.s	loc_4ED0
00005210 7600                       		moveq	#0,d3
00005212 720E                       		moveq	#$E,d1
00005214                            
00005214                            loc_4ED0:
00005214 1401                       		move.b	d1,d2
00005216 0202 0001                  		andi.b	#1,d2
0000521A                            
0000521A                            Obj80_MiniSonLoop:
0000521A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000521E 335A 0008                  		move.w	(a2)+,8(a1)
00005222 4A02                       		tst.b	d2
00005224 6700                       		beq.s	loc_4EEA
00005226 0469 000A 0008             		subi.w	#$A,8(a1)
0000522C                            
0000522C                            loc_4EEA:
0000522C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005232 137C 0006 001A             		move.b	#6,$1A(a1)
00005238 137C 0006 0024             		move.b	#6,$24(a1)
0000523E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005246 337C 8551 0002             		move.w	#$8551,2(a1)
0000524C 137C 0000 0001             		move.b	#0,1(a1)
00005252 43E9 0040                  		lea	$40(a1),a1
00005256 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000525A 43E9 FFC0                  		lea	-$40(a1),a1
0000525E 1343 0028                  		move.b	d3,$28(a1)
00005262                            
00005262                            Obj80_ChkType:				; XREF: Obj80_Index
00005262 4A28 0028                  		tst.b	$28(a0)
00005266 6700                       		beq.s	loc_4F40
00005268 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000526E 6500                       		bcs.s	loc_4F40
00005270 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005274 0200 0001                  		andi.b	#1,d0
00005278 6600                       		bne.s	loc_4F40
0000527A 4A78 D010                  		tst.w	($FFFFD010).w
0000527E 6600                       		bne.s	Obj80_Delete
00005280 4E75                       		rts	
00005282                            ; ===========================================================================
00005282                            
00005282                            loc_4F40:				; XREF: Obj80_ChkType
00005282 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005286 0200 000F                  		andi.b	#$F,d0
0000528A 6600                       		bne.s	Obj80_Display2
0000528C 0868 0000 001A             		bchg	#0,$1A(a0)
00005292                            
00005292                            Obj80_Display2:
00005292 4EF9 0000 0000             		jmp	DisplaySprite
00005298                            ; ===========================================================================
00005298                            
00005298                            Obj80_Delete:				; XREF: Obj80_ChkType
00005298 4EF9 0000 0000             		jmp	DeleteObject
0000529E                            ; ===========================================================================
0000529E                            
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Object 81 - Sonic on the continue screen
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            
0000529E                            Obj81:					; XREF: Obj_Index
0000529E 7000                       		moveq	#0,d0
000052A0 1028 0024                  		move.b	$24(a0),d0
000052A4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000052A8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000052AC 4EF9 0000 0000             		jmp	DisplaySprite
000052B2                            ; ===========================================================================
000052B2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000052B4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000052B6 0000                       		dc.w Obj81_Animate-Obj81_Index
000052B8 0000                       		dc.w Obj81_Run-Obj81_Index
000052BA                            ; ===========================================================================
000052BA                            
000052BA                            Obj81_Main:				; XREF: Obj81_Index
000052BA 5428 0024                  		addq.b	#2,$24(a0)
000052BE 317C 00A0 0008             		move.w	#$A0,8(a0)
000052C4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000052CA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000052D2 317C 0780 0002             		move.w	#$780,2(a0)
000052D8 117C 0004 0001             		move.b	#4,1(a0)
000052DE 117C 0002 0018             		move.b	#2,$18(a0)
000052E4 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000052EA 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000052F0                            
000052F0                            Obj81_ChkLand:				; XREF: Obj81_Index
000052F0 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000052F6 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000052F8 5428 0024                  		addq.b	#2,$24(a0)
000052FC 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005300 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005308 317C 8500 0002             		move.w	#$8500,2(a0)
0000530E 117C 0000 001C             		move.b	#0,$1C(a0)
00005314 6000                       		bra.s	Obj81_Animate
00005316                            ; ===========================================================================
00005316                            
00005316                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005316 4EB9 0000 0000             		jsr	SpeedToPos
0000531C 4EB9 0000 0000             		jsr	Sonic_Animate
00005322 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005328                            ; ===========================================================================
00005328                            
00005328                            Obj81_Animate:				; XREF: Obj81_Index
00005328 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000532C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000532E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005334 4EF9 0000 0000             		jmp	AnimateSprite
0000533A                            ; ===========================================================================
0000533A                            
0000533A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000533A 5428 0024                  		addq.b	#2,$24(a0)
0000533E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005346 317C 0780 0002             		move.w	#$780,2(a0)
0000534C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005352 4268 0014                  		clr.w	$14(a0)
00005356 5168 000C                  		subq.w	#8,$C(a0)
0000535A 103C 00E0                  		move.b	#$E0,d0
0000535E 6100 C25C                  		bsr.w	PlaySound_Special ; fade out music
00005362                            
00005362                            Obj81_Run:				; XREF: Obj81_Index
00005362 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005368 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000536A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005370 6000                       		bra.s	Obj81_ShowRun
00005372                            ; ===========================================================================
00005372                            
00005372                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005372 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005378                            
00005378                            Obj81_ShowRun:				; XREF: Obj81_Run
00005378 4EB9 0000 0000             		jsr	SpeedToPos
0000537E 4EB9 0000 0000             		jsr	Sonic_Animate
00005384 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000538A                            ; ===========================================================================
0000538A                            Ani_obj81:
0000538A                            	include "_anim\obj81.asm"
0000538A                            ; ---------------------------------------------------------------------------
0000538A                            ; Animation script - Sonic on the continue screen
0000538A                            ; ---------------------------------------------------------------------------
0000538A 0000                       		dc.w byte_504A-Ani_obj81
0000538C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005398 00                         		even
00005398 00                         		even
00005398                            
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398                            Map_obj80:
00005398                            	include "_maps\obj80.asm"
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000539C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000053A0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000053A4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000053A8 0B                         byte_5066:	dc.b $B
000053A9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000053AE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000053B3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000053B8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000053BD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000053C2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000053C7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000053CC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000053D1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000053D6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000053DB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000053E0 03                         byte_509E:	dc.b 3
000053E1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000053E6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053EB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053F0 03                         byte_50AE:	dc.b 3
000053F1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000053F6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053FB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005400 03                         byte_50BE:	dc.b 3
00005401 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005406 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000540B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005410 02                         byte_50CE:	dc.b 2
00005411 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005416 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000541B 01                         byte_50D9:	dc.b 1
0000541C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005421 01                         byte_50DF:	dc.b 1
00005422 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005428 00                         		even
00005428 00                         		even
00005428                            
00005428                            ; ===========================================================================
00005428                            ; ---------------------------------------------------------------------------
00005428                            ; Ending sequence in Green Hill	Zone
00005428                            ; ---------------------------------------------------------------------------
00005428                            
00005428                            EndingSequence:				; XREF: GameModeArray
00005428 103C 00E4                  		move.b	#$E4,d0
0000542C 6100 C18E                  		bsr.w	PlaySound_Special ; stop music
00005430 6100 CC40                  		bsr.w	Pal_FadeFrom
00005434 43F8 D000                  		lea	($FFFFD000).w,a1
00005438 7000                       		moveq	#0,d0
0000543A 323C 07FF                  		move.w	#$7FF,d1
0000543E                            
0000543E                            End_ClrObjRam:
0000543E 22C0                       		move.l	d0,(a1)+
00005440 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005444                            
00005444 43F8 F628                  		lea	($FFFFF628).w,a1
00005448 7000                       		moveq	#0,d0
0000544A 323C 0015                  		move.w	#$15,d1
0000544E                            
0000544E                            End_ClrRam:
0000544E 22C0                       		move.l	d0,(a1)+
00005450 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005454                            
00005454 43F8 F700                  		lea	($FFFFF700).w,a1
00005458 7000                       		moveq	#0,d0
0000545A 323C 003F                  		move.w	#$3F,d1
0000545E                            
0000545E                            End_ClrRam2:
0000545E 22C0                       		move.l	d0,(a1)+
00005460 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005464                            
00005464 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005468 7000                       		moveq	#0,d0
0000546A 323C 0047                  		move.w	#$47,d1
0000546E                            
0000546E                            End_ClrRam3:
0000546E 22C0                       		move.l	d0,(a1)+
00005470 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005474                            
00005474 46FC 2700                  		move	#$2700,sr
00005478 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000547C 0200 00BF                  		andi.b	#$BF,d0
00005480 33C0 00C0 0004             		move.w	d0,($C00004).l
00005486 6100 C05C                  		bsr.w	ClearScreen
0000548A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005490 3CBC 8B03                  		move.w	#$8B03,(a6)
00005494 3CBC 8230                  		move.w	#$8230,(a6)
00005498 3CBC 8407                  		move.w	#$8407,(a6)
0000549C 3CBC 857C                  		move.w	#$857C,(a6)
000054A0 3CBC 9001                  		move.w	#$9001,(a6)
000054A4 3CBC 8004                  		move.w	#$8004,(a6)
000054A8 3CBC 8720                  		move.w	#$8720,(a6)
000054AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000054B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000054B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000054BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000054C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000054C8 6700                       		beq.s	End_LoadData	; if yes, branch
000054CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000054D0                            
000054D0                            End_LoadData:
000054D0 701C                       		moveq	#$1C,d0
000054D2 6100 C438                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000054D6 4EB9 0000 0000             		jsr	Hud_Base
000054DC 6100 0000                  		bsr.w	LevelSizeLoad
000054E0 6100 0000                  		bsr.w	DeformBgLayer
000054E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000054EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000054EE 6100 0000                  		bsr.w	LoadTilesFromStart
000054F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000054FA 46FC 2300                  		move	#$2300,sr
000054FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005504 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005508 6100 C5B2                  		bsr.w	KosDec
0000550C 7003                       		moveq	#3,d0
0000550E 6100 CE0C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005512 303C 008B                  		move.w	#$8B,d0
00005516 6100 C09E                  		bsr.w	PlaySound	; play ending sequence music
0000551A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005520 6700                       		beq.s	End_LoadSonic	; if not, branch
00005522 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005528                            
00005528                            End_LoadSonic:
00005528 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000552E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005534 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000553A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005540 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005546 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000554C 4EB9 0000 0000             		jsr	ObjPosLoad
00005552 4EB9 0000 0000             		jsr	ObjectsLoad
00005558 4EB9 0000 0000             		jsr	BuildSprites
0000555E 7000                       		moveq	#0,d0
00005560 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005564 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005568 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000556C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005570 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005574 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005578 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000557C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005580 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005584 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005588 6100 EEDA                  		bsr.w	OscillateNumInit
0000558C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005592 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005598 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000559E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000055A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055AA 6100 D644                  		bsr.w	DelayProgram
000055AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055B2 0000 0040                  		ori.b	#$40,d0
000055B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000055BC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000055C2 6100 CA08                  		bsr.w	Pal_FadeTo
000055C6                            
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            ; Main ending sequence loop
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            
000055C6                            End_MainLoop:
000055C6 6100 C000                  		bsr.w	PauseGame
000055CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055D0 6100 D61E                  		bsr.w	DelayProgram
000055D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000055D8 6100 0000                  		bsr.w	End_MoveSonic
000055DC 4EB9 0000 0000             		jsr	ObjectsLoad
000055E2 6100 0000                  		bsr.w	DeformBgLayer
000055E6 4EB9 0000 0000             		jsr	BuildSprites
000055EC 4EB9 0000 0000             		jsr	ObjPosLoad
000055F2 6100 C568                  		bsr.w	PalCycle_Load
000055F6 6100 EEC2                  		bsr.w	OscillateNumDo
000055FA 6100 EF4E                  		bsr.w	ChangeRingFrame
000055FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005604 6700                       		beq.s	loc_52DA	; if yes, branch
00005606 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000560C 103C 0091                  		move.b	#$91,d0
00005610 6100 BFAA                  		bsr.w	PlaySound_Special ; play credits music
00005614 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000561A 4E75                       		rts	
0000561C                            ; ===========================================================================
0000561C                            
0000561C                            loc_52DA:
0000561C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005620 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005624                            
00005624 4278 FE02                  		clr.w	($FFFFFE02).w
00005628 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000562E 4278 F794                  		clr.w	($FFFFF794).w
00005632                            
00005632                            End_AllEmlds:				; XREF: loc_5334
00005632 6100 BF94                  		bsr.w	PauseGame
00005636 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000563C 6100 D5B2                  		bsr.w	DelayProgram
00005640 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005644 6100 0000                  		bsr.w	End_MoveSonic
00005648 4EB9 0000 0000             		jsr	ObjectsLoad
0000564E 6100 0000                  		bsr.w	DeformBgLayer
00005652 4EB9 0000 0000             		jsr	BuildSprites
00005658 4EB9 0000 0000             		jsr	ObjPosLoad
0000565E 6100 EE5A                  		bsr.w	OscillateNumDo
00005662 6100 EEE6                  		bsr.w	ChangeRingFrame
00005666 5378 F794                  		subq.w	#1,($FFFFF794).w
0000566A 6A00                       		bpl.s	loc_5334
0000566C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005672 6100 CB48                  		bsr.w	Pal_ToWhite
00005676                            
00005676                            loc_5334:
00005676 4A78 FE02                  		tst.w	($FFFFFE02).w
0000567A 6700 FFB6                  		beq.w	End_AllEmlds
0000567E 4278 FE02                  		clr.w	($FFFFFE02).w
00005682 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005688 4BF9 00C0 0004             		lea	($C00004).l,a5
0000568E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005694 47F8 F700                  		lea	($FFFFF700).w,a3
00005698 49F8 A400                  		lea	($FFFFA400).w,a4
0000569C 343C 4000                  		move.w	#$4000,d2
000056A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000056A4 7013                       		moveq	#$13,d0
000056A6 6100 CC74                  		bsr.w	PalLoad1	; load ending pallet
000056AA 6100 CA44                  		bsr.w	Pal_MakeWhite
000056AE 6000 FF16                  		bra.w	End_MainLoop
000056B2                            
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            ; Subroutine controlling Sonic on the ending sequence
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            
000056B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056B2                            
000056B2                            
000056B2                            End_MoveSonic:				; XREF: End_MainLoop
000056B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000056B6 6600                       		bne.s	End_MoveSonic2
000056B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000056BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000056C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000056CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000056D0 4E75                       		rts	
000056D2                            ; ===========================================================================
000056D2                            
000056D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000056D2 5500                       		subq.b	#2,d0
000056D4 6600                       		bne.s	End_MoveSonic3
000056D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000056DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000056DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056E2 7000                       		moveq	#0,d0
000056E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000056E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000056EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000056F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000056F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000056FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005702 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005708 4E75                       		rts	
0000570A                            ; ===========================================================================
0000570A                            
0000570A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000570A 5500                       		subq.b	#2,d0
0000570C 6600                       		bne.s	End_MoveSonExit
0000570E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005712 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005718 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000571E 4278 D024                  		clr.w	($FFFFD024).w
00005722                            
00005722                            End_MoveSonExit:
00005722 4E75                       		rts	
00005724                            ; End of function End_MoveSonic
00005724                            
00005724                            ; ===========================================================================
00005724                            ; ---------------------------------------------------------------------------
00005724                            ; Object 87 - Sonic on ending sequence
00005724                            ; ---------------------------------------------------------------------------
00005724                            
00005724                            Obj87:					; XREF: Obj_Index
00005724 7000                       		moveq	#0,d0
00005726 1028 0025                  		move.b	$25(a0),d0
0000572A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000572E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005732 4EF9 0000 0000             		jmp	DisplaySprite
00005738                            ; ===========================================================================
00005738 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000573C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005740 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005744 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005748 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            Obj87_Main:				; XREF: Obj87_Index
0000574C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005752 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005754 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000575A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005760 4E75                       		rts	
00005762                            ; ===========================================================================
00005762                            
00005762                            Obj87_Main2:				; XREF: Obj87_Main
00005762 5428 0025                  		addq.b	#2,$25(a0)
00005766 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000576E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005774 117C 0004 0001             		move.b	#4,1(a0)
0000577A 4228 0022                  		clr.b	$22(a0)
0000577E 117C 0002 0018             		move.b	#2,$18(a0)
00005784 117C 0000 001A             		move.b	#0,$1A(a0)
0000578A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005790                            
00005790                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005790 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005794 6600                       		bne.s	Obj87_Wait
00005796 5428 0025                  		addq.b	#2,$25(a0)
0000579A 317C 0001 001C             		move.w	#1,$1C(a0)
000057A0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000057A6                            
000057A6                            Obj87_Wait:
000057A6 4E75                       		rts	
000057A8                            ; ===========================================================================
000057A8                            
000057A8                            Obj87_LookUp:				; XREF: Obj87_Index
000057A8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000057B0 6600                       		bne.s	locret_5480
000057B2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000057B8 317C 005A 0030             		move.w	#$5A,$30(a0)
000057BE 5428 0025                  		addq.b	#2,$25(a0)
000057C2                            
000057C2                            locret_5480:
000057C2 4E75                       		rts	
000057C4                            ; ===========================================================================
000057C4                            
000057C4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000057C4 5368 0030                  		subq.w	#1,$30(a0)
000057C8 6600                       		bne.s	Obj87_Wait2
000057CA 43F8 D400                  		lea	($FFFFD400).w,a1
000057CE 323C 00FF                  		move.w	#$FF,d1
000057D2                            
000057D2                            Obj87_ClrLoop:
000057D2 4299                       		clr.l	(a1)+
000057D4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000057D8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000057DE 5428 0025                  		addq.b	#2,$25(a0)
000057E2 117C 0001 001C             		move.b	#1,$1C(a0)
000057E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000057EE                            
000057EE                            Obj87_Wait2:
000057EE 4E75                       		rts	
000057F0                            ; ===========================================================================
000057F0                            
000057F0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000057F0 5368 0030                  		subq.w	#1,$30(a0)
000057F4 6600                       		bne.s	Obj87_Wait3
000057F6 5428 0025                  		addq.b	#2,$25(a0)
000057FA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005800 117C 0002 001C             		move.b	#2,$1C(a0)
00005806 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000580C                            
0000580C                            Obj87_Wait3:
0000580C 4E75                       		rts	
0000580E                            ; ===========================================================================
0000580E                            
0000580E                            Obj87_Animate:				; XREF: Obj87_Index
0000580E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005814 4EF9 0000 0000             		jmp	AnimateSprite
0000581A                            ; ===========================================================================
0000581A                            
0000581A                            Obj87_Leap:				; XREF: Obj87_Index
0000581A 5368 0030                  		subq.w	#1,$30(a0)
0000581E 6600                       		bne.s	Obj87_Wait4
00005820 5428 0025                  		addq.b	#2,$25(a0)
00005824 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000582C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005832 117C 0004 0001             		move.b	#4,1(a0)
00005838 4228 0022                  		clr.b	$22(a0)
0000583C 117C 0002 0018             		move.b	#2,$18(a0)
00005842 117C 0005 001A             		move.b	#5,$1A(a0)
00005848 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000584E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005854 60B8                       		bra.s	Obj87_Animate
00005856                            ; ===========================================================================
00005856                            
00005856                            Obj87_Wait4:				; XREF: Obj87_Leap
00005856 4E75                       		rts	
00005858                            ; ===========================================================================
00005858                            Ani_obj87:
00005858                            	include "_anim\obj87.asm"
00005858                            ; ---------------------------------------------------------------------------
00005858                            ; Animation script - Sonic on the ending sequence
00005858                            ; ---------------------------------------------------------------------------
00005858 0000                       		dc.w byte_551C-Ani_obj87
0000585A 0000                       		dc.w byte_552A-Ani_obj87
0000585C 0000                       		dc.w byte_5534-Ani_obj87
0000585E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000586C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005876 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000587E                            		even
0000587E                            		even
0000587E                            
0000587E                            ; ===========================================================================
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            ; Object 88 - chaos emeralds on	the ending sequence
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            
0000587E                            Obj88:					; XREF: Obj_Index
0000587E 7000                       		moveq	#0,d0
00005880 1028 0024                  		move.b	$24(a0),d0
00005884 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005888 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000588C 4EF9 0000 0000             		jmp	DisplaySprite
00005892                            ; ===========================================================================
00005892 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005894 0000                       		dc.w Obj88_Move-Obj88_Index
00005896                            ; ===========================================================================
00005896                            
00005896                            Obj88_Main:				; XREF: Obj88_Index
00005896 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000589C 6700                       		beq.s	Obj88_Main2
0000589E 588F                       		addq.l	#4,sp
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            Obj88_Main2:				; XREF: Obj88_Main
000058A2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000058A8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000058AE 2248                       		movea.l	a0,a1
000058B0 7600                       		moveq	#0,d3
000058B2 7401                       		moveq	#1,d2
000058B4 7205                       		moveq	#5,d1
000058B6                            
000058B6                            Obj88_MainLoop:
000058B6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000058BA 5429 0024                  		addq.b	#2,$24(a1)
000058BE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000058C6 337C 03C5 0002             		move.w	#$3C5,2(a1)
000058CC 137C 0004 0001             		move.b	#4,1(a1)
000058D2 137C 0001 0018             		move.b	#1,$18(a1)
000058D8 3368 0008 0038             		move.w	8(a0),$38(a1)
000058DE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000058E4 1342 001C                  		move.b	d2,$1C(a1)
000058E8 1342 001A                  		move.b	d2,$1A(a1)
000058EC 5202                       		addq.b	#1,d2
000058EE 1343 0026                  		move.b	d3,$26(a1)
000058F2 0603 002A                  		addi.b	#$2A,d3
000058F6 43E9 0040                  		lea	$40(a1),a1
000058FA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000058FE                            
000058FE                            Obj88_Move:				; XREF: Obj88_Index
000058FE 3028 003E                  		move.w	$3E(a0),d0
00005902 D168 0026                  		add.w	d0,$26(a0)
00005906 1028 0026                  		move.b	$26(a0),d0
0000590A 4EB9 0000 2C22             		jsr	(CalcSine).l
00005910 7800                       		moveq	#0,d4
00005912 1828 003C                  		move.b	$3C(a0),d4
00005916 C3C4                       		muls.w	d4,d1
00005918 E081                       		asr.l	#8,d1
0000591A C1C4                       		muls.w	d4,d0
0000591C E080                       		asr.l	#8,d0
0000591E D268 0038                  		add.w	$38(a0),d1
00005922 D068 003A                  		add.w	$3A(a0),d0
00005926 3141 0008                  		move.w	d1,8(a0)
0000592A 3140 000C                  		move.w	d0,$C(a0)
0000592E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005934 6700                       		beq.s	loc_55FA
00005936 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000593C                            
0000593C                            loc_55FA:
0000593C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005942 6700                       		beq.s	loc_5608
00005944 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000594A                            
0000594A                            loc_5608:
0000594A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005950 6700                       		beq.s	locret_5614
00005952 5368 003A                  		subq.w	#1,$3A(a0)
00005956                            
00005956                            locret_5614:
00005956 4E75                       		rts	
00005958                            ; ===========================================================================
00005958                            ; ---------------------------------------------------------------------------
00005958                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005958                            ; ---------------------------------------------------------------------------
00005958                            
00005958                            Obj89:					; XREF: Obj_Index
00005958 7000                       		moveq	#0,d0
0000595A 1028 0024                  		move.b	$24(a0),d0
0000595E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005962 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005966                            ; ===========================================================================
00005966 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005968 0000                       		dc.w Obj89_Move-Obj89_Index
0000596A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000596C                            ; ===========================================================================
0000596C                            
0000596C                            Obj89_Main:				; XREF: Obj89_Index
0000596C 5428 0024                  		addq.b	#2,$24(a0)
00005970 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005976 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000597C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005984 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000598A 117C 0000 0001             		move.b	#0,1(a0)
00005990 117C 0000 0018             		move.b	#0,$18(a0)
00005996                            
00005996                            Obj89_Move:				; XREF: Obj89_Index
00005996 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000599C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000599E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000059A4 4EB9 0000 0000             		jsr	DisplaySprite
000059AA                            ; ===========================================================================
000059AA                            
000059AA                            Obj89_Delay:				; XREF: Obj89_Move
000059AA 5428 0024                  		addq.b	#2,$24(a0)
000059AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000059B4                            
000059B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000059B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000059B8 6A00                       		bpl.s	Obj89_Display
000059BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000059C0                            
000059C0                            Obj89_Display:
000059C0 4EB9 0000 0000             		jsr	DisplaySprite
000059C6                            ; ===========================================================================
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            Map_obj87:
000059C6                            	include "_maps\obj87.asm"
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000059CA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000059CE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000059D2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000059D6 02                         byte_5690:	dc.b 2
000059D7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000059DC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059E1 03                         byte_569B:	dc.b 3
000059E2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000059E7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000059EC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059F1 02                         byte_56AB:	dc.b 2
000059F2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000059F7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000059FC 02                         byte_56B6:	dc.b 2
000059FD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A02 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A07 02                         byte_56C1:	dc.b 2
00005A08 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A0D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A12 03                         byte_56CC:	dc.b 3
00005A13 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A18 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A1D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005A22 07                         byte_56DC:	dc.b 7
00005A23 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005A28 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005A2D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005A32 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005A37 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005A3C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005A41 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005A46 18                         byte_5700:	dc.b $18
00005A47 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005A4C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005A51 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005A56 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005A5B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005A60 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005A65 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005A6A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005A6F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005A74 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005A79 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005A7E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005A83 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005A88 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005A8D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005A92 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005A97 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005A9C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005AA1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005AA6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005AAB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005AB0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005AB5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005ABA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005AC0 00                         		even
00005AC0 00                         		even
00005AC0                            
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            Map_obj88:
00005AC0                            	include "_maps\obj88.asm"
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005AC4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005AC8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005ACC 0000                       		dc.w byte_57AC-Map_obj88
00005ACE 01                         byte_5788:	dc.b 1
00005ACF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005AD4 01                         byte_578E:	dc.b 1
00005AD5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005ADA 01                         byte_5794:	dc.b 1
00005ADB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005AE0 01                         byte_579A:	dc.b 1
00005AE1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005AE6 01                         byte_57A0:	dc.b 1
00005AE7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005AEC 01                         byte_57A6:	dc.b 1
00005AED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005AF2 01                         byte_57AC:	dc.b 1
00005AF3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005AF8                            		even
00005AF8                            		even
00005AF8                            
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            Map_obj89:
00005AF8                            	include "_maps\obj89.asm"
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8 0000                       		dc.w byte_57B4-Map_obj89
00005AFA 03                         byte_57B4:	dc.b 3
00005AFB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B00 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B05 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B0A                            		even
00005B0A                            		even
00005B0A                            
00005B0A                            ; ===========================================================================
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ; Credits ending sequence
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            
00005B0A                            Credits:				; XREF: GameModeArray
00005B0A 6100 BCF2                  		bsr.w	ClearPLC
00005B0E 6100 C562                  		bsr.w	Pal_FadeFrom
00005B12 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B18 3CBC 8004                  		move.w	#$8004,(a6)
00005B1C 3CBC 8230                  		move.w	#$8230,(a6)
00005B20 3CBC 8407                  		move.w	#$8407,(a6)
00005B24 3CBC 9001                  		move.w	#$9001,(a6)
00005B28 3CBC 9200                  		move.w	#$9200,(a6)
00005B2C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B30 3CBC 8720                  		move.w	#$8720,(a6)
00005B34 4238 F64E                  		clr.b	($FFFFF64E).w
00005B38 6100 B9AA                  		bsr.w	ClearScreen
00005B3C 43F8 D000                  		lea	($FFFFD000).w,a1
00005B40 7000                       		moveq	#0,d0
00005B42 323C 07FF                  		move.w	#$7FF,d1
00005B46                            
00005B46                            Cred_ClrObjRam:
00005B46 22C0                       		move.l	d0,(a1)+
00005B48 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005B4C                            
00005B4C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005B56 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005B5C 6100 BB02                  		bsr.w	NemDec
00005B60 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B64 7000                       		moveq	#0,d0
00005B66 323C 001F                  		move.w	#$1F,d1
00005B6A                            
00005B6A                            Cred_ClrPallet:
00005B6A 22C0                       		move.l	d0,(a1)+
00005B6C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005B70                            
00005B70 7003                       		moveq	#3,d0
00005B72 6100 C7A8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005B76 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005B7C 4EB9 0000 0000             		jsr	ObjectsLoad
00005B82 4EB9 0000 0000             		jsr	BuildSprites
00005B88 6100 0000                  		bsr.w	EndingDemoLoad
00005B8C 7000                       		moveq	#0,d0
00005B8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005B92 E948                       		lsl.w	#4,d0
00005B94 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005B9A 45F2 0000                  		lea	(a2,d0.w),a2
00005B9E 7000                       		moveq	#0,d0
00005BA0 1012                       		move.b	(a2),d0
00005BA2 6700                       		beq.s	loc_5862
00005BA4 6100 BBFA                  		bsr.w	LoadPLC		; load level patterns
00005BA8                            
00005BA8                            loc_5862:
00005BA8 7001                       		moveq	#1,d0
00005BAA 6100 BBF4                  		bsr.w	LoadPLC		; load standard	level patterns
00005BAE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005BB4 6100 C416                  		bsr.w	Pal_FadeTo
00005BB8                            
00005BB8                            Cred_WaitLoop:
00005BB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BBE 6100 D030                  		bsr.w	DelayProgram
00005BC2 6100 BC48                  		bsr.w	RunPLC_RAM
00005BC6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005BCA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005BCC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005BD0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005BD2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005BD8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005BDC 4E75                       		rts	
00005BDE                            
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            ; Ending sequence demo loading subroutine
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            
00005BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BDE                            
00005BDE                            
00005BDE                            EndingDemoLoad:				; XREF: Credits
00005BDE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005BE2 0240 000F                  		andi.w	#$F,d0
00005BE6 D040                       		add.w	d0,d0
00005BE8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005BEC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005BF0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005BF4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005BFA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005BFC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C02 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C08 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005C0E 7000                       		moveq	#0,d0
00005C10 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C14 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C18 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C1C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C20 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005C26 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005C28 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005C2E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005C32 303C 0008                  		move.w	#8,d0
00005C36                            
00005C36                            EndDemo_LampLoad:
00005C36 24D9                       		move.l	(a1)+,(a2)+
00005C38 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005C3C                            
00005C3C                            EndDemo_Exit:
00005C3C 4E75                       		rts	
00005C3E                            ; End of function EndingDemoLoad
00005C3E                            
00005C3E                            ; ===========================================================================
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            ; Levels used in the end sequence demos
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005C4E                            
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            EndDemo_LampVar:
00005C4E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005C50 0A00 062C 000D             		dc.w $A00, $62C, $D
00005C56 0000 0000                  		dc.l 0
00005C5A 0000                       		dc.b 0,	0
00005C5C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005C70 0101                       		dc.b 1,	1
00005C72                            ; ===========================================================================
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            ; "TRY AGAIN" and "END"	screens
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            
00005C72                            TryAgainEnd:				; XREF: Credits
00005C72 6100 BB8A                  		bsr.w	ClearPLC
00005C76 6100 C3FA                  		bsr.w	Pal_FadeFrom
00005C7A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C80 3CBC 8004                  		move.w	#$8004,(a6)
00005C84 3CBC 8230                  		move.w	#$8230,(a6)
00005C88 3CBC 8407                  		move.w	#$8407,(a6)
00005C8C 3CBC 9001                  		move.w	#$9001,(a6)
00005C90 3CBC 9200                  		move.w	#$9200,(a6)
00005C94 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C98 3CBC 8720                  		move.w	#$8720,(a6)
00005C9C 4238 F64E                  		clr.b	($FFFFF64E).w
00005CA0 6100 B842                  		bsr.w	ClearScreen
00005CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00005CA8 7000                       		moveq	#0,d0
00005CAA 323C 07FF                  		move.w	#$7FF,d1
00005CAE                            
00005CAE                            TryAg_ClrObjRam:
00005CAE 22C0                       		move.l	d0,(a1)+
00005CB0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005CB4                            
00005CB4 701D                       		moveq	#$1D,d0
00005CB6 6100 BC54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005CBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CBE 7000                       		moveq	#0,d0
00005CC0 323C 001F                  		move.w	#$1F,d1
00005CC4                            
00005CC4                            TryAg_ClrPallet:
00005CC4 22C0                       		move.l	d0,(a1)+
00005CC6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005CCA                            
00005CCA 7013                       		moveq	#$13,d0
00005CCC 6100 C64E                  		bsr.w	PalLoad1	; load ending pallet
00005CD0 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005CD4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00005CE0 4EB9 0000 0000             		jsr	BuildSprites
00005CE6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005CEC 6100 C2DE                  		bsr.w	Pal_FadeTo
00005CF0                            
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; "TRY AGAIN" and "END"	screen main loop
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            TryAg_MainLoop:
00005CF0 6100 B8D6                  		bsr.w	PauseGame
00005CF4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CFA 6100 CEF4                  		bsr.w	DelayProgram
00005CFE 4EB9 0000 0000             		jsr	ObjectsLoad
00005D04 4EB9 0000 0000             		jsr	BuildSprites
00005D0A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D10 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D12 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D16 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D18 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D1E 67D0                       		beq.s	TryAg_MainLoop
00005D20                            
00005D20                            TryAg_Exit:
00005D20 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005D26 4E75                       		rts	
00005D28                            
00005D28                            ; ===========================================================================
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            
00005D28                            Obj8B:					; XREF: Obj_Index
00005D28 7000                       		moveq	#0,d0
00005D2A 1028 0024                  		move.b	$24(a0),d0
00005D2E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005D32 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005D36 4EF9 0000 0000             		jmp	DisplaySprite
00005D3C                            ; ===========================================================================
00005D3C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005D3E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005D40 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005D42 0000                       		dc.w loc_5A8E-Obj8B_Index
00005D44                            ; ===========================================================================
00005D44                            
00005D44                            Obj8B_Main:				; XREF: Obj8B_Index
00005D44 5428 0024                  		addq.b	#2,$24(a0)
00005D48 317C 0120 0008             		move.w	#$120,8(a0)
00005D4E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005D54 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005D5C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005D62 117C 0000 0001             		move.b	#0,1(a0)
00005D68 117C 0002 0018             		move.b	#2,$18(a0)
00005D6E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005D74 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005D7A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005D7C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005D82 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005D88 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005D8E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005D94                            
00005D94                            Obj8B_Animate:				; XREF: Obj8B_Index
00005D94 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005D9A 4EF9 0000 0000             		jmp	AnimateSprite
00005DA0                            ; ===========================================================================
00005DA0                            
00005DA0                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005DA0 5428 0024                  		addq.b	#2,$24(a0)
00005DA4 7002                       		moveq	#2,d0
00005DA6 0828 0000 001C             		btst	#0,$1C(a0)
00005DAC 6700                       		beq.s	loc_5A6A
00005DAE 4440                       		neg.w	d0
00005DB0                            
00005DB0                            loc_5A6A:
00005DB0 43F8 D800                  		lea	($FFFFD800).w,a1
00005DB4 7205                       		moveq	#5,d1
00005DB6                            
00005DB6                            loc_5A70:
00005DB6 1340 003E                  		move.b	d0,$3E(a1)
00005DBA 3400                       		move.w	d0,d2
00005DBC E742                       		asl.w	#3,d2
00005DBE D529 0026                  		add.b	d2,$26(a1)
00005DC2 43E9 0040                  		lea	$40(a1),a1
00005DC6 51C9 FFEE                  		dbf	d1,loc_5A70
00005DCA 5228 001A                  		addq.b	#1,$1A(a0)
00005DCE 317C 0070 0030             		move.w	#112,$30(a0)
00005DD4                            
00005DD4                            loc_5A8E:				; XREF: Obj8B_Index
00005DD4 5368 0030                  		subq.w	#1,$30(a0)
00005DD8 6A00                       		bpl.s	locret_5AA0
00005DDA 0868 0000 001C             		bchg	#0,$1C(a0)
00005DE0 117C 0002 0024             		move.b	#2,$24(a0)
00005DE6                            
00005DE6                            locret_5AA0:
00005DE6 4E75                       		rts	
00005DE8                            ; ===========================================================================
00005DE8                            Ani_obj8B:
00005DE8                            	include "_anim\obj8B.asm"
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005DEA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005DEC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005DEE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005DF2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005DF6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E08                            		even
00005E08                            		even
00005E08                            
00005E08                            ; ===========================================================================
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            
00005E08                            Obj8C:					; XREF: Obj_Index
00005E08 7000                       		moveq	#0,d0
00005E0A 1028 0024                  		move.b	$24(a0),d0
00005E0E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E12 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E16 4EF9 0000 0000             		jmp	DisplaySprite
00005E1C                            ; ===========================================================================
00005E1C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E1E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E20                            ; ===========================================================================
00005E20                            
00005E20                            Obj8C_Main:				; XREF: Obj8C_Index
00005E20 2248                       		movea.l	a0,a1
00005E22 7400                       		moveq	#0,d2
00005E24 7600                       		moveq	#0,d3
00005E26 7205                       		moveq	#5,d1
00005E28 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005E2C                            
00005E2C                            Obj8C_MakeEms:				; XREF: loc_5B42
00005E2C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005E30 5429 0024                  		addq.b	#2,$24(a1)
00005E34 237C 0000 5AC0 0004        		move.l	#Map_obj88,4(a1)
00005E3C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005E42 137C 0000 0001             		move.b	#0,1(a1)
00005E48 137C 0001 0018             		move.b	#1,$18(a1)
00005E4E 337C 0104 0008             		move.w	#$104,8(a1)
00005E54 337C 0120 0038             		move.w	#$120,$38(a1)
00005E5A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005E60 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005E66 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005E6C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005E70                            
00005E70                            Obj8C_ChkEms:
00005E70 7000                       		moveq	#0,d0
00005E72 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005E76 5340                       		subq.w	#1,d0
00005E78 6500                       		bcs.s	loc_5B42
00005E7A                            
00005E7A                            Obj8C_ChkEmLoop:
00005E7A B433 0000                  		cmp.b	(a3,d0.w),d2
00005E7E 6600                       		bne.s	loc_5B3E
00005E80 5202                       		addq.b	#1,d2
00005E82 60EC                       		bra.s	Obj8C_ChkEms
00005E84                            ; ===========================================================================
00005E84                            
00005E84                            loc_5B3E:
00005E84 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005E88                            
00005E88                            loc_5B42:
00005E88 1342 001A                  		move.b	d2,$1A(a1)
00005E8C 5229 001A                  		addq.b	#1,$1A(a1)
00005E90 5202                       		addq.b	#1,d2
00005E92 137C 0080 0026             		move.b	#$80,$26(a1)
00005E98 1343 001E                  		move.b	d3,$1E(a1)
00005E9C 1343 001F                  		move.b	d3,$1F(a1)
00005EA0 0643 000A                  		addi.w	#$A,d3
00005EA4 43E9 0040                  		lea	$40(a1),a1
00005EA8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005EAC                            
00005EAC                            Obj8C_Move:				; XREF: Obj8C_Index
00005EAC 4A68 003E                  		tst.w	$3E(a0)
00005EB0 6700                       		beq.s	locret_5BBA
00005EB2 4A28 001E                  		tst.b	$1E(a0)
00005EB6 6700                       		beq.s	loc_5B78
00005EB8 5328 001E                  		subq.b	#1,$1E(a0)
00005EBC 6600                       		bne.s	loc_5B80
00005EBE                            
00005EBE                            loc_5B78:
00005EBE 3028 003E                  		move.w	$3E(a0),d0
00005EC2 D168 0026                  		add.w	d0,$26(a0)
00005EC6                            
00005EC6                            loc_5B80:
00005EC6 1028 0026                  		move.b	$26(a0),d0
00005ECA 6700                       		beq.s	loc_5B8C
00005ECC 0C00 0080                  		cmpi.b	#$80,d0
00005ED0 6600                       		bne.s	loc_5B96
00005ED2                            
00005ED2                            loc_5B8C:
00005ED2 4268 003E                  		clr.w	$3E(a0)
00005ED6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005EDC                            
00005EDC                            loc_5B96:
00005EDC 4EB9 0000 2C22             		jsr	(CalcSine).l
00005EE2 7800                       		moveq	#0,d4
00005EE4 1828 003C                  		move.b	$3C(a0),d4
00005EE8 C3C4                       		muls.w	d4,d1
00005EEA E081                       		asr.l	#8,d1
00005EEC C1C4                       		muls.w	d4,d0
00005EEE E080                       		asr.l	#8,d0
00005EF0 D268 0038                  		add.w	$38(a0),d1
00005EF4 D068 003A                  		add.w	$3A(a0),d0
00005EF8 3141 0008                  		move.w	d1,8(a0)
00005EFC 3140 000A                  		move.w	d0,$A(a0)
00005F00                            
00005F00                            locret_5BBA:
00005F00 4E75                       		rts	
00005F02                            ; ===========================================================================
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            Map_obj8B:
00005F02                            	include "_maps\obj8B.asm"
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F06 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F0A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F0E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F12 08                         byte_5BCC:	dc.b 8
00005F13 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F18 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F1D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005F22 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005F27 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F2C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F31 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F36 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F3B 08                         byte_5BF5:	dc.b 8
00005F3C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005F41 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005F46 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005F4B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005F50 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F55 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F5A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F5F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F64 08                         byte_5C1E:	dc.b 8
00005F65 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005F6A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005F6F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005F74 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005F79 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F7E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F83 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F88 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F8D 08                         byte_5C47:	dc.b 8
00005F8E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005F93 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005F98 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005F9D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005FA2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FA7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FAC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FB1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FB6 0C                         byte_5C70:	dc.b $C
00005FB7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005FBC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005FC1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005FC6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005FCB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005FD0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005FD5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005FDA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005FDF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005FE4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005FE9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005FEE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005FF3 0A                         byte_5CAD:	dc.b $A
00005FF4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005FF9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005FFE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006003 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006008 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000600D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006012 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006017 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000601C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006021 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006026 0A                         byte_5CE0:	dc.b $A
00006027 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000602C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006031 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006036 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000603B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006040 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006045 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000604A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000604F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006054 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006059 0C                         byte_5D13:	dc.b $C
0000605A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000605F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006064 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006069 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000606E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006073 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006078 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000607D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006082 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006087 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000608C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006091 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006096                            		even
00006096                            		even
00006096                            
00006096                            ; ---------------------------------------------------------------------------
00006096                            ; Ending sequence demos
00006096                            ; ---------------------------------------------------------------------------
00006096                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000060C4                            		even
000060C4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006104                            		even
00006104                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006134                            		even
00006134                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006164                            		even
00006164                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006184                            		even
00006184                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000061A4                            		even
000061A4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000061D4                            		even
000061D4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006204                            		even
00006204                            
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Subroutine to	load level boundaries and start	locations
00006204                            ; ---------------------------------------------------------------------------
00006204                            
00006204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006204                            
00006204                            
00006204                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006204 7000                       		moveq	#0,d0
00006206 11C0 F740                  		move.b	d0,($FFFFF740).w
0000620A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000620E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006212 11C0 F748                  		move.b	d0,($FFFFF748).w
00006216 11C0 F742                  		move.b	d0,($FFFFF742).w
0000621A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000621E ED08                       		lsl.b	#6,d0
00006220 E848                       		lsr.w	#4,d0
00006222 3200                       		move.w	d0,d1
00006224 D040                       		add.w	d0,d0
00006226 D041                       		add.w	d1,d0
00006228 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000622C 3018                       		move.w	(a0)+,d0
0000622E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006232 2018                       		move.l	(a0)+,d0
00006234 21C0 F728                  		move.l	d0,($FFFFF728).w
00006238 21C0 F720                  		move.l	d0,($FFFFF720).w
0000623C 2018                       		move.l	(a0)+,d0
0000623E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006242 21C0 F724                  		move.l	d0,($FFFFF724).w
00006246 3038 F728                  		move.w	($FFFFF728).w,d0
0000624A 0640 0240                  		addi.w	#$240,d0
0000624E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006252 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006258 3018                       		move.w	(a0)+,d0
0000625A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000625E 6000 0000                  		bra.w	LevSz_ChkLamp
00006262                            ; ===========================================================================
00006262                            ; ---------------------------------------------------------------------------
00006262                            ; Level size array and ending start location array
00006262                            ; ---------------------------------------------------------------------------
00006262                            LevelSizeArray:	incbin	misc\lvl_size.bin
000063B2                            		even
000063B2                            
000063B2                            EndingStLocArray:
000063B2                            		incbin	misc\sloc_end.bin
000063D2                            		even
000063D2                            
000063D2                            ; ===========================================================================
000063D2                            
000063D2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000063D6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000063D8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000063DE 3238 D008                  		move.w	($FFFFD008).w,d1
000063E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000063E6 6000                       		bra.s	loc_60D0
000063E8                            ; ===========================================================================
000063E8                            
000063E8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000063E8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063EC ED08                       		lsl.b	#6,d0
000063EE E848                       		lsr.w	#4,d0
000063F0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000063F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000063F8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000063FA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000063FE 5340                       		subq.w	#1,d0
00006400 E548                       		lsl.w	#2,d0
00006402 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006406                            
00006406                            LevSz_SonicPos:
00006406 7200                       		moveq	#0,d1
00006408 3219                       		move.w	(a1)+,d1
0000640A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000640E 7000                       		moveq	#0,d0
00006410 3011                       		move.w	(a1),d0
00006412 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006416                            
00006416                            loc_60D0:				; XREF: LevSz_ChkLamp
00006416 0441 00A0                  		subi.w	#$A0,d1
0000641A 6400                       		bcc.s	loc_60D8
0000641C 7200                       		moveq	#0,d1
0000641E                            
0000641E                            loc_60D8:
0000641E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006422 B242                       		cmp.w	d2,d1
00006424 6500                       		bcs.s	loc_60E2
00006426 3202                       		move.w	d2,d1
00006428                            
00006428                            loc_60E2:
00006428 31C1 F700                  		move.w	d1,($FFFFF700).w
0000642C 0440 0060                  		subi.w	#$60,d0
00006430 6400                       		bcc.s	loc_60EE
00006432 7000                       		moveq	#0,d0
00006434                            
00006434                            loc_60EE:
00006434 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006438 6D00                       		blt.s	loc_60F8
0000643A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000643E                            
0000643E                            loc_60F8:
0000643E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006442 6100 0000                  		bsr.w	BgScrollSpeed
00006446 7000                       		moveq	#0,d0
00006448 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000644C E508                       		lsl.b	#2,d0
0000644E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006454 6000 0000                  		bra.w	LevSz_Unk
00006458                            ; ===========================================================================
00006458                            ; ---------------------------------------------------------------------------
00006458                            ; Sonic	start location array
00006458                            ; ---------------------------------------------------------------------------
00006458                            StartLocArray:	incbin	misc\sloc_lev.bin
000064C8                            		even
000064C8                            
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Which	256x256	tiles contain loops or roll-tunnels
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000064C8                            ; loop,	loop, tunnel, tunnel
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            LoopTileNums:	incbin	misc\loopnums.bin
000064E4                            		even
000064E4                            
000064E4                            ; ===========================================================================
000064E4                            
000064E4                            LevSz_Unk:				; XREF: LevelSizeLoad
000064E4 7000                       		moveq	#0,d0
000064E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064EA E748                       		lsl.w	#3,d0
000064EC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000064F0 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000064F4 24D9                       		move.l	(a1)+,(a2)+
000064F6 24D9                       		move.l	(a1)+,(a2)+
000064F8 4E75                       		rts	
000064FA                            ; End of function LevelSizeLoad
000064FA                            
000064FA                            ; ===========================================================================
000064FA 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006502 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000650A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006512 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000651A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006522 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000652A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006532                            
00006532                            ; ---------------------------------------------------------------------------
00006532                            ; Subroutine to	set scroll speed of some backgrounds
00006532                            ; ---------------------------------------------------------------------------
00006532                            
00006532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006532                            
00006532                            
00006532                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006532 4A38 FE30                  		tst.b	($FFFFFE30).w
00006536 6600                       		bne.s	loc_6206
00006538 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000653C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006540 31C1 F708                  		move.w	d1,($FFFFF708).w
00006544 31C1 F710                  		move.w	d1,($FFFFF710).w
00006548 31C1 F718                  		move.w	d1,($FFFFF718).w
0000654C                            
0000654C                            loc_6206:
0000654C 7400                       		moveq	#0,d2
0000654E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006552 D442                       		add.w	d2,d2
00006554 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006558 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000655C                            ; End of function BgScrollSpeed
0000655C                            
0000655C                            ; ===========================================================================
0000655C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006560 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006564 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006568 0000                       		dc.w BgScroll_End-BgScroll_Index
0000656A                            ; ===========================================================================
0000656A                            
0000656A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000656A 6000 0000                  		bra.w	Deform_GHZ
0000656E                            ; ===========================================================================
0000656E                            
0000656E                            BgScroll_LZ:				; XREF: BgScroll_Index
0000656E E280                       		asr.l	#1,d0
00006570 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006574 4E75                       		rts	
00006576                            ; ===========================================================================
00006576                            
00006576                            BgScroll_MZ:				; XREF: BgScroll_Index
00006576 4E75                       		rts	
00006578                            ; ===========================================================================
00006578                            
00006578                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006578 E280                       		asr.l	#1,d0
0000657A 0640 00C0                  		addi.w	#$C0,d0
0000657E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            
00006584                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006584 E980                       		asl.l	#4,d0
00006586 2400                       		move.l	d0,d2
00006588 E380                       		asl.l	#1,d0
0000658A D082                       		add.l	d2,d0
0000658C E080                       		asr.l	#8,d0
0000658E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006592 31C0 F714                  		move.w	d0,($FFFFF714).w
00006596 4E75                       		rts	
00006598                            ; ===========================================================================
00006598                            
00006598                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006598 E980                       		asl.l	#4,d0
0000659A E380                       		asl.l	#1,d0
0000659C E080                       		asr.l	#8,d0
0000659E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065A2 4E75                       		rts	
000065A4                            ; ===========================================================================
000065A4                            
000065A4                            BgScroll_End:				; XREF: BgScroll_Index
000065A4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065AA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065B0 4E75                       		rts	
000065B2                            ; ===========================================================================
000065B2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000065B8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065BE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000065C4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065CA 4E75                       		rts
000065CC                            
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            ; Background layer deformation subroutines
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            
000065CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065CC                            
000065CC                            
000065CC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000065CC 4A38 F744                  		tst.b	($FFFFF744).w
000065D0 6700                       		beq.s	loc_628E
000065D2 4E75                       		rts	
000065D4                            ; ===========================================================================
000065D4                            
000065D4                            loc_628E:
000065D4 4278 F754                  		clr.w	($FFFFF754).w
000065D8 4278 F756                  		clr.w	($FFFFF756).w
000065DC 4278 F758                  		clr.w	($FFFFF758).w
000065E0 4278 F75A                  		clr.w	($FFFFF75A).w
000065E4 6100 0000                  		bsr.w	ScrollHoriz
000065E8 6100 0000                  		bsr.w	ScrollVertical
000065EC 6100 0000                  		bsr.w	DynScrResizeLoad
000065F0 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000065F6 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000065FC 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006602 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006608 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000660E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006614 7000                       		moveq	#0,d0
00006616 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000661A D040                       		add.w	d0,d0
0000661C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006620 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006624                            ; End of function DeformBgLayer
00006624                            
00006624                            ; ===========================================================================
00006624                            ; ---------------------------------------------------------------------------
00006624                            ; Offset index for background layer deformation	code
00006624                            ; ---------------------------------------------------------------------------
00006624 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006628 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000662C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006630 0000                       		dc.w Deform_GHZ-Deform_Index
00006632                            ; ---------------------------------------------------------------------------
00006632                            ; Green	Hill Zone background layer deformation code
00006632                            ; ---------------------------------------------------------------------------
00006632                            
00006632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006632                            
00006632                            
00006632                            Deform_GHZ:				; XREF: Deform_Index
00006632 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006636 48C4                       		ext.l	d4
00006638 EB84                       		asl.l	#5,d4
0000663A 2204                       		move.l	d4,d1
0000663C E384                       		asl.l	#1,d4
0000663E D881                       		add.l	d1,d4
00006640 7A00                       		moveq	#0,d5
00006642 6100 0000                  		bsr.w	ScrollBlock1
00006646 6100 0000                  		bsr.w	ScrollBlock4
0000664A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000664E 3038 F704                  		move.w	($FFFFF704).w,d0
00006652 0240 07FF                  		andi.w	#$7FF,d0
00006656 EA48                       		lsr.w	#5,d0
00006658 4440                       		neg.w	d0
0000665A 0640 0026                  		addi.w	#$26,d0
0000665E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006662 3800                       		move.w	d0,d4
00006664 6100 0000                  		bsr.w	ScrollBlock3
00006668 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000666E 323C 006F                  		move.w	#$6F,d1
00006672 9244                       		sub.w	d4,d1
00006674 3038 F700                  		move.w	($FFFFF700).w,d0
00006678 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000667E 6600                       		bne.s	loc_633C
00006680 7000                       		moveq	#0,d0
00006682                            
00006682                            loc_633C:
00006682 4440                       		neg.w	d0
00006684 4840                       		swap	d0
00006686 3038 F708                  		move.w	($FFFFF708).w,d0
0000668A 4440                       		neg.w	d0
0000668C                            
0000668C                            loc_6346:
0000668C 22C0                       		move.l	d0,(a1)+
0000668E 51C9 FFFC                  		dbf	d1,loc_6346
00006692 323C 0027                  		move.w	#$27,d1
00006696 3038 F710                  		move.w	($FFFFF710).w,d0
0000669A 4440                       		neg.w	d0
0000669C                            
0000669C                            loc_6356:
0000669C 22C0                       		move.l	d0,(a1)+
0000669E 51C9 FFFC                  		dbf	d1,loc_6356
000066A2 3038 F710                  		move.w	($FFFFF710).w,d0
000066A6 0640 0000                  		addi.w	#0,d0
000066AA 3438 F700                  		move.w	($FFFFF700).w,d2
000066AE 0642 FE00                  		addi.w	#-$200,d2
000066B2 9440                       		sub.w	d0,d2
000066B4 48C2                       		ext.l	d2
000066B6 E182                       		asl.l	#8,d2
000066B8 85FC 0068                  		divs.w	#$68,d2
000066BC 48C2                       		ext.l	d2
000066BE E182                       		asl.l	#8,d2
000066C0 7600                       		moveq	#0,d3
000066C2 3600                       		move.w	d0,d3
000066C4 323C 0047                  		move.w	#$47,d1
000066C8 D244                       		add.w	d4,d1
000066CA                            
000066CA                            loc_6384:
000066CA 3003                       		move.w	d3,d0
000066CC 4440                       		neg.w	d0
000066CE 22C0                       		move.l	d0,(a1)+
000066D0 4843                       		swap	d3
000066D2 D682                       		add.l	d2,d3
000066D4 4843                       		swap	d3
000066D6 51C9 FFF2                  		dbf	d1,loc_6384
000066DA 4E75                       		rts	
000066DC                            ; End of function Deform_GHZ
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; Labyrinth Zone background layer deformation code
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            
000066DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066DC                            
000066DC                            
000066DC                            Deform_LZ:				; XREF: Deform_Index
000066DC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066E0 48C4                       		ext.l	d4
000066E2 EF84                       		asl.l	#7,d4
000066E4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000066E8 48C5                       		ext.l	d5
000066EA EF85                       		asl.l	#7,d5
000066EC 6100 0000                  		bsr.w	ScrollBlock1
000066F0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066F6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066FA 323C 00DF                  		move.w	#$DF,d1
000066FE 3038 F700                  		move.w	($FFFFF700).w,d0
00006702 4440                       		neg.w	d0
00006704 4840                       		swap	d0
00006706 3038 F708                  		move.w	($FFFFF708).w,d0
0000670A 4440                       		neg.w	d0
0000670C                            
0000670C                            loc_63C6:
0000670C 22C0                       		move.l	d0,(a1)+
0000670E 51C9 FFFC                  		dbf	d1,loc_63C6
00006712 3038 F646                  		move.w	($FFFFF646).w,d0
00006716 9078 F704                  		sub.w	($FFFFF704).w,d0
0000671A 4E75                       		rts	
0000671C                            ; End of function Deform_LZ
0000671C                            
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            ; Marble Zone background layer deformation code
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            
0000671C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000671C                            
0000671C                            
0000671C                            Deform_MZ:				; XREF: Deform_Index
0000671C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006720 48C4                       		ext.l	d4
00006722 ED84                       		asl.l	#6,d4
00006724 2204                       		move.l	d4,d1
00006726 E384                       		asl.l	#1,d4
00006728 D881                       		add.l	d1,d4
0000672A 7A00                       		moveq	#0,d5
0000672C 6100 0000                  		bsr.w	ScrollBlock1
00006730 303C 0200                  		move.w	#$200,d0
00006734 3238 F704                  		move.w	($FFFFF704).w,d1
00006738 0441 01C8                  		subi.w	#$1C8,d1
0000673C 6500                       		bcs.s	loc_6402
0000673E 3401                       		move.w	d1,d2
00006740 D241                       		add.w	d1,d1
00006742 D242                       		add.w	d2,d1
00006744 E441                       		asr.w	#2,d1
00006746 D041                       		add.w	d1,d0
00006748                            
00006748                            loc_6402:
00006748 31C0 F714                  		move.w	d0,($FFFFF714).w
0000674C 6100 0000                  		bsr.w	ScrollBlock3
00006750 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006756 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000675A 323C 00DF                  		move.w	#$DF,d1
0000675E 3038 F700                  		move.w	($FFFFF700).w,d0
00006762 4440                       		neg.w	d0
00006764 4840                       		swap	d0
00006766 3038 F708                  		move.w	($FFFFF708).w,d0
0000676A 4440                       		neg.w	d0
0000676C                            
0000676C                            loc_6426:
0000676C 22C0                       		move.l	d0,(a1)+
0000676E 51C9 FFFC                  		dbf	d1,loc_6426
00006772 4E75                       		rts	
00006774                            ; End of function Deform_MZ
00006774                            
00006774                            ; ---------------------------------------------------------------------------
00006774                            ; Star Light Zone background layer deformation code
00006774                            ; ---------------------------------------------------------------------------
00006774                            
00006774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006774                            
00006774                            
00006774                            Deform_SLZ:				; XREF: Deform_Index
00006774 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006778 48C4                       		ext.l	d4
0000677A EB84                       		asl.l	#5,d4
0000677C 2204                       		move.l	d4,d1
0000677E E384                       		asl.l	#1,d4
00006780 D881                       		add.l	d1,d4
00006782 7A00                       		moveq	#0,d5
00006784 6100 0000                  		bsr.w	ScrollBlock1
00006788 6100 0000                  		bsr.w	ScrollBlock3
0000678C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006790                            	;	move.w	($FFFFF704).w,d0
00006790                            	;	andi.w	#$7FF,d0
00006790 EA48                       		lsr.w	#5,d0
00006792 4440                       		neg.w	d0
00006794 0640 0026                  		addi.w	#$26,d0
00006798 31C0 F714                  		move.w	d0,($FFFFF714).w
0000679C 3800                       		move.w	d0,d4
0000679E                            	;	bsr.w	ScrollBlock3
0000679E 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000067A4 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000067A8                            
000067A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067AC 4440                       		neg.w	d0			; negate (positive to negative)
000067AE 4840                       		swap	d0			; send to the left side of d0
000067B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067B4 45F8 A800                  		lea	($FFFFA800).w,a2
000067B8 069A 0000 5000             		addi.l	#$5000,(a2)+
000067BE 069A 0000 C000             		addi.l	#$C000,(a2)+
000067C4 3038 A800                  		move.w	($FFFFA800).w,d0
000067C8 4440                       		neg.w	d0			; negate (positive to negative)
000067CA E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000067CC 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067D0                            slz_DeformLoop_1:
000067D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000067D6                            
000067D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067DA 4440                       		neg.w	d0			; negate (positive to negative)
000067DC 4840                       		swap	d0			; send to the left side of d0
000067DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067E2 45F8 A800                  		lea	($FFFFA800).w,a2
000067E6 069A 0000 5000             		addi.l	#$5000,(a2)+
000067EC 069A 0000 C000             		addi.l	#$C000,(a2)+
000067F2 3038 A800                  		move.w	($FFFFA800).w,d0
000067F6 4440                       		neg.w	d0			; negate (positive to negative)
000067F8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000067FA 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067FE                            slz_DeformLoop_2:
000067FE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006800 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006804                            
00006804 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006808 4440                       		neg.w	d0			; negate (positive to negative)
0000680A 4840                       		swap	d0			; send to the left side of d0
0000680C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006810 45F8 A800                  		lea	($FFFFA800).w,a2
00006814 069A 0000 5000             		addi.l	#$5000,(a2)+
0000681A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006820 3038 A800                  		move.w	($FFFFA800).w,d0
00006824 4440                       		neg.w	d0			; negate (positive to negative)
00006826 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006828 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000682C                            slz_DeformLoop_3:
0000682C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000682E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006832                            
00006832 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006836 4440                       		neg.w	d0			; negate (positive to negative)
00006838 4840                       		swap	d0			; send to the left side of d0
0000683A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000683E 45F8 A800                  		lea	($FFFFA800).w,a2
00006842 069A 0000 5000             		addi.l	#$5000,(a2)+
00006848 069A 0000 C000             		addi.l	#$C000,(a2)+
0000684E 3038 A800                  		move.w	($FFFFA800).w,d0
00006852 4440                       		neg.w	d0			; negate (positive to negative)
00006854 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006856 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000685A                            slz_DeformLoop_4:
0000685A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000685C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006860                            
00006860 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006864 4440                       		neg.w	d0			; negate (positive to negative)
00006866 4840                       		swap	d0			; send to the left side of d0
00006868 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000686C 45F8 A800                  		lea	($FFFFA800).w,a2
00006870 069A 0000 5000             		addi.l	#$5000,(a2)+
00006876 069A 0000 C000             		addi.l	#$C000,(a2)+
0000687C 3038 A800                  		move.w	($FFFFA800).w,d0
00006880 4440                       		neg.w	d0			; negate (positive to negative)
00006882 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006884 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006888                            slz_DeformLoop_5:
00006888 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000688A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
0000688E                            
0000688E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006892 4440                       		neg.w	d0			; negate (positive to negative)
00006894 4840                       		swap	d0			; send to the left side of d0
00006896 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000689A 4440                       		neg.w	d0			; negate (positive to negative)
0000689C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000689E 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068A2                            slz_DeformLoop_6:
000068A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000068A8                            
000068A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068AC 4440                       		neg.w	d0			; negate (positive to negative)
000068AE 4840                       		swap	d0			; send to the left side of d0
000068B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068B4 4440                       		neg.w	d0			; negate (positive to negative)
000068B6 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000068B8 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068BC                            slz_DeformLoop_7:
000068BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000068C2                            
000068C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068C6 4440                       		neg.w	d0			; negate (positive to negative)
000068C8 4840                       		swap	d0			; send to the left side of d0
000068CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068CE 4440                       		neg.w	d0			; negate (positive to negative)
000068D0 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000068D2 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D6                            slz_DeformLoop_8:
000068D6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068D8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000068DC                            
000068DC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E0 4440                       		neg.w	d0			; negate (positive to negative)
000068E2 4840                       		swap	d0			; send to the left side of d0
000068E4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068E8 4440                       		neg.w	d0			; negate (positive to negative)
000068EA EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000068EC 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068F0                            slz_DeformLoop_9:
000068F0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068F2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000068F6                            
000068F6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068FA 4440                       		neg.w	d0			; negate (positive to negative)
000068FC 4840                       		swap	d0			; send to the left side of d0
000068FE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006902 4440                       		neg.w	d0			; negate (positive to negative)
00006904 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006906 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000690A                            slz_DeformLoop_10:
0000690A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000690C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006910                            
00006910 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 4840                       		swap	d0			; send to the left side of d0
00006918 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000691C 4440                       		neg.w	d0			; negate (positive to negative)
0000691E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006920 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006924                            slz_DeformLoop_11:
00006924 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006926 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
0000692A                            
0000692A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 4840                       		swap	d0			; send to the left side of d0
00006932 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006936 4440                       		neg.w	d0			; negate (positive to negative)
00006938 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000693A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000693E                            slz_DeformLoop_12:
0000693E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006940 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006944                            
00006944 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A 4840                       		swap	d0			; send to the left side of d0
0000694C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006950 4440                       		neg.w	d0			; negate (positive to negative)
00006952 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006954 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006958                            slz_DeformLoop_13:
00006958 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000695A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
0000695E 4E75                       		rts	
00006960                            ; End of function Deform_SLZ
00006960 4E75                       		rts	
00006962                            ; End of function Deform_SLZ_2
00006962                            
00006962                            ; ---------------------------------------------------------------------------
00006962                            ; Spring Yard Zone background layer deformation	code
00006962                            ; ---------------------------------------------------------------------------
00006962                            
00006962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006962                            
00006962                            
00006962                            Deform_SYZ:				; XREF: Deform_Index
00006962 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006966 48C4                       		ext.l	d4
00006968 ED84                       		asl.l	#6,d4
0000696A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000696E 48C5                       		ext.l	d5
00006970 E985                       		asl.l	#4,d5
00006972 2205                       		move.l	d5,d1
00006974 E385                       		asl.l	#1,d5
00006976 DA81                       		add.l	d1,d5
00006978 6100 0000                  		bsr.w	ScrollBlock1
0000697C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006982 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006986 323C 00DF                  		move.w	#$DF,d1
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0
0000698E 4440                       		neg.w	d0
00006990 4840                       		swap	d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0
00006996 4440                       		neg.w	d0
00006998                            
00006998                            loc_653C:
00006998 22C0                       		move.l	d0,(a1)+
0000699A 51C9 FFFC                  		dbf	d1,loc_653C
0000699E 4E75                       		rts	
000069A0                            ; End of function Deform_SYZ
000069A0                            
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            ; Scrap	Brain Zone background layer deformation	code
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            
000069A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A0                            
000069A0                            
000069A0                            Deform_SBZ:				; XREF: Deform_Index
000069A0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069A4 48C4                       		ext.l	d4
000069A6 ED84                       		asl.l	#6,d4
000069A8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069AC 48C5                       		ext.l	d5
000069AE E985                       		asl.l	#4,d5
000069B0 E385                       		asl.l	#1,d5
000069B2 6100 0000                  		bsr.w	ScrollBlock1
000069B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069C0 323C 00DF                  		move.w	#$DF,d1
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0
000069C8 4440                       		neg.w	d0
000069CA 4840                       		swap	d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0
000069D0 4440                       		neg.w	d0
000069D2                            
000069D2                            loc_6576:
000069D2 22C0                       		move.l	d0,(a1)+
000069D4 51C9 FFFC                  		dbf	d1,loc_6576
000069D8 4E75                       		rts	
000069DA                            ; End of function Deform_SBZ
000069DA                            
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            ; Subroutine to	scroll the level horizontally as Sonic moves
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            
000069DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069DA                            
000069DA                            
000069DA                            ScrollHoriz:				; XREF: DeformBgLayer
000069DA 3838 F700                  		move.w	($FFFFF700).w,d4
000069DE 6100                       		bsr.s	ScrollHoriz2
000069E0 3038 F700                  		move.w	($FFFFF700).w,d0
000069E4 0240 0010                  		andi.w	#$10,d0
000069E8 1238 F74A                  		move.b	($FFFFF74A).w,d1
000069EC B300                       		eor.b	d1,d0
000069EE 6600                       		bne.s	locret_65B0
000069F0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000069F6 3038 F700                  		move.w	($FFFFF700).w,d0
000069FA 9044                       		sub.w	d4,d0
000069FC 6A00                       		bpl.s	loc_65AA
000069FE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A04 4E75                       		rts	
00006A06                            ; ===========================================================================
00006A06                            
00006A06                            loc_65AA:
00006A06 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A0C                            
00006A0C                            locret_65B0:
00006A0C 4E75                       		rts	
00006A0E                            ; End of function ScrollHoriz
00006A0E                            
00006A0E                            
00006A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A0E                            
00006A0E                            
00006A0E                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A0E 3038 D008                  		move.w	($FFFFD008).w,d0
00006A12 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A16 0440 0090                  		subi.w	#$90,d0
00006A1A 6500                       		bcs.s	loc_65F6
00006A1C 0440 0010                  		subi.w	#$10,d0
00006A20 6400                       		bcc.s	loc_65CC
00006A22 4278 F73A                  		clr.w	($FFFFF73A).w
00006A26 4E75                       		rts	
00006A28                            ; ===========================================================================
00006A28                            
00006A28                            loc_65CC:
00006A28 0C40 0010                  		cmpi.w	#$10,d0
00006A2C 6500                       		bcs.s	loc_65D6
00006A2E 303C 0010                  		move.w	#$10,d0
00006A32                            
00006A32                            loc_65D6:
00006A32 D078 F700                  		add.w	($FFFFF700).w,d0
00006A36 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006A3A 6D00                       		blt.s	loc_65E4
00006A3C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006A40                            
00006A40                            loc_65E4:
00006A40 3200                       		move.w	d0,d1
00006A42 9278 F700                  		sub.w	($FFFFF700).w,d1
00006A46 E141                       		asl.w	#8,d1
00006A48 31C0 F700                  		move.w	d0,($FFFFF700).w
00006A4C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006A50 4E75                       		rts	
00006A52                            ; ===========================================================================
00006A52                            
00006A52                            loc_65F6:				; XREF: ScrollHoriz2
00006A52 D078 F700                  		add.w	($FFFFF700).w,d0
00006A56 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006A5A 6EE4                       		bgt.s	loc_65E4
00006A5C 3038 F728                  		move.w	($FFFFF728).w,d0
00006A60 60DE                       		bra.s	loc_65E4
00006A62                            ; End of function ScrollHoriz2
00006A62                            
00006A62                            ; ===========================================================================
00006A62 4A40                       		tst.w	d0
00006A64 6A00                       		bpl.s	loc_6610
00006A66 303C FFFE                  		move.w	#-2,d0
00006A6A 60E6                       		bra.s	loc_65F6
00006A6C                            ; ===========================================================================
00006A6C                            
00006A6C                            loc_6610:
00006A6C 303C 0002                  		move.w	#2,d0
00006A70 60B6                       		bra.s	loc_65CC
00006A72                            
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            ; Subroutine to	scroll the level vertically as Sonic moves
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            
00006A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A72                            
00006A72                            
00006A72                            ScrollVertical:				; XREF: DeformBgLayer
00006A72 7200                       		moveq	#0,d1
00006A74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A78 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A7C 0838 0002 D022             		btst	#2,($FFFFD022).w
00006A82 6700                       		beq.s	loc_662A
00006A84 5B40                       		subq.w	#5,d0
00006A86                            
00006A86                            loc_662A:
00006A86 0838 0001 D022             		btst	#1,($FFFFD022).w
00006A8C 6700                       		beq.s	loc_664A
00006A8E 0640 0020                  		addi.w	#$20,d0
00006A92 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A96 6500                       		bcs.s	loc_6696
00006A98 0440 0040                  		subi.w	#$40,d0
00006A9C 6400                       		bcc.s	loc_6696
00006A9E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AA2 6600                       		bne.s	loc_66A8
00006AA4 6000                       		bra.s	loc_6656
00006AA6                            ; ===========================================================================
00006AA6                            
00006AA6                            loc_664A:
00006AA6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006AAA 6600                       		bne.s	loc_665C
00006AAC 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AB0 6600                       		bne.s	loc_66A8
00006AB2                            
00006AB2                            loc_6656:
00006AB2 4278 F73C                  		clr.w	($FFFFF73C).w
00006AB6 4E75                       		rts	
00006AB8                            ; ===========================================================================
00006AB8                            
00006AB8                            loc_665C:
00006AB8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006ABE 6600                       		bne.s	loc_6684
00006AC0 3238 D014                  		move.w	($FFFFD014).w,d1
00006AC4 6A00                       		bpl.s	loc_666C
00006AC6 4441                       		neg.w	d1
00006AC8                            
00006AC8                            loc_666C:
00006AC8 0C41 0800                  		cmpi.w	#$800,d1
00006ACC 6400                       		bcc.s	loc_6696
00006ACE 323C 0600                  		move.w	#$600,d1
00006AD2 0C40 0006                  		cmpi.w	#6,d0
00006AD6 6E00                       		bgt.s	loc_66F6
00006AD8 0C40 FFFA                  		cmpi.w	#-6,d0
00006ADC 6D00                       		blt.s	loc_66C0
00006ADE 6000                       		bra.s	loc_66AE
00006AE0                            ; ===========================================================================
00006AE0                            
00006AE0                            loc_6684:
00006AE0 323C 0200                  		move.w	#$200,d1
00006AE4 0C40 0002                  		cmpi.w	#2,d0
00006AE8 6E00                       		bgt.s	loc_66F6
00006AEA 0C40 FFFE                  		cmpi.w	#-2,d0
00006AEE 6D00                       		blt.s	loc_66C0
00006AF0 6000                       		bra.s	loc_66AE
00006AF2                            ; ===========================================================================
00006AF2                            
00006AF2                            loc_6696:
00006AF2 323C 1000                  		move.w	#$1000,d1
00006AF6 0C40 0010                  		cmpi.w	#$10,d0
00006AFA 6E00                       		bgt.s	loc_66F6
00006AFC 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B00 6D00                       		blt.s	loc_66C0
00006B02 6000                       		bra.s	loc_66AE
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            loc_66A8:
00006B04 7000                       		moveq	#0,d0
00006B06 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B0A                            
00006B0A                            loc_66AE:
00006B0A 7200                       		moveq	#0,d1
00006B0C 3200                       		move.w	d0,d1
00006B0E D278 F704                  		add.w	($FFFFF704).w,d1
00006B12 4A40                       		tst.w	d0
00006B14 6A00 0000                  		bpl.w	loc_6700
00006B18 6000 0000                  		bra.w	loc_66CC
00006B1C                            ; ===========================================================================
00006B1C                            
00006B1C                            loc_66C0:
00006B1C 4441                       		neg.w	d1
00006B1E 48C1                       		ext.l	d1
00006B20 E181                       		asl.l	#8,d1
00006B22 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B26 4841                       		swap	d1
00006B28                            
00006B28                            loc_66CC:
00006B28 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006B2C 6E00                       		bgt.s	loc_6724
00006B2E 0C41 FF00                  		cmpi.w	#-$100,d1
00006B32 6E00                       		bgt.s	loc_66F0
00006B34 0241 07FF                  		andi.w	#$7FF,d1
00006B38 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B3E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006B44 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B4A 6000                       		bra.s	loc_6724
00006B4C                            ; ===========================================================================
00006B4C                            
00006B4C                            loc_66F0:
00006B4C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006B50 6000                       		bra.s	loc_6724
00006B52                            ; ===========================================================================
00006B52                            
00006B52                            loc_66F6:
00006B52 48C1                       		ext.l	d1
00006B54 E181                       		asl.l	#8,d1
00006B56 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B5A 4841                       		swap	d1
00006B5C                            
00006B5C                            loc_6700:
00006B5C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006B60 6D00                       		blt.s	loc_6724
00006B62 0441 0800                  		subi.w	#$800,d1
00006B66 6500                       		bcs.s	loc_6720
00006B68 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B6E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006B74 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B7A 6000                       		bra.s	loc_6724
00006B7C                            ; ===========================================================================
00006B7C                            
00006B7C                            loc_6720:
00006B7C 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006B80                            
00006B80                            loc_6724:
00006B80 3838 F704                  		move.w	($FFFFF704).w,d4
00006B84 4841                       		swap	d1
00006B86 2601                       		move.l	d1,d3
00006B88 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006B8C E09B                       		ror.l	#8,d3
00006B8E 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006B92 21C1 F704                  		move.l	d1,($FFFFF704).w
00006B96 3038 F704                  		move.w	($FFFFF704).w,d0
00006B9A 0240 0010                  		andi.w	#$10,d0
00006B9E 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006BA2 B300                       		eor.b	d1,d0
00006BA4 6600                       		bne.s	locret_6766
00006BA6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006BAC 3038 F704                  		move.w	($FFFFF704).w,d0
00006BB0 9044                       		sub.w	d4,d0
00006BB2 6A00                       		bpl.s	loc_6760
00006BB4 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006BBA 4E75                       		rts	
00006BBC                            ; ===========================================================================
00006BBC                            
00006BBC                            loc_6760:
00006BBC 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006BC2                            
00006BC2                            locret_6766:
00006BC2 4E75                       		rts	
00006BC4                            ; End of function ScrollVertical
00006BC4                            
00006BC4                            
00006BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC4                            
00006BC4                            
00006BC4                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006BC4 2438 F708                  		move.l	($FFFFF708).w,d2
00006BC8 2002                       		move.l	d2,d0
00006BCA D084                       		add.l	d4,d0
00006BCC 21C0 F708                  		move.l	d0,($FFFFF708).w
00006BD0 2200                       		move.l	d0,d1
00006BD2 4841                       		swap	d1
00006BD4 0241 0010                  		andi.w	#$10,d1
00006BD8 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006BDC B701                       		eor.b	d3,d1
00006BDE 6600                       		bne.s	loc_679C
00006BE0 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006BE6 9082                       		sub.l	d2,d0
00006BE8 6A00                       		bpl.s	loc_6796
00006BEA 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006BF0 6000                       		bra.s	loc_679C
00006BF2                            ; ===========================================================================
00006BF2                            
00006BF2                            loc_6796:
00006BF2 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006BF8                            
00006BF8                            loc_679C:
00006BF8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BFC 2003                       		move.l	d3,d0
00006BFE D085                       		add.l	d5,d0
00006C00 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C04 2200                       		move.l	d0,d1
00006C06 4841                       		swap	d1
00006C08 0241 0010                  		andi.w	#$10,d1
00006C0C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C10 B501                       		eor.b	d2,d1
00006C12 6600                       		bne.s	locret_67D0
00006C14 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C1A 9083                       		sub.l	d3,d0
00006C1C 6A00                       		bpl.s	loc_67CA
00006C1E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C24 4E75                       		rts	
00006C26                            ; ===========================================================================
00006C26                            
00006C26                            loc_67CA:
00006C26 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C2C                            
00006C2C                            locret_67D0:
00006C2C 4E75                       		rts	
00006C2E                            ; End of function ScrollBlock1
00006C2E                            
00006C2E                            
00006C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C2E                            
00006C2E                            
00006C2E                            ScrollBlock2:				; XREF: Deform_SLZ
00006C2E 2438 F708                  		move.l	($FFFFF708).w,d2
00006C32 2002                       		move.l	d2,d0
00006C34 D084                       		add.l	d4,d0
00006C36 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C3A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C3E 2003                       		move.l	d3,d0
00006C40 D085                       		add.l	d5,d0
00006C42 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C46 2200                       		move.l	d0,d1
00006C48 4841                       		swap	d1
00006C4A 0241 0010                  		andi.w	#$10,d1
00006C4E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C52 B501                       		eor.b	d2,d1
00006C54 6600                       		bne.s	locret_6812
00006C56 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C5C 9083                       		sub.l	d3,d0
00006C5E 6A00                       		bpl.s	loc_680C
00006C60 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C66 4E75                       		rts	
00006C68                            ; ===========================================================================
00006C68                            
00006C68                            loc_680C:
00006C68 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C6E                            
00006C6E                            locret_6812:
00006C6E 4E75                       		rts	
00006C70                            ; End of function ScrollBlock2
00006C70                            
00006C70                            
00006C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C70                            
00006C70                            
00006C70                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006C70 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006C74 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C78 3200                       		move.w	d0,d1
00006C7A 0241 0010                  		andi.w	#$10,d1
00006C7E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C82 B501                       		eor.b	d2,d1
00006C84 6600                       		bne.s	locret_6842
00006C86 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C8C 9043                       		sub.w	d3,d0
00006C8E 6A00                       		bpl.s	loc_683C
00006C90 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C96 4E75                       		rts	
00006C98                            ; ===========================================================================
00006C98                            
00006C98                            loc_683C:
00006C98 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C9E                            
00006C9E                            locret_6842:
00006C9E 4E75                       		rts	
00006CA0                            ; End of function ScrollBlock3
00006CA0                            
00006CA0                            
00006CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA0                            
00006CA0                            
00006CA0                            ScrollBlock4:				; XREF: Deform_GHZ
00006CA0 3438 F710                  		move.w	($FFFFF710).w,d2
00006CA4 3638 F714                  		move.w	($FFFFF714).w,d3
00006CA8 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006CAC 48C0                       		ext.l	d0
00006CAE EF80                       		asl.l	#7,d0
00006CB0 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006CB4 3038 F710                  		move.w	($FFFFF710).w,d0
00006CB8 0240 0010                  		andi.w	#$10,d0
00006CBC 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006CC0 B300                       		eor.b	d1,d0
00006CC2 6600                       		bne.s	locret_6884
00006CC4 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006CCA 3038 F710                  		move.w	($FFFFF710).w,d0
00006CCE 9042                       		sub.w	d2,d0
00006CD0 6A00                       		bpl.s	loc_687E
00006CD2 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006CD8 6000                       		bra.s	locret_6884
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_687E:
00006CDA 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006CE0                            
00006CE0                            locret_6884:
00006CE0 4E75                       		rts	
00006CE2                            ; End of function ScrollBlock4
00006CE2                            
00006CE2                            
00006CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE2                            
00006CE2                            
00006CE2                            sub_6886:				; XREF: loc_C44
00006CE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CEE 45F8 F756                  		lea	($FFFFF756).w,a2
00006CF2 47F8 F708                  		lea	($FFFFF708).w,a3
00006CF6 49F8 A440                  		lea	($FFFFA440).w,a4
00006CFA 343C 6000                  		move.w	#$6000,d2
00006CFE 6100 0000                  		bsr.w	sub_6954
00006D02 45F8 F758                  		lea	($FFFFF758).w,a2
00006D06 47F8 F710                  		lea	($FFFFF710).w,a3
00006D0A 6000 0000                  		bra.w	sub_69F4
00006D0E                            ; End of function sub_6886
00006D0E                            
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            ; Subroutine to	display	correct	tiles as you move
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            
00006D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0E                            
00006D0E                            
00006D0E                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D14 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D1A 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D1E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D22 49F8 A440                  		lea	($FFFFA440).w,a4
00006D26 343C 6000                  		move.w	#$6000,d2
00006D2A 6100 0000                  		bsr.w	sub_6954
00006D2E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006D32 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006D36 6100 0000                  		bsr.w	sub_69F4
00006D3A 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D3E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006D42 49F8 A400                  		lea	($FFFFA400).w,a4
00006D46 343C 4000                  		move.w	#$4000,d2
00006D4A 4A12                       		tst.b	(a2)
00006D4C 6700                       		beq.s	locret_6952
00006D4E 0892 0000                  		bclr	#0,(a2)
00006D52 6700                       		beq.s	loc_6908
00006D54 78F0                       		moveq	#-$10,d4
00006D56 7AF0                       		moveq	#-$10,d5
00006D58 6100 0000                  		bsr.w	sub_6C20
00006D5C 78F0                       		moveq	#-$10,d4
00006D5E 7AF0                       		moveq	#-$10,d5
00006D60 6100 0000                  		bsr.w	sub_6AD8
00006D64                            
00006D64                            loc_6908:
00006D64 0892 0001                  		bclr	#1,(a2)
00006D68 6700                       		beq.s	loc_6922
00006D6A 383C 00E0                  		move.w	#$E0,d4
00006D6E 7AF0                       		moveq	#-$10,d5
00006D70 6100 0000                  		bsr.w	sub_6C20
00006D74 383C 00E0                  		move.w	#$E0,d4
00006D78 7AF0                       		moveq	#-$10,d5
00006D7A 6100 0000                  		bsr.w	sub_6AD8
00006D7E                            
00006D7E                            loc_6922:
00006D7E 0892 0002                  		bclr	#2,(a2)
00006D82 6700                       		beq.s	loc_6938
00006D84 78F0                       		moveq	#-$10,d4
00006D86 7AF0                       		moveq	#-$10,d5
00006D88 6100 0000                  		bsr.w	sub_6C20
00006D8C 78F0                       		moveq	#-$10,d4
00006D8E 7AF0                       		moveq	#-$10,d5
00006D90 6100 0000                  		bsr.w	sub_6B04
00006D94                            
00006D94                            loc_6938:
00006D94 0892 0003                  		bclr	#3,(a2)
00006D98 6700                       		beq.s	locret_6952
00006D9A 78F0                       		moveq	#-$10,d4
00006D9C 3A3C 0140                  		move.w	#$140,d5
00006DA0 6100 0000                  		bsr.w	sub_6C20
00006DA4 78F0                       		moveq	#-$10,d4
00006DA6 3A3C 0140                  		move.w	#$140,d5
00006DAA 6100 0000                  		bsr.w	sub_6B04
00006DAE                            
00006DAE                            locret_6952:
00006DAE 4E75                       		rts	
00006DB0                            ; End of function LoadTilesAsYouMove
00006DB0                            
00006DB0                            
00006DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB0                            
00006DB0                            
00006DB0                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006DB0 4A12                       		tst.b	(a2)
00006DB2 6700 0000                  		beq.w	locret_69F2
00006DB6 0892 0000                  		bclr	#0,(a2)
00006DBA 6700                       		beq.s	loc_6972
00006DBC 78F0                       		moveq	#-$10,d4
00006DBE 7AF0                       		moveq	#-$10,d5
00006DC0 6100 0000                  		bsr.w	sub_6C20
00006DC4 78F0                       		moveq	#-$10,d4
00006DC6 7AF0                       		moveq	#-$10,d5
00006DC8 7C1F                       		moveq	#$1F,d6
00006DCA 6100 0000                  		bsr.w	sub_6ADA
00006DCE                            
00006DCE                            loc_6972:
00006DCE 0892 0001                  		bclr	#1,(a2)
00006DD2 6700                       		beq.s	loc_698E
00006DD4 383C 00E0                  		move.w	#$E0,d4
00006DD8 7AF0                       		moveq	#-$10,d5
00006DDA 6100 0000                  		bsr.w	sub_6C20
00006DDE 383C 00E0                  		move.w	#$E0,d4
00006DE2 7AF0                       		moveq	#-$10,d5
00006DE4 7C1F                       		moveq	#$1F,d6
00006DE6 6100 0000                  		bsr.w	sub_6ADA
00006DEA                            
00006DEA                            loc_698E:
00006DEA 0892 0002                  		bclr	#2,(a2)
00006DEE 6700                       		beq.s	loc_69BE
00006DF0 78F0                       		moveq	#-$10,d4
00006DF2 7AF0                       		moveq	#-$10,d5
00006DF4 6100 0000                  		bsr.w	sub_6C20
00006DF8 78F0                       		moveq	#-$10,d4
00006DFA 7AF0                       		moveq	#-$10,d5
00006DFC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E00 322B 0004                  		move.w	4(a3),d1
00006E04 0241 FFF0                  		andi.w	#-$10,d1
00006E08 9C41                       		sub.w	d1,d6
00006E0A 6D00                       		blt.s	loc_69BE
00006E0C E84E                       		lsr.w	#4,d6
00006E0E 0C46 000F                  		cmpi.w	#$F,d6
00006E12 6500                       		bcs.s	loc_69BA
00006E14 7C0F                       		moveq	#$F,d6
00006E16                            
00006E16                            loc_69BA:
00006E16 6100 0000                  		bsr.w	sub_6B06
00006E1A                            
00006E1A                            loc_69BE:
00006E1A 0892 0003                  		bclr	#3,(a2)
00006E1E 6700                       		beq.s	locret_69F2
00006E20 78F0                       		moveq	#-$10,d4
00006E22 3A3C 0140                  		move.w	#$140,d5
00006E26 6100 0000                  		bsr.w	sub_6C20
00006E2A 78F0                       		moveq	#-$10,d4
00006E2C 3A3C 0140                  		move.w	#$140,d5
00006E30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E34 322B 0004                  		move.w	4(a3),d1
00006E38 0241 FFF0                  		andi.w	#-$10,d1
00006E3C 9C41                       		sub.w	d1,d6
00006E3E 6D00                       		blt.s	locret_69F2
00006E40 E84E                       		lsr.w	#4,d6
00006E42 0C46 000F                  		cmpi.w	#$F,d6
00006E46 6500                       		bcs.s	loc_69EE
00006E48 7C0F                       		moveq	#$F,d6
00006E4A                            
00006E4A                            loc_69EE:
00006E4A 6100 0000                  		bsr.w	sub_6B06
00006E4E                            
00006E4E                            locret_69F2:
00006E4E 4E75                       		rts	
00006E50                            ; End of function sub_6954
00006E50                            
00006E50                            
00006E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E50                            
00006E50                            
00006E50                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006E50 4A12                       		tst.b	(a2)
00006E52 6700 0000                  		beq.w	locret_6A80
00006E56 0892 0002                  		bclr	#2,(a2)
00006E5A 6700                       		beq.s	loc_6A3E
00006E5C 0C53 0010                  		cmpi.w	#$10,(a3)
00006E60 6500                       		bcs.s	loc_6A3E
00006E62 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E66 322B 0004                  		move.w	4(a3),d1
00006E6A 0241 FFF0                  		andi.w	#-$10,d1
00006E6E 9841                       		sub.w	d1,d4
00006E70 3F04                       		move.w	d4,-(sp)
00006E72 7AF0                       		moveq	#-$10,d5
00006E74 6100 0000                  		bsr.w	sub_6C20
00006E78 381F                       		move.w	(sp)+,d4
00006E7A 7AF0                       		moveq	#-$10,d5
00006E7C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E80 322B 0004                  		move.w	4(a3),d1
00006E84 0241 FFF0                  		andi.w	#-$10,d1
00006E88 9C41                       		sub.w	d1,d6
00006E8A 6D00                       		blt.s	loc_6A3E
00006E8C E84E                       		lsr.w	#4,d6
00006E8E 0446 000E                  		subi.w	#$E,d6
00006E92 6400                       		bcc.s	loc_6A3E
00006E94 4446                       		neg.w	d6
00006E96 6100 0000                  		bsr.w	sub_6B06
00006E9A                            
00006E9A                            loc_6A3E:
00006E9A 0892 0003                  		bclr	#3,(a2)
00006E9E 6700                       		beq.s	locret_6A80
00006EA0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EA4 322B 0004                  		move.w	4(a3),d1
00006EA8 0241 FFF0                  		andi.w	#-$10,d1
00006EAC 9841                       		sub.w	d1,d4
00006EAE 3F04                       		move.w	d4,-(sp)
00006EB0 3A3C 0140                  		move.w	#$140,d5
00006EB4 6100 0000                  		bsr.w	sub_6C20
00006EB8 381F                       		move.w	(sp)+,d4
00006EBA 3A3C 0140                  		move.w	#$140,d5
00006EBE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EC2 322B 0004                  		move.w	4(a3),d1
00006EC6 0241 FFF0                  		andi.w	#-$10,d1
00006ECA 9C41                       		sub.w	d1,d6
00006ECC 6D00                       		blt.s	locret_6A80
00006ECE E84E                       		lsr.w	#4,d6
00006ED0 0446 000E                  		subi.w	#$E,d6
00006ED4 6400                       		bcc.s	locret_6A80
00006ED6 4446                       		neg.w	d6
00006ED8 6100 0000                  		bsr.w	sub_6B06
00006EDC                            
00006EDC                            locret_6A80:
00006EDC 4E75                       		rts	
00006EDE                            ; End of function sub_69F4
00006EDE                            
00006EDE                            ; ===========================================================================
00006EDE 4A12                       		tst.b	(a2)
00006EE0 6700                       		beq.s	locret_6AD6
00006EE2 0892 0002                  		bclr	#2,(a2)
00006EE6 6700                       		beq.s	loc_6AAC
00006EE8 383C 00D0                  		move.w	#$D0,d4
00006EEC 322B 0004                  		move.w	4(a3),d1
00006EF0 0241 FFF0                  		andi.w	#-$10,d1
00006EF4 9841                       		sub.w	d1,d4
00006EF6 3F04                       		move.w	d4,-(sp)
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 6100 0000                  		bsr.w	sub_6C3C
00006EFE 381F                       		move.w	(sp)+,d4
00006F00 7AF0                       		moveq	#-$10,d5
00006F02 7C02                       		moveq	#2,d6
00006F04 6100 0000                  		bsr.w	sub_6B06
00006F08                            
00006F08                            loc_6AAC:
00006F08 0892 0003                  		bclr	#3,(a2)
00006F0C 6700                       		beq.s	locret_6AD6
00006F0E 383C 00D0                  		move.w	#$D0,d4
00006F12 322B 0004                  		move.w	4(a3),d1
00006F16 0241 FFF0                  		andi.w	#-$10,d1
00006F1A 9841                       		sub.w	d1,d4
00006F1C 3F04                       		move.w	d4,-(sp)
00006F1E 3A3C 0140                  		move.w	#$140,d5
00006F22 6100 0000                  		bsr.w	sub_6C3C
00006F26 381F                       		move.w	(sp)+,d4
00006F28 3A3C 0140                  		move.w	#$140,d5
00006F2C 7C02                       		moveq	#2,d6
00006F2E 6100 0000                  		bsr.w	sub_6B06
00006F32                            
00006F32                            locret_6AD6:
00006F32 4E75                       		rts	
00006F34                            
00006F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F34                            
00006F34                            
00006F34                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006F34 7C15                       		moveq	#$15,d6
00006F36                            ; End of function sub_6AD8
00006F36                            
00006F36                            
00006F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F36                            
00006F36                            
00006F36                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006F36 2E3C 0080 0000             		move.l	#$800000,d7
00006F3C 2200                       		move.l	d0,d1
00006F3E                            
00006F3E                            loc_6AE2:
00006F3E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F42 6100 0000                  		bsr.w	sub_6BD6
00006F46 2001                       		move.l	d1,d0
00006F48 6100 0000                  		bsr.w	sub_6B32
00006F4C 5801                       		addq.b	#4,d1
00006F4E 0201 007F                  		andi.b	#$7F,d1
00006F52 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F56 0645 0010                  		addi.w	#$10,d5
00006F5A 51CE FFE2                  		dbf	d6,loc_6AE2
00006F5E 4E75                       		rts	
00006F60                            ; End of function sub_6ADA
00006F60                            
00006F60                            
00006F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F60                            
00006F60                            
00006F60                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006F60 7C0F                       		moveq	#$F,d6
00006F62                            ; End of function sub_6B04
00006F62                            
00006F62                            
00006F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F62                            
00006F62                            
00006F62                            sub_6B06:				; XREF: sub_6954
00006F62 2E3C 0080 0000             		move.l	#$800000,d7
00006F68 2200                       		move.l	d0,d1
00006F6A                            
00006F6A                            loc_6B0E:
00006F6A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F6E 6100 0000                  		bsr.w	sub_6BD6
00006F72 2001                       		move.l	d1,d0
00006F74 6100 0000                  		bsr.w	sub_6B32
00006F78 0641 0100                  		addi.w	#$100,d1
00006F7C 0241 0FFF                  		andi.w	#$FFF,d1
00006F80 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F84 0644 0010                  		addi.w	#$10,d4
00006F88 51CE FFE0                  		dbf	d6,loc_6B0E
00006F8C 4E75                       		rts	
00006F8E                            ; End of function sub_6B06
00006F8E                            
00006F8E                            
00006F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8E                            
00006F8E                            
00006F8E                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006F8E 8042                       		or.w	d2,d0
00006F90 4840                       		swap	d0
00006F92 0810 0004                  		btst	#4,(a0)
00006F96 6600                       		bne.s	loc_6B6E
00006F98 0810 0003                  		btst	#3,(a0)
00006F9C 6600                       		bne.s	loc_6B4E
00006F9E 2A80                       		move.l	d0,(a5)
00006FA0 2C99                       		move.l	(a1)+,(a6)
00006FA2 D087                       		add.l	d7,d0
00006FA4 2A80                       		move.l	d0,(a5)
00006FA6 2C99                       		move.l	(a1)+,(a6)
00006FA8 4E75                       		rts	
00006FAA                            ; ===========================================================================
00006FAA                            
00006FAA                            loc_6B4E:
00006FAA 2A80                       		move.l	d0,(a5)
00006FAC 2819                       		move.l	(a1)+,d4
00006FAE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FB4 4844                       		swap	d4
00006FB6 2C84                       		move.l	d4,(a6)
00006FB8 D087                       		add.l	d7,d0
00006FBA 2A80                       		move.l	d0,(a5)
00006FBC 2819                       		move.l	(a1)+,d4
00006FBE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FC4 4844                       		swap	d4
00006FC6 2C84                       		move.l	d4,(a6)
00006FC8 4E75                       		rts	
00006FCA                            ; ===========================================================================
00006FCA                            
00006FCA                            loc_6B6E:
00006FCA 0810 0003                  		btst	#3,(a0)
00006FCE 6600                       		bne.s	loc_6B90
00006FD0 2A80                       		move.l	d0,(a5)
00006FD2 2A19                       		move.l	(a1)+,d5
00006FD4 2819                       		move.l	(a1)+,d4
00006FD6 0A84 1000 1000             		eori.l	#$10001000,d4
00006FDC 2C84                       		move.l	d4,(a6)
00006FDE D087                       		add.l	d7,d0
00006FE0 2A80                       		move.l	d0,(a5)
00006FE2 0A85 1000 1000             		eori.l	#$10001000,d5
00006FE8 2C85                       		move.l	d5,(a6)
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC                            
00006FEC                            loc_6B90:
00006FEC 2A80                       		move.l	d0,(a5)
00006FEE 2A19                       		move.l	(a1)+,d5
00006FF0 2819                       		move.l	(a1)+,d4
00006FF2 0A84 1800 1800             		eori.l	#$18001800,d4
00006FF8 4844                       		swap	d4
00006FFA 2C84                       		move.l	d4,(a6)
00006FFC D087                       		add.l	d7,d0
00006FFE 2A80                       		move.l	d0,(a5)
00007000 0A85 1800 1800             		eori.l	#$18001800,d5
00007006 4845                       		swap	d5
00007008 2C85                       		move.l	d5,(a6)
0000700A 4E75                       		rts	
0000700C                            ; End of function sub_6B32
0000700C                            
0000700C                            ; ===========================================================================
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E 2A80                       		move.l	d0,(a5)
00007010 3A3C 2000                  		move.w	#$2000,d5
00007014 3819                       		move.w	(a1)+,d4
00007016 D845                       		add.w	d5,d4
00007018 3C84                       		move.w	d4,(a6)
0000701A 3819                       		move.w	(a1)+,d4
0000701C D845                       		add.w	d5,d4
0000701E 3C84                       		move.w	d4,(a6)
00007020 D087                       		add.l	d7,d0
00007022 2A80                       		move.l	d0,(a5)
00007024 3819                       		move.w	(a1)+,d4
00007026 D845                       		add.w	d5,d4
00007028 3C84                       		move.w	d4,(a6)
0000702A 3819                       		move.w	(a1)+,d4
0000702C D845                       		add.w	d5,d4
0000702E 3C84                       		move.w	d4,(a6)
00007030 4E75                       		rts	
00007032                            
00007032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007032                            
00007032                            
00007032                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007032 43F8 B000                  		lea	($FFFFB000).w,a1
00007036 D86B 0004                  		add.w	4(a3),d4
0000703A DA53                       		add.w	(a3),d5
0000703C 3604                       		move.w	d4,d3
0000703E E24B                       		lsr.w	#1,d3
00007040 0243 0380                  		andi.w	#$380,d3
00007044 E64D                       		lsr.w	#3,d5
00007046 3005                       		move.w	d5,d0
00007048 EA48                       		lsr.w	#5,d0
0000704A 0240 007F                  		andi.w	#$7F,d0
0000704E D043                       		add.w	d3,d0
00007050 76FF                       		moveq	#-1,d3
00007052 1634 0000                  		move.b	(a4,d0.w),d3
00007056 6700                       		beq.s	locret_6C1E
00007058 5303                       		subq.b	#1,d3
0000705A 0243 007F                  		andi.w	#$7F,d3
0000705E EE5B                       		ror.w	#7,d3
00007060 D844                       		add.w	d4,d4
00007062 0244 01E0                  		andi.w	#$1E0,d4
00007066 0245 001E                  		andi.w	#$1E,d5
0000706A D644                       		add.w	d4,d3
0000706C D645                       		add.w	d5,d3
0000706E 2043                       		movea.l	d3,a0
00007070 3610                       		move.w	(a0),d3
00007072 0243 03FF                  		andi.w	#$3FF,d3
00007076 E74B                       		lsl.w	#3,d3
00007078 D2C3                       		adda.w	d3,a1
0000707A                            
0000707A                            locret_6C1E:
0000707A 4E75                       		rts	
0000707C                            ; End of function sub_6BD6
0000707C                            
0000707C                            
0000707C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707C                            
0000707C                            
0000707C                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000707C D86B 0004                  		add.w	4(a3),d4
00007080 DA53                       		add.w	(a3),d5
00007082 0244 00F0                  		andi.w	#$F0,d4
00007086 0245 01F0                  		andi.w	#$1F0,d5
0000708A E94C                       		lsl.w	#4,d4
0000708C E44D                       		lsr.w	#2,d5
0000708E D845                       		add.w	d5,d4
00007090 7003                       		moveq	#3,d0
00007092 4840                       		swap	d0
00007094 3004                       		move.w	d4,d0
00007096 4E75                       		rts	
00007098                            ; End of function sub_6C20
00007098                            
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            ; not used
00007098                            
00007098                            
00007098                            sub_6C3C:
00007098 D86B 0004                  		add.w	4(a3),d4
0000709C DA53                       		add.w	(a3),d5
0000709E 0244 00F0                  		andi.w	#$F0,d4
000070A2 0245 01F0                  		andi.w	#$1F0,d5
000070A6 E94C                       		lsl.w	#4,d4
000070A8 E44D                       		lsr.w	#2,d5
000070AA D845                       		add.w	d5,d4
000070AC 7002                       		moveq	#2,d0
000070AE 4840                       		swap	d0
000070B0 3004                       		move.w	d4,d0
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_6C3C
000070B4                            
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            ; Subroutine to	load tiles as soon as the level	appears
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000070B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000070BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000070C0 47F8 F700                  		lea	($FFFFF700).w,a3
000070C4 49F8 A400                  		lea	($FFFFA400).w,a4
000070C8 343C 4000                  		move.w	#$4000,d2
000070CC 6100                       		bsr.s	LoadTilesFromStart2
000070CE 47F8 F708                  		lea	($FFFFF708).w,a3
000070D2 49F8 A440                  		lea	($FFFFA440).w,a4
000070D6 343C 6000                  		move.w	#$6000,d2
000070DA                            ; End of function LoadTilesFromStart
000070DA                            
000070DA                            
000070DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070DA                            
000070DA                            
000070DA                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000070DA 78F0                       		moveq	#-$10,d4
000070DC 7C0F                       		moveq	#$F,d6
000070DE                            
000070DE                            loc_6C82:
000070DE 48E7 0E00                  		movem.l	d4-d6,-(sp)
000070E2 7A00                       		moveq	#0,d5
000070E4 3204                       		move.w	d4,d1
000070E6 6100 FF94                  		bsr.w	sub_6C20
000070EA 3801                       		move.w	d1,d4
000070EC 7A00                       		moveq	#0,d5
000070EE 7C1F                       		moveq	#$1F,d6
000070F0 6100 FE44                  		bsr.w	sub_6ADA
000070F4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000070F8 0644 0010                  		addi.w	#$10,d4
000070FC 51CE FFE0                  		dbf	d6,loc_6C82
00007100 4E75                       		rts	
00007102                            ; End of function LoadTilesFromStart2
00007102                            
00007102                            ; ---------------------------------------------------------------------------
00007102                            ; Main Load Block loading subroutine
00007102                            ; ---------------------------------------------------------------------------
00007102                            
00007102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007102                            
00007102                            
00007102                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007102 7000                       		moveq	#0,d0
00007104 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007108 E948                       		lsl.w	#4,d0
0000710A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007110 45F2 0000                  		lea	(a2,d0.w),a2
00007114 2F0A                       		move.l	a2,-(sp)
00007116 588A                       		addq.l	#4,a2
00007118 205A                       		movea.l	(a2)+,a0
0000711A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000711E 303C 0000                  		move.w	#0,d0
00007122 6100 A81A                  		bsr.w	EniDec
00007126 205A                       		movea.l	(a2)+,a0
00007128 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000712E 6100 A98C                  		bsr.w	KosDec
00007132 6100 0000                  		bsr.w	LevelLayoutLoad
00007136 301A                       		move.w	(a2)+,d0
00007138 3012                       		move.w	(a2),d0
0000713A 0240 00FF                  		andi.w	#$FF,d0
0000713E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007144 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007146 700C                       		moveq	#$C,d0		; use SB3 pallet
00007148                            
00007148                            MLB_ChkSBZPal:
00007148 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000714E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007150 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007156 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007158                            
00007158                            MLB_UsePal0E:
00007158 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000715A                            
0000715A                            MLB_NormalPal:
0000715A 6100 B1C0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000715E 245F                       		movea.l	(sp)+,a2
00007160 584A                       		addq.w	#4,a2
00007162 7000                       		moveq	#0,d0
00007164 1012                       		move.b	(a2),d0
00007166 6700                       		beq.s	locret_6D10
00007168 6100 A636                  		bsr.w	LoadPLC		; load pattern load cues
0000716C                            
0000716C                            locret_6D10:
0000716C 4E75                       		rts	
0000716E                            ; End of function MainLoadBlockLoad
0000716E                            
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            ; Level	layout loading subroutine
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            
0000716E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000716E                            
0000716E                            
0000716E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000716E 47F8 A400                  		lea	($FFFFA400).w,a3
00007172 323C 01FF                  		move.w	#$1FF,d1
00007176 7000                       		moveq	#0,d0
00007178                            
00007178                            LevLoad_ClrRam:
00007178 26C0                       		move.l	d0,(a3)+
0000717A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000717E                            
0000717E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007182 7200                       		moveq	#0,d1
00007184 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007188 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000718C 7202                       		moveq	#2,d1
0000718E                            ; End of function LevelLayoutLoad
0000718E                            
0000718E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000718E                            
0000718E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000718E                            
0000718E                            
0000718E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000718E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007192 ED08                       		lsl.b	#6,d0
00007194 EA48                       		lsr.w	#5,d0
00007196 3400                       		move.w	d0,d2
00007198 D040                       		add.w	d0,d0
0000719A D042                       		add.w	d2,d0
0000719C D041                       		add.w	d1,d0
0000719E 43F9 0000 0000             		lea	(Level_Index).l,a1
000071A4 3031 0000                  		move.w	(a1,d0.w),d0
000071A8 43F1 0000                  		lea	(a1,d0.w),a1
000071AC 7200                       		moveq	#0,d1
000071AE 3401                       		move.w	d1,d2
000071B0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000071B2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000071B4                            
000071B4                            LevLoad_NumRows:
000071B4 3001                       		move.w	d1,d0
000071B6 204B                       		movea.l	a3,a0
000071B8                            
000071B8                            LevLoad_Row:
000071B8 10D9                       		move.b	(a1)+,(a0)+
000071BA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000071BE 47EB 0080                  		lea	$80(a3),a3	; do next row
000071C2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000071C6 4E75                       		rts	
000071C8                            ; End of function LevelLayoutLoad2
000071C8                            
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            ; Dynamic screen resize	loading	subroutine
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            
000071C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C8                            
000071C8                            
000071C8                            DynScrResizeLoad:			; XREF: DeformBgLayer
000071C8 7000                       		moveq	#0,d0
000071CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000071CE D040                       		add.w	d0,d0
000071D0 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000071D4 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000071D8 7202                       		moveq	#2,d1
000071DA 3038 F726                  		move.w	($FFFFF726).w,d0
000071DE 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000071E2 6700                       		beq.s	locret_6DAA
000071E4 6400                       		bcc.s	loc_6DAC
000071E6 4441                       		neg.w	d1
000071E8 3038 F704                  		move.w	($FFFFF704).w,d0
000071EC B078 F726                  		cmp.w	($FFFFF726).w,d0
000071F0 6300                       		bls.s	loc_6DA0
000071F2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000071F6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000071FC                            
000071FC                            loc_6DA0:
000071FC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007200 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007206                            
00007206                            locret_6DAA:
00007206 4E75                       		rts	
00007208                            ; ===========================================================================
00007208                            
00007208                            loc_6DAC:				; XREF: DynScrResizeLoad
00007208 3038 F704                  		move.w	($FFFFF704).w,d0
0000720C 5040                       		addq.w	#8,d0
0000720E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007212 6500                       		bcs.s	loc_6DC4
00007214 0838 0001 D022             		btst	#1,($FFFFD022).w
0000721A 6700                       		beq.s	loc_6DC4
0000721C D241                       		add.w	d1,d1
0000721E D241                       		add.w	d1,d1
00007220                            
00007220                            loc_6DC4:
00007220 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007224 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000722A 4E75                       		rts	
0000722C                            ; End of function DynScrResizeLoad
0000722C                            
0000722C                            ; ===========================================================================
0000722C                            ; ---------------------------------------------------------------------------
0000722C                            ; Offset index for dynamic screen resizing
0000722C                            ; ---------------------------------------------------------------------------
0000722C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007230 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007234 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007238 0000                       		dc.w Resize_Ending-Resize_Index
0000723A                            ; ===========================================================================
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            ; Green	Hill Zone dynamic screen resizing
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            
0000723A                            Resize_GHZ:				; XREF: Resize_Index
0000723A 7000                       		moveq	#0,d0
0000723C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007240 D040                       		add.w	d0,d0
00007242 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007246 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000724A                            ; ===========================================================================
0000724A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000724C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000724E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007250                            ; ===========================================================================
00007250                            
00007250                            Resize_GHZ1:
00007250 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007256 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000725C 6500                       		bcs.s	locret_6E08	; if not, branch
0000725E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007264                            
00007264                            locret_6E08:
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            Resize_GHZ2:
00007266 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000726C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007272 6500                       		bcs.s	locret_6E3A
00007274 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000727A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007280 6500                       		bcs.s	locret_6E3A
00007282 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007288 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000728E 6500                       		bcs.s	locret_6E3A
00007290 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007296                            
00007296                            locret_6E3A:
00007296 4E75                       		rts	
00007298                            ; ===========================================================================
00007298                            
00007298                            Resize_GHZ3:
00007298 7000                       		moveq	#0,d0
0000729A 1038 F742                  		move.b	($FFFFF742).w,d0
0000729E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000072A2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000072A6                            ; ===========================================================================
000072A6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000072A8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000072AA 0000                       		dc.w Resize_GHZ3end-off_6E4A
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            Resize_GHZ3main:
000072AC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072B2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000072B8 6500                       		bcs.s	locret_6E96
000072BA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000072C0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000072C6 6500                       		bcs.s	locret_6E96
000072C8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000072CE 6500                       		bcs.s	loc_6E98
000072D0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000072D6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000072DC 6400                       		bcc.s	loc_6E8E
000072DE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000072E4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000072EA                            
000072EA                            loc_6E8E:
000072EA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000072F0 6400                       		bcc.s	loc_6E98
000072F2                            
000072F2                            locret_6E96:
000072F2 4E75                       		rts	
000072F4                            ; ===========================================================================
000072F4                            
000072F4                            loc_6E98:
000072F4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000072FE 4E75                       		rts	
00007300                            ; ===========================================================================
00007300                            
00007300                            Resize_GHZ3boss:
00007300 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007306 6400                       		bcc.s	loc_6EB0
00007308 5538 F742                  		subq.b	#2,($FFFFF742).w
0000730C                            
0000730C                            loc_6EB0:
0000730C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007312 6500                       		bcs.s	locret_6EE8
00007314 6100 0000                  		bsr.w	SingleObjLoad
00007318 6600                       		bne.s	loc_6ED0
0000731A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000731E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007324 337C 0280 000C             		move.w	#$280,$C(a1)
0000732A                            
0000732A                            loc_6ED0:
0000732A 303C 008C                  		move.w	#$8C,d0
0000732E 6100 A286                  		bsr.w	PlaySound	; play boss music
00007332 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007338 5438 F742                  		addq.b	#2,($FFFFF742).w
0000733C 7011                       		moveq	#$11,d0
0000733E 6000 A460                  		bra.w	LoadPLC		; load boss patterns
00007342                            ; ===========================================================================
00007342                            
00007342                            locret_6EE8:
00007342 4E75                       		rts	
00007344                            ; ===========================================================================
00007344                            
00007344                            Resize_GHZ3end:
00007344 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            ; Labyrinth Zone dynamic screen	resizing
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            
0000734C                            Resize_LZ:				; XREF: Resize_Index
0000734C 7000                       		moveq	#0,d0
0000734E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007352 D040                       		add.w	d0,d0
00007354 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000735E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007360 0000                       		dc.w Resize_LZ3-Resize_LZx
00007362 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_LZ12:
00007364 4E75                       		rts	
00007366                            ; ===========================================================================
00007366                            
00007366                            Resize_LZ3:
00007366 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000736A 6700                       		beq.s	loc_6F28	; if not, branch
0000736C 43F8 A506                  		lea	($FFFFA506).w,a1
00007370 0C11 0007                  		cmpi.b	#7,(a1)
00007374 6700                       		beq.s	loc_6F28
00007376 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000737A 303C 00B7                  		move.w	#$B7,d0
0000737E 6100 A23C                  		bsr.w	PlaySound_Special ; play rumbling sound
00007382                            
00007382                            loc_6F28:
00007382 4A38 F742                  		tst.b	($FFFFF742).w
00007386 6600                       		bne.s	locret_6F64
00007388 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000738E 6500                       		bcs.s	locret_6F62
00007390 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007396 6400                       		bcc.s	locret_6F62
00007398 6100 0000                  		bsr.w	SingleObjLoad
0000739C 6600                       		bne.s	loc_6F4A
0000739E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000073A2                            
000073A2                            loc_6F4A:
000073A2 303C 008C                  		move.w	#$8C,d0
000073A6 6100 A20E                  		bsr.w	PlaySound	; play boss music
000073AA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000073B4 7011                       		moveq	#$11,d0
000073B6 6000 A3E8                  		bra.w	LoadPLC		; load boss patterns
000073BA                            ; ===========================================================================
000073BA                            
000073BA                            locret_6F62:
000073BA 4E75                       		rts	
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            locret_6F64:
000073BC 4E75                       		rts	
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            Resize_SBZ3:
000073BE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000073C4 6500                       		bcs.s	locret_6F8C
000073C6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000073CC 6400                       		bcc.s	locret_6F8C	; if not, branch
000073CE 4238 FE30                  		clr.b	($FFFFFE30).w
000073D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000073D8 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000073DE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000073E4                            
000073E4                            locret_6F8C:
000073E4 4E75                       		rts	
000073E6                            ; ===========================================================================
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            ; Marble Zone dynamic screen resizing
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            
000073E6                            Resize_MZ:				; XREF: Resize_Index
000073E6 7000                       		moveq	#0,d0
000073E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073EC D040                       		add.w	d0,d0
000073EE 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000073F2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000073F6                            ; ===========================================================================
000073F6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000073F8 0000                       		dc.w Resize_MZ2-Resize_MZx
000073FA 0000                       		dc.w Resize_MZ3-Resize_MZx
000073FC                            ; ===========================================================================
000073FC                            
000073FC                            Resize_MZ1:
000073FC 7000                       		moveq	#0,d0
000073FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007402 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007406 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000740A                            ; ===========================================================================
0000740A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000740C 0000                       		dc.w loc_6FEA-off_6FB2
0000740E 0000                       		dc.w loc_702E-off_6FB2
00007410 0000                       		dc.w loc_7050-off_6FB2
00007412                            ; ===========================================================================
00007412                            
00007412                            loc_6FBA:
00007412 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007418 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000741E 6500                       		bcs.s	locret_6FE8
00007420 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007426 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000742C 6500                       		bcs.s	locret_6FE8
0000742E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007434 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000743A 6500                       		bcs.s	locret_6FE8
0000743C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007440                            
00007440                            locret_6FE8:
00007440 4E75                       		rts	
00007442                            ; ===========================================================================
00007442                            
00007442                            loc_6FEA:
00007442 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007448 6400                       		bcc.s	loc_6FF8
0000744A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000744E 4E75                       		rts	
00007450                            ; ===========================================================================
00007450                            
00007450                            loc_6FF8:
00007450 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007456 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000745C 6400                       		bcc.s	locret_702C
0000745E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007464 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000746A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007470 6400                       		bcc.s	locret_702C
00007472 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007478 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000747E 6500                       		bcs.s	locret_702C
00007480 5438 F742                  		addq.b	#2,($FFFFF742).w
00007484                            
00007484                            locret_702C:
00007484 4E75                       		rts	
00007486                            ; ===========================================================================
00007486                            
00007486                            loc_702E:
00007486 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000748C 6400                       		bcc.s	loc_703C
0000748E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007492 4E75                       		rts	
00007494                            ; ===========================================================================
00007494                            
00007494                            loc_703C:
00007494 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000749A 6500                       		bcs.s	locret_704E
0000749C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000074A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000074A6                            
000074A6                            locret_704E:
000074A6 4E75                       		rts	
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            loc_7050:
000074A8 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000074AE 6500                       		bcs.s	locret_7072
000074B0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074B6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074BC 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000074C2 6500                       		bcs.s	locret_7072
000074C4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000074CA                            
000074CA                            locret_7072:
000074CA 4E75                       		rts	
000074CC                            ; ===========================================================================
000074CC                            
000074CC                            Resize_MZ2:
000074CC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000074D2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074D8 6500                       		bcs.s	locret_7088
000074DA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000074E0                            
000074E0                            locret_7088:
000074E0 4E75                       		rts	
000074E2                            ; ===========================================================================
000074E2                            
000074E2                            Resize_MZ3:
000074E2 7000                       		moveq	#0,d0
000074E4 1038 F742                  		move.b	($FFFFF742).w,d0
000074E8 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000074EC 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000074F0                            ; ===========================================================================
000074F0 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000074F2 0000                       		dc.w Resize_MZ3end-off_7098
000074F4                            ; ===========================================================================
000074F4                            
000074F4                            Resize_MZ3boss:
000074F4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000074FA 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007500 6500                       		bcs.s	locret_70E8
00007502 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007508 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000750E 6500                       		bcs.s	locret_70E8
00007510 6100 0000                  		bsr.w	SingleObjLoad
00007514 6600                       		bne.s	loc_70D0
00007516 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000751A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007520 337C 022C 000C             		move.w	#$22C,$C(a1)
00007526                            
00007526                            loc_70D0:
00007526 303C 008C                  		move.w	#$8C,d0
0000752A 6100 A08A                  		bsr.w	PlaySound	; play boss music
0000752E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007534 5438 F742                  		addq.b	#2,($FFFFF742).w
00007538 7011                       		moveq	#$11,d0
0000753A 6000 A264                  		bra.w	LoadPLC		; load boss patterns
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            locret_70E8:
0000753E 4E75                       		rts	
00007540                            ; ===========================================================================
00007540                            
00007540                            Resize_MZ3end:
00007540 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007546 4E75                       		rts	
00007548                            ; ===========================================================================
00007548                            ; ---------------------------------------------------------------------------
00007548                            ; Star Light Zone dynamic screen resizing
00007548                            ; ---------------------------------------------------------------------------
00007548                            
00007548                            Resize_SLZ:				; XREF: Resize_Index
00007548 7000                       		moveq	#0,d0
0000754A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000754E D040                       		add.w	d0,d0
00007550 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007554 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007558                            ; ===========================================================================
00007558 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000755A 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000755C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000755E                            ; ===========================================================================
0000755E                            
0000755E                            Resize_SLZ12:
0000755E 4E75                       		rts	
00007560                            ; ===========================================================================
00007560                            
00007560                            Resize_SLZ3:
00007560 7000                       		moveq	#0,d0
00007562 1038 F742                  		move.b	($FFFFF742).w,d0
00007566 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000756A 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000756E                            ; ===========================================================================
0000756E 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007570 0000                       		dc.w Resize_SLZ3boss-off_7118
00007572 0000                       		dc.w Resize_SLZ3end-off_7118
00007574                            ; ===========================================================================
00007574                            
00007574                            Resize_SLZ3main:
00007574 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000757A 6500                       		bcs.s	locret_7130
0000757C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007582 5438 F742                  		addq.b	#2,($FFFFF742).w
00007586                            
00007586                            locret_7130:
00007586 4E75                       		rts	
00007588                            ; ===========================================================================
00007588                            
00007588                            Resize_SLZ3boss:
00007588 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000758E 6500                       		bcs.s	locret_715C
00007590 6100 0000                  		bsr.w	SingleObjLoad
00007594 6600                       		bne.s	loc_7144
00007596 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000759A                            
0000759A                            loc_7144:
0000759A 303C 008C                  		move.w	#$8C,d0
0000759E 6100 A016                  		bsr.w	PlaySound	; play boss music
000075A2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075AC 7011                       		moveq	#$11,d0
000075AE 6000 A1F0                  		bra.w	LoadPLC		; load boss patterns
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            locret_715C:
000075B2 4E75                       		rts	
000075B4                            ; ===========================================================================
000075B4                            
000075B4                            Resize_SLZ3end:
000075B4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075BA 4E75                       		rts
000075BC 4E75                       		rts
000075BE                            ; ===========================================================================
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            ; Spring Yard Zone dynamic screen resizing
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            
000075BE                            Resize_SYZ:				; XREF: Resize_Index
000075BE 7000                       		moveq	#0,d0
000075C0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075C4 D040                       		add.w	d0,d0
000075C6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000075CA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000075CE                            ; ===========================================================================
000075CE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000075D0 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000075D2 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000075D4                            ; ===========================================================================
000075D4                            
000075D4                            Resize_SYZ1:
000075D4 4E75                       		rts	
000075D6                            ; ===========================================================================
000075D6                            
000075D6                            Resize_SYZ2:
000075D6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075DC 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000075E2 6500                       		bcs.s	locret_71A2
000075E4 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000075EA 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000075F0 6500                       		bcs.s	locret_71A2
000075F2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075F8                            
000075F8                            locret_71A2:
000075F8 4E75                       		rts	
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            Resize_SYZ3:
000075FA 7000                       		moveq	#0,d0
000075FC 1038 F742                  		move.b	($FFFFF742).w,d0
00007600 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007604 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007608                            ; ===========================================================================
00007608 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000760A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000760C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_SYZ3main:
0000760E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007614 6500                       		bcs.s	locret_71CE
00007616 6100 0000                  		bsr.w	SingleObjLoad
0000761A 6600                       		bne.s	locret_71CE
0000761C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007620 5438 F742                  		addq.b	#2,($FFFFF742).w
00007624                            
00007624                            locret_71CE:
00007624 4E75                       		rts	
00007626                            ; ===========================================================================
00007626                            
00007626                            Resize_SYZ3boss:
00007626 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000762C 6500                       		bcs.s	locret_7200
0000762E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007634 6100 0000                  		bsr.w	SingleObjLoad
00007638 6600                       		bne.s	loc_71EC
0000763A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000763E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007642                            
00007642                            loc_71EC:
00007642 303C 008C                  		move.w	#$8C,d0
00007646 6100 9F6E                  		bsr.w	PlaySound	; play boss music
0000764A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007650 7011                       		moveq	#$11,d0
00007652 6000 A14C                  		bra.w	LoadPLC		; load boss patterns
00007656                            ; ===========================================================================
00007656                            
00007656                            locret_7200:
00007656 4E75                       		rts	
00007658                            ; ===========================================================================
00007658                            
00007658                            Resize_SYZ3end:
00007658 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000765E 4E75                       		rts	
00007660                            ; ===========================================================================
00007660                            ; ---------------------------------------------------------------------------
00007660                            ; Scrap	Brain Zone dynamic screen resizing
00007660                            ; ---------------------------------------------------------------------------
00007660                            
00007660                            Resize_SBZ:				; XREF: Resize_Index
00007660 7000                       		moveq	#0,d0
00007662 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007666 D040                       		add.w	d0,d0
00007668 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000766C 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007670                            ; ===========================================================================
00007670 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007672 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007674 0000                       		dc.w Resize_FZ-Resize_SBZx
00007676                            ; ===========================================================================
00007676                            
00007676                            Resize_SBZ1:
00007676 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000767C 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007682 6500                       		bcs.s	locret_7242
00007684 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000768A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007690 6500                       		bcs.s	locret_7242
00007692 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007698                            
00007698                            locret_7242:
00007698 4E75                       		rts	
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_SBZ2:
0000769A 7000                       		moveq	#0,d0
0000769C 1038 F742                  		move.b	($FFFFF742).w,d0
000076A0 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000076A4 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000076A8                            ; ===========================================================================
000076A8 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000076AA 0000                       		dc.w Resize_SBZ2boss-off_7252
000076AC 0000                       		dc.w Resize_SBZ2boss2-off_7252
000076AE 0000                       		dc.w Resize_SBZ2end-off_7252
000076B0                            ; ===========================================================================
000076B0                            
000076B0                            Resize_SBZ2main:
000076B0 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000076B6 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000076BC 6500                       		bcs.s	locret_727A
000076BE 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000076C4 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000076CA 6500                       		bcs.s	locret_727A
000076CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D0                            
000076D0                            locret_727A:
000076D0 4E75                       		rts	
000076D2                            ; ===========================================================================
000076D2                            
000076D2                            Resize_SBZ2boss:
000076D2 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000076D8 6500                       		bcs.s	locret_7298
000076DA 6100 0000                  		bsr.w	SingleObjLoad
000076DE 6600                       		bne.s	locret_7298
000076E0 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000076E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E8 701E                       		moveq	#$1E,d0
000076EA 6000 A0B4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000076EE                            ; ===========================================================================
000076EE                            
000076EE                            locret_7298:
000076EE 4E75                       		rts	
000076F0                            ; ===========================================================================
000076F0                            
000076F0                            Resize_SBZ2boss2:
000076F0 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000076F6 6500                       		bcs.s	loc_72B6
000076F8 6100 0000                  		bsr.w	SingleObjLoad
000076FC 6600                       		bne.s	loc_72B0
000076FE 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007702 5438 F742                  		addq.b	#2,($FFFFF742).w
00007706                            
00007706                            loc_72B0:
00007706 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000770C                            
0000770C                            loc_72B6:
0000770C 6000                       		bra.s	loc_72C2
0000770E                            ; ===========================================================================
0000770E                            
0000770E                            Resize_SBZ2end:
0000770E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007714 6500                       		bcs.s	loc_72C2
00007716 4E75                       		rts	
00007718                            ; ===========================================================================
00007718                            
00007718                            loc_72C2:
00007718 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            Resize_FZ:
00007720 7000                       		moveq	#0,d0
00007722 1038 F742                  		move.b	($FFFFF742).w,d0
00007726 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000772A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000772E                            ; ===========================================================================
0000772E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007732 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007736 0000                       		dc.w Resize_FZend2-off_72D8
00007738                            ; ===========================================================================
00007738                            
00007738                            Resize_FZmain:
00007738 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000773E 6500                       		bcs.s	loc_72F4
00007740 5438 F742                  		addq.b	#2,($FFFFF742).w
00007744 701F                       		moveq	#$1F,d0
00007746 6100 A058                  		bsr.w	LoadPLC		; load FZ boss patterns
0000774A                            
0000774A                            loc_72F4:
0000774A 60CC                       		bra.s	loc_72C2
0000774C                            ; ===========================================================================
0000774C                            
0000774C                            Resize_FZboss:
0000774C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007752 6500                       		bcs.s	loc_7312
00007754 6100 0000                  		bsr.w	SingleObjLoad
00007758 6600                       		bne.s	loc_7312
0000775A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000775E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007762 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007768                            
00007768                            loc_7312:
00007768 60AE                       		bra.s	loc_72C2
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            Resize_FZend:
0000776A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007770 6500                       		bcs.s	loc_7320
00007772 5438 F742                  		addq.b	#2,($FFFFF742).w
00007776                            
00007776                            loc_7320:
00007776 60A0                       		bra.s	loc_72C2
00007778                            ; ===========================================================================
00007778                            
00007778                            locret_7322:
00007778 4E75                       		rts	
0000777A                            ; ===========================================================================
0000777A                            
0000777A                            Resize_FZend2:
0000777A 609C                       		bra.s	loc_72C2
0000777C                            ; ===========================================================================
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            ; Ending sequence dynamic screen resizing (empty)
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            
0000777C                            Resize_Ending:				; XREF: Resize_Index
0000777C 4E75                       		rts	
0000777E                            ; ===========================================================================
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            ; Object 11 - GHZ bridge
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            
0000777E                            Obj11:					; XREF: Obj_Index
0000777E 7000                       		moveq	#0,d0
00007780 1028 0024                  		move.b	$24(a0),d0
00007784 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007788 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000778C                            ; ===========================================================================
0000778C 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007790 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007794 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007798                            ; ===========================================================================
00007798                            
00007798                            Obj11_Main:				; XREF: Obj11_Index
00007798 5428 0024                  		addq.b	#2,$24(a0)
0000779C 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000077A4 317C 438E 0002             		move.w	#$438E,2(a0)
000077AA 117C 0004 0001             		move.b	#4,1(a0)
000077B0 117C 0003 0018             		move.b	#3,$18(a0)
000077B6 117C 0080 0019             		move.b	#$80,$19(a0)
000077BC 3428 000C                  		move.w	$C(a0),d2
000077C0 3628 0008                  		move.w	8(a0),d3
000077C4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000077C6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000077CA 7200                       		moveq	#0,d1
000077CC 1212                       		move.b	(a2),d1		; copy a2 to d1
000077CE 14FC 0000                  		move.b	#0,(a2)+
000077D2 3001                       		move.w	d1,d0
000077D4 E248                       		lsr.w	#1,d0
000077D6 E948                       		lsl.w	#4,d0
000077D8 9640                       		sub.w	d0,d3
000077DA 5501                       		subq.b	#2,d1
000077DC 6500                       		bcs.s	Obj11_Action
000077DE                            
000077DE                            Obj11_MakeBdg:
000077DE 6100 0000                  		bsr.w	SingleObjLoad
000077E2 6600                       		bne.s	Obj11_Action
000077E4 5228 0028                  		addq.b	#1,$28(a0)
000077E8 B668 0008                  		cmp.w	8(a0),d3
000077EC 6600                       		bne.s	loc_73B8
000077EE 0643 0010                  		addi.w	#$10,d3
000077F2 3142 000C                  		move.w	d2,$C(a0)
000077F6 3142 003C                  		move.w	d2,$3C(a0)
000077FA 3A08                       		move.w	a0,d5
000077FC 0445 D000                  		subi.w	#-$3000,d5
00007800 EC4D                       		lsr.w	#6,d5
00007802 0245 007F                  		andi.w	#$7F,d5
00007806 14C5                       		move.b	d5,(a2)+
00007808 5228 0028                  		addq.b	#1,$28(a0)
0000780C                            
0000780C                            loc_73B8:				; XREF: ROM:00007398j
0000780C 3A09                       		move.w	a1,d5
0000780E 0445 D000                  		subi.w	#-$3000,d5
00007812 EC4D                       		lsr.w	#6,d5
00007814 0245 007F                  		andi.w	#$7F,d5
00007818 14C5                       		move.b	d5,(a2)+
0000781A 137C 000A 0024             		move.b	#$A,$24(a1)
00007820 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007822 3342 000C                  		move.w	d2,$C(a1)
00007826 3342 003C                  		move.w	d2,$3C(a1)
0000782A 3343 0008                  		move.w	d3,8(a1)
0000782E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007836 337C 438E 0002             		move.w	#$438E,2(a1)
0000783C 137C 0004 0001             		move.b	#4,1(a1)
00007842 137C 0003 0018             		move.b	#3,$18(a1)
00007848 137C 0008 0019             		move.b	#8,$19(a1)
0000784E 0643 0010                  		addi.w	#$10,d3
00007852 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007856                            
00007856                            Obj11_Action:				; XREF: Obj11_Index
00007856 6100                       		bsr.s	Obj11_Solid
00007858 4A28 003E                  		tst.b	$3E(a0)
0000785C 6700                       		beq.s	Obj11_Display
0000785E 5928 003E                  		subq.b	#4,$3E(a0)
00007862 6100 0000                  		bsr.w	Obj11_Bend
00007866                            
00007866                            Obj11_Display:
00007866 6100 0000                  		bsr.w	DisplaySprite
0000786A 6000 0000                  		bra.w	Obj11_ChkDel
0000786E                            
0000786E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000786E                            
0000786E                            
0000786E                            Obj11_Solid:				; XREF: Obj11_Action
0000786E 7200                       		moveq	#0,d1
00007870 1228 0028                  		move.b	$28(a0),d1
00007874 E749                       		lsl.w	#3,d1
00007876 3401                       		move.w	d1,d2
00007878 5041                       		addq.w	#8,d1
0000787A D442                       		add.w	d2,d2
0000787C 43F8 D000                  		lea	($FFFFD000).w,a1
00007880 4A69 0012                  		tst.w	$12(a1)
00007884 6B00 0000                  		bmi.w	locret_751E
00007888 3029 0008                  		move.w	8(a1),d0
0000788C 9068 0008                  		sub.w	8(a0),d0
00007890 D041                       		add.w	d1,d0
00007892 6B00 0000                  		bmi.w	locret_751E
00007896 B042                       		cmp.w	d2,d0
00007898 6400 0000                  		bcc.w	locret_751E
0000789C 6000                       		bra.s	Platform2
0000789E                            ; End of function Obj11_Solid
0000789E                            
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            ; Platform subroutine
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            
0000789E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789E                            
0000789E                            
0000789E                            PlatformObject:
0000789E 43F8 D000                  		lea	($FFFFD000).w,a1
000078A2 4A69 0012                  		tst.w	$12(a1)
000078A6 6B00 0000                  		bmi.w	locret_751E
000078AA 3029 0008                  		move.w	8(a1),d0
000078AE 9068 0008                  		sub.w	8(a0),d0
000078B2 D041                       		add.w	d1,d0
000078B4 6B00 0000                  		bmi.w	locret_751E
000078B8 D241                       		add.w	d1,d1
000078BA B041                       		cmp.w	d1,d0
000078BC 6400 0000                  		bcc.w	locret_751E
000078C0                            
000078C0                            Platform2:
000078C0 3028 000C                  		move.w	$C(a0),d0
000078C4 5140                       		subq.w	#8,d0
000078C6                            
000078C6                            Platform3:
000078C6 3429 000C                  		move.w	$C(a1),d2
000078CA 1229 0016                  		move.b	$16(a1),d1
000078CE 4881                       		ext.w	d1
000078D0 D242                       		add.w	d2,d1
000078D2 5841                       		addq.w	#4,d1
000078D4 9041                       		sub.w	d1,d0
000078D6 6200 0000                  		bhi.w	locret_751E
000078DA 0C40 FFF0                  		cmpi.w	#-$10,d0
000078DE 6500 0000                  		bcs.w	locret_751E
000078E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000078E6 6B00 0000                  		bmi.w	locret_751E
000078EA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000078F0 6400 0000                  		bcc.w	locret_751E
000078F4 D440                       		add.w	d0,d2
000078F6 5642                       		addq.w	#3,d2
000078F8 3342 000C                  		move.w	d2,$C(a1)
000078FC 5428 0024                  		addq.b	#2,$24(a0)
00007900                            
00007900                            loc_74AE:
00007900 0829 0003 0022             		btst	#3,$22(a1)
00007906 6700                       		beq.s	loc_74DC
00007908 7000                       		moveq	#0,d0
0000790A 1029 003D                  		move.b	$3D(a1),d0
0000790E ED48                       		lsl.w	#6,d0
00007910 0680 00FF D000             		addi.l	#$FFD000,d0
00007916 2440                       		movea.l	d0,a2
00007918 08AA 0003 0022             		bclr	#3,$22(a2)
0000791E 422A 0025                  		clr.b	$25(a2)
00007922 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007928 6600                       		bne.s	loc_74DC
0000792A 552A 0024                  		subq.b	#2,$24(a2)
0000792E                            
0000792E                            loc_74DC:
0000792E 3008                       		move.w	a0,d0
00007930 0440 D000                  		subi.w	#-$3000,d0
00007934 EC48                       		lsr.w	#6,d0
00007936 0240 007F                  		andi.w	#$7F,d0
0000793A 1340 003D                  		move.b	d0,$3D(a1)
0000793E 137C 0000 0026             		move.b	#0,$26(a1)
00007944 337C 0000 0012             		move.w	#0,$12(a1)
0000794A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007950 0829 0001 0022             		btst	#1,$22(a1)
00007956 6700                       		beq.s	loc_7512
00007958 2F08                       		move.l	a0,-(sp)
0000795A 2049                       		movea.l	a1,a0
0000795C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007962 205F                       		movea.l	(sp)+,a0
00007964                            
00007964                            loc_7512:
00007964 08E9 0003 0022             		bset	#3,$22(a1)
0000796A 08E8 0003 0022             		bset	#3,$22(a0)
00007970                            
00007970                            locret_751E:
00007970 4E75                       		rts	
00007972                            ; End of function PlatformObject
00007972                            
00007972                            ; ---------------------------------------------------------------------------
00007972                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007972                            ; ---------------------------------------------------------------------------
00007972                            
00007972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007972                            
00007972                            
00007972                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007972 43F8 D000                  		lea	($FFFFD000).w,a1
00007976 4A69 0012                  		tst.w	$12(a1)
0000797A 6B00 FFF4                  		bmi.w	locret_751E
0000797E 3029 0008                  		move.w	8(a1),d0
00007982 9068 0008                  		sub.w	8(a0),d0
00007986 D041                       		add.w	d1,d0
00007988 6BE6                       		bmi.s	locret_751E
0000798A D241                       		add.w	d1,d1
0000798C B041                       		cmp.w	d1,d0
0000798E 64E0                       		bcc.s	locret_751E
00007990 0828 0000 0001             		btst	#0,1(a0)
00007996 6700                       		beq.s	loc_754A
00007998 4640                       		not.w	d0
0000799A D041                       		add.w	d1,d0
0000799C                            
0000799C                            loc_754A:
0000799C E248                       		lsr.w	#1,d0
0000799E 7600                       		moveq	#0,d3
000079A0 1632 0000                  		move.b	(a2,d0.w),d3
000079A4 3028 000C                  		move.w	$C(a0),d0
000079A8 9043                       		sub.w	d3,d0
000079AA 6000 FF1A                  		bra.w	Platform3
000079AE                            ; End of function SlopeObject
000079AE                            
000079AE                            
000079AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079AE                            
000079AE                            
000079AE                            Obj15_Solid:				; XREF: Obj15_SetSolid
000079AE 43F8 D000                  		lea	($FFFFD000).w,a1
000079B2 4A69 0012                  		tst.w	$12(a1)
000079B6 6B00 FFB8                  		bmi.w	locret_751E
000079BA 3029 0008                  		move.w	8(a1),d0
000079BE 9068 0008                  		sub.w	8(a0),d0
000079C2 D041                       		add.w	d1,d0
000079C4 6B00 FFAA                  		bmi.w	locret_751E
000079C8 D241                       		add.w	d1,d1
000079CA B041                       		cmp.w	d1,d0
000079CC 6400 FFA2                  		bcc.w	locret_751E
000079D0 3028 000C                  		move.w	$C(a0),d0
000079D4 9043                       		sub.w	d3,d0
000079D6 6000 FEEE                  		bra.w	Platform3
000079DA                            ; End of function Obj15_Solid
000079DA                            
000079DA                            ; ===========================================================================
000079DA                            
000079DA                            Obj11_Action2:				; XREF: Obj11_Index
000079DA 6100                       		bsr.s	Obj11_WalkOff
000079DC 6100 0000                  		bsr.w	DisplaySprite
000079E0 6000 0000                  		bra.w	Obj11_ChkDel
000079E4                            
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            ; Subroutine allowing Sonic to walk off a bridge
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            
000079E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E4                            
000079E4                            
000079E4                            Obj11_WalkOff:				; XREF: Obj11_Action2
000079E4 7200                       		moveq	#0,d1
000079E6 1228 0028                  		move.b	$28(a0),d1
000079EA E749                       		lsl.w	#3,d1
000079EC 3401                       		move.w	d1,d2
000079EE 5041                       		addq.w	#8,d1
000079F0 6100                       		bsr.s	ExitPlatform2
000079F2 6400                       		bcc.s	locret_75BE
000079F4 E848                       		lsr.w	#4,d0
000079F6 1140 003F                  		move.b	d0,$3F(a0)
000079FA 1028 003E                  		move.b	$3E(a0),d0
000079FE 0C00 0040                  		cmpi.b	#$40,d0
00007A02 6700                       		beq.s	loc_75B6
00007A04 5828 003E                  		addq.b	#4,$3E(a0)
00007A08                            
00007A08                            loc_75B6:
00007A08 6100 0000                  		bsr.w	Obj11_Bend
00007A0C 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A10                            
00007A10                            locret_75BE:
00007A10 4E75                       		rts	
00007A12                            ; End of function Obj11_WalkOff
00007A12                            
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            
00007A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A12                            
00007A12                            
00007A12                            ExitPlatform:
00007A12 3401                       		move.w	d1,d2
00007A14                            
00007A14                            ExitPlatform2:
00007A14 D442                       		add.w	d2,d2
00007A16 43F8 D000                  		lea	($FFFFD000).w,a1
00007A1A 0829 0001 0022             		btst	#1,$22(a1)
00007A20 6600                       		bne.s	loc_75E0
00007A22 3029 0008                  		move.w	8(a1),d0
00007A26 9068 0008                  		sub.w	8(a0),d0
00007A2A D041                       		add.w	d1,d0
00007A2C 6B00                       		bmi.s	loc_75E0
00007A2E B042                       		cmp.w	d2,d0
00007A30 6500                       		bcs.s	locret_75F2
00007A32                            
00007A32                            loc_75E0:
00007A32 08A9 0003 0022             		bclr	#3,$22(a1)
00007A38 117C 0002 0024             		move.b	#2,$24(a0)
00007A3E 08A8 0003 0022             		bclr	#3,$22(a0)
00007A44                            
00007A44                            locret_75F2:
00007A44 4E75                       		rts	
00007A46                            ; End of function ExitPlatform
00007A46                            
00007A46                            
00007A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A46                            
00007A46                            
00007A46                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007A46 7000                       		moveq	#0,d0
00007A48 1028 003F                  		move.b	$3F(a0),d0
00007A4C 1030 0029                  		move.b	$29(a0,d0.w),d0
00007A50 ED48                       		lsl.w	#6,d0
00007A52 0680 00FF D000             		addi.l	#$FFD000,d0
00007A58 2440                       		movea.l	d0,a2
00007A5A 43F8 D000                  		lea	($FFFFD000).w,a1
00007A5E 302A 000C                  		move.w	$C(a2),d0
00007A62 5140                       		subq.w	#8,d0
00007A64 7200                       		moveq	#0,d1
00007A66 1229 0016                  		move.b	$16(a1),d1
00007A6A 9041                       		sub.w	d1,d0
00007A6C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007A70 4E75                       		rts	
00007A72                            ; End of function Obj11_MoveSonic
00007A72                            
00007A72                            
00007A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A72                            
00007A72                            
00007A72                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007A72 1028 003E                  		move.b	$3E(a0),d0
00007A76 6100 B1AA                  		bsr.w	CalcSine
00007A7A 3800                       		move.w	d0,d4
00007A7C 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007A82 7000                       		moveq	#0,d0
00007A84 1028 0028                  		move.b	$28(a0),d0
00007A88 E948                       		lsl.w	#4,d0
00007A8A 7600                       		moveq	#0,d3
00007A8C 1628 003F                  		move.b	$3F(a0),d3
00007A90 3403                       		move.w	d3,d2
00007A92 D640                       		add.w	d0,d3
00007A94 7A00                       		moveq	#0,d5
00007A96 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007A9C 1A35 3000                  		move.b	(a5,d3.w),d5
00007AA0 0243 000F                  		andi.w	#$F,d3
00007AA4 E94B                       		lsl.w	#4,d3
00007AA6 47F4 3000                  		lea	(a4,d3.w),a3
00007AAA 45E8 0029                  		lea	$29(a0),a2
00007AAE                            
00007AAE                            loc_765C:
00007AAE 7000                       		moveq	#0,d0
00007AB0 101A                       		move.b	(a2)+,d0
00007AB2 ED48                       		lsl.w	#6,d0
00007AB4 0680 00FF D000             		addi.l	#$FFD000,d0
00007ABA 2240                       		movea.l	d0,a1
00007ABC 7000                       		moveq	#0,d0
00007ABE 101B                       		move.b	(a3)+,d0
00007AC0 5240                       		addq.w	#1,d0
00007AC2 C0C5                       		mulu.w	d5,d0
00007AC4 C0C4                       		mulu.w	d4,d0
00007AC6 4840                       		swap	d0
00007AC8 D069 003C                  		add.w	$3C(a1),d0
00007ACC 3340 000C                  		move.w	d0,$C(a1)
00007AD0 51CA FFDC                  		dbf	d2,loc_765C
00007AD4 7000                       		moveq	#0,d0
00007AD6 1028 0028                  		move.b	$28(a0),d0
00007ADA 7600                       		moveq	#0,d3
00007ADC 1628 003F                  		move.b	$3F(a0),d3
00007AE0 5203                       		addq.b	#1,d3
00007AE2 9600                       		sub.b	d0,d3
00007AE4 4403                       		neg.b	d3
00007AE6 6B00                       		bmi.s	locret_76CA
00007AE8 3403                       		move.w	d3,d2
00007AEA E94B                       		lsl.w	#4,d3
00007AEC 47F4 3000                  		lea	(a4,d3.w),a3
00007AF0 D6C2                       		adda.w	d2,a3
00007AF2 5342                       		subq.w	#1,d2
00007AF4 6500                       		bcs.s	locret_76CA
00007AF6                            
00007AF6                            loc_76A4:
00007AF6 7000                       		moveq	#0,d0
00007AF8 101A                       		move.b	(a2)+,d0
00007AFA ED48                       		lsl.w	#6,d0
00007AFC 0680 00FF D000             		addi.l	#$FFD000,d0
00007B02 2240                       		movea.l	d0,a1
00007B04 7000                       		moveq	#0,d0
00007B06 1023                       		move.b	-(a3),d0
00007B08 5240                       		addq.w	#1,d0
00007B0A C0C5                       		mulu.w	d5,d0
00007B0C C0C4                       		mulu.w	d4,d0
00007B0E 4840                       		swap	d0
00007B10 D069 003C                  		add.w	$3C(a1),d0
00007B14 3340 000C                  		move.w	d0,$C(a1)
00007B18 51CA FFDC                  		dbf	d2,loc_76A4
00007B1C                            
00007B1C                            locret_76CA:
00007B1C 4E75                       		rts	
00007B1E                            ; End of function Obj11_Bend
00007B1E                            
00007B1E                            ; ===========================================================================
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            ; GHZ bridge-bending data
00007B1E                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007C2E                            		even
00007C2E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007D2E                            		even
00007D2E                            
00007D2E                            ; ===========================================================================
00007D2E                            
00007D2E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007D2E 3028 0008                  		move.w	8(a0),d0
00007D32 0240 FF80                  		andi.w	#$FF80,d0
00007D36 3238 F700                  		move.w	($FFFFF700).w,d1
00007D3A 0441 0080                  		subi.w	#$80,d1
00007D3E 0241 FF80                  		andi.w	#$FF80,d1
00007D42 9041                       		sub.w	d1,d0
00007D44 0C40 0280                  		cmpi.w	#$280,d0
00007D48 6200 0000                  		bhi.w	Obj11_DelAll
00007D4C 4E75                       		rts	
00007D4E                            ; ===========================================================================
00007D4E                            
00007D4E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007D4E 7400                       		moveq	#0,d2
00007D50 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007D54 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007D56 5302                       		subq.b	#1,d2		; subtract 1
00007D58 6500                       		bcs.s	Obj11_Delete
00007D5A                            
00007D5A                            Obj11_DelLoop:
00007D5A 7000                       		moveq	#0,d0
00007D5C 101A                       		move.b	(a2)+,d0
00007D5E ED48                       		lsl.w	#6,d0
00007D60 0680 00FF D000             		addi.l	#$FFD000,d0
00007D66 2240                       		movea.l	d0,a1
00007D68 B048                       		cmp.w	a0,d0
00007D6A 6700                       		beq.s	loc_791E
00007D6C 6100 0000                  		bsr.w	DeleteObject2
00007D70                            
00007D70                            loc_791E:
00007D70 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007D74                            
00007D74                            Obj11_Delete:
00007D74 6100 0000                  		bsr.w	DeleteObject
00007D78 4E75                       		rts	
00007D7A                            ; ===========================================================================
00007D7A                            
00007D7A                            Obj11_Delete2:				; XREF: Obj11_Index
00007D7A 6100 0000                  		bsr.w	DeleteObject
00007D7E 4E75                       		rts	
00007D80                            ; ===========================================================================
00007D80                            
00007D80                            Obj11_Display2:				; XREF: Obj11_Index
00007D80 6100 0000                  		bsr.w	DisplaySprite
00007D84 4E75                       		rts	
00007D86                            ; ===========================================================================
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            Map_obj11:
00007D86                            	include "_maps\obj11.asm"
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007D8A 0000                       		dc.w byte_794B-Map_obj11
00007D8C 01                         byte_793A:	dc.b 1
00007D8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D92 02                         byte_7940:	dc.b 2
00007D93 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007D98 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007D9D 01                         byte_794B:	dc.b 1
00007D9E FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007DA4 00                         		even
00007DA4 00                         		even
00007DA4                            
00007DA4                            ; ===========================================================================
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007DA4                            ;	    - spiked ball on a chain (SBZ)
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            
00007DA4                            Obj15:					; XREF: Obj_Index
00007DA4 7000                       		moveq	#0,d0
00007DA6 1028 0024                  		move.b	$24(a0),d0
00007DAA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007DAE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007DB2                            ; ===========================================================================
00007DB2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007DB6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007DBA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007DBE 0000                       		dc.w Obj15_Action-Obj15_Index
00007DC0                            ; ===========================================================================
00007DC0                            
00007DC0                            Obj15_Main:				; XREF: Obj15_Index
00007DC0 5428 0024                  		addq.b	#2,$24(a0)
00007DC4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007DCC 317C 4380 0002             		move.w	#$4380,2(a0)
00007DD2 117C 0004 0001             		move.b	#4,1(a0)
00007DD8 117C 0003 0018             		move.b	#3,$18(a0)
00007DDE 117C 0018 0019             		move.b	#$18,$19(a0)
00007DE4 117C 0008 0016             		move.b	#8,$16(a0)
00007DEA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007DF0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007DF6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007DFC 6600                       		bne.s	Obj15_NotSLZ
00007DFE 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E06 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E0C 117C 0020 0019             		move.b	#$20,$19(a0)
00007E12 117C 0010 0016             		move.b	#$10,$16(a0)
00007E18 117C 0099 0020             		move.b	#$99,$20(a0)
00007E1E                            
00007E1E                            Obj15_NotSLZ:
00007E1E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007E24 6600                       		bne.s	Obj15_SetLength
00007E26 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007E2E 317C 0391 0002             		move.w	#$391,2(a0)
00007E34 117C 0018 0019             		move.b	#$18,$19(a0)
00007E3A 117C 0018 0016             		move.b	#$18,$16(a0)
00007E40 117C 0086 0020             		move.b	#$86,$20(a0)
00007E46 117C 000C 0024             		move.b	#$C,$24(a0)
00007E4C                            
00007E4C                            Obj15_SetLength:
00007E4C 1810                       		move.b	0(a0),d4
00007E4E 7200                       		moveq	#0,d1
00007E50 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007E54 1212                       		move.b	(a2),d1		; move a2 to d1
00007E56 3F01                       		move.w	d1,-(sp)
00007E58 0241 000F                  		andi.w	#$F,d1
00007E5C 14FC 0000                  		move.b	#0,(a2)+
00007E60 3601                       		move.w	d1,d3
00007E62 E94B                       		lsl.w	#4,d3
00007E64 5003                       		addq.b	#8,d3
00007E66 1143 003C                  		move.b	d3,$3C(a0)
00007E6A 5103                       		subq.b	#8,d3
00007E6C 4A28 001A                  		tst.b	$1A(a0)
00007E70 6700                       		beq.s	Obj15_MakeChain
00007E72 5003                       		addq.b	#8,d3
00007E74 5341                       		subq.w	#1,d1
00007E76                            
00007E76                            Obj15_MakeChain:
00007E76 6100 0000                  		bsr.w	SingleObjLoad
00007E7A 6600                       		bne.s	loc_7A92
00007E7C 5228 0028                  		addq.b	#1,$28(a0)
00007E80 3A09                       		move.w	a1,d5
00007E82 0445 D000                  		subi.w	#-$3000,d5
00007E86 EC4D                       		lsr.w	#6,d5
00007E88 0245 007F                  		andi.w	#$7F,d5
00007E8C 14C5                       		move.b	d5,(a2)+
00007E8E 137C 000A 0024             		move.b	#$A,$24(a1)
00007E94 1284                       		move.b	d4,0(a1)	; load swinging	object
00007E96 2368 0004 0004             		move.l	4(a0),4(a1)
00007E9C 3368 0002 0002             		move.w	2(a0),2(a1)
00007EA2 08A9 0006 0002             		bclr	#6,2(a1)
00007EA8 137C 0004 0001             		move.b	#4,1(a1)
00007EAE 137C 0004 0018             		move.b	#4,$18(a1)
00007EB4 137C 0008 0019             		move.b	#8,$19(a1)
00007EBA 137C 0001 001A             		move.b	#1,$1A(a1)
00007EC0 1343 003C                  		move.b	d3,$3C(a1)
00007EC4 0403 0010                  		subi.b	#$10,d3
00007EC8 6400                       		bcc.s	loc_7A8E
00007ECA 137C 0002 001A             		move.b	#2,$1A(a1)
00007ED0 137C 0003 0018             		move.b	#3,$18(a1)
00007ED6 08E9 0006 0002             		bset	#6,2(a1)
00007EDC                            
00007EDC                            loc_7A8E:
00007EDC 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007EE0                            
00007EE0                            loc_7A92:
00007EE0 3A08                       		move.w	a0,d5
00007EE2 0445 D000                  		subi.w	#-$3000,d5
00007EE6 EC4D                       		lsr.w	#6,d5
00007EE8 0245 007F                  		andi.w	#$7F,d5
00007EEC 14C5                       		move.b	d5,(a2)+
00007EEE 317C 4080 0026             		move.w	#$4080,$26(a0)
00007EF4 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007EFA 321F                       		move.w	(sp)+,d1
00007EFC 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F00 6700                       		beq.s	loc_7AD4	; if not, branch
00007F02 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F0A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F10 117C 0001 001A             		move.b	#1,$1A(a0)
00007F16 117C 0002 0018             		move.b	#2,$18(a0)
00007F1C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007F22                            
00007F22                            loc_7AD4:
00007F22 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007F28 6700                       		beq.s	Obj15_Action	; if yes, branch
00007F2A                            
00007F2A                            Obj15_SetSolid:				; XREF: Obj15_Index
00007F2A 7200                       		moveq	#0,d1
00007F2C 1228 0019                  		move.b	$19(a0),d1
00007F30 7600                       		moveq	#0,d3
00007F32 1628 0016                  		move.b	$16(a0),d3
00007F36 6100 FA76                  		bsr.w	Obj15_Solid
00007F3A                            
00007F3A                            Obj15_Action:				; XREF: Obj15_Index
00007F3A 6100 0000                  		bsr.w	Obj15_Move
00007F3E 6100 0000                  		bsr.w	DisplaySprite
00007F42 6000 0000                  		bra.w	Obj15_ChkDel
00007F46                            ; ===========================================================================
00007F46                            
00007F46                            Obj15_Action2:				; XREF: Obj15_Index
00007F46 7200                       		moveq	#0,d1
00007F48 1228 0019                  		move.b	$19(a0),d1
00007F4C 6100 FAC4                  		bsr.w	ExitPlatform
00007F50 3F28 0008                  		move.w	8(a0),-(sp)
00007F54 6100 0000                  		bsr.w	Obj15_Move
00007F58 341F                       		move.w	(sp)+,d2
00007F5A 7600                       		moveq	#0,d3
00007F5C 1628 0016                  		move.b	$16(a0),d3
00007F60 5203                       		addq.b	#1,d3
00007F62 6100 0000                  		bsr.w	MvSonicOnPtfm
00007F66 6100 0000                  		bsr.w	DisplaySprite
00007F6A 6000 0000                  		bra.w	Obj15_ChkDel
00007F6E                            
00007F6E 4E75                       		rts
00007F70                            
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Subroutine to	change Sonic's position with a platform
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            
00007F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F70                            
00007F70                            
00007F70                            MvSonicOnPtfm:
00007F70 43F8 D000                  		lea	($FFFFD000).w,a1
00007F74 3028 000C                  		move.w	$C(a0),d0
00007F78 9043                       		sub.w	d3,d0
00007F7A 6000                       		bra.s	MvSonic2
00007F7C                            ; End of function MvSonicOnPtfm
00007F7C                            
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            ; Subroutine to	change Sonic's position with a platform
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            
00007F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F7C                            
00007F7C                            
00007F7C                            MvSonicOnPtfm2:
00007F7C 43F8 D000                  		lea	($FFFFD000).w,a1
00007F80 3028 000C                  		move.w	$C(a0),d0
00007F84 0440 0009                  		subi.w	#9,d0
00007F88                            
00007F88                            MvSonic2:
00007F88 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F8C 6B00                       		bmi.s	locret_7B62
00007F8E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007F94 6400                       		bcc.s	locret_7B62
00007F96 4A78 FE08                  		tst.w	($FFFFFE08).w
00007F9A 6600                       		bne.s	locret_7B62
00007F9C 7200                       		moveq	#0,d1
00007F9E 1229 0016                  		move.b	$16(a1),d1
00007FA2 9041                       		sub.w	d1,d0
00007FA4 3340 000C                  		move.w	d0,$C(a1)
00007FA8 9468 0008                  		sub.w	8(a0),d2
00007FAC 9569 0008                  		sub.w	d2,8(a1)
00007FB0                            
00007FB0                            locret_7B62:
00007FB0 4E75                       		rts	
00007FB2                            ; End of function MvSonicOnPtfm2
00007FB2                            
00007FB2                            
00007FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FB2                            
00007FB2                            
00007FB2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007FB2 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007FB6 323C 0080                  		move.w	#$80,d1
00007FBA 0828 0000 0022             		btst	#0,$22(a0)
00007FC0 6700                       		beq.s	loc_7B78
00007FC2 4440                       		neg.w	d0
00007FC4 D041                       		add.w	d1,d0
00007FC6                            
00007FC6                            loc_7B78:
00007FC6 6000                       		bra.s	Obj15_Move2
00007FC8                            ; End of function Obj15_Move
00007FC8                            
00007FC8                            
00007FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC8                            
00007FC8                            
00007FC8                            Obj48_Move:				; XREF: Obj48_Display2
00007FC8 4A28 003D                  		tst.b	$3D(a0)
00007FCC 6600                       		bne.s	loc_7B9C
00007FCE 3028 003E                  		move.w	$3E(a0),d0
00007FD2 5040                       		addq.w	#8,d0
00007FD4 3140 003E                  		move.w	d0,$3E(a0)
00007FD8 D168 0026                  		add.w	d0,$26(a0)
00007FDC 0C40 0200                  		cmpi.w	#$200,d0
00007FE0 6600                       		bne.s	loc_7BB6
00007FE2 117C 0001 003D             		move.b	#1,$3D(a0)
00007FE8 6000                       		bra.s	loc_7BB6
00007FEA                            ; ===========================================================================
00007FEA                            
00007FEA                            loc_7B9C:
00007FEA 3028 003E                  		move.w	$3E(a0),d0
00007FEE 5140                       		subq.w	#8,d0
00007FF0 3140 003E                  		move.w	d0,$3E(a0)
00007FF4 D168 0026                  		add.w	d0,$26(a0)
00007FF8 0C40 FE00                  		cmpi.w	#-$200,d0
00007FFC 6600                       		bne.s	loc_7BB6
00007FFE 117C 0000 003D             		move.b	#0,$3D(a0)
00008004                            
00008004                            loc_7BB6:
00008004 1028 0026                  		move.b	$26(a0),d0
00008008                            ; End of function Obj48_Move
00008008                            
00008008                            
00008008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008008                            
00008008                            
00008008                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008008 6100 AC18                  		bsr.w	CalcSine
0000800C 3428 0038                  		move.w	$38(a0),d2
00008010 3628 003A                  		move.w	$3A(a0),d3
00008014 45E8 0028                  		lea	$28(a0),a2
00008018 7C00                       		moveq	#0,d6
0000801A 1C1A                       		move.b	(a2)+,d6
0000801C                            
0000801C                            loc_7BCE:
0000801C 7800                       		moveq	#0,d4
0000801E 181A                       		move.b	(a2)+,d4
00008020 ED4C                       		lsl.w	#6,d4
00008022 0684 00FF D000             		addi.l	#$FFD000,d4
00008028 2244                       		movea.l	d4,a1
0000802A 7800                       		moveq	#0,d4
0000802C 1829 003C                  		move.b	$3C(a1),d4
00008030 2A04                       		move.l	d4,d5
00008032 C9C0                       		muls.w	d0,d4
00008034 E084                       		asr.l	#8,d4
00008036 CBC1                       		muls.w	d1,d5
00008038 E085                       		asr.l	#8,d5
0000803A D842                       		add.w	d2,d4
0000803C DA43                       		add.w	d3,d5
0000803E 3344 000C                  		move.w	d4,$C(a1)
00008042 3345 0008                  		move.w	d5,8(a1)
00008046 51CE FFD4                  		dbf	d6,loc_7BCE
0000804A 4E75                       		rts	
0000804C                            ; End of function Obj15_Move2
0000804C                            
0000804C                            ; ===========================================================================
0000804C                            
0000804C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000804C 3028 003A                  		move.w	$3A(a0),d0
00008050 0240 FF80                  		andi.w	#$FF80,d0
00008054 3238 F700                  		move.w	($FFFFF700).w,d1
00008058 0441 0080                  		subi.w	#$80,d1
0000805C 0241 FF80                  		andi.w	#$FF80,d1
00008060 9041                       		sub.w	d1,d0
00008062 0C40 0280                  		cmpi.w	#$280,d0
00008066 6200 0000                  		bhi.w	Obj15_DelAll
0000806A 4E75                       		rts	
0000806C                            ; ===========================================================================
0000806C                            
0000806C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000806C 7400                       		moveq	#0,d2
0000806E 45E8 0028                  		lea	$28(a0),a2
00008072 141A                       		move.b	(a2)+,d2
00008074                            
00008074                            Obj15_DelLoop:
00008074 7000                       		moveq	#0,d0
00008076 101A                       		move.b	(a2)+,d0
00008078 ED48                       		lsl.w	#6,d0
0000807A 0680 00FF D000             		addi.l	#$FFD000,d0
00008080 2240                       		movea.l	d0,a1
00008082 6100 0000                  		bsr.w	DeleteObject2
00008086 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000808A 4E75                       		rts	
0000808C                            ; ===========================================================================
0000808C                            
0000808C                            Obj15_Delete:				; XREF: Obj15_Index
0000808C 6100 0000                  		bsr.w	DeleteObject
00008090 4E75                       		rts	
00008092                            ; ===========================================================================
00008092                            
00008092                            Obj15_Display:				; XREF: Obj15_Index
00008092 6000 0000                  		bra.w	DisplaySprite
00008096                            ; ===========================================================================
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096                            Map_obj15:
00008096                            	include "_maps\obj15ghz.asm"
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096 0000                       		dc.w byte_7C4E-Map_obj15
00008098 0000                       		dc.w byte_7C59-Map_obj15
0000809A 0000                       		dc.w byte_7C5F-Map_obj15
0000809C 02                         byte_7C4E:	dc.b 2
0000809D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000080A2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000080A7 01                         byte_7C59:	dc.b 1
000080A8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000080AD 01                         byte_7C5F:	dc.b 1
000080AE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000080B4 00                         		even
000080B4 00                         		even
000080B4                            
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            Map_obj15a:
000080B4                            	include "_maps\obj15slz.asm"
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4 0000                       		dc.w byte_7C6C-Map_obj15a
000080B6 0000                       		dc.w byte_7C95-Map_obj15a
000080B8 0000                       		dc.w byte_7C9B-Map_obj15a
000080BA 08                         byte_7C6C:	dc.b 8
000080BB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000080C0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000080C5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000080CA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000080CF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000080D4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000080D9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000080DE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000080E3 01                         byte_7C95:	dc.b 1
000080E4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000080E9 01                         byte_7C9B:	dc.b 1
000080EA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000080F0 00                         		even
000080F0 00                         		even
000080F0                            
000080F0                            ; ===========================================================================
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            ; Object 17 - helix of spikes on a pole	(GHZ)
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            
000080F0                            Obj17:					; XREF: Obj_Index
000080F0 7000                       		moveq	#0,d0
000080F2 1028 0024                  		move.b	$24(a0),d0
000080F6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000080FA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000080FE                            ; ===========================================================================
000080FE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008100 0000                       		dc.w Obj17_Action-Obj17_Index
00008102 0000                       		dc.w Obj17_Action-Obj17_Index
00008104 0000                       		dc.w Obj17_Delete-Obj17_Index
00008106 0000                       		dc.w Obj17_Display-Obj17_Index
00008108                            ; ===========================================================================
00008108                            
00008108                            Obj17_Main:				; XREF: Obj17_Index
00008108 5428 0024                  		addq.b	#2,$24(a0)
0000810C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008114 317C 4398 0002             		move.w	#$4398,2(a0)
0000811A 117C 0007 0022             		move.b	#7,$22(a0)
00008120 117C 0004 0001             		move.b	#4,1(a0)
00008126 117C 0003 0018             		move.b	#3,$18(a0)
0000812C 117C 0008 0019             		move.b	#8,$19(a0)
00008132 3428 000C                  		move.w	$C(a0),d2
00008136 3628 0008                  		move.w	8(a0),d3
0000813A 1810                       		move.b	0(a0),d4
0000813C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008140 7200                       		moveq	#0,d1
00008142 1212                       		move.b	(a2),d1		; move a2 to d1
00008144 14FC 0000                  		move.b	#0,(a2)+
00008148 3001                       		move.w	d1,d0
0000814A E248                       		lsr.w	#1,d0
0000814C E948                       		lsl.w	#4,d0
0000814E 9640                       		sub.w	d0,d3
00008150 5501                       		subq.b	#2,d1
00008152 6500                       		bcs.s	Obj17_Action
00008154 7C00                       		moveq	#0,d6
00008156                            
00008156                            Obj17_MakeHelix:
00008156 6100 0000                  		bsr.w	SingleObjLoad
0000815A 6600                       		bne.s	Obj17_Action
0000815C 5228 0028                  		addq.b	#1,$28(a0)
00008160 3A09                       		move.w	a1,d5
00008162 0445 D000                  		subi.w	#$D000,d5
00008166 EC4D                       		lsr.w	#6,d5
00008168 0245 007F                  		andi.w	#$7F,d5
0000816C 14C5                       		move.b	d5,(a2)+
0000816E 137C 0008 0024             		move.b	#8,$24(a1)
00008174 1284                       		move.b	d4,0(a1)
00008176 3342 000C                  		move.w	d2,$C(a1)
0000817A 3343 0008                  		move.w	d3,8(a1)
0000817E 2368 0004 0004             		move.l	4(a0),4(a1)
00008184 337C 4398 0002             		move.w	#$4398,2(a1)
0000818A 137C 0004 0001             		move.b	#4,1(a1)
00008190 137C 0003 0018             		move.b	#3,$18(a1)
00008196 137C 0008 0019             		move.b	#8,$19(a1)
0000819C 1346 003E                  		move.b	d6,$3E(a1)
000081A0 5206                       		addq.b	#1,d6
000081A2 0206 0007                  		andi.b	#7,d6
000081A6 0643 0010                  		addi.w	#$10,d3
000081AA B668 0008                  		cmp.w	8(a0),d3
000081AE 6600                       		bne.s	loc_7D78
000081B0 1146 003E                  		move.b	d6,$3E(a0)
000081B4 5206                       		addq.b	#1,d6
000081B6 0206 0007                  		andi.b	#7,d6
000081BA 0643 0010                  		addi.w	#$10,d3
000081BE 5228 0028                  		addq.b	#1,$28(a0)
000081C2                            
000081C2                            loc_7D78:
000081C2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000081C6                            
000081C6                            Obj17_Action:				; XREF: Obj17_Index
000081C6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000081CA 6100 0000                  		bsr.w	DisplaySprite
000081CE 6000 0000                  		bra.w	Obj17_ChkDel
000081D2                            
000081D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081D2                            
000081D2                            
000081D2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000081D2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000081D6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000081DC D028 003E                  		add.b	$3E(a0),d0
000081E0 0200 0007                  		andi.b	#7,d0
000081E4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000081E8 6600                       		bne.s	locret_7DA6
000081EA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000081F0                            
000081F0                            locret_7DA6:
000081F0 4E75                       		rts	
000081F2                            ; End of function Obj17_RotateSpikes
000081F2                            
000081F2                            ; ===========================================================================
000081F2                            
000081F2                            Obj17_ChkDel:				; XREF: Obj17_Action
000081F2 3028 0008                  		move.w	8(a0),d0
000081F6 0240 FF80                  		andi.w	#$FF80,d0
000081FA 3238 F700                  		move.w	($FFFFF700).w,d1
000081FE 0441 0080                  		subi.w	#$80,d1
00008202 0241 FF80                  		andi.w	#$FF80,d1
00008206 9041                       		sub.w	d1,d0
00008208 0C40 0280                  		cmpi.w	#$280,d0
0000820C 6200 0000                  		bhi.w	Obj17_DelAll
00008210 4E75                       		rts	
00008212                            ; ===========================================================================
00008212                            
00008212                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008212 7400                       		moveq	#0,d2
00008214 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008218 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000821A 5502                       		subq.b	#2,d2
0000821C 6500                       		bcs.s	Obj17_Delete
0000821E                            
0000821E                            Obj17_DelLoop:
0000821E 7000                       		moveq	#0,d0
00008220 101A                       		move.b	(a2)+,d0
00008222 ED48                       		lsl.w	#6,d0
00008224 0680 00FF D000             		addi.l	#$FFD000,d0
0000822A 2240                       		movea.l	d0,a1
0000822C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008230 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008234                            
00008234                            Obj17_Delete:				; XREF: Obj17_Index
00008234 6100 0000                  		bsr.w	DeleteObject
00008238 4E75                       		rts	
0000823A                            ; ===========================================================================
0000823A                            
0000823A                            Obj17_Display:				; XREF: Obj17_Index
0000823A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000823E 6000 0000                  		bra.w	DisplaySprite
00008242                            ; ===========================================================================
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242                            Map_obj17:
00008242                            	include "_maps\obj17.asm"
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008246 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000824A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000824E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008252 01                         byte_7E08:	dc.b 1
00008253 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008258 01                         byte_7E0E:	dc.b 1
00008259 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000825E 01                         byte_7E14:	dc.b 1
0000825F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008264 01                         byte_7E1A:	dc.b 1
00008265 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000826A 01                         byte_7E20:	dc.b 1
0000826B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008270 01                         byte_7E26:	dc.b 1
00008271 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008276 01                         byte_7E2C:	dc.b 1
00008277 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000827C                            		even
0000827C                            		even
0000827C                            
0000827C                            ; ===========================================================================
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            
0000827C                            Obj18:					; XREF: Obj_Index
0000827C 7000                       		moveq	#0,d0
0000827E 1028 0024                  		move.b	$24(a0),d0
00008282 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008286 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000828A                            ; ===========================================================================
0000828A 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000828C 0000                       		dc.w Obj18_Solid-Obj18_Index
0000828E 0000                       		dc.w Obj18_Action2-Obj18_Index
00008290 0000                       		dc.w Obj18_Delete-Obj18_Index
00008292 0000                       		dc.w Obj18_Action-Obj18_Index
00008294                            ; ===========================================================================
00008294                            
00008294                            Obj18_Main:				; XREF: Obj18_Index
00008294 5428 0024                  		addq.b	#2,$24(a0)
00008298 317C 4000 0002             		move.w	#$4000,2(a0)
0000829E 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000082A6 117C 0020 0019             		move.b	#$20,$19(a0)
000082AC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000082B2 6600                       		bne.s	Obj18_NotSYZ
000082B4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000082BC 117C 0020 0019             		move.b	#$20,$19(a0)
000082C2                            
000082C2                            Obj18_NotSYZ:
000082C2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000082C8 6600                       		bne.s	Obj18_NotSLZ
000082CA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000082D2 117C 0020 0019             		move.b	#$20,$19(a0)
000082D8 317C 4000 0002             		move.w	#$4000,2(a0)
000082DE 117C 0003 0028             		move.b	#3,$28(a0)
000082E4                            
000082E4                            Obj18_NotSLZ:
000082E4 117C 0004 0001             		move.b	#4,1(a0)
000082EA 117C 0004 0018             		move.b	#4,$18(a0)
000082F0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000082F6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000082FC 3168 0008 0032             		move.w	8(a0),$32(a0)
00008302 317C 0080 0026             		move.w	#$80,$26(a0)
00008308 7200                       		moveq	#0,d1
0000830A 1028 0028                  		move.b	$28(a0),d0
0000830E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008312 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008314 5201                       		addq.b	#1,d1		; use frame #1
00008316 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000831C                            
0000831C                            Obj18_SetFrame:
0000831C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008320                            
00008320                            Obj18_Solid:				; XREF: Obj18_Index
00008320 4A28 0038                  		tst.b	$38(a0)
00008324 6700                       		beq.s	loc_7EE0
00008326 5928 0038                  		subq.b	#4,$38(a0)
0000832A                            
0000832A                            loc_7EE0:
0000832A 7200                       		moveq	#0,d1
0000832C 1228 0019                  		move.b	$19(a0),d1
00008330 6100 F56C                  		bsr.w	PlatformObject
00008334                            
00008334                            Obj18_Action:				; XREF: Obj18_Index
00008334 6100 0000                  		bsr.w	Obj18_Move
00008338 6100 0000                  		bsr.w	Obj18_Nudge
0000833C 6100 0000                  		bsr.w	DisplaySprite
00008340 6000 0000                  		bra.w	Obj18_ChkDel
00008344                            ; ===========================================================================
00008344                            
00008344                            Obj18_Action2:				; XREF: Obj18_Index
00008344 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000834A 6700                       		beq.s	loc_7F06
0000834C 5828 0038                  		addq.b	#4,$38(a0)
00008350                            
00008350                            loc_7F06:
00008350 7200                       		moveq	#0,d1
00008352 1228 0019                  		move.b	$19(a0),d1
00008356 6100 F6BA                  		bsr.w	ExitPlatform
0000835A 3F28 0008                  		move.w	8(a0),-(sp)
0000835E 6100 0000                  		bsr.w	Obj18_Move
00008362 6100 0000                  		bsr.w	Obj18_Nudge
00008366 341F                       		move.w	(sp)+,d2
00008368 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000836C 6100 0000                  		bsr.w	DisplaySprite
00008370 6000 0000                  		bra.w	Obj18_ChkDel
00008374                            
00008374 4E75                       		rts
00008376                            
00008376                            ; ---------------------------------------------------------------------------
00008376                            ; Subroutine to	move platform slightly when you	stand on it
00008376                            ; ---------------------------------------------------------------------------
00008376                            
00008376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008376                            
00008376                            
00008376                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008376 1028 0038                  		move.b	$38(a0),d0
0000837A 6100 A8A6                  		bsr.w	CalcSine
0000837E 323C 0400                  		move.w	#$400,d1
00008382 C1C1                       		muls.w	d1,d0
00008384 4840                       		swap	d0
00008386 D068 002C                  		add.w	$2C(a0),d0
0000838A 3140 000C                  		move.w	d0,$C(a0)
0000838E 4E75                       		rts	
00008390                            ; End of function Obj18_Nudge
00008390                            
00008390                            ; ---------------------------------------------------------------------------
00008390                            ; Subroutine to	move platforms
00008390                            ; ---------------------------------------------------------------------------
00008390                            
00008390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008390                            
00008390                            
00008390                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008390 7000                       		moveq	#0,d0
00008392 1028 0028                  		move.b	$28(a0),d0
00008396 0240 000F                  		andi.w	#$F,d0
0000839A D040                       		add.w	d0,d0
0000839C 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000083A0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000083A4                            ; End of function Obj18_Move
000083A4                            
000083A4                            ; ===========================================================================
000083A4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000083A8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000083AC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000083B0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000083B4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000083B8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000083BC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Obj18_Type00:
000083BE 4E75                       		rts			; platform 00 doesn't move
000083C0                            ; ===========================================================================
000083C0                            
000083C0                            Obj18_Type05:
000083C0 3028 0032                  		move.w	$32(a0),d0
000083C4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083C8 4401                       		neg.b	d1		; reverse platform-motion
000083CA 0601 0040                  		addi.b	#$40,d1
000083CE 6000                       		bra.s	Obj18_01_Move
000083D0                            ; ===========================================================================
000083D0                            
000083D0                            Obj18_Type01:
000083D0 3028 0032                  		move.w	$32(a0),d0
000083D4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083D8 0401 0040                  		subi.b	#$40,d1
000083DC                            
000083DC                            Obj18_01_Move:
000083DC 4881                       		ext.w	d1
000083DE D041                       		add.w	d1,d0
000083E0 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000083E4 6000 0000                  		bra.w	Obj18_ChgMotion
000083E8                            ; ===========================================================================
000083E8                            
000083E8                            Obj18_Type0C:
000083E8 3028 0034                  		move.w	$34(a0),d0
000083EC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000083F0 4401                       		neg.b	d1		; reverse platform-motion
000083F2 0601 0030                  		addi.b	#$30,d1
000083F6 6000                       		bra.s	Obj18_02_Move
000083F8                            ; ===========================================================================
000083F8                            
000083F8                            Obj18_Type0B:
000083F8 3028 0034                  		move.w	$34(a0),d0
000083FC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008400 0401 0030                  		subi.b	#$30,d1
00008404 6000                       		bra.s	Obj18_02_Move
00008406                            ; ===========================================================================
00008406                            
00008406                            Obj18_Type06:
00008406 3028 0034                  		move.w	$34(a0),d0
0000840A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000840E 4401                       		neg.b	d1		; reverse platform-motion
00008410 0601 0040                  		addi.b	#$40,d1
00008414 6000                       		bra.s	Obj18_02_Move
00008416                            ; ===========================================================================
00008416                            
00008416                            Obj18_Type02:
00008416 3028 0034                  		move.w	$34(a0),d0
0000841A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000841E 0401 0040                  		subi.b	#$40,d1
00008422                            
00008422                            Obj18_02_Move:
00008422 4881                       		ext.w	d1
00008424 D041                       		add.w	d1,d0
00008426 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000842A 6000 0000                  		bra.w	Obj18_ChgMotion
0000842E                            ; ===========================================================================
0000842E                            
0000842E                            Obj18_Type03:
0000842E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008432 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008434 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000843A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000843C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008442                            
00008442                            Obj18_03_NoMove:
00008442 4E75                       		rts	
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj18_03_Wait:
00008444 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008448 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000844A 317C 0020 003A             		move.w	#32,$3A(a0)
00008450 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008454 4E75                       		rts	
00008456                            ; ===========================================================================
00008456                            
00008456                            Obj18_Type04:
00008456 4A68 003A                  		tst.w	$3A(a0)
0000845A 6700                       		beq.s	loc_8048
0000845C 5368 003A                  		subq.w	#1,$3A(a0)
00008460 6600                       		bne.s	loc_8048
00008462 0828 0003 0022             		btst	#3,$22(a0)
00008468 6700                       		beq.s	loc_8042
0000846A 08E9 0001 0022             		bset	#1,$22(a1)
00008470 08A9 0003 0022             		bclr	#3,$22(a1)
00008476 137C 0002 0024             		move.b	#2,$24(a1)
0000847C 08A8 0003 0022             		bclr	#3,$22(a0)
00008482 4228 0025                  		clr.b	$25(a0)
00008486 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000848C                            
0000848C                            loc_8042:
0000848C 117C 0008 0024             		move.b	#8,$24(a0)
00008492                            
00008492                            loc_8048:
00008492 2628 002C                  		move.l	$2C(a0),d3
00008496 3028 0012                  		move.w	$12(a0),d0
0000849A 48C0                       		ext.l	d0
0000849C E180                       		asl.l	#8,d0
0000849E D680                       		add.l	d0,d3
000084A0 2143 002C                  		move.l	d3,$2C(a0)
000084A4 0668 0038 0012             		addi.w	#$38,$12(a0)
000084AA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000084AE 0640 00E0                  		addi.w	#$E0,d0
000084B2 B068 002C                  		cmp.w	$2C(a0),d0
000084B6 6400                       		bcc.s	locret_8074
000084B8 117C 0006 0024             		move.b	#6,$24(a0)
000084BE                            
000084BE                            locret_8074:
000084BE 4E75                       		rts	
000084C0                            ; ===========================================================================
000084C0                            
000084C0                            Obj18_Type07:
000084C0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084C4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000084C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000084CA 7000                       		moveq	#0,d0
000084CC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000084D0 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000084D2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000084D6 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000084D8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000084DE                            
000084DE                            Obj18_07_NoMove:
000084DE 4E75                       		rts	
000084E0                            ; ===========================================================================
000084E0                            
000084E0                            Obj18_07_Wait:
000084E0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000084E4 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000084E6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000084EA 4E75                       		rts	
000084EC                            ; ===========================================================================
000084EC                            
000084EC                            Obj18_Type08:
000084EC 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000084F0 3028 0034                  		move.w	$34(a0),d0
000084F4 0440 0200                  		subi.w	#$200,d0
000084F8 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000084FC 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000084FE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008502                            
00008502                            Obj18_08_NoStop:
00008502 4E75                       		rts	
00008504                            ; ===========================================================================
00008504                            
00008504                            Obj18_Type0A:
00008504 3028 0034                  		move.w	$34(a0),d0
00008508 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000850C 0401 0040                  		subi.b	#$40,d1
00008510 4881                       		ext.w	d1
00008512 E241                       		asr.w	#1,d1
00008514 D041                       		add.w	d1,d0
00008516 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000851A                            
0000851A                            Obj18_ChgMotion:
0000851A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008520 4E75                       		rts	
00008522                            ; ===========================================================================
00008522                            
00008522                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008522 3028 0032                  		move.w	$32(a0),d0
00008526 0240 FF80                  		andi.w	#$FF80,d0
0000852A 3238 F700                  		move.w	($FFFFF700).w,d1
0000852E 0441 0080                  		subi.w	#$80,d1
00008532 0241 FF80                  		andi.w	#$FF80,d1
00008536 9041                       		sub.w	d1,d0
00008538 0C40 0280                  		cmpi.w	#$280,d0
0000853C 6200                       		bhi.s	Obj18_Delete
0000853E 4E75                       		rts	
00008540                            ; ===========================================================================
00008540                            
00008540                            Obj18_Delete:				; XREF: Obj18_Index
00008540 6000 0000                  		bra.w	DeleteObject
00008544                            ; ===========================================================================
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544                            Map_obj18x:
00008544                            	include "_maps\obj18x.asm"
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544 0000                       		dc.w byte_80FE-Map_obj18x
00008546 0000                       		dc.w byte_8109-Map_obj18x
00008548 02                         byte_80FE:	dc.b 2
00008549 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000854E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008553 0A                         byte_8109:	dc.b $A
00008554 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008559 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000855E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008563 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008568 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000856D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008572 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008577 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000857C 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008581 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008586                            		even
00008586                            		even
00008586                            
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586                            Map_obj18:
00008586                            	include "_maps\obj18ghz.asm"
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586 0000                       		dc.w byte_8140-Map_obj18
00008588 0000                       		dc.w byte_8155-Map_obj18
0000858A 04                         byte_8140:	dc.b 4
0000858B F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008590 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008595 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000859A F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000859F 0A                         byte_8155:	dc.b $A
000085A0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000085A5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000085AA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000085AF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000085B4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000085B9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000085BE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000085C3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000085C8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000085CD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000085D2                            		even
000085D2                            		even
000085D2                            
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            Map_obj18a:
000085D2                            	include "_maps\obj18syz.asm"
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2 0000                       		dc.w byte_818A-Map_obj18a
000085D4 03                         byte_818A:	dc.b 3
000085D5 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000085DA F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000085DF F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000085E4                            		even
000085E4                            		even
000085E4                            
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            Map_obj18b:
000085E4                            	include "_maps\obj18slz.asm"
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4 0000                       		dc.w byte_819C-Map_obj18b
000085E6 02                         byte_819C:	dc.b 2
000085E7 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000085EC F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000085F2 00                         		even
000085F2 00                         		even
000085F2                            
000085F2                            ; ===========================================================================
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            ; Object 19 - blank
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            
000085F2                            Obj19:					; XREF: Obj_Index
000085F2 4E75                       		rts	
000085F4                            ; ===========================================================================
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            Map_obj48:
000085F4                            	include "_maps\obj48.asm"
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000085F8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000085FC 06                         byte_81B2:	dc.b 6
000085FD F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008602 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008607 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000860C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008611 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008616 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000861B 04                         byte_81D1:	dc.b 4
0000861C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008621 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008626 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000862B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008630 04                         byte_81E6:	dc.b 4
00008631 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008636 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000863B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008640 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008645 04                         byte_81FB:	dc.b 4
00008646 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000864B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008650 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008655 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000865A                            		even
0000865A                            		even
0000865A                            
0000865A                            ; ===========================================================================
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            ; Object 1A - GHZ collapsing ledge
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            
0000865A                            Obj1A:					; XREF: Obj_Index
0000865A 7000                       		moveq	#0,d0
0000865C 1028 0024                  		move.b	$24(a0),d0
00008660 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008664 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008668                            ; ===========================================================================
00008668 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000866C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008670 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008674                            ; ===========================================================================
00008674                            
00008674                            Obj1A_Main:				; XREF: Obj1A_Index
00008674 5428 0024                  		addq.b	#2,$24(a0)
00008678 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008680 317C 4000 0002             		move.w	#$4000,2(a0)
00008686 0028 0004 0001             		ori.b	#4,1(a0)
0000868C 117C 0004 0018             		move.b	#4,$18(a0)
00008692 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008698 117C 0064 0019             		move.b	#$64,$19(a0)
0000869E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000086A4 117C 0038 0016             		move.b	#$38,$16(a0)
000086AA 08E8 0004 0001             		bset	#4,1(a0)
000086B0                            
000086B0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000086B0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000086B4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000086B6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000086BA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000086BE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000086C2                            
000086C2                            Obj1A_Slope:
000086C2 323C 0030                  		move.w	#$30,d1
000086C6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086CC 6100 F2A4                  		bsr.w	SlopeObject
000086D0 6000 0000                  		bra.w	MarkObjGone
000086D4                            ; ===========================================================================
000086D4                            
000086D4                            Obj1A_Touch:				; XREF: Obj1A_Index
000086D4 4A28 0038                  		tst.b	$38(a0)
000086D8 6700 0000                  		beq.w	loc_847A
000086DC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000086E2 5328 0038                  		subq.b	#1,$38(a0)
000086E6                            
000086E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E6                            
000086E6                            
000086E6                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000086E6 323C 0030                  		move.w	#$30,d1
000086EA 6100 F326                  		bsr.w	ExitPlatform
000086EE 323C 0030                  		move.w	#$30,d1
000086F2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086F8 3428 0008                  		move.w	8(a0),d2
000086FC 6100 0000                  		bsr.w	SlopeObject2
00008700 6000 0000                  		bra.w	MarkObjGone
00008704                            ; End of function Obj1A_WalkOff
00008704                            
00008704                            ; ===========================================================================
00008704                            
00008704                            Obj1A_Display:				; XREF: Obj1A_Index
00008704 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008708 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000870A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000870E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008712 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008716 6000 0000                  		bra.w	DisplaySprite
0000871A                            ; ===========================================================================
0000871A                            
0000871A                            loc_82D0:				; XREF: Obj1A_Display
0000871A 5328 0038                  		subq.b	#1,$38(a0)
0000871E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008722 43F8 D000                  		lea	($FFFFD000).w,a1
00008726 0829 0003 0022             		btst	#3,$22(a1)
0000872C 6700                       		beq.s	loc_82FC
0000872E 4A28 0038                  		tst.b	$38(a0)
00008732 6600                       		bne.s	locret_8308
00008734 08A9 0003 0022             		bclr	#3,$22(a1)
0000873A 08A9 0005 0022             		bclr	#5,$22(a1)
00008740 137C 0001 001D             		move.b	#1,$1D(a1)
00008746                            
00008746                            loc_82FC:
00008746 117C 0000 003A             		move.b	#0,$3A(a0)
0000874C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008752                            
00008752                            locret_8308:
00008752 4E75                       		rts	
00008754                            ; ===========================================================================
00008754                            
00008754                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008754 6100 0000                  		bsr.w	ObjectFall
00008758 6100 0000                  		bsr.w	DisplaySprite
0000875C 4A28 0001                  		tst.b	1(a0)
00008760 6A00                       		bpl.s	Obj1A_Delete
00008762 4E75                       		rts	
00008764                            ; ===========================================================================
00008764                            
00008764                            Obj1A_Delete:				; XREF: Obj1A_Index
00008764 6100 0000                  		bsr.w	DeleteObject
00008768 4E75                       		rts	
0000876A                            ; ===========================================================================
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            
0000876A                            Obj53:					; XREF: Obj_Index
0000876A 7000                       		moveq	#0,d0
0000876C 1028 0024                  		move.b	$24(a0),d0
00008770 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008774 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008778                            ; ===========================================================================
00008778 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000877C 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008780 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008784                            ; ===========================================================================
00008784                            
00008784                            Obj53_Main:				; XREF: Obj53_Index
00008784 5428 0024                  		addq.b	#2,$24(a0)
00008788 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008790 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008796 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000879C 6600                       		bne.s	Obj53_NotSLZ
0000879E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000087A4 5428 001A                  		addq.b	#2,$1A(a0)
000087A8                            
000087A8                            Obj53_NotSLZ:
000087A8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000087AE 6600                       		bne.s	Obj53_NotSBZ
000087B0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000087B6                            
000087B6                            Obj53_NotSBZ:
000087B6 0028 0004 0001             		ori.b	#4,1(a0)
000087BC 117C 0004 0018             		move.b	#4,$18(a0)
000087C2 117C 0007 0038             		move.b	#7,$38(a0)
000087C8 117C 0044 0019             		move.b	#$44,$19(a0)
000087CE                            
000087CE                            Obj53_ChkTouch:				; XREF: Obj53_Index
000087CE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000087D2 6700                       		beq.s	Obj53_Solid	; if not, branch
000087D4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000087D8 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000087DC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087E0                            
000087E0                            Obj53_Solid:
000087E0 323C 0020                  		move.w	#$20,d1
000087E4 6100 F0B8                  		bsr.w	PlatformObject
000087E8 4A28 0028                  		tst.b	$28(a0)
000087EC 6A00                       		bpl.s	Obj53_MarkAsGone
000087EE 0829 0003 0022             		btst	#3,$22(a1)
000087F4 6700                       		beq.s	Obj53_MarkAsGone
000087F6 08A8 0000 0001             		bclr	#0,1(a0)
000087FC 3029 0008                  		move.w	8(a1),d0
00008800 9068 0008                  		sub.w	8(a0),d0
00008804 6400                       		bcc.s	Obj53_MarkAsGone
00008806 08E8 0000 0001             		bset	#0,1(a0)
0000880C                            
0000880C                            Obj53_MarkAsGone:
0000880C 6000 0000                  		bra.w	MarkObjGone
00008810                            ; ===========================================================================
00008810                            
00008810                            Obj53_Touch:				; XREF: Obj53_Index
00008810 4A28 0038                  		tst.b	$38(a0)
00008814 6700 0000                  		beq.w	loc_8458
00008818 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000881E 5328 0038                  		subq.b	#1,$38(a0)
00008822                            
00008822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008822                            
00008822                            
00008822                            Obj53_WalkOff:				; XREF: Obj53_Index
00008822 323C 0020                  		move.w	#$20,d1
00008826 6100 F1EA                  		bsr.w	ExitPlatform
0000882A 3428 0008                  		move.w	8(a0),d2
0000882E 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008832 6000 0000                  		bra.w	MarkObjGone
00008836                            ; End of function Obj53_WalkOff
00008836                            
00008836                            ; ===========================================================================
00008836                            
00008836                            Obj53_Display:				; XREF: Obj53_Index
00008836 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000883A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000883C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008840 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008844 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008848 6000 0000                  		bra.w	DisplaySprite
0000884C                            ; ===========================================================================
0000884C                            
0000884C                            loc_8402:
0000884C 5328 0038                  		subq.b	#1,$38(a0)
00008850 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008854 43F8 D000                  		lea	($FFFFD000).w,a1
00008858 0829 0003 0022             		btst	#3,$22(a1)
0000885E 6700                       		beq.s	loc_842E
00008860 4A28 0038                  		tst.b	$38(a0)
00008864 6600                       		bne.s	locret_843A
00008866 08A9 0003 0022             		bclr	#3,$22(a1)
0000886C 08A9 0005 0022             		bclr	#5,$22(a1)
00008872 137C 0001 001D             		move.b	#1,$1D(a1)
00008878                            
00008878                            loc_842E:
00008878 117C 0000 003A             		move.b	#0,$3A(a0)
0000887E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008884                            
00008884                            locret_843A:
00008884 4E75                       		rts	
00008886                            ; ===========================================================================
00008886                            
00008886                            Obj53_TimeZero:				; XREF: Obj53_Display
00008886 6100 0000                  		bsr.w	ObjectFall
0000888A 6100 0000                  		bsr.w	DisplaySprite
0000888E 4A28 0001                  		tst.b	1(a0)
00008892 6A00                       		bpl.s	Obj53_Delete
00008894 4E75                       		rts	
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj53_Delete:				; XREF: Obj53_Index
00008896 6100 0000                  		bsr.w	DeleteObject
0000889A 4E75                       		rts	
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000889C 117C 0000 003A             		move.b	#0,$3A(a0)
000088A2                            
000088A2                            loc_8458:				; XREF: Obj53_Touch
000088A2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000088A8 0828 0000 0028             		btst	#0,$28(a0)
000088AE 6700                       		beq.s	loc_846C
000088B0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000088B6                            
000088B6                            loc_846C:
000088B6 7207                       		moveq	#7,d1
000088B8 5228 001A                  		addq.b	#1,$1A(a0)
000088BC 6000                       		bra.s	loc_8486
000088BE                            ; ===========================================================================
000088BE                            
000088BE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000088BE 117C 0000 003A             		move.b	#0,$3A(a0)
000088C4                            
000088C4                            loc_847A:				; XREF: Obj1A_Touch
000088C4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000088CA 7218                       		moveq	#$18,d1
000088CC 5428 001A                  		addq.b	#2,$1A(a0)
000088D0                            
000088D0                            loc_8486:				; XREF: Obj53_Collapse
000088D0 7000                       		moveq	#0,d0
000088D2 1028 001A                  		move.b	$1A(a0),d0
000088D6 D040                       		add.w	d0,d0
000088D8 2668 0004                  		movea.l	4(a0),a3
000088DC D6F3 0000                  		adda.w	(a3,d0.w),a3
000088E0 524B                       		addq.w	#1,a3
000088E2 08E8 0005 0001             		bset	#5,1(a0)
000088E8 1810                       		move.b	0(a0),d4
000088EA 1A28 0001                  		move.b	1(a0),d5
000088EE 2248                       		movea.l	a0,a1
000088F0 6000                       		bra.s	loc_84B2
000088F2                            ; ===========================================================================
000088F2                            
000088F2                            loc_84AA:
000088F2 6100 0000                  		bsr.w	SingleObjLoad
000088F6 6600                       		bne.s	loc_84F2
000088F8 5A4B                       		addq.w	#5,a3
000088FA                            
000088FA                            loc_84B2:
000088FA 137C 0006 0024             		move.b	#6,$24(a1)
00008900 1284                       		move.b	d4,0(a1)
00008902 234B 0004                  		move.l	a3,4(a1)
00008906 1345 0001                  		move.b	d5,1(a1)
0000890A 3368 0008 0008             		move.w	8(a0),8(a1)
00008910 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008916 3368 0002 0002             		move.w	2(a0),2(a1)
0000891C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008922 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008928 135C 0038                  		move.b	(a4)+,$38(a1)
0000892C B3C8                       		cmpa.l	a0,a1
0000892E 6400                       		bcc.s	loc_84EE
00008930 6100 0000                  		bsr.w	DisplaySprite2
00008934                            
00008934                            loc_84EE:
00008934 51C9 FFBC                  		dbf	d1,loc_84AA
00008938                            
00008938                            loc_84F2:
00008938 6100 0000                  		bsr.w	DisplaySprite
0000893C 303C 00B9                  		move.w	#$B9,d0
00008940 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008946                            ; ===========================================================================
00008946                            ; ---------------------------------------------------------------------------
00008946                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008946                            ; ---------------------------------------------------------------------------
00008946 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008956 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008960 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008968 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008970                            
00008970                            ; ---------------------------------------------------------------------------
00008970                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008970                            ; ---------------------------------------------------------------------------
00008970                            
00008970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008970                            
00008970                            
00008970                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008970 43F8 D000                  		lea	($FFFFD000).w,a1
00008974 0829 0003 0022             		btst	#3,$22(a1)
0000897A 6700                       		beq.s	locret_856E
0000897C 3029 0008                  		move.w	8(a1),d0
00008980 9068 0008                  		sub.w	8(a0),d0
00008984 D041                       		add.w	d1,d0
00008986 E248                       		lsr.w	#1,d0
00008988 0828 0000 0001             		btst	#0,1(a0)
0000898E 6700                       		beq.s	loc_854E
00008990 4640                       		not.w	d0
00008992 D041                       		add.w	d1,d0
00008994                            
00008994                            loc_854E:
00008994 7200                       		moveq	#0,d1
00008996 1232 0000                  		move.b	(a2,d0.w),d1
0000899A 3028 000C                  		move.w	$C(a0),d0
0000899E 9041                       		sub.w	d1,d0
000089A0 7200                       		moveq	#0,d1
000089A2 1229 0016                  		move.b	$16(a1),d1
000089A6 9041                       		sub.w	d1,d0
000089A8 3340 000C                  		move.w	d0,$C(a1)
000089AC 9468 0008                  		sub.w	8(a0),d2
000089B0 9569 0008                  		sub.w	d2,8(a1)
000089B4                            
000089B4                            locret_856E:
000089B4 4E75                       		rts	
000089B6                            ; End of function SlopeObject2
000089B6                            
000089B6                            ; ===========================================================================
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            ; Collision data for GHZ collapsing ledge
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            Obj1A_SlopeData:
000089B6                            		incbin	misc\ghzledge.bin
000089E6                            		even
000089E6                            
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            Map_obj1A:
000089E6                            	include "_maps\obj1A.asm"
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000089EA 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000089EE 10                         byte_85A8:	dc.b $10
000089EF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000089F4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000089F9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000089FE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A0D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A12 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A1C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008A21 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A26 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A2B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A30 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A35 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A3A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A3F 10                         byte_85F9:	dc.b $10
00008A40 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008A45 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A4A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A4F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A54 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A59 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A5E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A63 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A68 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A6D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008A72 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A77 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A7C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A81 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008A86 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A90 19                         byte_864A:	dc.b $19
00008A91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008A96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008A9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008AA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008AA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008AAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008AAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008AB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008AB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008ABE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008AC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008AC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008ACD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008AD2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008AD7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008ADC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008AE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008AEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008AF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008AFA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008AFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B0E 19                         byte_86C8:	dc.b $19
00008B0F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B14 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B19 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B1E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B23 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B28 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B2D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B32 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B37 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B3C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008B41 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B46 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B4B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B50 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B55 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B5A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008B5F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B64 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B69 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B6E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B73 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B78 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B7D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B82 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B87 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B8C                            		even
00008B8C                            		even
00008B8C                            
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            Map_obj53:
00008B8C                            	include "_maps\obj53.asm"
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008B90 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008B94 04                         byte_874E:	dc.b 4
00008B95 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008B9A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008B9F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BA4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008BA9 08                         byte_8763:	dc.b 8
00008BAA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BAF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008BB4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BB9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008BBE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008BC3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008BC8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008BCD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008BD2 04                         byte_878C:	dc.b 4
00008BD3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008BD8 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008BDD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BE2 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008BE7 08                         byte_87A1:	dc.b 8
00008BE8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BED F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008BF2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BF7 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008BFC 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C01 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C06 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C0B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C10                            		even
00008C10                            		even
00008C10                            
00008C10                            ; ===========================================================================
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            
00008C10                            Obj1C:					; XREF: Obj_Index
00008C10 7000                       		moveq	#0,d0
00008C12 1028 0024                  		move.b	$24(a0),d0
00008C16 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008C1A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008C1E                            ; ===========================================================================
00008C1E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008C20 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008C22                            ; ===========================================================================
00008C22                            
00008C22                            Obj1C_Main:				; XREF: Obj1C_Index
00008C22 5428 0024                  		addq.b	#2,$24(a0)
00008C26 7000                       		moveq	#0,d0
00008C28 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008C2C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008C30 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008C34 2159 0004                  		move.l	(a1)+,4(a0)
00008C38 3159 0002                  		move.w	(a1)+,2(a0)
00008C3C 0028 0004 0001             		ori.b	#4,1(a0)
00008C42 1159 001A                  		move.b	(a1)+,$1A(a0)
00008C46 1159 0019                  		move.b	(a1)+,$19(a0)
00008C4A 1159 0018                  		move.b	(a1)+,$18(a0)
00008C4E 1159 0020                  		move.b	(a1)+,$20(a0)
00008C52                            
00008C52                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008C52 3028 0008                  		move.w	8(a0),d0
00008C56 0240 FF80                  		andi.w	#$FF80,d0
00008C5A 3238 F700                  		move.w	($FFFFF700).w,d1
00008C5E 0441 0080                  		subi.w	#$80,d1
00008C62 0241 FF80                  		andi.w	#$FF80,d1
00008C66 9041                       		sub.w	d1,d0
00008C68 0C40 0280                  		cmpi.w	#$280,d0
00008C6C 6200 0000                  		bhi.w	DeleteObject
00008C70 6000 0000                  		bra.w	DisplaySprite
00008C74                            ; ===========================================================================
00008C74                            ; ---------------------------------------------------------------------------
00008C74                            ; Variables for	object $1C are stored in an array
00008C74                            ; ---------------------------------------------------------------------------
00008C74 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008C78 44D8                       		dc.w $44D8		; VRAM setting
00008C7A 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008C7E 0000 0000                  		dc.l Map_obj1C
00008C82 44D8                       		dc.w $44D8
00008C84 0008 0200                  		dc.b 0,	8, 2, 0
00008C88 0000 0000                  		dc.l Map_obj1C
00008C8C 44D8                       		dc.w $44D8
00008C8E 0008 0200                  		dc.b 0,	8, 2, 0
00008C92 0000 7D86                  		dc.l Map_obj11
00008C96 438E                       		dc.w $438E
00008C98 0110 0100                  		dc.b 1,	$10, 1,	0
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            Map_obj1C:
00008C9C                            	include "_maps\obj1C.asm"
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C 0000                       		dc.w byte_8858-Map_obj1C
00008C9E 01                         byte_8858:	dc.b 1
00008C9F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008CA4                            		even
00008CA4                            		even
00008CA4                            
00008CA4                            ; ===========================================================================
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            ; Object 1D - switch that activates when Sonic touches it
00008CA4                            ; (this	is not used anywhere in	the game)
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            
00008CA4                            Obj1D:					; XREF: Obj_Index
00008CA4 7000                       		moveq	#0,d0
00008CA6 1028 0024                  		move.b	$24(a0),d0
00008CAA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008CAE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008CB2                            ; ===========================================================================
00008CB2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008CB4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008CB6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            Obj1D_Main:				; XREF: Obj1D_Index
00008CB8 5428 0024                  		addq.b	#2,$24(a0)
00008CBC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008CC4 317C 4000 0002             		move.w	#$4000,2(a0)
00008CCA 117C 0004 0001             		move.b	#4,1(a0)
00008CD0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008CD6 117C 0010 0019             		move.b	#$10,$19(a0)
00008CDC 117C 0005 0018             		move.b	#5,$18(a0)
00008CE2                            
00008CE2                            Obj1D_Action:				; XREF: Obj1D_Index
00008CE2 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008CE8 323C 0010                  		move.w	#$10,d1
00008CEC 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008CF0 6700                       		beq.s	Obj1D_ChkDel
00008CF2 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008CF6 7001                       		moveq	#1,d0
00008CF8 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008CFC                            
00008CFC                            Obj1D_ChkDel:
00008CFC 6100 0000                  		bsr.w	DisplaySprite
00008D00 3028 0008                  		move.w	8(a0),d0
00008D04 0240 FF80                  		andi.w	#$FF80,d0
00008D08 3238 F700                  		move.w	($FFFFF700).w,d1
00008D0C 0441 0080                  		subi.w	#$80,d1
00008D10 0241 FF80                  		andi.w	#$FF80,d1
00008D14 9041                       		sub.w	d1,d0
00008D16 0C40 0280                  		cmpi.w	#$280,d0
00008D1A 6200 0000                  		bhi.w	Obj1D_Delete
00008D1E 4E75                       		rts	
00008D20                            ; ===========================================================================
00008D20                            
00008D20                            Obj1D_Delete:				; XREF: Obj1D_Index
00008D20 6100 0000                  		bsr.w	DeleteObject
00008D24 4E75                       		rts	
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            ; Subroutine to	check if Sonic touches the object
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            
00008D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D26                            
00008D26                            
00008D26                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008D26 43F8 D000                  		lea	($FFFFD000).w,a1
00008D2A 3029 0008                  		move.w	8(a1),d0
00008D2E 9068 0008                  		sub.w	8(a0),d0
00008D32 D041                       		add.w	d1,d0
00008D34 6B00                       		bmi.s	loc_8918
00008D36 D241                       		add.w	d1,d1
00008D38 B041                       		cmp.w	d1,d0
00008D3A 6400                       		bcc.s	loc_8918
00008D3C 3429 000C                  		move.w	$C(a1),d2
00008D40 1229 0016                  		move.b	$16(a1),d1
00008D44 4881                       		ext.w	d1
00008D46 D242                       		add.w	d2,d1
00008D48 3028 000C                  		move.w	$C(a0),d0
00008D4C 0440 0010                  		subi.w	#$10,d0
00008D50 9041                       		sub.w	d1,d0
00008D52 6200                       		bhi.s	loc_8918
00008D54 0C40 FFF0                  		cmpi.w	#-$10,d0
00008D58 6500                       		bcs.s	loc_8918
00008D5A 70FF                       		moveq	#-1,d0
00008D5C 4E75                       		rts	
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            loc_8918:
00008D5E 7000                       		moveq	#0,d0
00008D60 4E75                       		rts	
00008D62                            ; End of function Obj1D_ChkTouch
00008D62                            
00008D62                            ; ===========================================================================
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            Map_obj1D:
00008D62                            	include "_maps\obj1D.asm"
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62 0000                       		dc.w byte_891E-Map_obj1D
00008D64 04                         byte_891E:	dc.b 4
00008D65 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008D6A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008D6F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008D74 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008D7A 00                         		even
00008D7A 00                         		even
00008D7A                            
00008D7A                            ; ===========================================================================
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            ; Object 2A - doors (SBZ)
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            
00008D7A                            Obj2A:					; XREF: Obj_Index
00008D7A 7000                       		moveq	#0,d0
00008D7C 1028 0024                  		move.b	$24(a0),d0
00008D80 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008D84 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008D88                            ; ===========================================================================
00008D88 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008D8A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008D8C                            ; ===========================================================================
00008D8C                            
00008D8C                            Obj2A_Main:				; XREF: Obj2A_Index
00008D8C 5428 0024                  		addq.b	#2,$24(a0)
00008D90 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008D98 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008D9E 0028 0004 0001             		ori.b	#4,1(a0)
00008DA4 117C 0008 0019             		move.b	#8,$19(a0)
00008DAA 117C 0004 0018             		move.b	#4,$18(a0)
00008DB0                            
00008DB0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008DB0 323C 0040                  		move.w	#$40,d1
00008DB4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008DB8 3038 D008                  		move.w	($FFFFD008).w,d0
00008DBC D041                       		add.w	d1,d0
00008DBE B068 0008                  		cmp.w	8(a0),d0
00008DC2 6500                       		bcs.s	Obj2A_Animate
00008DC4 9041                       		sub.w	d1,d0
00008DC6 9041                       		sub.w	d1,d0
00008DC8 B068 0008                  		cmp.w	8(a0),d0
00008DCC 6400                       		bcc.s	Obj2A_Animate
00008DCE D041                       		add.w	d1,d0
00008DD0 B068 0008                  		cmp.w	8(a0),d0
00008DD4 6400                       		bcc.s	loc_899A
00008DD6 0828 0000 0022             		btst	#0,$22(a0)
00008DDC 6600                       		bne.s	Obj2A_Animate
00008DDE 6000                       		bra.s	Obj2A_Open
00008DE0                            ; ===========================================================================
00008DE0                            
00008DE0                            loc_899A:				; XREF: Obj2A_OpenShut
00008DE0 0828 0000 0022             		btst	#0,$22(a0)
00008DE6 6700                       		beq.s	Obj2A_Animate
00008DE8                            
00008DE8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008DE8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008DEE                            
00008DEE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008DEE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008DF4 6100 0000                  		bsr.w	AnimateSprite
00008DF8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008DFC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008DFE 323C 0011                  		move.w	#$11,d1
00008E02 343C 0020                  		move.w	#$20,d2
00008E06 3602                       		move.w	d2,d3
00008E08 5243                       		addq.w	#1,d3
00008E0A 3828 0008                  		move.w	8(a0),d4
00008E0E 6100 0000                  		bsr.w	SolidObject
00008E12                            
00008E12                            Obj2A_MarkAsUsed:
00008E12 6000 0000                  		bra.w	MarkObjGone
00008E16                            ; ===========================================================================
00008E16                            Ani_obj2A:
00008E16                            	include "_anim\obj2A.asm"
00008E16                            ; ---------------------------------------------------------------------------
00008E16                            ; Animation script - doors (SBZ)
00008E16                            ; ---------------------------------------------------------------------------
00008E16 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E18 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008E1A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008E26 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008E32                            		even
00008E32                            		even
00008E32                            
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            Map_obj2A:
00008E32                            	include "_maps\obj2A.asm"
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008E36 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008E3A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008E3E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008E42 0000                       		dc.w byte_8A56-Map_obj2A
00008E44 02                         byte_89FE:	dc.b 2
00008E45 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008E4A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008E4F 02                         byte_8A09:	dc.b 2
00008E50 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008E55 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008E5A 02                         byte_8A14:	dc.b 2
00008E5B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008E60 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008E65 02                         byte_8A1F:	dc.b 2
00008E66 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008E6B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008E70 02                         byte_8A2A:	dc.b 2
00008E71 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008E76 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008E7B 02                         byte_8A35:	dc.b 2
00008E7C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008E81 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008E86 02                         byte_8A40:	dc.b 2
00008E87 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008E8C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008E91 02                         byte_8A4B:	dc.b 2
00008E92 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008E97 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008E9C 02                         byte_8A56:	dc.b 2
00008E9D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008EA2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008EA8 00                         		even
00008EA8 00                         		even
00008EA8                            
00008EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EA8                            
00008EA8                            
00008EA8                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008EA8 6100 0000                  		bsr.w	Obj44_SolidWall2
00008EAC 6700                       		beq.s	loc_8AA8
00008EAE 6B00 0000                  		bmi.w	loc_8AC4
00008EB2 4A40                       		tst.w	d0
00008EB4 6700 0000                  		beq.w	loc_8A92
00008EB8 6B00                       		bmi.s	loc_8A7C
00008EBA 4A69 0010                  		tst.w	$10(a1)
00008EBE 6B00                       		bmi.s	loc_8A92
00008EC0 6000                       		bra.s	loc_8A82
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            loc_8A7C:
00008EC2 4A69 0010                  		tst.w	$10(a1)
00008EC6 6A00                       		bpl.s	loc_8A92
00008EC8                            
00008EC8                            loc_8A82:
00008EC8 9169 0008                  		sub.w	d0,8(a1)
00008ECC 337C 0000 0014             		move.w	#0,$14(a1)
00008ED2 337C 0000 0010             		move.w	#0,$10(a1)
00008ED8                            
00008ED8                            loc_8A92:
00008ED8 0829 0001 0022             		btst	#1,$22(a1)
00008EDE 6600                       		bne.s	loc_8AB6
00008EE0 08E9 0005 0022             		bset	#5,$22(a1)
00008EE6 08E8 0005 0022             		bset	#5,$22(a0)
00008EEC 4E75                       		rts	
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            loc_8AA8:
00008EEE 0828 0005 0022             		btst	#5,$22(a0)
00008EF4 6700                       		beq.s	locret_8AC2
00008EF6 337C 0001 001C             		move.w	#1,$1C(a1)
00008EFC                            
00008EFC                            loc_8AB6:
00008EFC 08A8 0005 0022             		bclr	#5,$22(a0)
00008F02 08A9 0005 0022             		bclr	#5,$22(a1)
00008F08                            
00008F08                            locret_8AC2:
00008F08 4E75                       		rts	
00008F0A                            ; ===========================================================================
00008F0A                            
00008F0A                            loc_8AC4:
00008F0A 4A69 0012                  		tst.w	$12(a1)
00008F0E 6A00                       		bpl.s	locret_8AD8
00008F10 4A43                       		tst.w	d3
00008F12 6A00                       		bpl.s	locret_8AD8
00008F14 9769 000C                  		sub.w	d3,$C(a1)
00008F18 337C 0000 0012             		move.w	#0,$12(a1)
00008F1E                            
00008F1E                            locret_8AD8:
00008F1E 4E75                       		rts	
00008F20                            ; End of function Obj44_SolidWall
00008F20                            
00008F20                            
00008F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F20                            
00008F20                            
00008F20                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008F20 43F8 D000                  		lea	($FFFFD000).w,a1
00008F24 3029 0008                  		move.w	8(a1),d0
00008F28 9068 0008                  		sub.w	8(a0),d0
00008F2C D041                       		add.w	d1,d0
00008F2E 6B00                       		bmi.s	loc_8B48
00008F30 3601                       		move.w	d1,d3
00008F32 D643                       		add.w	d3,d3
00008F34 B043                       		cmp.w	d3,d0
00008F36 6200                       		bhi.s	loc_8B48
00008F38 1629 0016                  		move.b	$16(a1),d3
00008F3C 4883                       		ext.w	d3
00008F3E D443                       		add.w	d3,d2
00008F40 3629 000C                  		move.w	$C(a1),d3
00008F44 9668 000C                  		sub.w	$C(a0),d3
00008F48 D642                       		add.w	d2,d3
00008F4A 6B00                       		bmi.s	loc_8B48
00008F4C 3802                       		move.w	d2,d4
00008F4E D844                       		add.w	d4,d4
00008F50 B644                       		cmp.w	d4,d3
00008F52 6400                       		bcc.s	loc_8B48
00008F54 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008F58 6B00                       		bmi.s	loc_8B48
00008F5A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008F60 6400                       		bcc.s	loc_8B48
00008F62 4A78 FE08                  		tst.w	($FFFFFE08).w
00008F66 6600                       		bne.s	loc_8B48
00008F68 3A00                       		move.w	d0,d5
00008F6A B240                       		cmp.w	d0,d1
00008F6C 6400                       		bcc.s	loc_8B30
00008F6E D241                       		add.w	d1,d1
00008F70 9041                       		sub.w	d1,d0
00008F72 3A00                       		move.w	d0,d5
00008F74 4445                       		neg.w	d5
00008F76                            
00008F76                            loc_8B30:
00008F76 3203                       		move.w	d3,d1
00008F78 B443                       		cmp.w	d3,d2
00008F7A 6400                       		bcc.s	loc_8B3C
00008F7C 9644                       		sub.w	d4,d3
00008F7E 3203                       		move.w	d3,d1
00008F80 4441                       		neg.w	d1
00008F82                            
00008F82                            loc_8B3C:
00008F82 BA41                       		cmp.w	d1,d5
00008F84 6200                       		bhi.s	loc_8B44
00008F86 7801                       		moveq	#1,d4
00008F88 4E75                       		rts	
00008F8A                            ; ===========================================================================
00008F8A                            
00008F8A                            loc_8B44:
00008F8A 78FF                       		moveq	#-1,d4
00008F8C 4E75                       		rts	
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            loc_8B48:
00008F8E 7800                       		moveq	#0,d4
00008F90 4E75                       		rts	
00008F92                            ; End of function Obj44_SolidWall2
00008F92                            
00008F92                            ; ===========================================================================
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            ; Object 1E - Ball Hog enemy (SBZ)
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            
00008F92                            Obj1E:					; XREF: Obj_Index
00008F92 7000                       		moveq	#0,d0
00008F94 1028 0024                  		move.b	$24(a0),d0
00008F98 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008F9C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008FA0                            ; ===========================================================================
00008FA0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008FA2 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008FA4                            ; ===========================================================================
00008FA4                            
00008FA4                            Obj1E_Main:				; XREF: Obj1E_Index
00008FA4 117C 0013 0016             		move.b	#$13,$16(a0)
00008FAA 117C 0008 0017             		move.b	#8,$17(a0)
00008FB0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008FB8 317C 2302 0002             		move.w	#$2302,2(a0)
00008FBE 117C 0004 0001             		move.b	#4,1(a0)
00008FC4 117C 0004 0018             		move.b	#4,$18(a0)
00008FCA 117C 0005 0020             		move.b	#5,$20(a0)
00008FD0 117C 000C 0019             		move.b	#$C,$19(a0)
00008FD6 6100 0000                  		bsr.w	ObjectFall
00008FDA 4EB9 0000 0000             		jsr	ObjHitFloor
00008FE0 4A41                       		tst.w	d1
00008FE2 6A00                       		bpl.s	locret_8BAC
00008FE4 D368 000C                  		add.w	d1,$C(a0)
00008FE8 317C 0000 0012             		move.w	#0,$12(a0)
00008FEE 5428 0024                  		addq.b	#2,$24(a0)
00008FF2                            
00008FF2                            locret_8BAC:
00008FF2 4E75                       		rts	
00008FF4                            ; ===========================================================================
00008FF4                            
00008FF4                            Obj1E_Action:				; XREF: Obj1E_Index
00008FF4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008FFA 6100 0000                  		bsr.w	AnimateSprite
00008FFE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009004 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009006 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000900A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000900C 6000                       		bra.s	Obj1E_MarkAsGone
0000900E                            ; ===========================================================================
0000900E                            
0000900E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000900E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009012                            
00009012                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009012 6000 0000                  		bra.w	MarkObjGone
00009016                            ; ===========================================================================
00009016                            
00009016                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009016 117C 0001 0032             		move.b	#1,$32(a0)
0000901C 6100 0000                  		bsr.w	SingleObjLoad
00009020 6600                       		bne.s	loc_8C1A
00009022 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009026 3368 0008 0008             		move.w	8(a0),8(a1)
0000902C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009032 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009038 337C 0000 0012             		move.w	#0,$12(a1)
0000903E 70FC                       		moveq	#-4,d0
00009040 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009046 6700                       		beq.s	loc_8C0A	; if not, branch
00009048 4440                       		neg.w	d0
0000904A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000904E                            
0000904E                            loc_8C0A:
0000904E D169 0008                  		add.w	d0,8(a1)
00009052 0669 000C 000C             		addi.w	#$C,$C(a1)
00009058 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000905E                            
0000905E                            loc_8C1A:
0000905E 60B2                       		bra.s	Obj1E_MarkAsGone
00009060                            ; ===========================================================================
00009060                            ; ---------------------------------------------------------------------------
00009060                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009060                            ; ---------------------------------------------------------------------------
00009060                            
00009060                            Obj20:					; XREF: Obj_Index
00009060 7000                       		moveq	#0,d0
00009062 1028 0024                  		move.b	$24(a0),d0
00009066 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000906A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000906E                            ; ===========================================================================
0000906E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009070 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009072                            ; ===========================================================================
00009072                            
00009072                            Obj20_Main:				; XREF: Obj20_Index
00009072 5428 0024                  		addq.b	#2,$24(a0)
00009076 117C 0007 0016             		move.b	#7,$16(a0)
0000907C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009084 317C 2302 0002             		move.w	#$2302,2(a0)
0000908A 117C 0004 0001             		move.b	#4,1(a0)
00009090 117C 0003 0018             		move.b	#3,$18(a0)
00009096 117C 0087 0020             		move.b	#$87,$20(a0)
0000909C 117C 0008 0019             		move.b	#8,$19(a0)
000090A2 7000                       		moveq	#0,d0
000090A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000090A8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000090AC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000090B0 117C 0004 001A             		move.b	#4,$1A(a0)
000090B6                            
000090B6                            Obj20_Bounce:				; XREF: Obj20_Index
000090B6 4EB9 0000 0000             		jsr	ObjectFall
000090BC 4A68 0012                  		tst.w	$12(a0)
000090C0 6B00                       		bmi.s	Obj20_ChkExplode
000090C2 4EB9 0000 0000             		jsr	ObjHitFloor
000090C8 4A41                       		tst.w	d1
000090CA 6A00                       		bpl.s	Obj20_ChkExplode
000090CC D368 000C                  		add.w	d1,$C(a0)
000090D0 317C FD00 0012             		move.w	#-$300,$12(a0)
000090D6 4A03                       		tst.b	d3
000090D8 6700                       		beq.s	Obj20_ChkExplode
000090DA 6B00                       		bmi.s	loc_8CA4
000090DC 4A68 0010                  		tst.w	$10(a0)
000090E0 6A00                       		bpl.s	Obj20_ChkExplode
000090E2 4468 0010                  		neg.w	$10(a0)
000090E6 6000                       		bra.s	Obj20_ChkExplode
000090E8                            ; ===========================================================================
000090E8                            
000090E8                            loc_8CA4:				; XREF: Obj20_Bounce
000090E8 4A68 0010                  		tst.w	$10(a0)
000090EC 6B00                       		bmi.s	Obj20_ChkExplode
000090EE 4468 0010                  		neg.w	$10(a0)
000090F2                            
000090F2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000090F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000090F6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000090F8 10BC 0024                  		move.b	#$24,0(a0)
000090FC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009100 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009106 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000910A                            ; ===========================================================================
0000910A                            
0000910A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000910A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000910E 6A00                       		bpl.s	Obj20_Display
00009110 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009116 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000911C                            
0000911C                            Obj20_Display:
0000911C 6100 0000                  		bsr.w	DisplaySprite
00009120 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009124 0640 00E0                  		addi.w	#$E0,d0
00009128 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000912C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            ; ---------------------------------------------------------------------------
00009132                            ; Object 24 - explosion	from a destroyed monitor
00009132                            ; ---------------------------------------------------------------------------
00009132                            
00009132                            Obj24:					; XREF: Obj_Index
00009132 7000                       		moveq	#0,d0
00009134 1028 0024                  		move.b	$24(a0),d0
00009138 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000913C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009140                            ; ===========================================================================
00009140 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009142 0000                       		dc.w Obj24_Animate-Obj24_Index
00009144                            ; ===========================================================================
00009144                            
00009144                            Obj24_Main:				; XREF: Obj24_Index
00009144 5428 0024                  		addq.b	#2,$24(a0)
00009148 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009150 317C 041C 0002             		move.w	#$41C,2(a0)
00009156 117C 0004 0001             		move.b	#4,1(a0)
0000915C 117C 0001 0018             		move.b	#1,$18(a0)
00009162 117C 0000 0020             		move.b	#0,$20(a0)
00009168 117C 000C 0019             		move.b	#$C,$19(a0)
0000916E 117C 0009 001E             		move.b	#9,$1E(a0)
00009174 117C 0000 001A             		move.b	#0,$1A(a0)
0000917A 303C 00A5                  		move.w	#$A5,d0
0000917E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
00009184                            
00009184                            Obj24_Animate:				; XREF: Obj24_Index
00009184 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009188 6A00                       		bpl.s	Obj24_Display
0000918A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009190 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009194 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000919A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000919E                            
0000919E                            Obj24_Display:
0000919E 6000 0000                  		bra.w	DisplaySprite
000091A2                            ; ===========================================================================
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            ; Object 27 - explosion	from a destroyed enemy
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            
000091A2                            Obj27:					; XREF: Obj_Index
000091A2 7000                       		moveq	#0,d0
000091A4 1028 0024                  		move.b	$24(a0),d0
000091A8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000091AC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000091B0                            ; ===========================================================================
000091B0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000091B2 0000                       		dc.w Obj27_Main-Obj27_Index
000091B4 0000                       		dc.w Obj27_Animate-Obj27_Index
000091B6                            ; ===========================================================================
000091B6                            
000091B6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000091B6 5428 0024                  		addq.b	#2,$24(a0)
000091BA 6100 0000                  		bsr.w	SingleObjLoad
000091BE 6600                       		bne.s	Obj27_Main
000091C0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000091C4 3368 0008 0008             		move.w	8(a0),8(a1)
000091CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091D0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000091D6                            
000091D6                            Obj27_Main:				; XREF: Obj27_Index
000091D6 5428 0024                  		addq.b	#2,$24(a0)
000091DA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000091E2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000091E8 117C 0004 0001             		move.b	#4,1(a0)
000091EE 117C 0001 0018             		move.b	#1,$18(a0)
000091F4 117C 0000 0020             		move.b	#0,$20(a0)
000091FA 117C 000C 0019             		move.b	#$C,$19(a0)
00009200                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009200 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009206 117C 0000 001A             		move.b	#0,$1A(a0)
0000920C 303C 00C1                  		move.w	#$C1,d0
00009210 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009216                            
00009216 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000921C 1028 0028                  		move.b	$28(a0),d0
00009220 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009226 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000922C                            
0000922C                            Obj27_Animate:				; XREF: Obj27_Index
0000922C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009230 6A00                       		bpl.s	Obj27_Display
00009232                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009232 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009238 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000923C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009242 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009246                            
00009246                            Obj27_Display:
00009246 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000924C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009252 6000 0000                  		bra.w	DisplaySprite
00009256                            ; ===========================================================================
00009256                            ; ---------------------------------------------------------------------------
00009256                            Obj27_ExplosionXYSpd:
00009256                            		; dc.w	-$350, -$300	; Left
00009256                            		; dc.w	-$200, -$450	; Near middle (left)
00009256                            		; dc.w	0, -$500	; Middle
00009256                            		; dc.w	$200, -$450	; Near middle (right)
00009256                            		; dc.w	$350, -$300	; Right
00009256                            
00009256 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000925A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000925E 0000 FA00                  		dc.w	0, -$600	; Middle
00009262 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009266 0150 FC00                  		dc.w	$150, -$400	; Right
0000926A                            
0000926A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009284                            ; ---------------------------------------------------------------------------
00009284                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009284                            ; ---------------------------------------------------------------------------
00009284                            
00009284                            Obj3F:					; XREF: Obj_Index
00009284 7000                       		moveq	#0,d0
00009286 1028 0024                  		move.b	$24(a0),d0
0000928A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000928E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009292                            ; ===========================================================================
00009292 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009294 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009296                            ; ===========================================================================
00009296                            
00009296                            Obj3F_Main:				; XREF: Obj3F_Index
00009296 5428 0024                  		addq.b	#2,$24(a0)
0000929A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000092A2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000092A8 117C 0004 0001             		move.b	#4,1(a0)
000092AE 117C 0001 0018             		move.b	#1,$18(a0)
000092B4 117C 0000 0020             		move.b	#0,$20(a0)
000092BA 117C 000C 0019             		move.b	#$C,$19(a0)
000092C0 117C 0007 001E             		move.b	#7,$1E(a0)
000092C6 117C 0000 001A             		move.b	#0,$1A(a0)
000092CC 303C 00C4                  		move.w	#$C4,d0
000092D0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000092D6                            ; ===========================================================================
000092D6                            Ani_obj1E:
000092D6                            	include "_anim\obj1E.asm"
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            ; Animation script - doors (SBZ)
000092D6                            ; ---------------------------------------------------------------------------
000092D6 0000                       		dc.w byte_8E4A-Ani_obj1E
000092D8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000092F0 00                         		even
000092F0 00                         		even
000092F0                            
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            Map_obj1E:
000092F0                            	include "_maps\obj1E.asm"
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000092F4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000092F8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000092FC 02                         byte_8E6E:	dc.b 2
000092FD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009302 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009307 02                         byte_8E79:	dc.b 2
00009308 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000930D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009312 02                         byte_8E84:	dc.b 2
00009313 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009318 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000931D 02                         byte_8E8F:	dc.b 2
0000931E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009323 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009328 01                         byte_8E9A:	dc.b 1
00009329 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000932E 01                         byte_8EA0:	dc.b 1
0000932F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009334                            		even
00009334                            		even
00009334                            
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334                            Map_obj24:
00009334                            	include "_maps\obj24.asm"
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009338 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000933C 01                         byte_8EAE:	dc.b 1
0000933D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009342 01                         byte_8EB4:	dc.b 1
00009343 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009348 01                         byte_8EBA:	dc.b 1
00009349 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000934E 01                         byte_8EC0:	dc.b 1
0000934F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009354                            		even
00009354                            		even
00009354                            
00009354                            ; ---------------------------------------------------------------------------
00009354                            ; Sprite mappings - explosion
00009354                            ; ---------------------------------------------------------------------------
00009354 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009358 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000935C 0000                       		dc.w byte_8EF7-Map_obj27
0000935E 01                         byte_8ED0:	dc.b 1
0000935F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009364 01                         byte_8ED6:	dc.b 1
00009365 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000936A 01                         byte_8EDC:	dc.b 1
0000936B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009370 04                         byte_8EE2:	dc.b 4
00009371 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009376 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000937B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009380 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009385 04                         byte_8EF7:	dc.b 4
00009386 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000938B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009390 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009395 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000939A                            		even
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000939A                            ; ---------------------------------------------------------------------------
0000939A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000939C 0000                       		dc.w byte_8F16-Map_obj3F
0000939E 0000                       		dc.w byte_8F1C-Map_obj3F
000093A0 FFD6                       		dc.w byte_8EE2-Map_obj3F
000093A2 FFEB                       		dc.w byte_8EF7-Map_obj3F
000093A4 01                         byte_8F16:	dc.b 1
000093A5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000093AA 01                         byte_8F1C:	dc.b 1
000093AB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000093B0                            		even
000093B0                            ; ===========================================================================
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            ; Object 28 - animals
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            
000093B0                            Obj28:					; XREF: Obj_Index
000093B0 7000                       		moveq	#0,d0
000093B2 1028 0024                  		move.b	$24(a0),d0
000093B6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000093BA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000093BE                            ; ===========================================================================
000093BE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000093C2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093C6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000093CA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093CE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000093D2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000093D6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000093DA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093DE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093E2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000093E6 0000                       		dc.w loc_92D6-Obj28_Index
000093E8                            
000093E8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000093F4                            
000093F4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000093F8 0000 0000                  		dc.l Map_obj28
000093FC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009400 0000 0000                  		dc.l Map_obj28a		; mappings address
00009404 FE80 FD00                  		dc.w $FE80, $FD00
00009408 0000 0000                  		dc.l Map_obj28
0000940C FEC0 FE80                  		dc.w $FEC0, $FE80
00009410 0000 0000                  		dc.l Map_obj28a
00009414 FE40 FD00                  		dc.w $FE40, $FD00
00009418 0000 0000                  		dc.l Map_obj28b
0000941C FD00 FC00                  		dc.w $FD00, $FC00
00009420 0000 0000                  		dc.l Map_obj28a
00009424 FD80 FC80                  		dc.w $FD80, $FC80
00009428 0000 0000                  		dc.l Map_obj28b
0000942C                            
0000942C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000943C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000944C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009458                            
00009458 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000946C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009480 0000 0000                  		dc.l Map_obj28b
00009484                            
00009484 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009496 0565 05B3                  		dc.w $565, $5B3
0000949A                            ; ===========================================================================
0000949A                            
0000949A                            Obj28_Ending:				; XREF: Obj28_Index
0000949A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000949E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000094A2 7000                       		moveq	#0,d0
000094A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094A8 D040                       		add.w	d0,d0		; multiply d0 by 2
000094AA 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000094AE 0440 0014                  		subi.w	#$14,d0
000094B2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000094B8 D040                       		add.w	d0,d0
000094BA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000094C0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000094C4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000094CA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000094D0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000094D6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000094DC 117C 000C 0016             		move.b	#$C,$16(a0)
000094E2 117C 0004 0001             		move.b	#4,1(a0)
000094E8 08E8 0000 0001             		bset	#0,1(a0)
000094EE 117C 0006 0018             		move.b	#6,$18(a0)
000094F4 117C 0008 0019             		move.b	#8,$19(a0)
000094FA 117C 0007 001E             		move.b	#7,$1E(a0)
00009500 6000 0000                  		bra.w	DisplaySprite
00009504                            ; ===========================================================================
00009504                            
00009504                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009504 5428 0024                  		addq.b	#2,$24(a0)
00009508 6100 96F2                  		bsr.w	RandomNumber
0000950C 0240 0001                  		andi.w	#1,d0
00009510 7200                       		moveq	#0,d1
00009512 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009516 D241                       		add.w	d1,d1
00009518 D240                       		add.w	d0,d1
0000951A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000951E 1031 1000                  		move.b	(a1,d1.w),d0
00009522 1140 0030                  		move.b	d0,$30(a0)
00009526 E748                       		lsl.w	#3,d0
00009528 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000952C D2C0                       		adda.w	d0,a1
0000952E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009532 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009536 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000953A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009540 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009546 6700                       		beq.s	loc_90C0	; if yes, branch
00009548 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000954E                            
0000954E                            loc_90C0:
0000954E 117C 000C 0016             		move.b	#$C,$16(a0)
00009554 117C 0004 0001             		move.b	#4,1(a0)
0000955A 08E8 0000 0001             		bset	#0,1(a0)
00009560 117C 0006 0018             		move.b	#6,$18(a0)
00009566 117C 0008 0019             		move.b	#8,$19(a0)
0000956C 117C 0007 001E             		move.b	#7,$1E(a0)
00009572 117C 0002 001A             		move.b	#2,$1A(a0)
00009578 317C FC00 0012             		move.w	#-$400,$12(a0)
0000957E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009582 6600                       		bne.s	loc_911C
00009584 6100 0000                  		bsr.w	SingleObjLoad
00009588 6600                       		bne.s	Obj28_Display
0000958A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000958E 3368 0008 0008             		move.w	8(a0),8(a1)
00009594 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000959A 3028 003E                  		move.w	$3E(a0),d0
0000959E E248                       		lsr.w	#1,d0
000095A0 1340 001A                  		move.b	d0,$1A(a1)
000095A4                            
000095A4                            Obj28_Display:
000095A4 6000 0000                  		bra.w	DisplaySprite
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            loc_911C:
000095A8 117C 0012 0024             		move.b	#$12,$24(a0)
000095AE 4268 0010                  		clr.w	$10(a0)
000095B2 6000 0000                  		bra.w	DisplaySprite
000095B6                            ; ===========================================================================
000095B6                            
000095B6                            loc_912A:				; XREF: Obj28_Index
000095B6 4A28 0001                  		tst.b	1(a0)
000095BA 6A00 0000                  		bpl.w	DeleteObject
000095BE 6100 0000                  		bsr.w	ObjectFall
000095C2 4A68 0012                  		tst.w	$12(a0)
000095C6 6B00                       		bmi.s	loc_9180
000095C8 4EB9 0000 0000             		jsr	ObjHitFloor
000095CE 4A41                       		tst.w	d1
000095D0 6A00                       		bpl.s	loc_9180
000095D2 D368 000C                  		add.w	d1,$C(a0)
000095D6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000095DC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095E2 117C 0001 001A             		move.b	#1,$1A(a0)
000095E8 1028 0030                  		move.b	$30(a0),d0
000095EC D000                       		add.b	d0,d0
000095EE 5800                       		addq.b	#4,d0
000095F0 1140 0024                  		move.b	d0,$24(a0)
000095F4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000095F8 6700                       		beq.s	loc_9180
000095FA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009600 6700                       		beq.s	loc_9180
00009602 4468 0010                  		neg.w	$10(a0)
00009606 0868 0000 0001             		bchg	#0,1(a0)
0000960C                            
0000960C                            loc_9180:
0000960C 6000 0000                  		bra.w	DisplaySprite
00009610                            ; ===========================================================================
00009610                            
00009610                            loc_9184:				; XREF: Obj28_Index
00009610 6100 0000                  		bsr.w	ObjectFall
00009614 117C 0001 001A             		move.b	#1,$1A(a0)
0000961A 4A68 0012                  		tst.w	$12(a0)
0000961E 6B00                       		bmi.s	loc_91AE
00009620 117C 0000 001A             		move.b	#0,$1A(a0)
00009626 4EB9 0000 0000             		jsr	ObjHitFloor
0000962C 4A41                       		tst.w	d1
0000962E 6A00                       		bpl.s	loc_91AE
00009630 D368 000C                  		add.w	d1,$C(a0)
00009634 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000963A                            
0000963A                            loc_91AE:
0000963A 4A28 0028                  		tst.b	$28(a0)
0000963E 6600                       		bne.s	loc_9224
00009640 4A28 0001                  		tst.b	1(a0)
00009644 6A00 0000                  		bpl.w	DeleteObject
00009648 6000 0000                  		bra.w	DisplaySprite
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            loc_91C0:				; XREF: Obj28_Index
0000964C 6100 0000                  		bsr.w	SpeedToPos
00009650 0668 0018 0012             		addi.w	#$18,$12(a0)
00009656 4A68 0012                  		tst.w	$12(a0)
0000965A 6B00                       		bmi.s	loc_91FC
0000965C 4EB9 0000 0000             		jsr	ObjHitFloor
00009662 4A41                       		tst.w	d1
00009664 6A00                       		bpl.s	loc_91FC
00009666 D368 000C                  		add.w	d1,$C(a0)
0000966A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009670 4A28 0028                  		tst.b	$28(a0)
00009674 6700                       		beq.s	loc_91FC
00009676 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000967C 6700                       		beq.s	loc_91FC
0000967E 4468 0010                  		neg.w	$10(a0)
00009682 0868 0000 0001             		bchg	#0,1(a0)
00009688                            
00009688                            loc_91FC:
00009688 5328 001E                  		subq.b	#1,$1E(a0)
0000968C 6A00                       		bpl.s	loc_9212
0000968E 117C 0001 001E             		move.b	#1,$1E(a0)
00009694 5228 001A                  		addq.b	#1,$1A(a0)
00009698 0228 0001 001A             		andi.b	#1,$1A(a0)
0000969E                            
0000969E                            loc_9212:
0000969E 4A28 0028                  		tst.b	$28(a0)
000096A2 6600                       		bne.s	loc_9224
000096A4 4A28 0001                  		tst.b	1(a0)
000096A8 6A00 0000                  		bpl.w	DeleteObject
000096AC 6000 0000                  		bra.w	DisplaySprite
000096B0                            ; ===========================================================================
000096B0                            
000096B0                            loc_9224:				; XREF: Obj28_Index
000096B0 3028 0008                  		move.w	8(a0),d0
000096B4 9078 D008                  		sub.w	($FFFFD008).w,d0
000096B8 6500                       		bcs.s	loc_923C
000096BA 0440 0180                  		subi.w	#$180,d0
000096BE 6A00                       		bpl.s	loc_923C
000096C0 4A28 0001                  		tst.b	1(a0)
000096C4 6A00 0000                  		bpl.w	DeleteObject
000096C8                            
000096C8                            loc_923C:
000096C8 6000 0000                  		bra.w	DisplaySprite
000096CC                            ; ===========================================================================
000096CC                            
000096CC                            loc_9240:				; XREF: Obj28_Index
000096CC 4A28 0001                  		tst.b	1(a0)
000096D0 6A00 0000                  		bpl.w	DeleteObject
000096D4 5368 0036                  		subq.w	#1,$36(a0)
000096D8 6600 0000                  		bne.w	loc_925C
000096DC 117C 0002 0024             		move.b	#2,$24(a0)
000096E2 117C 0003 0018             		move.b	#3,$18(a0)
000096E8                            
000096E8                            loc_925C:
000096E8 6000 0000                  		bra.w	DisplaySprite
000096EC                            ; ===========================================================================
000096EC                            
000096EC                            loc_9260:				; XREF: Obj28_Index
000096EC 6100 0000                  		bsr.w	sub_9404
000096F0 6400                       		bcc.s	loc_927C
000096F2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000096F8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096FE 117C 000E 0024             		move.b	#$E,$24(a0)
00009704 6000 FF46                  		bra.w	loc_91C0
00009708                            ; ===========================================================================
00009708                            
00009708                            loc_927C:
00009708 6000 FFA6                  		bra.w	loc_9224
0000970C                            ; ===========================================================================
0000970C                            
0000970C                            loc_9280:				; XREF: Obj28_Index
0000970C 6100 0000                  		bsr.w	sub_9404
00009710 6A00                       		bpl.s	loc_92B6
00009712 4268 0010                  		clr.w	$10(a0)
00009716 4268 0032                  		clr.w	$32(a0)
0000971A 6100 0000                  		bsr.w	SpeedToPos
0000971E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009724 6100 0000                  		bsr.w	loc_93C4
00009728 6100 0000                  		bsr.w	loc_93EC
0000972C 5328 001E                  		subq.b	#1,$1E(a0)
00009730 6A00                       		bpl.s	loc_92B6
00009732 117C 0001 001E             		move.b	#1,$1E(a0)
00009738 5228 001A                  		addq.b	#1,$1A(a0)
0000973C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009742                            
00009742                            loc_92B6:
00009742 6000 FF6C                  		bra.w	loc_9224
00009746                            ; ===========================================================================
00009746                            
00009746                            loc_92BA:				; XREF: Obj28_Index
00009746 6100 0000                  		bsr.w	sub_9404
0000974A 6A00                       		bpl.s	loc_9310
0000974C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009752 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009758 117C 0004 0024             		move.b	#4,$24(a0)
0000975E 6000 FEB0                  		bra.w	loc_9184
00009762                            ; ===========================================================================
00009762                            
00009762                            loc_92D6:				; XREF: Obj28_Index
00009762 6100 0000                  		bsr.w	ObjectFall
00009766 117C 0001 001A             		move.b	#1,$1A(a0)
0000976C 4A68 0012                  		tst.w	$12(a0)
00009770 6B00                       		bmi.s	loc_9310
00009772 117C 0000 001A             		move.b	#0,$1A(a0)
00009778 4EB9 0000 0000             		jsr	ObjHitFloor
0000977E 4A41                       		tst.w	d1
00009780 6A00                       		bpl.s	loc_9310
00009782 4628 0029                  		not.b	$29(a0)
00009786 6600                       		bne.s	loc_9306
00009788 4468 0010                  		neg.w	$10(a0)
0000978C 0868 0000 0001             		bchg	#0,1(a0)
00009792                            
00009792                            loc_9306:
00009792 D368 000C                  		add.w	d1,$C(a0)
00009796 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000979C                            
0000979C                            loc_9310:
0000979C 6000 FF12                  		bra.w	loc_9224
000097A0                            ; ===========================================================================
000097A0                            
000097A0                            loc_9314:				; XREF: Obj28_Index
000097A0 6100 0000                  		bsr.w	sub_9404
000097A4 6A00                       		bpl.s	loc_932E
000097A6 4268 0010                  		clr.w	$10(a0)
000097AA 4268 0032                  		clr.w	$32(a0)
000097AE 6100 0000                  		bsr.w	ObjectFall
000097B2 6100 0000                  		bsr.w	loc_93C4
000097B6 6100 0000                  		bsr.w	loc_93EC
000097BA                            
000097BA                            loc_932E:
000097BA 6000 FEF4                  		bra.w	loc_9224
000097BE                            ; ===========================================================================
000097BE                            
000097BE                            loc_9332:				; XREF: Obj28_Index
000097BE 6100 0000                  		bsr.w	sub_9404
000097C2 6A00                       		bpl.s	loc_936C
000097C4 6100 0000                  		bsr.w	ObjectFall
000097C8 117C 0001 001A             		move.b	#1,$1A(a0)
000097CE 4A68 0012                  		tst.w	$12(a0)
000097D2 6B00                       		bmi.s	loc_936C
000097D4 117C 0000 001A             		move.b	#0,$1A(a0)
000097DA 4EB9 0000 0000             		jsr	ObjHitFloor
000097E0 4A41                       		tst.w	d1
000097E2 6A00                       		bpl.s	loc_936C
000097E4 4468 0010                  		neg.w	$10(a0)
000097E8 0868 0000 0001             		bchg	#0,1(a0)
000097EE D368 000C                  		add.w	d1,$C(a0)
000097F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097F8                            
000097F8                            loc_936C:
000097F8 6000 FEB6                  		bra.w	loc_9224
000097FC                            ; ===========================================================================
000097FC                            
000097FC                            loc_9370:				; XREF: Obj28_Index
000097FC 6100 0000                  		bsr.w	sub_9404
00009800 6A00                       		bpl.s	loc_93C0
00009802 6100 0000                  		bsr.w	SpeedToPos
00009806 0668 0018 0012             		addi.w	#$18,$12(a0)
0000980C 4A68 0012                  		tst.w	$12(a0)
00009810 6B00                       		bmi.s	loc_93AA
00009812 4EB9 0000 0000             		jsr	ObjHitFloor
00009818 4A41                       		tst.w	d1
0000981A 6A00                       		bpl.s	loc_93AA
0000981C 4628 0029                  		not.b	$29(a0)
00009820 6600                       		bne.s	loc_93A0
00009822 4468 0010                  		neg.w	$10(a0)
00009826 0868 0000 0001             		bchg	#0,1(a0)
0000982C                            
0000982C                            loc_93A0:
0000982C D368 000C                  		add.w	d1,$C(a0)
00009830 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009836                            
00009836                            loc_93AA:
00009836 5328 001E                  		subq.b	#1,$1E(a0)
0000983A 6A00                       		bpl.s	loc_93C0
0000983C 117C 0001 001E             		move.b	#1,$1E(a0)
00009842 5228 001A                  		addq.b	#1,$1A(a0)
00009846 0228 0001 001A             		andi.b	#1,$1A(a0)
0000984C                            
0000984C                            loc_93C0:
0000984C 6000 FE62                  		bra.w	loc_9224
00009850                            ; ===========================================================================
00009850                            
00009850                            loc_93C4:
00009850 117C 0001 001A             		move.b	#1,$1A(a0)
00009856 4A68 0012                  		tst.w	$12(a0)
0000985A 6B00                       		bmi.s	locret_93EA
0000985C 117C 0000 001A             		move.b	#0,$1A(a0)
00009862 4EB9 0000 0000             		jsr	ObjHitFloor
00009868 4A41                       		tst.w	d1
0000986A 6A00                       		bpl.s	locret_93EA
0000986C D368 000C                  		add.w	d1,$C(a0)
00009870 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009876                            
00009876                            locret_93EA:
00009876 4E75                       		rts	
00009878                            ; ===========================================================================
00009878                            
00009878                            loc_93EC:
00009878 08E8 0000 0001             		bset	#0,1(a0)
0000987E 3028 0008                  		move.w	8(a0),d0
00009882 9078 D008                  		sub.w	($FFFFD008).w,d0
00009886 6400                       		bcc.s	locret_9402
00009888 08A8 0000 0001             		bclr	#0,1(a0)
0000988E                            
0000988E                            locret_9402:
0000988E 4E75                       		rts	
00009890                            
00009890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009890                            
00009890                            
00009890                            sub_9404:
00009890 3038 D008                  		move.w	($FFFFD008).w,d0
00009894 9068 0008                  		sub.w	8(a0),d0
00009898 0440 00B8                  		subi.w	#$B8,d0
0000989C 4E75                       		rts	
0000989E                            ; End of function sub_9404
0000989E                            
0000989E                            ; ===========================================================================
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            ; Object 29 - points that appear when you destroy something
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            
0000989E                            Obj29:					; XREF: Obj_Index
0000989E 7000                       		moveq	#0,d0
000098A0 1028 0024                  		move.b	$24(a0),d0
000098A4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000098A8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000098AC 6000 0000                  		bra.w	DisplaySprite
000098B0                            ; ===========================================================================
000098B0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000098B2 0000                       		dc.w Obj29_Slower-Obj29_Index
000098B4                            ; ===========================================================================
000098B4                            
000098B4                            Obj29_Main:				; XREF: Obj29_Index
000098B4 5428 0024                  		addq.b	#2,$24(a0)
000098B8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000098C0 317C 2797 0002             		move.w	#$2797,2(a0)
000098C6 117C 0004 0001             		move.b	#4,1(a0)
000098CC 117C 0001 0018             		move.b	#1,$18(a0)
000098D2 117C 0008 0019             		move.b	#8,$19(a0)
000098D8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000098DE                            
000098DE                            Obj29_Slower:				; XREF: Obj29_Index
000098DE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000098E2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000098E6 6100 0000                  		bsr.w	SpeedToPos
000098EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000098F0 4E75                       		rts	
000098F2                            ; ===========================================================================
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            Map_obj28:
000098F2                            	include "_maps\obj28.asm"
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2 0000                       		dc.w byte_9472-Map_obj28
000098F4 0000                       		dc.w byte_9478-Map_obj28
000098F6 0000                       		dc.w byte_946C-Map_obj28
000098F8 01                         byte_946C:	dc.b 1
000098F9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000098FE 01                         byte_9472:	dc.b 1
000098FF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009904 01                         byte_9478:	dc.b 1
00009905 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000990A                            		even
0000990A                            		even
0000990A                            
0000990A                            Map_obj28a:
0000990A                            	include "_maps\obj28a.asm"
0000990A                            ; ---------------------------------------------------------------------------
0000990A                            ; Sprite mappings - animals
0000990A                            ; ---------------------------------------------------------------------------
0000990A 0000                       		dc.w byte_948A-Map_obj28a
0000990C 0000                       		dc.w byte_9490-Map_obj28a
0000990E 0000                       		dc.w byte_9484-Map_obj28a
00009910 01                         byte_9484:	dc.b 1
00009911 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009916 01                         byte_948A:	dc.b 1
00009917 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000991C 01                         byte_9490:	dc.b 1
0000991D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009922                            		even
00009922                            		even
00009922                            
00009922                            Map_obj28b:
00009922                            	include "_maps\obj28b.asm"
00009922                            ; ---------------------------------------------------------------------------
00009922                            ; Sprite mappings - animals
00009922                            ; ---------------------------------------------------------------------------
00009922 0000                       		dc.w byte_94A2-Map_obj28b
00009924 0000                       		dc.w byte_94A8-Map_obj28b
00009926 0000                       		dc.w byte_949C-Map_obj28b
00009928 01                         byte_949C:	dc.b 1
00009929 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000992E 01                         byte_94A2:	dc.b 1
0000992F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009934 01                         byte_94A8:	dc.b 1
00009935 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000993A                            		even
0000993A                            		even
0000993A                            
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            Map_obj29:
0000993A                            	include "_maps\obj29.asm"
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000993E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009942 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009946 0000                       		dc.w byte_94E5-Map_obj29
00009948 01                         byte_94BC:	dc.b 1
00009949 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000994E 01                         byte_94C2:	dc.b 1
0000994F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009954 01                         byte_94C8:	dc.b 1
00009955 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000995A 01                         byte_94CE:	dc.b 1
0000995B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009960 01                         byte_94D4:	dc.b 1
00009961 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009966 02                         byte_94DA:	dc.b 2
00009967 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000996C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009971 02                         byte_94E5:	dc.b 2
00009972 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009977 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000997C                            		even
0000997C                            		even
0000997C                            
0000997C                            ; ===========================================================================
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            
0000997C                            Obj1F:					; XREF: Obj_Index
0000997C 7000                       		moveq	#0,d0
0000997E 1028 0024                  		move.b	$24(a0),d0
00009982 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009986 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000998A                            ; ===========================================================================
0000998A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000998C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000998E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009990 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009992 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009994                            ; ===========================================================================
00009994                            
00009994                            Obj1F_Main:				; XREF: Obj1F_Index
00009994 117C 0010 0016             		move.b	#$10,$16(a0)
0000999A 117C 0008 0017             		move.b	#8,$17(a0)
000099A0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000099A8 317C 0400 0002             		move.w	#$400,2(a0)
000099AE 117C 0004 0001             		move.b	#4,1(a0)
000099B4 117C 0003 0018             		move.b	#3,$18(a0)
000099BA 117C 0006 0020             		move.b	#6,$20(a0)
000099C0 117C 0015 0019             		move.b	#$15,$19(a0)
000099C6 6100 0000                  		bsr.w	ObjectFall
000099CA 4EB9 0000 0000             		jsr	ObjHitFloor
000099D0 4A41                       		tst.w	d1
000099D2 6A00                       		bpl.s	locret_955A
000099D4 D368 000C                  		add.w	d1,$C(a0)
000099D8 1143 0026                  		move.b	d3,$26(a0)
000099DC 317C 0000 0012             		move.w	#0,$12(a0)
000099E2 5428 0024                  		addq.b	#2,$24(a0)
000099E6                            
000099E6                            locret_955A:
000099E6 4E75                       		rts	
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            Obj1F_Action:				; XREF: Obj1F_Index
000099E8 7000                       		moveq	#0,d0
000099EA 1028 0025                  		move.b	$25(a0),d0
000099EE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000099F2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000099F6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000099FC 6100 0000                  		bsr.w	AnimateSprite
00009A00 6000 0000                  		bra.w	MarkObjGone
00009A04                            ; ===========================================================================
00009A04 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A06 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A08                            ; ===========================================================================
00009A08                            
00009A08                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A08 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A0C 6A00                       		bpl.s	locret_95B6
00009A0E 4A28 0001                  		tst.b	1(a0)
00009A12 6A00                       		bpl.s	Obj1F_Move
00009A14 0868 0001 0032             		bchg	#1,$32(a0)
00009A1A 6600                       		bne.s	Obj1F_MakeFire
00009A1C                            
00009A1C                            Obj1F_Move:
00009A1C 5428 0025                  		addq.b	#2,$25(a0)
00009A20 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009A26 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009A2C 6100 0000                  		bsr.w	Obj1F_SetAni
00009A30 5600                       		addq.b	#3,d0
00009A32 1140 001C                  		move.b	d0,$1C(a0)
00009A36 0868 0000 0022             		bchg	#0,$22(a0)
00009A3C 6600                       		bne.s	locret_95B6
00009A3E 4468 0010                  		neg.w	$10(a0)		; change direction
00009A42                            
00009A42                            locret_95B6:
00009A42 4E75                       		rts	
00009A44                            ; ===========================================================================
00009A44                            
00009A44                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009A44 317C 003B 0030             		move.w	#$3B,$30(a0)
00009A4A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009A50 6100 0000                  		bsr.w	SingleObjLoad
00009A54 6600                       		bne.s	Obj1F_MakeFire2
00009A56 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009A5A 137C 0006 0024             		move.b	#6,$24(a1)
00009A60 3368 0008 0008             		move.w	8(a0),8(a1)
00009A66 0469 0010 0008             		subi.w	#$10,8(a1)
00009A6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A72 337C FF00 0010             		move.w	#-$100,$10(a1)
00009A78                            
00009A78                            Obj1F_MakeFire2:
00009A78 6100 0000                  		bsr.w	SingleObjLoad
00009A7C 6600                       		bne.s	locret_9618
00009A7E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009A82 137C 0006 0024             		move.b	#6,$24(a1)
00009A88 3368 0008 0008             		move.w	8(a0),8(a1)
00009A8E 0669 0010 0008             		addi.w	#$10,8(a1)
00009A94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A9A 337C 0100 0010             		move.w	#$100,$10(a1)
00009AA0                            
00009AA0                            locret_9618:
00009AA0 4E75                       		rts	
00009AA2                            ; ===========================================================================
00009AA2                            
00009AA2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009AA2 5368 0030                  		subq.w	#1,$30(a0)
00009AA6 6B00                       		bmi.s	loc_966E
00009AA8 6100 0000                  		bsr.w	SpeedToPos
00009AAC 0868 0000 0032             		bchg	#0,$32(a0)
00009AB2 6600                       		bne.s	loc_9654
00009AB4 3628 0008                  		move.w	8(a0),d3
00009AB8 0643 0010                  		addi.w	#$10,d3
00009ABC 0828 0000 0022             		btst	#0,$22(a0)
00009AC2 6700                       		beq.s	loc_9640
00009AC4 0443 0020                  		subi.w	#$20,d3
00009AC8                            
00009AC8                            loc_9640:
00009AC8 4EB9 0000 0000             		jsr	ObjHitFloor2
00009ACE 0C41 FFF8                  		cmpi.w	#-8,d1
00009AD2 6D00                       		blt.s	loc_966E
00009AD4 0C41 000C                  		cmpi.w	#$C,d1
00009AD8 6C00                       		bge.s	loc_966E
00009ADA 4E75                       		rts	
00009ADC                            ; ===========================================================================
00009ADC                            
00009ADC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009ADC 4EB9 0000 0000             		jsr	ObjHitFloor
00009AE2 D368 000C                  		add.w	d1,$C(a0)
00009AE6 1143 0026                  		move.b	d3,$26(a0)
00009AEA 6100 0000                  		bsr.w	Obj1F_SetAni
00009AEE 5600                       		addq.b	#3,d0
00009AF0 1140 001C                  		move.b	d0,$1C(a0)
00009AF4 4E75                       		rts	
00009AF6                            ; ===========================================================================
00009AF6                            
00009AF6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009AF6 5528 0025                  		subq.b	#2,$25(a0)
00009AFA 317C 003B 0030             		move.w	#59,$30(a0)
00009B00 317C 0000 0010             		move.w	#0,$10(a0)
00009B06 6100 0000                  		bsr.w	Obj1F_SetAni
00009B0A 1140 001C                  		move.b	d0,$1C(a0)
00009B0E 4E75                       		rts	
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            
00009B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B10                            
00009B10                            
00009B10                            Obj1F_SetAni:				; XREF: loc_966E
00009B10 7000                       		moveq	#0,d0
00009B12 1628 0026                  		move.b	$26(a0),d3
00009B16 6B00                       		bmi.s	loc_96A4
00009B18 0C03 0006                  		cmpi.b	#6,d3
00009B1C 6500                       		bcs.s	locret_96A2
00009B1E 7001                       		moveq	#1,d0
00009B20 0828 0000 0022             		btst	#0,$22(a0)
00009B26 6600                       		bne.s	locret_96A2
00009B28 7002                       		moveq	#2,d0
00009B2A                            
00009B2A                            locret_96A2:
00009B2A 4E75                       		rts	
00009B2C                            ; ===========================================================================
00009B2C                            
00009B2C                            loc_96A4:				; XREF: Obj1F_SetAni
00009B2C 0C03 00FA                  		cmpi.b	#-6,d3
00009B30 6200                       		bhi.s	locret_96B6
00009B32 7002                       		moveq	#2,d0
00009B34 0828 0000 0022             		btst	#0,$22(a0)
00009B3A 6600                       		bne.s	locret_96B6
00009B3C 7001                       		moveq	#1,d0
00009B3E                            
00009B3E                            locret_96B6:
00009B3E 4E75                       		rts	
00009B40                            ; End of function Obj1F_SetAni
00009B40                            
00009B40                            ; ===========================================================================
00009B40                            
00009B40                            Obj1F_Delete:				; XREF: Obj1F_Index
00009B40 6100 0000                  		bsr.w	DeleteObject
00009B44 4E75                       		rts	
00009B46                            ; ===========================================================================
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            ; Sub-object - missile that the	Crabmeat throws
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            
00009B46                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009B46 5428 0024                  		addq.b	#2,$24(a0)
00009B4A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B52 317C 0400 0002             		move.w	#$400,2(a0)
00009B58 117C 0004 0001             		move.b	#4,1(a0)
00009B5E 117C 0003 0018             		move.b	#3,$18(a0)
00009B64 117C 0087 0020             		move.b	#$87,$20(a0)
00009B6A 117C 0008 0019             		move.b	#8,$19(a0)
00009B70 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B76 117C 0007 001C             		move.b	#7,$1C(a0)
00009B7C                            
00009B7C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009B7C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009B82 6100 0000                  		bsr.w	AnimateSprite
00009B86 6100 0000                  		bsr.w	ObjectFall
00009B8A 6100 0000                  		bsr.w	DisplaySprite
00009B8E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009B92 0640 00E0                  		addi.w	#$E0,d0
00009B96 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009B9A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009B9C 4E75                       		rts	
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            Obj1F_Delete2:
00009B9E 6000 0000                  		bra.w	DeleteObject
00009BA2                            ; ===========================================================================
00009BA2                            Ani_obj1F:
00009BA2                            	include "_anim\obj1F.asm"
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2                            ; Animation script - Crabmeat enemy
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009BA8 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009BAE 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009BB2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009BB6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009BBA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009BBE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009BC4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009BCA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009BD0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009BD4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009BD8                            		even
00009BD8                            		even
00009BD8                            
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            Map_obj1F:
00009BD8                            	include "_maps\obj1F.asm"
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009BDC 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009BE0 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009BE4 0000                       		dc.w byte_97D7-Map_obj1F
00009BE6 04                         byte_975E:	dc.b 4
00009BE7 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009BEC F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009BF1 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009BF6 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009BFB 04                         byte_9773:	dc.b 4
00009BFC F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009C01 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00009C06 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00009C0B 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009C10 04                         byte_9788:	dc.b 4
00009C11 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00009C16 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00009C1B FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009C20 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009C25 04                         byte_979D:	dc.b 4
00009C26 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00009C2B EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009C30 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009C35 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00009C3A 06                         byte_97B2:	dc.b 6
00009C3B F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009C40 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00009C45 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00009C4A F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00009C4F 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00009C54 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00009C59 01                         byte_97D1:	dc.b 1
00009C5A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
00009C5F 01                         byte_97D7:	dc.b 1
00009C60 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00009C66 00                         		even
00009C66 00                         		even
00009C66                            
00009C66                            ; ===========================================================================
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            
00009C66                            Obj22:					; XREF: Obj_Index
00009C66 7000                       		moveq	#0,d0
00009C68 1028 0024                  		move.b	$24(a0),d0
00009C6C 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009C70 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009C74                            ; ===========================================================================
00009C74 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009C76 0000                       		dc.w Obj22_Action-Obj22_Index
00009C78 0000                       		dc.w Obj22_Delete-Obj22_Index
00009C7A                            ; ===========================================================================
00009C7A                            
00009C7A                            Obj22_Main:				; XREF: Obj22_Index
00009C7A 5428 0024                  		addq.b	#2,$24(a0)
00009C7E 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009C86 317C 0444 0002             		move.w	#$444,2(a0)
00009C8C 117C 0004 0001             		move.b	#4,1(a0)
00009C92 117C 0003 0018             		move.b	#3,$18(a0)
00009C98 117C 0008 0020             		move.b	#8,$20(a0)
00009C9E 117C 0018 0019             		move.b	#$18,$19(a0)
00009CA4                            
00009CA4                            Obj22_Action:				; XREF: Obj22_Index
00009CA4 7000                       		moveq	#0,d0
00009CA6 1028 0025                  		move.b	$25(a0),d0
00009CAA 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009CAE 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009CB2 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009CB8 6100 0000                  		bsr.w	AnimateSprite
00009CBC 6000 0000                  		bra.w	MarkObjGone
00009CC0                            ; ===========================================================================
00009CC0 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009CC2 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009CC4                            ; ===========================================================================
00009CC4                            
00009CC4                            Obj22_Move:				; XREF: Obj22_Index2
00009CC4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009CC8 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009CCA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009CD0 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009CD2 5428 0025                  		addq.b	#2,$25(a0)
00009CD6 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009CDC 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009CE2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009CE8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009CEE 6600                       		bne.s	locret_986C	; if not, branch
00009CF0 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009CF4                            
00009CF4                            locret_986C:
00009CF4 4E75                       		rts	
00009CF6                            ; ===========================================================================
00009CF6                            
00009CF6                            Obj22_Fire:				; XREF: Obj22_Move
00009CF6 6100 0000                  		bsr.w	SingleObjLoad
00009CFA 6600                       		bne.s	locret_98D0
00009CFC 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009D00 3368 0008 0008             		move.w	8(a0),8(a1)
00009D06 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D0C 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009D12 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009D18 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009D1E 303C 0018                  		move.w	#$18,d0
00009D22 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D28 6600                       		bne.s	loc_98AA	; if not, branch
00009D2A 4440                       		neg.w	d0
00009D2C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D30                            
00009D30                            loc_98AA:
00009D30 D169 0008                  		add.w	d0,8(a1)
00009D34 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D3A 337C 000E 0032             		move.w	#$E,$32(a1)
00009D40 2348 003C                  		move.l	a0,$3C(a1)
00009D44 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009D4A 317C 003B 0032             		move.w	#$3B,$32(a0)
00009D50 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009D56                            
00009D56                            locret_98D0:
00009D56 4E75                       		rts	
00009D58                            ; ===========================================================================
00009D58                            
00009D58                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009D58 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D5C 6B00                       		bmi.s	Obj22_ChgDir
00009D5E 6100 0000                  		bsr.w	SpeedToPos
00009D62 4A28 0034                  		tst.b	$34(a0)
00009D66 6600                       		bne.s	locret_992A
00009D68 3038 D008                  		move.w	($FFFFD008).w,d0
00009D6C 9068 0008                  		sub.w	8(a0),d0
00009D70 6A00                       		bpl.s	Obj22_SetNrSonic
00009D72 4440                       		neg.w	d0
00009D74                            
00009D74                            Obj22_SetNrSonic:
00009D74 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009D78 6400                       		bcc.s	locret_992A	; if not, branch
00009D7A 4A28 0001                  		tst.b	1(a0)
00009D7E 6A00                       		bpl.s	locret_992A
00009D80 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009D86 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009D8C 6000                       		bra.s	Obj22_Stop
00009D8E                            ; ===========================================================================
00009D8E                            
00009D8E                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009D8E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009D94 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009D9A 317C 003B 0032             		move.w	#59,$32(a0)
00009DA0                            
00009DA0                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009DA0 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009DA4 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009DAA 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009DB0                            
00009DB0                            locret_992A:
00009DB0 4E75                       		rts	
00009DB2                            ; ===========================================================================
00009DB2                            
00009DB2                            Obj22_Delete:				; XREF: Obj22_Index
00009DB2 6100 0000                  		bsr.w	DeleteObject
00009DB6 4E75                       		rts	
00009DB8                            ; ===========================================================================
00009DB8                            ; ---------------------------------------------------------------------------
00009DB8                            ; Object 23 - missile that Buzz	Bomber throws
00009DB8                            ; ---------------------------------------------------------------------------
00009DB8                            
00009DB8                            Obj23:					; XREF: Obj_Index
00009DB8 7000                       		moveq	#0,d0
00009DBA 1028 0024                  		move.b	$24(a0),d0
00009DBE 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009DC2 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009DC6                            ; ===========================================================================
00009DC6 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009DC8 0000                       		dc.w Obj23_Animate-Obj23_Index
00009DCA 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009DCC 0000                       		dc.w Obj23_Delete-Obj23_Index
00009DCE 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009DD0                            ; ===========================================================================
00009DD0                            
00009DD0                            Obj23_Main:				; XREF: Obj23_Index
00009DD0 5368 0032                  		subq.w	#1,$32(a0)
00009DD4 6A00                       		bpl.s	Obj23_ChkCancel
00009DD6 5428 0024                  		addq.b	#2,$24(a0)
00009DDA 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009DE2 317C 2444 0002             		move.w	#$2444,2(a0)
00009DE8 117C 0004 0001             		move.b	#4,1(a0)
00009DEE 117C 0003 0018             		move.b	#3,$18(a0)
00009DF4 117C 0008 0019             		move.b	#8,$19(a0)
00009DFA 0228 0003 0022             		andi.b	#3,$22(a0)
00009E00 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009E04 6700                       		beq.s	Obj23_Animate	; if not, branch
00009E06 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009E0C 117C 0087 0020             		move.b	#$87,$20(a0)
00009E12 117C 0001 001C             		move.b	#1,$1C(a0)
00009E18 6000                       		bra.s	Obj23_Animate2
00009E1A                            ; ===========================================================================
00009E1A                            
00009E1A                            Obj23_Animate:				; XREF: Obj23_Index
00009E1A 6100                       		bsr.s	Obj23_ChkCancel
00009E1C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E22 6100 0000                  		bsr.w	AnimateSprite
00009E26 6000 0000                  		bra.w	DisplaySprite
00009E2A                            ; ---------------------------------------------------------------------------
00009E2A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E2A                            ; destroyed, and if it has, then cancel	the missile
00009E2A                            ; ---------------------------------------------------------------------------
00009E2A                            
00009E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E2A                            
00009E2A                            
00009E2A                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E2A 2268 003C                  		movea.l	$3C(a0),a1
00009E2E 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E32 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E34 4E75                       		rts	
00009E36                            ; End of function Obj23_ChkCancel
00009E36                            
00009E36                            ; ===========================================================================
00009E36                            
00009E36                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E36 0828 0007 0022             		btst	#7,$22(a0)
00009E3C 6600                       		bne.s	Obj23_Explode
00009E3E 117C 0087 0020             		move.b	#$87,$20(a0)
00009E44 117C 0001 001C             		move.b	#1,$1C(a0)
00009E4A 6100 0000                  		bsr.w	SpeedToPos
00009E4E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E54 6100 0000                  		bsr.w	AnimateSprite
00009E58 6100 0000                  		bsr.w	DisplaySprite
00009E5C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E60 0640 00E0                  		addi.w	#$E0,d0
00009E64 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E68 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009E6A 4E75                       		rts	
00009E6C                            ; ===========================================================================
00009E6C                            
00009E6C                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009E6C 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009E70 117C 0000 0024             		move.b	#0,$24(a0)
00009E76 6000 F2BA                  		bra.w	Obj24
00009E7A                            ; ===========================================================================
00009E7A                            
00009E7A                            Obj23_Delete:				; XREF: Obj23_Index
00009E7A 6100 0000                  		bsr.w	DeleteObject
00009E7E 4E75                       		rts	
00009E80                            ; ===========================================================================
00009E80                            
00009E80                            Obj23_FromNewt:				; XREF: Obj23_Index
00009E80 4A28 0001                  		tst.b	1(a0)
00009E84 6AF4                       		bpl.s	Obj23_Delete
00009E86 6100 0000                  		bsr.w	SpeedToPos
00009E8A                            
00009E8A                            Obj23_Animate2:				; XREF: Obj23_Main
00009E8A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E90 6100 0000                  		bsr.w	AnimateSprite
00009E94 6100 0000                  		bsr.w	DisplaySprite
00009E98 4E75                       		rts	
00009E9A                            ; ===========================================================================
00009E9A                            Ani_obj22:
00009E9A                            	include "_anim\obj22.asm"
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A                            ; Animation script - Buzz Bomber enemy
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A 0000                       		dc.w byte_9A1E-Ani_obj22
00009E9C 0000                       		dc.w byte_9A22-Ani_obj22
00009E9E 0000                       		dc.w byte_9A26-Ani_obj22
00009EA0 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009EA4 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009EA8 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009EAC                            		even
00009EAC                            		even
00009EAC                            
00009EAC                            Ani_obj23:
00009EAC                            	include "_anim\obj23.asm"
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC                            ; Animation script - missile that Buzz Bomber throws
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC 0000                       		dc.w byte_9A2E-Ani_obj23
00009EAE 0000                       		dc.w byte_9A32-Ani_obj23
00009EB0 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009EB4 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009EB8                            		even
00009EB8                            		even
00009EB8                            
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8                            ; Sprite mappings - Buzz Bomber	enemy
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8                            Map_obj22:
00009EB8                            	include "_maps\obj22.asm"
00009EB8                            Map_e97a:
00009EB8 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009EBA 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009EBC 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009EBE 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009EC0 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009EC2 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009EC4 06                         Map_e97a_C: 	dc.b $6
00009EC5 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009ECA F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009ECF 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009ED4 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009ED9 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EDE F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009EE3 06                         Map_e97a_2B: 	dc.b $6
00009EE4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EE9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EEE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EF3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EF8 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009EFD F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F02 07                         Map_e97a_4A: 	dc.b $7
00009F03 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009F08 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F0D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F12 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F17 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F1C F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F21 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F26 07                         Map_e97a_6E: 	dc.b $7
00009F27 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F2C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F31 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F36 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F3B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F40 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F45 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F4A 06                         Map_e97a_92: 	dc.b $6
00009F4B F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F50 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F55 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F5A 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F5F F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F64 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F69 04                         Map_e97a_B1: 	dc.b $4
00009F6A F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F6F 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F74 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F79 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F7E                            	even
00009F7E                            	even
00009F7E                            
00009F7E                            ; ---------------------------------------------------------------------------
00009F7E                            ; Sprite mappings - missile that Buzz Bomber throws
00009F7E                            ; ---------------------------------------------------------------------------
00009F7E                            Map_obj23:
00009F7E                            	include "_maps\obj23.asm"
00009F7E                            ; ---------------------------------------------------------------------------
00009F7E                            ; Sprite mappings - missile that Buzz Bomber throws
00009F7E                            ; ---------------------------------------------------------------------------
00009F7E 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009F82 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009F86 01                         byte_9B0E:	dc.b 1
00009F87 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009F8C 01                         byte_9B14:	dc.b 1
00009F8D F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009F92 01                         byte_9B1A:	dc.b 1
00009F93 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009F98 01                         byte_9B20:	dc.b 1
00009F99 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009F9E                            		even
00009F9E                            		even
00009F9E                            
00009F9E                            ; ===========================================================================
00009F9E                            ; ---------------------------------------------------------------------------
00009F9E                            ; Object 25 - rings
00009F9E                            ; ---------------------------------------------------------------------------
00009F9E                            
00009F9E                            Obj25:					; XREF: Obj_Index
00009F9E 7000                       		moveq	#0,d0
00009FA0 1028 0024                  		move.b	$24(a0),d0
00009FA4 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009FA8 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009FAC                            ; ===========================================================================
00009FAC 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009FAE 0000                       		dc.w Obj25_Animate-Obj25_Index
00009FB0 0000                       		dc.w Obj25_Collect-Obj25_Index
00009FB2 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009FB4 0000                       		dc.w Obj25_Delete-Obj25_Index
00009FB6                            ; ---------------------------------------------------------------------------
00009FB6                            ; Distances between rings (format: horizontal, vertical)
00009FB6                            ; ---------------------------------------------------------------------------
00009FB6 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009FB8 1800                       		dc.b $18, 0		; horizontal normal
00009FBA 2000                       		dc.b $20, 0		; horizontal wide
00009FBC 0010                       		dc.b 0,	$10		; vertical tight
00009FBE 0018                       		dc.b 0,	$18		; vertical normal
00009FC0 0020                       		dc.b 0,	$20		; vertical wide
00009FC2 1010                       		dc.b $10, $10		; diagonal
00009FC4 1818                       		dc.b $18, $18
00009FC6 2020                       		dc.b $20, $20
00009FC8 F010                       		dc.b $F0, $10
00009FCA E818                       		dc.b $E8, $18
00009FCC E020                       		dc.b $E0, $20
00009FCE 1008                       		dc.b $10, 8
00009FD0 1810                       		dc.b $18, $10
00009FD2 F008                       		dc.b $F0, 8
00009FD4 E810                       		dc.b $E8, $10
00009FD6                            ; ===========================================================================
00009FD6                            
00009FD6                            Obj25_Main:				; XREF: Obj25_Index
00009FD6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009FDA 7000                       		moveq	#0,d0
00009FDC 1028 0023                  		move.b	$23(a0),d0
00009FE0 45F2 0002                  		lea	2(a2,d0.w),a2
00009FE4 1812                       		move.b	(a2),d4
00009FE6 1228 0028                  		move.b	$28(a0),d1
00009FEA 1001                       		move.b	d1,d0
00009FEC 0241 0007                  		andi.w	#7,d1
00009FF0 0C41 0007                  		cmpi.w	#7,d1
00009FF4 6600                       		bne.s	loc_9B80
00009FF6 7206                       		moveq	#6,d1
00009FF8                            
00009FF8                            loc_9B80:
00009FF8 4841                       		swap	d1
00009FFA 323C 0000                  		move.w	#0,d1
00009FFE E808                       		lsr.b	#4,d0
0000A000 D040                       		add.w	d0,d0
0000A002 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A006 4885                       		ext.w	d5
0000A008 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A00C 4886                       		ext.w	d6
0000A00E 2248                       		movea.l	a0,a1
0000A010 3428 0008                  		move.w	8(a0),d2
0000A014 3628 000C                  		move.w	$C(a0),d3
0000A018 E20C                       		lsr.b	#1,d4
0000A01A 6500                       		bcs.s	loc_9C02
0000A01C 0892 0007                  		bclr	#7,(a2)
0000A020 6000                       		bra.s	loc_9BBA
0000A022                            ; ===========================================================================
0000A022                            
0000A022                            Obj25_MakeRings:
0000A022 4841                       		swap	d1
0000A024 E20C                       		lsr.b	#1,d4
0000A026 6500                       		bcs.s	loc_9C02
0000A028 0892 0007                  		bclr	#7,(a2)
0000A02C 6100 0000                  		bsr.w	SingleObjLoad
0000A030 6600                       		bne.s	loc_9C0E
0000A032                            
0000A032                            loc_9BBA:				; XREF: Obj25_Main
0000A032 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A036 5429 0024                  		addq.b	#2,$24(a1)
0000A03A 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A03E 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A044 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A048 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A050 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A056 137C 0004 0001             		move.b	#4,1(a1)
0000A05C 137C 0002 0018             		move.b	#2,$18(a1)
0000A062 137C 0047 0020             		move.b	#$47,$20(a1)
0000A068 137C 0008 0019             		move.b	#8,$19(a1)
0000A06E 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A074 1341 0034                  		move.b	d1,$34(a1)
0000A078                            
0000A078                            loc_9C02:
0000A078 5241                       		addq.w	#1,d1
0000A07A D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A07C D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A07E 4841                       		swap	d1
0000A080 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A084                            
0000A084                            loc_9C0E:
0000A084 0812 0000                  		btst	#0,(a2)
0000A088 6600 0000                  		bne.w	DeleteObject
0000A08C                            
0000A08C                            Obj25_Animate:				; XREF: Obj25_Index
0000A08C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A092 6100 0000                  		bsr.w	DisplaySprite
0000A096 3028 0032                  		move.w	$32(a0),d0
0000A09A 0240 FF80                  		andi.w	#$FF80,d0
0000A09E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A0A2 0441 0080                  		subi.w	#$80,d1
0000A0A6 0241 FF80                  		andi.w	#$FF80,d1
0000A0AA 9041                       		sub.w	d1,d0
0000A0AC 0C40 0280                  		cmpi.w	#$280,d0
0000A0B0 6200                       		bhi.s	Obj25_Delete
0000A0B2 4E75                       		rts	
0000A0B4                            ; ===========================================================================
0000A0B4                            
0000A0B4                            Obj25_Collect:				; XREF: Obj25_Index
0000A0B4 5428 0024                  		addq.b	#2,$24(a0)
0000A0B8 117C 0000 0020             		move.b	#0,$20(a0)
0000A0BE 117C 0001 0018             		move.b	#1,$18(a0)
0000A0C4 6100 0000                  		bsr.w	CollectRing
0000A0C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A0CC 7000                       		moveq	#0,d0
0000A0CE 1028 0023                  		move.b	$23(a0),d0
0000A0D2 1228 0034                  		move.b	$34(a0),d1
0000A0D6 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A0DA                            
0000A0DA                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A0DA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A0E0 6100 0000                  		bsr.w	AnimateSprite
0000A0E4 6000 0000                  		bra.w	DisplaySprite
0000A0E8                            ; ===========================================================================
0000A0E8                            
0000A0E8                            Obj25_Delete:				; XREF: Obj25_Index
0000A0E8 6000 0000                  		bra.w	DeleteObject
0000A0EC                            
0000A0EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0EC                            
0000A0EC                            
0000A0EC                            CollectRing:				; XREF: Obj25_Collect
0000A0EC 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A0F0 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A0F6 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A0FA 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A100 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A102 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A108 6700                       		beq.s	loc_9CA4
0000A10A 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A110 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A112 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A118 6600                       		bne.s	Obj25_PlaySnd
0000A11A                            
0000A11A                            loc_9CA4:
0000A11A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A11E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A122 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A126                            
0000A126                            Obj25_PlaySnd:
0000A126 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A12C                            ; End of function CollectRing
0000A12C                            
0000A12C                            ; ===========================================================================
0000A12C                            ; ---------------------------------------------------------------------------
0000A12C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A12C                            ; ---------------------------------------------------------------------------
0000A12C                            
0000A12C                            Obj37:					; XREF: Obj_Index
0000A12C 7000                       		moveq	#0,d0
0000A12E 1028 0024                  		move.b	$24(a0),d0
0000A132 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A136 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A13A                            ; ===========================================================================
0000A13A 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A13C 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A13E 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A140 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A142 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A144                            ; ===========================================================================
0000A144                            
0000A144                            Obj37_CountRings:			; XREF: Obj37_Index
0000A144 2248                       		movea.l	a0,a1
0000A146 7A00                       		moveq	#0,d5
0000A148 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A14C 7020                       		moveq	#32,d0
0000A14E BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A150 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A152 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A154                            
0000A154                            loc_9CDE:
0000A154 5345                       		subq.w	#1,d5
0000A156 383C 0288                  		move.w	#$288,d4
0000A15A 6000                       		bra.s	Obj37_MakeRings
0000A15C                            ; ===========================================================================
0000A15C                            
0000A15C                            Obj37_Loop:
0000A15C 6100 0000                  		bsr.w	SingleObjLoad
0000A160 6600 0000                  		bne.w	Obj37_ResetCounter
0000A164                            
0000A164                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A164 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A168 5429 0024                  		addq.b	#2,$24(a1)
0000A16C 137C 0008 0016             		move.b	#8,$16(a1)
0000A172 137C 0008 0017             		move.b	#8,$17(a1)
0000A178 3368 0008 0008             		move.w	8(a0),8(a1)
0000A17E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A184 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A18C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A192 137C 0004 0001             		move.b	#4,1(a1)
0000A198 137C 0003 0018             		move.b	#3,$18(a1)
0000A19E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A1A4 137C 0008 0019             		move.b	#8,$19(a1)
0000A1AA 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A1B0 4A44                       		tst.w	d4
0000A1B2 6B00                       		bmi.s	loc_9D62
0000A1B4 3004                       		move.w	d4,d0
0000A1B6 6100 8A6A                  		bsr.w	CalcSine
0000A1BA 3404                       		move.w	d4,d2
0000A1BC E04A                       		lsr.w	#8,d2
0000A1BE E560                       		asl.w	d2,d0
0000A1C0 E561                       		asl.w	d2,d1
0000A1C2 3400                       		move.w	d0,d2
0000A1C4 3601                       		move.w	d1,d3
0000A1C6 0604 0010                  		addi.b	#$10,d4
0000A1CA 6400                       		bcc.s	loc_9D62
0000A1CC 0444 0080                  		subi.w	#$80,d4
0000A1D0 6400                       		bcc.s	loc_9D62
0000A1D2 383C 0288                  		move.w	#$288,d4
0000A1D6                            
0000A1D6                            loc_9D62:
0000A1D6 3342 0010                  		move.w	d2,$10(a1)
0000A1DA 3343 0012                  		move.w	d3,$12(a1)
0000A1DE 4442                       		neg.w	d2
0000A1E0 4444                       		neg.w	d4
0000A1E2 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A1E6                            
0000A1E6                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A1E6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A1EC 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A1F2 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A1F8 303C 00C6                  		move.w	#$C6,d0
0000A1FC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A202                            
0000A202                            Obj37_Bounce:				; XREF: Obj37_Index
0000A202 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A208 6100 0000                  		bsr.w	SpeedToPos
0000A20C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A212 6B00                       		bmi.s	Obj37_ChkDel
0000A214 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A218 D007                       		add.b	d7,d0
0000A21A 0200 0003                  		andi.b	#3,d0
0000A21E 6600                       		bne.s	Obj37_ChkDel
0000A220 4EB9 0000 0000             		jsr	ObjHitFloor
0000A226 4A41                       		tst.w	d1
0000A228 6A00                       		bpl.s	Obj37_ChkDel
0000A22A D368 000C                  		add.w	d1,$C(a0)
0000A22E 3028 0012                  		move.w	$12(a0),d0
0000A232 E440                       		asr.w	#2,d0
0000A234 9168 0012                  		sub.w	d0,$12(a0)
0000A238 4468 0012                  		neg.w	$12(a0)
0000A23C                            
0000A23C                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A23C 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A240 6700                       		beq.s	Obj37_Delete
0000A242 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A246 0640 00E0                  		addi.w	#$E0,d0
0000A24A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A24E 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A250 6000 0000                  		bra.w	DisplaySprite
0000A254                            ; ===========================================================================
0000A254                            
0000A254                            Obj37_Collect:				; XREF: Obj37_Index
0000A254 5428 0024                  		addq.b	#2,$24(a0)
0000A258 117C 0000 0020             		move.b	#0,$20(a0)
0000A25E 117C 0001 0018             		move.b	#1,$18(a0)
0000A264 6100 FE86                  		bsr.w	CollectRing
0000A268                            
0000A268                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A268 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A26E 6100 0000                  		bsr.w	AnimateSprite
0000A272 6000 0000                  		bra.w	DisplaySprite
0000A276                            ; ===========================================================================
0000A276                            
0000A276                            Obj37_Delete:				; XREF: Obj37_Index
0000A276 6000 0000                  		bra.w	DeleteObject
0000A27A                            ; ===========================================================================
0000A27A                            ; ---------------------------------------------------------------------------
0000A27A                            ; Object 4B - giant ring for entry to special stage
0000A27A                            ; ---------------------------------------------------------------------------
0000A27A                            
0000A27A                            Obj4B:					; XREF: Obj_Index
0000A27A 7000                       		moveq	#0,d0
0000A27C 1028 0024                  		move.b	$24(a0),d0
0000A280 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A284 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A288                            ; ===========================================================================
0000A288 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A28A 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A28C 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A28E 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A290                            ; ===========================================================================
0000A290                            
0000A290                            Obj4B_Main:				; XREF: Obj4B_Index
0000A290 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A298 317C 2400 0002             		move.w	#$2400,2(a0)
0000A29E 0028 0004 0001             		ori.b	#4,1(a0)
0000A2A4 117C 0040 0019             		move.b	#$40,$19(a0)
0000A2AA 4A28 0001                  		tst.b	1(a0)
0000A2AE 6A00                       		bpl.s	Obj4B_Animate
0000A2B0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A2B6 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A2BA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A2C0 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A2C2 4E75                       		rts	
0000A2C4                            ; ===========================================================================
0000A2C4                            
0000A2C4                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A2C4 5428 0024                  		addq.b	#2,$24(a0)
0000A2C8 117C 0002 0018             		move.b	#2,$18(a0)
0000A2CE 117C 0052 0020             		move.b	#$52,$20(a0)
0000A2D4 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A2DA                            
0000A2DA                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A2DA 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A2E0 3028 0008                  		move.w	8(a0),d0
0000A2E4 0240 FF80                  		andi.w	#$FF80,d0
0000A2E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2EC 0441 0080                  		subi.w	#$80,d1
0000A2F0 0241 FF80                  		andi.w	#$FF80,d1
0000A2F4 9041                       		sub.w	d1,d0
0000A2F6 0C40 0280                  		cmpi.w	#$280,d0
0000A2FA 6200 0000                  		bhi.w	DeleteObject
0000A2FE 6000 0000                  		bra.w	DisplaySprite
0000A302                            ; ===========================================================================
0000A302                            
0000A302                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A302 5528 0024                  		subq.b	#2,$24(a0)
0000A306 117C 0000 0020             		move.b	#0,$20(a0)
0000A30C 6100 0000                  		bsr.w	SingleObjLoad
0000A310 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A314 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A318 3368 0008 0008             		move.w	8(a0),8(a1)
0000A31E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A324 2348 003C                  		move.l	a0,$3C(a1)
0000A328 3038 D008                  		move.w	($FFFFD008).w,d0
0000A32C B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A330 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A332 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A338                            
0000A338                            Obj4B_PlaySnd:
0000A338 303C 00C3                  		move.w	#$C3,d0
0000A33C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A342 6096                       		bra.s	Obj4B_Animate
0000A344                            ; ===========================================================================
0000A344                            
0000A344                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A344 6000 0000                  		bra.w	DeleteObject
0000A348                            ; ===========================================================================
0000A348                            ; ---------------------------------------------------------------------------
0000A348                            ; Object 7C - flash effect when	you collect the	giant ring
0000A348                            ; ---------------------------------------------------------------------------
0000A348                            
0000A348                            Obj7C:					; XREF: Obj_Index
0000A348 7000                       		moveq	#0,d0
0000A34A 1028 0024                  		move.b	$24(a0),d0
0000A34E 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A352 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A356                            ; ===========================================================================
0000A356 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A358 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A35A 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A35C                            ; ===========================================================================
0000A35C                            
0000A35C                            Obj7C_Main:				; XREF: Obj7C_Index
0000A35C 5428 0024                  		addq.b	#2,$24(a0)
0000A360 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A368 317C 2462 0002             		move.w	#$2462,2(a0)
0000A36E 0028 0004 0001             		ori.b	#4,1(a0)
0000A374 117C 0000 0018             		move.b	#0,$18(a0)
0000A37A 117C 0020 0019             		move.b	#$20,$19(a0)
0000A380 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A386                            
0000A386                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A386 6100                       		bsr.s	Obj7C_Collect
0000A388 3028 0008                  		move.w	8(a0),d0
0000A38C 0240 FF80                  		andi.w	#$FF80,d0
0000A390 3238 F700                  		move.w	($FFFFF700).w,d1
0000A394 0441 0080                  		subi.w	#$80,d1
0000A398 0241 FF80                  		andi.w	#$FF80,d1
0000A39C 9041                       		sub.w	d1,d0
0000A39E 0C40 0280                  		cmpi.w	#$280,d0
0000A3A2 6200 0000                  		bhi.w	DeleteObject
0000A3A6 6000 0000                  		bra.w	DisplaySprite
0000A3AA                            
0000A3AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A3AA                            
0000A3AA                            
0000A3AA                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A3AA 5328 001E                  		subq.b	#1,$1E(a0)
0000A3AE 6A00                       		bpl.s	locret_9F76
0000A3B0 117C 0001 001E             		move.b	#1,$1E(a0)
0000A3B6 5228 001A                  		addq.b	#1,$1A(a0)
0000A3BA 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A3C0 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A3C2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A3C8 6600                       		bne.s	locret_9F76	; if not, branch
0000A3CA 2268 003C                  		movea.l	$3C(a0),a1
0000A3CE 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A3D4 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A3DA 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A3E0 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A3E4 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A3E8                            
0000A3E8                            locret_9F76:
0000A3E8 4E75                       		rts	
0000A3EA                            ; ===========================================================================
0000A3EA                            
0000A3EA                            Obj7C_End:				; XREF: Obj7C_Collect
0000A3EA 5428 0024                  		addq.b	#2,$24(a0)
0000A3EE 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A3F4 588F                       		addq.l	#4,sp
0000A3F6 4E75                       		rts	
0000A3F8                            ; End of function Obj7C_Collect
0000A3F8                            
0000A3F8                            ; ===========================================================================
0000A3F8                            
0000A3F8                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A3F8 6000 0000                  		bra.w	DeleteObject
0000A3FC                            ; ===========================================================================
0000A3FC                            Ani_obj25:
0000A3FC                            	include "_anim\obj25.asm"
0000A3FC                            ; ---------------------------------------------------------------------------
0000A3FC                            ; Animation script - ring
0000A3FC                            ; ---------------------------------------------------------------------------
0000A3FC 0000                       		dc.w byte_9F8C-Ani_obj25
0000A3FE 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A404                            		even
0000A404                            		even
0000A404                            
0000A404                            ; ---------------------------------------------------------------------------
0000A404                            ; Sprite mappings - rings
0000A404                            ; ---------------------------------------------------------------------------
0000A404                            Map_obj25:
0000A404                            	include "_maps\obj25.asm"
0000A404                            ; ---------------------------------------------------------------------------
0000A404                            ; Sprite mappings - rings
0000A404                            ; ---------------------------------------------------------------------------
0000A404 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A408 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A40C 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A410 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A414 01                         byte_9FA2:	dc.b 1
0000A415 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A41A 01                         byte_9FA8:	dc.b 1
0000A41B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A420 01                         byte_9FAE:	dc.b 1
0000A421 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A426 01                         byte_9FB4:	dc.b 1
0000A427 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A42C 01                         byte_9FBA:	dc.b 1
0000A42D F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A432 01                         byte_9FC0:	dc.b 1
0000A433 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A438 01                         byte_9FC6:	dc.b 1
0000A439 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A43E 01                         byte_9FCC:	dc.b 1
0000A43F F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A444                            		even
0000A444                            		even
0000A444                            
0000A444                            ; ---------------------------------------------------------------------------
0000A444                            ; Sprite mappings - giant ring
0000A444                            ; ---------------------------------------------------------------------------
0000A444                            Map_obj4B:
0000A444                            	include "_maps\obj4B.asm"
0000A444                            ; ---------------------------------------------------------------------------
0000A444                            ; Sprite mappings - giant ring
0000A444                            ; ---------------------------------------------------------------------------
0000A444 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A448 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A44C 0A                         byte_9FDA:	dc.b $A
0000A44D E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A452 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A457 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A45C E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A461 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A466 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A46B 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A470 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A475 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A47A 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A47F 08                         byte_A00D:	dc.b 8
0000A480 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A485 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A48A E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A48F F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A494 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A499 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A49E 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A4A3 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A4A8 04                         byte_A036:	dc.b 4
0000A4A9 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A4AE E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A4B3 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A4B8 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A4BD 08                         byte_A04B:	dc.b 8
0000A4BE E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A4C3 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A4C8 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A4CD F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A4D2 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A4D7 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A4DC 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A4E1 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A4E6                            		even
0000A4E6                            		even
0000A4E6                            
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            Map_obj7C:
0000A4E6                            	include "_maps\obj7C.asm"
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A4EA 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A4EE 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A4F2 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A4F6 02                         byte_A084:	dc.b 2
0000A4F7 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A4FC 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A501 04                         byte_A08F:	dc.b 4
0000A502 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A507 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A50C 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A511 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A516 04                         byte_A0A4:	dc.b 4
0000A517 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A51C E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A521 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A526 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A52B 04                         byte_A0B9:	dc.b 4
0000A52C E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A531 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A536 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A53B 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A540 04                         byte_A0CE:	dc.b 4
0000A541 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A546 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A54B 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A550 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A555 04                         byte_A0E3:	dc.b 4
0000A556 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A55B E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A560 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A565 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A56A 02                         byte_A0F8:	dc.b 2
0000A56B E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A570 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A575 04                         byte_A103:	dc.b 4
0000A576 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A57B E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A580 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A585 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A58A                            		even
0000A58A                            		even
0000A58A                            
0000A58A                            ; ===========================================================================
0000A58A                            ; ---------------------------------------------------------------------------
0000A58A                            ; Object 26 - monitors
0000A58A                            ; ---------------------------------------------------------------------------
0000A58A                            
0000A58A                            Obj26:					; XREF: Obj_Index
0000A58A 7000                       		moveq	#0,d0
0000A58C 1028 0024                  		move.b	$24(a0),d0
0000A590 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A594 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A598                            ; ===========================================================================
0000A598 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A59A 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A59C 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A59E 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A5A0 0000                       		dc.w Obj26_Display-Obj26_Index
0000A5A2                            ; ===========================================================================
0000A5A2                            
0000A5A2                            Obj26_Main:				; XREF: Obj26_Index
0000A5A2 5428 0024                  		addq.b	#2,$24(a0)
0000A5A6 117C 000E 0016             		move.b	#$E,$16(a0)
0000A5AC 117C 000E 0017             		move.b	#$E,$17(a0)
0000A5B2 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A5BA 317C 0680 0002             		move.w	#$680,2(a0)
0000A5C0 117C 0004 0001             		move.b	#4,1(a0)
0000A5C6 117C 0003 0018             		move.b	#3,$18(a0)
0000A5CC 117C 000F 0019             		move.b	#$F,$19(a0)
0000A5D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5D6 7000                       		moveq	#0,d0
0000A5D8 1028 0023                  		move.b	$23(a0),d0
0000A5DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A5E2 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A5E8 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A5EA 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A5F0 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A5F6 4E75                       		rts	
0000A5F8                            ; ===========================================================================
0000A5F8                            
0000A5F8                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A5F8 117C 0046 0020             		move.b	#$46,$20(a0)
0000A5FE 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A604                            
0000A604                            Obj26_Solid:				; XREF: Obj26_Index
0000A604 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A608 6700                       		beq.s	loc_A1EC	; if not, branch
0000A60A 5500                       		subq.b	#2,d0
0000A60C 6600                       		bne.s	Obj26_Fall
0000A60E 7200                       		moveq	#0,d1
0000A610 1228 0019                  		move.b	$19(a0),d1
0000A614 0641 000B                  		addi.w	#$B,d1
0000A618 6100 D3F8                  		bsr.w	ExitPlatform
0000A61C 0829 0003 0022             		btst	#3,$22(a1)
0000A622 6600 0000                  		bne.w	loc_A1BC
0000A626 4228 0025                  		clr.b	$25(a0)
0000A62A 6000 0000                  		bra.w	Obj26_Animate
0000A62E                            ; ===========================================================================
0000A62E                            
0000A62E                            loc_A1BC:				; XREF: Obj26_Solid
0000A62E 363C 0010                  		move.w	#$10,d3
0000A632 3428 0008                  		move.w	8(a0),d2
0000A636 6100 D938                  		bsr.w	MvSonicOnPtfm
0000A63A 6000 0000                  		bra.w	Obj26_Animate
0000A63E                            ; ===========================================================================
0000A63E                            
0000A63E                            Obj26_Fall:				; XREF: Obj26_Solid
0000A63E 6100 0000                  		bsr.w	ObjectFall
0000A642 4EB9 0000 0000             		jsr	ObjHitFloor
0000A648 4A41                       		tst.w	d1
0000A64A 6A00 0000                  		bpl.w	Obj26_Animate
0000A64E D368 000C                  		add.w	d1,$C(a0)
0000A652 4268 0012                  		clr.w	$12(a0)
0000A656 4228 0025                  		clr.b	$25(a0)
0000A65A 6000 0000                  		bra.w	Obj26_Animate
0000A65E                            ; ===========================================================================
0000A65E                            
0000A65E                            loc_A1EC:				; XREF: Obj26_Solid
0000A65E 323C 001A                  		move.w	#$1A,d1
0000A662 343C 000F                  		move.w	#$F,d2
0000A666 6100 0000                  		bsr.w	Obj26_SolidSides
0000A66A 6700 0000                  		beq.w	loc_A25C
0000A66E 4A69 0012                  		tst.w	$12(a1)
0000A672 6B00                       		bmi.s	loc_A20A
0000A674 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A67A 6700                       		beq.s	loc_A25C	; if yes, branch
0000A67C                            
0000A67C                            loc_A20A:
0000A67C 4A41                       		tst.w	d1
0000A67E 6A00                       		bpl.s	loc_A220
0000A680 9769 000C                  		sub.w	d3,$C(a1)
0000A684 6100 D27A                  		bsr.w	loc_74AE
0000A688 117C 0002 0025             		move.b	#2,$25(a0)
0000A68E 6000 0000                  		bra.w	Obj26_Animate
0000A692                            ; ===========================================================================
0000A692                            
0000A692                            loc_A220:
0000A692 4A40                       		tst.w	d0
0000A694 6700 0000                  		beq.w	loc_A246
0000A698 6B00                       		bmi.s	loc_A230
0000A69A 4A69 0010                  		tst.w	$10(a1)
0000A69E 6B00                       		bmi.s	loc_A246
0000A6A0 6000                       		bra.s	loc_A236
0000A6A2                            ; ===========================================================================
0000A6A2                            
0000A6A2                            loc_A230:
0000A6A2 4A69 0010                  		tst.w	$10(a1)
0000A6A6 6A00                       		bpl.s	loc_A246
0000A6A8                            
0000A6A8                            loc_A236:
0000A6A8 9169 0008                  		sub.w	d0,8(a1)
0000A6AC 337C 0000 0014             		move.w	#0,$14(a1)
0000A6B2 337C 0000 0010             		move.w	#0,$10(a1)
0000A6B8                            
0000A6B8                            loc_A246:
0000A6B8 0829 0001 0022             		btst	#1,$22(a1)
0000A6BE 6600                       		bne.s	loc_A26A
0000A6C0 08E9 0005 0022             		bset	#5,$22(a1)
0000A6C6 08E8 0005 0022             		bset	#5,$22(a0)
0000A6CC 6000                       		bra.s	Obj26_Animate
0000A6CE                            ; ===========================================================================
0000A6CE                            
0000A6CE                            loc_A25C:
0000A6CE 0828 0005 0022             		btst	#5,$22(a0)
0000A6D4 6700                       		beq.s	Obj26_Animate
0000A6D6 337C 0001 001C             		move.w	#1,$1C(a1)
0000A6DC                            
0000A6DC                            loc_A26A:
0000A6DC 08A8 0005 0022             		bclr	#5,$22(a0)
0000A6E2 08A9 0005 0022             		bclr	#5,$22(a1)
0000A6E8                            
0000A6E8                            Obj26_Animate:				; XREF: Obj26_Index
0000A6E8 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A6EE 6100 0000                  		bsr.w	AnimateSprite
0000A6F2                            
0000A6F2                            Obj26_Display:				; XREF: Obj26_Index
0000A6F2 6100 0000                  		bsr.w	DisplaySprite
0000A6F6 3028 0008                  		move.w	8(a0),d0
0000A6FA 0240 FF80                  		andi.w	#$FF80,d0
0000A6FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A702 0441 0080                  		subi.w	#$80,d1
0000A706 0241 FF80                  		andi.w	#$FF80,d1
0000A70A 9041                       		sub.w	d1,d0
0000A70C 0C40 0280                  		cmpi.w	#$280,d0
0000A710 6200 0000                  		bhi.w	DeleteObject
0000A714 4E75                       		rts	
0000A716                            ; ===========================================================================
0000A716                            
0000A716                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A716 5428 0024                  		addq.b	#2,$24(a0)
0000A71A 117C 0000 0020             		move.b	#0,$20(a0)
0000A720 6100 0000                  		bsr.w	SingleObjLoad
0000A724 6600                       		bne.s	Obj26_Explode
0000A726 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A72A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A730 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A736 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A73C 7400                       		moveq	#0,d2	; GMZ
0000A73E 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A740                            
0000A740                            Obj26_Explode:
0000A740 6100 0000                  		bsr.w	SingleObjLoad
0000A744 6600                       		bne.s	Obj26_SetBroken
0000A746 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A74A 5429 0024                  		addq.b	#2,$24(a1)
0000A74E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A752 3368 0008 0008             		move.w	8(a0),8(a1)
0000A758 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A75E                            
0000A75E                            Obj26_NextExplosion:
0000A75E 5802                       		addq.b	#4,d2
0000A760 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A764                            
0000A764                            Obj26_SetBroken:
0000A764 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A768 7000                       		moveq	#0,d0
0000A76A 1028 0023                  		move.b	$23(a0),d0
0000A76E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A774 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A77A 6000 0000                  		bra.w	DisplaySprite
0000A77E                            ; ===========================================================================
0000A77E                            ; ---------------------------------------------------------------------------
0000A77E                            ; Object 2E - contents of monitors
0000A77E                            ; ---------------------------------------------------------------------------
0000A77E                            
0000A77E                            Obj2E:					; XREF: Obj_Index
0000A77E 7000                       		moveq	#0,d0
0000A780 1028 0024                  		move.b	$24(a0),d0
0000A784 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A788 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A78C 6000 0000                  		bra.w	DisplaySprite
0000A790                            ; ===========================================================================
0000A790 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A792 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A794 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A796                            ; ===========================================================================
0000A796                            
0000A796                            Obj2E_Main:				; XREF: Obj2E_Index
0000A796 5428 0024                  		addq.b	#2,$24(a0)
0000A79A 317C 0680 0002             		move.w	#$680,2(a0)
0000A7A0 117C 0024 0001             		move.b	#$24,1(a0)
0000A7A6 117C 0003 0018             		move.b	#3,$18(a0)
0000A7AC 117C 0008 0019             		move.b	#8,$19(a0)
0000A7B2 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A7B8 7000                       		moveq	#0,d0
0000A7BA 1028 001C                  		move.b	$1C(a0),d0
0000A7BE 5400                       		addq.b	#2,d0
0000A7C0 1140 001A                  		move.b	d0,$1A(a0)
0000A7C4 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A7CA D000                       		add.b	d0,d0
0000A7CC D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A7D0 5249                       		addq.w	#1,a1
0000A7D2 2149 0004                  		move.l	a1,4(a0)
0000A7D6                            
0000A7D6                            Obj2E_Move:				; XREF: Obj2E_Index
0000A7D6 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7DA 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A7DE 6100 0000                  		bsr.w	SpeedToPos
0000A7E2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7E8 4E75                       		rts	
0000A7EA                            ; ===========================================================================
0000A7EA                            
0000A7EA                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A7EA 5428 0024                  		addq.b	#2,$24(a0)
0000A7EE 317C 001D 001E             		move.w	#29,$1E(a0)
0000A7F4 1028 001C                  		move.b	$1C(a0),d0
0000A7F8 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A7FC 6600                       		bne.s	Obj2E_ChkSonic
0000A7FE 4E75                       		rts			; Eggman monitor does nothing
0000A800                            ; ===========================================================================
0000A800                            
0000A800                            Obj2E_ChkSonic:
0000A800 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A804 6600                       		bne.s	Obj2E_ChkShoes
0000A806                            
0000A806                            ExtraLife:
0000A806 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A80A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A80E 303C 0088                  		move.w	#$88,d0
0000A812 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A818                            ; ===========================================================================
0000A818                            
0000A818                            Obj2E_ChkShoes:
0000A818 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A81C 6600                       		bne.s	Obj2E_ChkShield
0000A81E 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A824 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A82A 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A830 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A836 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A83C 303C 00E2                  		move.w	#$E2,d0
0000A840 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A846                            ; ===========================================================================
0000A846                            
0000A846                            Obj2E_ChkShield:
0000A846 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A84A 6600                       		bne.s	Obj2E_ChkInvinc
0000A84C 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A852 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A858 303C 00AF                  		move.w	#$AF,d0
0000A85C 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A862                            ; ===========================================================================
0000A862                            
0000A862                            Obj2E_ChkInvinc:
0000A862 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A866 6600                       		bne.s	Obj2E_ChkRings
0000A868 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A86E 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A874 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A87A 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A880 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A886 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A88C 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A892 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A898 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A89E 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A8A4 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A8A8 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A8AA 303C 0087                  		move.w	#$87,d0
0000A8AE 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A8B4                            ; ===========================================================================
0000A8B4                            
0000A8B4                            Obj2E_NoMusic:
0000A8B4 4E75                       		rts	
0000A8B6                            ; ===========================================================================
0000A8B6                            
0000A8B6                            Obj2E_ChkRings:
0000A8B6 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A8BA 6600                       		bne.s	Obj2E_ChkS
0000A8BC 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A8C2 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A8C8 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A8CE 6500                       		bcs.s	Obj2E_RingSound
0000A8D0 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A8D6 6700 FF2E                  		beq.w	ExtraLife
0000A8DA 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A8E0 6500                       		bcs.s	Obj2E_RingSound
0000A8E2 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A8E8 6700 FF1C                  		beq.w	ExtraLife
0000A8EC                            
0000A8EC                            Obj2E_RingSound:
0000A8EC 303C 00B5                  		move.w	#$B5,d0
0000A8F0 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A8F6                            ; ===========================================================================
0000A8F6                            
0000A8F6                            Obj2E_ChkS:
0000A8F6 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A8FA 6600                       		bne.s	Obj2E_ChkEnd
0000A8FC                            		; nop	
0000A8FC 7201                       		moveq	#1,d1
0000A8FE B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A902                            
0000A902                            Obj2E_ChkEnd:
0000A902 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A904                            ; ===========================================================================
0000A904                            
0000A904                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A904 5368 001E                  		subq.w	#1,$1E(a0)
0000A908 6B00 0000                  		bmi.w	DeleteObject
0000A90C 4E75                       		rts	
0000A90E                            ; ---------------------------------------------------------------------------
0000A90E                            ; Subroutine to	make the sides of a monitor solid
0000A90E                            ; ---------------------------------------------------------------------------
0000A90E                            
0000A90E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A90E                            
0000A90E                            
0000A90E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A90E 43F8 D000                  		lea	($FFFFD000).w,a1
0000A912 3029 0008                  		move.w	8(a1),d0
0000A916 9068 0008                  		sub.w	8(a0),d0
0000A91A D041                       		add.w	d1,d0
0000A91C 6B00                       		bmi.s	loc_A4E6
0000A91E 3601                       		move.w	d1,d3
0000A920 D643                       		add.w	d3,d3
0000A922 B043                       		cmp.w	d3,d0
0000A924 6200                       		bhi.s	loc_A4E6
0000A926 1629 0016                  		move.b	$16(a1),d3
0000A92A 4883                       		ext.w	d3
0000A92C D443                       		add.w	d3,d2
0000A92E 3629 000C                  		move.w	$C(a1),d3
0000A932 9668 000C                  		sub.w	$C(a0),d3
0000A936 D642                       		add.w	d2,d3
0000A938 6B00                       		bmi.s	loc_A4E6
0000A93A D442                       		add.w	d2,d2
0000A93C B642                       		cmp.w	d2,d3
0000A93E 6400                       		bcc.s	loc_A4E6
0000A940 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A944 6B00                       		bmi.s	loc_A4E6
0000A946 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A94C 6400                       		bcc.s	loc_A4E6
0000A94E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A952 6600                       		bne.s	loc_A4E6
0000A954 B240                       		cmp.w	d0,d1
0000A956 6400                       		bcc.s	loc_A4DC
0000A958 D241                       		add.w	d1,d1
0000A95A 9041                       		sub.w	d1,d0
0000A95C                            
0000A95C                            loc_A4DC:
0000A95C 0C43 0010                  		cmpi.w	#$10,d3
0000A960 6500                       		bcs.s	loc_A4EA
0000A962                            
0000A962                            loc_A4E2:
0000A962 7201                       		moveq	#1,d1
0000A964 4E75                       		rts	
0000A966                            ; ===========================================================================
0000A966                            
0000A966                            loc_A4E6:
0000A966 7200                       		moveq	#0,d1
0000A968 4E75                       		rts	
0000A96A                            ; ===========================================================================
0000A96A                            
0000A96A                            loc_A4EA:
0000A96A 7200                       		moveq	#0,d1
0000A96C 1228 0019                  		move.b	$19(a0),d1
0000A970 5841                       		addq.w	#4,d1
0000A972 3401                       		move.w	d1,d2
0000A974 D442                       		add.w	d2,d2
0000A976 D269 0008                  		add.w	8(a1),d1
0000A97A 9268 0008                  		sub.w	8(a0),d1
0000A97E 6BE2                       		bmi.s	loc_A4E2
0000A980 B242                       		cmp.w	d2,d1
0000A982 64DE                       		bcc.s	loc_A4E2
0000A984 72FF                       		moveq	#-1,d1
0000A986 4E75                       		rts	
0000A988                            ; End of function Obj26_SolidSides
0000A988                            
0000A988                            ; ===========================================================================
0000A988                            Ani_obj26:
0000A988                            	include "_anim\obj26.asm"
0000A988                            ; ---------------------------------------------------------------------------
0000A988                            ; Animation script - monitors
0000A988                            ; ---------------------------------------------------------------------------
0000A988 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A98E 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A994 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A99A 0000                       		dc.w byte_A582-Ani_obj26
0000A99C 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A9A2 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A9AE 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A9BA 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A9C6 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A9D2 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A9DE 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A9EA 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A9F6 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AA02 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AA0A                            		even
0000AA0A                            		even
0000AA0A                            
0000AA0A                            ; ---------------------------------------------------------------------------
0000AA0A                            ; Sprite mappings - monitors
0000AA0A                            ; ---------------------------------------------------------------------------
0000AA0A                            Map_obj26:
0000AA0A                            	include "_maps\obj26.asm"
0000AA0A                            ; ================================================================================
0000AA0A                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AA0A                            ; ================================================================================
0000AA0A                            
0000AA0A                            DATAY1U343IF3L:
0000AA0A 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AA0E 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AA12 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AA16 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AA1A 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AA1E 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AA22 05                         DATAY1U343IF3L_0: dc.b $5
0000AA23 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA28 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA2D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA32 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA37 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA3C 06                         DATAY1U343IF3L_1: dc.b $6
0000AA3D F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AA42 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA47 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA4C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA51 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA56 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA5B 05                         DATAY1U343IF3L_2: dc.b $5
0000AA5C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA61 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA66 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA6B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA70 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA75 05                         DATAY1U343IF3L_3: dc.b $5
0000AA76 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA7B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA80 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA85 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA8A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA8F 06                         DATAY1U343IF3L_4: dc.b $6
0000AA90 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AA95 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA9A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA9F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAA4 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAA9 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAAE 06                         DATAY1U343IF3L_5: dc.b $6
0000AAAF F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AAB4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAB9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AABE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAC3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAC8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AACD 06                         DATAY1U343IF3L_6: dc.b $6
0000AACE F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AAD3 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAD8 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AADD E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAE2 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAE7 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAEC 06                         DATAY1U343IF3L_7: dc.b $6
0000AAED F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AAF2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAF7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAFC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB01 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB06 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB0B 06                         DATAY1U343IF3L_8: dc.b $6
0000AB0C F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AB11 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB16 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB1B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB20 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB25 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB2A 06                         DATAY1U343IF3L_9: dc.b $6
0000AB2B F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB30 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB35 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB3A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB3F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB44 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB49 05                         DATAY1U343IF3L_A: dc.b $5
0000AB4A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB4F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB54 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB59 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB5E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB63 01                         DATAY1U343IF3L_B: dc.b $1
0000AB64 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AB6A 00                         	even
0000AB6A 00                         	even
0000AB6A                            
0000AB6A                            ; ===========================================================================
0000AB6A                            ; ---------------------------------------------------------------------------
0000AB6A                            ; Object 0E - Sonic on the title screen
0000AB6A                            ; ---------------------------------------------------------------------------
0000AB6A                            
0000AB6A                            Obj0E:					; XREF: Obj_Index
0000AB6A 7000                       		moveq	#0,d0
0000AB6C 1028 0024                  		move.b	$24(a0),d0
0000AB70 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AB74 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AB78                            ; ===========================================================================
0000AB78 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AB7A 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AB7C 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AB7E 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AB80                            ; ===========================================================================
0000AB80                            
0000AB80                            Obj0E_Main:				; XREF: Obj0E_Index
0000AB80 5428 0024                  		addq.b	#2,$24(a0)
0000AB84 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AB8A 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AB90 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AB98 317C 2300 0002             		move.w	#$2300,2(a0)
0000AB9E 117C 0001 0018             		move.b	#1,$18(a0)
0000ABA4 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000ABAA 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABB0 6100 0000                  		bsr.w	AnimateSprite
0000ABB4                            
0000ABB4                            Obj0E_Delay:				; XREF: Obj0E_Index
0000ABB4 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000ABB8 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000ABBA 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000ABBE 6000 0000                  		bra.w	DisplaySprite
0000ABC2                            ; ===========================================================================
0000ABC2                            
0000ABC2                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000ABC2 4E75                       		rts	
0000ABC4                            ; ===========================================================================
0000ABC4                            
0000ABC4                            Obj0E_Move:				; XREF: Obj0E_Index
0000ABC4 5168 000A                  		subq.w	#8,$A(a0)
0000ABC8 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ABCE 6600                       		bne.s	Obj0E_Display
0000ABD0 5428 0024                  		addq.b	#2,$24(a0)
0000ABD4                            
0000ABD4                            Obj0E_Display:
0000ABD4 6000 0000                  		bra.w	DisplaySprite
0000ABD8                            ; ===========================================================================
0000ABD8 4E75                       		rts	
0000ABDA                            ; ===========================================================================
0000ABDA                            
0000ABDA                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ABDA 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABE0 6100 0000                  		bsr.w	AnimateSprite
0000ABE4 6000 0000                  		bra.w	DisplaySprite
0000ABE8                            ; ===========================================================================
0000ABE8 4E75                       		rts	
0000ABEA                            ; ===========================================================================
0000ABEA                            ; ---------------------------------------------------------------------------
0000ABEA                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ABEA                            ; ---------------------------------------------------------------------------
0000ABEA                            
0000ABEA                            Obj0F:					; XREF: Obj_Index
0000ABEA 7000                       		moveq	#0,d0
0000ABEC 1028 0024                  		move.b	$24(a0),d0
0000ABF0 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ABF4 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ABF8 6000 0000                  		bra.w	DisplaySprite
0000ABFC                            ; ===========================================================================
0000ABFC 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ABFE 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AC00 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AC02                            ; ===========================================================================
0000AC02                            
0000AC02                            Obj0F_Main:				; XREF: Obj0F_Index
0000AC02 5428 0024                  		addq.b	#2,$24(a0)
0000AC06 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AC0C 317C 0130 000A             		move.w	#$130,$A(a0)
0000AC12 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AC1A 317C 0200 0002             		move.w	#$200,2(a0)
0000AC20 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC26 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC28 5428 0024                  		addq.b	#2,$24(a0)
0000AC2C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC32 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC34 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC3A 317C 0170 0008             		move.w	#$170,8(a0)
0000AC40 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AC46                            
0000AC46                            locret_A6F8:				; XREF: Obj0F_Index
0000AC46 4E75                       		rts	
0000AC48                            ; ===========================================================================
0000AC48                            
0000AC48                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AC48 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AC4E 6000 0000                  		bra.w	AnimateSprite
0000AC52                            ; ===========================================================================
0000AC52                            Ani_obj0E:
0000AC52                            	include "_anim\obj0E.asm"
0000AC52                            ; ---------------------------------------------------------------------------
0000AC52                            ; Animation script - Sonic on the title screen
0000AC52                            ; ---------------------------------------------------------------------------
0000AC52 0000                       		dc.w byte_A706-Ani_obj0E
0000AC54 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AC60                            		even
0000AC60                            		even
0000AC60                            
0000AC60                            Ani_obj0F:
0000AC60                            	include "_anim\obj0F.asm"
0000AC60                            ; ---------------------------------------------------------------------------
0000AC60                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AC60                            ; ---------------------------------------------------------------------------
0000AC60 0000                       		dc.w byte_A714-Ani_obj0F
0000AC62 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AC66                            		even
0000AC66                            		even
0000AC66                            
0000AC66                            ; ---------------------------------------------------------------------------
0000AC66                            ; Subroutine to	animate	a sprite using an animation script
0000AC66                            ; ---------------------------------------------------------------------------
0000AC66                            
0000AC66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC66                            
0000AC66                            
0000AC66                            AnimateSprite:
0000AC66 7000                       		moveq	#0,d0
0000AC68 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AC6C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AC70 6700                       		beq.s	Anim_Run	; if not, branch
0000AC72 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AC76 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AC7C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AC82                            
0000AC82                            Anim_Run:
0000AC82 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AC86 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AC88 D040                       		add.w	d0,d0
0000AC8A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AC8E 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AC92 7200                       		moveq	#0,d1
0000AC94 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AC98 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AC9C 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AC9E                            
0000AC9E                            Anim_Next:
0000AC9E 1200                       		move.b	d0,d1
0000ACA0 0200 001F                  		andi.b	#$1F,d0
0000ACA4 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000ACA8 1028 0022                  		move.b	$22(a0),d0
0000ACAC E719                       		rol.b	#3,d1
0000ACAE B101                       		eor.b	d0,d1
0000ACB0 0201 0003                  		andi.b	#3,d1
0000ACB4 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000ACBA 8328 0001                  		or.b	d1,1(a0)
0000ACBE 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000ACC2                            
0000ACC2                            Anim_Wait:
0000ACC2 4E75                       		rts	
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            Anim_End_FF:
0000ACC4 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000ACC6 6600                       		bne.s	Anim_End_FE	; if not, branch
0000ACC8 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000ACCE 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000ACD2 60CA                       		bra.s	Anim_Next
0000ACD4                            ; ===========================================================================
0000ACD4                            
0000ACD4                            Anim_End_FE:
0000ACD4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000ACD6 6600                       		bne.s	Anim_End_FD	; if not, branch
0000ACD8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000ACDC 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000ACE0 9200                       		sub.b	d0,d1
0000ACE2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000ACE6 60B6                       		bra.s	Anim_Next
0000ACE8                            ; ===========================================================================
0000ACE8                            
0000ACE8                            Anim_End_FD:
0000ACE8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000ACEA 6600                       		bne.s	Anim_End_FC	; if not, branch
0000ACEC 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000ACF2                            
0000ACF2                            Anim_End_FC:
0000ACF2 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000ACF4 6600                       		bne.s	Anim_End_FB	; if not, branch
0000ACF6 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000ACFA                            
0000ACFA                            Anim_End_FB:
0000ACFA 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000ACFC 6600                       		bne.s	Anim_End_FA	; if not, branch
0000ACFE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AD04 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AD08                            
0000AD08                            Anim_End_FA:
0000AD08 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AD0A 6600                       		bne.s	Anim_End	; if not, branch
0000AD0C 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AD10                            
0000AD10                            Anim_End:
0000AD10 4E75                       		rts	
0000AD12                            ; End of function AnimateSprite
0000AD12                            
0000AD12                            ; ===========================================================================
0000AD12                            ; ---------------------------------------------------------------------------
0000AD12                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD12                            ; ---------------------------------------------------------------------------
0000AD12                            Map_obj0F:
0000AD12                            	include "_maps\obj0F.asm"
0000AD12                            ; ---------------------------------------------------------------------------
0000AD12                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD12                            ; ---------------------------------------------------------------------------
0000AD12 0000                       		dc.w byte_A7CD-Map_obj0F
0000AD14 0000                       		dc.w byte_A7CC-Map_obj0F
0000AD16 0000                       		dc.w byte_A7EB-Map_obj0F
0000AD18 0000                       		dc.w byte_A882-Map_obj0F
0000AD1A 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AD1B 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AD20 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD25 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD2A 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD2F 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD34 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD39 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD3A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD3F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD44 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD49 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD4E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD53 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD58 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD5D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD62 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD67 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD6C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD71 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD76 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD7B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD80 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD85 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD8A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD8F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD94 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD99 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD9E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADAD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADB2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADB7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADBC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADC1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADC6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADCB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADD0 01                         byte_A882:	dc.b 1			; "TM"
0000ADD1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000ADD6                            		even
0000ADD6                            		even
0000ADD6                            
0000ADD6                            ; ---------------------------------------------------------------------------
0000ADD6                            ; Sprite mappings - Sonic on the title screen
0000ADD6                            ; ---------------------------------------------------------------------------
0000ADD6                            Map_obj0E:
0000ADD6                            	include "_maps\obj0E.asm"
0000ADD6                            ; ================================================================================
0000ADD6                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 12:11:33 GMT-0500 (Central Daylight Time)
0000ADD6                            ; ================================================================================
0000ADD6                            
0000ADD6                            DATAV21JFHJ5PUP:
0000ADD6 0000 0000                  	dc.w DATAV21JFHJ5PUP_0-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_1-DATAV21JFHJ5PUP
0000ADDA 0000 0000                  	dc.w DATAV21JFHJ5PUP_2-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_3-DATAV21JFHJ5PUP
0000ADDE 0000 0000                  	dc.w DATAV21JFHJ5PUP_4-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_5-DATAV21JFHJ5PUP
0000ADE2 0000 0000                  	dc.w DATAV21JFHJ5PUP_6-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_7-DATAV21JFHJ5PUP
0000ADE6 08                         DATAV21JFHJ5PUP_0: dc.b $8
0000ADE7 0C0F 019F 08               	dc.b $C, $F, $1, $9F, $8
0000ADEC 2C0F 01AF 08               	dc.b $2C, $F, $1, $AF, $8
0000ADF1 4C0D 01BF 08               	dc.b $4C, $D, $1, $BF, $8
0000ADF6 0408 01C7 20               	dc.b $4, $8, $1, $C7, $20
0000ADFB 0C0B 01CA 28               	dc.b $C, $B, $1, $CA, $28
0000AE00 2C0B 01D6 28               	dc.b $2C, $B, $1, $D6, $28
0000AE05 4C05 01E2 28               	dc.b $4C, $5, $1, $E2, $28
0000AE0A 1407 01E6 40               	dc.b $14, $7, $1, $E6, $40
0000AE0F 0B                         DATAV21JFHJ5PUP_1: dc.b $B
0000AE10 060F 01EE 01               	dc.b $6, $F, $1, $EE, $1
0000AE15 060F 01FE 21               	dc.b $6, $F, $1, $FE, $21
0000AE1A 0607 020E 41               	dc.b $6, $7, $2, $E, $41
0000AE1F 260F 0216 01               	dc.b $26, $F, $2, $16, $1
0000AE24 260F 0226 21               	dc.b $26, $F, $2, $26, $21
0000AE29 2607 0236 41               	dc.b $26, $7, $2, $36, $41
0000AE2E 460C 023E 01               	dc.b $46, $C, $2, $3E, $1
0000AE33 460E 0242 21               	dc.b $46, $E, $2, $42, $21
0000AE38 4606 024E 41               	dc.b $46, $6, $2, $4E, $41
0000AE3D 4E08 0254 09               	dc.b $4E, $8, $2, $54, $9
0000AE42 5604 0257 11               	dc.b $56, $4, $2, $57, $11
0000AE47 0B                         DATAV21JFHJ5PUP_2: dc.b $B
0000AE48 F20F 01EE 01               	dc.b $F2, $F, $1, $EE, $1
0000AE4D F20F 01FE 21               	dc.b $F2, $F, $1, $FE, $21
0000AE52 F207 020E 41               	dc.b $F2, $7, $2, $E, $41
0000AE57 120F 0216 01               	dc.b $12, $F, $2, $16, $1
0000AE5C 120F 0226 21               	dc.b $12, $F, $2, $26, $21
0000AE61 1207 0236 41               	dc.b $12, $7, $2, $36, $41
0000AE66 320C 023E 01               	dc.b $32, $C, $2, $3E, $1
0000AE6B 320E 0242 21               	dc.b $32, $E, $2, $42, $21
0000AE70 3206 024E 41               	dc.b $32, $6, $2, $4E, $41
0000AE75 3A08 0254 09               	dc.b $3A, $8, $2, $54, $9
0000AE7A 4204 0257 11               	dc.b $42, $4, $2, $57, $11
0000AE7F 0D                         DATAV21JFHJ5PUP_3: dc.b $D
0000AE80 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AE85 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AE8A FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AE8F 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AE94 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AE99 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AE9E 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AEA3 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AEA8 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AEAD 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AEB2 3C01 004E 08               	dc.b $3C, $1, $0, $4E, $8
0000AEB7 3C04 0050 28               	dc.b $3C, $4, $0, $50, $28
0000AEBC 4400 0052 28               	dc.b $44, $0, $0, $52, $28
0000AEC1 10                         DATAV21JFHJ5PUP_4: dc.b $10
0000AEC2 F80F 0259 09               	dc.b $F8, $F, $2, $59, $9
0000AEC7 F807 0269 29               	dc.b $F8, $7, $2, $69, $29
0000AECC 0003 0271 01               	dc.b $0, $3, $2, $71, $1
0000AED1 0003 0275 39               	dc.b $0, $3, $2, $75, $39
0000AED6 1001 0279 F9               	dc.b $10, $1, $2, $79, $F9
0000AEDB 180D 027B 09               	dc.b $18, $D, $2, $7B, $9
0000AEE0 1807 0283 29               	dc.b $18, $7, $2, $83, $29
0000AEE5 1803 028B 41               	dc.b $18, $3, $2, $8B, $41
0000AEEA 2001 028F 01               	dc.b $20, $1, $2, $8F, $1
0000AEEF 2003 0291 39               	dc.b $20, $3, $2, $91, $39
0000AEF4 2808 0295 11               	dc.b $28, $8, $2, $95, $11
0000AEF9 3007 0298 19               	dc.b $30, $7, $2, $98, $19
0000AEFE 3801 02A0 11               	dc.b $38, $1, $2, $A0, $11
0000AF03 3806 02A2 29               	dc.b $38, $6, $2, $A2, $29
0000AF08 3801 02A8 41               	dc.b $38, $1, $2, $A8, $41
0000AF0D 4001 02AA 39               	dc.b $40, $1, $2, $AA, $39
0000AF12 13                         DATAV21JFHJ5PUP_5: dc.b $13
0000AF13 280E 00B2 38               	dc.b $28, $E, $0, $B2, $38
0000AF18 1805 00BE 48               	dc.b $18, $5, $0, $BE, $48
0000AF1D 4008 00C2 38               	dc.b $40, $8, $0, $C2, $38
0000AF22 4804 00C5 38               	dc.b $48, $4, $0, $C5, $38
0000AF27 100F 0053 10               	dc.b $10, $F, $0, $53, $10
0000AF2C 0804 0063 20               	dc.b $8, $4, $0, $63, $20
0000AF31 000B 0065 30               	dc.b $0, $B, $0, $65, $30
0000AF36 0800 0071 48               	dc.b $8, $0, $0, $71, $48
0000AF3B 1800 0072 48               	dc.b $18, $0, $0, $72, $48
0000AF40 1805 0073 00               	dc.b $18, $5, $0, $73, $0
0000AF45 2802 0077 08               	dc.b $28, $2, $0, $77, $8
0000AF4A 300F 007A 10               	dc.b $30, $F, $0, $7A, $10
0000AF4F 200D 008A 30               	dc.b $20, $D, $0, $8A, $30
0000AF54 2001 0092 50               	dc.b $20, $1, $0, $92, $50
0000AF59 3008 0094 30               	dc.b $30, $8, $0, $94, $30
0000AF5E 380E 0097 30               	dc.b $38, $E, $0, $97, $30
0000AF63 500D 00A3 08               	dc.b $50, $D, $0, $A3, $8
0000AF68 500C 00AB 28               	dc.b $50, $C, $0, $AB, $28
0000AF6D 5808 00AF 28               	dc.b $58, $8, $0, $AF, $28
0000AF72 0F                         DATAV21JFHJ5PUP_6: dc.b $F
0000AF73 EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000AF78 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000AF7D 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000AF82 EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000AF87 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000AF8C 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000AF91 EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000AF96 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000AF9B 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000AFA0 EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000AFA5 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000AFAA 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000AFAF EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000AFB4 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000AFB9 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000AFBE 0F                         DATAV21JFHJ5PUP_7: dc.b $F
0000AFBF EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000AFC4 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000AFC9 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000AFCE EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000AFD3 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000AFD8 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000AFDD EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000AFE2 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000AFE7 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000AFEC EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000AFF1 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000AFF6 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000AFFB EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000B000 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000B005 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000B00A                            	even
0000B00A                            	even
0000B00A                            
0000B00A                            ; ===========================================================================
0000B00A                            ; ---------------------------------------------------------------------------
0000B00A                            ; Object 2B - Chopper enemy (GHZ)
0000B00A                            ; ---------------------------------------------------------------------------
0000B00A                            
0000B00A                            Obj2B:					; XREF: Obj_Index
0000B00A 7000                       		moveq	#0,d0
0000B00C 1028 0024                  		move.b	$24(a0),d0
0000B010 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B014 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B018 6000 0000                  		bra.w	MarkObjGone
0000B01C                            ; ===========================================================================
0000B01C 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B01E 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B020                            ; ===========================================================================
0000B020                            
0000B020                            Obj2B_Main:				; XREF: Obj2B_Index
0000B020 5428 0024                  		addq.b	#2,$24(a0)
0000B024 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B02C 317C 047B 0002             		move.w	#$47B,2(a0)
0000B032 117C 0004 0001             		move.b	#4,1(a0)
0000B038 117C 0004 0018             		move.b	#4,$18(a0)
0000B03E 117C 0009 0020             		move.b	#9,$20(a0)
0000B044 117C 0010 0019             		move.b	#$10,$19(a0)
0000B04A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B050 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B056                            
0000B056                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B056 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B05C 6100 FC08                  		bsr.w	AnimateSprite
0000B060 6100 0000                  		bsr.w	SpeedToPos
0000B064 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B06A 3028 0030                  		move.w	$30(a0),d0
0000B06E B068 000C                  		cmp.w	$C(a0),d0
0000B072 6400                       		bcc.s	Obj2B_ChgAni
0000B074 3140 000C                  		move.w	d0,$C(a0)
0000B078 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B07E                            
0000B07E                            Obj2B_ChgAni:
0000B07E 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B084 0440 00C0                  		subi.w	#$C0,d0
0000B088 B068 000C                  		cmp.w	$C(a0),d0
0000B08C 6400                       		bcc.s	locret_ABB6
0000B08E 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B094 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B098 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B09A 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B0A0                            
0000B0A0                            locret_ABB6:
0000B0A0 4E75                       		rts	
0000B0A2                            ; ===========================================================================
0000B0A2                            Ani_obj2B:
0000B0A2                            	include "_anim\obj2B.asm"
0000B0A2                            ; ---------------------------------------------------------------------------
0000B0A2                            ; Animation script - Chopper enemy
0000B0A2                            ; ---------------------------------------------------------------------------
0000B0A2 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B0A4 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B0A6 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B0A8 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B0AC 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B0B0 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B0B4 00                         		even
0000B0B4 00                         		even
0000B0B4                            
0000B0B4                            ; ---------------------------------------------------------------------------
0000B0B4                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0B4                            ; ---------------------------------------------------------------------------
0000B0B4                            Map_obj2B:
0000B0B4                            	include "_maps\obj2B.asm"
0000B0B4                            ; ---------------------------------------------------------------------------
0000B0B4                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0B4                            ; ---------------------------------------------------------------------------
0000B0B4 0000                       		dc.w byte_ABCE-Map_obj2B
0000B0B6 0000                       		dc.w byte_ABD4-Map_obj2B
0000B0B8 01                         byte_ABCE:	dc.b 1
0000B0B9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B0BE 01                         byte_ABD4:	dc.b 1
0000B0BF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B0C4                            		even
0000B0C4                            		even
0000B0C4                            
0000B0C4                            ; ===========================================================================
0000B0C4                            ; ---------------------------------------------------------------------------
0000B0C4                            ; Object 2C - Jaws enemy (LZ)
0000B0C4                            ; ---------------------------------------------------------------------------
0000B0C4                            
0000B0C4                            Obj2C:					; XREF: Obj_Index
0000B0C4 7000                       		moveq	#0,d0
0000B0C6 1028 0024                  		move.b	$24(a0),d0
0000B0CA 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B0CE 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B0D2                            ; ===========================================================================
0000B0D2 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B0D4 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B0D6                            ; ===========================================================================
0000B0D6                            
0000B0D6                            Obj2C_Main:				; XREF: Obj2C_Index
0000B0D6 5428 0024                  		addq.b	#2,$24(a0)
0000B0DA 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B0E2 317C 2486 0002             		move.w	#$2486,2(a0)
0000B0E8 0028 0004 0001             		ori.b	#4,1(a0)
0000B0EE 117C 000A 0020             		move.b	#$A,$20(a0)
0000B0F4 117C 0004 0018             		move.b	#4,$18(a0)
0000B0FA 117C 0010 0019             		move.b	#$10,$19(a0)
0000B100 7000                       		moveq	#0,d0
0000B102 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B106 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B108 5340                       		subq.w	#1,d0
0000B10A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B10E 3140 0032                  		move.w	d0,$32(a0)
0000B112 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B118 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B11E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B120 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B124                            
0000B124                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B124 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B128 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B12A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B130 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B134 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B13A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B140                            
0000B140                            Obj2C_Animate:
0000B140 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B146 6100 FB1E                  		bsr.w	AnimateSprite
0000B14A 6100 0000                  		bsr.w	SpeedToPos
0000B14E 6000 0000                  		bra.w	MarkObjGone
0000B152                            ; ===========================================================================
0000B152                            Ani_obj2C:
0000B152                            	include "_anim\obj2C.asm"
0000B152                            ; ---------------------------------------------------------------------------
0000B152                            ; Animation script - Jaws enemy
0000B152                            ; ---------------------------------------------------------------------------
0000B152 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B154 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B15A                            		even
0000B15A                            		even
0000B15A                            
0000B15A                            ; ---------------------------------------------------------------------------
0000B15A                            ; Sprite mappings - Jaws enemy (LZ)
0000B15A                            ; ---------------------------------------------------------------------------
0000B15A                            Map_obj2C:
0000B15A                            	include "_maps\obj2C.asm"
0000B15A                            ; ---------------------------------------------------------------------------
0000B15A                            ; Sprite mappings - Jaws enemy (LZ)
0000B15A                            ; ---------------------------------------------------------------------------
0000B15A 0000                       		dc.w byte_AC78-Map_obj2C
0000B15C 0000                       		dc.w byte_AC83-Map_obj2C
0000B15E 0000                       		dc.w byte_AC8E-Map_obj2C
0000B160 0000                       		dc.w byte_AC99-Map_obj2C
0000B162 02                         byte_AC78:	dc.b 2
0000B163 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B168 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B16D 02                         byte_AC83:	dc.b 2
0000B16E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B173 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B178 02                         byte_AC8E:	dc.b 2
0000B179 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B17E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B183 02                         byte_AC99:	dc.b 2
0000B184 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B189 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B18E                            		even
0000B18E                            		even
0000B18E                            
0000B18E                            ; ===========================================================================
0000B18E                            ; ---------------------------------------------------------------------------
0000B18E                            ; Object 2D - Burrobot enemy (LZ)
0000B18E                            ; ---------------------------------------------------------------------------
0000B18E                            
0000B18E                            Obj2D:					; XREF: Obj_Index
0000B18E 7000                       		moveq	#0,d0
0000B190 1028 0024                  		move.b	$24(a0),d0
0000B194 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B198 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B19C                            ; ===========================================================================
0000B19C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B19E 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B1A0                            ; ===========================================================================
0000B1A0                            
0000B1A0                            Obj2D_Main:				; XREF: Obj2D_Index
0000B1A0 5428 0024                  		addq.b	#2,$24(a0)
0000B1A4 117C 0013 0016             		move.b	#$13,$16(a0)
0000B1AA 117C 0008 0017             		move.b	#8,$17(a0)
0000B1B0 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B1B8 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B1BE 0028 0004 0001             		ori.b	#4,1(a0)
0000B1C4 117C 0004 0018             		move.b	#4,$18(a0)
0000B1CA 117C 0005 0020             		move.b	#5,$20(a0)
0000B1D0 117C 000C 0019             		move.b	#$C,$19(a0)
0000B1D6 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B1DA 117C 0002 001C             		move.b	#2,$1C(a0)
0000B1E0                            
0000B1E0                            Obj2D_Action:				; XREF: Obj2D_Index
0000B1E0 7000                       		moveq	#0,d0
0000B1E2 1028 0025                  		move.b	$25(a0),d0
0000B1E6 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B1EA 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B1EE 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B1F4 6100 FA70                  		bsr.w	AnimateSprite
0000B1F8 6000 0000                  		bra.w	MarkObjGone
0000B1FC                            ; ===========================================================================
0000B1FC 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B1FE 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B200 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B202 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B204                            ; ===========================================================================
0000B204                            
0000B204                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B204 5368 0030                  		subq.w	#1,$30(a0)
0000B208 6A00                       		bpl.s	locret_AD42
0000B20A 5428 0025                  		addq.b	#2,$25(a0)
0000B20E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B214 317C 0080 0010             		move.w	#$80,$10(a0)
0000B21A 117C 0001 001C             		move.b	#1,$1C(a0)
0000B220 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B226 6700                       		beq.s	locret_AD42
0000B228 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B22C                            
0000B22C                            locret_AD42:
0000B22C 4E75                       		rts	
0000B22E                            ; ===========================================================================
0000B22E                            
0000B22E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B22E 5368 0030                  		subq.w	#1,$30(a0)
0000B232 6B00                       		bmi.s	loc_AD84
0000B234 6100 0000                  		bsr.w	SpeedToPos
0000B238 0868 0000 0032             		bchg	#0,$32(a0)
0000B23E 6600                       		bne.s	loc_AD78
0000B240 3628 0008                  		move.w	8(a0),d3
0000B244 0643 000C                  		addi.w	#$C,d3
0000B248 0828 0000 0022             		btst	#0,$22(a0)
0000B24E 6600                       		bne.s	loc_AD6A
0000B250 0443 0018                  		subi.w	#$18,d3
0000B254                            
0000B254                            loc_AD6A:
0000B254 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B25A 0C41 000C                  		cmpi.w	#$C,d1
0000B25E 6C00                       		bge.s	loc_AD84
0000B260 4E75                       		rts	
0000B262                            ; ===========================================================================
0000B262                            
0000B262                            loc_AD78:				; XREF: Obj2D_Move
0000B262 4EB9 0000 0000             		jsr	ObjHitFloor
0000B268 D368 000C                  		add.w	d1,$C(a0)
0000B26C 4E75                       		rts	
0000B26E                            ; ===========================================================================
0000B26E                            
0000B26E                            loc_AD84:				; XREF: Obj2D_Move
0000B26E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B274 6700                       		beq.s	loc_ADA4
0000B276 5528 0025                  		subq.b	#2,$25(a0)
0000B27A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B280 317C 0000 0010             		move.w	#0,$10(a0)
0000B286 117C 0000 001C             		move.b	#0,$1C(a0)
0000B28C 4E75                       		rts	
0000B28E                            ; ===========================================================================
0000B28E                            
0000B28E                            loc_ADA4:
0000B28E 5428 0025                  		addq.b	#2,$25(a0)
0000B292 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B298 117C 0002 001C             		move.b	#2,$1C(a0)
0000B29E 4E75                       		rts	
0000B2A0                            ; ===========================================================================
0000B2A0                            
0000B2A0                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B2A0 6100 0000                  		bsr.w	SpeedToPos
0000B2A4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B2AA 6B00                       		bmi.s	locret_ADF0
0000B2AC 117C 0003 001C             		move.b	#3,$1C(a0)
0000B2B2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B2B8 4A41                       		tst.w	d1
0000B2BA 6A00                       		bpl.s	locret_ADF0
0000B2BC D368 000C                  		add.w	d1,$C(a0)
0000B2C0 317C 0000 0012             		move.w	#0,$12(a0)
0000B2C6 117C 0001 001C             		move.b	#1,$1C(a0)
0000B2CC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B2D2 5528 0025                  		subq.b	#2,$25(a0)
0000B2D6 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B2DA                            
0000B2DA                            locret_ADF0:
0000B2DA 4E75                       		rts	
0000B2DC                            ; ===========================================================================
0000B2DC                            
0000B2DC                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B2DC 343C 0060                  		move.w	#$60,d2
0000B2E0 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B2E4 6400                       		bcc.s	locret_AE20
0000B2E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B2EA 9068 000C                  		sub.w	$C(a0),d0
0000B2EE 6400                       		bcc.s	locret_AE20
0000B2F0 0C40 FF80                  		cmpi.w	#-$80,d0
0000B2F4 6500                       		bcs.s	locret_AE20
0000B2F6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B2FA 6600                       		bne.s	locret_AE20
0000B2FC 5528 0025                  		subq.b	#2,$25(a0)
0000B300 3141 0010                  		move.w	d1,$10(a0)
0000B304 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B30A                            
0000B30A                            locret_AE20:
0000B30A 4E75                       		rts	
0000B30C                            
0000B30C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B30C                            
0000B30C                            
0000B30C                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B30C 323C 0080                  		move.w	#$80,d1
0000B310 08E8 0000 0022             		bset	#0,$22(a0)
0000B316 3038 D008                  		move.w	($FFFFD008).w,d0
0000B31A 9068 0008                  		sub.w	8(a0),d0
0000B31E 6400                       		bcc.s	loc_AE40
0000B320 4440                       		neg.w	d0
0000B322 4441                       		neg.w	d1
0000B324 08A8 0000 0022             		bclr	#0,$22(a0)
0000B32A                            
0000B32A                            loc_AE40:
0000B32A B042                       		cmp.w	d2,d0
0000B32C 4E75                       		rts	
0000B32E                            ; End of function Obj2D_ChkSonic2
0000B32E                            
0000B32E                            ; ===========================================================================
0000B32E                            Ani_obj2D:
0000B32E                            	include "_anim\obj2D.asm"
0000B32E                            ; ---------------------------------------------------------------------------
0000B32E                            ; Animation script - Burrobot enemy
0000B32E                            ; ---------------------------------------------------------------------------
0000B32E 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B330 0000                       		dc.w byte_AE50-Ani_obj2D
0000B332 0000                       		dc.w byte_AE54-Ani_obj2D
0000B334 0000                       		dc.w byte_AE58-Ani_obj2D
0000B336 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B33A 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B33E 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B342 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B346 00                         		even
0000B346 00                         		even
0000B346                            
0000B346                            ; ---------------------------------------------------------------------------
0000B346                            ; Sprite mappings - Burrobot enemy (LZ)
0000B346                            ; ---------------------------------------------------------------------------
0000B346                            Map_obj2D:
0000B346                            	include "_maps\obj2D.asm"
0000B346                            ; ---------------------------------------------------------------------------
0000B346                            ; Sprite mappings - Burrobot enemy (LZ)
0000B346                            ; ---------------------------------------------------------------------------
0000B346 0000                       		dc.w byte_AE6A-Map_obj2D
0000B348 0000                       		dc.w byte_AE75-Map_obj2D
0000B34A 0000                       		dc.w byte_AE80-Map_obj2D
0000B34C 0000                       		dc.w byte_AE8B-Map_obj2D
0000B34E 0000                       		dc.w byte_AE96-Map_obj2D
0000B350 0000                       		dc.w byte_AEA1-Map_obj2D
0000B352 0000                       		dc.w byte_AEAC-Map_obj2D
0000B354 02                         byte_AE6A:	dc.b 2
0000B355 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B35A 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B35F 02                         byte_AE75:	dc.b 2
0000B360 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B365 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B36A 02                         byte_AE80:	dc.b 2
0000B36B E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B370 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B375 02                         byte_AE8B:	dc.b 2
0000B376 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B37B 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B380 02                         byte_AE96:	dc.b 2
0000B381 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B386 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B38B 02                         byte_AEA1:	dc.b 2
0000B38C F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B391 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B396 02                         byte_AEAC:	dc.b 2
0000B397 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B39C 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B3A2 00                         		even
0000B3A2 00                         		even
0000B3A2                            
0000B3A2                            ; ===========================================================================
0000B3A2                            ; ---------------------------------------------------------------------------
0000B3A2                            ; Object 2F - large moving platforms (MZ)
0000B3A2                            ; ---------------------------------------------------------------------------
0000B3A2                            
0000B3A2                            Obj2F:					; XREF: Obj_Index
0000B3A2 7000                       		moveq	#0,d0
0000B3A4 1028 0024                  		move.b	$24(a0),d0
0000B3A8 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B3AC 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B3B0                            ; ===========================================================================
0000B3B0 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B3B2 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B3B4                            
0000B3B4 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B3B6 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B3B8 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B3BA 0140                       		dc.b 1,	$40
0000B3BC 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B3BE 0220                       		dc.b 2,	$20
0000B3C0                            ; ===========================================================================
0000B3C0                            
0000B3C0                            Obj2F_Main:				; XREF: Obj2F_Index
0000B3C0 5428 0024                  		addq.b	#2,$24(a0)
0000B3C4 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B3CC 317C C000 0002             		move.w	#$C000,2(a0)
0000B3D2 117C 0004 0001             		move.b	#4,1(a0)
0000B3D8 117C 0005 0018             		move.b	#5,$18(a0)
0000B3DE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B3E4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B3EA 7000                       		moveq	#0,d0
0000B3EC 1028 0028                  		move.b	$28(a0),d0
0000B3F0 E448                       		lsr.w	#2,d0
0000B3F2 0240 001C                  		andi.w	#$1C,d0
0000B3F6 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B3FA 3019                       		move.w	(a1)+,d0
0000B3FC 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B400 214A 0030                  		move.l	a2,$30(a0)
0000B404 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B408 1151 0019                  		move.b	(a1),$19(a0)
0000B40C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B412 117C 0040 0016             		move.b	#$40,$16(a0)
0000B418 08E8 0004 0001             		bset	#4,1(a0)
0000B41E                            
0000B41E                            Obj2F_Action:				; XREF: Obj2F_Index
0000B41E 6100 0000                  		bsr.w	Obj2F_Types
0000B422 4A28 0025                  		tst.b	$25(a0)
0000B426 6700                       		beq.s	Obj2F_Solid
0000B428 7200                       		moveq	#0,d1
0000B42A 1228 0019                  		move.b	$19(a0),d1
0000B42E 0641 000B                  		addi.w	#$B,d1
0000B432 6100 C5DE                  		bsr.w	ExitPlatform
0000B436 0829 0003 0022             		btst	#3,$22(a1)
0000B43C 6600 0000                  		bne.w	Obj2F_Slope
0000B440 4228 0025                  		clr.b	$25(a0)
0000B444 6000                       		bra.s	Obj2F_Display
0000B446                            ; ===========================================================================
0000B446                            
0000B446                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B446 7200                       		moveq	#0,d1
0000B448 1228 0019                  		move.b	$19(a0),d1
0000B44C 0641 000B                  		addi.w	#$B,d1
0000B450 2468 0030                  		movea.l	$30(a0),a2
0000B454 3428 0008                  		move.w	8(a0),d2
0000B458 6100 D516                  		bsr.w	SlopeObject2
0000B45C 6000                       		bra.s	Obj2F_Display
0000B45E                            ; ===========================================================================
0000B45E                            
0000B45E                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B45E 7200                       		moveq	#0,d1
0000B460 1228 0019                  		move.b	$19(a0),d1
0000B464 0641 000B                  		addi.w	#$B,d1
0000B468 343C 0020                  		move.w	#$20,d2
0000B46C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B472 6600                       		bne.s	loc_AF8E
0000B474 343C 0030                  		move.w	#$30,d2
0000B478                            
0000B478                            loc_AF8E:
0000B478 2468 0030                  		movea.l	$30(a0),a2
0000B47C 6100 0000                  		bsr.w	SolidObject2F
0000B480                            
0000B480                            Obj2F_Display:				; XREF: Obj2F_Action
0000B480 6100 0000                  		bsr.w	DisplaySprite
0000B484 6000 0000                  		bra.w	Obj2F_ChkDel
0000B488                            
0000B488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B488                            
0000B488                            
0000B488                            Obj2F_Types:				; XREF: Obj2F_Action
0000B488 7000                       		moveq	#0,d0
0000B48A 1028 0028                  		move.b	$28(a0),d0
0000B48E 0240 0007                  		andi.w	#7,d0
0000B492 D040                       		add.w	d0,d0
0000B494 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B498 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B49C                            ; End of function Obj2F_Types
0000B49C                            
0000B49C                            ; ===========================================================================
0000B49C 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B49E 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B4A0 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B4A2 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B4A4 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B4A6 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B4A8                            ; ===========================================================================
0000B4A8                            
0000B4A8                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B4A8 4E75                       		rts			; type 00 platform doesn't move
0000B4AA                            ; ===========================================================================
0000B4AA                            
0000B4AA                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B4AA 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B4AE 323C 0020                  		move.w	#$20,d1
0000B4B2 6000                       		bra.s	Obj2F_Move
0000B4B4                            ; ===========================================================================
0000B4B4                            
0000B4B4                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B4B4 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B4B8 323C 0030                  		move.w	#$30,d1
0000B4BC 6000                       		bra.s	Obj2F_Move
0000B4BE                            ; ===========================================================================
0000B4BE                            
0000B4BE                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B4BE 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B4C2 323C 0040                  		move.w	#$40,d1
0000B4C6 6000                       		bra.s	Obj2F_Move
0000B4C8                            ; ===========================================================================
0000B4C8                            
0000B4C8                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B4C8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B4CC 323C 0060                  		move.w	#$60,d1
0000B4D0                            
0000B4D0                            Obj2F_Move:
0000B4D0 0828 0003 0028             		btst	#3,$28(a0)
0000B4D6 6700                       		beq.s	loc_AFF2
0000B4D8 4440                       		neg.w	d0
0000B4DA D041                       		add.w	d1,d0
0000B4DC                            
0000B4DC                            loc_AFF2:
0000B4DC 3228 002C                  		move.w	$2C(a0),d1
0000B4E0 9240                       		sub.w	d0,d1
0000B4E2 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B4E6 4E75                       		rts	
0000B4E8                            ; ===========================================================================
0000B4E8                            
0000B4E8                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B4E8 1028 0034                  		move.b	$34(a0),d0
0000B4EC 4A28 0025                  		tst.b	$25(a0)
0000B4F0 6600                       		bne.s	loc_B010
0000B4F2 5500                       		subq.b	#2,d0
0000B4F4 6400                       		bcc.s	loc_B01C
0000B4F6 7000                       		moveq	#0,d0
0000B4F8 6000                       		bra.s	loc_B01C
0000B4FA                            ; ===========================================================================
0000B4FA                            
0000B4FA                            loc_B010:
0000B4FA 5800                       		addq.b	#4,d0
0000B4FC 0C00 0040                  		cmpi.b	#$40,d0
0000B500 6500                       		bcs.s	loc_B01C
0000B502 103C 0040                  		move.b	#$40,d0
0000B506                            
0000B506                            loc_B01C:
0000B506 1140 0034                  		move.b	d0,$34(a0)
0000B50A 4EB9 0000 2C22             		jsr	(CalcSine).l
0000B510 E848                       		lsr.w	#4,d0
0000B512 3200                       		move.w	d0,d1
0000B514 D068 002C                  		add.w	$2C(a0),d0
0000B518 3140 000C                  		move.w	d0,$C(a0)
0000B51C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B522 6600                       		bne.s	loc_B07A
0000B524 4A28 0035                  		tst.b	$35(a0)
0000B528 6600                       		bne.s	loc_B07A
0000B52A 117C 0001 0035             		move.b	#1,$35(a0)
0000B530 6100 0000                  		bsr.w	SingleObjLoad2
0000B534 6600                       		bne.s	loc_B07A
0000B536 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B53A 3368 0008 0008             		move.w	8(a0),8(a1)
0000B540 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B546 5069 002C                  		addq.w	#8,$2C(a1)
0000B54A 5769 002C                  		subq.w	#3,$2C(a1)
0000B54E 0469 0040 0008             		subi.w	#$40,8(a1)
0000B554 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B55A 2348 0038                  		move.l	a0,$38(a1)
0000B55E 2448                       		movea.l	a0,a2
0000B560 6100                       		bsr.s	sub_B09C
0000B562                            
0000B562                            loc_B07A:
0000B562 7400                       		moveq	#0,d2
0000B564 45E8 0036                  		lea	$36(a0),a2
0000B568 141A                       		move.b	(a2)+,d2
0000B56A 5302                       		subq.b	#1,d2
0000B56C 6500                       		bcs.s	locret_B09A
0000B56E                            
0000B56E                            loc_B086:
0000B56E 7000                       		moveq	#0,d0
0000B570 101A                       		move.b	(a2)+,d0
0000B572 ED48                       		lsl.w	#6,d0
0000B574 0640 D000                  		addi.w	#-$3000,d0
0000B578 3240                       		movea.w	d0,a1
0000B57A 3341 003C                  		move.w	d1,$3C(a1)
0000B57E 51CA FFEE                  		dbf	d2,loc_B086
0000B582                            
0000B582                            locret_B09A:
0000B582 4E75                       		rts	
0000B584                            
0000B584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B584                            
0000B584                            
0000B584                            sub_B09C:
0000B584 45EA 0036                  		lea	$36(a2),a2
0000B588 7000                       		moveq	#0,d0
0000B58A 1012                       		move.b	(a2),d0
0000B58C 5212                       		addq.b	#1,(a2)
0000B58E 45F2 0001                  		lea	1(a2,d0.w),a2
0000B592 3009                       		move.w	a1,d0
0000B594 0440 D000                  		subi.w	#-$3000,d0
0000B598 EC48                       		lsr.w	#6,d0
0000B59A 0240 007F                  		andi.w	#$7F,d0
0000B59E 1480                       		move.b	d0,(a2)
0000B5A0 4E75                       		rts	
0000B5A2                            ; End of function sub_B09C
0000B5A2                            
0000B5A2                            ; ===========================================================================
0000B5A2                            
0000B5A2                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B5A2 4A28 0035                  		tst.b	$35(a0)
0000B5A6 6700                       		beq.s	loc_B0C6
0000B5A8 4A28 0001                  		tst.b	1(a0)
0000B5AC 6A00                       		bpl.s	Obj2F_DelFlames
0000B5AE                            
0000B5AE                            loc_B0C6:
0000B5AE 3028 002A                  		move.w	$2A(a0),d0
0000B5B2 0240 FF80                  		andi.w	#$FF80,d0
0000B5B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000B5BA 0441 0080                  		subi.w	#$80,d1
0000B5BE 0241 FF80                  		andi.w	#$FF80,d1
0000B5C2 9041                       		sub.w	d1,d0
0000B5C4 0C40 0280                  		cmpi.w	#$280,d0
0000B5C8 6200 0000                  		bhi.w	DeleteObject
0000B5CC 4E75                       		rts	
0000B5CE                            ; ===========================================================================
0000B5CE                            
0000B5CE                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B5CE 7400                       		moveq	#0,d2
0000B5D0                            
0000B5D0                            loc_B0E8:
0000B5D0 45E8 0036                  		lea	$36(a0),a2
0000B5D4 1412                       		move.b	(a2),d2
0000B5D6 421A                       		clr.b	(a2)+
0000B5D8 5302                       		subq.b	#1,d2
0000B5DA 6500                       		bcs.s	locret_B116
0000B5DC                            
0000B5DC                            loc_B0F4:
0000B5DC 7000                       		moveq	#0,d0
0000B5DE 1012                       		move.b	(a2),d0
0000B5E0 421A                       		clr.b	(a2)+
0000B5E2 ED48                       		lsl.w	#6,d0
0000B5E4 0640 D000                  		addi.w	#-$3000,d0
0000B5E8 3240                       		movea.w	d0,a1
0000B5EA 6100 0000                  		bsr.w	DeleteObject2
0000B5EE 51CA FFEC                  		dbf	d2,loc_B0F4
0000B5F2 117C 0000 0035             		move.b	#0,$35(a0)
0000B5F8 117C 0000 0034             		move.b	#0,$34(a0)
0000B5FE                            
0000B5FE                            locret_B116:
0000B5FE 4E75                       		rts	
0000B600                            ; ===========================================================================
0000B600                            ; ---------------------------------------------------------------------------
0000B600                            ; Collision data for large moving platforms (MZ)
0000B600                            ; ---------------------------------------------------------------------------
0000B600                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B64C                            		even
0000B64C                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B678                            		even
0000B678                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B6C4                            		even
0000B6C4                            ; ===========================================================================
0000B6C4                            ; ---------------------------------------------------------------------------
0000B6C4                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B6C4                            ; (appears when	you walk on sinking platforms)
0000B6C4                            ; ---------------------------------------------------------------------------
0000B6C4                            
0000B6C4                            Obj35:					; XREF: Obj_Index
0000B6C4 7000                       		moveq	#0,d0
0000B6C6 1028 0024                  		move.b	$24(a0),d0
0000B6CA 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B6CE 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B6D2                            ; ===========================================================================
0000B6D2 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B6D4 0000                       		dc.w loc_B238-Obj35_Index
0000B6D6 0000                       		dc.w Obj35_Move-Obj35_Index
0000B6D8                            ; ===========================================================================
0000B6D8                            
0000B6D8                            Obj35_Main:				; XREF: Obj35_Index
0000B6D8 5428 0024                  		addq.b	#2,$24(a0)
0000B6DC 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B6E4 317C 0345 0002             		move.w	#$345,2(a0)
0000B6EA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B6F0 117C 0004 0001             		move.b	#4,1(a0)
0000B6F6 117C 0001 0018             		move.b	#1,$18(a0)
0000B6FC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B702 117C 0008 0019             		move.b	#8,$19(a0)
0000B708 303C 00C8                  		move.w	#$C8,d0
0000B70C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B712 4A28 0028                  		tst.b	$28(a0)
0000B716 6700                       		beq.s	loc_B238
0000B718 5428 0024                  		addq.b	#2,$24(a0)
0000B71C 6000 0000                  		bra.w	Obj35_Move
0000B720                            ; ===========================================================================
0000B720                            
0000B720                            loc_B238:				; XREF: Obj35_Index
0000B720 2268 0030                  		movea.l	$30(a0),a1
0000B724 3228 0008                  		move.w	8(a0),d1
0000B728 9268 002A                  		sub.w	$2A(a0),d1
0000B72C 0641 000C                  		addi.w	#$C,d1
0000B730 3001                       		move.w	d1,d0
0000B732 E248                       		lsr.w	#1,d0
0000B734 1031 0000                  		move.b	(a1,d0.w),d0
0000B738 4440                       		neg.w	d0
0000B73A D068 002C                  		add.w	$2C(a0),d0
0000B73E 3400                       		move.w	d0,d2
0000B740 D068 003C                  		add.w	$3C(a0),d0
0000B744 3140 000C                  		move.w	d0,$C(a0)
0000B748 0C41 0084                  		cmpi.w	#$84,d1
0000B74C 6400                       		bcc.s	loc_B2B0
0000B74E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B756 0C41 0080                  		cmpi.w	#$80,d1
0000B75A 6400                       		bcc.s	loc_B2B0
0000B75C 2028 0008                  		move.l	8(a0),d0
0000B760 0680 0008 0000             		addi.l	#$80000,d0
0000B766 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B76C 6600                       		bne.s	loc_B2B0
0000B76E 6100 0000                  		bsr.w	SingleObjLoad2
0000B772 6600                       		bne.s	loc_B2B0
0000B774 12BC 0035                  		move.b	#$35,0(a1)
0000B778 3368 0008 0008             		move.w	8(a0),8(a1)
0000B77E 3342 002C                  		move.w	d2,$2C(a1)
0000B782 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B788 137C 0001 0028             		move.b	#1,$28(a1)
0000B78E 2468 0038                  		movea.l	$38(a0),a2
0000B792 6100 FDF0                  		bsr.w	sub_B09C
0000B796                            
0000B796                            loc_B2B0:
0000B796 6000                       		bra.s	Obj35_Animate
0000B798                            ; ===========================================================================
0000B798                            
0000B798                            Obj35_Move:				; XREF: Obj35_Index
0000B798 3028 002C                  		move.w	$2C(a0),d0
0000B79C D068 003C                  		add.w	$3C(a0),d0
0000B7A0 3140 000C                  		move.w	d0,$C(a0)
0000B7A4                            
0000B7A4                            Obj35_Animate:				; XREF: loc_B238
0000B7A4 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B7AA 6100 F4BA                  		bsr.w	AnimateSprite
0000B7AE 6000 0000                  		bra.w	DisplaySprite
0000B7B2                            ; ===========================================================================
0000B7B2                            Ani_obj35:
0000B7B2                            	include "_anim\obj35.asm"
0000B7B2                            ; ---------------------------------------------------------------------------
0000B7B2                            ; Animation script - fireball that sits on the	floor (MZ)
0000B7B2                            ; ---------------------------------------------------------------------------
0000B7B2 0000                       		dc.w byte_B2CE-Ani_obj35
0000B7B4 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B7BA                            		even
0000B7BA                            		even
0000B7BA                            
0000B7BA                            ; ---------------------------------------------------------------------------
0000B7BA                            ; Sprite mappings - large moving platforms (MZ)
0000B7BA                            ; ---------------------------------------------------------------------------
0000B7BA                            Map_obj2F:
0000B7BA                            	include "_maps\obj2F.asm"
0000B7BA                            ; ---------------------------------------------------------------------------
0000B7BA                            ; Sprite mappings - large moving platforms (MZ)
0000B7BA                            ; ---------------------------------------------------------------------------
0000B7BA 0000                       		dc.w byte_B2DA-Map_obj2F
0000B7BC 0000                       		dc.w byte_B31C-Map_obj2F
0000B7BE 0000                       		dc.w byte_B34F-Map_obj2F
0000B7C0 0D                         byte_B2DA:	dc.b $D
0000B7C1 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B7C6 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B7CB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7D0 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B7D5 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B7DA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B7DF D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B7E4 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B7E9 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B7EE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B7F3 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B7F8 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B7FD F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B802 0A                         byte_B31C:	dc.b $A
0000B803 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B808 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B80D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B812 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B817 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B81C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B821 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B826 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B82B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B830 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B835 06                         byte_B34F:	dc.b 6
0000B836 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B83B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B840 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B845 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B84A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B84F 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B854                            		even
0000B854                            		even
0000B854                            
0000B854                            ; ---------------------------------------------------------------------------
0000B854                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B854                            ; ---------------------------------------------------------------------------
0000B854                            Map_obj14:
0000B854                            	include "_maps\obj14.asm"
0000B854                            ; ---------------------------------------------------------------------------
0000B854                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B854                            ; ---------------------------------------------------------------------------
0000B854 0000                       		dc.w byte_B37A-Map_obj14
0000B856 0000                       		dc.w byte_B380-Map_obj14
0000B858 0000                       		dc.w byte_B386-Map_obj14
0000B85A 0000                       		dc.w byte_B38C-Map_obj14
0000B85C 0000                       		dc.w byte_B392-Map_obj14
0000B85E 0000                       		dc.w byte_B398-Map_obj14
0000B860 01                         byte_B37A:	dc.b 1
0000B861 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B866 01                         byte_B380:	dc.b 1
0000B867 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B86C 01                         byte_B386:	dc.b 1
0000B86D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B872 01                         byte_B38C:	dc.b 1
0000B873 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B878 01                         byte_B392:	dc.b 1
0000B879 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B87E 01                         byte_B398:	dc.b 1
0000B87F F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B884                            		even
0000B884                            		even
0000B884                            
0000B884                            ; ===========================================================================
0000B884                            ; ---------------------------------------------------------------------------
0000B884                            ; Object 30 - large green glassy blocks	(MZ)
0000B884                            ; ---------------------------------------------------------------------------
0000B884                            
0000B884                            Obj30:					; XREF: Obj_Index
0000B884 7000                       		moveq	#0,d0
0000B886 1028 0024                  		move.b	$24(a0),d0
0000B88A 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B88E 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B892 3028 0008                  		move.w	8(a0),d0
0000B896 0240 FF80                  		andi.w	#$FF80,d0
0000B89A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B89E 0441 0080                  		subi.w	#$80,d1
0000B8A2 0241 FF80                  		andi.w	#$FF80,d1
0000B8A6 9041                       		sub.w	d1,d0
0000B8A8 0C40 0280                  		cmpi.w	#$280,d0
0000B8AC 6200 0000                  		bhi.w	Obj30_Delete
0000B8B0 6000 0000                  		bra.w	DisplaySprite
0000B8B4                            ; ===========================================================================
0000B8B4                            
0000B8B4                            Obj30_Delete:
0000B8B4 6000 0000                  		bra.w	DeleteObject
0000B8B8                            ; ===========================================================================
0000B8B8 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B8BA 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B8BC 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B8BE 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B8C0 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B8C2                            
0000B8C2 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B8C5 0400 01                    		dc.b 4,	0, 1
0000B8C8 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B8CB 0800 01                    		dc.b 8,	0, 1
0000B8CE                            ; ===========================================================================
0000B8CE                            
0000B8CE                            Obj30_Main:				; XREF: Obj30_Index
0000B8CE 45F9 0000 B8C2             		lea	(Obj30_Vars1).l,a2
0000B8D4 7201                       		moveq	#1,d1
0000B8D6 117C 0048 0016             		move.b	#$48,$16(a0)
0000B8DC 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B8E2 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B8E4 45F9 0000 B8C8             		lea	(Obj30_Vars2).l,a2
0000B8EA 7201                       		moveq	#1,d1
0000B8EC 117C 0038 0016             		move.b	#$38,$16(a0)
0000B8F2                            
0000B8F2                            loc_B40C:
0000B8F2 2248                       		movea.l	a0,a1
0000B8F4 6000                       		bra.s	Obj30_Load	; load main object
0000B8F6                            ; ===========================================================================
0000B8F6                            
0000B8F6                            Obj30_Loop:
0000B8F6 6100 0000                  		bsr.w	SingleObjLoad2
0000B8FA 6600                       		bne.s	loc_B480
0000B8FC                            
0000B8FC                            Obj30_Load:				; XREF: Obj30_Main
0000B8FC 135A 0024                  		move.b	(a2)+,$24(a1)
0000B900 12BC 0030                  		move.b	#$30,0(a1)
0000B904 3368 0008 0008             		move.w	8(a0),8(a1)
0000B90A 101A                       		move.b	(a2)+,d0
0000B90C 4880                       		ext.w	d0
0000B90E D068 000C                  		add.w	$C(a0),d0
0000B912 3340 000C                  		move.w	d0,$C(a1)
0000B916 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B91E 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B924 137C 0004 0001             		move.b	#4,1(a1)
0000B92A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B930 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B936 137C 0020 0019             		move.b	#$20,$19(a1)
0000B93C 137C 0004 0018             		move.b	#4,$18(a1)
0000B942 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B946 2348 003C                  		move.l	a0,$3C(a1)
0000B94A 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B94E                            
0000B94E 137C 0010 0019             		move.b	#$10,$19(a1)
0000B954 137C 0003 0018             		move.b	#3,$18(a1)
0000B95A 5029 0028                  		addq.b	#8,$28(a1)
0000B95E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B964                            
0000B964                            loc_B480:
0000B964 317C 0090 0032             		move.w	#$90,$32(a0)
0000B96A 08E8 0004 0001             		bset	#4,1(a0)
0000B970                            
0000B970                            Obj30_Block012:				; XREF: Obj30_Index
0000B970 6100 0000                  		bsr.w	Obj30_Types
0000B974 323C 002B                  		move.w	#$2B,d1
0000B978 343C 0048                  		move.w	#$48,d2
0000B97C 363C 0049                  		move.w	#$49,d3
0000B980 3828 0008                  		move.w	8(a0),d4
0000B984 6000 0000                  		bra.w	SolidObject
0000B988                            ; ===========================================================================
0000B988                            
0000B988                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B988 2268 003C                  		movea.l	$3C(a0),a1
0000B98C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B992 6000 0000                  		bra.w	Obj30_Types
0000B996                            ; ===========================================================================
0000B996                            
0000B996                            Obj30_Block34:				; XREF: Obj30_Index
0000B996 6100 0000                  		bsr.w	Obj30_Types
0000B99A 323C 002B                  		move.w	#$2B,d1
0000B99E 343C 0038                  		move.w	#$38,d2
0000B9A2 363C 0039                  		move.w	#$39,d3
0000B9A6 3828 0008                  		move.w	8(a0),d4
0000B9AA 6000 0000                  		bra.w	SolidObject
0000B9AE                            ; ===========================================================================
0000B9AE                            
0000B9AE                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B9AE 2268 003C                  		movea.l	$3C(a0),a1
0000B9B2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9B8 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B9BE 6000 0002                  		bra.w	*+4
0000B9C2                            
0000B9C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9C2                            
0000B9C2                            
0000B9C2                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B9C2 7000                       		moveq	#0,d0
0000B9C4 1028 0028                  		move.b	$28(a0),d0
0000B9C8 0240 0007                  		andi.w	#7,d0
0000B9CC D040                       		add.w	d0,d0
0000B9CE 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B9D2 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B9D6                            ; End of function Obj30_Types
0000B9D6                            
0000B9D6                            ; ===========================================================================
0000B9D6 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B9D8 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B9DA 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B9DC 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B9DE 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B9E0                            ; ===========================================================================
0000B9E0                            
0000B9E0                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B9E0 4E75                       		rts	
0000B9E2                            ; ===========================================================================
0000B9E2                            
0000B9E2                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B9E2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9E6 323C 0040                  		move.w	#$40,d1
0000B9EA 6000                       		bra.s	loc_B514
0000B9EC                            ; ===========================================================================
0000B9EC                            
0000B9EC                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B9EC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9F0 323C 0040                  		move.w	#$40,d1
0000B9F4 4440                       		neg.w	d0
0000B9F6 D041                       		add.w	d1,d0
0000B9F8                            
0000B9F8                            loc_B514:				; XREF: Obj30_Type01
0000B9F8 0828 0003 0028             		btst	#3,$28(a0)
0000B9FE 6700                       		beq.s	loc_B526
0000BA00 4440                       		neg.w	d0
0000BA02 D041                       		add.w	d1,d0
0000BA04 E208                       		lsr.b	#1,d0
0000BA06 0640 0020                  		addi.w	#$20,d0
0000BA0A                            
0000BA0A                            loc_B526:
0000BA0A 6000 0000                  		bra.w	loc_B5EE
0000BA0E                            ; ===========================================================================
0000BA0E                            
0000BA0E                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BA0E 0828 0003 0028             		btst	#3,$28(a0)
0000BA14 6700                       		beq.s	loc_B53E
0000BA16 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA1A 0440 0010                  		subi.w	#$10,d0
0000BA1E 6000 0000                  		bra.w	loc_B5EE
0000BA22                            ; ===========================================================================
0000BA22                            
0000BA22                            loc_B53E:
0000BA22 0828 0003 0022             		btst	#3,$22(a0)
0000BA28 6600                       		bne.s	loc_B54E
0000BA2A 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA30 6000                       		bra.s	loc_B582
0000BA32                            ; ===========================================================================
0000BA32                            
0000BA32                            loc_B54E:
0000BA32 4A28 0034                  		tst.b	$34(a0)
0000BA36 6600                       		bne.s	loc_B582
0000BA38 117C 0001 0034             		move.b	#1,$34(a0)
0000BA3E 08E8 0000 0035             		bset	#0,$35(a0)
0000BA44 6700                       		beq.s	loc_B582
0000BA46 08E8 0007 0034             		bset	#7,$34(a0)
0000BA4C 317C 0010 0036             		move.w	#$10,$36(a0)
0000BA52 117C 000A 0038             		move.b	#$A,$38(a0)
0000BA58 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BA5E 6600                       		bne.s	loc_B582
0000BA60 317C 0040 0036             		move.w	#$40,$36(a0)
0000BA66                            
0000BA66                            loc_B582:
0000BA66 4A28 0034                  		tst.b	$34(a0)
0000BA6A 6A00                       		bpl.s	loc_B5AA
0000BA6C 4A28 0038                  		tst.b	$38(a0)
0000BA70 6700                       		beq.s	loc_B594
0000BA72 5328 0038                  		subq.b	#1,$38(a0)
0000BA76 6600                       		bne.s	loc_B5AA
0000BA78                            
0000BA78                            loc_B594:
0000BA78 4A68 0032                  		tst.w	$32(a0)
0000BA7C 6700                       		beq.s	loc_B5A4
0000BA7E 5368 0032                  		subq.w	#1,$32(a0)
0000BA82 5368 0036                  		subq.w	#1,$36(a0)
0000BA86 6600                       		bne.s	loc_B5AA
0000BA88                            
0000BA88                            loc_B5A4:
0000BA88 08A8 0007 0034             		bclr	#7,$34(a0)
0000BA8E                            
0000BA8E                            loc_B5AA:
0000BA8E 3028 0032                  		move.w	$32(a0),d0
0000BA92 6000                       		bra.s	loc_B5EE
0000BA94                            ; ===========================================================================
0000BA94                            
0000BA94                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BA94 0828 0003 0028             		btst	#3,$28(a0)
0000BA9A 6700                       		beq.s	Obj30_ChkSwitch
0000BA9C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BAA0 0440 0010                  		subi.w	#$10,d0
0000BAA4 6000                       		bra.s	loc_B5EE
0000BAA6                            ; ===========================================================================
0000BAA6                            
0000BAA6                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BAA6 4A28 0034                  		tst.b	$34(a0)
0000BAAA 6600                       		bne.s	loc_B5E0
0000BAAC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BAB0 7000                       		moveq	#0,d0
0000BAB2 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BAB6 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BAB8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BABC 6700                       		beq.s	loc_B5EA	; if not, branch
0000BABE 117C 0001 0034             		move.b	#1,$34(a0)
0000BAC4                            
0000BAC4                            loc_B5E0:
0000BAC4 4A68 0032                  		tst.w	$32(a0)
0000BAC8 6700                       		beq.s	loc_B5EA
0000BACA 5568 0032                  		subq.w	#2,$32(a0)
0000BACE                            
0000BACE                            loc_B5EA:
0000BACE 3028 0032                  		move.w	$32(a0),d0
0000BAD2                            
0000BAD2                            loc_B5EE:
0000BAD2 3228 0030                  		move.w	$30(a0),d1
0000BAD6 9240                       		sub.w	d0,d1
0000BAD8 3141 000C                  		move.w	d1,$C(a0)
0000BADC 4E75                       		rts	
0000BADE                            ; ===========================================================================
0000BADE                            ; ---------------------------------------------------------------------------
0000BADE                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BADE                            ; ---------------------------------------------------------------------------
0000BADE                            Map_obj30:
0000BADE                            	include "_maps\obj30.asm"
0000BADE                            ; ---------------------------------------------------------------------------
0000BADE                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BADE                            ; ---------------------------------------------------------------------------
0000BADE 0000                       		dc.w byte_B600-Map_obj30
0000BAE0 0000                       		dc.w byte_B63D-Map_obj30
0000BAE2 0000                       		dc.w byte_B648-Map_obj30
0000BAE4 0C                         byte_B600:	dc.b $C
0000BAE5 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BAEA B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BAEF C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BAF4 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BAF9 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BAFE E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BB03 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BB08 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BB0D 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BB12 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BB17 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BB1C 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB21 02                         byte_B63D:	dc.b 2
0000BB22 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB27 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB2C 0A                         byte_B648:	dc.b $A
0000BB2D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BB32 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BB37 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BB3C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BB41 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BB46 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BB4B 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BB50 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BB55 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BB5A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BB60 00                         		even
0000BB60 00                         		even
0000BB60                            
0000BB60                            ; ===========================================================================
0000BB60                            ; ---------------------------------------------------------------------------
0000BB60                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BB60                            ; ---------------------------------------------------------------------------
0000BB60                            
0000BB60                            Obj31:					; XREF: Obj_Index
0000BB60 7000                       		moveq	#0,d0
0000BB62 1028 0024                  		move.b	$24(a0),d0
0000BB66 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BB6A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BB6E                            ; ===========================================================================
0000BB6E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BB70 0000                       		dc.w loc_B798-Obj31_Index
0000BB72 0000                       		dc.w loc_B7FE-Obj31_Index
0000BB74 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BB76 0000                       		dc.w loc_B7E2-Obj31_Index
0000BB78                            
0000BB78 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BB7A 0100                       		dc.b 1,	0
0000BB7C                            
0000BB7C 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BB7F 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BB82 08CC 03                    		dc.b 8,	$CC, 3
0000BB85 06F0 02                    		dc.b 6,	$F0, 2
0000BB88                            
0000BB88 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BB8C 5000 7800                  		dc.w $5000, $7800
0000BB90 3800 5800                  		dc.w $3800, $5800
0000BB94 B800                       		dc.w $B800
0000BB96                            ; ===========================================================================
0000BB96                            
0000BB96                            Obj31_Main:				; XREF: Obj31_Index
0000BB96 7000                       		moveq	#0,d0
0000BB98 1028 0028                  		move.b	$28(a0),d0
0000BB9C 6A00                       		bpl.s	loc_B6CE
0000BB9E 0240 007F                  		andi.w	#$7F,d0
0000BBA2 D040                       		add.w	d0,d0
0000BBA4 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BBA8 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BBAC 101A                       		move.b	(a2)+,d0
0000BBAE 1140 0028                  		move.b	d0,$28(a0)
0000BBB2                            
0000BBB2                            loc_B6CE:
0000BBB2 0200 000F                  		andi.b	#$F,d0
0000BBB6 D040                       		add.w	d0,d0
0000BBB8 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BBBC 4A40                       		tst.w	d0
0000BBBE 6600                       		bne.s	loc_B6E0
0000BBC0 3142 0032                  		move.w	d2,$32(a0)
0000BBC4                            
0000BBC4                            loc_B6E0:
0000BBC4 45F9 0000 BB7C             		lea	(Obj31_Var).l,a2
0000BBCA 2248                       		movea.l	a0,a1
0000BBCC 7203                       		moveq	#3,d1
0000BBCE 6000                       		bra.s	Obj31_MakeStomper
0000BBD0                            ; ===========================================================================
0000BBD0                            
0000BBD0                            Obj31_Loop:
0000BBD0 6100 0000                  		bsr.w	SingleObjLoad2
0000BBD4 6600 0000                  		bne.w	Obj31_SetSize
0000BBD8                            
0000BBD8                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BBD8 135A 0024                  		move.b	(a2)+,$24(a1)
0000BBDC 12BC 0031                  		move.b	#$31,0(a1)
0000BBE0 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBE6 101A                       		move.b	(a2)+,d0
0000BBE8 4880                       		ext.w	d0
0000BBEA D068 000C                  		add.w	$C(a0),d0
0000BBEE 3340 000C                  		move.w	d0,$C(a1)
0000BBF2 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BBFA 337C 0300 0002             		move.w	#$300,2(a1)
0000BC00 137C 0004 0001             		move.b	#4,1(a1)
0000BC06 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BC0C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BC12 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC18 3342 0034                  		move.w	d2,$34(a1)
0000BC1C 137C 0004 0018             		move.b	#4,$18(a1)
0000BC22 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC26 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC2C 6600                       		bne.s	loc_B76A
0000BC2E 5341                       		subq.w	#1,d1
0000BC30 1028 0028                  		move.b	$28(a0),d0
0000BC34 0240 00F0                  		andi.w	#$F0,d0
0000BC38 0C40 0020                  		cmpi.w	#$20,d0
0000BC3C 679A                       		beq.s	Obj31_MakeStomper
0000BC3E 137C 0038 0019             		move.b	#$38,$19(a1)
0000BC44 137C 0090 0020             		move.b	#$90,$20(a1)
0000BC4A 5241                       		addq.w	#1,d1
0000BC4C                            
0000BC4C                            loc_B76A:
0000BC4C 2348 003C                  		move.l	a0,$3C(a1)
0000BC50 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BC54                            
0000BC54 137C 0003 0018             		move.b	#3,$18(a1)
0000BC5A                            
0000BC5A                            Obj31_SetSize:
0000BC5A 7000                       		moveq	#0,d0
0000BC5C 1028 0028                  		move.b	$28(a0),d0
0000BC60 E648                       		lsr.w	#3,d0
0000BC62 0200 000E                  		andi.b	#$E,d0
0000BC66 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BC6A 115A 0019                  		move.b	(a2)+,$19(a0)
0000BC6E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BC72 6000                       		bra.s	loc_B798
0000BC74                            ; ===========================================================================
0000BC74 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BC76 3009                       		dc.b $30, 9
0000BC78 100A                       		dc.b $10, $A
0000BC7A                            ; ===========================================================================
0000BC7A                            
0000BC7A                            loc_B798:				; XREF: Obj31_Index
0000BC7A 6100 0000                  		bsr.w	Obj31_Types
0000BC7E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BC84 7200                       		moveq	#0,d1
0000BC86 1228 0019                  		move.b	$19(a0),d1
0000BC8A 0641 000B                  		addi.w	#$B,d1
0000BC8E 343C 000C                  		move.w	#$C,d2
0000BC92 363C 000D                  		move.w	#$D,d3
0000BC96 3828 0008                  		move.w	8(a0),d4
0000BC9A 6100 0000                  		bsr.w	SolidObject
0000BC9E 0828 0003 0022             		btst	#3,$22(a0)
0000BCA4 6700                       		beq.s	Obj31_Display
0000BCA6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BCAC 6400                       		bcc.s	Obj31_Display
0000BCAE 2448                       		movea.l	a0,a2
0000BCB0 41F8 D000                  		lea	($FFFFD000).w,a0
0000BCB4 4EB9 0000 0000             		jsr	KillSonic
0000BCBA 204A                       		movea.l	a2,a0
0000BCBC                            
0000BCBC                            Obj31_Display:
0000BCBC 6100 0000                  		bsr.w	DisplaySprite
0000BCC0 6000 0000                  		bra.w	Obj31_ChkDel
0000BCC4                            ; ===========================================================================
0000BCC4                            
0000BCC4                            loc_B7E2:				; XREF: Obj31_Index
0000BCC4 117C 0080 0016             		move.b	#$80,$16(a0)
0000BCCA 08E8 0004 0001             		bset	#4,1(a0)
0000BCD0 2268 003C                  		movea.l	$3C(a0),a1
0000BCD4 1029 0032                  		move.b	$32(a1),d0
0000BCD8 EA08                       		lsr.b	#5,d0
0000BCDA 5600                       		addq.b	#3,d0
0000BCDC 1140 001A                  		move.b	d0,$1A(a0)
0000BCE0                            
0000BCE0                            loc_B7FE:				; XREF: Obj31_Index
0000BCE0 2268 003C                  		movea.l	$3C(a0),a1
0000BCE4 7000                       		moveq	#0,d0
0000BCE6 1029 0032                  		move.b	$32(a1),d0
0000BCEA D068 0030                  		add.w	$30(a0),d0
0000BCEE 3140 000C                  		move.w	d0,$C(a0)
0000BCF2                            
0000BCF2                            Obj31_Display2:				; XREF: Obj31_Index
0000BCF2 6100 0000                  		bsr.w	DisplaySprite
0000BCF6                            
0000BCF6                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BCF6 3028 0008                  		move.w	8(a0),d0
0000BCFA 0240 FF80                  		andi.w	#$FF80,d0
0000BCFE 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD02 0441 0080                  		subi.w	#$80,d1
0000BD06 0241 FF80                  		andi.w	#$FF80,d1
0000BD0A 9041                       		sub.w	d1,d0
0000BD0C 0C40 0280                  		cmpi.w	#$280,d0
0000BD10 6200 0000                  		bhi.w	DeleteObject
0000BD14 4E75                       		rts	
0000BD16                            ; ===========================================================================
0000BD16                            
0000BD16                            Obj31_Types:				; XREF: loc_B798
0000BD16 1028 0028                  		move.b	$28(a0),d0
0000BD1A 0240 000F                  		andi.w	#$F,d0
0000BD1E D040                       		add.w	d0,d0
0000BD20 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD24 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD28                            ; ===========================================================================
0000BD28 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD2A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD2C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD2E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD30 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD32 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD34 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD36                            ; ===========================================================================
0000BD36                            
0000BD36                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BD36 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BD3A 7000                       		moveq	#0,d0
0000BD3C 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BD40 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BD44 6700                       		beq.s	loc_B8A8	; if not, branch
0000BD46 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BD4A 6A00                       		bpl.s	loc_B872
0000BD4C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD52 6700                       		beq.s	loc_B8A0
0000BD54                            
0000BD54                            loc_B872:
0000BD54 4A68 0032                  		tst.w	$32(a0)
0000BD58 6700                       		beq.s	loc_B8A0
0000BD5A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD5E 0200 000F                  		andi.b	#$F,d0
0000BD62 6600                       		bne.s	loc_B892
0000BD64 4A28 0001                  		tst.b	1(a0)
0000BD68 6A00                       		bpl.s	loc_B892
0000BD6A 303C 00C7                  		move.w	#$C7,d0
0000BD6E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BD74                            
0000BD74                            loc_B892:
0000BD74 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BD7A 6400                       		bcc.s	Obj31_Restart
0000BD7C 317C 0000 0032             		move.w	#0,$32(a0)
0000BD82                            
0000BD82                            loc_B8A0:
0000BD82 317C 0000 0012             		move.w	#0,$12(a0)
0000BD88 6000                       		bra.s	Obj31_Restart
0000BD8A                            ; ===========================================================================
0000BD8A                            
0000BD8A                            loc_B8A8:				; XREF: Obj31_Type00
0000BD8A 3228 0034                  		move.w	$34(a0),d1
0000BD8E B268 0032                  		cmp.w	$32(a0),d1
0000BD92 6700                       		beq.s	Obj31_Restart
0000BD94 3028 0012                  		move.w	$12(a0),d0
0000BD98 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BD9E D168 0032                  		add.w	d0,$32(a0)
0000BDA2 B268 0032                  		cmp.w	$32(a0),d1
0000BDA6 6200                       		bhi.s	Obj31_Restart
0000BDA8 3141 0032                  		move.w	d1,$32(a0)
0000BDAC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BDB2 4A28 0001                  		tst.b	1(a0)
0000BDB6 6A00                       		bpl.s	Obj31_Restart
0000BDB8 303C 00BD                  		move.w	#$BD,d0
0000BDBC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BDC2                            
0000BDC2                            Obj31_Restart:
0000BDC2 7000                       		moveq	#0,d0
0000BDC4 1028 0032                  		move.b	$32(a0),d0
0000BDC8 D068 0030                  		add.w	$30(a0),d0
0000BDCC 3140 000C                  		move.w	d0,$C(a0)
0000BDD0 4E75                       		rts	
0000BDD2                            ; ===========================================================================
0000BDD2                            
0000BDD2                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BDD2 4A68 0036                  		tst.w	$36(a0)
0000BDD6 6700                       		beq.s	loc_B938
0000BDD8 4A68 0038                  		tst.w	$38(a0)
0000BDDC 6700                       		beq.s	loc_B902
0000BDDE 5368 0038                  		subq.w	#1,$38(a0)
0000BDE2 6000                       		bra.s	loc_B97C
0000BDE4                            ; ===========================================================================
0000BDE4                            
0000BDE4                            loc_B902:
0000BDE4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BDE8 0200 000F                  		andi.b	#$F,d0
0000BDEC 6600                       		bne.s	loc_B91C
0000BDEE 4A28 0001                  		tst.b	1(a0)
0000BDF2 6A00                       		bpl.s	loc_B91C
0000BDF4 303C 00C7                  		move.w	#$C7,d0
0000BDF8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BDFE                            
0000BDFE                            loc_B91C:
0000BDFE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE04 6400                       		bcc.s	loc_B97C
0000BE06 317C 0000 0032             		move.w	#0,$32(a0)
0000BE0C 317C 0000 0012             		move.w	#0,$12(a0)
0000BE12 317C 0000 0036             		move.w	#0,$36(a0)
0000BE18 6000                       		bra.s	loc_B97C
0000BE1A                            ; ===========================================================================
0000BE1A                            
0000BE1A                            loc_B938:				; XREF: Obj31_Type01
0000BE1A 3228 0034                  		move.w	$34(a0),d1
0000BE1E B268 0032                  		cmp.w	$32(a0),d1
0000BE22 6700                       		beq.s	loc_B97C
0000BE24 3028 0012                  		move.w	$12(a0),d0
0000BE28 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE2E D168 0032                  		add.w	d0,$32(a0)
0000BE32 B268 0032                  		cmp.w	$32(a0),d1
0000BE36 6200                       		bhi.s	loc_B97C
0000BE38 3141 0032                  		move.w	d1,$32(a0)
0000BE3C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE42 317C 0001 0036             		move.w	#1,$36(a0)
0000BE48 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BE4E 4A28 0001                  		tst.b	1(a0)
0000BE52 6A00                       		bpl.s	loc_B97C
0000BE54 303C 00BD                  		move.w	#$BD,d0
0000BE58 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE5E                            
0000BE5E                            loc_B97C:
0000BE5E 6000 FF62                  		bra.w	Obj31_Restart
0000BE62                            ; ===========================================================================
0000BE62                            
0000BE62                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BE62 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE66 9068 0008                  		sub.w	8(a0),d0
0000BE6A 6400                       		bcc.s	loc_B98C
0000BE6C 4440                       		neg.w	d0
0000BE6E                            
0000BE6E                            loc_B98C:
0000BE6E 0C40 0090                  		cmpi.w	#$90,d0
0000BE72 6400                       		bcc.s	loc_B996
0000BE74 5228 0028                  		addq.b	#1,$28(a0)
0000BE78                            
0000BE78                            loc_B996:
0000BE78 6000 FF48                  		bra.w	Obj31_Restart
0000BE7C                            ; ===========================================================================
0000BE7C                            ; ---------------------------------------------------------------------------
0000BE7C                            ; Object 45 - spiked metal block from beta version (MZ)
0000BE7C                            ; ---------------------------------------------------------------------------
0000BE7C                            
0000BE7C                            Obj45:					; XREF: Obj_Index
0000BE7C 7000                       		moveq	#0,d0
0000BE7E 1028 0024                  		move.b	$24(a0),d0
0000BE82 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BE86 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BE8A                            ; ===========================================================================
0000BE8A 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BE8C 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BE8E 0000                       		dc.w loc_BA8E-Obj45_Index
0000BE90 0000                       		dc.w Obj45_Display-Obj45_Index
0000BE92 0000                       		dc.w loc_BA7A-Obj45_Index
0000BE94                            
0000BE94 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BE97 04E4 01                    		dc.b	4, $E4,	  1
0000BE9A 0834 03                    		dc.b	8, $34,	  3
0000BE9D 0628 02                    		dc.b	6, $28,	  2
0000BEA0                            
0000BEA0 3800                       word_B9BE:	dc.w $3800
0000BEA2 A000                       		dc.w -$6000
0000BEA4 5000                       		dc.w $5000
0000BEA6                            ; ===========================================================================
0000BEA6                            
0000BEA6                            Obj45_Main:				; XREF: Obj45_Index
0000BEA6 7000                       		moveq	#0,d0
0000BEA8 1028 0028                  		move.b	$28(a0),d0
0000BEAC D040                       		add.w	d0,d0
0000BEAE 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BEB2 45F9 0000 BE94             		lea	(Obj45_Var).l,a2
0000BEB8 2248                       		movea.l	a0,a1
0000BEBA 7203                       		moveq	#3,d1
0000BEBC 6000                       		bra.s	Obj45_Load
0000BEBE                            ; ===========================================================================
0000BEBE                            
0000BEBE                            Obj45_Loop:
0000BEBE 6100 0000                  		bsr.w	SingleObjLoad2
0000BEC2 6600                       		bne.s	loc_BA52
0000BEC4                            
0000BEC4                            Obj45_Load:				; XREF: Obj45_Main
0000BEC4 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEC8 12BC 0045                  		move.b	#$45,0(a1)
0000BECC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BED2 101A                       		move.b	(a2)+,d0
0000BED4 4880                       		ext.w	d0
0000BED6 D068 0008                  		add.w	8(a0),d0
0000BEDA 3340 0008                  		move.w	d0,8(a1)
0000BEDE 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BEE6 337C 0300 0002             		move.w	#$300,2(a1)
0000BEEC 137C 0004 0001             		move.b	#4,1(a1)
0000BEF2 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BEF8 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BEFE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF04 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF0A 3342 0034                  		move.w	d2,$34(a1)
0000BF0E 137C 0004 0018             		move.b	#4,$18(a1)
0000BF14 0C12 0001                  		cmpi.b	#1,(a2)
0000BF18 6600                       		bne.s	loc_BA40
0000BF1A 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF20                            
0000BF20                            loc_BA40:
0000BF20 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF24 2348 003C                  		move.l	a0,$3C(a1)
0000BF28 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF2C                            
0000BF2C 137C 0003 0018             		move.b	#3,$18(a1)
0000BF32                            
0000BF32                            loc_BA52:
0000BF32 117C 0010 0019             		move.b	#$10,$19(a0)
0000BF38                            
0000BF38                            Obj45_Solid:				; XREF: Obj45_Index
0000BF38 3F28 0008                  		move.w	8(a0),-(sp)
0000BF3C 6100 0000                  		bsr.w	Obj45_Move
0000BF40 323C 0017                  		move.w	#$17,d1
0000BF44 343C 0020                  		move.w	#$20,d2
0000BF48 363C 0020                  		move.w	#$20,d3
0000BF4C 381F                       		move.w	(sp)+,d4
0000BF4E 6100 0000                  		bsr.w	SolidObject
0000BF52 6100 0000                  		bsr.w	DisplaySprite
0000BF56 6000 0000                  		bra.w	Obj45_ChkDel
0000BF5A                            ; ===========================================================================
0000BF5A                            
0000BF5A                            loc_BA7A:				; XREF: Obj45_Index
0000BF5A 2268 003C                  		movea.l	$3C(a0),a1
0000BF5E 1029 0032                  		move.b	$32(a1),d0
0000BF62 0600 0010                  		addi.b	#$10,d0
0000BF66 EA08                       		lsr.b	#5,d0
0000BF68 5600                       		addq.b	#3,d0
0000BF6A 1140 001A                  		move.b	d0,$1A(a0)
0000BF6E                            
0000BF6E                            loc_BA8E:				; XREF: Obj45_Index
0000BF6E 2268 003C                  		movea.l	$3C(a0),a1
0000BF72 7000                       		moveq	#0,d0
0000BF74 1029 0032                  		move.b	$32(a1),d0
0000BF78 4440                       		neg.w	d0
0000BF7A D068 0030                  		add.w	$30(a0),d0
0000BF7E 3140 0008                  		move.w	d0,8(a0)
0000BF82                            
0000BF82                            Obj45_Display:				; XREF: Obj45_Index
0000BF82 6100 0000                  		bsr.w	DisplaySprite
0000BF86                            
0000BF86                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BF86 3028 003A                  		move.w	$3A(a0),d0
0000BF8A 0240 FF80                  		andi.w	#$FF80,d0
0000BF8E 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF92 0441 0080                  		subi.w	#$80,d1
0000BF96 0241 FF80                  		andi.w	#$FF80,d1
0000BF9A 9041                       		sub.w	d1,d0
0000BF9C 0C40 0280                  		cmpi.w	#$280,d0
0000BFA0 6200 0000                  		bhi.w	DeleteObject
0000BFA4 4E75                       		rts	
0000BFA6                            
0000BFA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFA6                            
0000BFA6                            
0000BFA6                            Obj45_Move:				; XREF: Obj45_Solid
0000BFA6 7000                       		moveq	#0,d0
0000BFA8 1028 0028                  		move.b	$28(a0),d0
0000BFAC D040                       		add.w	d0,d0
0000BFAE 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BFB2 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BFB6                            ; End of function Obj45_Move
0000BFB6                            
0000BFB6                            ; ===========================================================================
0000BFB6 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BFB8 0000                       		dc.w loc_BADA-off_BAD6
0000BFBA                            ; ===========================================================================
0000BFBA                            
0000BFBA                            loc_BADA:				; XREF: off_BAD6
0000BFBA 4A68 0036                  		tst.w	$36(a0)
0000BFBE 6700                       		beq.s	loc_BB08
0000BFC0 4A68 0038                  		tst.w	$38(a0)
0000BFC4 6700                       		beq.s	loc_BAEC
0000BFC6 5368 0038                  		subq.w	#1,$38(a0)
0000BFCA 6000                       		bra.s	loc_BB3C
0000BFCC                            ; ===========================================================================
0000BFCC                            
0000BFCC                            loc_BAEC:
0000BFCC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFD2 6400                       		bcc.s	loc_BB3C
0000BFD4 317C 0000 0032             		move.w	#0,$32(a0)
0000BFDA 317C 0000 0010             		move.w	#0,$10(a0)
0000BFE0 317C 0000 0036             		move.w	#0,$36(a0)
0000BFE6 6000                       		bra.s	loc_BB3C
0000BFE8                            ; ===========================================================================
0000BFE8                            
0000BFE8                            loc_BB08:				; XREF: loc_BADA
0000BFE8 3228 0034                  		move.w	$34(a0),d1
0000BFEC B268 0032                  		cmp.w	$32(a0),d1
0000BFF0 6700                       		beq.s	loc_BB3C
0000BFF2 3028 0010                  		move.w	$10(a0),d0
0000BFF6 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BFFC D168 0032                  		add.w	d0,$32(a0)
0000C000 B268 0032                  		cmp.w	$32(a0),d1
0000C004 6200                       		bhi.s	loc_BB3C
0000C006 3141 0032                  		move.w	d1,$32(a0)
0000C00A 317C 0000 0010             		move.w	#0,$10(a0)
0000C010 317C 0001 0036             		move.w	#1,$36(a0)
0000C016 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C01C                            
0000C01C                            loc_BB3C:
0000C01C 7000                       		moveq	#0,d0
0000C01E 1028 0032                  		move.b	$32(a0),d0
0000C022 4440                       		neg.w	d0
0000C024 D068 0030                  		add.w	$30(a0),d0
0000C028 3140 0008                  		move.w	d0,8(a0)
0000C02C 4E75                       		rts	
0000C02E                            ; ===========================================================================
0000C02E                            ; ---------------------------------------------------------------------------
0000C02E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C02E                            ; ---------------------------------------------------------------------------
0000C02E                            Map_obj31:
0000C02E                            	include "_maps\obj31.asm"
0000C02E                            ; ---------------------------------------------------------------------------
0000C02E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C02E                            ; ---------------------------------------------------------------------------
0000C02E 0000                       		dc.w byte_BB64-Map_obj31
0000C030 0000                       		dc.w byte_BB7E-Map_obj31
0000C032 0000                       		dc.w byte_BB98-Map_obj31
0000C034 0000                       		dc.w byte_BB9E-Map_obj31
0000C036 0000                       		dc.w byte_BBA9-Map_obj31
0000C038 0000                       		dc.w byte_BBBE-Map_obj31
0000C03A 0000                       		dc.w byte_BBDD-Map_obj31
0000C03C 0000                       		dc.w byte_BC06-Map_obj31
0000C03E 0000                       		dc.w byte_BC06-Map_obj31
0000C040 0000                       		dc.w byte_BC39-Map_obj31
0000C042 0000                       		dc.w byte_BC53-Map_obj31
0000C044 05                         byte_BB64:	dc.b 5
0000C045 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C04A F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C04F EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C054 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C059 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C05E 05                         byte_BB7E:	dc.b 5
0000C05F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C064 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C069 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C06E F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C073 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C078 01                         byte_BB98:	dc.b 1
0000C079 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C07E 02                         byte_BB9E:	dc.b 2
0000C07F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C084 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C089 04                         byte_BBA9:	dc.b 4
0000C08A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C08F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C094 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C099 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C09E 06                         byte_BBBE:	dc.b 6
0000C09F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0A4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0A9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0AE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0B3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0B8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0BD 08                         byte_BBDD:	dc.b 8
0000C0BE A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0C3 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0C8 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0CD D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0D2 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0D7 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0DC 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0E1 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0E6 0A                         byte_BC06:	dc.b $A
0000C0E7 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C0EC 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C0F1 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0F6 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0FB C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C100 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C105 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C10A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C10F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C114 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C119 05                         byte_BC39:	dc.b 5
0000C11A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C11F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C124 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C129 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C12E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C133 01                         byte_BC53:	dc.b 1
0000C134 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C13A 00                         		even
0000C13A 00                         		even
0000C13A                            
0000C13A                            ; ---------------------------------------------------------------------------
0000C13A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C13A                            ; ---------------------------------------------------------------------------
0000C13A                            Map_obj45:
0000C13A                            	include "_maps\obj45.asm"
0000C13A                            ; ---------------------------------------------------------------------------
0000C13A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C13A                            ; ---------------------------------------------------------------------------
0000C13A 0000                       		dc.w byte_BC6C-Map_obj45
0000C13C 0000                       		dc.w byte_BC7C-Map_obj45
0000C13E 0000                       		dc.w byte_BC8C-Map_obj45
0000C140 0000                       		dc.w byte_BC92-Map_obj45
0000C142 0000                       		dc.w byte_BC9D-Map_obj45
0000C144 0000                       		dc.w byte_BCB2-Map_obj45
0000C146 0000                       		dc.w byte_BCD1-Map_obj45
0000C148 0000                       		dc.w byte_BCFA-Map_obj45
0000C14A 0000                       		dc.w byte_BCFA-Map_obj45
0000C14C 03                         byte_BC6C:	dc.b 3
0000C14D E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C152 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C157 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C15C 03                         byte_BC7C:	dc.b 3
0000C15D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C162 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C167 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C16C 01                         byte_BC8C:	dc.b 1
0000C16D F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C172 02                         byte_BC92:	dc.b 2
0000C173 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C178 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C17D 04                         byte_BC9D:	dc.b 4
0000C17E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C183 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C188 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C18D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C192 06                         byte_BCB2:	dc.b 6
0000C193 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C198 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C19D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1A2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1A7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1AC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1B1 08                         byte_BCD1:	dc.b 8
0000C1B2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1B7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1BC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1C1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1C6 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1CB F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1D0 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1D5 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1DA 08                         byte_BCFA:	dc.b 8
0000C1DB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1E0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1E5 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1EA F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1EF F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1F4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1F9 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1FE F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C203 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C208 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C20E 00                         		even
0000C20E 00                         		even
0000C20E                            
0000C20E                            ; ===========================================================================
0000C20E                            ; ---------------------------------------------------------------------------
0000C20E                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C20E                            ; ---------------------------------------------------------------------------
0000C20E                            
0000C20E                            Obj32:					; XREF: Obj_Index
0000C20E 7000                       		moveq	#0,d0
0000C210 1028 0024                  		move.b	$24(a0),d0
0000C214 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C218 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C21C                            ; ===========================================================================
0000C21C 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C21E 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C220                            ; ===========================================================================
0000C220                            
0000C220                            Obj32_Main:				; XREF: Obj32_Index
0000C220 5428 0024                  		addq.b	#2,$24(a0)
0000C224 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C22C 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C232 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C238 6700                       		beq.s	loc_BD60
0000C23A 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C240                            
0000C240                            loc_BD60:
0000C240 117C 0004 0001             		move.b	#4,1(a0)
0000C246 117C 0010 0019             		move.b	#$10,$19(a0)
0000C24C 117C 0004 0018             		move.b	#4,$18(a0)
0000C252 5668 000C                  		addq.w	#3,$C(a0)
0000C256                            
0000C256                            Obj32_Pressed:				; XREF: Obj32_Index
0000C256 4A28 0001                  		tst.b	1(a0)
0000C25A 6A00                       		bpl.s	Obj32_Display
0000C25C 323C 001B                  		move.w	#$1B,d1
0000C260 343C 0005                  		move.w	#5,d2
0000C264 363C 0005                  		move.w	#5,d3
0000C268 3828 0008                  		move.w	8(a0),d4
0000C26C 6100 0000                  		bsr.w	SolidObject
0000C270 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C276 1028 0028                  		move.b	$28(a0),d0
0000C27A 0240 000F                  		andi.w	#$F,d0
0000C27E 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C282 47F3 0000                  		lea	(a3,d0.w),a3
0000C286 7600                       		moveq	#0,d3
0000C288 0828 0006 0028             		btst	#6,$28(a0)
0000C28E 6700                       		beq.s	loc_BDB2
0000C290 7607                       		moveq	#7,d3
0000C292                            
0000C292                            loc_BDB2:
0000C292 4A28 0028                  		tst.b	$28(a0)
0000C296 6A00                       		bpl.s	loc_BDBE
0000C298 6100 0000                  		bsr.w	Obj32_MZBlock
0000C29C 6600                       		bne.s	loc_BDC8
0000C29E                            
0000C29E                            loc_BDBE:
0000C29E 4A28 0025                  		tst.b	$25(a0)
0000C2A2 6600                       		bne.s	loc_BDC8
0000C2A4 0793                       		bclr	d3,(a3)
0000C2A6 6000                       		bra.s	loc_BDDE
0000C2A8                            ; ===========================================================================
0000C2A8                            
0000C2A8                            loc_BDC8:
0000C2A8 4A13                       		tst.b	(a3)
0000C2AA 6600                       		bne.s	loc_BDD6
0000C2AC 303C 00CD                  		move.w	#$CD,d0
0000C2B0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C2B6                            
0000C2B6                            loc_BDD6:
0000C2B6 07D3                       		bset	d3,(a3)
0000C2B8 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C2BE                            
0000C2BE                            loc_BDDE:
0000C2BE 0828 0005 0028             		btst	#5,$28(a0)
0000C2C4 6700                       		beq.s	Obj32_Display
0000C2C6 5328 001E                  		subq.b	#1,$1E(a0)
0000C2CA 6A00                       		bpl.s	Obj32_Display
0000C2CC 117C 0007 001E             		move.b	#7,$1E(a0)
0000C2D2 0868 0001 001A             		bchg	#1,$1A(a0)
0000C2D8                            
0000C2D8                            Obj32_Display:
0000C2D8 6100 0000                  		bsr.w	DisplaySprite
0000C2DC 3028 0008                  		move.w	8(a0),d0
0000C2E0 0240 FF80                  		andi.w	#$FF80,d0
0000C2E4 3238 F700                  		move.w	($FFFFF700).w,d1
0000C2E8 0441 0080                  		subi.w	#$80,d1
0000C2EC 0241 FF80                  		andi.w	#$FF80,d1
0000C2F0 9041                       		sub.w	d1,d0
0000C2F2 0C40 0280                  		cmpi.w	#$280,d0
0000C2F6 6200 0000                  		bhi.w	Obj32_Delete
0000C2FA 4E75                       		rts	
0000C2FC                            ; ===========================================================================
0000C2FC                            
0000C2FC                            Obj32_Delete:
0000C2FC 6100 0000                  		bsr.w	DeleteObject
0000C300 4E75                       		rts	
0000C302                            
0000C302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C302                            
0000C302                            
0000C302                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C302 3F03                       		move.w	d3,-(sp)
0000C304 3428 0008                  		move.w	8(a0),d2
0000C308 3628 000C                  		move.w	$C(a0),d3
0000C30C 0442 0010                  		subi.w	#$10,d2
0000C310 5143                       		subq.w	#8,d3
0000C312 383C 0020                  		move.w	#$20,d4
0000C316 3A3C 0010                  		move.w	#$10,d5
0000C31A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C31E 3C3C 005F                  		move.w	#$5F,d6
0000C322                            
0000C322                            Obj32_MZLoop:
0000C322 4A29 0001                  		tst.b	1(a1)
0000C326 6A00                       		bpl.s	loc_BE4E
0000C328 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C32C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C32E                            
0000C32E                            loc_BE4E:
0000C32E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C332 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C336                            
0000C336 361F                       		move.w	(sp)+,d3
0000C338 7000                       		moveq	#0,d0
0000C33A                            
0000C33A                            locret_BE5A:
0000C33A 4E75                       		rts	
0000C33C                            ; ===========================================================================
0000C33C 1010                       Obj32_MZData:	dc.b $10, $10
0000C33E                            ; ===========================================================================
0000C33E                            
0000C33E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C33E 7001                       		moveq	#1,d0
0000C340 0240 003F                  		andi.w	#$3F,d0
0000C344 D040                       		add.w	d0,d0
0000C346 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C34A 121A                       		move.b	(a2)+,d1
0000C34C 4881                       		ext.w	d1
0000C34E 3029 0008                  		move.w	8(a1),d0
0000C352 9041                       		sub.w	d1,d0
0000C354 9042                       		sub.w	d2,d0
0000C356 6400                       		bcc.s	loc_BE80
0000C358 D241                       		add.w	d1,d1
0000C35A D041                       		add.w	d1,d0
0000C35C 6500                       		bcs.s	loc_BE84
0000C35E 60CE                       		bra.s	loc_BE4E
0000C360                            ; ===========================================================================
0000C360                            
0000C360                            loc_BE80:
0000C360 B044                       		cmp.w	d4,d0
0000C362 62CA                       		bhi.s	loc_BE4E
0000C364                            
0000C364                            loc_BE84:
0000C364 121A                       		move.b	(a2)+,d1
0000C366 4881                       		ext.w	d1
0000C368 3029 000C                  		move.w	$C(a1),d0
0000C36C 9041                       		sub.w	d1,d0
0000C36E 9043                       		sub.w	d3,d0
0000C370 6400                       		bcc.s	loc_BE9A
0000C372 D241                       		add.w	d1,d1
0000C374 D041                       		add.w	d1,d0
0000C376 6500                       		bcs.s	loc_BE9E
0000C378 60B4                       		bra.s	loc_BE4E
0000C37A                            ; ===========================================================================
0000C37A                            
0000C37A                            loc_BE9A:
0000C37A B045                       		cmp.w	d5,d0
0000C37C 62B0                       		bhi.s	loc_BE4E
0000C37E                            
0000C37E                            loc_BE9E:
0000C37E 361F                       		move.w	(sp)+,d3
0000C380 7001                       		moveq	#1,d0
0000C382 4E75                       		rts	
0000C384                            ; End of function Obj32_MZBlock
0000C384                            
0000C384                            ; ===========================================================================
0000C384                            ; ---------------------------------------------------------------------------
0000C384                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C384                            ; ---------------------------------------------------------------------------
0000C384                            Map_obj32:
0000C384                            	include "_maps\obj32.asm"
0000C384                            ; ---------------------------------------------------------------------------
0000C384                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C384                            ; ---------------------------------------------------------------------------
0000C384 0000                       		dc.w byte_BEAC-Map_obj32
0000C386 0000                       		dc.w byte_BEB7-Map_obj32
0000C388 0000                       		dc.w byte_BEC2-Map_obj32
0000C38A 0000                       		dc.w byte_BEB7-Map_obj32
0000C38C 02                         byte_BEAC:	dc.b 2
0000C38D F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C392 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C397 02                         byte_BEB7:	dc.b 2
0000C398 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C39D F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C3A2 02                         byte_BEC2:	dc.b 2
0000C3A3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C3A8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C3AD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C3B2                            		even
0000C3B2                            		even
0000C3B2                            
0000C3B2                            ; ===========================================================================
0000C3B2                            ; ---------------------------------------------------------------------------
0000C3B2                            ; Object 33 - pushable blocks (MZ, LZ)
0000C3B2                            ; ---------------------------------------------------------------------------
0000C3B2                            
0000C3B2                            Obj33:					; XREF: Obj_Index
0000C3B2 7000                       		moveq	#0,d0
0000C3B4 1028 0024                  		move.b	$24(a0),d0
0000C3B8 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C3BC 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C3C0                            ; ===========================================================================
0000C3C0 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C3C2 0000                       		dc.w loc_BF6E-Obj33_Index
0000C3C4 0000                       		dc.w loc_C02C-Obj33_Index
0000C3C6                            
0000C3C6 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C3C8 4001                       		dc.b $40, 1
0000C3CA                            ; ===========================================================================
0000C3CA                            
0000C3CA                            Obj33_Main:				; XREF: Obj33_Index
0000C3CA 5428 0024                  		addq.b	#2,$24(a0)
0000C3CE 117C 000F 0016             		move.b	#$F,$16(a0)
0000C3D4 117C 000F 0017             		move.b	#$F,$17(a0)
0000C3DA 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C3E2 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C3E8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C3EE 6600                       		bne.s	loc_BF16
0000C3F0 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C3F6                            
0000C3F6                            loc_BF16:
0000C3F6 117C 0004 0001             		move.b	#4,1(a0)
0000C3FC 117C 0003 0018             		move.b	#3,$18(a0)
0000C402 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C408 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C40E 7000                       		moveq	#0,d0
0000C410 1028 0028                  		move.b	$28(a0),d0
0000C414 D040                       		add.w	d0,d0
0000C416 0240 000E                  		andi.w	#$E,d0
0000C41A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C41E 115A 0019                  		move.b	(a2)+,$19(a0)
0000C422 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C426 4A28 0028                  		tst.b	$28(a0)
0000C42A 6700                       		beq.s	Obj33_ChkGone
0000C42C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C432                            
0000C432                            Obj33_ChkGone:
0000C432 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C436 7000                       		moveq	#0,d0
0000C438 1028 0023                  		move.b	$23(a0),d0
0000C43C 6700                       		beq.s	loc_BF6E
0000C43E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C444 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C44A 6600 0000                  		bne.w	DeleteObject
0000C44E                            
0000C44E                            loc_BF6E:				; XREF: Obj33_Index
0000C44E 4A28 0032                  		tst.b	$32(a0)
0000C452 6600 0000                  		bne.w	loc_C046
0000C456 7200                       		moveq	#0,d1
0000C458 1228 0019                  		move.b	$19(a0),d1
0000C45C 0641 000B                  		addi.w	#$B,d1
0000C460 343C 0010                  		move.w	#$10,d2
0000C464 363C 0011                  		move.w	#$11,d3
0000C468 3828 0008                  		move.w	8(a0),d4
0000C46C 6100 0000                  		bsr.w	loc_C186
0000C470 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C476 6600                       		bne.s	loc_BFC6	; if not, branch
0000C478 08A8 0007 0028             		bclr	#7,$28(a0)
0000C47E 3028 0008                  		move.w	8(a0),d0
0000C482 0C40 0A20                  		cmpi.w	#$A20,d0
0000C486 6500                       		bcs.s	loc_BFC6
0000C488 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C48C 6400                       		bcc.s	loc_BFC6
0000C48E 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C492 0440 001C                  		subi.w	#$1C,d0
0000C496 3140 000C                  		move.w	d0,$C(a0)
0000C49A 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C4A0 08E8 0007 0028             		bset	#7,$28(a0)
0000C4A6                            
0000C4A6                            loc_BFC6:
0000C4A6 3028 0008                  		move.w	8(a0),d0
0000C4AA 0240 FF80                  		andi.w	#$FF80,d0
0000C4AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4B2 0441 0080                  		subi.w	#$80,d1
0000C4B6 0241 FF80                  		andi.w	#$FF80,d1
0000C4BA 9041                       		sub.w	d1,d0
0000C4BC 0C40 0280                  		cmpi.w	#$280,d0
0000C4C0 6200                       		bhi.s	loc_BFE6
0000C4C2 6000 0000                  		bra.w	DisplaySprite
0000C4C6                            ; ===========================================================================
0000C4C6                            
0000C4C6                            loc_BFE6:
0000C4C6 3028 0034                  		move.w	$34(a0),d0
0000C4CA 0240 FF80                  		andi.w	#$FF80,d0
0000C4CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4D2 0441 0080                  		subi.w	#$80,d1
0000C4D6 0241 FF80                  		andi.w	#$FF80,d1
0000C4DA 9041                       		sub.w	d1,d0
0000C4DC 0C40 0280                  		cmpi.w	#$280,d0
0000C4E0 6200                       		bhi.s	loc_C016
0000C4E2 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C4E8 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C4EE 117C 0004 0024             		move.b	#4,$24(a0)
0000C4F4 6000                       		bra.s	loc_C02C
0000C4F6                            ; ===========================================================================
0000C4F6                            
0000C4F6                            loc_C016:
0000C4F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C4FA 7000                       		moveq	#0,d0
0000C4FC 1028 0023                  		move.b	$23(a0),d0
0000C500 6700                       		beq.s	loc_C028
0000C502 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C508                            
0000C508                            loc_C028:
0000C508 6000 0000                  		bra.w	DeleteObject
0000C50C                            ; ===========================================================================
0000C50C                            
0000C50C                            loc_C02C:				; XREF: Obj33_Index
0000C50C 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C510 6700                       		beq.s	locret_C044
0000C512 117C 0002 0024             		move.b	#2,$24(a0)
0000C518 4228 0032                  		clr.b	$32(a0)
0000C51C 4268 0010                  		clr.w	$10(a0)
0000C520 4268 0012                  		clr.w	$12(a0)
0000C524                            
0000C524                            locret_C044:
0000C524 4E75                       		rts	
0000C526                            ; ===========================================================================
0000C526                            
0000C526                            loc_C046:				; XREF: loc_BF6E
0000C526 3F28 0008                  		move.w	8(a0),-(sp)
0000C52A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C530 6400                       		bcc.s	loc_C056
0000C532 6100 0000                  		bsr.w	SpeedToPos
0000C536                            
0000C536                            loc_C056:
0000C536 0828 0001 0022             		btst	#1,$22(a0)
0000C53C 6700                       		beq.s	loc_C0A0
0000C53E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C544 4EB9 0000 0000             		jsr	ObjHitFloor
0000C54A 4A41                       		tst.w	d1
0000C54C 6A00 0000                  		bpl.w	loc_C09E
0000C550 D368 000C                  		add.w	d1,$C(a0)
0000C554 4268 0012                  		clr.w	$12(a0)
0000C558 08A8 0001 0022             		bclr	#1,$22(a0)
0000C55E 3011                       		move.w	(a1),d0
0000C560 0240 03FF                  		andi.w	#$3FF,d0
0000C564 0C40 016A                  		cmpi.w	#$16A,d0
0000C568 6500                       		bcs.s	loc_C09E
0000C56A 3028 0030                  		move.w	$30(a0),d0
0000C56E E640                       		asr.w	#3,d0
0000C570 3140 0010                  		move.w	d0,$10(a0)
0000C574 117C 0001 0032             		move.b	#1,$32(a0)
0000C57A 4268 000E                  		clr.w	$E(a0)
0000C57E                            
0000C57E                            loc_C09E:
0000C57E 6000                       		bra.s	loc_C0E6
0000C580                            ; ===========================================================================
0000C580                            
0000C580                            loc_C0A0:
0000C580 4A68 0010                  		tst.w	$10(a0)
0000C584 6700 0000                  		beq.w	loc_C0D6
0000C588 6B00                       		bmi.s	loc_C0BC
0000C58A 7600                       		moveq	#0,d3
0000C58C 1628 0019                  		move.b	$19(a0),d3
0000C590 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C596 4A41                       		tst.w	d1		; has block touched a wall?
0000C598 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C59A 6000                       		bra.s	loc_C0E6
0000C59C                            ; ===========================================================================
0000C59C                            
0000C59C                            loc_C0BC:
0000C59C 7600                       		moveq	#0,d3
0000C59E 1628 0019                  		move.b	$19(a0),d3
0000C5A2 4643                       		not.w	d3
0000C5A4 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C5AA 4A41                       		tst.w	d1		; has block touched a wall?
0000C5AC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C5AE 6000                       		bra.s	loc_C0E6
0000C5B0                            ; ===========================================================================
0000C5B0                            
0000C5B0                            Obj33_StopPush:
0000C5B0 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C5B4 6000                       		bra.s	loc_C0E6
0000C5B6                            ; ===========================================================================
0000C5B6                            
0000C5B6                            loc_C0D6:
0000C5B6 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C5BE 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C5C4 6400                       		bcc.s	loc_C104
0000C5C6                            
0000C5C6                            loc_C0E6:
0000C5C6 7200                       		moveq	#0,d1
0000C5C8 1228 0019                  		move.b	$19(a0),d1
0000C5CC 0641 000B                  		addi.w	#$B,d1
0000C5D0 343C 0010                  		move.w	#$10,d2
0000C5D4 363C 0011                  		move.w	#$11,d3
0000C5D8 381F                       		move.w	(sp)+,d4
0000C5DA 6100 0000                  		bsr.w	loc_C186
0000C5DE 6100                       		bsr.s	Obj33_ChkLava
0000C5E0 6000 FEC4                  		bra.w	loc_BFC6
0000C5E4                            ; ===========================================================================
0000C5E4                            
0000C5E4                            loc_C104:
0000C5E4 381F                       		move.w	(sp)+,d4
0000C5E6 43F8 D000                  		lea	($FFFFD000).w,a1
0000C5EA 08A9 0003 0022             		bclr	#3,$22(a1)
0000C5F0 08A8 0003 0022             		bclr	#3,$22(a0)
0000C5F6 6000 FECE                  		bra.w	loc_BFE6
0000C5FA                            ; ===========================================================================
0000C5FA                            
0000C5FA                            Obj33_ChkLava:
0000C5FA 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C600 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C602 343C FFE0                  		move.w	#-$20,d2
0000C606 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C60C 6700                       		beq.s	Obj33_LoadLava
0000C60E 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C614 6700                       		beq.s	Obj33_LoadLava
0000C616 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C61C 6700                       		beq.s	Obj33_LoadLava
0000C61E 4E75                       		rts	
0000C620                            ; ===========================================================================
0000C620                            
0000C620                            Obj33_ChkLava2:
0000C620 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C626 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C628 343C 0020                  		move.w	#$20,d2
0000C62C 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C632 6700                       		beq.s	Obj33_LoadLava
0000C634 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C63A 6700                       		beq.s	Obj33_LoadLava
0000C63C                            
0000C63C                            Obj33_NoLava:
0000C63C 4E75                       		rts	
0000C63E                            ; ===========================================================================
0000C63E                            
0000C63E                            Obj33_LoadLava:
0000C63E 6100 0000                  		bsr.w	SingleObjLoad
0000C642 6600                       		bne.s	locret_C184
0000C644 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C648 3368 0008 0008             		move.w	8(a0),8(a1)
0000C64E D569 0008                  		add.w	d2,8(a1)
0000C652 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C658 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C65E 2348 003C                  		move.l	a0,$3C(a1)
0000C662                            
0000C662                            locret_C184:
0000C662 4E75                       		rts	
0000C664                            ; ===========================================================================
0000C664                            
0000C664                            loc_C186:				; XREF: loc_BF6E
0000C664 1028 0025                  		move.b	$25(a0),d0
0000C668 6700 0000                  		beq.w	loc_C218
0000C66C 5500                       		subq.b	#2,d0
0000C66E 6600                       		bne.s	loc_C1AA
0000C670 6100 B3A0                  		bsr.w	ExitPlatform
0000C674 0829 0003 0022             		btst	#3,$22(a1)
0000C67A 6600                       		bne.s	loc_C1A4
0000C67C 4228 0025                  		clr.b	$25(a0)
0000C680 4E75                       		rts	
0000C682                            ; ===========================================================================
0000C682                            
0000C682                            loc_C1A4:
0000C682 3404                       		move.w	d4,d2
0000C684 6000 B8EA                  		bra.w	MvSonicOnPtfm
0000C688                            ; ===========================================================================
0000C688                            
0000C688                            loc_C1AA:
0000C688 5500                       		subq.b	#2,d0
0000C68A 6600                       		bne.s	loc_C1F2
0000C68C 6100 0000                  		bsr.w	SpeedToPos
0000C690 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C696 4EB9 0000 0000             		jsr	ObjHitFloor
0000C69C 4A41                       		tst.w	d1
0000C69E 6A00 0000                  		bpl.w	locret_C1F0
0000C6A2 D368 000C                  		add.w	d1,$C(a0)
0000C6A6 4268 0012                  		clr.w	$12(a0)
0000C6AA 4228 0025                  		clr.b	$25(a0)
0000C6AE 3011                       		move.w	(a1),d0
0000C6B0 0240 03FF                  		andi.w	#$3FF,d0
0000C6B4 0C40 016A                  		cmpi.w	#$16A,d0
0000C6B8 6500                       		bcs.s	locret_C1F0
0000C6BA 3028 0030                  		move.w	$30(a0),d0
0000C6BE E640                       		asr.w	#3,d0
0000C6C0 3140 0010                  		move.w	d0,$10(a0)
0000C6C4 117C 0001 0032             		move.b	#1,$32(a0)
0000C6CA 4268 000E                  		clr.w	$E(a0)
0000C6CE                            
0000C6CE                            locret_C1F0:
0000C6CE 4E75                       		rts	
0000C6D0                            ; ===========================================================================
0000C6D0                            
0000C6D0                            loc_C1F2:
0000C6D0 6100 0000                  		bsr.w	SpeedToPos
0000C6D4 3028 0008                  		move.w	8(a0),d0
0000C6D8 0240 000C                  		andi.w	#$C,d0
0000C6DC 6600 0000                  		bne.w	locret_C2E4
0000C6E0 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C6E6 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C6EC 4268 0010                  		clr.w	$10(a0)
0000C6F0 5528 0025                  		subq.b	#2,$25(a0)
0000C6F4 4E75                       		rts	
0000C6F6                            ; ===========================================================================
0000C6F6                            
0000C6F6                            loc_C218:
0000C6F6 6100 0000                  		bsr.w	loc_FAC8
0000C6FA 4A44                       		tst.w	d4
0000C6FC 6700 0000                  		beq.w	locret_C2E4
0000C700 6B00 0000                  		bmi.w	locret_C2E4
0000C704 4A28 0032                  		tst.b	$32(a0)
0000C708 6700                       		beq.s	loc_C230
0000C70A 6000 0000                  		bra.w	locret_C2E4
0000C70E                            ; ===========================================================================
0000C70E                            
0000C70E                            loc_C230:
0000C70E 4A40                       		tst.w	d0
0000C710 6700 0000                  		beq.w	locret_C2E4
0000C714 6B00                       		bmi.s	loc_C268
0000C716 0829 0000 0022             		btst	#0,$22(a1)
0000C71C 6600 0000                  		bne.w	locret_C2E4
0000C720 3F00                       		move.w	d0,-(sp)
0000C722 7600                       		moveq	#0,d3
0000C724 1628 0019                  		move.b	$19(a0),d3
0000C728 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C72E 301F                       		move.w	(sp)+,d0
0000C730 4A41                       		tst.w	d1
0000C732 6B00 0000                  		bmi.w	locret_C2E4
0000C736 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C73E 7001                       		moveq	#1,d0
0000C740 323C 0040                  		move.w	#$40,d1
0000C744 6000                       		bra.s	loc_C294
0000C746                            ; ===========================================================================
0000C746                            
0000C746                            loc_C268:
0000C746 0829 0000 0022             		btst	#0,$22(a1)
0000C74C 6700                       		beq.s	locret_C2E4
0000C74E 3F00                       		move.w	d0,-(sp)
0000C750 7600                       		moveq	#0,d3
0000C752 1628 0019                  		move.b	$19(a0),d3
0000C756 4643                       		not.w	d3
0000C758 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C75E 301F                       		move.w	(sp)+,d0
0000C760 4A41                       		tst.w	d1
0000C762 6B00                       		bmi.s	locret_C2E4
0000C764 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C76C 70FF                       		moveq	#-1,d0
0000C76E 323C FFC0                  		move.w	#-$40,d1
0000C772                            
0000C772                            loc_C294:
0000C772 43F8 D000                  		lea	($FFFFD000).w,a1
0000C776 D169 0008                  		add.w	d0,8(a1)
0000C77A 3341 0014                  		move.w	d1,$14(a1)
0000C77E 337C 0000 0010             		move.w	#0,$10(a1)
0000C784 3F00                       		move.w	d0,-(sp)
0000C786 303C 00A7                  		move.w	#$A7,d0
0000C78A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C790 301F                       		move.w	(sp)+,d0
0000C792 4A28 0028                  		tst.b	$28(a0)
0000C796 6B00                       		bmi.s	locret_C2E4
0000C798 3F00                       		move.w	d0,-(sp)
0000C79A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7A0 301F                       		move.w	(sp)+,d0
0000C7A2 0C41 0004                  		cmpi.w	#4,d1
0000C7A6 6F00                       		ble.s	loc_C2E0
0000C7A8 317C 0400 0010             		move.w	#$400,$10(a0)
0000C7AE 4A40                       		tst.w	d0
0000C7B0 6A00                       		bpl.s	loc_C2D8
0000C7B2 4468 0010                  		neg.w	$10(a0)
0000C7B6                            
0000C7B6                            loc_C2D8:
0000C7B6 117C 0006 0025             		move.b	#6,$25(a0)
0000C7BC 6000                       		bra.s	locret_C2E4
0000C7BE                            ; ===========================================================================
0000C7BE                            
0000C7BE                            loc_C2E0:
0000C7BE D368 000C                  		add.w	d1,$C(a0)
0000C7C2                            
0000C7C2                            locret_C2E4:
0000C7C2 4E75                       		rts	
0000C7C4                            ; ===========================================================================
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            Map_obj33:
0000C7C4                            	include "_maps\obj33.asm"
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4 0000                       		dc.w byte_C2EA-Map_obj33
0000C7C6 0000                       		dc.w byte_C2F0-Map_obj33
0000C7C8 01                         byte_C2EA:	dc.b 1
0000C7C9 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C7CE 04                         byte_C2F0:	dc.b 4
0000C7CF F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C7D4 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C7D9 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C7DE F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C7E4 00                         		even
0000C7E4 00                         		even
0000C7E4                            
0000C7E4                            ; ===========================================================================
0000C7E4                            ; ---------------------------------------------------------------------------
0000C7E4                            ; Object 34 - zone title cards
0000C7E4                            ; ---------------------------------------------------------------------------
0000C7E4                            
0000C7E4                            Obj34:					; XREF: Obj_Index
0000C7E4 7000                       		moveq	#0,d0
0000C7E6 1028 0024                  		move.b	$24(a0),d0
0000C7EA 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C7EE 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C7F2                            ; ===========================================================================
0000C7F2 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C7F4 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C7F6 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7F8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7FA                            ; ===========================================================================
0000C7FA                            
0000C7FA                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C7FA 2248                       		movea.l	a0,a1
0000C7FC 7000                       		moveq	#0,d0
0000C7FE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C802 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C808 6600                       		bne.s	Obj34_CheckFZ
0000C80A 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C80C                            
0000C80C                            Obj34_CheckFZ:
0000C80C 3400                       		move.w	d0,d2
0000C80E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C814 6600                       		bne.s	Obj34_LoadConfig
0000C816 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C818 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C81A                            
0000C81A                            Obj34_LoadConfig:
0000C81A 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C820 E948                       		lsl.w	#4,d0
0000C822 D6C0                       		adda.w	d0,a3
0000C824 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C82A 7203                       		moveq	#3,d1
0000C82C                            
0000C82C                            Obj34_Loop:
0000C82C 12BC 0034                  		move.b	#$34,0(a1)
0000C830 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C834 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C838 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C83C 335A 000A                  		move.w	(a2)+,$A(a1)
0000C840 135A 0024                  		move.b	(a2)+,$24(a1)
0000C844 101A                       		move.b	(a2)+,d0
0000C846 6600                       		bne.s	Obj34_ActNumber
0000C848 1002                       		move.b	d2,d0
0000C84A                            
0000C84A                            Obj34_ActNumber:
0000C84A 0C00 0007                  		cmpi.b	#7,d0
0000C84E 6600                       		bne.s	Obj34_MakeSprite
0000C850 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C854 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C85A 6600                       		bne.s	Obj34_MakeSprite
0000C85C 5300                       		subq.b	#1,d0
0000C85E                            
0000C85E                            Obj34_MakeSprite:
0000C85E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C862 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C86A 337C 8580 0002             		move.w	#$8580,2(a1)
0000C870 137C 0078 0019             		move.b	#$78,$19(a1)
0000C876 137C 0000 0001             		move.b	#0,1(a1)
0000C87C 137C 0000 0018             		move.b	#0,$18(a1)
0000C882 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C888 43E9 0040                  		lea	$40(a1),a1	; next object
0000C88C 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C890                            
0000C890                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C890 7210                       		moveq	#$10,d1		; set horizontal speed
0000C892 3028 0030                  		move.w	$30(a0),d0
0000C896 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C89A 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C89C 6C00                       		bge.s	Obj34_Move
0000C89E 4441                       		neg.w	d1
0000C8A0                            
0000C8A0                            Obj34_Move:
0000C8A0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8A4                            
0000C8A4                            loc_C3C8:
0000C8A4 3028 0008                  		move.w	8(a0),d0
0000C8A8 6B00                       		bmi.s	locret_C3D8
0000C8AA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8AE 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C8B0 6000 0000                  		bra.w	DisplaySprite
0000C8B4                            ; ===========================================================================
0000C8B4                            
0000C8B4                            locret_C3D8:
0000C8B4 4E75                       		rts	
0000C8B6                            ; ===========================================================================
0000C8B6                            
0000C8B6                            Obj34_Wait:				; XREF: Obj34_Index
0000C8B6 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C8BA 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C8BC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C8C0 6000 0000                  		bra.w	DisplaySprite
0000C8C4                            ; ===========================================================================
0000C8C4                            
0000C8C4                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C8C4 4A28 0001                  		tst.b	1(a0)
0000C8C8 6A00                       		bpl.s	Obj34_ChangeArt
0000C8CA 7220                       		moveq	#$20,d1
0000C8CC 3028 0032                  		move.w	$32(a0),d0
0000C8D0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C8D4 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C8D6 6C00                       		bge.s	Obj34_Move2
0000C8D8 4441                       		neg.w	d1
0000C8DA                            
0000C8DA                            Obj34_Move2:
0000C8DA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8DE 3028 0008                  		move.w	8(a0),d0
0000C8E2 6B00                       		bmi.s	locret_C412
0000C8E4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8E8 6400                       		bcc.s	locret_C412	; if yes, branch
0000C8EA 6000 0000                  		bra.w	DisplaySprite
0000C8EE                            ; ===========================================================================
0000C8EE                            
0000C8EE                            locret_C412:
0000C8EE 4E75                       		rts	
0000C8F0                            ; ===========================================================================
0000C8F0                            
0000C8F0                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C8F0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C8F6 6600                       		bne.s	Obj34_Delete
0000C8F8 7002                       		moveq	#2,d0
0000C8FA 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C900 7000                       		moveq	#0,d0
0000C902 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C906 0640 0015                  		addi.w	#$15,d0
0000C90A 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C910                            
0000C910                            Obj34_Delete:
0000C910 6000 0000                  		bra.w	DeleteObject
0000C914                            ; ===========================================================================
0000C914 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C916 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C918 00E4                       		dc.w $E4
0000C91A 0206                       		dc.b 2,	6
0000C91C 00EA                       		dc.w $EA
0000C91E 0207                       		dc.b 2,	7
0000C920 00E0                       		dc.w $E0
0000C922 020A                       		dc.b 2,	$A
0000C924                            ; ---------------------------------------------------------------------------
0000C924                            ; Title	card configuration data
0000C924                            ; Format:
0000C924                            ; 4 bytes per item (YYYY XXXX)
0000C924                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C924                            ; ---------------------------------------------------------------------------
0000C924 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C934 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C944 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C954 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C964 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C974 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C984 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C994                            ; ===========================================================================
0000C994                            ; ---------------------------------------------------------------------------
0000C994                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C994                            ; ---------------------------------------------------------------------------
0000C994                            
0000C994                            Obj39:					; XREF: Obj_Index
0000C994 7000                       		moveq	#0,d0
0000C996 1028 0024                  		move.b	$24(a0),d0
0000C99A 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C99E 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C9A2                            ; ===========================================================================
0000C9A2 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C9A4 0000                       		dc.w loc_C50C-Obj39_Index
0000C9A6 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C9A8                            ; ===========================================================================
0000C9A8                            
0000C9A8                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C9A8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C9AC 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C9AE 4E75                       		rts	
0000C9B0                            ; ===========================================================================
0000C9B0                            
0000C9B0                            Obj39_Main:
0000C9B0 5428 0024                  		addq.b	#2,$24(a0)
0000C9B4 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C9BA 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C9C0 6700                       		beq.s	loc_C4EC	; if not, branch
0000C9C2 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C9C8                            
0000C9C8                            loc_C4EC:
0000C9C8 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C9CE 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C9D6 317C 855E 0002             		move.w	#$855E,2(a0)
0000C9DC 117C 0000 0001             		move.b	#0,1(a0)
0000C9E2 117C 0000 0018             		move.b	#0,$18(a0)
0000C9E8                            
0000C9E8                            loc_C50C:				; XREF: Obj39_Index
0000C9E8 7210                       		moveq	#$10,d1		; set horizontal speed
0000C9EA 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C9F0 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C9F2 6500                       		bcs.s	Obj39_Move
0000C9F4 4441                       		neg.w	d1
0000C9F6                            
0000C9F6                            Obj39_Move:
0000C9F6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C9FA 6000 0000                  		bra.w	DisplaySprite
0000C9FE                            ; ===========================================================================
0000C9FE                            
0000C9FE                            Obj39_SetWait:				; XREF: Obj39_Main
0000C9FE 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CA04 5428 0024                  		addq.b	#2,$24(a0)
0000CA08 4E75                       		rts	
0000CA0A                            ; ===========================================================================
0000CA0A                            
0000CA0A                            Obj39_Wait:				; XREF: Obj39_Index
0000CA0A 1038 F605                  		move.b	($FFFFF605).w,d0
0000CA0E 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CA12 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CA14 0828 0000 001A             		btst	#0,$1A(a0)
0000CA1A 6600                       		bne.s	Obj39_Display
0000CA1C 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA20 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA22 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA26 6000 0000                  		bra.w	DisplaySprite
0000CA2A                            ; ===========================================================================
0000CA2A                            
0000CA2A                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA2A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA2E 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA30 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CA36 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CA3A 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CA3C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CA42 6000                       		bra.s	Obj39_Display
0000CA44                            ; ===========================================================================
0000CA44                            
0000CA44                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CA44 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CA4A                            
0000CA4A                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CA4A 6000 0000                  		bra.w	DisplaySprite
0000CA4E                            ; ===========================================================================
0000CA4E                            ; ---------------------------------------------------------------------------
0000CA4E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CA4E                            ; ---------------------------------------------------------------------------
0000CA4E                            
0000CA4E                            Obj3A:					; XREF: Obj_Index
0000CA4E 7000                       		moveq	#0,d0
0000CA50 1028 0024                  		move.b	$24(a0),d0
0000CA54 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CA58 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CA5C                            ; ===========================================================================
0000CA5C 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CA5E 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CA60 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA62 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CA64 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA66 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CA68 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA6A 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CA6C 0000                       		dc.w loc_C766-Obj3A_Index
0000CA6E                            ; ===========================================================================
0000CA6E                            
0000CA6E                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CA6E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA72 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CA74 4E75                       		rts	
0000CA76                            ; ===========================================================================
0000CA76                            
0000CA76                            Obj3A_Main:
0000CA76 2248                       		movea.l	a0,a1
0000CA78 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CA7E 7206                       		moveq	#6,d1
0000CA80                            
0000CA80                            Obj3A_Loop:
0000CA80 12BC 003A                  		move.b	#$3A,0(a1)
0000CA84 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CA88 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CA8C 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CA90 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CA94 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA98 101A                       		move.b	(a2)+,d0
0000CA9A 0C00 0006                  		cmpi.b	#6,d0
0000CA9E 6600                       		bne.s	loc_C5CA
0000CAA0 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CAA4                            
0000CAA4                            loc_C5CA:
0000CAA4 1340 001A                  		move.b	d0,$1A(a1)
0000CAA8 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CAB0 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAB6 137C 0000 0001             		move.b	#0,1(a1)
0000CABC 43E9 0040                  		lea	$40(a1),a1
0000CAC0 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CAC4                            
0000CAC4                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CAC4 7210                       		moveq	#$10,d1		; set horizontal speed
0000CAC6 3028 0030                  		move.w	$30(a0),d0
0000CACA B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CACE 6700                       		beq.s	loc_C61A	; if yes, branch
0000CAD0 6C00                       		bge.s	Obj3A_Move
0000CAD2 4441                       		neg.w	d1
0000CAD4                            
0000CAD4                            Obj3A_Move:
0000CAD4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAD8                            
0000CAD8                            loc_C5FE:				; XREF: loc_C61A
0000CAD8 3028 0008                  		move.w	8(a0),d0
0000CADC 6B00                       		bmi.s	locret_C60E
0000CADE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CAE2 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CAE4 6000 0000                  		bra.w	DisplaySprite
0000CAE8                            ; ===========================================================================
0000CAE8                            
0000CAE8                            locret_C60E:
0000CAE8 4E75                       		rts	
0000CAEA                            ; ===========================================================================
0000CAEA                            
0000CAEA                            loc_C610:				; XREF: loc_C61A
0000CAEA 117C 000E 0024             		move.b	#$E,$24(a0)
0000CAF0 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CAF4                            ; ===========================================================================
0000CAF4                            
0000CAF4                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CAF4 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CAFA 67EE                       		beq.s	loc_C610
0000CAFC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CB02 66D4                       		bne.s	loc_C5FE
0000CB04 5428 0024                  		addq.b	#2,$24(a0)
0000CB08 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB0E                            
0000CB0E                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CB0E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB12 6600                       		bne.s	Obj3A_Display
0000CB14 5428 0024                  		addq.b	#2,$24(a0)
0000CB18                            
0000CB18                            Obj3A_Display:
0000CB18 6000 0000                  		bra.w	DisplaySprite
0000CB1C                            ; ===========================================================================
0000CB1C                            
0000CB1C                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CB1C 6100 0000                  		bsr.w	DisplaySprite
0000CB20 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB26 7000                       		moveq	#0,d0
0000CB28 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB2C 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB2E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB32 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CB38                            
0000CB38                            Obj3A_RingBonus:
0000CB38 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CB3C 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CB3E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB42 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CB48                            
0000CB48                            Obj3A_ChkBonus:
0000CB48 4A40                       		tst.w	d0		; is there any bonus?
0000CB4A 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CB4C 303C 00C5                  		move.w	#$C5,d0
0000CB50 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB56 5428 0024                  		addq.b	#2,$24(a0)
0000CB5A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CB60 6600                       		bne.s	Obj3A_SetDelay
0000CB62 5828 0024                  		addq.b	#4,$24(a0)
0000CB66                            
0000CB66                            Obj3A_SetDelay:
0000CB66 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB6C                            
0000CB6C                            locret_C692:
0000CB6C 4E75                       		rts	
0000CB6E                            ; ===========================================================================
0000CB6E                            
0000CB6E                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CB6E 4EB9 0000 0000             		jsr	AddPoints
0000CB74 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB78 0200 0003                  		andi.b	#3,d0
0000CB7C 66EE                       		bne.s	locret_C692
0000CB7E 303C 00CD                  		move.w	#$CD,d0
0000CB82 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CB88                            ; ===========================================================================
0000CB88                            
0000CB88                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CB88 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB8C 0240 0007                  		andi.w	#7,d0
0000CB90 E748                       		lsl.w	#3,d0
0000CB92 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CB96 0241 0003                  		andi.w	#3,d1
0000CB9A D241                       		add.w	d1,d1
0000CB9C D041                       		add.w	d1,d0
0000CB9E 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CBA2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CBA6 4A40                       		tst.w	d0
0000CBA8 6600                       		bne.s	Obj3A_ChkSS
0000CBAA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CBB0 6000                       		bra.s	Obj3A_Display2
0000CBB2                            ; ===========================================================================
0000CBB2                            
0000CBB2                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CBB2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CBB6 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CBBA 6700                       		beq.s	loc_C6EA	; if not, branch
0000CBBC 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CBC2 6000                       		bra.s	Obj3A_Display2
0000CBC4                            ; ===========================================================================
0000CBC4                            
0000CBC4                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CBC4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CBCA                            
0000CBCA                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CBCA 6000 0000                  		bra.w	DisplaySprite
0000CBCE                            ; ===========================================================================
0000CBCE                            ; ---------------------------------------------------------------------------
0000CBCE                            ; Level	order array
0000CBCE                            ; ---------------------------------------------------------------------------
0000CBCE                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CBFE                            		even
0000CBFE                            ; ===========================================================================
0000CBFE                            
0000CBFE                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CBFE 7220                       		moveq	#$20,d1		; set horizontal speed
0000CC00 3028 0032                  		move.w	$32(a0),d0
0000CC04 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CC08 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CC0A 6C00                       		bge.s	Obj3A_Move2
0000CC0C 4441                       		neg.w	d1
0000CC0E                            
0000CC0E                            Obj3A_Move2:
0000CC0E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC12 3028 0008                  		move.w	8(a0),d0
0000CC16 6B00                       		bmi.s	locret_C748
0000CC18 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC1C 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC1E 6000 0000                  		bra.w	DisplaySprite
0000CC22                            ; ===========================================================================
0000CC22                            
0000CC22                            locret_C748:
0000CC22 4E75                       		rts	
0000CC24                            ; ===========================================================================
0000CC24                            
0000CC24                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC24 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC2A 6600 0000                  		bne.w	DeleteObject
0000CC2E 5428 0024                  		addq.b	#2,$24(a0)
0000CC32 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CC36 303C 008D                  		move.w	#$8D,d0
0000CC3A 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CC40                            ; ===========================================================================
0000CC40                            
0000CC40                            loc_C766:				; XREF: Obj3A_Index
0000CC40 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CC44 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CC4A 6700 0000                  		beq.w	DeleteObject
0000CC4E 4E75                       		rts	
0000CC50                            ; ===========================================================================
0000CC50 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CC56 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CC58 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CC5E 0201                       		dc.b 2,	1
0000CC60 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CC66 0206                       		dc.b 2,	6
0000CC68 0520 0120 00EC             		dc.w $520, $120, $EC
0000CC6E 0202                       		dc.b 2,	2
0000CC70 0540 0120 00FC             		dc.w $540, $120, $FC
0000CC76 0203                       		dc.b 2,	3
0000CC78 0560 0120 010C             		dc.w $560, $120, $10C
0000CC7E 0204                       		dc.b 2,	4
0000CC80 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CC86 0205                       		dc.b 2,	5
0000CC88                            ; ===========================================================================
0000CC88                            ; ---------------------------------------------------------------------------
0000CC88                            ; Object 7E - special stage results screen
0000CC88                            ; ---------------------------------------------------------------------------
0000CC88                            
0000CC88                            Obj7E:					; XREF: Obj_Index
0000CC88 7000                       		moveq	#0,d0
0000CC8A 1028 0024                  		move.b	$24(a0),d0
0000CC8E 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CC92 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CC96                            ; ===========================================================================
0000CC96 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CC98 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CC9A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC9C 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CC9E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCA0 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCA2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCA4 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CCA6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCA8 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCAA 0000                       		dc.w loc_C91A-Obj7E_Index
0000CCAC                            ; ===========================================================================
0000CCAC                            
0000CCAC                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CCAC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCB0 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CCB2 4E75                       		rts	
0000CCB4                            ; ===========================================================================
0000CCB4                            
0000CCB4                            Obj7E_Main:
0000CCB4 2248                       		movea.l	a0,a1
0000CCB6 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CCBC 7203                       		moveq	#3,d1
0000CCBE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CCC4 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CCC6 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CCC8                            
0000CCC8                            Obj7E_Loop:
0000CCC8 12BC 007E                  		move.b	#$7E,0(a1)
0000CCCC 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CCD0 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCD4 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CCD8 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCDC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CCE0 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CCE8 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCEE 137C 0000 0001             		move.b	#0,1(a1)
0000CCF4 43E9 0040                  		lea	$40(a1),a1
0000CCF8 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CCFC                            
0000CCFC 7007                       		moveq	#7,d0
0000CCFE 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CD02 6700                       		beq.s	loc_C842
0000CD04 7000                       		moveq	#0,d0
0000CD06 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CD0A 6600                       		bne.s	loc_C842	; if not, branch
0000CD0C 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CD0E 317C 0018 0008             		move.w	#$18,8(a0)
0000CD14 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CD1A                            
0000CD1A                            loc_C842:
0000CD1A 1140 001A                  		move.b	d0,$1A(a0)
0000CD1E                            
0000CD1E                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD1E 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD20 3028 0030                  		move.w	$30(a0),d0
0000CD24 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD28 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD2A 6C00                       		bge.s	Obj7E_Move
0000CD2C 4441                       		neg.w	d1
0000CD2E                            
0000CD2E                            Obj7E_Move:
0000CD2E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD32                            
0000CD32                            loc_C85A:				; XREF: loc_C86C
0000CD32 3028 0008                  		move.w	8(a0),d0
0000CD36 6B00                       		bmi.s	locret_C86A
0000CD38 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD3C 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CD3E 6000 0000                  		bra.w	DisplaySprite
0000CD42                            ; ===========================================================================
0000CD42                            
0000CD42                            locret_C86A:
0000CD42 4E75                       		rts	
0000CD44                            ; ===========================================================================
0000CD44                            
0000CD44                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CD44 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CD4A 66E6                       		bne.s	loc_C85A
0000CD4C 5428 0024                  		addq.b	#2,$24(a0)
0000CD50 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD56 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CD5C                            
0000CD5C                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CD5C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD60 6600                       		bne.s	Obj7E_Display
0000CD62 5428 0024                  		addq.b	#2,$24(a0)
0000CD66                            
0000CD66                            Obj7E_Display:
0000CD66 6000 0000                  		bra.w	DisplaySprite
0000CD6A                            ; ===========================================================================
0000CD6A                            
0000CD6A                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CD6A 6100 0000                  		bsr.w	DisplaySprite
0000CD6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CD74 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD78 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CD7A 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD80 700A                       		moveq	#10,d0		; add 10 to score
0000CD82 4EB9 0000 0000             		jsr	AddPoints
0000CD88 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD8C 0200 0003                  		andi.b	#3,d0
0000CD90 6600                       		bne.s	locret_C8EA
0000CD92 303C 00CD                  		move.w	#$CD,d0
0000CD96 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CD9C                            ; ===========================================================================
0000CD9C                            
0000CD9C                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CD9C 303C 00C5                  		move.w	#$C5,d0
0000CDA0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDA6 5428 0024                  		addq.b	#2,$24(a0)
0000CDAA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDB0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CDB6 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CDB8 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CDBE 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CDC2                            
0000CDC2                            locret_C8EA:
0000CDC2 4E75                       		rts	
0000CDC4                            ; ===========================================================================
0000CDC4                            
0000CDC4                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CDC4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CDCA 6000 0000                  		bra.w	DisplaySprite
0000CDCE                            ; ===========================================================================
0000CDCE                            
0000CDCE                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CDCE 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CDD4 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CDDA 303C 00BF                  		move.w	#$BF,d0
0000CDDE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CDE4 5428 0024                  		addq.b	#2,$24(a0)
0000CDE8 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CDEE 6000 0000                  		bra.w	DisplaySprite
0000CDF2                            ; ===========================================================================
0000CDF2                            
0000CDF2                            loc_C91A:				; XREF: Obj7E_Index
0000CDF2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDF6 0200 000F                  		andi.b	#$F,d0
0000CDFA 6600                       		bne.s	Obj7E_Display2
0000CDFC 0868 0000 001A             		bchg	#0,$1A(a0)
0000CE02                            
0000CE02                            Obj7E_Display2:
0000CE02 6000 0000                  		bra.w	DisplaySprite
0000CE06                            ; ===========================================================================
0000CE06 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CE0C 0200                       		dc.b 2,	0		; rountine number, frame number
0000CE0E 0320 0120 0118             		dc.w $320, $120, $118
0000CE14 0201                       		dc.b 2,	1
0000CE16 0360 0120 0128             		dc.w $360, $120, $128
0000CE1C 0202                       		dc.b 2,	2
0000CE1E 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE24 0203                       		dc.b 2,	3
0000CE26 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE2C 0206                       		dc.b 2,	6
0000CE2E                            ; ===========================================================================
0000CE2E                            ; ---------------------------------------------------------------------------
0000CE2E                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE2E                            ; ---------------------------------------------------------------------------
0000CE2E                            
0000CE2E                            Obj7F:					; XREF: Obj_Index
0000CE2E 7000                       		moveq	#0,d0
0000CE30 1028 0024                  		move.b	$24(a0),d0
0000CE34 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CE38 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CE3C                            ; ===========================================================================
0000CE3C 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CE3E 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CE40                            
0000CE40                            ; ---------------------------------------------------------------------------
0000CE40                            ; X-axis positions for chaos emeralds
0000CE40                            ; ---------------------------------------------------------------------------
0000CE40 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CE4C                            ; ===========================================================================
0000CE4C                            
0000CE4C                            Obj7F_Main:				; XREF: Obj7F_Index
0000CE4C 2248                       		movea.l	a0,a1
0000CE4E 45F9 0000 CE40             		lea	(Obj7F_PosData).l,a2
0000CE54 7400                       		moveq	#0,d2
0000CE56 7200                       		moveq	#0,d1
0000CE58 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CE5C 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CE5E 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CE62                            
0000CE62                            Obj7F_Loop:
0000CE62 12BC 007F                  		move.b	#$7F,0(a1)
0000CE66 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CE6A 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CE70 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CE74 1633 2000                  		move.b	(a3,d2.w),d3
0000CE78 1343 001A                  		move.b	d3,$1A(a1)
0000CE7C 1343 001C                  		move.b	d3,$1C(a1)
0000CE80 5202                       		addq.b	#1,d2
0000CE82 5429 0024                  		addq.b	#2,$24(a1)
0000CE86 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CE8E 337C 8541 0002             		move.w	#$8541,2(a1)
0000CE94 137C 0000 0001             		move.b	#0,1(a1)
0000CE9A 43E9 0040                  		lea	$40(a1),a1	; next object
0000CE9E 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CEA2                            
0000CEA2                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CEA2 1028 001A                  		move.b	$1A(a0),d0
0000CEA6 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CEAC 0C00 0006                  		cmpi.b	#6,d0
0000CEB0 6600                       		bne.s	Obj7F_Display
0000CEB2 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CEB8                            
0000CEB8                            Obj7F_Display:
0000CEB8 6000 0000                  		bra.w	DisplaySprite
0000CEBC                            ; ===========================================================================
0000CEBC                            ; ---------------------------------------------------------------------------
0000CEBC                            ; Sprite mappings - zone title cards
0000CEBC                            ; ---------------------------------------------------------------------------
0000CEBC 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CEBE 0000                       		dc.w byte_CA2C-Map_obj34
0000CEC0 0000                       		dc.w byte_CA5A-Map_obj34
0000CEC2 0000                       		dc.w byte_CA7A-Map_obj34
0000CEC4 0000                       		dc.w byte_CAA8-Map_obj34
0000CEC6 0000                       		dc.w byte_CADC-Map_obj34
0000CEC8 0000                       		dc.w byte_CB10-Map_obj34
0000CECA 0000                       		dc.w byte_CB26-Map_obj34
0000CECC 0000                       		dc.w byte_CB31-Map_obj34
0000CECE 0000                       		dc.w byte_CB3C-Map_obj34
0000CED0 0000                       		dc.w byte_CB47-Map_obj34
0000CED2 0000                       		dc.w byte_CB8A-Map_obj34
0000CED4 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CED5 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CEDA F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CEDF F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CEE4 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CEE9 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CEEE F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CEF3 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CEF8 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CEFD F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CF02 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CF07 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CF0C F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CF11 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CF12 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CF17 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CF1C F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF21 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF26 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF2B F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF30 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF35 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CF3A F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CF3F F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CF44 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CF49 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CF4E F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CF53 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CF58 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CF5D F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CF62 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CF67 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CF6C F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CF71 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CF76 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CF7B F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CF80 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CF81 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CF86 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CF8B F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CF90 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CF95 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CF9A 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CF9B F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CFA0 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CFA5 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CFAA F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CFAF F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CFB4 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CFB9 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CFBE F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CFC3 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CFC8 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CFCD F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CFD2 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CFD7 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CFDC F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CFE1 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CFE6 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CFEB F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CFF0 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CFF1 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CFF6 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CFFB F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D000 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D005 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D00A F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D00F F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D014 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D019 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D01E F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D023 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D028 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D02D F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D032 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D037 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D03C F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D041 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D046 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D04B F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D050 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D055 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D05A 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D05B F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D060 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D065 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D06A F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D06F F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D074 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D079 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D07E 04                         byte_CB10:	dc.b 4			; ZONE
0000D07F F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D084 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D089 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D08E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D093 00                         		dc.b 0
0000D094 02                         byte_CB26:	dc.b 2			; ACT 1
0000D095 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D09A F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D09F 02                         byte_CB31:	dc.b 2			; ACT 2
0000D0A0 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0A5 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D0AA 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D0AB 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0B0 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D0B5 0D                         byte_CB47:	dc.b $D			; Oval
0000D0B6 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D0BB E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D0C0 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D0C5 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D0CA 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D0CF 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D0D4 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D0D9 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D0DE EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D0E3 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D0E8 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D0ED 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D0F2 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D0F7 00                         		dc.b 0
0000D0F8 05                         byte_CB8A:	dc.b 5			; FINAL
0000D0F9 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D0FE F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D103 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D108 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D10D F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D112                            		even
0000D112                            ; ---------------------------------------------------------------------------
0000D112                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D112                            ; ---------------------------------------------------------------------------
0000D112                            Map_obj39:
0000D112                            	include "_maps\obj39.asm"
0000D112                            ; ---------------------------------------------------------------------------
0000D112                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D112                            ; ---------------------------------------------------------------------------
0000D112 0000                       		dc.w byte_CBAC-Map_obj39
0000D114 0000                       		dc.w byte_CBB7-Map_obj39
0000D116 0000                       		dc.w byte_CBC2-Map_obj39
0000D118 0000                       		dc.w byte_CBCD-Map_obj39
0000D11A 02                         byte_CBAC:	dc.b 2
0000D11B F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D120 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D125 02                         byte_CBB7:	dc.b 2
0000D126 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D12B F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D130 02                         byte_CBC2:	dc.b 2
0000D131 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D136 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D13B 02                         byte_CBCD:	dc.b 2
0000D13C F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D141 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D146                            		even
0000D146                            		even
0000D146                            
0000D146                            ; ---------------------------------------------------------------------------
0000D146                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D146                            ; ---------------------------------------------------------------------------
0000D146 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D148 0000                       		dc.w byte_CC13-Map_obj3A
0000D14A 0000                       		dc.w byte_CC32-Map_obj3A
0000D14C 0000                       		dc.w byte_CC51-Map_obj3A
0000D14E 0000                       		dc.w byte_CC75-Map_obj3A
0000D150 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D152 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D154 FF59                       		dc.w byte_CB31-Map_obj3A
0000D156 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D158 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D159 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D15E F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D163 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D168 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D16D F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D172 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D177 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D17C F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D181 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D186 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D18B F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D190 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D195 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D19A F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D19F F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D1A4 06                         byte_CC13:	dc.b 6			; PASSED
0000D1A5 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D1AA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D1AF F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D1B4 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D1B9 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D1BE F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D1C3 06                         byte_CC32:	dc.b 6			; SCORE
0000D1C4 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D1C9 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D1CE F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D1D3 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D1D8 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D1DD FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D1E2 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D1E3 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D1E8 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D1ED F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D1F2 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D1F7 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D1FC F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D201 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D206 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D207 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D20C F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D211 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D216 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D21B FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D220 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D225 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D22A                            		even
0000D22A                            ; ---------------------------------------------------------------------------
0000D22A                            ; Sprite mappings - special stage results screen
0000D22A                            ; ---------------------------------------------------------------------------
0000D22A 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D22C 0000                       		dc.w byte_CCEE-Map_obj7E
0000D22E 0000                       		dc.w byte_CD0D-Map_obj7E
0000D230 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D232 0000                       		dc.w byte_CD31-Map_obj7E
0000D234 0000                       		dc.w byte_CD46-Map_obj7E
0000D236 0000                       		dc.w byte_CD5B-Map_obj7E
0000D238 0000                       		dc.w byte_CD6B-Map_obj7E
0000D23A 0000                       		dc.w byte_CDA8-Map_obj7E
0000D23C 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D23D F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D242 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D247 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D24C F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D251 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D256 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D25B F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D260 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D265 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D26A F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D26F F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D274 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D279 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D27E 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D27F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D284 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D289 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D28E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D293 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D298 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D29D 07                         byte_CD0D:	dc.b 7
0000D29E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D2A3 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D2A8 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D2AD F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D2B2 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D2B7 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D2BC F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D2C1 04                         byte_CD31:	dc.b 4
0000D2C2 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2C7 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2CC F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2D1 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D2D6 04                         byte_CD46:	dc.b 4
0000D2D7 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2DC F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2E1 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2E6 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D2EB 03                         byte_CD5B:	dc.b 3
0000D2EC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2F1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2F6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2FB 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D2FC F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D301 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D306 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D30B F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D310 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D315 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D31A F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D31F F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D324 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D329 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D32E F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D333 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D338 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D339 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D33E F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D343 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D348 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D34D F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D352 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D357 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D35C F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D361 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D366 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D36B F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D370 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D375 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D37A F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D37F F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D384                            		even
0000D384                            ; ---------------------------------------------------------------------------
0000D384                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D384                            ; ---------------------------------------------------------------------------
0000D384                            Map_obj7F:
0000D384                            	include "_maps\obj7F.asm"
0000D384                            ; ---------------------------------------------------------------------------
0000D384                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D384                            ; ---------------------------------------------------------------------------
0000D384 0000                       		dc.w byte_CE02-Map_obj7F
0000D386 0000                       		dc.w byte_CE08-Map_obj7F
0000D388 0000                       		dc.w byte_CE0E-Map_obj7F
0000D38A 0000                       		dc.w byte_CE14-Map_obj7F
0000D38C 0000                       		dc.w byte_CE1A-Map_obj7F
0000D38E 0000                       		dc.w byte_CE20-Map_obj7F
0000D390 0000                       		dc.w byte_CE26-Map_obj7F
0000D392 01                         byte_CE02:	dc.b 1
0000D393 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D398 01                         byte_CE08:	dc.b 1
0000D399 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D39E 01                         byte_CE0E:	dc.b 1
0000D39F F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D3A4 01                         byte_CE14:	dc.b 1
0000D3A5 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D3AA 01                         byte_CE1A:	dc.b 1
0000D3AB F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D3B0 01                         byte_CE20:	dc.b 1
0000D3B1 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D3B6 00                         byte_CE26:	dc.b 0			; Blank frame
0000D3B8 00                         		even
0000D3B8 00                         		even
0000D3B8                            
0000D3B8                            ; ===========================================================================
0000D3B8                            ; ---------------------------------------------------------------------------
0000D3B8                            ; Object 36 - spikes
0000D3B8                            ; ---------------------------------------------------------------------------
0000D3B8                            
0000D3B8                            Obj36:					; XREF: Obj_Index
0000D3B8 7000                       		moveq	#0,d0
0000D3BA 1028 0024                  		move.b	$24(a0),d0
0000D3BE 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D3C2 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D3C6                            ; ===========================================================================
0000D3C6 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D3C8 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D3CA                            
0000D3CA 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D3CC 0110                       		dc.b 1,	$10
0000D3CE 0204                       		dc.b 2,	4
0000D3D0 031C                       		dc.b 3,	$1C
0000D3D2 0440                       		dc.b 4,	$40
0000D3D4 0510                       		dc.b 5,	$10
0000D3D6                            ; ===========================================================================
0000D3D6                            
0000D3D6                            Obj36_Main:				; XREF: Obj36_Index
0000D3D6 5428 0024                  		addq.b	#2,$24(a0)
0000D3DA 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D3E2 317C 051B 0002             		move.w	#$51B,2(a0)
0000D3E8 0028 0004 0001             		ori.b	#4,1(a0)
0000D3EE 117C 0004 0018             		move.b	#4,$18(a0)
0000D3F4 1028 0028                  		move.b	$28(a0),d0
0000D3F8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D3FE 0240 00F0                  		andi.w	#$F0,d0
0000D402 43F9 0000 D3CA             		lea	(Obj36_Var).l,a1
0000D408 E648                       		lsr.w	#3,d0
0000D40A D2C0                       		adda.w	d0,a1
0000D40C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D410 1159 0019                  		move.b	(a1)+,$19(a0)
0000D414 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D41A 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D420                            
0000D420                            Obj36_Solid:				; XREF: Obj36_Index
0000D420 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D424 343C 0004                  		move.w	#4,d2
0000D428 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D42E 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D430 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D436 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D438 343C 0014                  		move.w	#$14,d2
0000D43C                            
0000D43C                            ; Spikes types $1x and $5x face	sideways
0000D43C                            
0000D43C                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D43C 323C 001B                  		move.w	#$1B,d1
0000D440 3602                       		move.w	d2,d3
0000D442 5243                       		addq.w	#1,d3
0000D444 3828 0008                  		move.w	8(a0),d4
0000D448 6100 0000                  		bsr.w	SolidObject
0000D44C 0828 0003 0022             		btst	#3,$22(a0)
0000D452 6600                       		bne.s	Obj36_Display
0000D454 0C44 0001                  		cmpi.w	#1,d4
0000D458 6700                       		beq.s	Obj36_Hurt
0000D45A 6000                       		bra.s	Obj36_Display
0000D45C                            ; ===========================================================================
0000D45C                            
0000D45C                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D45C                            
0000D45C                            Obj36_Upright:				; XREF: Obj36_Solid
0000D45C 7200                       		moveq	#0,d1
0000D45E 1228 0019                  		move.b	$19(a0),d1
0000D462 0641 000B                  		addi.w	#$B,d1
0000D466 343C 0010                  		move.w	#$10,d2
0000D46A 363C 0011                  		move.w	#$11,d3
0000D46E 3828 0008                  		move.w	8(a0),d4
0000D472 6100 0000                  		bsr.w	SolidObject
0000D476 0828 0003 0022             		btst	#3,$22(a0)
0000D47C 6600                       		bne.s	Obj36_Hurt
0000D47E 4A44                       		tst.w	d4
0000D480 6A00                       		bpl.s	Obj36_Display
0000D482                            
0000D482                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D482 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D486 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D488 2F08                       		move.l	a0,-(sp)
0000D48A 2448                       		movea.l	a0,a2
0000D48C 41F8 D000                  		lea	($FFFFD000).w,a0
0000D490 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D496 6400                       		bcc.s	loc_CF20
0000D498 2628 000C                  		move.l	$C(a0),d3
0000D49C 3028 0012                  		move.w	$12(a0),d0
0000D4A0 48C0                       		ext.l	d0
0000D4A2 E180                       		asl.l	#8,d0
0000D4A4 9680                       		sub.l	d0,d3
0000D4A6 2143 000C                  		move.l	d3,$C(a0)
0000D4AA 4EB9 0000 0000             		jsr	HurtSonic
0000D4B0                            
0000D4B0                            loc_CF20:
0000D4B0 205F                       		movea.l	(sp)+,a0
0000D4B2                            
0000D4B2                            Obj36_Display:
0000D4B2 6100 0000                  		bsr.w	DisplaySprite
0000D4B6 3028 0030                  		move.w	$30(a0),d0
0000D4BA 0240 FF80                  		andi.w	#$FF80,d0
0000D4BE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4C2 0441 0080                  		subi.w	#$80,d1
0000D4C6 0241 FF80                  		andi.w	#$FF80,d1
0000D4CA 9041                       		sub.w	d1,d0
0000D4CC 0C40 0280                  		cmpi.w	#$280,d0
0000D4D0 6200 0000                  		bhi.w	DeleteObject
0000D4D4 4E75                       		rts	
0000D4D6                            ; ===========================================================================
0000D4D6                            
0000D4D6                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D4D6 7000                       		moveq	#0,d0
0000D4D8 1028 0028                  		move.b	$28(a0),d0
0000D4DC D040                       		add.w	d0,d0
0000D4DE 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D4E2 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D4E6                            ; ===========================================================================
0000D4E6 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D4E8 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D4EA 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D4EC                            ; ===========================================================================
0000D4EC                            
0000D4EC                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D4EC 4E75                       		rts			; don't move the object
0000D4EE                            ; ===========================================================================
0000D4EE                            
0000D4EE                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D4EE 6100 0000                  		bsr.w	Obj36_Wait
0000D4F2 7000                       		moveq	#0,d0
0000D4F4 1028 0034                  		move.b	$34(a0),d0
0000D4F8 D068 0032                  		add.w	$32(a0),d0
0000D4FC 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D500 4E75                       		rts	
0000D502                            ; ===========================================================================
0000D502                            
0000D502                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D502 6100 0000                  		bsr.w	Obj36_Wait
0000D506 7000                       		moveq	#0,d0
0000D508 1028 0034                  		move.b	$34(a0),d0
0000D50C D068 0030                  		add.w	$30(a0),d0
0000D510 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D514 4E75                       		rts	
0000D516                            ; ===========================================================================
0000D516                            
0000D516                            Obj36_Wait:
0000D516 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D51A 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D51C 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D520 6600                       		bne.s	locret_CFE6
0000D522 4A28 0001                  		tst.b	1(a0)
0000D526 6A00                       		bpl.s	locret_CFE6
0000D528 303C 00B6                  		move.w	#$B6,d0
0000D52C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D532 6000                       		bra.s	locret_CFE6
0000D534                            ; ===========================================================================
0000D534                            
0000D534                            loc_CFA4:
0000D534 4A68 0036                  		tst.w	$36(a0)
0000D538 6700                       		beq.s	loc_CFC6
0000D53A 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D540 6400                       		bcc.s	locret_CFE6
0000D542 317C 0000 0034             		move.w	#0,$34(a0)
0000D548 317C 0000 0036             		move.w	#0,$36(a0)
0000D54E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D554 6000                       		bra.s	locret_CFE6
0000D556                            ; ===========================================================================
0000D556                            
0000D556                            loc_CFC6:
0000D556 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D55C 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D562 6500                       		bcs.s	locret_CFE6
0000D564 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D56A 317C 0001 0036             		move.w	#1,$36(a0)
0000D570 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D576                            
0000D576                            locret_CFE6:
0000D576 4E75                       		rts	
0000D578                            ; ===========================================================================
0000D578                            ; ---------------------------------------------------------------------------
0000D578                            ; Sprite mappings - spikes
0000D578                            ; ---------------------------------------------------------------------------
0000D578                            Map_obj36:
0000D578                            	include "_maps\obj36.asm"
0000D578                            ; ---------------------------------------------------------------------------
0000D578                            ; Sprite mappings - spikes
0000D578                            ; ---------------------------------------------------------------------------
0000D578 0000                       		dc.w byte_CFF4-Map_obj36
0000D57A 0000                       		dc.w byte_D004-Map_obj36
0000D57C 0000                       		dc.w byte_D014-Map_obj36
0000D57E 0000                       		dc.w byte_D01A-Map_obj36
0000D580 0000                       		dc.w byte_D02A-Map_obj36
0000D582 0000                       		dc.w byte_D049-Map_obj36
0000D584 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D585 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D58A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D58F F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D594 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D595 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D59A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D59F 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D5A4 01                         byte_D014:	dc.b 1			; 1 spike
0000D5A5 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5AA 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D5AB F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D5B0 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5B5 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D5BA 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D5BB F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D5C0 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D5C5 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D5CA F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D5CF F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D5D4 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D5D9 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D5DA FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5E0 00                         		even
0000D5E0 00                         		even
0000D5E0                            
0000D5E0                            ; ===========================================================================
0000D5E0                            ; ---------------------------------------------------------------------------
0000D5E0                            ; Object 3B - purple rock (GHZ)
0000D5E0                            ; ---------------------------------------------------------------------------
0000D5E0                            
0000D5E0                            Obj3B:					; XREF: Obj_Index
0000D5E0 7000                       		moveq	#0,d0
0000D5E2 1028 0024                  		move.b	$24(a0),d0
0000D5E6 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D5EA 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D5EE                            ; ===========================================================================
0000D5EE 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D5F0 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D5F2                            ; ===========================================================================
0000D5F2                            
0000D5F2                            Obj3B_Main:				; XREF: Obj3B_Index
0000D5F2 5428 0024                  		addq.b	#2,$24(a0)
0000D5F6 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D5FE 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D604 117C 0004 0001             		move.b	#4,1(a0)
0000D60A 117C 0013 0019             		move.b	#$13,$19(a0)
0000D610 117C 0004 0018             		move.b	#4,$18(a0)
0000D616                            
0000D616                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D616 323C 001B                  		move.w	#$1B,d1
0000D61A 343C 0010                  		move.w	#$10,d2
0000D61E 363C 0010                  		move.w	#$10,d3
0000D622 3828 0008                  		move.w	8(a0),d4
0000D626 6100 0000                  		bsr.w	SolidObject
0000D62A 6100 0000                  		bsr.w	DisplaySprite
0000D62E 3028 0008                  		move.w	8(a0),d0
0000D632 0240 FF80                  		andi.w	#$FF80,d0
0000D636 3238 F700                  		move.w	($FFFFF700).w,d1
0000D63A 0441 0080                  		subi.w	#$80,d1
0000D63E 0241 FF80                  		andi.w	#$FF80,d1
0000D642 9041                       		sub.w	d1,d0
0000D644 0C40 0280                  		cmpi.w	#$280,d0
0000D648 6200 0000                  		bhi.w	DeleteObject
0000D64C 4E75                       		rts	
0000D64E                            ; ===========================================================================
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E                            ; Object 49 - waterfall	sound effect (GHZ)
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E                            
0000D64E                            Obj49:					; XREF: Obj_Index
0000D64E 7000                       		moveq	#0,d0
0000D650 1028 0024                  		move.b	$24(a0),d0
0000D654 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D658 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D65C                            ; ===========================================================================
0000D65C 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D65E 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D660                            ; ===========================================================================
0000D660                            
0000D660                            Obj49_Main:				; XREF: Obj49_Index
0000D660 5428 0024                  		addq.b	#2,$24(a0)
0000D664 117C 0004 0001             		move.b	#4,1(a0)
0000D66A                            
0000D66A                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D66A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D66E 0200 003F                  		andi.b	#$3F,d0
0000D672 6600                       		bne.s	Obj49_ChkDel
0000D674 303C 00D0                  		move.w	#$D0,d0
0000D678 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D67E                            
0000D67E                            Obj49_ChkDel:
0000D67E 3028 0008                  		move.w	8(a0),d0
0000D682 0240 FF80                  		andi.w	#$FF80,d0
0000D686 3238 F700                  		move.w	($FFFFF700).w,d1
0000D68A 0441 0080                  		subi.w	#$80,d1
0000D68E 0241 FF80                  		andi.w	#$FF80,d1
0000D692 9041                       		sub.w	d1,d0
0000D694 0C40 0280                  		cmpi.w	#$280,d0
0000D698 6200 0000                  		bhi.w	DeleteObject
0000D69C 4E75                       		rts	
0000D69E                            ; ===========================================================================
0000D69E                            ; ---------------------------------------------------------------------------
0000D69E                            ; Sprite mappings - purple rock	(GHZ)
0000D69E                            ; ---------------------------------------------------------------------------
0000D69E                            Map_obj3B:
0000D69E                            	include "_maps\obj3B.asm"
0000D69E                            ; ---------------------------------------------------------------------------
0000D69E                            ; Sprite mappings - purple rock	(GHZ)
0000D69E                            ; ---------------------------------------------------------------------------
0000D69E 0000                       		dc.w byte_D110-Map_obj3B
0000D6A0 02                         byte_D110:	dc.b 2
0000D6A1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D6A6 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D6AC 00                         		even
0000D6AC 00                         		even
0000D6AC                            
0000D6AC                            ; ===========================================================================
0000D6AC                            ; ---------------------------------------------------------------------------
0000D6AC                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D6AC                            ; ---------------------------------------------------------------------------
0000D6AC                            
0000D6AC                            Obj3C:					; XREF: Obj_Index
0000D6AC 7000                       		moveq	#0,d0
0000D6AE 1028 0024                  		move.b	$24(a0),d0
0000D6B2 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D6B6 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D6BA 6000 0000                  		bra.w	MarkObjGone
0000D6BE                            ; ===========================================================================
0000D6BE 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D6C0 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D6C2 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D6C4                            ; ===========================================================================
0000D6C4                            
0000D6C4                            Obj3C_Main:				; XREF: Obj3C_Index
0000D6C4 5428 0024                  		addq.b	#2,$24(a0)
0000D6C8 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D6D0 317C 450F 0002             		move.w	#$450F,2(a0)
0000D6D6 117C 0004 0001             		move.b	#4,1(a0)
0000D6DC 117C 0010 0019             		move.b	#$10,$19(a0)
0000D6E2 117C 0004 0018             		move.b	#4,$18(a0)
0000D6E8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D6EE                            
0000D6EE                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D6EE 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D6F4 323C 001B                  		move.w	#$1B,d1
0000D6F8 343C 0020                  		move.w	#$20,d2
0000D6FC 363C 0020                  		move.w	#$20,d3
0000D700 3828 0008                  		move.w	8(a0),d4
0000D704 6100 0000                  		bsr.w	SolidObject
0000D708 0828 0005 0022             		btst	#5,$22(a0)
0000D70E 6600                       		bne.s	Obj3C_ChkRoll
0000D710                            
0000D710                            locret_D180:
0000D710 4E75                       		rts	
0000D712                            ; ===========================================================================
0000D712                            
0000D712                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D712 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D718 66F6                       		bne.s	locret_D180	; if not, branch
0000D71A 3028 0030                  		move.w	$30(a0),d0
0000D71E 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D720 4440                       		neg.w	d0
0000D722                            
0000D722                            Obj3C_ChkSpeed:
0000D722 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D726 65E8                       		bcs.s	locret_D180	; if not, branch
0000D728 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D72E 5869 0008                  		addq.w	#4,8(a1)
0000D732 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D738 3028 0008                  		move.w	8(a0),d0
0000D73C B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D740 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D742 5169 0008                  		subq.w	#8,8(a1)
0000D746 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D74C                            
0000D74C                            Obj3C_Smash:
0000D74C 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D752 08A8 0005 0022             		bclr	#5,$22(a0)
0000D758 08A9 0005 0022             		bclr	#5,$22(a1)
0000D75E 7207                       		moveq	#7,d1		; load 8 fragments
0000D760 343C 0070                  		move.w	#$70,d2
0000D764 6100                       		bsr.s	SmashObject
0000D766                            
0000D766                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D766 6100 0000                  		bsr.w	SpeedToPos
0000D76A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D770 6100 0000                  		bsr.w	DisplaySprite
0000D774 4A28 0001                  		tst.b	1(a0)
0000D778 6A00 0000                  		bpl.w	DeleteObject
0000D77C 4E75                       		rts	
0000D77E                            
0000D77E                            ; ---------------------------------------------------------------------------
0000D77E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D77E                            ; ---------------------------------------------------------------------------
0000D77E                            
0000D77E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D77E                            
0000D77E                            
0000D77E                            SmashObject:				; XREF: Obj3C_Smash
0000D77E 7000                       		moveq	#0,d0
0000D780 1028 001A                  		move.b	$1A(a0),d0
0000D784 D040                       		add.w	d0,d0
0000D786 2668 0004                  		movea.l	4(a0),a3
0000D78A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D78E 524B                       		addq.w	#1,a3
0000D790 08E8 0005 0001             		bset	#5,1(a0)
0000D796 1810                       		move.b	0(a0),d4
0000D798 1A28 0001                  		move.b	1(a0),d5
0000D79C 2248                       		movea.l	a0,a1
0000D79E 6000                       		bra.s	Smash_LoadFrag
0000D7A0                            ; ===========================================================================
0000D7A0                            
0000D7A0                            Smash_Loop:
0000D7A0 6100 0000                  		bsr.w	SingleObjLoad
0000D7A4 6600                       		bne.s	Smash_PlaySnd
0000D7A6 5A4B                       		addq.w	#5,a3
0000D7A8                            
0000D7A8                            Smash_LoadFrag:				; XREF: SmashObject
0000D7A8 137C 0004 0024             		move.b	#4,$24(a1)
0000D7AE 1284                       		move.b	d4,0(a1)
0000D7B0 234B 0004                  		move.l	a3,4(a1)
0000D7B4 1345 0001                  		move.b	d5,1(a1)
0000D7B8 3368 0008 0008             		move.w	8(a0),8(a1)
0000D7BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D7C4 3368 0002 0002             		move.w	2(a0),2(a1)
0000D7CA 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D7D0 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D7D6 335C 0010                  		move.w	(a4)+,$10(a1)
0000D7DA 335C 0012                  		move.w	(a4)+,$12(a1)
0000D7DE B3C8                       		cmpa.l	a0,a1
0000D7E0 6400                       		bcc.s	loc_D268
0000D7E2 2F08                       		move.l	a0,-(sp)
0000D7E4 2049                       		movea.l	a1,a0
0000D7E6 6100 0000                  		bsr.w	SpeedToPos
0000D7EA D568 0012                  		add.w	d2,$12(a0)
0000D7EE 205F                       		movea.l	(sp)+,a0
0000D7F0 6100 0000                  		bsr.w	DisplaySprite2
0000D7F4                            
0000D7F4                            loc_D268:
0000D7F4 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D7F8                            
0000D7F8                            Smash_PlaySnd:
0000D7F8 303C 00CB                  		move.w	#$CB,d0
0000D7FC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D802                            ; End of function SmashObject
0000D802                            
0000D802                            ; ===========================================================================
0000D802                            ; Smashed block	fragment speeds
0000D802                            ;
0000D802 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D806 0600 FF00                  		dc.w $600, $FF00
0000D80A 0600 0100                  		dc.w $600, $100
0000D80E 0400 0500                  		dc.w $400, $500
0000D812 0600 FA00                  		dc.w $600, $FA00
0000D816 0800 FE00                  		dc.w $800, $FE00
0000D81A 0800 0200                  		dc.w $800, $200
0000D81E 0600 0600                  		dc.w $600, $600
0000D822                            
0000D822 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D826 F800 FE00                  		dc.w $F800, $FE00
0000D82A F800 0200                  		dc.w $F800, $200
0000D82E FA00 0600                  		dc.w $FA00, $600
0000D832 FC00 FB00                  		dc.w $FC00, $FB00
0000D836 FA00 FF00                  		dc.w $FA00, $FF00
0000D83A FA00 0100                  		dc.w $FA00, $100
0000D83E FC00 0500                  		dc.w $FC00, $500
0000D842                            ; ---------------------------------------------------------------------------
0000D842                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D842                            ; ---------------------------------------------------------------------------
0000D842                            Map_obj3C:
0000D842                            	include "_maps\obj3C.asm"
0000D842                            ; ---------------------------------------------------------------------------
0000D842                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D842                            ; ---------------------------------------------------------------------------
0000D842 0000                       		dc.w byte_D2BC-Map_obj3C
0000D844 0000                       		dc.w byte_D2E5-Map_obj3C
0000D846 0000                       		dc.w byte_D30E-Map_obj3C
0000D848 08                         byte_D2BC:	dc.b 8
0000D849 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D84E F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D853 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D858 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D85D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D862 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D867 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D86C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D871 08                         byte_D2E5:	dc.b 8
0000D872 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D877 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D87C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D881 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D886 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D88B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D890 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D895 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D89A 08                         byte_D30E:	dc.b 8
0000D89B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D8A0 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8A5 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8AA 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8AF E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D8B4 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D8B9 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D8BE 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D8C4 00                         		even
0000D8C4 00                         		even
0000D8C4                            
0000D8C4                            ; ---------------------------------------------------------------------------
0000D8C4                            ; Object code loading subroutine
0000D8C4                            ; ---------------------------------------------------------------------------
0000D8C4                            
0000D8C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8C4                            
0000D8C4                            
0000D8C4                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D8C4 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D8C8 7E7F                       		moveq	#$7F,d7
0000D8CA 7000                       		moveq	#0,d0
0000D8CC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D8D2 6400                       		bcc.s	loc_D362
0000D8D4                            
0000D8D4                            loc_D348:
0000D8D4 1010                       		move.b	(a0),d0		; load object number from RAM
0000D8D6 6700                       		beq.s	loc_D358
0000D8D8 D040                       		add.w	d0,d0
0000D8DA D040                       		add.w	d0,d0
0000D8DC 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D8E0 4E91                       		jsr	(a1)		; run the object's code
0000D8E2 7000                       		moveq	#0,d0
0000D8E4                            
0000D8E4                            loc_D358:
0000D8E4 41E8 0040                  		lea	$40(a0),a0	; next object
0000D8E8 51CF FFEA                  		dbf	d7,loc_D348
0000D8EC 4E75                       		rts	
0000D8EE                            ; ===========================================================================
0000D8EE                            
0000D8EE                            loc_D362:
0000D8EE 7E1F                       		moveq	#$1F,d7
0000D8F0 61E2                       		bsr.s	loc_D348
0000D8F2 7E5F                       		moveq	#$5F,d7
0000D8F4                            
0000D8F4                            loc_D368:
0000D8F4 7000                       		moveq	#0,d0
0000D8F6 1010                       		move.b	(a0),d0
0000D8F8 6700                       		beq.s	loc_D378
0000D8FA 4A28 0001                  		tst.b	1(a0)
0000D8FE 6A00                       		bpl.s	loc_D378
0000D900 6100 0000                  		bsr.w	DisplaySprite
0000D904                            
0000D904                            loc_D378:
0000D904 41E8 0040                  		lea	$40(a0),a0
0000D908                            
0000D908                            loc_D37C:
0000D908 51CF FFEA                  		dbf	d7,loc_D368
0000D90C 4E75                       		rts	
0000D90E                            ; End of function ObjectsLoad
0000D90E                            
0000D90E                            ; ===========================================================================
0000D90E                            ; ---------------------------------------------------------------------------
0000D90E                            ; Object pointers
0000D90E                            ; ---------------------------------------------------------------------------
0000D90E                            Obj_Index:
0000D90E                            	include "_inc\Object pointers.asm"
0000D90E                            ; ---------------------------------------------------------------------------
0000D90E                            ; Object pointers
0000D90E                            ; ---------------------------------------------------------------------------
0000D90E 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D91E 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D92E 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D93E 0000 0000 0000 AB6A 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D94E 0000 777E 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D95E 0000 7DA4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D96E 0000 85F2 0000 865A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D97E 0000 8CA4 0000 8F92 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D98E 0000 0000 0000 9C66 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D99E 0000 9F9E 0000 A58A 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D9AE 0000 989E 0000 8D7A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D9BE 0000 B18E 0000 A77E 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D9CE 0000 BB60 0000 C20E 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D9DE 0000 B6C4 0000 D3B8 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D9EE 0000 C994 0000 CA4E 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D9FE 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DA0E 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA1E 0000 BE7C 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA2E 0000 D64E 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DA3E 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DA4E 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DA5E 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DA6E 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DA7E 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DA8E 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DA9E 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DAAE 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DABE 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DACE 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DADE 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DAEE 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DAFE 0000 0000 0000 CC88 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DB0E 0000 529E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB1E 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB2E 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB2E 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB3E                            
0000DB3E                            ; ---------------------------------------------------------------------------
0000DB3E                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DB3E                            ; ---------------------------------------------------------------------------
0000DB3E                            
0000DB3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB3E                            
0000DB3E                            
0000DB3E                            ObjectFall:
0000DB3E 2428 0008                  		move.l	8(a0),d2
0000DB42 2628 000C                  		move.l	$C(a0),d3
0000DB46 3028 0010                  		move.w	$10(a0),d0
0000DB4A 48C0                       		ext.l	d0
0000DB4C E180                       		asl.l	#8,d0
0000DB4E D480                       		add.l	d0,d2
0000DB50 3028 0012                  		move.w	$12(a0),d0
0000DB54 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DB5A 48C0                       		ext.l	d0
0000DB5C E180                       		asl.l	#8,d0
0000DB5E D680                       		add.l	d0,d3
0000DB60 2142 0008                  		move.l	d2,8(a0)
0000DB64 2143 000C                  		move.l	d3,$C(a0)
0000DB68 4E75                       		rts	
0000DB6A                            ; End of function ObjectFall
0000DB6A                            
0000DB6A                            ; ---------------------------------------------------------------------------
0000DB6A                            ; Subroutine translating object	speed to update	object position
0000DB6A                            ; ---------------------------------------------------------------------------
0000DB6A                            
0000DB6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB6A                            
0000DB6A                            
0000DB6A                            SpeedToPos:
0000DB6A 2428 0008                  		move.l	8(a0),d2
0000DB6E 2628 000C                  		move.l	$C(a0),d3
0000DB72 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DB76 48C0                       		ext.l	d0
0000DB78 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DB7A D480                       		add.l	d0,d2		; add to x-axis	position
0000DB7C 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DB80 48C0                       		ext.l	d0
0000DB82 E180                       		asl.l	#8,d0		; multiply by $100
0000DB84 D680                       		add.l	d0,d3		; add to y-axis	position
0000DB86 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DB8A 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DB8E 4E75                       		rts	
0000DB90                            ; End of function SpeedToPos
0000DB90                            
0000DB90                            ; ---------------------------------------------------------------------------
0000DB90                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DB90                            ; ---------------------------------------------------------------------------
0000DB90                            
0000DB90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB90                            
0000DB90                            
0000DB90                            DisplaySprite:
0000DB90 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DB94 3028 0018                  		move.w	$18(a0),d0
0000DB98 E248                       		lsr.w	#1,d0
0000DB9A 0240 0380                  		andi.w	#$380,d0
0000DB9E D2C0                       		adda.w	d0,a1
0000DBA0 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DBA4 6400                       		bcc.s	locret_D620
0000DBA6 5451                       		addq.w	#2,(a1)
0000DBA8 D2D1                       		adda.w	(a1),a1
0000DBAA 3288                       		move.w	a0,(a1)
0000DBAC                            
0000DBAC                            locret_D620:
0000DBAC 4E75                       		rts	
0000DBAE                            ; End of function DisplaySprite
0000DBAE                            
0000DBAE                            ; ---------------------------------------------------------------------------
0000DBAE                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DBAE                            ; ---------------------------------------------------------------------------
0000DBAE                            
0000DBAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBAE                            
0000DBAE                            
0000DBAE                            DisplaySprite2:
0000DBAE 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DBB2 3029 0018                  		move.w	$18(a1),d0
0000DBB6 E248                       		lsr.w	#1,d0
0000DBB8 0240 0380                  		andi.w	#$380,d0
0000DBBC D4C0                       		adda.w	d0,a2
0000DBBE 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DBC2 6400                       		bcc.s	locret_D63E
0000DBC4 5452                       		addq.w	#2,(a2)
0000DBC6 D4D2                       		adda.w	(a2),a2
0000DBC8 3489                       		move.w	a1,(a2)
0000DBCA                            
0000DBCA                            locret_D63E:
0000DBCA 4E75                       		rts	
0000DBCC                            ; End of function DisplaySprite2
0000DBCC                            
0000DBCC                            ; ---------------------------------------------------------------------------
0000DBCC                            ; Subroutine to	delete an object
0000DBCC                            ; ---------------------------------------------------------------------------
0000DBCC                            
0000DBCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBCC                            
0000DBCC                            
0000DBCC                            DeleteObject:
0000DBCC 2248                       		movea.l	a0,a1
0000DBCE                            
0000DBCE                            DeleteObject2:
0000DBCE 7200                       		moveq	#0,d1
0000DBD0 700F                       		moveq	#$F,d0
0000DBD2                            
0000DBD2                            loc_D646:
0000DBD2 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DBD4 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DBD8 4E75                       		rts	
0000DBDA                            ; End of function DeleteObject
0000DBDA                            
0000DBDA                            ; ===========================================================================
0000DBDA 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DBDE 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DBE2 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DBE6 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DBEA                            ; ---------------------------------------------------------------------------
0000DBEA                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DBEA                            ; ---------------------------------------------------------------------------
0000DBEA                            
0000DBEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBEA                            
0000DBEA                            
0000DBEA                            BuildSprites:				; XREF: TitleScreen; et al
0000DBEA 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DBEE 7A00                       		moveq	#0,d5
0000DBF0 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DBF4 7E07                       		moveq	#7,d7
0000DBF6                            
0000DBF6                            loc_D66A:
0000DBF6 4A54                       		tst.w	(a4)
0000DBF8 6700 0000                  		beq.w	loc_D72E
0000DBFC 7C02                       		moveq	#2,d6
0000DBFE                            
0000DBFE                            loc_D672:
0000DBFE 3074 6000                  		movea.w	(a4,d6.w),a0
0000DC02 4A10                       		tst.b	(a0)
0000DC04 6700 0000                  		beq.w	loc_D726
0000DC08 08A8 0007 0001             		bclr	#7,1(a0)
0000DC0E 1028 0001                  		move.b	1(a0),d0
0000DC12 1800                       		move.b	d0,d4
0000DC14 0240 000C                  		andi.w	#$C,d0
0000DC18 6700                       		beq.s	loc_D6DE
0000DC1A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC1E 7000                       		moveq	#0,d0
0000DC20 1028 0019                  		move.b	$19(a0),d0
0000DC24 3628 0008                  		move.w	8(a0),d3
0000DC28 9651                       		sub.w	(a1),d3
0000DC2A 3203                       		move.w	d3,d1
0000DC2C D240                       		add.w	d0,d1
0000DC2E 6B00 0000                  		bmi.w	loc_D726
0000DC32 3203                       		move.w	d3,d1
0000DC34 9240                       		sub.w	d0,d1
0000DC36 0C41 0140                  		cmpi.w	#$140,d1
0000DC3A 6C00                       		bge.s	loc_D726
0000DC3C 0643 0080                  		addi.w	#$80,d3
0000DC40 0804 0004                  		btst	#4,d4
0000DC44 6700                       		beq.s	loc_D6E8
0000DC46 7000                       		moveq	#0,d0
0000DC48 1028 0016                  		move.b	$16(a0),d0
0000DC4C 3428 000C                  		move.w	$C(a0),d2
0000DC50 9469 0004                  		sub.w	4(a1),d2
0000DC54 3202                       		move.w	d2,d1
0000DC56 D240                       		add.w	d0,d1
0000DC58 6B00                       		bmi.s	loc_D726
0000DC5A 3202                       		move.w	d2,d1
0000DC5C 9240                       		sub.w	d0,d1
0000DC5E 0C41 00E0                  		cmpi.w	#$E0,d1
0000DC62 6C00                       		bge.s	loc_D726
0000DC64 0642 0080                  		addi.w	#$80,d2
0000DC68 6000                       		bra.s	loc_D700
0000DC6A                            ; ===========================================================================
0000DC6A                            
0000DC6A                            loc_D6DE:
0000DC6A 3428 000A                  		move.w	$A(a0),d2
0000DC6E 3628 0008                  		move.w	8(a0),d3
0000DC72 6000                       		bra.s	loc_D700
0000DC74                            ; ===========================================================================
0000DC74                            
0000DC74                            loc_D6E8:
0000DC74 3428 000C                  		move.w	$C(a0),d2
0000DC78 9469 0004                  		sub.w	4(a1),d2
0000DC7C 0642 0080                  		addi.w	#$80,d2
0000DC80 0C42 0060                  		cmpi.w	#$60,d2
0000DC84 6500                       		bcs.s	loc_D726
0000DC86 0C42 0180                  		cmpi.w	#$180,d2
0000DC8A 6400                       		bcc.s	loc_D726
0000DC8C                            
0000DC8C                            loc_D700:
0000DC8C 2268 0004                  		movea.l	4(a0),a1
0000DC90 7200                       		moveq	#0,d1
0000DC92 0804 0005                  		btst	#5,d4
0000DC96 6600                       		bne.s	loc_D71C
0000DC98 1228 001A                  		move.b	$1A(a0),d1
0000DC9C D201                       		add.b	d1,d1
0000DC9E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DCA2 1219                       		move.b	(a1)+,d1
0000DCA4 5301                       		subq.b	#1,d1
0000DCA6 6B00                       		bmi.s	loc_D720
0000DCA8                            
0000DCA8                            loc_D71C:
0000DCA8 6100 0000                  		bsr.w	sub_D750
0000DCAC                            
0000DCAC                            loc_D720:
0000DCAC 08E8 0007 0001             		bset	#7,1(a0)
0000DCB2                            
0000DCB2                            loc_D726:
0000DCB2 5446                       		addq.w	#2,d6
0000DCB4 5554                       		subq.w	#2,(a4)
0000DCB6 6600 FF46                  		bne.w	loc_D672
0000DCBA                            
0000DCBA                            loc_D72E:
0000DCBA 49EC 0080                  		lea	$80(a4),a4
0000DCBE 51CF FF36                  		dbf	d7,loc_D66A
0000DCC2 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DCC6 0C05 0050                  		cmpi.b	#$50,d5
0000DCCA 6700                       		beq.s	loc_D748
0000DCCC 24BC 0000 0000             		move.l	#0,(a2)
0000DCD2 4E75                       		rts	
0000DCD4                            ; ===========================================================================
0000DCD4                            
0000DCD4                            loc_D748:
0000DCD4 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DCDA 4E75                       		rts	
0000DCDC                            ; End of function BuildSprites
0000DCDC                            
0000DCDC                            
0000DCDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCDC                            
0000DCDC                            
0000DCDC                            sub_D750:				; XREF: BuildSprites
0000DCDC 3668 0002                  		movea.w	2(a0),a3
0000DCE0 0804 0000                  		btst	#0,d4
0000DCE4 6600                       		bne.s	loc_D796
0000DCE6 0804 0001                  		btst	#1,d4
0000DCEA 6600 0000                  		bne.w	loc_D7E4
0000DCEE                            ; End of function sub_D750
0000DCEE                            
0000DCEE                            
0000DCEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCEE                            
0000DCEE                            
0000DCEE                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DCEE 0C05 0050                  		cmpi.b	#$50,d5
0000DCF2 6700                       		beq.s	locret_D794
0000DCF4 1019                       		move.b	(a1)+,d0
0000DCF6 4880                       		ext.w	d0
0000DCF8 D042                       		add.w	d2,d0
0000DCFA 34C0                       		move.w	d0,(a2)+
0000DCFC 14D9                       		move.b	(a1)+,(a2)+
0000DCFE 5205                       		addq.b	#1,d5
0000DD00 14C5                       		move.b	d5,(a2)+
0000DD02 1019                       		move.b	(a1)+,d0
0000DD04 E148                       		lsl.w	#8,d0
0000DD06 1019                       		move.b	(a1)+,d0
0000DD08 D04B                       		add.w	a3,d0
0000DD0A 34C0                       		move.w	d0,(a2)+
0000DD0C 1019                       		move.b	(a1)+,d0
0000DD0E 4880                       		ext.w	d0
0000DD10 D043                       		add.w	d3,d0
0000DD12 0240 01FF                  		andi.w	#$1FF,d0
0000DD16 6600                       		bne.s	loc_D78E
0000DD18 5240                       		addq.w	#1,d0
0000DD1A                            
0000DD1A                            loc_D78E:
0000DD1A 34C0                       		move.w	d0,(a2)+
0000DD1C 51C9 FFD0                  		dbf	d1,sub_D762
0000DD20                            
0000DD20                            locret_D794:
0000DD20 4E75                       		rts	
0000DD22                            ; End of function sub_D762
0000DD22                            
0000DD22                            ; ===========================================================================
0000DD22                            
0000DD22                            loc_D796:
0000DD22 0804 0001                  		btst	#1,d4
0000DD26 6600 0000                  		bne.w	loc_D82A
0000DD2A                            
0000DD2A                            loc_D79E:
0000DD2A 0C05 0050                  		cmpi.b	#$50,d5
0000DD2E 6700                       		beq.s	locret_D7E2
0000DD30 1019                       		move.b	(a1)+,d0
0000DD32 4880                       		ext.w	d0
0000DD34 D042                       		add.w	d2,d0
0000DD36 34C0                       		move.w	d0,(a2)+
0000DD38 1819                       		move.b	(a1)+,d4
0000DD3A 14C4                       		move.b	d4,(a2)+
0000DD3C 5205                       		addq.b	#1,d5
0000DD3E 14C5                       		move.b	d5,(a2)+
0000DD40 1019                       		move.b	(a1)+,d0
0000DD42 E148                       		lsl.w	#8,d0
0000DD44 1019                       		move.b	(a1)+,d0
0000DD46 D04B                       		add.w	a3,d0
0000DD48 0A40 0800                  		eori.w	#$800,d0
0000DD4C 34C0                       		move.w	d0,(a2)+
0000DD4E 1019                       		move.b	(a1)+,d0
0000DD50 4880                       		ext.w	d0
0000DD52 4440                       		neg.w	d0
0000DD54 D804                       		add.b	d4,d4
0000DD56 0244 0018                  		andi.w	#$18,d4
0000DD5A 5044                       		addq.w	#8,d4
0000DD5C 9044                       		sub.w	d4,d0
0000DD5E D043                       		add.w	d3,d0
0000DD60 0240 01FF                  		andi.w	#$1FF,d0
0000DD64 6600                       		bne.s	loc_D7DC
0000DD66 5240                       		addq.w	#1,d0
0000DD68                            
0000DD68                            loc_D7DC:
0000DD68 34C0                       		move.w	d0,(a2)+
0000DD6A 51C9 FFBE                  		dbf	d1,loc_D79E
0000DD6E                            
0000DD6E                            locret_D7E2:
0000DD6E 4E75                       		rts	
0000DD70                            ; ===========================================================================
0000DD70                            
0000DD70                            loc_D7E4:				; XREF: sub_D750
0000DD70 0C05 0050                  		cmpi.b	#$50,d5
0000DD74 6700                       		beq.s	locret_D828
0000DD76 1019                       		move.b	(a1)+,d0
0000DD78 1811                       		move.b	(a1),d4
0000DD7A 4880                       		ext.w	d0
0000DD7C 4440                       		neg.w	d0
0000DD7E E70C                       		lsl.b	#3,d4
0000DD80 0244 0018                  		andi.w	#$18,d4
0000DD84 5044                       		addq.w	#8,d4
0000DD86 9044                       		sub.w	d4,d0
0000DD88 D042                       		add.w	d2,d0
0000DD8A 34C0                       		move.w	d0,(a2)+
0000DD8C 14D9                       		move.b	(a1)+,(a2)+
0000DD8E 5205                       		addq.b	#1,d5
0000DD90 14C5                       		move.b	d5,(a2)+
0000DD92 1019                       		move.b	(a1)+,d0
0000DD94 E148                       		lsl.w	#8,d0
0000DD96 1019                       		move.b	(a1)+,d0
0000DD98 D04B                       		add.w	a3,d0
0000DD9A 0A40 1000                  		eori.w	#$1000,d0
0000DD9E 34C0                       		move.w	d0,(a2)+
0000DDA0 1019                       		move.b	(a1)+,d0
0000DDA2 4880                       		ext.w	d0
0000DDA4 D043                       		add.w	d3,d0
0000DDA6 0240 01FF                  		andi.w	#$1FF,d0
0000DDAA 6600                       		bne.s	loc_D822
0000DDAC 5240                       		addq.w	#1,d0
0000DDAE                            
0000DDAE                            loc_D822:
0000DDAE 34C0                       		move.w	d0,(a2)+
0000DDB0 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DDB4                            
0000DDB4                            locret_D828:
0000DDB4 4E75                       		rts	
0000DDB6                            ; ===========================================================================
0000DDB6                            
0000DDB6                            loc_D82A:
0000DDB6 0C05 0050                  		cmpi.b	#$50,d5
0000DDBA 6700                       		beq.s	locret_D87C
0000DDBC 1019                       		move.b	(a1)+,d0
0000DDBE 1811                       		move.b	(a1),d4
0000DDC0 4880                       		ext.w	d0
0000DDC2 4440                       		neg.w	d0
0000DDC4 E70C                       		lsl.b	#3,d4
0000DDC6 0244 0018                  		andi.w	#$18,d4
0000DDCA 5044                       		addq.w	#8,d4
0000DDCC 9044                       		sub.w	d4,d0
0000DDCE D042                       		add.w	d2,d0
0000DDD0 34C0                       		move.w	d0,(a2)+
0000DDD2 1819                       		move.b	(a1)+,d4
0000DDD4 14C4                       		move.b	d4,(a2)+
0000DDD6 5205                       		addq.b	#1,d5
0000DDD8 14C5                       		move.b	d5,(a2)+
0000DDDA 1019                       		move.b	(a1)+,d0
0000DDDC E148                       		lsl.w	#8,d0
0000DDDE 1019                       		move.b	(a1)+,d0
0000DDE0 D04B                       		add.w	a3,d0
0000DDE2 0A40 1800                  		eori.w	#$1800,d0
0000DDE6 34C0                       		move.w	d0,(a2)+
0000DDE8 1019                       		move.b	(a1)+,d0
0000DDEA 4880                       		ext.w	d0
0000DDEC 4440                       		neg.w	d0
0000DDEE D804                       		add.b	d4,d4
0000DDF0 0244 0018                  		andi.w	#$18,d4
0000DDF4 5044                       		addq.w	#8,d4
0000DDF6 9044                       		sub.w	d4,d0
0000DDF8 D043                       		add.w	d3,d0
0000DDFA 0240 01FF                  		andi.w	#$1FF,d0
0000DDFE 6600                       		bne.s	loc_D876
0000DE00 5240                       		addq.w	#1,d0
0000DE02                            
0000DE02                            loc_D876:
0000DE02 34C0                       		move.w	d0,(a2)+
0000DE04 51C9 FFB0                  		dbf	d1,loc_D82A
0000DE08                            
0000DE08                            locret_D87C:
0000DE08 4E75                       		rts	
0000DE0A                            ; ---------------------------------------------------------------------------
0000DE0A                            ; Subroutine to	check if an object is on the screen
0000DE0A                            ; ---------------------------------------------------------------------------
0000DE0A                            
0000DE0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE0A                            
0000DE0A                            
0000DE0A                            ChkObjOnScreen:
0000DE0A 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DE0E 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DE12 6B00                       		bmi.s	NotOnScreen
0000DE14 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DE18 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE1A                            
0000DE1A 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE1E 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE22 6B00                       		bmi.s	NotOnScreen
0000DE24 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE28 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE2A                            
0000DE2A 7000                       		moveq	#0,d0		; set flag to 0
0000DE2C 4E75                       		rts	
0000DE2E                            ; ===========================================================================
0000DE2E                            
0000DE2E                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE2E 7001                       		moveq	#1,d0		; set flag to 1
0000DE30 4E75                       		rts	
0000DE32                            ; End of function ChkObjOnScreen
0000DE32                            
0000DE32                            
0000DE32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE32                            
0000DE32                            
0000DE32                            ChkObjOnScreen2:
0000DE32 7200                       		moveq	#0,d1
0000DE34 1228 0019                  		move.b	$19(a0),d1
0000DE38 3028 0008                  		move.w	8(a0),d0
0000DE3C 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DE40 D041                       		add.w	d1,d0
0000DE42 6B00                       		bmi.s	NotOnScreen2
0000DE44 D241                       		add.w	d1,d1
0000DE46 9041                       		sub.w	d1,d0
0000DE48 0C40 0140                  		cmpi.w	#320,d0
0000DE4C 6C00                       		bge.s	NotOnScreen2
0000DE4E                            
0000DE4E 3228 000C                  		move.w	$C(a0),d1
0000DE52 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DE56 6B00                       		bmi.s	NotOnScreen2
0000DE58 0C41 00E0                  		cmpi.w	#224,d1
0000DE5C 6C00                       		bge.s	NotOnScreen2
0000DE5E                            
0000DE5E 7000                       		moveq	#0,d0
0000DE60 4E75                       		rts	
0000DE62                            ; ===========================================================================
0000DE62                            
0000DE62                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DE62 7001                       		moveq	#1,d0
0000DE64 4E75                       		rts	
0000DE66                            ; End of function ChkObjOnScreen2
0000DE66                            
0000DE66                            ; ---------------------------------------------------------------------------
0000DE66                            ; Subroutine to	load a level's objects
0000DE66                            ; ---------------------------------------------------------------------------
0000DE66                            
0000DE66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE66                            
0000DE66                            
0000DE66                            ObjPosLoad:				; XREF: Level; et al
0000DE66 7000                       		moveq	#0,d0
0000DE68 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DE6C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DE70 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DE74                            ; End of function ObjPosLoad
0000DE74                            
0000DE74                            ; ===========================================================================
0000DE74 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DE76 0000                       		dc.w OPL_Next-OPL_Index
0000DE78                            ; ===========================================================================
0000DE78                            
0000DE78                            OPL_Main:				; XREF: OPL_Index
0000DE78 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DE7C 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DE80 ED08                       		lsl.b	#6,d0
0000DE82 E848                       		lsr.w	#4,d0
0000DE84 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DE8A 2248                       		movea.l	a0,a1
0000DE8C D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DE90 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DE94 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DE98 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DE9C 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DEA0 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DEA4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEA8 34FC 0101                  		move.w	#$101,(a2)+
0000DEAC 303C 005E                  		move.w	#$5E,d0
0000DEB0                            
0000DEB0                            OPL_ClrList:
0000DEB0 429A                       		clr.l	(a2)+
0000DEB2 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DEB6                            
0000DEB6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEBA 7400                       		moveq	#0,d2
0000DEBC 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DEC0 0446 0080                  		subi.w	#$80,d6
0000DEC4 6400                       		bcc.s	loc_D93C
0000DEC6 7C00                       		moveq	#0,d6
0000DEC8                            
0000DEC8                            loc_D93C:
0000DEC8 0246 FF80                  		andi.w	#$FF80,d6
0000DECC 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DED0                            
0000DED0                            loc_D944:
0000DED0 BC50                       		cmp.w	(a0),d6
0000DED2 6300                       		bls.s	loc_D956
0000DED4 4A28 0004                  		tst.b	4(a0)
0000DED8 6A00                       		bpl.s	loc_D952
0000DEDA 1412                       		move.b	(a2),d2
0000DEDC 5212                       		addq.b	#1,(a2)
0000DEDE                            
0000DEDE                            loc_D952:
0000DEDE 5C48                       		addq.w	#6,a0
0000DEE0 60EE                       		bra.s	loc_D944
0000DEE2                            ; ===========================================================================
0000DEE2                            
0000DEE2                            loc_D956:
0000DEE2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DEE6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DEEA 0446 0080                  		subi.w	#$80,d6
0000DEEE 6500                       		bcs.s	loc_D976
0000DEF0                            
0000DEF0                            loc_D964:
0000DEF0 BC50                       		cmp.w	(a0),d6
0000DEF2 6300                       		bls.s	loc_D976
0000DEF4 4A28 0004                  		tst.b	4(a0)
0000DEF8 6A00                       		bpl.s	loc_D972
0000DEFA 522A 0001                  		addq.b	#1,1(a2)
0000DEFE                            
0000DEFE                            loc_D972:
0000DEFE 5C48                       		addq.w	#6,a0
0000DF00 60EE                       		bra.s	loc_D964
0000DF02                            ; ===========================================================================
0000DF02                            
0000DF02                            loc_D976:
0000DF02 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF06 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DF0C                            
0000DF0C                            OPL_Next:				; XREF: OPL_Index
0000DF0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF10 7400                       		moveq	#0,d2
0000DF12 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF16 0246 FF80                  		andi.w	#$FF80,d6
0000DF1A BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF1E 6700 0000                  		beq.w	locret_DA3A
0000DF22 6C00                       		bge.s	loc_D9F6
0000DF24 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF28 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF2C 0446 0080                  		subi.w	#$80,d6
0000DF30 6500                       		bcs.s	loc_D9D2
0000DF32                            
0000DF32                            loc_D9A6:
0000DF32 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF36 6C00                       		bge.s	loc_D9D2
0000DF38 5D48                       		subq.w	#6,a0
0000DF3A 4A28 0004                  		tst.b	4(a0)
0000DF3E 6A00                       		bpl.s	loc_D9BC
0000DF40 532A 0001                  		subq.b	#1,1(a2)
0000DF44 142A 0001                  		move.b	1(a2),d2
0000DF48                            
0000DF48                            loc_D9BC:
0000DF48 6100 0000                  		bsr.w	loc_DA3C
0000DF4C 6600                       		bne.s	loc_D9C6
0000DF4E 5D48                       		subq.w	#6,a0
0000DF50 60E0                       		bra.s	loc_D9A6
0000DF52                            ; ===========================================================================
0000DF52                            
0000DF52                            loc_D9C6:
0000DF52 4A28 0004                  		tst.b	4(a0)
0000DF56 6A00                       		bpl.s	loc_D9D0
0000DF58 522A 0001                  		addq.b	#1,1(a2)
0000DF5C                            
0000DF5C                            loc_D9D0:
0000DF5C 5C48                       		addq.w	#6,a0
0000DF5E                            
0000DF5E                            loc_D9D2:
0000DF5E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF62 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF66 0646 0300                  		addi.w	#$300,d6
0000DF6A                            
0000DF6A                            loc_D9DE:
0000DF6A BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF6E 6E00                       		bgt.s	loc_D9F0
0000DF70 4A28 FFFE                  		tst.b	-2(a0)
0000DF74 6A00                       		bpl.s	loc_D9EC
0000DF76 5312                       		subq.b	#1,(a2)
0000DF78                            
0000DF78                            loc_D9EC:
0000DF78 5D48                       		subq.w	#6,a0
0000DF7A 60EE                       		bra.s	loc_D9DE
0000DF7C                            ; ===========================================================================
0000DF7C                            
0000DF7C                            loc_D9F0:
0000DF7C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF80 4E75                       		rts	
0000DF82                            ; ===========================================================================
0000DF82                            
0000DF82                            loc_D9F6:
0000DF82 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF86 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF8A 0646 0280                  		addi.w	#$280,d6
0000DF8E                            
0000DF8E                            loc_DA02:
0000DF8E BC50                       		cmp.w	(a0),d6
0000DF90 6300                       		bls.s	loc_DA16
0000DF92 4A28 0004                  		tst.b	4(a0)
0000DF96 6A00                       		bpl.s	loc_DA10
0000DF98 1412                       		move.b	(a2),d2
0000DF9A 5212                       		addq.b	#1,(a2)
0000DF9C                            
0000DF9C                            loc_DA10:
0000DF9C 6100 0000                  		bsr.w	loc_DA3C
0000DFA0 67EC                       		beq.s	loc_DA02
0000DFA2                            
0000DFA2                            loc_DA16:
0000DFA2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFA6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DFAA 0446 0300                  		subi.w	#$300,d6
0000DFAE 6500                       		bcs.s	loc_DA36
0000DFB0                            
0000DFB0                            loc_DA24:
0000DFB0 BC50                       		cmp.w	(a0),d6
0000DFB2 6300                       		bls.s	loc_DA36
0000DFB4 4A28 0004                  		tst.b	4(a0)
0000DFB8 6A00                       		bpl.s	loc_DA32
0000DFBA 522A 0001                  		addq.b	#1,1(a2)
0000DFBE                            
0000DFBE                            loc_DA32:
0000DFBE 5C48                       		addq.w	#6,a0
0000DFC0 60EE                       		bra.s	loc_DA24
0000DFC2                            ; ===========================================================================
0000DFC2                            
0000DFC2                            loc_DA36:
0000DFC2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFC6                            
0000DFC6                            locret_DA3A:
0000DFC6 4E75                       		rts	
0000DFC8                            ; ===========================================================================
0000DFC8                            
0000DFC8                            loc_DA3C:
0000DFC8 4A28 0004                  		tst.b	4(a0)
0000DFCC 6A00                       		bpl.s	OPL_MakeItem
0000DFCE 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DFD4 6700                       		beq.s	OPL_MakeItem
0000DFD6 5C48                       		addq.w	#6,a0
0000DFD8 7000                       		moveq	#0,d0
0000DFDA 4E75                       		rts	
0000DFDC                            ; ===========================================================================
0000DFDC                            
0000DFDC                            OPL_MakeItem:
0000DFDC 6100 0000                  		bsr.w	SingleObjLoad
0000DFE0 6600                       		bne.s	locret_DA8A
0000DFE2 3358 0008                  		move.w	(a0)+,8(a1)
0000DFE6 3018                       		move.w	(a0)+,d0
0000DFE8 3200                       		move.w	d0,d1
0000DFEA 0240 0FFF                  		andi.w	#$FFF,d0
0000DFEE 3340 000C                  		move.w	d0,$C(a1)
0000DFF2 E559                       		rol.w	#2,d1
0000DFF4 0201 0003                  		andi.b	#3,d1
0000DFF8 1341 0001                  		move.b	d1,1(a1)
0000DFFC 1341 0022                  		move.b	d1,$22(a1)
0000E000 1018                       		move.b	(a0)+,d0
0000E002 6A00                       		bpl.s	loc_DA80
0000E004 0200 007F                  		andi.b	#$7F,d0
0000E008 1342 0023                  		move.b	d2,$23(a1)
0000E00C                            
0000E00C                            loc_DA80:
0000E00C 1280                       		move.b	d0,0(a1)
0000E00E 1358 0028                  		move.b	(a0)+,$28(a1)
0000E012 7000                       		moveq	#0,d0
0000E014                            
0000E014                            locret_DA8A:
0000E014 4E75                       		rts	
0000E016                            ; ---------------------------------------------------------------------------
0000E016                            ; Single object	loading	subroutine
0000E016                            ; ---------------------------------------------------------------------------
0000E016                            
0000E016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E016                            
0000E016                            
0000E016                            SingleObjLoad:
0000E016 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E01A 303C 005F                  		move.w	#$5F,d0
0000E01E                            
0000E01E                            loc_DA94:
0000E01E 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E020 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E022 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E026 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E02A                            
0000E02A                            locret_DAA0:
0000E02A 4E75                       		rts	
0000E02C                            ; End of function SingleObjLoad
0000E02C                            
0000E02C                            
0000E02C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E02C                            
0000E02C                            
0000E02C                            SingleObjLoad2:
0000E02C 2248                       		movea.l	a0,a1
0000E02E 303C F000                  		move.w	#-$1000,d0
0000E032 9048                       		sub.w	a0,d0
0000E034 EC48                       		lsr.w	#6,d0
0000E036 5340                       		subq.w	#1,d0
0000E038 6500                       		bcs.s	locret_DABC
0000E03A                            
0000E03A                            loc_DAB0:
0000E03A 4A11                       		tst.b	(a1)
0000E03C 6700                       		beq.s	locret_DABC
0000E03E 43E9 0040                  		lea	$40(a1),a1
0000E042 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E046                            
0000E046                            locret_DABC:
0000E046 4E75                       		rts	
0000E048                            ; End of function SingleObjLoad2
0000E048                            
0000E048                            ; ===========================================================================
0000E048                            ; ---------------------------------------------------------------------------
0000E048                            ; Object 41 - springs
0000E048                            ; ---------------------------------------------------------------------------
0000E048                            
0000E048                            Obj41:					; XREF: Obj_Index
0000E048 7000                       		moveq	#0,d0
0000E04A 1028 0024                  		move.b	$24(a0),d0
0000E04E 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E052 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E056 6100 FB38                  		bsr.w	DisplaySprite
0000E05A 3028 0008                  		move.w	8(a0),d0
0000E05E 0240 FF80                  		andi.w	#$FF80,d0
0000E062 3238 F700                  		move.w	($FFFFF700).w,d1
0000E066 0441 0080                  		subi.w	#$80,d1
0000E06A 0241 FF80                  		andi.w	#$FF80,d1
0000E06E 9041                       		sub.w	d1,d0
0000E070 0C40 0280                  		cmpi.w	#$280,d0
0000E074 6200 FB56                  		bhi.w	DeleteObject
0000E078 4E75                       		rts	
0000E07A                            ; ===========================================================================
0000E07A 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E07C 0000                       		dc.w Obj41_Up-Obj41_Index
0000E07E 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E080 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E082 0000                       		dc.w Obj41_LR-Obj41_Index
0000E084 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E086 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E088 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E08A 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E08C 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E08E                            
0000E08E F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E090 F600                       		dc.w -$A00		; power	of yellow spring
0000E092                            ; ===========================================================================
0000E092                            
0000E092                            Obj41_Main:				; XREF: Obj41_Index
0000E092 5428 0024                  		addq.b	#2,$24(a0)
0000E096 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E09E 317C 0523 0002             		move.w	#$523,2(a0)
0000E0A4 0028 0004 0001             		ori.b	#4,1(a0)
0000E0AA 117C 0010 0019             		move.b	#$10,$19(a0)
0000E0B0 117C 0004 0018             		move.b	#4,$18(a0)
0000E0B6 1028 0028                  		move.b	$28(a0),d0
0000E0BA 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E0BE 6700                       		beq.s	loc_DB54	; if not, branch
0000E0C0 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E0C6 117C 0001 001C             		move.b	#1,$1C(a0)
0000E0CC 117C 0003 001A             		move.b	#3,$1A(a0)
0000E0D2 317C 0533 0002             		move.w	#$533,2(a0)
0000E0D8 117C 0008 0019             		move.b	#8,$19(a0)
0000E0DE                            
0000E0DE                            loc_DB54:
0000E0DE 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E0E2 6700                       		beq.s	loc_DB66	; if not, branch
0000E0E4 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E0EA 08E8 0001 0022             		bset	#1,$22(a0)
0000E0F0                            
0000E0F0                            loc_DB66:
0000E0F0 0800 0001                  		btst	#1,d0
0000E0F4 6700                       		beq.s	loc_DB72
0000E0F6 08E8 0005 0002             		bset	#5,2(a0)
0000E0FC                            
0000E0FC                            loc_DB72:
0000E0FC 0240 000F                  		andi.w	#$F,d0
0000E100 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E106 4E75                       		rts	
0000E108                            ; ===========================================================================
0000E108                            
0000E108                            Obj41_Up:				; XREF: Obj41_Index
0000E108 323C 001B                  		move.w	#$1B,d1
0000E10C 343C 0008                  		move.w	#8,d2
0000E110 363C 0010                  		move.w	#$10,d3
0000E114 3828 0008                  		move.w	8(a0),d4
0000E118 6100 0000                  		bsr.w	SolidObject
0000E11C 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E120 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E122 4E75                       		rts	
0000E124                            ; ===========================================================================
0000E124                            
0000E124                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E124 5428 0024                  		addq.b	#2,$24(a0)
0000E128 5069 000C                  		addq.w	#8,$C(a1)
0000E12C 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E132 08E9 0001 0022             		bset	#1,$22(a1)
0000E138 08A9 0003 0022             		bclr	#3,$22(a1)
0000E13E 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E144 137C 0002 0024             		move.b	#2,$24(a1)
0000E14A 08A8 0003 0022             		bclr	#3,$22(a0)
0000E150 4228 0025                  		clr.b	$25(a0)
0000E154 303C 00CC                  		move.w	#$CC,d0
0000E158 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E15E                            
0000E15E                            Obj41_AniUp:				; XREF: Obj41_Index
0000E15E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E164 6000 CB00                  		bra.w	AnimateSprite
0000E168                            ; ===========================================================================
0000E168                            
0000E168                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E168 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E16E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E172 4E75                       		rts	
0000E174                            ; ===========================================================================
0000E174                            
0000E174                            Obj41_LR:				; XREF: Obj41_Index
0000E174 323C 0013                  		move.w	#$13,d1
0000E178 343C 000E                  		move.w	#$E,d2
0000E17C 363C 000F                  		move.w	#$F,d3
0000E180 3828 0008                  		move.w	8(a0),d4
0000E184 6100 0000                  		bsr.w	SolidObject
0000E188 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E18E 6600                       		bne.s	loc_DC0C
0000E190 117C 0008 0024             		move.b	#8,$24(a0)
0000E196                            
0000E196                            loc_DC0C:
0000E196 0828 0005 0022             		btst	#5,$22(a0)
0000E19C 6600                       		bne.s	Obj41_BounceLR
0000E19E 4E75                       		rts	
0000E1A0                            ; ===========================================================================
0000E1A0                            
0000E1A0                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E1A0 5428 0024                  		addq.b	#2,$24(a0)
0000E1A4 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E1AA 5069 0008                  		addq.w	#8,8(a1)
0000E1AE 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E1B4 6600                       		bne.s	loc_DC36	; if yes, branch
0000E1B6 0469 0010 0008             		subi.w	#$10,8(a1)
0000E1BC 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E1C0                            
0000E1C0                            loc_DC36:
0000E1C0 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E1C6 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E1CC 0869 0000 0022             		bchg	#0,$22(a1)
0000E1D2 0829 0002 0022             		btst	#2,$22(a1)
0000E1D8 6600                       		bne.s	loc_DC56
0000E1DA 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E1E0                            
0000E1E0                            loc_DC56:
0000E1E0 08A8 0005 0022             		bclr	#5,$22(a0)
0000E1E6 08A9 0005 0022             		bclr	#5,$22(a1)
0000E1EC 303C 00CC                  		move.w	#$CC,d0
0000E1F0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E1F6                            
0000E1F6                            Obj41_AniLR:				; XREF: Obj41_Index
0000E1F6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E1FC 6000 CA68                  		bra.w	AnimateSprite
0000E200                            ; ===========================================================================
0000E200                            
0000E200                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E200 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E206 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E20A 4E75                       		rts	
0000E20C                            ; ===========================================================================
0000E20C                            
0000E20C                            Obj41_Dwn:				; XREF: Obj41_Index
0000E20C 323C 001B                  		move.w	#$1B,d1
0000E210 343C 0008                  		move.w	#8,d2
0000E214 363C 0010                  		move.w	#$10,d3
0000E218 3828 0008                  		move.w	8(a0),d4
0000E21C 6100 0000                  		bsr.w	SolidObject
0000E220 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E226 6600                       		bne.s	loc_DCA4
0000E228 117C 000E 0024             		move.b	#$E,$24(a0)
0000E22E                            
0000E22E                            loc_DCA4:
0000E22E 4A28 0025                  		tst.b	$25(a0)
0000E232 6600                       		bne.s	locret_DCAE
0000E234 4A44                       		tst.w	d4
0000E236 6B00                       		bmi.s	Obj41_BounceDwn
0000E238                            
0000E238                            locret_DCAE:
0000E238 4E75                       		rts	
0000E23A                            ; ===========================================================================
0000E23A                            
0000E23A                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E23A 5428 0024                  		addq.b	#2,$24(a0)
0000E23E 5169 000C                  		subq.w	#8,$C(a1)
0000E242 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E248 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E24C 08E9 0001 0022             		bset	#1,$22(a1)
0000E252 08A9 0003 0022             		bclr	#3,$22(a1)
0000E258 137C 0002 0024             		move.b	#2,$24(a1)
0000E25E 08A8 0003 0022             		bclr	#3,$22(a0)
0000E264 4228 0025                  		clr.b	$25(a0)
0000E268 303C 00CC                  		move.w	#$CC,d0
0000E26C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E272                            
0000E272                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E272 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E278 6000 C9EC                  		bra.w	AnimateSprite
0000E27C                            ; ===========================================================================
0000E27C                            
0000E27C                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E27C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E282 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E286 4E75                       		rts	
0000E288                            ; ===========================================================================
0000E288                            Ani_obj41:
0000E288                            	include "_anim\obj41.asm"
0000E288                            ; ---------------------------------------------------------------------------
0000E288                            ; Animation script - springs
0000E288                            ; ---------------------------------------------------------------------------
0000E288 0000                       		dc.w byte_DD02-Ani_obj41
0000E28A 0000                       		dc.w byte_DD0E-Ani_obj41
0000E28C 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E298 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E2A4                            		even
0000E2A4                            		even
0000E2A4                            
0000E2A4                            ; ---------------------------------------------------------------------------
0000E2A4                            ; Sprite mappings - springs
0000E2A4                            ; ---------------------------------------------------------------------------
0000E2A4                            Map_obj41:
0000E2A4                            	include "_maps\obj41.asm"
0000E2A4                            ; ---------------------------------------------------------------------------
0000E2A4                            ; Sprite mappings - springs
0000E2A4                            ; ---------------------------------------------------------------------------
0000E2A4 0000                       		dc.w byte_DD26-Map_obj41
0000E2A6 0000                       		dc.w byte_DD31-Map_obj41
0000E2A8 0000                       		dc.w byte_DD37-Map_obj41
0000E2AA 0000                       		dc.w byte_DD47-Map_obj41
0000E2AC 0000                       		dc.w byte_DD4D-Map_obj41
0000E2AE 0000                       		dc.w byte_DD53-Map_obj41
0000E2B0 02                         byte_DD26:	dc.b 2
0000E2B1 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E2B6 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E2BB 01                         byte_DD31:	dc.b 1
0000E2BC 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E2C1 03                         byte_DD37:	dc.b 3
0000E2C2 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E2C7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E2CC 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E2D1 01                         byte_DD47:	dc.b 1
0000E2D2 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E2D7 01                         byte_DD4D:	dc.b 1
0000E2D8 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E2DD 04                         byte_DD53:	dc.b 4
0000E2DE F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E2E3 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E2E8 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E2ED 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E2F2                            		even
0000E2F2                            		even
0000E2F2                            
0000E2F2                            ; ===========================================================================
0000E2F2                            ; ---------------------------------------------------------------------------
0000E2F2                            ; Object 42 - Newtron enemy (GHZ)
0000E2F2                            ; ---------------------------------------------------------------------------
0000E2F2                            
0000E2F2                            Obj42:					; XREF: Obj_Index
0000E2F2 7000                       		moveq	#0,d0
0000E2F4 1028 0024                  		move.b	$24(a0),d0
0000E2F8 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E2FC 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E300                            ; ===========================================================================
0000E300 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E302 0000                       		dc.w Obj42_Action-Obj42_Index
0000E304 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E306                            ; ===========================================================================
0000E306                            
0000E306                            Obj42_Main:				; XREF: Obj42_Index
0000E306 5428 0024                  		addq.b	#2,$24(a0)
0000E30A 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E312 317C 049B 0002             		move.w	#$49B,2(a0)
0000E318 117C 0004 0001             		move.b	#4,1(a0)
0000E31E 117C 0004 0018             		move.b	#4,$18(a0)
0000E324 117C 0014 0019             		move.b	#$14,$19(a0)
0000E32A 117C 0010 0016             		move.b	#$10,$16(a0)
0000E330 117C 0008 0017             		move.b	#8,$17(a0)
0000E336                            
0000E336                            Obj42_Action:				; XREF: Obj42_Index
0000E336 7000                       		moveq	#0,d0
0000E338 1028 0025                  		move.b	$25(a0),d0
0000E33C 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E340 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E344 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E34A 6100 C91A                  		bsr.w	AnimateSprite
0000E34E 6000 0000                  		bra.w	MarkObjGone
0000E352                            ; ===========================================================================
0000E352 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E354 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E356 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E358 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E35A 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E35C                            ; ===========================================================================
0000E35C                            
0000E35C                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E35C 08E8 0000 0022             		bset	#0,$22(a0)
0000E362 3038 D008                  		move.w	($FFFFD008).w,d0
0000E366 9068 0008                  		sub.w	8(a0),d0
0000E36A 6400                       		bcc.s	loc_DDEA
0000E36C 4440                       		neg.w	d0
0000E36E 08A8 0000 0022             		bclr	#0,$22(a0)
0000E374                            
0000E374                            loc_DDEA:
0000E374 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E378 6400                       		bcc.s	locret_DE12	; if not, branch
0000E37A 5428 0025                  		addq.b	#2,$25(a0)
0000E37E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E384 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E388 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E38A 317C 249B 0002             		move.w	#$249B,2(a0)
0000E390 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E396 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E39C                            
0000E39C                            locret_DE12:
0000E39C 4E75                       		rts	
0000E39E                            ; ===========================================================================
0000E39E                            
0000E39E                            Obj42_Type00:				; XREF: Obj42_Index2
0000E39E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E3A4 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E3A6 08E8 0000 0022             		bset	#0,$22(a0)
0000E3AC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E3B0 9068 0008                  		sub.w	8(a0),d0
0000E3B4 6400                       		bcc.s	locret_DE32
0000E3B6 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3BC                            
0000E3BC                            locret_DE32:
0000E3BC 4E75                       		rts	
0000E3BE                            ; ===========================================================================
0000E3BE                            
0000E3BE                            Obj42_Fall:				; XREF: Obj42_Type00
0000E3BE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E3C4 6600                       		bne.s	loc_DE42
0000E3C6 117C 000C 0020             		move.b	#$C,$20(a0)
0000E3CC                            
0000E3CC                            loc_DE42:
0000E3CC 6100 F770                  		bsr.w	ObjectFall
0000E3D0 6100 0000                  		bsr.w	ObjHitFloor
0000E3D4 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E3D6 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E3D8 D368 000C                  		add.w	d1,$C(a0)
0000E3DC 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E3E2 5428 0025                  		addq.b	#2,$25(a0)
0000E3E6 117C 0002 001C             		move.b	#2,$1C(a0)
0000E3EC 0828 0005 0002             		btst	#5,2(a0)
0000E3F2 6700                       		beq.s	Obj42_Move
0000E3F4 5228 001C                  		addq.b	#1,$1C(a0)
0000E3F8                            
0000E3F8                            Obj42_Move:
0000E3F8 117C 000D 0020             		move.b	#$D,$20(a0)
0000E3FE 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E404 0828 0000 0022             		btst	#0,$22(a0)
0000E40A 6600                       		bne.s	locret_DE86
0000E40C 4468 0010                  		neg.w	$10(a0)
0000E410                            
0000E410                            locret_DE86:
0000E410 4E75                       		rts	
0000E412                            ; ===========================================================================
0000E412                            
0000E412                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E412 6100 F756                  		bsr.w	SpeedToPos
0000E416 6100 0000                  		bsr.w	ObjHitFloor
0000E41A 0C41 FFF8                  		cmpi.w	#-8,d1
0000E41E 6D00                       		blt.s	loc_DEA2
0000E420 0C41 000C                  		cmpi.w	#$C,d1
0000E424 6C00                       		bge.s	loc_DEA2
0000E426 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E42A 4E75                       		rts	
0000E42C                            ; ===========================================================================
0000E42C                            
0000E42C                            loc_DEA2:
0000E42C 5428 0025                  		addq.b	#2,$25(a0)
0000E430 4E75                       		rts	
0000E432                            ; ===========================================================================
0000E432                            
0000E432                            Obj42_Speed:				; XREF: Obj42_Index2
0000E432 6100 F736                  		bsr.w	SpeedToPos
0000E436 4E75                       		rts	
0000E438                            ; ===========================================================================
0000E438                            
0000E438                            Obj42_Type01:				; XREF: Obj42_Index2
0000E438 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E43E 6600                       		bne.s	Obj42_FireMissile
0000E440 117C 000C 0020             		move.b	#$C,$20(a0)
0000E446                            
0000E446                            Obj42_FireMissile:
0000E446 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E44C 6600                       		bne.s	locret_DF14
0000E44E 4A28 0032                  		tst.b	$32(a0)
0000E452 6600                       		bne.s	locret_DF14
0000E454 117C 0001 0032             		move.b	#1,$32(a0)
0000E45A 6100 FBBA                  		bsr.w	SingleObjLoad
0000E45E 6600                       		bne.s	locret_DF14
0000E460 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E464 3368 0008 0008             		move.w	8(a0),8(a1)
0000E46A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E470 5169 000C                  		subq.w	#8,$C(a1)
0000E474 337C 0200 0010             		move.w	#$200,$10(a1)
0000E47A 303C 0014                  		move.w	#$14,d0
0000E47E 0828 0000 0022             		btst	#0,$22(a0)
0000E484 6600                       		bne.s	loc_DF04
0000E486 4440                       		neg.w	d0
0000E488 4469 0010                  		neg.w	$10(a1)
0000E48C                            
0000E48C                            loc_DF04:
0000E48C D169 0008                  		add.w	d0,8(a1)
0000E490 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E496 137C 0001 0028             		move.b	#1,$28(a1)
0000E49C                            
0000E49C                            locret_DF14:
0000E49C 4E75                       		rts	
0000E49E                            ; ===========================================================================
0000E49E                            
0000E49E                            Obj42_Delete:				; XREF: Obj42_Index
0000E49E 6000 F72C                  		bra.w	DeleteObject
0000E4A2                            ; ===========================================================================
0000E4A2                            Ani_obj42:
0000E4A2                            	include "_anim\obj42.asm"
0000E4A2                            ; ---------------------------------------------------------------------------
0000E4A2                            ; Animation script - Newtron enemy
0000E4A2                            ; ---------------------------------------------------------------------------
0000E4A2 0000                       		dc.w byte_DF24-Ani_obj42
0000E4A4 0000                       		dc.w byte_DF28-Ani_obj42
0000E4A6 0000                       		dc.w byte_DF30-Ani_obj42
0000E4A8 0000                       		dc.w byte_DF34-Ani_obj42
0000E4AA 0000                       		dc.w byte_DF38-Ani_obj42
0000E4AC 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E4B0 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E4B8 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E4BC 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E4C0 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E4CA                            		even
0000E4CA                            		even
0000E4CA                            
0000E4CA                            ; ---------------------------------------------------------------------------
0000E4CA                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4CA                            ; ---------------------------------------------------------------------------
0000E4CA                            Map_obj42:
0000E4CA                            	include "_maps\obj42.asm"
0000E4CA                            ; ---------------------------------------------------------------------------
0000E4CA                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4CA                            ; ---------------------------------------------------------------------------
0000E4CA 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E4CE 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E4D2 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E4D6 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E4DA 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E4DE 0000                       		dc.w byte_DFF8-Map_obj42
0000E4E0 03                         byte_DF58:	dc.b 3
0000E4E1 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E4E6 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E4EB FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E4F0 03                         byte_DF68:	dc.b 3
0000E4F1 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E4F6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4FB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E500 03                         byte_DF78:	dc.b 3
0000E501 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E506 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E50B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E510 04                         byte_DF88:	dc.b 4
0000E511 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E516 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E51B FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E520 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E525 03                         byte_DF9D:	dc.b 3
0000E526 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E52B FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E530 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E535 02                         byte_DFAD:	dc.b 2
0000E536 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E53B F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E540 03                         byte_DFB8:	dc.b 3
0000E541 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E546 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E54B FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E550 03                         byte_DFC8:	dc.b 3
0000E551 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E556 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E55B FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E560 03                         byte_DFD8:	dc.b 3
0000E561 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E566 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E56B FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E570 03                         byte_DFE8:	dc.b 3
0000E571 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E576 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E57B FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E580 00                         byte_DFF8:	dc.b 0
0000E582 00                         		even
0000E582 00                         		even
0000E582                            
0000E582                            ; ===========================================================================
0000E582                            ; ---------------------------------------------------------------------------
0000E582                            ; Object 43 - Roller enemy (SYZ)
0000E582                            ; ---------------------------------------------------------------------------
0000E582                            
0000E582                            Obj43:					; XREF: Obj_Index
0000E582 7000                       		moveq	#0,d0
0000E584 1028 0024                  		move.b	$24(a0),d0
0000E588 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E58C 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E590                            ; ===========================================================================
0000E590 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E592 0000                       		dc.w Obj43_Action-Obj43_Index
0000E594                            ; ===========================================================================
0000E594                            
0000E594                            Obj43_Main:				; XREF: Obj43_Index
0000E594 117C 000E 0016             		move.b	#$E,$16(a0)
0000E59A 117C 0008 0017             		move.b	#8,$17(a0)
0000E5A0 6100 F59C                  		bsr.w	ObjectFall
0000E5A4 6100 0000                  		bsr.w	ObjHitFloor
0000E5A8 4A41                       		tst.w	d1
0000E5AA 6A00                       		bpl.s	locret_E052
0000E5AC D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E5B0 317C 0000 0012             		move.w	#0,$12(a0)
0000E5B6 5428 0024                  		addq.b	#2,$24(a0)
0000E5BA 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E5C2 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E5C8 117C 0004 0001             		move.b	#4,1(a0)
0000E5CE 117C 0004 0018             		move.b	#4,$18(a0)
0000E5D4 117C 0010 0019             		move.b	#$10,$19(a0)
0000E5DA                            
0000E5DA                            locret_E052:
0000E5DA 4E75                       		rts	
0000E5DC                            ; ===========================================================================
0000E5DC                            
0000E5DC                            Obj43_Action:				; XREF: Obj43_Index
0000E5DC 7000                       		moveq	#0,d0
0000E5DE 1028 0025                  		move.b	$25(a0),d0
0000E5E2 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E5E6 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E5EA 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E5F0 6100 C674                  		bsr.w	AnimateSprite
0000E5F4 3028 0008                  		move.w	8(a0),d0
0000E5F8 0240 FF80                  		andi.w	#$FF80,d0
0000E5FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E600 0441 0080                  		subi.w	#$80,d1
0000E604 0241 FF80                  		andi.w	#$FF80,d1
0000E608 9041                       		sub.w	d1,d0
0000E60A 0C40 0280                  		cmpi.w	#$280,d0
0000E60E 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E612 6000 F57C                  		bra.w	DisplaySprite
0000E616                            ; ===========================================================================
0000E616                            
0000E616                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E616 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E61A 7000                       		moveq	#0,d0
0000E61C 1028 0023                  		move.b	$23(a0),d0
0000E620 6700                       		beq.s	Obj43_Delete
0000E622 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E628                            
0000E628                            Obj43_Delete:
0000E628 6000 F5A2                  		bra.w	DeleteObject
0000E62C                            ; ===========================================================================
0000E62C 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E62E 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E630 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E632 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E634                            ; ===========================================================================
0000E634                            
0000E634                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E634 3038 D008                  		move.w	($FFFFD008).w,d0
0000E638 0440 0100                  		subi.w	#$100,d0
0000E63C 6500                       		bcs.s	loc_E0D2
0000E63E 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E642 6500                       		bcs.s	loc_E0D2
0000E644 5828 0025                  		addq.b	#4,$25(a0)
0000E648 117C 0002 001C             		move.b	#2,$1C(a0)
0000E64E 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E654 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E65A                            
0000E65A                            loc_E0D2:
0000E65A 588F                       		addq.l	#4,sp
0000E65C 4E75                       		rts	
0000E65E                            ; ===========================================================================
0000E65E                            
0000E65E                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E65E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E664 6700                       		beq.s	loc_E0F8
0000E666 5368 0030                  		subq.w	#1,$30(a0)
0000E66A 6A00                       		bpl.s	locret_E0F6
0000E66C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E672 317C 0700 0010             		move.w	#$700,$10(a0)
0000E678 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E67E                            
0000E67E                            locret_E0F6:
0000E67E 4E75                       		rts	
0000E680                            ; ===========================================================================
0000E680                            
0000E680                            loc_E0F8:
0000E680 5428 0025                  		addq.b	#2,$25(a0)
0000E684 4E75                       		rts	
0000E686                            ; ===========================================================================
0000E686                            
0000E686                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E686 6100 0000                  		bsr.w	Obj43_Stop
0000E68A 6100 F4DE                  		bsr.w	SpeedToPos
0000E68E 6100 0000                  		bsr.w	ObjHitFloor
0000E692 0C41 FFF8                  		cmpi.w	#-8,d1
0000E696 6D00                       		blt.s	Obj43_Jump
0000E698 0C41 000C                  		cmpi.w	#$C,d1
0000E69C 6C00                       		bge.s	Obj43_Jump
0000E69E D368 000C                  		add.w	d1,$C(a0)
0000E6A2 4E75                       		rts	
0000E6A4                            ; ===========================================================================
0000E6A4                            
0000E6A4                            Obj43_Jump:
0000E6A4 5428 0025                  		addq.b	#2,$25(a0)
0000E6A8 08E8 0000 0032             		bset	#0,$32(a0)
0000E6AE 6700                       		beq.s	locret_E12E
0000E6B0 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E6B6                            
0000E6B6                            locret_E12E:
0000E6B6 4E75                       		rts	
0000E6B8                            ; ===========================================================================
0000E6B8                            
0000E6B8                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E6B8 6100 F484                  		bsr.w	ObjectFall
0000E6BC 4A68 0012                  		tst.w	$12(a0)
0000E6C0 6B00                       		bmi.s	locret_E150
0000E6C2 6100 0000                  		bsr.w	ObjHitFloor
0000E6C6 4A41                       		tst.w	d1
0000E6C8 6A00                       		bpl.s	locret_E150
0000E6CA D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E6CE 5528 0025                  		subq.b	#2,$25(a0)
0000E6D2 317C 0000 0012             		move.w	#0,$12(a0)
0000E6D8                            
0000E6D8                            locret_E150:
0000E6D8 4E75                       		rts	
0000E6DA                            
0000E6DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6DA                            
0000E6DA                            
0000E6DA                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E6DA 4A28 0032                  		tst.b	$32(a0)
0000E6DE 6B00                       		bmi.s	locret_E188
0000E6E0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6E4 0440 0030                  		subi.w	#$30,d0
0000E6E8 9068 0008                  		sub.w	8(a0),d0
0000E6EC 6400                       		bcc.s	locret_E188
0000E6EE 117C 0000 001C             		move.b	#0,$1C(a0)
0000E6F4 117C 000E 0020             		move.b	#$E,$20(a0)
0000E6FA 4268 0010                  		clr.w	$10(a0)
0000E6FE 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E704 117C 0002 0025             		move.b	#2,$25(a0)
0000E70A 08E8 0007 0032             		bset	#7,$32(a0)
0000E710                            
0000E710                            locret_E188:
0000E710 4E75                       		rts	
0000E712                            ; End of function Obj43_Stop
0000E712                            
0000E712                            ; ===========================================================================
0000E712                            Ani_obj43:
0000E712                            	include "_anim\obj43.asm"
0000E712                            ; ---------------------------------------------------------------------------
0000E712                            ; Animation script - Roller enemy
0000E712                            ; ---------------------------------------------------------------------------
0000E712 0000                       		dc.w byte_E190-Ani_obj43
0000E714 0000                       		dc.w byte_E196-Ani_obj43
0000E716 0000                       		dc.w byte_E19C-Ani_obj43
0000E718 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E71E 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E724 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E72A 00                         		even
0000E72A 00                         		even
0000E72A                            
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A                            ; Sprite mappings - Roller enemy (SYZ)
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A                            Map_obj43:
0000E72A                            	include "_maps\obj43.asm"
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A                            ; Sprite mappings - Roller enemy (SYZ)
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E72E 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E732 0000                       		dc.w byte_E1CE-Map_obj43
0000E734 02                         byte_E1AC:	dc.b 2
0000E735 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E73A F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E73F 02                         byte_E1B7:	dc.b 2
0000E740 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E745 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E74A 01                         byte_E1C2:	dc.b 1
0000E74B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E750 01                         byte_E1C8:	dc.b 1
0000E751 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E756 01                         byte_E1CE:	dc.b 1
0000E757 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E75C                            		even
0000E75C                            		even
0000E75C                            
0000E75C                            ; ===========================================================================
0000E75C                            ; ---------------------------------------------------------------------------
0000E75C                            ; Object 44 - walls (GHZ)
0000E75C                            ; ---------------------------------------------------------------------------
0000E75C                            
0000E75C                            Obj44:					; XREF: Obj_Index
0000E75C 7000                       		moveq	#0,d0
0000E75E 1028 0024                  		move.b	$24(a0),d0
0000E762 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E766 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E76A                            ; ===========================================================================
0000E76A 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E76C 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E76E 0000                       		dc.w Obj44_Display-Obj44_Index
0000E770                            ; ===========================================================================
0000E770                            
0000E770                            Obj44_Main:				; XREF: Obj44_Index
0000E770 5428 0024                  		addq.b	#2,$24(a0)
0000E774 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E77C 317C 434C 0002             		move.w	#$434C,2(a0)
0000E782 0028 0004 0001             		ori.b	#4,1(a0)
0000E788 117C 0008 0019             		move.b	#8,$19(a0)
0000E78E 117C 0006 0018             		move.b	#6,$18(a0)
0000E794 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E79A 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E7A0 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E7A2 5428 0024                  		addq.b	#2,$24(a0)
0000E7A6 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E7A8                            ; ===========================================================================
0000E7A8                            
0000E7A8                            Obj44_Solid:				; XREF: Obj44_Index
0000E7A8 323C 0013                  		move.w	#$13,d1
0000E7AC 343C 0028                  		move.w	#$28,d2
0000E7B0 6100 A6F6                  		bsr.w	Obj44_SolidWall
0000E7B4                            
0000E7B4                            Obj44_Display:				; XREF: Obj44_Index
0000E7B4 6100 F3DA                  		bsr.w	DisplaySprite
0000E7B8 3028 0008                  		move.w	8(a0),d0
0000E7BC 0240 FF80                  		andi.w	#$FF80,d0
0000E7C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7C4 0441 0080                  		subi.w	#$80,d1
0000E7C8 0241 FF80                  		andi.w	#$FF80,d1
0000E7CC 9041                       		sub.w	d1,d0
0000E7CE 0C40 0280                  		cmpi.w	#$280,d0
0000E7D2 6200 F3F8                  		bhi.w	DeleteObject
0000E7D6 4E75                       		rts	
0000E7D8                            ; ===========================================================================
0000E7D8                            ; ---------------------------------------------------------------------------
0000E7D8                            ; Sprite mappings - walls (GHZ)
0000E7D8                            ; ---------------------------------------------------------------------------
0000E7D8                            Map_obj44:
0000E7D8                            	include "_maps\obj44.asm"
0000E7D8                            ; ---------------------------------------------------------------------------
0000E7D8                            ; Sprite mappings - walls (GHZ)
0000E7D8                            ; ---------------------------------------------------------------------------
0000E7D8 0000                       		dc.w byte_E256-Map_obj44
0000E7DA 0000                       		dc.w byte_E26B-Map_obj44
0000E7DC 0000                       		dc.w byte_E280-Map_obj44
0000E7DE 04                         byte_E256:	dc.b 4
0000E7DF E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E7E4 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E7E9 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E7EE 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E7F3 04                         byte_E26B:	dc.b 4
0000E7F4 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E7F9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E7FE 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E803 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E808 04                         byte_E280:	dc.b 4
0000E809 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E80E F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E813 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E818 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E81E 00                         		even
0000E81E 00                         		even
0000E81E                            
0000E81E                            ; ===========================================================================
0000E81E                            ; ---------------------------------------------------------------------------
0000E81E                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E81E                            ; ---------------------------------------------------------------------------
0000E81E                            
0000E81E                            Obj13:					; XREF: Obj_Index
0000E81E 7000                       		moveq	#0,d0
0000E820 1028 0024                  		move.b	$24(a0),d0
0000E824 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E828 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E82C 6000 0000                  		bra.w	Obj14_ChkDel
0000E830                            ; ===========================================================================
0000E830 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E832 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E834                            ; ---------------------------------------------------------------------------
0000E834                            ;
0000E834                            ; Lava ball production rates
0000E834                            ;
0000E834 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E83A                            ; ===========================================================================
0000E83A                            
0000E83A                            Obj13_Main:				; XREF: Obj13_Index
0000E83A 5428 0024                  		addq.b	#2,$24(a0)
0000E83E 1028 0028                  		move.b	$28(a0),d0
0000E842 E848                       		lsr.w	#4,d0
0000E844 0240 000F                  		andi.w	#$F,d0
0000E848 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E84E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E854 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E85A                            
0000E85A                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E85A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E85E 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E860 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E866 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E86A 6600                       		bne.s	locret_E302
0000E86C 6100 F7A8                  		bsr.w	SingleObjLoad
0000E870 6600                       		bne.s	locret_E302
0000E872 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E876 3368 0008 0008             		move.w	8(a0),8(a1)
0000E87C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E882 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E888                            
0000E888                            locret_E302:
0000E888 4E75                       		rts	
0000E88A                            ; ===========================================================================
0000E88A                            ; ---------------------------------------------------------------------------
0000E88A                            ; Object 14 - lava balls (MZ, SLZ)
0000E88A                            ; ---------------------------------------------------------------------------
0000E88A                            
0000E88A                            Obj14:					; XREF: Obj_Index
0000E88A 7000                       		moveq	#0,d0
0000E88C 1028 0024                  		move.b	$24(a0),d0
0000E890 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E894 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E898 6000 F2F6                  		bra.w	DisplaySprite
0000E89C                            ; ===========================================================================
0000E89C 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E89E 0000                       		dc.w Obj14_Action-Obj14_Index
0000E8A0 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E8A2                            
0000E8A2 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E8AC 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E8B4                            ; ===========================================================================
0000E8B4                            
0000E8B4                            Obj14_Main:				; XREF: Obj14_Index
0000E8B4 5428 0024                  		addq.b	#2,$24(a0)
0000E8B8 117C 0008 0016             		move.b	#8,$16(a0)
0000E8BE 117C 0008 0017             		move.b	#8,$17(a0)
0000E8C4 217C 0000 B854 0004        		move.l	#Map_obj14,4(a0)
0000E8CC 317C 0345 0002             		move.w	#$345,2(a0)
0000E8D2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E8D8 6600                       		bne.s	loc_E35A
0000E8DA 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E8E0                            
0000E8E0                            loc_E35A:
0000E8E0 117C 0004 0001             		move.b	#4,1(a0)
0000E8E6 117C 0003 0018             		move.b	#3,$18(a0)
0000E8EC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E8F2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E8F8 4A28 0029                  		tst.b	$29(a0)
0000E8FC 6700                       		beq.s	Obj14_SetSpeed
0000E8FE 5428 0018                  		addq.b	#2,$18(a0)
0000E902                            
0000E902                            Obj14_SetSpeed:
0000E902 7000                       		moveq	#0,d0
0000E904 1028 0028                  		move.b	$28(a0),d0
0000E908 D040                       		add.w	d0,d0
0000E90A 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E910 117C 0008 0019             		move.b	#8,$19(a0)
0000E916 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E91C 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E91E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E924 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E92A 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E930 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E936                            
0000E936                            Obj14_PlaySnd:
0000E936 303C 00AE                  		move.w	#$AE,d0
0000E93A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E940                            
0000E940                            Obj14_Action:				; XREF: Obj14_Index
0000E940 7000                       		moveq	#0,d0
0000E942 1028 0028                  		move.b	$28(a0),d0
0000E946 D040                       		add.w	d0,d0
0000E948 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E94C 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E950 6100 F218                  		bsr.w	SpeedToPos
0000E954 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E95A 6100 C30A                  		bsr.w	AnimateSprite
0000E95E                            
0000E95E                            Obj14_ChkDel:				; XREF: Obj13
0000E95E 3028 0008                  		move.w	8(a0),d0
0000E962 0240 FF80                  		andi.w	#$FF80,d0
0000E966 3238 F700                  		move.w	($FFFFF700).w,d1
0000E96A 0441 0080                  		subi.w	#$80,d1
0000E96E 0241 FF80                  		andi.w	#$FF80,d1
0000E972 9041                       		sub.w	d1,d0
0000E974 0C40 0280                  		cmpi.w	#$280,d0
0000E978 6200 F252                  		bhi.w	DeleteObject
0000E97C 4E75                       		rts	
0000E97E                            ; ===========================================================================
0000E97E 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E982 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E986 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E98A 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E98E 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E990                            ; ===========================================================================
0000E990                            ; lavaball types 00-03 fly up and fall back down
0000E990                            
0000E990                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E990 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E996 3028 0030                  		move.w	$30(a0),d0
0000E99A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E99E 6400                       		bcc.s	loc_E41E	; if not, branch
0000E9A0 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E9A4                            
0000E9A4                            loc_E41E:
0000E9A4 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9AA 4A68 0012                  		tst.w	$12(a0)
0000E9AE 6A00                       		bpl.s	locret_E430
0000E9B0 08E8 0001 0022             		bset	#1,$22(a0)
0000E9B6                            
0000E9B6                            locret_E430:
0000E9B6 4E75                       		rts	
0000E9B8                            ; ===========================================================================
0000E9B8                            ; lavaball type	04 flies up until it hits the ceiling
0000E9B8                            
0000E9B8                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E9B8 08E8 0001 0022             		bset	#1,$22(a0)
0000E9BE 6100 0000                  		bsr.w	ObjHitCeiling
0000E9C2 4A41                       		tst.w	d1
0000E9C4 6A00                       		bpl.s	locret_E452
0000E9C6 117C 0008 0028             		move.b	#8,$28(a0)
0000E9CC 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9D2 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E9D8                            
0000E9D8                            locret_E452:
0000E9D8 4E75                       		rts	
0000E9DA                            ; ===========================================================================
0000E9DA                            ; lavaball type	05 falls down until it hits the	floor
0000E9DA                            
0000E9DA                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E9DA 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9E0 6100 0000                  		bsr.w	ObjHitFloor
0000E9E4 4A41                       		tst.w	d1
0000E9E6 6A00                       		bpl.s	locret_E474
0000E9E8 117C 0008 0028             		move.b	#8,$28(a0)
0000E9EE 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9F4 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E9FA                            
0000E9FA                            locret_E474:
0000E9FA 4E75                       		rts	
0000E9FC                            ; ===========================================================================
0000E9FC                            ; lavaball types 06-07 move sideways
0000E9FC                            
0000E9FC                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E9FC 08E8 0000 0022             		bset	#0,$22(a0)
0000EA02 76F8                       		moveq	#-8,d3
0000EA04 6100 0000                  		bsr.w	ObjHitWallLeft
0000EA08 4A41                       		tst.w	d1
0000EA0A 6A00                       		bpl.s	locret_E498
0000EA0C 117C 0008 0028             		move.b	#8,$28(a0)
0000EA12 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA18 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA1E                            
0000EA1E                            locret_E498:
0000EA1E 4E75                       		rts	
0000EA20                            ; ===========================================================================
0000EA20                            
0000EA20                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA20 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA26 7608                       		moveq	#8,d3
0000EA28 6100 0000                  		bsr.w	ObjHitWallRight
0000EA2C 4A41                       		tst.w	d1
0000EA2E 6A00                       		bpl.s	locret_E4BC
0000EA30 117C 0008 0028             		move.b	#8,$28(a0)
0000EA36 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA3C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA42                            
0000EA42                            locret_E4BC:
0000EA42 4E75                       		rts	
0000EA44                            ; ===========================================================================
0000EA44                            
0000EA44                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EA44 4E75                       		rts	
0000EA46                            ; ===========================================================================
0000EA46                            
0000EA46                            Obj14_Delete:				; XREF: Obj14_Index
0000EA46 6000 F184                  		bra.w	DeleteObject
0000EA4A                            ; ===========================================================================
0000EA4A                            Ani_obj14:
0000EA4A                            	include "_anim\obj14.asm"
0000EA4A                            ; ---------------------------------------------------------------------------
0000EA4A                            ; Animation script - lava balls
0000EA4A                            ; ---------------------------------------------------------------------------
0000EA4A 0000                       		dc.w byte_E4CC-Ani_obj14
0000EA4C 0000                       		dc.w byte_E4D2-Ani_obj14
0000EA4E 0000                       		dc.w byte_E4D6-Ani_obj14
0000EA50 0000                       		dc.w byte_E4DC-Ani_obj14
0000EA52 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EA58 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EA5C 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EA62 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EA66                            		even
0000EA66                            		even
0000EA66                            
0000EA66                            ; ===========================================================================
0000EA66                            ; ---------------------------------------------------------------------------
0000EA66                            ; Object 6D - flame thrower (SBZ)
0000EA66                            ; ---------------------------------------------------------------------------
0000EA66                            
0000EA66                            Obj6D:					; XREF: Obj_Index
0000EA66 7000                       		moveq	#0,d0
0000EA68 1028 0024                  		move.b	$24(a0),d0
0000EA6C 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EA70 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EA74                            ; ===========================================================================
0000EA74 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EA76 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EA78                            ; ===========================================================================
0000EA78                            
0000EA78                            Obj6D_Main:				; XREF: Obj6D_Index
0000EA78 5428 0024                  		addq.b	#2,$24(a0)
0000EA7C 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EA84 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EA8A 0028 0004 0001             		ori.b	#4,1(a0)
0000EA90 117C 0001 0018             		move.b	#1,$18(a0)
0000EA96 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EA9C 117C 000C 0019             		move.b	#$C,$19(a0)
0000EAA2 1028 0028                  		move.b	$28(a0),d0
0000EAA6 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EAAA D040                       		add.w	d0,d0		; multiply by 2
0000EAAC 3140 0030                  		move.w	d0,$30(a0)
0000EAB0 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EAB4 1028 0028                  		move.b	$28(a0),d0
0000EAB8 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EABC EB48                       		lsl.w	#5,d0		; multiply by $20
0000EABE 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EAC2 117C 000A 0036             		move.b	#$A,$36(a0)
0000EAC8 0828 0001 0022             		btst	#1,$22(a0)
0000EACE 6700                       		beq.s	Obj6D_Action
0000EAD0 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAD6 117C 0015 0036             		move.b	#$15,$36(a0)
0000EADC                            
0000EADC                            Obj6D_Action:				; XREF: Obj6D_Index
0000EADC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EAE0 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EAE2 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EAE8 0868 0000 001C             		bchg	#0,$1C(a0)
0000EAEE 6700                       		beq.s	loc_E57A
0000EAF0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EAF6 303C 00B3                  		move.w	#$B3,d0
0000EAFA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EB00                            
0000EB00                            loc_E57A:
0000EB00 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EB06 6100 C15E                  		bsr.w	AnimateSprite
0000EB0A 117C 0000 0020             		move.b	#0,$20(a0)
0000EB10 1028 0036                  		move.b	$36(a0),d0
0000EB14 B028 001A                  		cmp.b	$1A(a0),d0
0000EB18 6600                       		bne.s	Obj6D_ChkDel
0000EB1A 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB20                            
0000EB20                            Obj6D_ChkDel:
0000EB20 3028 0008                  		move.w	8(a0),d0
0000EB24 0240 FF80                  		andi.w	#$FF80,d0
0000EB28 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB2C 0441 0080                  		subi.w	#$80,d1
0000EB30 0241 FF80                  		andi.w	#$FF80,d1
0000EB34 9041                       		sub.w	d1,d0
0000EB36 0C40 0280                  		cmpi.w	#$280,d0
0000EB3A 6200 F090                  		bhi.w	DeleteObject
0000EB3E 6000 F050                  		bra.w	DisplaySprite
0000EB42                            ; ===========================================================================
0000EB42                            Ani_obj6D:
0000EB42                            	include "_anim\obj6D.asm"
0000EB42                            ; ---------------------------------------------------------------------------
0000EB42                            ; Animation script - flamethrower (SBZ)
0000EB42                            ; ---------------------------------------------------------------------------
0000EB42 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EB44 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EB46 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EB48 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EB4A 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EB58 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EB62 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EB70 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EB7A                            		even
0000EB7A                            		even
0000EB7A                            
0000EB7A                            ; ---------------------------------------------------------------------------
0000EB7A                            ; Sprite mappings - flame thrower (SBZ)
0000EB7A                            ; ---------------------------------------------------------------------------
0000EB7A                            Map_obj6D:
0000EB7A                            	include "_maps\obj6D.asm"
0000EB7A                            ; ---------------------------------------------------------------------------
0000EB7A                            ; Sprite mappings - flame thrower (SBZ)
0000EB7A                            ; ---------------------------------------------------------------------------
0000EB7A 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EB7E 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EB82 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EB86 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EB8A 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EB8E 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EB92 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EB96 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EB9A 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EB9E 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EBA2 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EBA6 01                         byte_E620:	dc.b 1
0000EBA7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBAC 02                         byte_E626:	dc.b 2
0000EBAD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBB2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBB7 02                         byte_E631:	dc.b 2
0000EBB8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBBD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBC2 03                         byte_E63C:	dc.b 3
0000EBC3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBC8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBCD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBD2 03                         byte_E64C:	dc.b 3
0000EBD3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBD8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBDD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBE2 04                         byte_E65C:	dc.b 4
0000EBE3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EBE8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBED 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBF2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBF7 04                         byte_E671:	dc.b 4
0000EBF8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EBFD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC02 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC07 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC0C 05                         byte_E686:	dc.b 5
0000EC0D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EC12 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC17 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC1C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC21 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC26 05                         byte_E6A0:	dc.b 5
0000EC27 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC2C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC31 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC36 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC3B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC40 06                         byte_E6BA:	dc.b 6
0000EC41 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EC46 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EC4B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC50 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EC55 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC5A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC5F 06                         byte_E6D9:	dc.b 6
0000EC60 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EC65 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC6A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EC6F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC74 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC79 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC7E 01                         byte_E6F8:	dc.b 1
0000EC7F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC84 02                         byte_E6FE:	dc.b 2
0000EC85 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC8A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC8F 02                         byte_E709:	dc.b 2
0000EC90 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC95 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC9A 03                         byte_E714:	dc.b 3
0000EC9B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECA0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECA5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECAA 03                         byte_E724:	dc.b 3
0000ECAB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECB0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECB5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECBA 04                         byte_E734:	dc.b 4
0000ECBB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECC0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECC5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECCA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECCF 04                         byte_E749:	dc.b 4
0000ECD0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECD5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECDA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECDF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECE4 05                         byte_E75E:	dc.b 5
0000ECE5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ECEA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECEF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECF4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECF9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECFE 05                         byte_E778:	dc.b 5
0000ECFF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED04 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED09 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED0E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED13 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED18 06                         byte_E792:	dc.b 6
0000ED19 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED1E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED23 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED28 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED2D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED32 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED37 06                         byte_E7B1:	dc.b 6
0000ED38 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED3D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED42 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED47 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED4C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED51 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED56                            		even
0000ED56                            		even
0000ED56                            
0000ED56                            ; ===========================================================================
0000ED56                            ; ---------------------------------------------------------------------------
0000ED56                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000ED56                            ; ---------------------------------------------------------------------------
0000ED56                            
0000ED56                            Obj46:					; XREF: Obj_Index
0000ED56 7000                       		moveq	#0,d0
0000ED58 1028 0024                  		move.b	$24(a0),d0
0000ED5C 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000ED60 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000ED64                            ; ===========================================================================
0000ED64 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000ED66 0000                       		dc.w Obj46_Action-Obj46_Index
0000ED68                            ; ===========================================================================
0000ED68                            
0000ED68                            Obj46_Main:				; XREF: Obj46_Index
0000ED68 5428 0024                  		addq.b	#2,$24(a0)
0000ED6C 117C 000F 0016             		move.b	#$F,$16(a0)
0000ED72 117C 000F 0017             		move.b	#$F,$17(a0)
0000ED78 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000ED80 317C 4000 0002             		move.w	#$4000,2(a0)
0000ED86 117C 0004 0001             		move.b	#4,1(a0)
0000ED8C 117C 0003 0018             		move.b	#3,$18(a0)
0000ED92 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED98 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED9E 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EDA4                            
0000EDA4                            Obj46_Action:				; XREF: Obj46_Index
0000EDA4 4A28 0001                  		tst.b	1(a0)
0000EDA8 6A00                       		bpl.s	Obj46_ChkDel
0000EDAA 7000                       		moveq	#0,d0
0000EDAC 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EDB0 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EDB4 D040                       		add.w	d0,d0
0000EDB6 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EDBA 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EDBE 323C 001B                  		move.w	#$1B,d1
0000EDC2 343C 0010                  		move.w	#$10,d2
0000EDC6 363C 0011                  		move.w	#$11,d3
0000EDCA 3828 0008                  		move.w	8(a0),d4
0000EDCE 6100 0000                  		bsr.w	SolidObject
0000EDD2                            
0000EDD2                            Obj46_ChkDel:
0000EDD2 6100 EDBC                  		bsr.w	DisplaySprite
0000EDD6 3028 0008                  		move.w	8(a0),d0
0000EDDA 0240 FF80                  		andi.w	#$FF80,d0
0000EDDE 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDE2 0441 0080                  		subi.w	#$80,d1
0000EDE6 0241 FF80                  		andi.w	#$FF80,d1
0000EDEA 9041                       		sub.w	d1,d0
0000EDEC 0C40 0280                  		cmpi.w	#$280,d0
0000EDF0 6200 EDDA                  		bhi.w	DeleteObject
0000EDF4 4E75                       		rts	
0000EDF6                            ; ===========================================================================
0000EDF6 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EDF8 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EDFA 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EDFC 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EDFE 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EE00                            ; ===========================================================================
0000EE00                            
0000EE00                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EE00 4E75                       		rts	
0000EE02                            ; ===========================================================================
0000EE02                            
0000EE02                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EE02 3038 D008                  		move.w	($FFFFD008).w,d0
0000EE06 9068 0008                  		sub.w	8(a0),d0
0000EE0A 6400                       		bcc.s	loc_E888
0000EE0C 4440                       		neg.w	d0
0000EE0E                            
0000EE0E                            loc_E888:
0000EE0E 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EE12 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EE14 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EE1A                            
0000EE1A                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EE1A 7000                       		moveq	#0,d0
0000EE1C 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE20 0828 0003 0028             		btst	#3,$28(a0)
0000EE26 6700                       		beq.s	loc_E8A8
0000EE28 4440                       		neg.w	d0
0000EE2A 0640 0010                  		addi.w	#$10,d0
0000EE2E                            
0000EE2E                            loc_E8A8:
0000EE2E 3228 0030                  		move.w	$30(a0),d1
0000EE32 9240                       		sub.w	d0,d1
0000EE34 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EE38 4E75                       		rts	
0000EE3A                            ; ===========================================================================
0000EE3A                            
0000EE3A                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EE3A 6100 ED2E                  		bsr.w	SpeedToPos
0000EE3E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EE44 6100 0000                  		bsr.w	ObjHitFloor
0000EE48 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EE4A 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EE4E D368 000C                  		add.w	d1,$C(a0)
0000EE52 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EE56 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE5C 117C 0004 0028             		move.b	#4,$28(a0)
0000EE62 3011                       		move.w	(a1),d0
0000EE64 0240 03FF                  		andi.w	#$3FF,d0
0000EE68 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EE6C 6400                       		bcc.s	locret_E8EE
0000EE6E 117C 0000 0028             		move.b	#0,$28(a0)
0000EE74                            
0000EE74                            locret_E8EE:
0000EE74 4E75                       		rts	
0000EE76                            ; ===========================================================================
0000EE76                            
0000EE76                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EE76 7000                       		moveq	#0,d0
0000EE78 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EE7C E648                       		lsr.w	#3,d0
0000EE7E 3228 0030                  		move.w	$30(a0),d1
0000EE82 9240                       		sub.w	d0,d1
0000EE84 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EE88 4E75                       		rts	
0000EE8A                            ; ===========================================================================
0000EE8A                            ; ---------------------------------------------------------------------------
0000EE8A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE8A                            ; ---------------------------------------------------------------------------
0000EE8A                            Map_obj46:
0000EE8A                            	include "_maps\obj46.asm"
0000EE8A                            ; ---------------------------------------------------------------------------
0000EE8A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE8A                            ; ---------------------------------------------------------------------------
0000EE8A 0000                       		dc.w byte_E906-Map_obj46
0000EE8C 01                         byte_E906:	dc.b 1
0000EE8D F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EE92                            		even
0000EE92                            		even
0000EE92                            
0000EE92                            ; ===========================================================================
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92                            ; Object 12 - lamp (SYZ)
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92                            
0000EE92                            Obj12:					; XREF: Obj_Index
0000EE92 7000                       		moveq	#0,d0
0000EE94 1028 0024                  		move.b	$24(a0),d0
0000EE98 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EE9C 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EEA0                            ; ===========================================================================
0000EEA0 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EEA2 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EEA4                            ; ===========================================================================
0000EEA4                            
0000EEA4                            Obj12_Main:				; XREF: Obj12_Index
0000EEA4 5428 0024                  		addq.b	#2,$24(a0)
0000EEA8 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EEB0 317C 0000 0002             		move.w	#0,2(a0)
0000EEB6 117C 0004 0001             		move.b	#4,1(a0)
0000EEBC 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEC2 117C 0006 0018             		move.b	#6,$18(a0)
0000EEC8                            
0000EEC8                            Obj12_Animate:				; XREF: Obj12_Index
0000EEC8 5328 001E                  		subq.b	#1,$1E(a0)
0000EECC 6A00                       		bpl.s	Obj12_ChkDel
0000EECE 117C 0007 001E             		move.b	#7,$1E(a0)
0000EED4 5228 001A                  		addq.b	#1,$1A(a0)
0000EED8 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EEDE 6500                       		bcs.s	Obj12_ChkDel
0000EEE0 117C 0000 001A             		move.b	#0,$1A(a0)
0000EEE6                            
0000EEE6                            Obj12_ChkDel:
0000EEE6 3028 0008                  		move.w	8(a0),d0
0000EEEA 0240 FF80                  		andi.w	#$FF80,d0
0000EEEE 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEF2 0441 0080                  		subi.w	#$80,d1
0000EEF6 0241 FF80                  		andi.w	#$FF80,d1
0000EEFA 9041                       		sub.w	d1,d0
0000EEFC 0C40 0280                  		cmpi.w	#$280,d0
0000EF00 6200 ECCA                  		bhi.w	DeleteObject
0000EF04 6000 EC8A                  		bra.w	DisplaySprite
0000EF08                            ; ===========================================================================
0000EF08                            ; ---------------------------------------------------------------------------
0000EF08                            ; Sprite mappings - lamp (SYZ)
0000EF08                            ; ---------------------------------------------------------------------------
0000EF08                            Map_obj12:
0000EF08                            	include "_maps\obj12.asm"
0000EF08                            ; ---------------------------------------------------------------------------
0000EF08                            ; Sprite mappings - lamp (SYZ)
0000EF08                            ; ---------------------------------------------------------------------------
0000EF08 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EF0C 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EF10 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EF14 02                         byte_E98E:	dc.b 2
0000EF15 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EF1A 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF1F 02                         byte_E999:	dc.b 2
0000EF20 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF25 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF2A 02                         byte_E9A4:	dc.b 2
0000EF2B F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF30 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EF35 02                         byte_E9AF:	dc.b 2
0000EF36 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EF3B 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EF40 02                         byte_E9BA:	dc.b 2
0000EF41 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EF46 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EF4B 02                         byte_E9C5:	dc.b 2
0000EF4C F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EF51 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EF56                            		even
0000EF56                            		even
0000EF56                            
0000EF56                            ; ===========================================================================
0000EF56                            ; ---------------------------------------------------------------------------
0000EF56                            ; Object 47 - pinball bumper (SYZ)
0000EF56                            ; ---------------------------------------------------------------------------
0000EF56                            
0000EF56                            Obj47:					; XREF: Obj_Index
0000EF56 7000                       		moveq	#0,d0
0000EF58 1028 0024                  		move.b	$24(a0),d0
0000EF5C 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EF60 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EF64                            ; ===========================================================================
0000EF64 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EF66 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EF68                            ; ===========================================================================
0000EF68                            
0000EF68                            Obj47_Main:				; XREF: Obj47_Index
0000EF68 5428 0024                  		addq.b	#2,$24(a0)
0000EF6C 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EF74 317C 0380 0002             		move.w	#$380,2(a0)
0000EF7A 117C 0004 0001             		move.b	#4,1(a0)
0000EF80 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF86 117C 0001 0018             		move.b	#1,$18(a0)
0000EF8C 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EF92                            
0000EF92                            Obj47_Hit:				; XREF: Obj47_Index
0000EF92 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EF96 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EF9A 4228 0021                  		clr.b	$21(a0)
0000EF9E 43F8 D000                  		lea	($FFFFD000).w,a1
0000EFA2 3228 0008                  		move.w	8(a0),d1
0000EFA6 3428 000C                  		move.w	$C(a0),d2
0000EFAA 9269 0008                  		sub.w	8(a1),d1
0000EFAE 9469 000C                  		sub.w	$C(a1),d2
0000EFB2 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0000EFB8 4EB9 0000 2C22             		jsr	(CalcSine).l
0000EFBE C3FC F900                  		muls.w	#-$700,d1
0000EFC2 E081                       		asr.l	#8,d1
0000EFC4 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EFC8 C1FC F900                  		muls.w	#-$700,d0
0000EFCC E080                       		asr.l	#8,d0
0000EFCE 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EFD2 08E9 0001 0022             		bset	#1,$22(a1)
0000EFD8 08A9 0004 0022             		bclr	#4,$22(a1)
0000EFDE 08A9 0005 0022             		bclr	#5,$22(a1)
0000EFE4 4229 003C                  		clr.b	$3C(a1)
0000EFE8 117C 0001 001C             		move.b	#1,$1C(a0)
0000EFEE 303C 00B4                  		move.w	#$B4,d0
0000EFF2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EFF8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EFFC 7000                       		moveq	#0,d0
0000EFFE 1028 0023                  		move.b	$23(a0),d0
0000F002 6700                       		beq.s	Obj47_Score
0000F004 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F00A 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F00C 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F010                            
0000F010                            Obj47_Score:
0000F010 7001                       		moveq	#1,d0
0000F012 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F018 6100 EFFC                  		bsr.w	SingleObjLoad
0000F01C 6600                       		bne.s	Obj47_Display
0000F01E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F022 3368 0008 0008             		move.w	8(a0),8(a1)
0000F028 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F02E 137C 0004 001A             		move.b	#4,$1A(a1)
0000F034                            
0000F034                            Obj47_Display:
0000F034 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F03A 6100 BC2A                  		bsr.w	AnimateSprite
0000F03E 3028 0008                  		move.w	8(a0),d0
0000F042 0240 FF80                  		andi.w	#$FF80,d0
0000F046 3238 F700                  		move.w	($FFFFF700).w,d1
0000F04A 0441 0080                  		subi.w	#$80,d1
0000F04E 0241 FF80                  		andi.w	#$FF80,d1
0000F052 9041                       		sub.w	d1,d0
0000F054 0C40 0280                  		cmpi.w	#$280,d0
0000F058 6200                       		bhi.s	Obj47_ChkHit
0000F05A 6000 EB34                  		bra.w	DisplaySprite
0000F05E                            ; ===========================================================================
0000F05E                            
0000F05E                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F05E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F062 7000                       		moveq	#0,d0
0000F064 1028 0023                  		move.b	$23(a0),d0
0000F068 6700                       		beq.s	Obj47_Delete
0000F06A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F070                            
0000F070                            Obj47_Delete:
0000F070 6000 EB5A                  		bra.w	DeleteObject
0000F074                            ; ===========================================================================
0000F074                            Ani_obj47:
0000F074                            	include "_anim\obj47.asm"
0000F074                            ; ---------------------------------------------------------------------------
0000F074                            ; Animation script - flamethrower (SBZ)
0000F074                            ; ---------------------------------------------------------------------------
0000F074 0000                       		dc.w byte_EAF4-Ani_obj47
0000F076 0000                       		dc.w byte_EAF8-Ani_obj47
0000F078 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F07C 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F084                            		even
0000F084                            		even
0000F084                            
0000F084                            ; ---------------------------------------------------------------------------
0000F084                            ; Sprite mappings - pinball bumper (SYZ)
0000F084                            ; ---------------------------------------------------------------------------
0000F084                            Map_obj47:
0000F084                            	include "_maps\obj47.asm"
0000F084                            ; ---------------------------------------------------------------------------
0000F084                            ; Sprite mappings - pinball bumper (SYZ)
0000F084                            ; ---------------------------------------------------------------------------
0000F084 0000                       		dc.w byte_EB06-Map_obj47
0000F086 0000                       		dc.w byte_EB11-Map_obj47
0000F088 0000                       		dc.w byte_EB1C-Map_obj47
0000F08A 02                         byte_EB06:	dc.b 2
0000F08B F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F090 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F095 02                         byte_EB11:	dc.b 2
0000F096 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F09B F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F0A0 02                         byte_EB1C:	dc.b 2
0000F0A1 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F0A6 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F0AC 00                         		even
0000F0AC 00                         		even
0000F0AC                            
0000F0AC                            ; ===========================================================================
0000F0AC                            ; ---------------------------------------------------------------------------
0000F0AC                            ; Object 0D - signpost at the end of a level
0000F0AC                            ; ---------------------------------------------------------------------------
0000F0AC                            
0000F0AC                            Obj0D:					; XREF: Obj_Index
0000F0AC 7000                       		moveq	#0,d0
0000F0AE 1028 0024                  		move.b	$24(a0),d0
0000F0B2 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F0B6 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F0BA 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F0C0 6100 BBA4                  		bsr.w	AnimateSprite
0000F0C4 6100 EACA                  		bsr.w	DisplaySprite
0000F0C8 3028 0008                  		move.w	8(a0),d0
0000F0CC 0240 FF80                  		andi.w	#$FF80,d0
0000F0D0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0D4 0441 0080                  		subi.w	#$80,d1
0000F0D8 0241 FF80                  		andi.w	#$FF80,d1
0000F0DC 9041                       		sub.w	d1,d0
0000F0DE 0C40 0280                  		cmpi.w	#$280,d0
0000F0E2 6200 EAE8                  		bhi.w	DeleteObject
0000F0E6 4E75                       		rts	
0000F0E8                            ; ===========================================================================
0000F0E8 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F0EA 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F0EC 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F0EE 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F0F0 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F0F2                            ; ===========================================================================
0000F0F2                            
0000F0F2                            Obj0D_Main:				; XREF: Obj0D_Index
0000F0F2 5428 0024                  		addq.b	#2,$24(a0)
0000F0F6 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F0FE 317C 0680 0002             		move.w	#$680,2(a0)
0000F104 117C 0004 0001             		move.b	#4,1(a0)
0000F10A 117C 0018 0019             		move.b	#$18,$19(a0)
0000F110 117C 0004 0018             		move.b	#4,$18(a0)
0000F116                            
0000F116                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F116 3038 D008                  		move.w	($FFFFD008).w,d0
0000F11A 9068 0008                  		sub.w	8(a0),d0
0000F11E 6500                       		bcs.s	locret_EBBA
0000F120 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F124 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F126 303C 00CF                  		move.w	#$CF,d0
0000F12A 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F130 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F134 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F13A 5428 0024                  		addq.b	#2,$24(a0)
0000F13E                            
0000F13E                            locret_EBBA:
0000F13E 4E75                       		rts	
0000F140                            ; ===========================================================================
0000F140                            
0000F140                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F140 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F144 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F146 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F14C 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F150 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F156 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F158 5428 0024                  		addq.b	#2,$24(a0)
0000F15C                            
0000F15C                            Obj0D_Sparkle:
0000F15C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F160 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F162 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F168 7000                       		moveq	#0,d0
0000F16A 1028 0034                  		move.b	$34(a0),d0
0000F16E 5428 0034                  		addq.b	#2,$34(a0)
0000F172 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F178 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F17C 6100 EE98                  		bsr.w	SingleObjLoad
0000F180 6600                       		bne.s	locret_EC42
0000F182 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F186 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F18C 101A                       		move.b	(a2)+,d0
0000F18E 4880                       		ext.w	d0
0000F190 D068 0008                  		add.w	8(a0),d0
0000F194 3340 0008                  		move.w	d0,8(a1)
0000F198 101A                       		move.b	(a2)+,d0
0000F19A 4880                       		ext.w	d0
0000F19C D068 000C                  		add.w	$C(a0),d0
0000F1A0 3340 000C                  		move.w	d0,$C(a1)
0000F1A4 237C 0000 A404 0004        		move.l	#Map_obj25,4(a1)
0000F1AC 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F1B2 137C 0004 0001             		move.b	#4,1(a1)
0000F1B8 137C 0002 0018             		move.b	#2,$18(a1)
0000F1BE 137C 0008 0019             		move.b	#8,$19(a1)
0000F1C4                            
0000F1C4                            locret_EC42:
0000F1C4 4E75                       		rts	
0000F1C6                            ; ===========================================================================
0000F1C6 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F1C8 0808                       		dc.b	8,   8
0000F1CA F000                       		dc.b -$10,   0
0000F1CC 18F8                       		dc.b  $18,  -8
0000F1CE 00F8                       		dc.b	0,  -8
0000F1D0 1000                       		dc.b  $10,   0
0000F1D2 E808                       		dc.b -$18,   8
0000F1D4 1810                       		dc.b  $18, $10
0000F1D6                            ; ===========================================================================
0000F1D6                            
0000F1D6                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F1D6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F1DA 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F1DE 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F1E4 6600                       		bne.s	loc_EC70
0000F1E6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F1EC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F1F2 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F1F4 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F1FA 6000                       		bra.s	loc_EC70
0000F1FC                            
0000F1FC                            Obj0D_MoveLeft:
0000F1FC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F202                            
0000F202                            loc_EC70:
0000F202 4A38 D000                  		tst.b	($FFFFD000).w
0000F206 6700                       		beq.s	loc_EC86
0000F208 3038 D008                  		move.w	($FFFFD008).w,d0
0000F20C 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F210 0641 0128                  		addi.w	#$128,d1
0000F214 B041                       		cmp.w	d1,d0
0000F216 6500                       		bcs.s	locret_ECEE
0000F218                            
0000F218                            loc_EC86:
0000F218 5428 0024                  		addq.b	#2,$24(a0)
0000F21C                            
0000F21C                            ; ---------------------------------------------------------------------------
0000F21C                            ; Subroutine to	set up bonuses at the end of an	act
0000F21C                            ; ---------------------------------------------------------------------------
0000F21C                            
0000F21C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F21C                            
0000F21C                            
0000F21C                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F21C 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F220 6600                       		bne.s	locret_ECEE
0000F222 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F228 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F22C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F230 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F236 7010                       		moveq	#$10,d0
0000F238 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F23E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F244 7000                       		moveq	#0,d0
0000F246 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F24A C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F24E 7200                       		moveq	#0,d1
0000F250 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F254 D041                       		add.w	d1,d0		; add up your time
0000F256 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F25A 7214                       		moveq	#$14,d1
0000F25C B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F25E 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F260 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F262                            
0000F262                            loc_ECD0:
0000F262 D040                       		add.w	d0,d0
0000F264 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F26A 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F26E C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F272 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F276 303C 008E                  		move.w	#$8E,d0
0000F27A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F280                            
0000F280                            locret_ECEE:
0000F280 4E75                       		rts	
0000F282                            ; End of function GotThroughAct
0000F282                            
0000F282                            ; ===========================================================================
0000F282 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F296 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F2AC                            ; ===========================================================================
0000F2AC                            
0000F2AC                            locret_ED1A:				; XREF: Obj0D_Index
0000F2AC 4E75                       		rts	
0000F2AE                            ; ===========================================================================
0000F2AE                            Ani_obj0D:
0000F2AE                            	include "_anim\obj0D.asm"
0000F2AE                            ; ---------------------------------------------------------------------------
0000F2AE                            ; Animation script - signpost
0000F2AE                            ; ---------------------------------------------------------------------------
0000F2AE 0000                       		dc.w byte_ED24-Ani_obj0D
0000F2B0 0000                       		dc.w byte_ED28-Ani_obj0D
0000F2B2 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F2B4 0000                       		dc.w byte_ED34-Ani_obj0D
0000F2B6 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F2BA 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F2C0 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F2C6 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F2CA 00                         		even
0000F2CA 00                         		even
0000F2CA                            
0000F2CA                            ; ---------------------------------------------------------------------------
0000F2CA                            ; Sprite mappings - signpost
0000F2CA                            ; ---------------------------------------------------------------------------
0000F2CA                            Map_obj0D:
0000F2CA                            	include "_maps\obj0D.asm"
0000F2CA                            ; ---------------------------------------------------------------------------
0000F2CA                            ; Sprite mappings - signpost
0000F2CA                            ; ---------------------------------------------------------------------------
0000F2CA 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F2CE 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F2D2 0000                       		dc.w byte_ED73-Map_obj0D
0000F2D4 03                         byte_ED42:	dc.b 3
0000F2D5 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F2DA F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F2DF 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2E4 02                         byte_ED52:	dc.b 2
0000F2E5 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F2EA 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2EF 02                         byte_ED5D:	dc.b 2
0000F2F0 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F2F5 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F2FA 02                         byte_ED68:	dc.b 2
0000F2FB F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F300 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F305 03                         byte_ED73:	dc.b 3
0000F306 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F30B F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F310 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F316 00                         		even
0000F316 00                         		even
0000F316                            
0000F316                            ; ===========================================================================
0000F316                            ; ---------------------------------------------------------------------------
0000F316                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F316                            ; ---------------------------------------------------------------------------
0000F316                            
0000F316                            Obj4C:					; XREF: Obj_Index
0000F316 7000                       		moveq	#0,d0
0000F318 1028 0024                  		move.b	$24(a0),d0
0000F31C 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F320 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F324 6000 0000                  		bra.w	Obj4D_ChkDel
0000F328                            ; ===========================================================================
0000F328 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F32A 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F32C 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F32E 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F330 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F332 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F334                            ; ===========================================================================
0000F334                            
0000F334                            Obj4C_Main:				; XREF: Obj4C_Index
0000F334 5428 0024                  		addq.b	#2,$24(a0)
0000F338 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F340 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F346 117C 0004 0001             		move.b	#4,1(a0)
0000F34C 117C 0001 0018             		move.b	#1,$18(a0)
0000F352 117C 0038 0019             		move.b	#$38,$19(a0)
0000F358 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F35E                            
0000F35E                            loc_EDCC:				; XREF: Obj4C_Index
0000F35E 5368 0032                  		subq.w	#1,$32(a0)
0000F362 6A00                       		bpl.s	locret_EDF0
0000F364 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F36A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F36E 3228 000C                  		move.w	$C(a0),d1
0000F372 B041                       		cmp.w	d1,d0
0000F374 6400                       		bcc.s	locret_EDF0
0000F376 0441 0170                  		subi.w	#$170,d1
0000F37A B041                       		cmp.w	d1,d0
0000F37C 6500                       		bcs.s	locret_EDF0
0000F37E 5428 0024                  		addq.b	#2,$24(a0)
0000F382                            
0000F382                            locret_EDF0:
0000F382 4E75                       		rts	
0000F384                            ; ===========================================================================
0000F384                            
0000F384                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F384 5428 0024                  		addq.b	#2,$24(a0)
0000F388 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F38C 6600                       		bne.s	loc_EE18
0000F38E 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F392 3368 0008 0008             		move.w	8(a0),8(a1)
0000F398 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F39E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F3A4 2348 003C                  		move.l	a0,$3C(a1)
0000F3A8                            
0000F3A8                            loc_EE18:
0000F3A8 117C 0001 001C             		move.b	#1,$1C(a0)
0000F3AE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3B2 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F3B4 117C 0004 001C             		move.b	#4,$1C(a0)
0000F3BA 6000                       		bra.s	Obj4C_Display
0000F3BC                            ; ===========================================================================
0000F3BC                            
0000F3BC                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F3BC 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F3C0 08E9 0001 0022             		bset	#1,$22(a1)
0000F3C6 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F3CC 6000                       		bra.s	Obj4C_Display
0000F3CE                            ; ===========================================================================
0000F3CE                            
0000F3CE                            loc_EE3E:				; XREF: Obj4C_Index
0000F3CE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3D2 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F3D4 5428 0024                  		addq.b	#2,$24(a0)
0000F3D8 4E75                       		rts	
0000F3DA                            ; ===========================================================================
0000F3DA                            
0000F3DA                            Obj4C_Display:				; XREF: Obj4C_Index
0000F3DA 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F3E0 6100 B884                  		bsr.w	AnimateSprite
0000F3E4 6100 E7AA                  		bsr.w	DisplaySprite
0000F3E8 4E75                       		rts	
0000F3EA                            ; ===========================================================================
0000F3EA                            
0000F3EA                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F3EA 117C 0000 001C             		move.b	#0,$1C(a0)
0000F3F0 117C 0002 0024             		move.b	#2,$24(a0)
0000F3F6 4A28 0028                  		tst.b	$28(a0)
0000F3FA 6700 E7D0                  		beq.w	DeleteObject
0000F3FE 4E75                       		rts	
0000F400                            ; ===========================================================================
0000F400                            ; ---------------------------------------------------------------------------
0000F400                            ; Object 4D - lava geyser / lavafall (MZ)
0000F400                            ; ---------------------------------------------------------------------------
0000F400                            
0000F400                            Obj4D:					; XREF: Obj_Index
0000F400 7000                       		moveq	#0,d0
0000F402 1028 0024                  		move.b	$24(a0),d0
0000F406 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F40A 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F40E 6000 E780                  		bra.w	DisplaySprite
0000F412                            ; ===========================================================================
0000F412 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F414 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F416 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F418 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F41A                            
0000F41A FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F41E                            ; ===========================================================================
0000F41E                            
0000F41E                            Obj4D_Main:				; XREF: Obj4D_Index
0000F41E 5428 0024                  		addq.b	#2,$24(a0)
0000F422 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F428 4A28 0028                  		tst.b	$28(a0)
0000F42C 6700                       		beq.s	loc_EEA4
0000F42E 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F434                            
0000F434                            loc_EEA4:
0000F434 7000                       		moveq	#0,d0
0000F436 1028 0028                  		move.b	$28(a0),d0
0000F43A D040                       		add.w	d0,d0
0000F43C 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F442 2248                       		movea.l	a0,a1
0000F444 7201                       		moveq	#1,d1
0000F446 6100                       		bsr.s	Obj4D_MakeLava
0000F448 6000                       		bra.s	loc_EF10
0000F44A                            ; ===========================================================================
0000F44A                            
0000F44A                            Obj4D_Loop:
0000F44A 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F44E 6600                       		bne.s	loc_EF0A
0000F450                            
0000F450                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F450 12BC 004D                  		move.b	#$4D,0(a1)
0000F454 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F45C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F462 137C 0004 0001             		move.b	#4,1(a1)
0000F468 137C 0020 0019             		move.b	#$20,$19(a1)
0000F46E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F474 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F47A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F480 137C 0001 0018             		move.b	#1,$18(a1)
0000F486 137C 0005 001C             		move.b	#5,$1C(a1)
0000F48C 4A28 0028                  		tst.b	$28(a0)
0000F490 6700                       		beq.s	loc_EF0A
0000F492 137C 0002 001C             		move.b	#2,$1C(a1)
0000F498                            
0000F498                            loc_EF0A:
0000F498 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F49C 4E75                       		rts	
0000F49E                            ; ===========================================================================
0000F49E                            
0000F49E                            loc_EF10:				; XREF: Obj4D_Main
0000F49E 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F4A4 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4AA 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F4B0 137C 0093 0020             		move.b	#$93,$20(a1)
0000F4B6 137C 0080 0016             		move.b	#$80,$16(a1)
0000F4BC 08E9 0004 0001             		bset	#4,1(a1)
0000F4C2 5829 0024                  		addq.b	#4,$24(a1)
0000F4C6 2348 003C                  		move.l	a0,$3C(a1)
0000F4CA 4A28 0028                  		tst.b	$28(a0)
0000F4CE 6700                       		beq.s	Obj4D_PlaySnd
0000F4D0 7200                       		moveq	#0,d1
0000F4D2 6100 FF76                  		bsr.w	Obj4D_Loop
0000F4D6 5429 0024                  		addq.b	#2,$24(a1)
0000F4DA 08E9 0004 0002             		bset	#4,2(a1)
0000F4E0 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F4E6 137C 0000 0018             		move.b	#0,$18(a1)
0000F4EC 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4F2 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F4F8 117C 0000 0028             		move.b	#0,$28(a0)
0000F4FE                            
0000F4FE                            Obj4D_PlaySnd:
0000F4FE 303C 00C8                  		move.w	#$C8,d0
0000F502 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F508                            
0000F508                            Obj4D_Action:				; XREF: Obj4D_Index
0000F508 7000                       		moveq	#0,d0
0000F50A 1028 0028                  		move.b	$28(a0),d0
0000F50E D040                       		add.w	d0,d0
0000F510 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F514 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F518 6100 E650                  		bsr.w	SpeedToPos
0000F51C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F522 6100 B742                  		bsr.w	AnimateSprite
0000F526                            
0000F526                            Obj4D_ChkDel:				; XREF: Obj4C
0000F526 3028 0008                  		move.w	8(a0),d0
0000F52A 0240 FF80                  		andi.w	#$FF80,d0
0000F52E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F532 0441 0080                  		subi.w	#$80,d1
0000F536 0241 FF80                  		andi.w	#$FF80,d1
0000F53A 9041                       		sub.w	d1,d0
0000F53C 0C40 0280                  		cmpi.w	#$280,d0
0000F540 6200 E68A                  		bhi.w	DeleteObject
0000F544 4E75                       		rts	
0000F546                            ; ===========================================================================
0000F546 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F548 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F54A                            ; ===========================================================================
0000F54A                            
0000F54A                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F54A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F550 3028 0030                  		move.w	$30(a0),d0
0000F554 B068 000C                  		cmp.w	$C(a0),d0
0000F558 6400                       		bcc.s	locret_EFDA
0000F55A 5828 0024                  		addq.b	#4,$24(a0)
0000F55E 2268 003C                  		movea.l	$3C(a0),a1
0000F562 137C 0003 001C             		move.b	#3,$1C(a1)
0000F568                            
0000F568                            locret_EFDA:
0000F568 4E75                       		rts	
0000F56A                            ; ===========================================================================
0000F56A                            
0000F56A                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F56A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F570 3028 0030                  		move.w	$30(a0),d0
0000F574 B068 000C                  		cmp.w	$C(a0),d0
0000F578 6400                       		bcc.s	locret_EFFA
0000F57A 5828 0024                  		addq.b	#4,$24(a0)
0000F57E 2268 003C                  		movea.l	$3C(a0),a1
0000F582 137C 0001 001C             		move.b	#1,$1C(a1)
0000F588                            
0000F588                            locret_EFFA:
0000F588 4E75                       		rts	
0000F58A                            ; ===========================================================================
0000F58A                            
0000F58A                            loc_EFFC:				; XREF: Obj4D_Index
0000F58A 2268 003C                  		movea.l	$3C(a0),a1
0000F58E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F594 6700 0000                  		beq.w	Obj4D_Delete
0000F598 3029 000C                  		move.w	$C(a1),d0
0000F59C 0640 0060                  		addi.w	#$60,d0
0000F5A0 3140 000C                  		move.w	d0,$C(a0)
0000F5A4 9068 0030                  		sub.w	$30(a0),d0
0000F5A8 4440                       		neg.w	d0
0000F5AA 7208                       		moveq	#8,d1
0000F5AC 0C40 0040                  		cmpi.w	#$40,d0
0000F5B0 6C00                       		bge.s	loc_F026
0000F5B2 720B                       		moveq	#$B,d1
0000F5B4                            
0000F5B4                            loc_F026:
0000F5B4 0C40 0080                  		cmpi.w	#$80,d0
0000F5B8 6F00                       		ble.s	loc_F02E
0000F5BA 720E                       		moveq	#$E,d1
0000F5BC                            
0000F5BC                            loc_F02E:
0000F5BC 5328 001E                  		subq.b	#1,$1E(a0)
0000F5C0 6A00                       		bpl.s	loc_F04C
0000F5C2 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5C8 5228 001B                  		addq.b	#1,$1B(a0)
0000F5CC 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F5D2 6500                       		bcs.s	loc_F04C
0000F5D4 117C 0000 001B             		move.b	#0,$1B(a0)
0000F5DA                            
0000F5DA                            loc_F04C:
0000F5DA 1028 001B                  		move.b	$1B(a0),d0
0000F5DE D001                       		add.b	d1,d0
0000F5E0 1140 001A                  		move.b	d0,$1A(a0)
0000F5E4 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F5E8                            ; ===========================================================================
0000F5E8                            
0000F5E8                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F5E8 6000 E5E2                  		bra.w	DeleteObject
0000F5EC                            ; ===========================================================================
0000F5EC                            ; ---------------------------------------------------------------------------
0000F5EC                            ; Object 4E - advancing	wall of	lava (MZ)
0000F5EC                            ; ---------------------------------------------------------------------------
0000F5EC                            
0000F5EC                            Obj4E:					; XREF: Obj_Index
0000F5EC 7000                       		moveq	#0,d0
0000F5EE 1028 0024                  		move.b	$24(a0),d0
0000F5F2 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F5F6 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F5FA                            ; ===========================================================================
0000F5FA 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F5FC 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F5FE 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F600 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F602 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F604                            ; ===========================================================================
0000F604                            
0000F604                            Obj4E_Main:				; XREF: Obj4E_Index
0000F604 5828 0024                  		addq.b	#4,$24(a0)
0000F608 2248                       		movea.l	a0,a1
0000F60A 7201                       		moveq	#1,d1
0000F60C 6000                       		bra.s	Obj4E_Main2
0000F60E                            ; ===========================================================================
0000F60E                            
0000F60E                            Obj4E_Loop:
0000F60E 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F612 6600                       		bne.s	loc_F0C8
0000F614                            
0000F614                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F614 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F618 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F620 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F626 137C 0004 0001             		move.b	#4,1(a1)
0000F62C 137C 0050 0019             		move.b	#$50,$19(a1)
0000F632 3368 0008 0008             		move.w	8(a0),8(a1)
0000F638 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F63E 137C 0001 0018             		move.b	#1,$18(a1)
0000F644 137C 0000 001C             		move.b	#0,$1C(a1)
0000F64A 137C 0094 0020             		move.b	#$94,$20(a1)
0000F650 2348 003C                  		move.l	a0,$3C(a1)
0000F654                            
0000F654                            loc_F0C8:
0000F654 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F658                            
0000F658 5C29 0024                  		addq.b	#6,$24(a1)
0000F65C 137C 0004 001A             		move.b	#4,$1A(a1)
0000F662                            
0000F662                            Obj4E_Action:				; XREF: Obj4E_Index
0000F662 3038 D008                  		move.w	($FFFFD008).w,d0
0000F666 9068 0008                  		sub.w	8(a0),d0
0000F66A 6400                       		bcc.s	Obj4E_ChkSonic
0000F66C 4440                       		neg.w	d0
0000F66E                            
0000F66E                            Obj4E_ChkSonic:
0000F66E 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F672 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F674 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F678 9068 000C                  		sub.w	$C(a0),d0
0000F67C 6400                       		bcc.s	loc_F0F4
0000F67E 4440                       		neg.w	d0
0000F680                            
0000F680                            loc_F0F4:
0000F680 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F684 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F686 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F68C 6000                       		bra.s	Obj4E_Solid
0000F68E                            ; ===========================================================================
0000F68E                            
0000F68E                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F68E 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F692 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F694 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F69A 5528 0024                  		subq.b	#2,$24(a0)
0000F69E                            
0000F69E                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F69E 323C 002B                  		move.w	#$2B,d1
0000F6A2 343C 0018                  		move.w	#$18,d2
0000F6A6 3602                       		move.w	d2,d3
0000F6A8 5243                       		addq.w	#1,d3
0000F6AA 3828 0008                  		move.w	8(a0),d4
0000F6AE 1028 0024                  		move.b	$24(a0),d0
0000F6B2 3F00                       		move.w	d0,-(sp)
0000F6B4 6100 0000                  		bsr.w	SolidObject
0000F6B8 301F                       		move.w	(sp)+,d0
0000F6BA 1140 0024                  		move.b	d0,$24(a0)
0000F6BE 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F6C4 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F6C6 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F6CA 4228 0036                  		clr.b	$36(a0)
0000F6CE                            
0000F6CE                            Obj4E_Animate:
0000F6CE 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F6D4 6100 B590                  		bsr.w	AnimateSprite
0000F6D8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F6DE 6400                       		bcc.s	Obj4E_ChkDel
0000F6E0 6100 E488                  		bsr.w	SpeedToPos
0000F6E4                            
0000F6E4                            Obj4E_ChkDel:
0000F6E4 6100 E4AA                  		bsr.w	DisplaySprite
0000F6E8 4A28 0036                  		tst.b	$36(a0)
0000F6EC 6600                       		bne.s	locret_F17E
0000F6EE 3028 0008                  		move.w	8(a0),d0
0000F6F2 0240 FF80                  		andi.w	#$FF80,d0
0000F6F6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6FA 0441 0080                  		subi.w	#$80,d1
0000F6FE 0241 FF80                  		andi.w	#$FF80,d1
0000F702 9041                       		sub.w	d1,d0
0000F704 0C40 0280                  		cmpi.w	#$280,d0
0000F708 6200                       		bhi.s	Obj4E_ChkGone
0000F70A                            
0000F70A                            locret_F17E:
0000F70A 4E75                       		rts	
0000F70C                            ; ===========================================================================
0000F70C                            
0000F70C                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F70C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F710 7000                       		moveq	#0,d0
0000F712 1028 0023                  		move.b	$23(a0),d0
0000F716 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F71C 117C 0008 0024             		move.b	#8,$24(a0)
0000F722 4E75                       		rts	
0000F724                            ; ===========================================================================
0000F724                            
0000F724                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F724 2268 003C                  		movea.l	$3C(a0),a1
0000F728 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F72E 6700                       		beq.s	Obj4E_Delete
0000F730 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F736 0468 0080 0008             		subi.w	#$80,8(a0)
0000F73C 6000 E452                  		bra.w	DisplaySprite
0000F740                            ; ===========================================================================
0000F740                            
0000F740                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F740 6000 E48A                  		bra.w	DeleteObject
0000F744                            ; ===========================================================================
0000F744                            ; ---------------------------------------------------------------------------
0000F744                            ; Object 54 - invisible	lava tag (MZ)
0000F744                            ; ---------------------------------------------------------------------------
0000F744                            
0000F744                            Obj54:					; XREF: Obj_Index
0000F744 7000                       		moveq	#0,d0
0000F746 1028 0024                  		move.b	$24(a0),d0
0000F74A 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F74E 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F752                            ; ===========================================================================
0000F752 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F754 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F756                            
0000F756 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F75A                            ; ===========================================================================
0000F75A                            
0000F75A                            Obj54_Main:				; XREF: Obj54_Index
0000F75A 5428 0024                  		addq.b	#2,$24(a0)
0000F75E 7000                       		moveq	#0,d0
0000F760 1028 0028                  		move.b	$28(a0),d0
0000F764 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F76A 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F772 117C 0084 0001             		move.b	#$84,1(a0)
0000F778                            
0000F778                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F778 3028 0008                  		move.w	8(a0),d0
0000F77C 0240 FF80                  		andi.w	#$FF80,d0
0000F780 3238 F700                  		move.w	($FFFFF700).w,d1
0000F784 0441 0080                  		subi.w	#$80,d1
0000F788 0241 FF80                  		andi.w	#$FF80,d1
0000F78C 9041                       		sub.w	d1,d0
0000F78E 6B00 E43C                  		bmi.w	DeleteObject
0000F792 0C40 0280                  		cmpi.w	#$280,d0
0000F796 6200 E434                  		bhi.w	DeleteObject
0000F79A 4E75                       		rts	
0000F79C                            ; ===========================================================================
0000F79C                            ; ---------------------------------------------------------------------------
0000F79C                            ; Sprite mappings - invisible lava tag (MZ)
0000F79C                            ; ---------------------------------------------------------------------------
0000F79C                            Map_obj54:
0000F79C                            	include "_maps\obj54.asm"
0000F79C                            ; ---------------------------------------------------------------------------
0000F79C                            ; Sprite mappings - invisible lava tag (MZ)
0000F79C                            ; ---------------------------------------------------------------------------
0000F79C 0000                       		dc.w byte_F212-Map_obj54
0000F79E 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F7A0 00                         		even
0000F7A0 00                         		even
0000F7A0                            
0000F7A0                            Ani_obj4C:
0000F7A0                            	include "_anim\obj4C.asm"
0000F7A0                            ; ---------------------------------------------------------------------------
0000F7A0                            ; Animation script - geyser of lava (MZ)
0000F7A0                            ; ---------------------------------------------------------------------------
0000F7A0 0000                       		dc.w byte_F220-Ani_obj4C
0000F7A2 0000                       		dc.w byte_F22A-Ani_obj4C
0000F7A4 0000                       		dc.w byte_F22E-Ani_obj4C
0000F7A6 0000                       		dc.w byte_F232-Ani_obj4C
0000F7A8 0000                       		dc.w byte_F23A-Ani_obj4C
0000F7AA 0000                       		dc.w byte_F23E-Ani_obj4C
0000F7AC 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F7B6 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F7BA 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F7BE 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F7C6 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F7CA 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F7CE                            		even
0000F7CE                            		even
0000F7CE                            
0000F7CE                            Ani_obj4E:
0000F7CE                            	include "_anim\obj4E.asm"
0000F7CE                            ; ---------------------------------------------------------------------------
0000F7CE                            ; Animation script - advancing wall of lava (MZ)
0000F7CE                            ; ---------------------------------------------------------------------------
0000F7CE 0000                       		dc.w byte_F244-Ani_obj4E
0000F7D0 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F7D6                            		even
0000F7D6                            		even
0000F7D6                            
0000F7D6                            ; ---------------------------------------------------------------------------
0000F7D6                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7D6                            ; ---------------------------------------------------------------------------
0000F7D6                            Map_obj4C:
0000F7D6                            	include "_maps\obj4C.asm"
0000F7D6                            ; ---------------------------------------------------------------------------
0000F7D6                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7D6                            ; ---------------------------------------------------------------------------
0000F7D6 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F7DA 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F7DE 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F7E2 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F7E6 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F7EA 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F7EE 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F7F2 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F7F6 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F7FA 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F7FE 02                         byte_F272:	dc.b 2
0000F7FF EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F804 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F809 02                         byte_F27D:	dc.b 2
0000F80A EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F80F EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F814 04                         byte_F288:	dc.b 4
0000F815 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F81A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F81F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F824 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F829 04                         byte_F29D:	dc.b 4
0000F82A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F82F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F834 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F839 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F83E 06                         byte_F2B2:	dc.b 6
0000F83F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F844 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F849 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F84E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F853 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F858 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F85D 06                         byte_F2D1:	dc.b 6
0000F85E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F863 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F868 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F86D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F872 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F877 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F87C 02                         byte_F2F0:	dc.b 2
0000F87D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F882 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F887 02                         byte_F2FB:	dc.b 2
0000F888 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F88D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F892 0A                         byte_F306:	dc.b $A
0000F893 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F898 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F89D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F8A2 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F8A7 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F8AC D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F8B1 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F8B6 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F8BB 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F8C0 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F8C5 0A                         byte_F339:	dc.b $A
0000F8C6 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F8CB 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F8D0 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F8D5 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F8DA D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F8DF D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F8E4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F8E9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F8EE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F8F3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F8F8 0A                         byte_F36C:	dc.b $A
0000F8F9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F8FE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F903 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F908 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F90D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F912 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F917 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F91C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F921 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F926 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F92B 06                         byte_F39F:	dc.b 6
0000F92C 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F931 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F936 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F93B B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F940 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F945 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F94A 06                         byte_F3BE:	dc.b 6
0000F94B 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F950 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F955 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F95A B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F95F D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F964 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F969 06                         byte_F3DD:	dc.b 6
0000F96A 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F96F 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F974 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F979 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F97E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F983 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F988 10                         byte_F3FC:	dc.b $10
0000F989 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F98E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F993 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F998 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F99D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9A2 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9A7 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F9AC F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F9B1 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F9B6 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F9BB 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F9C0 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F9C5 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F9CA 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F9CF 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F9D4 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F9D9 10                         byte_F44D:	dc.b $10
0000F9DA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9DF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9E4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F9E9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F9EE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9F3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9F8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F9FD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FA02 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA07 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA0C 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FA11 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FA16 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FA1B 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA20 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA25 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA2A 10                         byte_F49E:	dc.b $10
0000FA2B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA30 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA35 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA3A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA3F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA44 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA49 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA4E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA53 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA58 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA5D 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FA62 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FA67 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FA6C 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FA71 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FA76 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FA7B 06                         byte_F4EF:	dc.b 6
0000FA7C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FA81 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FA86 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FA8B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FA90 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FA95 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FA9A 06                         byte_F50E:	dc.b 6
0000FA9B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FAA0 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FAA5 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FAAA E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FAAF D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FAB4 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FAB9 00                         byte_F52D:	dc.b 0
0000FABA                            		even
0000FABA                            		even
0000FABA                            
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA                            ; Sprite mappings - advancing wall of lava (MZ)
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA                            Map_obj4E:
0000FABA                            	include "_maps\obj4E.asm"
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA                            ; Sprite mappings - advancing wall of lava (MZ)
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA 0000                       		dc.w byte_F538-Map_obj4E
0000FABC 0000                       		dc.w byte_F566-Map_obj4E
0000FABE 0000                       		dc.w byte_F594-Map_obj4E
0000FAC0 0000                       		dc.w byte_F5C2-Map_obj4E
0000FAC2 0000                       		dc.w byte_F5F0-Map_obj4E
0000FAC4 09                         byte_F538:	dc.b 9
0000FAC5 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FACA 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FACF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAD4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAD9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FADE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FAE3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FAE8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FAED 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FAF2 09                         byte_F566:	dc.b 9
0000FAF3 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FAF8 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FAFD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB02 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB07 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB0C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB11 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB16 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB1B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB20 09                         byte_F594:	dc.b 9
0000FB21 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB26 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB2B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB30 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB35 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB3A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB3F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB44 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB49 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB4E 09                         byte_F5C2:	dc.b 9
0000FB4F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB54 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FB59 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB5E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB63 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB68 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB6D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB72 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB77 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB7C 08                         byte_F5F0:	dc.b 8
0000FB7D E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FB82 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB87 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB8C 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB91 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB96 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB9B E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBA0 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBA6 00                         		even
0000FBA6 00                         		even
0000FBA6                            
0000FBA6                            ; ===========================================================================
0000FBA6                            ; ---------------------------------------------------------------------------
0000FBA6                            ; Object 40 - Moto Bug enemy (GHZ)
0000FBA6                            ; ---------------------------------------------------------------------------
0000FBA6                            
0000FBA6                            Obj40:					; XREF: Obj_Index
0000FBA6 7000                       		moveq	#0,d0
0000FBA8 1028 0024                  		move.b	$24(a0),d0
0000FBAC 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FBB0 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FBB4                            ; ===========================================================================
0000FBB4 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FBB6 0000                       		dc.w Obj40_Action-Obj40_Index
0000FBB8 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FBBA 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FBBC                            ; ===========================================================================
0000FBBC                            
0000FBBC                            Obj40_Main:				; XREF: Obj40_Index
0000FBBC 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FBC4 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FBCA 117C 0004 0001             		move.b	#4,1(a0)
0000FBD0 117C 0004 0018             		move.b	#4,$18(a0)
0000FBD6 117C 0014 0019             		move.b	#$14,$19(a0)
0000FBDC 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FBE0 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FBE2 117C 000E 0016             		move.b	#$E,$16(a0)
0000FBE8 117C 0008 0017             		move.b	#8,$17(a0)
0000FBEE 117C 000C 0020             		move.b	#$C,$20(a0)
0000FBF4 6100 DF48                  		bsr.w	ObjectFall
0000FBF8 4EB9 0000 0000             		jsr	ObjHitFloor
0000FBFE 4A41                       		tst.w	d1
0000FC00 6A00                       		bpl.s	locret_F68A
0000FC02 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC06 317C 0000 0012             		move.w	#0,$12(a0)
0000FC0C 5428 0024                  		addq.b	#2,$24(a0)
0000FC10 0868 0000 0022             		bchg	#0,$22(a0)
0000FC16                            
0000FC16                            locret_F68A:
0000FC16 4E75                       		rts	
0000FC18                            ; ===========================================================================
0000FC18                            
0000FC18                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FC18 5828 0024                  		addq.b	#4,$24(a0)
0000FC1C 6000 0000                  		bra.w	Obj40_Animate
0000FC20                            ; ===========================================================================
0000FC20                            
0000FC20                            Obj40_Action:				; XREF: Obj40_Index
0000FC20 7000                       		moveq	#0,d0
0000FC22 1028 0025                  		move.b	$25(a0),d0
0000FC26 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC2A 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC2E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FC34 6100 B030                  		bsr.w	AnimateSprite
0000FC38                            
0000FC38                            ; ---------------------------------------------------------------------------
0000FC38                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FC38                            ; ---------------------------------------------------------------------------
0000FC38                            
0000FC38                            MarkObjGone:
0000FC38 3028 0008                  		move.w	8(a0),d0
0000FC3C 0240 FF80                  		andi.w	#$FF80,d0
0000FC40 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC44 0441 0080                  		subi.w	#$80,d1
0000FC48 0241 FF80                  		andi.w	#$FF80,d1
0000FC4C 9041                       		sub.w	d1,d0
0000FC4E 0C40 0280                  		cmpi.w	#$280,d0
0000FC52 6200 0000                  		bhi.w	Mark_ChkGone
0000FC56 6000 DF38                  		bra.w	DisplaySprite
0000FC5A                            ; ===========================================================================
0000FC5A                            
0000FC5A                            Mark_ChkGone:
0000FC5A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC5E 7000                       		moveq	#0,d0
0000FC60 1028 0023                  		move.b	$23(a0),d0
0000FC64 6700                       		beq.s	Mark_Delete
0000FC66 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC6C                            
0000FC6C                            Mark_Delete:
0000FC6C 6000 DF5E                  		bra.w	DeleteObject
0000FC70                            
0000FC70                            ; ===========================================================================
0000FC70 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FC72 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FC74                            ; ===========================================================================
0000FC74                            
0000FC74                            Obj40_Move:				; XREF: Obj40_Index2
0000FC74 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FC78 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FC7A 5428 0025                  		addq.b	#2,$25(a0)
0000FC7E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FC84 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC8A 0868 0000 0022             		bchg	#0,$22(a0)
0000FC90 6600                       		bne.s	locret_F70A
0000FC92 4468 0010                  		neg.w	$10(a0)		; change direction
0000FC96                            
0000FC96                            locret_F70A:
0000FC96 4E75                       		rts	
0000FC98                            ; ===========================================================================
0000FC98                            
0000FC98                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FC98 6100 DED0                  		bsr.w	SpeedToPos
0000FC9C 4EB9 0000 0000             		jsr	ObjHitFloor
0000FCA2 0C41 FFF8                  		cmpi.w	#-8,d1
0000FCA6 6D00                       		blt.s	Obj40_Pause
0000FCA8 0C41 000C                  		cmpi.w	#$C,d1
0000FCAC 6C00                       		bge.s	Obj40_Pause
0000FCAE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FCB2 5328 0033                  		subq.b	#1,$33(a0)
0000FCB6 6A00                       		bpl.s	locret_F756
0000FCB8 117C 000F 0033             		move.b	#$F,$33(a0)
0000FCBE 6100 E356                  		bsr.w	SingleObjLoad
0000FCC2 6600                       		bne.s	locret_F756
0000FCC4 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FCC8 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCCE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FCD4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FCDA 137C 0002 001C             		move.b	#2,$1C(a1)
0000FCE0                            
0000FCE0                            locret_F756:
0000FCE0 4E75                       		rts	
0000FCE2                            ; ===========================================================================
0000FCE2                            
0000FCE2                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FCE2 5528 0025                  		subq.b	#2,$25(a0)
0000FCE6 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FCEC 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FCF2 117C 0000 001C             		move.b	#0,$1C(a0)
0000FCF8 4E75                       		rts	
0000FCFA                            ; ===========================================================================
0000FCFA                            
0000FCFA                            Obj40_Animate:				; XREF: Obj40_Index
0000FCFA 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD00 6100 AF64                  		bsr.w	AnimateSprite
0000FD04 6000 DE8A                  		bra.w	DisplaySprite
0000FD08                            ; ===========================================================================
0000FD08                            
0000FD08                            Obj40_Delete:				; XREF: Obj40_Index
0000FD08 6000 DEC2                  		bra.w	DeleteObject
0000FD0C                            ; ===========================================================================
0000FD0C                            Ani_obj40:
0000FD0C                            	include "_anim\obj40.asm"
0000FD0C                            ; ---------------------------------------------------------------------------
0000FD0C                            ; Animation script - Motobug enemy
0000FD0C                            ; ---------------------------------------------------------------------------
0000FD0C 0000                       		dc.w byte_F788-Ani_obj40
0000FD0E 0000                       		dc.w byte_F78C-Ani_obj40
0000FD10 0000                       		dc.w byte_F792-Ani_obj40
0000FD12 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FD16 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FD1C 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD2A                            		even
0000FD2A                            		even
0000FD2A                            
0000FD2A                            ; ---------------------------------------------------------------------------
0000FD2A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD2A                            ; ---------------------------------------------------------------------------
0000FD2A                            Map_obj40:
0000FD2A                            	include "_maps\obj40.asm"
0000FD2A                            Map_cedc:
0000FD2A 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD2C 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD2E 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD30 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FD32 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FD34 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FD36 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FD38 04                         Map_cedc_E: 	dc.b $4
0000FD39 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD3E 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FD43 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD48 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FD4D 04                         Map_cedc_23: 	dc.b $4
0000FD4E F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FD53 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FD58 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FD5D 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FD62 05                         Map_cedc_38: 	dc.b $5
0000FD63 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD68 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FD6D F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD72 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FD77 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FD7C 01                         Map_cedc_52: 	dc.b $1
0000FD7D FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FD82 01                         Map_cedc_58: 	dc.b $1
0000FD83 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FD88 01                         Map_cedc_5E: 	dc.b $1
0000FD89 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FD8E 00                         Map_cedc_64: 	dc.b $0
0000FD90 00                         	even
0000FD90 00                         	even
0000FD90                            
0000FD90                            ; ===========================================================================
0000FD90                            ; ---------------------------------------------------------------------------
0000FD90                            ; Object 4F - blank
0000FD90                            ; ---------------------------------------------------------------------------
0000FD90                            
0000FD90                            Obj4F:					; XREF: Obj_Index
0000FD90 4E75                       		rts	
0000FD92                            
0000FD92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD92                            
0000FD92                            
0000FD92                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FD92 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FD96 D047                       		add.w	d7,d0
0000FD98 0240 0003                  		andi.w	#3,d0
0000FD9C 6600                       		bne.s	loc_F836
0000FD9E 7600                       		moveq	#0,d3
0000FDA0 1628 0019                  		move.b	$19(a0),d3
0000FDA4 4A68 0010                  		tst.w	$10(a0)
0000FDA8 6B00                       		bmi.s	loc_F82C
0000FDAA 6100 0000                  		bsr.w	ObjHitWallRight
0000FDAE 4A41                       		tst.w	d1
0000FDB0 6A00                       		bpl.s	loc_F836
0000FDB2                            
0000FDB2                            loc_F828:
0000FDB2 7001                       		moveq	#1,d0
0000FDB4 4E75                       		rts	
0000FDB6                            ; ===========================================================================
0000FDB6                            
0000FDB6                            loc_F82C:
0000FDB6 4643                       		not.w	d3
0000FDB8 6100 0000                  		bsr.w	ObjHitWallLeft
0000FDBC 4A41                       		tst.w	d1
0000FDBE 6BF2                       		bmi.s	loc_F828
0000FDC0                            
0000FDC0                            loc_F836:
0000FDC0 7000                       		moveq	#0,d0
0000FDC2 4E75                       		rts	
0000FDC4                            ; End of function Obj50_ChkWall
0000FDC4                            
0000FDC4                            ; ===========================================================================
0000FDC4                            ; ---------------------------------------------------------------------------
0000FDC4                            ; Object 50 - Yadrin enemy (SYZ)
0000FDC4                            ; ---------------------------------------------------------------------------
0000FDC4                            
0000FDC4                            Obj50:					; XREF: Obj_Index
0000FDC4 7000                       		moveq	#0,d0
0000FDC6 1028 0024                  		move.b	$24(a0),d0
0000FDCA 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FDCE 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FDD2                            ; ===========================================================================
0000FDD2 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FDD4 0000                       		dc.w Obj50_Action-Obj50_Index
0000FDD6                            ; ===========================================================================
0000FDD6                            
0000FDD6                            Obj50_Main:				; XREF: Obj50_Index
0000FDD6 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FDDE 317C 247B 0002             		move.w	#$247B,2(a0)
0000FDE4 117C 0004 0001             		move.b	#4,1(a0)
0000FDEA 117C 0004 0018             		move.b	#4,$18(a0)
0000FDF0 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDF6 117C 0011 0016             		move.b	#$11,$16(a0)
0000FDFC 117C 0008 0017             		move.b	#8,$17(a0)
0000FE02 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FE08 6100 DD34                  		bsr.w	ObjectFall
0000FE0C 6100 0000                  		bsr.w	ObjHitFloor
0000FE10 4A41                       		tst.w	d1
0000FE12 6A00                       		bpl.s	locret_F89E
0000FE14 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE18 317C 0000 0012             		move.w	#0,$12(a0)
0000FE1E 5428 0024                  		addq.b	#2,$24(a0)
0000FE22 0868 0000 0022             		bchg	#0,$22(a0)
0000FE28                            
0000FE28                            locret_F89E:
0000FE28 4E75                       		rts	
0000FE2A                            ; ===========================================================================
0000FE2A                            
0000FE2A                            Obj50_Action:				; XREF: Obj50_Index
0000FE2A 7000                       		moveq	#0,d0
0000FE2C 1028 0025                  		move.b	$25(a0),d0
0000FE30 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FE34 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FE38 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FE3E 6100 AE26                  		bsr.w	AnimateSprite
0000FE42 6000 FDF4                  		bra.w	MarkObjGone
0000FE46                            ; ===========================================================================
0000FE46 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FE48 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FE4A                            ; ===========================================================================
0000FE4A                            
0000FE4A                            Obj50_Move:				; XREF: Obj50_Index2
0000FE4A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE4E 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FE50 5428 0025                  		addq.b	#2,$25(a0)
0000FE54 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FE5A 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE60 0868 0000 0022             		bchg	#0,$22(a0)
0000FE66 6600                       		bne.s	locret_F8E2
0000FE68 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE6C                            
0000FE6C                            locret_F8E2:
0000FE6C 4E75                       		rts	
0000FE6E                            ; ===========================================================================
0000FE6E                            
0000FE6E                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FE6E 6100 DCFA                  		bsr.w	SpeedToPos
0000FE72 6100 0000                  		bsr.w	ObjHitFloor
0000FE76 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE7A 6D00                       		blt.s	Obj50_Pause
0000FE7C 0C41 000C                  		cmpi.w	#$C,d1
0000FE80 6C00                       		bge.s	Obj50_Pause
0000FE82 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FE86 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FE8A 6600                       		bne.s	Obj50_Pause
0000FE8C 4E75                       		rts	
0000FE8E                            ; ===========================================================================
0000FE8E                            
0000FE8E                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FE8E 5528 0025                  		subq.b	#2,$25(a0)
0000FE92 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FE98 317C 0000 0010             		move.w	#0,$10(a0)
0000FE9E 117C 0000 001C             		move.b	#0,$1C(a0)
0000FEA4 4E75                       		rts	
0000FEA6                            ; ===========================================================================
0000FEA6                            Ani_obj50:
0000FEA6                            	include "_anim\obj50.asm"
0000FEA6                            ; ---------------------------------------------------------------------------
0000FEA6                            ; Animation script - Yadrin enemy
0000FEA6                            ; ---------------------------------------------------------------------------
0000FEA6 0000                       		dc.w byte_F920-Ani_obj50
0000FEA8 0000                       		dc.w byte_F924-Ani_obj50
0000FEAA 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FEAE 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FEB8                            		even
0000FEB8                            		even
0000FEB8                            
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8                            Map_obj50:
0000FEB8                            	include "_maps\obj50.asm"
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FEBC 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FEC0 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FEC4 05                         byte_F93A:	dc.b 5
0000FEC5 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FECA FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FECF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FED4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FED9 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEDE 05                         byte_F954:	dc.b 5
0000FEDF F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FEE4 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FEE9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEEE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEF3 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEF8 05                         byte_F96E:	dc.b 5
0000FEF9 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FEFE 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF03 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF08 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF0D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF12 05                         byte_F988:	dc.b 5
0000FF13 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF18 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF1D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF22 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF27 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF2C 05                         byte_F9A2:	dc.b 5
0000FF2D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF32 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF37 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF3C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF41 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF46 05                         byte_F9BC:	dc.b 5
0000FF47 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF4C 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF51 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF56 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF5B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF60                            		even
0000FF60                            		even
0000FF60                            
0000FF60                            ; ---------------------------------------------------------------------------
0000FF60                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FF60                            ;
0000FF60                            ; variables:
0000FF60                            ; d1 = width
0000FF60                            ; d2 = height /	2 (when	jumping)
0000FF60                            ; d3 = height /	2 (when	walking)
0000FF60                            ; d4 = x-axis position
0000FF60                            ; ---------------------------------------------------------------------------
0000FF60                            
0000FF60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF60                            
0000FF60                            
0000FF60                            SolidObject:
0000FF60 4A28 0025                  		tst.b	$25(a0)
0000FF64 6700 0000                  		beq.w	loc_FAC8
0000FF68 3401                       		move.w	d1,d2
0000FF6A D442                       		add.w	d2,d2
0000FF6C 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF70 0829 0001 0022             		btst	#1,$22(a1)
0000FF76 6600                       		bne.s	loc_F9FE
0000FF78 3029 0008                  		move.w	8(a1),d0
0000FF7C 9068 0008                  		sub.w	8(a0),d0
0000FF80 D041                       		add.w	d1,d0
0000FF82 6B00                       		bmi.s	loc_F9FE
0000FF84 B042                       		cmp.w	d2,d0
0000FF86 6500                       		bcs.s	loc_FA12
0000FF88                            
0000FF88                            loc_F9FE:
0000FF88 08A9 0003 0022             		bclr	#3,$22(a1)
0000FF8E 08A8 0003 0022             		bclr	#3,$22(a0)
0000FF94 4228 0025                  		clr.b	$25(a0)
0000FF98 7800                       		moveq	#0,d4
0000FF9A 4E75                       		rts	
0000FF9C                            ; ===========================================================================
0000FF9C                            
0000FF9C                            loc_FA12:
0000FF9C 3404                       		move.w	d4,d2
0000FF9E                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0000FF9E 7800                       		moveq	#0,d4
0000FFA0 4E75                       		rts	
0000FFA2                            ; ===========================================================================
0000FFA2                            
0000FFA2                            SolidObject71:				; XREF: Obj71_Solid
0000FFA2 4A28 0025                  		tst.b	$25(a0)
0000FFA6 6700 0000                  		beq.w	loc_FAD0
0000FFAA 3401                       		move.w	d1,d2
0000FFAC D442                       		add.w	d2,d2
0000FFAE 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFB2 0829 0001 0022             		btst	#1,$22(a1)
0000FFB8 6600                       		bne.s	loc_FA44
0000FFBA 3029 0008                  		move.w	8(a1),d0
0000FFBE 9068 0008                  		sub.w	8(a0),d0
0000FFC2 D041                       		add.w	d1,d0
0000FFC4 6B00                       		bmi.s	loc_FA44
0000FFC6 B042                       		cmp.w	d2,d0
0000FFC8 6500                       		bcs.s	loc_FA58
0000FFCA                            
0000FFCA                            loc_FA44:
0000FFCA 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFD0 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFD6 4228 0025                  		clr.b	$25(a0)
0000FFDA 7800                       		moveq	#0,d4
0000FFDC 4E75                       		rts	
0000FFDE                            ; ===========================================================================
0000FFDE                            
0000FFDE                            loc_FA58:
0000FFDE 3404                       		move.w	d4,d2
0000FFE0                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0000FFE0 7800                       		moveq	#0,d4
0000FFE2 4E75                       		rts	
0000FFE4                            ; ===========================================================================
0000FFE4                            
0000FFE4                            SolidObject2F:				; XREF: Obj2F_Solid
0000FFE4 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFE8 4A28 0001                  		tst.b	1(a0)
0000FFEC 6A00 0000                  		bpl.w	loc_FB92
0000FFF0 3029 0008                  		move.w	8(a1),d0
0000FFF4 9068 0008                  		sub.w	8(a0),d0
0000FFF8 D041                       		add.w	d1,d0
0000FFFA 6B00 0000                  		bmi.w	loc_FB92
0000FFFE 3601                       		move.w	d1,d3
00010000 D643                       		add.w	d3,d3
00010002 B043                       		cmp.w	d3,d0
00010004 6200 0000                  		bhi.w	loc_FB92
00010008 3A00                       		move.w	d0,d5
0001000A 0828 0000 0001             		btst	#0,1(a0)
00010010 6700                       		beq.s	loc_FA94
00010012 4645                       		not.w	d5
00010014 DA43                       		add.w	d3,d5
00010016                            
00010016                            loc_FA94:
00010016 E24D                       		lsr.w	#1,d5
00010018 7600                       		moveq	#0,d3
0001001A 1632 5000                  		move.b	(a2,d5.w),d3
0001001E 9612                       		sub.b	(a2),d3
00010020 3A28 000C                  		move.w	$C(a0),d5
00010024 9A43                       		sub.w	d3,d5
00010026 1629 0016                  		move.b	$16(a1),d3
0001002A 4883                       		ext.w	d3
0001002C D443                       		add.w	d3,d2
0001002E 3629 000C                  		move.w	$C(a1),d3
00010032 9645                       		sub.w	d5,d3
00010034 5843                       		addq.w	#4,d3
00010036 D642                       		add.w	d2,d3
00010038 6B00 0000                  		bmi.w	loc_FB92
0001003C 3802                       		move.w	d2,d4
0001003E D844                       		add.w	d4,d4
00010040 B644                       		cmp.w	d4,d3
00010042 6400 0000                  		bcc.w	loc_FB92
00010046 6000 0000                  		bra.w	loc_FB0E
0001004A                            ; ===========================================================================
0001004A                            
0001004A                            loc_FAC8:
0001004A 4A28 0001                  		tst.b	1(a0)
0001004E 6A00 0000                  		bpl.w	loc_FB92
00010052                            
00010052                            loc_FAD0:
00010052 43F8 D000                  		lea	($FFFFD000).w,a1
00010056 3029 0008                  		move.w	8(a1),d0
0001005A 9068 0008                  		sub.w	8(a0),d0
0001005E D041                       		add.w	d1,d0
00010060 6B00 0000                  		bmi.w	loc_FB92
00010064 3601                       		move.w	d1,d3
00010066 D643                       		add.w	d3,d3
00010068 B043                       		cmp.w	d3,d0
0001006A 6200 0000                  		bhi.w	loc_FB92
0001006E 1629 0016                  		move.b	$16(a1),d3
00010072 4883                       		ext.w	d3
00010074 D443                       		add.w	d3,d2
00010076 3629 000C                  		move.w	$C(a1),d3
0001007A 9668 000C                  		sub.w	$C(a0),d3
0001007E 5843                       		addq.w	#4,d3
00010080 D642                       		add.w	d2,d3
00010082 6B00 0000                  		bmi.w	loc_FB92
00010086 3802                       		move.w	d2,d4
00010088 D844                       		add.w	d4,d4
0001008A B644                       		cmp.w	d4,d3
0001008C 6400 0000                  		bcc.w	loc_FB92
00010090                            
00010090                            loc_FB0E:
00010090 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010094 6B00 0000                  		bmi.w	loc_FB92
00010098 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001009E 6400 0000                  		bcc.w	loc_FB92
000100A2 4A78 FE08                  		tst.w	($FFFFFE08).w
000100A6 6600 0000                  		bne.w	loc_FBAC
000100AA 3A00                       		move.w	d0,d5
000100AC B240                       		cmp.w	d0,d1
000100AE 6400                       		bcc.s	loc_FB36
000100B0 D241                       		add.w	d1,d1
000100B2 9041                       		sub.w	d1,d0
000100B4 3A00                       		move.w	d0,d5
000100B6 4445                       		neg.w	d5
000100B8                            
000100B8                            loc_FB36:
000100B8 3203                       		move.w	d3,d1
000100BA B443                       		cmp.w	d3,d2
000100BC 6400                       		bcc.s	loc_FB44
000100BE 5943                       		subq.w	#4,d3
000100C0 9644                       		sub.w	d4,d3
000100C2 3203                       		move.w	d3,d1
000100C4 4441                       		neg.w	d1
000100C6                            
000100C6                            loc_FB44:
000100C6 BA41                       		cmp.w	d1,d5
000100C8 6200 0000                  		bhi.w	loc_FBB0
000100CC 0C41 0004                  		cmpi.w	#4,d1
000100D0 6300                       		bls.s	loc_FB8C
000100D2 4A40                       		tst.w	d0
000100D4 6700                       		beq.s	loc_FB70
000100D6 6B00                       		bmi.s	loc_FB5E
000100D8 4A69 0010                  		tst.w	$10(a1)
000100DC 6B00                       		bmi.s	loc_FB70
000100DE 6000                       		bra.s	loc_FB64
000100E0                            ; ===========================================================================
000100E0                            
000100E0                            loc_FB5E:
000100E0 4A69 0010                  		tst.w	$10(a1)
000100E4 6A00                       		bpl.s	loc_FB70
000100E6                            
000100E6                            loc_FB64:
000100E6 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000100EC 337C 0000 0010             		move.w	#0,$10(a1)
000100F2                            
000100F2                            loc_FB70:
000100F2 9169 0008                  		sub.w	d0,8(a1)
000100F6 0829 0001 0022             		btst	#1,$22(a1)
000100FC 6600                       		bne.s	loc_FB8C
000100FE 08E9 0005 0022             		bset	#5,$22(a1)
00010104 08E8 0005 0022             		bset	#5,$22(a0)
0001010A 7801                       		moveq	#1,d4
0001010C 4E75                       		rts	
0001010E                            ; ===========================================================================
0001010E                            
0001010E                            loc_FB8C:
0001010E 6100                       		bsr.s	loc_FBA0
00010110 7801                       		moveq	#1,d4
00010112 4E75                       		rts	
00010114                            ; ===========================================================================
00010114                            
00010114                            loc_FB92:
00010114 0828 0005 0022             		btst	#5,$22(a0)
0001011A 6700                       		beq.s	loc_FBAC
0001011C 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010122                            
00010122                            loc_FBA0:
00010122 08A8 0005 0022             		bclr	#5,$22(a0)
00010128 08A9 0005 0022             		bclr	#5,$22(a1)
0001012E                            
0001012E                            loc_FBAC:
0001012E 7800                       		moveq	#0,d4
00010130 4E75                       		rts	
00010132                            ; ===========================================================================
00010132                            
00010132                            loc_FBB0:
00010132 4A43                       		tst.w	d3
00010134 6B00                       		bmi.s	loc_FBBC
00010136 0C43 0010                  		cmpi.w	#$10,d3
0001013A 6500                       		bcs.s	loc_FBEE
0001013C 60D6                       		bra.s	loc_FB92
0001013E                            ; ===========================================================================
0001013E                            
0001013E                            loc_FBBC:
0001013E 4A69 0012                  		tst.w	$12(a1)
00010142 6700                       		beq.s	loc_FBD6
00010144 6A00                       		bpl.s	loc_FBD2
00010146 4A43                       		tst.w	d3
00010148 6A00                       		bpl.s	loc_FBD2
0001014A 9769 000C                  		sub.w	d3,$C(a1)
0001014E 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010154                            
00010154                            loc_FBD2:
00010154 78FF                       		moveq	#-1,d4
00010156 4E75                       		rts	
00010158                            ; ===========================================================================
00010158                            
00010158                            loc_FBD6:
00010158 0829 0001 0022             		btst	#1,$22(a1)
0001015E 66F4                       		bne.s	loc_FBD2
00010160 2F08                       		move.l	a0,-(sp)
00010162 2049                       		movea.l	a1,a0
00010164 4EB9 0000 0000             		jsr	KillSonic
0001016A 205F                       		movea.l	(sp)+,a0
0001016C 78FF                       		moveq	#-1,d4
0001016E 4E75                       		rts	
00010170                            ; ===========================================================================
00010170                            
00010170                            loc_FBEE:
00010170 5943                       		subq.w	#4,d3
00010172 7200                       		moveq	#0,d1
00010174 1228 0019                  		move.b	$19(a0),d1
00010178 3401                       		move.w	d1,d2
0001017A D442                       		add.w	d2,d2
0001017C D269 0008                  		add.w	8(a1),d1
00010180 9268 0008                  		sub.w	8(a0),d1
00010184 6B00                       		bmi.s	loc_FC28
00010186 B242                       		cmp.w	d2,d1
00010188 6400                       		bcc.s	loc_FC28
0001018A 4A69 0012                  		tst.w	$12(a1)
0001018E 6B00                       		bmi.s	loc_FC28
00010190 9769 000C                  		sub.w	d3,$C(a1)
00010194 5369 000C                  		subq.w	#1,$C(a1)
00010198 6100                       		bsr.s	sub_FC2C
0001019A 117C 0002 0025             		move.b	#2,$25(a0)
000101A0 08E8 0003 0022             		bset	#3,$22(a0)
000101A6 78FF                       		moveq	#-1,d4
000101A8 4E75                       		rts	
000101AA                            ; ===========================================================================
000101AA                            
000101AA                            loc_FC28:
000101AA 7800                       		moveq	#0,d4
000101AC 4E75                       		rts	
000101AE                            ; End of function SolidObject
000101AE                            
000101AE                            
000101AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101AE                            
000101AE                            
000101AE                            sub_FC2C:				; XREF: SolidObject
000101AE 0829 0003 0022             		btst	#3,$22(a1)
000101B4 6700                       		beq.s	loc_FC4E
000101B6 7000                       		moveq	#0,d0
000101B8 1029 003D                  		move.b	$3D(a1),d0
000101BC ED48                       		lsl.w	#6,d0
000101BE 0680 00FF D000             		addi.l	#$FFD000,d0
000101C4 2440                       		movea.l	d0,a2
000101C6 08AA 0003 0022             		bclr	#3,$22(a2)
000101CC 422A 0025                  		clr.b	$25(a2)
000101D0                            
000101D0                            loc_FC4E:
000101D0 3008                       		move.w	a0,d0
000101D2 0440 D000                  		subi.w	#-$3000,d0
000101D6 EC48                       		lsr.w	#6,d0
000101D8 0240 007F                  		andi.w	#$7F,d0
000101DC 1340 003D                  		move.b	d0,$3D(a1)
000101E0 137C 0000 0026             		move.b	#0,$26(a1)
000101E6 337C 0000 0012             		move.w	#0,$12(a1)
000101EC 3369 0010 0014             		move.w	$10(a1),$14(a1)
000101F2 0829 0001 0022             		btst	#1,$22(a1)
000101F8 6700                       		beq.s	loc_FC84
000101FA 2F08                       		move.l	a0,-(sp)
000101FC 2049                       		movea.l	a1,a0
000101FE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010204 205F                       		movea.l	(sp)+,a0
00010206                            
00010206                            loc_FC84:
00010206 08E9 0003 0022             		bset	#3,$22(a1)
0001020C 08E8 0003 0022             		bset	#3,$22(a0)
00010212 4E75                       		rts	
00010214                            ; End of function sub_FC2C
00010214                            
00010214                            ; ===========================================================================
00010214                            ; ---------------------------------------------------------------------------
00010214                            ; Object 51 - smashable	green block (MZ)
00010214                            ; ---------------------------------------------------------------------------
00010214                            
00010214                            Obj51:					; XREF: Obj_Index
00010214 7000                       		moveq	#0,d0
00010216 1028 0024                  		move.b	$24(a0),d0
0001021A 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001021E 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010222 6000 FA14                  		bra.w	MarkObjGone
00010226                            ; ===========================================================================
00010226 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010228 0000                       		dc.w Obj51_Solid-Obj51_Index
0001022A 0000                       		dc.w Obj51_Display-Obj51_Index
0001022C                            ; ===========================================================================
0001022C                            
0001022C                            Obj51_Main:				; XREF: Obj51_Index
0001022C 5428 0024                  		addq.b	#2,$24(a0)
00010230 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010238 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001023E 117C 0004 0001             		move.b	#4,1(a0)
00010244 117C 0010 0019             		move.b	#$10,$19(a0)
0001024A 117C 0004 0018             		move.b	#4,$18(a0)
00010250 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010256                            
00010256                            Obj51_Solid:				; XREF: Obj51_Index
00010256 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001025C 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010262 323C 001B                  		move.w	#$1B,d1
00010266 343C 0010                  		move.w	#$10,d2
0001026A 363C 0011                  		move.w	#$11,d3
0001026E 3828 0008                  		move.w	8(a0),d4
00010272 6100 FCEC                  		bsr.w	SolidObject
00010276 0828 0003 0022             		btst	#3,$22(a0)
0001027C 6600                       		bne.s	Obj51_Smash
0001027E                            
0001027E                            locret_FCFC:
0001027E 4E75                       		rts	
00010280                            ; ===========================================================================
00010280                            
00010280                            Obj51_Smash:				; XREF: Obj51_Solid
00010280 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010286 66F6                       		bne.s	locret_FCFC	; if not, branch
00010288 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001028E 08E9 0002 0022             		bset	#2,$22(a1)
00010294 137C 000E 0016             		move.b	#$E,$16(a1)
0001029A 137C 0007 0017             		move.b	#7,$17(a1)
000102A0 137C 0002 001C             		move.b	#2,$1C(a1)
000102A6 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000102AC 08E9 0001 0022             		bset	#1,$22(a1)
000102B2 08A9 0003 0022             		bclr	#3,$22(a1)
000102B8 137C 0002 0024             		move.b	#2,$24(a1)
000102BE 08A8 0003 0022             		bclr	#3,$22(a0)
000102C4 4228 0025                  		clr.b	$25(a0)
000102C8 117C 0001 001A             		move.b	#1,$1A(a0)
000102CE 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000102D4 7203                       		moveq	#3,d1		; set number of	fragments to 4
000102D6 343C 0038                  		move.w	#$38,d2
000102DA 6100 D4A2                  		bsr.w	SmashObject
000102DE 6100 DD36                  		bsr.w	SingleObjLoad
000102E2 6600                       		bne.s	Obj51_Display
000102E4 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000102E8 3368 0008 0008             		move.w	8(a0),8(a1)
000102EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000102F4 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000102F8 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000102FC 0C42 0006                  		cmpi.w	#6,d2
00010300 6500                       		bcs.s	Obj51_Bonus
00010302 7406                       		moveq	#6,d2
00010304                            
00010304                            Obj51_Bonus:
00010304 7000                       		moveq	#0,d0
00010306 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0001030A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010310 6500                       		bcs.s	loc_FD98	; if not, branch
00010312 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010316 740A                       		moveq	#10,d2
00010318                            
00010318                            loc_FD98:
00010318 4EB9 0000 0000             		jsr	AddPoints
0001031E E24A                       		lsr.w	#1,d2
00010320 1342 001A                  		move.b	d2,$1A(a1)
00010324                            
00010324                            Obj51_Display:				; XREF: Obj51_Index
00010324 6100 D844                  		bsr.w	SpeedToPos
00010328 0668 0038 0012             		addi.w	#$38,$12(a0)
0001032E 6100 D860                  		bsr.w	DisplaySprite
00010332 4A28 0001                  		tst.b	1(a0)
00010336 6A00 D894                  		bpl.w	DeleteObject
0001033A 4E75                       		rts	
0001033C                            ; ===========================================================================
0001033C FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010340 FF00 FF00                  		dc.w $FF00, $FF00
00010344 0200 FE00                  		dc.w $200, $FE00
00010348 0100 FF00                  		dc.w $100, $FF00
0001034C                            
0001034C 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010354                            ; ---------------------------------------------------------------------------
00010354                            ; Sprite mappings - smashable green block (MZ)
00010354                            ; ---------------------------------------------------------------------------
00010354                            Map_obj51:
00010354                            	include "_maps\obj51.asm"
00010354                            ; ---------------------------------------------------------------------------
00010354                            ; Sprite mappings - smashable green block (MZ)
00010354                            ; ---------------------------------------------------------------------------
00010354 0000                       		dc.w byte_FDD8-Map_obj51
00010356 0000                       		dc.w byte_FDE3-Map_obj51
00010358 02                         byte_FDD8:	dc.b 2
00010359 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001035E 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010363 04                         byte_FDE3:	dc.b 4
00010364 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010369 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001036E F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010373 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010378                            		even
00010378                            		even
00010378                            
00010378                            ; ===========================================================================
00010378                            ; ---------------------------------------------------------------------------
00010378                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010378                            ; ---------------------------------------------------------------------------
00010378                            
00010378                            Obj52:					; XREF: Obj_Index
00010378 7000                       		moveq	#0,d0
0001037A 1028 0024                  		move.b	$24(a0),d0
0001037E 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010382 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010386                            ; ===========================================================================
00010386 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010388 0000                       		dc.w Obj52_Platform-Obj52_Index
0001038A 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001038C                            
0001038C 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001038E 2001                       		dc.b $20, 1
00010390 2002                       		dc.b $20, 2
00010392 4003                       		dc.b $40, 3
00010394 3004                       		dc.b $30, 4
00010396                            ; ===========================================================================
00010396                            
00010396                            Obj52_Main:				; XREF: Obj52_Index
00010396 5428 0024                  		addq.b	#2,$24(a0)
0001039A 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000103A2 317C 42B8 0002             		move.w	#$42B8,2(a0)
000103A8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000103AE 6600                       		bne.s	loc_FE44
000103B0 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000103B8 317C 43BC 0002             		move.w	#$43BC,2(a0)
000103BE 117C 0007 0016             		move.b	#7,$16(a0)
000103C4                            
000103C4                            loc_FE44:
000103C4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000103CA 6600                       		bne.s	loc_FE60
000103CC 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000103D2 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000103D8 6700                       		beq.s	loc_FE60	; if yes, branch
000103DA 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000103E0                            
000103E0                            loc_FE60:
000103E0 117C 0004 0001             		move.b	#4,1(a0)
000103E6 7000                       		moveq	#0,d0
000103E8 1028 0028                  		move.b	$28(a0),d0
000103EC E648                       		lsr.w	#3,d0
000103EE 0240 001E                  		andi.w	#$1E,d0
000103F2 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000103F6 115A 0019                  		move.b	(a2)+,$19(a0)
000103FA 115A 001A                  		move.b	(a2)+,$1A(a0)
000103FE 117C 0004 0018             		move.b	#4,$18(a0)
00010404 3168 0008 0030             		move.w	8(a0),$30(a0)
0001040A 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010410 0228 000F 0028             		andi.b	#$F,$28(a0)
00010416                            
00010416                            Obj52_Platform:				; XREF: Obj52_Index
00010416 6100 0000                  		bsr.w	Obj52_Move
0001041A 7200                       		moveq	#0,d1
0001041C 1228 0019                  		move.b	$19(a0),d1
00010420 4EB9 0000 789E             		jsr	(PlatformObject).l
00010426 6000                       		bra.s	Obj52_ChkDel
00010428                            ; ===========================================================================
00010428                            
00010428                            Obj52_StandOn:				; XREF: Obj52_Index
00010428 7200                       		moveq	#0,d1
0001042A 1228 0019                  		move.b	$19(a0),d1
0001042E 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00010434 3F28 0008                  		move.w	8(a0),-(sp)
00010438 6100 0000                  		bsr.w	Obj52_Move
0001043C 341F                       		move.w	(sp)+,d2
0001043E 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
00010444                            
00010444                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010444 3028 0030                  		move.w	$30(a0),d0
00010448 0240 FF80                  		andi.w	#$FF80,d0
0001044C 3238 F700                  		move.w	($FFFFF700).w,d1
00010450 0441 0080                  		subi.w	#$80,d1
00010454 0241 FF80                  		andi.w	#$FF80,d1
00010458 9041                       		sub.w	d1,d0
0001045A 0C40 0280                  		cmpi.w	#$280,d0
0001045E 6200 D76C                  		bhi.w	DeleteObject
00010462 6000 D72C                  		bra.w	DisplaySprite
00010466                            ; ===========================================================================
00010466                            
00010466                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010466 7000                       		moveq	#0,d0
00010468 1028 0028                  		move.b	$28(a0),d0
0001046C 0240 000F                  		andi.w	#$F,d0
00010470 D040                       		add.w	d0,d0
00010472 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010476 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001047A                            ; ===========================================================================
0001047A 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0001047E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010482 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010486 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001048A 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0001048E 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010490                            ; ===========================================================================
00010490                            
00010490                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010490 4E75                       		rts	
00010492                            ; ===========================================================================
00010492                            
00010492                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010492 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010496 323C 0060                  		move.w	#$60,d1
0001049A 0828 0000 0022             		btst	#0,$22(a0)
000104A0 6700                       		beq.s	loc_FF26
000104A2 4440                       		neg.w	d0
000104A4 D041                       		add.w	d1,d0
000104A6                            
000104A6                            loc_FF26:
000104A6 3228 0030                  		move.w	$30(a0),d1
000104AA 9240                       		sub.w	d0,d1
000104AC 3141 0008                  		move.w	d1,8(a0)
000104B0 4E75                       		rts	
000104B2                            ; ===========================================================================
000104B2                            
000104B2                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000104B2 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000104B8 6600                       		bne.s	Obj52_02_Wait
000104BA 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000104BE                            
000104BE                            Obj52_02_Wait:
000104BE 4E75                       		rts	
000104C0                            ; ===========================================================================
000104C0                            
000104C0                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000104C0 7600                       		moveq	#0,d3
000104C2 1628 0019                  		move.b	$19(a0),d3
000104C6 6100 0000                  		bsr.w	ObjHitWallRight
000104CA 4A41                       		tst.w	d1		; has the platform hit a wall?
000104CC 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000104CE 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104D2 3168 0008 0030             		move.w	8(a0),$30(a0)
000104D8 4E75                       		rts	
000104DA                            ; ===========================================================================
000104DA                            
000104DA                            Obj52_03_End:
000104DA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000104DE 4E75                       		rts	
000104E0                            ; ===========================================================================
000104E0                            
000104E0                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000104E0 7600                       		moveq	#0,d3
000104E2 1628 0019                  		move.b	$19(a0),d3
000104E6 6100 0000                  		bsr.w	ObjHitWallRight
000104EA 4A41                       		tst.w	d1		; has the platform hit a wall?
000104EC 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000104EE 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104F2 3168 0008 0030             		move.w	8(a0),$30(a0)
000104F8 4E75                       		rts	
000104FA                            ; ===========================================================================
000104FA                            
000104FA                            Obj52_05_End:
000104FA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000104FE 4E75                       		rts	
00010500                            ; ===========================================================================
00010500                            
00010500                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010500 6100 D668                  		bsr.w	SpeedToPos
00010504 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0001050A 6100 0000                  		bsr.w	ObjHitFloor
0001050E 4A41                       		tst.w	d1		; has platform hit the floor?
00010510 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010514 D368 000C                  		add.w	d1,$C(a0)
00010518 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001051C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010520                            
00010520                            locret_FFA0:
00010520 4E75                       		rts	
00010522                            ; ===========================================================================
00010522                            
00010522                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010522 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010526 6700                       		beq.s	Obj52_07_ChkDel
00010528 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001052C                            
0001052C                            Obj52_07_ChkDel:
0001052C 588F                       		addq.l	#4,sp
0001052E 3028 0030                  		move.w	$30(a0),d0
00010532 0240 FF80                  		andi.w	#$FF80,d0
00010536 3238 F700                  		move.w	($FFFFF700).w,d1
0001053A 0441 0080                  		subi.w	#$80,d1
0001053E 0241 FF80                  		andi.w	#$FF80,d1
00010542 9041                       		sub.w	d1,d0
00010544 0C40 0280                  		cmpi.w	#$280,d0
00010548 6200 D682                  		bhi.w	DeleteObject
0001054C 4E75                       		rts	
0001054E                            ; ===========================================================================
0001054E                            
0001054E                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001054E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010552 323C 0080                  		move.w	#$80,d1
00010556 0828 0000 0022             		btst	#0,$22(a0)
0001055C 6700                       		beq.s	loc_FFE2
0001055E 4440                       		neg.w	d0
00010560 D041                       		add.w	d1,d0
00010562                            
00010562                            loc_FFE2:
00010562 3228 0032                  		move.w	$32(a0),d1
00010566 9240                       		sub.w	d0,d1
00010568 3141 000C                  		move.w	d1,$C(a0)
0001056C 4E75                       		rts	
0001056E                            ; ===========================================================================
0001056E                            
0001056E                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001056E 7600                       		moveq	#0,d3
00010570 1628 0019                  		move.b	$19(a0),d3
00010574 D643                       		add.w	d3,d3
00010576 7208                       		moveq	#8,d1
00010578 0828 0000 0022             		btst	#0,$22(a0)
0001057E 6700                       		beq.s	loc_10004
00010580 4441                       		neg.w	d1
00010582 4443                       		neg.w	d3
00010584                            
00010584                            loc_10004:
00010584 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010588 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001058A 3028 0008                  		move.w	8(a0),d0
0001058E 9068 0030                  		sub.w	$30(a0),d0
00010592 B043                       		cmp.w	d3,d0
00010594 6700                       		beq.s	Obj52_0A_Wait
00010596 D368 0008                  		add.w	d1,8(a0)	; move platform
0001059A 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000105A0 4E75                       		rts	
000105A2                            ; ===========================================================================
000105A2                            
000105A2                            Obj52_0A_Wait:
000105A2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000105A6 6600                       		bne.s	locret_1002E	; if time remains, branch
000105A8 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000105AE                            
000105AE                            locret_1002E:
000105AE 4E75                       		rts	
000105B0                            ; ===========================================================================
000105B0                            
000105B0                            Obj52_0A_Back:
000105B0 3028 0008                  		move.w	8(a0),d0
000105B4 9068 0030                  		sub.w	$30(a0),d0
000105B8 6700                       		beq.s	Obj52_0A_Reset
000105BA 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000105BE 4E75                       		rts	
000105C0                            ; ===========================================================================
000105C0                            
000105C0                            Obj52_0A_Reset:
000105C0 4268 0036                  		clr.w	$36(a0)
000105C4 5328 0028                  		subq.b	#1,$28(a0)
000105C8 4E75                       		rts	
000105CA                            ; ===========================================================================
000105CA                            ; ---------------------------------------------------------------------------
000105CA                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105CA                            ; ---------------------------------------------------------------------------
000105CA                            Map_obj52:
000105CA                            	include "_maps\obj52mz.asm"
000105CA                            ; ---------------------------------------------------------------------------
000105CA                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105CA                            ; ---------------------------------------------------------------------------
000105CA 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000105CE 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000105D2 0000                       		dc.w byte_1008F-Map_obj52
000105D4 01                         byte_10054:	dc.b 1
000105D5 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105DA 02                         byte_1005A:	dc.b 2
000105DB F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000105E0 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000105E5 04                         byte_10065:	dc.b 4
000105E6 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000105EB 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000105F0 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000105F5 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000105FA 04                         byte_1007A:	dc.b 4
000105FB F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010600 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010605 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001060A F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001060F 03                         byte_1008F:	dc.b 3
00010610 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010615 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001061A F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010620 00                         		even
00010620 00                         		even
00010620                            
00010620                            ; ---------------------------------------------------------------------------
00010620                            ; Sprite mappings - moving block (LZ)
00010620                            ; ---------------------------------------------------------------------------
00010620                            Map_obj52a:
00010620                            	include "_maps\obj52lz.asm"
00010620                            ; ---------------------------------------------------------------------------
00010620                            ; Sprite mappings - moving block (LZ)
00010620                            ; ---------------------------------------------------------------------------
00010620 0000                       		dc.w byte_100A2-Map_obj52a
00010622 01                         byte_100A2:	dc.b 1
00010623 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010628                            		even
00010628                            		even
00010628                            
00010628                            ; ===========================================================================
00010628                            ; ---------------------------------------------------------------------------
00010628                            ; Object 55 - Basaran enemy (MZ)
00010628                            ; ---------------------------------------------------------------------------
00010628                            
00010628                            Obj55:					; XREF: Obj_Index
00010628 7000                       		moveq	#0,d0
0001062A 1028 0024                  		move.b	$24(a0),d0
0001062E 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010632 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010636                            ; ===========================================================================
00010636 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010638 0000                       		dc.w Obj55_Action-Obj55_Index
0001063A                            ; ===========================================================================
0001063A                            
0001063A                            Obj55_Main:				; XREF: Obj55_Index
0001063A 5428 0024                  		addq.b	#2,$24(a0)
0001063E 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010646 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001064C 117C 0004 0001             		move.b	#4,1(a0)
00010652 117C 000C 0016             		move.b	#$C,$16(a0)
00010658 117C 0002 0018             		move.b	#2,$18(a0)
0001065E 117C 000B 0020             		move.b	#$B,$20(a0)
00010664 117C 0010 0019             		move.b	#$10,$19(a0)
0001066A                            
0001066A                            Obj55_Action:				; XREF: Obj55_Index
0001066A 7000                       		moveq	#0,d0
0001066C 1028 0025                  		move.b	$25(a0),d0
00010670 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010674 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010678 43F9 0000 0000             		lea	(Ani_obj55).l,a1
0001067E 6100 A5E6                  		bsr.w	AnimateSprite
00010682 6000 F5B4                  		bra.w	MarkObjGone
00010686                            ; ===========================================================================
00010686 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010688 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001068A 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0001068C 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
0001068E                            ; ===========================================================================
0001068E                            
0001068E                            Obj55_ChkDrop:				; XREF: Obj55_Index2
0001068E 343C 0080                  		move.w	#$80,d2
00010692 6100 0000                  		bsr.w	Obj55_ChkSonic
00010696 6400                       		bcc.s	Obj55_NoDrop
00010698 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001069C 3140 0036                  		move.w	d0,$36(a0)
000106A0 9068 000C                  		sub.w	$C(a0),d0
000106A4 6500                       		bcs.s	Obj55_NoDrop
000106A6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000106AA 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000106AC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000106B0 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000106B2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106B6 D007                       		add.b	d7,d0
000106B8 0200 0007                  		andi.b	#7,d0
000106BC 6600                       		bne.s	Obj55_NoDrop
000106BE 117C 0001 001C             		move.b	#1,$1C(a0)
000106C4 5428 0025                  		addq.b	#2,$25(a0)
000106C8                            
000106C8                            Obj55_NoDrop:
000106C8 4E75                       		rts	
000106CA                            ; ===========================================================================
000106CA                            
000106CA                            Obj55_DropFly:				; XREF: Obj55_Index2
000106CA 6100 D49E                  		bsr.w	SpeedToPos
000106CE 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000106D4 343C 0080                  		move.w	#$80,d2
000106D8 6100 0000                  		bsr.w	Obj55_ChkSonic
000106DC 3028 0036                  		move.w	$36(a0),d0
000106E0 9068 000C                  		sub.w	$C(a0),d0
000106E4 6500                       		bcs.s	Obj55_ChkDel
000106E6 0C40 0010                  		cmpi.w	#$10,d0
000106EA 6400                       		bcc.s	locret_10180
000106EC 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000106F0 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000106F6 117C 0002 001C             		move.b	#2,$1C(a0)
000106FC 5428 0025                  		addq.b	#2,$25(a0)
00010700                            
00010700                            locret_10180:
00010700 4E75                       		rts	
00010702                            ; ===========================================================================
00010702                            
00010702                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010702 4A28 0001                  		tst.b	1(a0)
00010706 6A00 D4C4                  		bpl.w	DeleteObject
0001070A 4E75                       		rts	
0001070C                            ; ===========================================================================
0001070C                            
0001070C                            Obj55_PlaySnd:				; XREF: Obj55_Index2
0001070C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010710 0200 000F                  		andi.b	#$F,d0
00010714 6600                       		bne.s	loc_101A0
00010716 303C 00C0                  		move.w	#$C0,d0
0001071A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
00010720                            
00010720                            loc_101A0:
00010720 6100 D448                  		bsr.w	SpeedToPos
00010724 3038 D008                  		move.w	($FFFFD008).w,d0
00010728 9068 0008                  		sub.w	8(a0),d0
0001072C 6400                       		bcc.s	loc_101B0
0001072E 4440                       		neg.w	d0
00010730                            
00010730                            loc_101B0:
00010730 0C40 0080                  		cmpi.w	#$80,d0
00010734 6500                       		bcs.s	locret_101C6
00010736 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001073A D007                       		add.b	d7,d0
0001073C 0200 0007                  		andi.b	#7,d0
00010740 6600                       		bne.s	locret_101C6
00010742 5428 0025                  		addq.b	#2,$25(a0)
00010746                            
00010746                            locret_101C6:
00010746 4E75                       		rts	
00010748                            ; ===========================================================================
00010748                            
00010748                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010748 6100 D420                  		bsr.w	SpeedToPos
0001074C 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010752 6100 0000                  		bsr.w	ObjHitCeiling
00010756 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010758 6A00                       		bpl.s	locret_101F4	; if not, branch
0001075A 9368 000C                  		sub.w	d1,$C(a0)
0001075E 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010764 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010768 4268 0012                  		clr.w	$12(a0)
0001076C 4228 001C                  		clr.b	$1C(a0)
00010770 4228 0025                  		clr.b	$25(a0)
00010774                            
00010774                            locret_101F4:
00010774 4E75                       		rts	
00010776                            ; ===========================================================================
00010776                            
00010776                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010776 323C 0100                  		move.w	#$100,d1
0001077A 08E8 0000 0022             		bset	#0,$22(a0)
00010780 3038 D008                  		move.w	($FFFFD008).w,d0
00010784 9068 0008                  		sub.w	8(a0),d0
00010788 6400                       		bcc.s	loc_10214
0001078A 4440                       		neg.w	d0
0001078C 4441                       		neg.w	d1
0001078E 08A8 0000 0022             		bclr	#0,$22(a0)
00010794                            
00010794                            loc_10214:
00010794 B042                       		cmp.w	d2,d0
00010796 4E75                       		rts	
00010798                            ; ===========================================================================
00010798 6100 D3D0                  		bsr.w	SpeedToPos
0001079C 6100 D3F2                  		bsr.w	DisplaySprite
000107A0 4A28 0001                  		tst.b	1(a0)
000107A4 6A00 D426                  		bpl.w	DeleteObject
000107A8 4E75                       		rts	
000107AA                            ; ===========================================================================
000107AA                            Ani_obj55:
000107AA                            	include "_anim\obj55.asm"
000107AA                            ; ---------------------------------------------------------------------------
000107AA                            ; Animation script - Basaran enemy
000107AA                            ; ---------------------------------------------------------------------------
000107AA 0000                       		dc.w byte_10230-Ani_obj55
000107AC 0000                       		dc.w byte_10234-Ani_obj55
000107AE 0000                       		dc.w byte_10238-Ani_obj55
000107B0 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000107B4 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000107B8 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000107BE                            		even
000107BE                            		even
000107BE                            
000107BE                            ; ---------------------------------------------------------------------------
000107BE                            ; Sprite mappings - Basaran enemy (MZ)
000107BE                            ; ---------------------------------------------------------------------------
000107BE                            Map_obj55:
000107BE                            	include "_maps\obj55.asm"
000107BE                            ; ---------------------------------------------------------------------------
000107BE                            ; Sprite mappings - Basaran enemy (MZ)
000107BE                            ; ---------------------------------------------------------------------------
000107BE 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000107C2 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000107C6 01                         byte_10246:	dc.b 1
000107C7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000107CC 03                         byte_1024C:	dc.b 3
000107CD F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000107D2 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000107D7 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000107DC 04                         byte_1025C:	dc.b 4
000107DD F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000107E2 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000107E7 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000107EC 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000107F1 04                         byte_10271:	dc.b 4
000107F2 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000107F7 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000107FC 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010801 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010806                            		even
00010806                            		even
00010806                            
00010806                            ; ===========================================================================
00010806                            ; ---------------------------------------------------------------------------
00010806                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010806                            ; ---------------------------------------------------------------------------
00010806                            
00010806                            Obj56:					; XREF: Obj_Index
00010806 7000                       		moveq	#0,d0
00010808 1028 0024                  		move.b	$24(a0),d0
0001080C 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010810 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010814                            ; ===========================================================================
00010814 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010816 0000                       		dc.w Obj56_Action-Obj56_Index
00010818                            
00010818 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0001081A 2020                       		dc.b  $20, $20
0001081C 1020                       		dc.b  $10, $20
0001081E 201A                       		dc.b  $20, $1A
00010820 1027                       		dc.b  $10, $27
00010822 1010                       		dc.b  $10, $10
00010824 0820                       		dc.b	8, $20
00010826 4010                       		dc.b  $40, $10
00010828                            ; ===========================================================================
00010828                            
00010828                            Obj56_Main:				; XREF: Obj56_Index
00010828 5428 0024                  		addq.b	#2,$24(a0)
0001082C 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010834 317C 4000 0002             		move.w	#$4000,2(a0)
0001083A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010840 6600                       		bne.s	loc_102C8
00010842 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010848                            
00010848                            loc_102C8:
00010848 117C 0004 0001             		move.b	#4,1(a0)
0001084E 117C 0003 0018             		move.b	#3,$18(a0)
00010854 7000                       		moveq	#0,d0
00010856 1028 0028                  		move.b	$28(a0),d0
0001085A E648                       		lsr.w	#3,d0
0001085C 0240 000E                  		andi.w	#$E,d0
00010860 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010864 115A 0019                  		move.b	(a2)+,$19(a0)
00010868 1152 0016                  		move.b	(a2),$16(a0)
0001086C E248                       		lsr.w	#1,d0
0001086E 1140 001A                  		move.b	d0,$1A(a0)
00010872 3168 0008 0034             		move.w	8(a0),$34(a0)
00010878 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001087E 7000                       		moveq	#0,d0
00010880 1012                       		move.b	(a2),d0
00010882 D040                       		add.w	d0,d0
00010884 3140 003A                  		move.w	d0,$3A(a0)
00010888 7000                       		moveq	#0,d0
0001088A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010890 6700                       		beq.s	loc_10332
00010892 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010896 0240 000F                  		andi.w	#$F,d0
0001089A 5140                       		subq.w	#8,d0
0001089C 6500                       		bcs.s	loc_10332
0001089E E548                       		lsl.w	#2,d0
000108A0 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000108A4 45F2 0000                  		lea	(a2,d0.w),a2
000108A8 4A52                       		tst.w	(a2)
000108AA 6A00                       		bpl.s	loc_10332
000108AC 0868 0000 0022             		bchg	#0,$22(a0)
000108B2                            
000108B2                            loc_10332:
000108B2 1028 0028                  		move.b	$28(a0),d0
000108B6 6A00                       		bpl.s	Obj56_Action
000108B8 0200 000F                  		andi.b	#$F,d0
000108BC 1140 003C                  		move.b	d0,$3C(a0)
000108C0 117C 0005 0028             		move.b	#5,$28(a0)
000108C6 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000108CC 6600                       		bne.s	Obj56_ChkGone
000108CE 117C 000C 0028             		move.b	#$C,$28(a0)
000108D4 317C 0080 003A             		move.w	#$80,$3A(a0)
000108DA                            
000108DA                            Obj56_ChkGone:
000108DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000108DE 7000                       		moveq	#0,d0
000108E0 1028 0023                  		move.b	$23(a0),d0
000108E4 6700                       		beq.s	Obj56_Action
000108E6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000108EC 0832 0000 0002             		btst	#0,2(a2,d0.w)
000108F2 6700                       		beq.s	Obj56_Action
000108F4 5228 0028                  		addq.b	#1,$28(a0)
000108F8 4268 003A                  		clr.w	$3A(a0)
000108FC                            
000108FC                            Obj56_Action:				; XREF: Obj56_Index
000108FC 3F28 0008                  		move.w	8(a0),-(sp)
00010900 7000                       		moveq	#0,d0
00010902 1028 0028                  		move.b	$28(a0),d0	; get object type
00010906 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001090A D040                       		add.w	d0,d0
0001090C 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010910 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010914 381F                       		move.w	(sp)+,d4
00010916 4A28 0001                  		tst.b	1(a0)
0001091A 6A00                       		bpl.s	Obj56_ChkDel
0001091C 7200                       		moveq	#0,d1
0001091E 1228 0019                  		move.b	$19(a0),d1
00010922 0641 000B                  		addi.w	#$B,d1
00010926 7400                       		moveq	#0,d2
00010928 1428 0016                  		move.b	$16(a0),d2
0001092C 3602                       		move.w	d2,d3
0001092E 5243                       		addq.w	#1,d3
00010930 6100 F62E                  		bsr.w	SolidObject
00010934                            
00010934                            Obj56_ChkDel:
00010934 3028 0034                  		move.w	$34(a0),d0
00010938 0240 FF80                  		andi.w	#$FF80,d0
0001093C 3238 F700                  		move.w	($FFFFF700).w,d1
00010940 0441 0080                  		subi.w	#$80,d1
00010944 0241 FF80                  		andi.w	#$FF80,d1
00010948 9041                       		sub.w	d1,d0
0001094A 0C40 0280                  		cmpi.w	#$280,d0
0001094E 6200 D27C                  		bhi.w	DeleteObject
00010952 6000 D23C                  		bra.w	DisplaySprite
00010956                            ; ===========================================================================
00010956 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001095A 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001095E 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010962 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010966 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001096A 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0001096E 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010972                            ; ===========================================================================
00010972                            
00010972                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010972 4E75                       		rts	
00010974                            ; ===========================================================================
00010974                            
00010974                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010974 323C 0040                  		move.w	#$40,d1
00010978 7000                       		moveq	#0,d0
0001097A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001097E 6000                       		bra.s	Obj56_Move_LR
00010980                            ; ===========================================================================
00010980                            
00010980                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010980 323C 0080                  		move.w	#$80,d1
00010984 7000                       		moveq	#0,d0
00010986 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001098A                            
0001098A                            Obj56_Move_LR:
0001098A 0828 0000 0022             		btst	#0,$22(a0)
00010990 6700                       		beq.s	loc_10416
00010992 4440                       		neg.w	d0
00010994 D041                       		add.w	d1,d0
00010996                            
00010996                            loc_10416:
00010996 3228 0034                  		move.w	$34(a0),d1
0001099A 9240                       		sub.w	d0,d1
0001099C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000109A0 4E75                       		rts	
000109A2                            ; ===========================================================================
000109A2                            
000109A2                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000109A2 323C 0040                  		move.w	#$40,d1
000109A6 7000                       		moveq	#0,d0
000109A8 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109AC 6000                       		bra.s	Obj56_Move_UD
000109AE                            ; ===========================================================================
000109AE                            
000109AE                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000109AE 323C 0080                  		move.w	#$80,d1
000109B2 7000                       		moveq	#0,d0
000109B4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109B8                            
000109B8                            Obj56_Move_UD:
000109B8 0828 0000 0022             		btst	#0,$22(a0)
000109BE 6700                       		beq.s	loc_10444
000109C0 4440                       		neg.w	d0
000109C2 D041                       		add.w	d1,d0
000109C4                            
000109C4                            loc_10444:
000109C4 3228 0030                  		move.w	$30(a0),d1
000109C8 9240                       		sub.w	d0,d1
000109CA 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109CE 4E75                       		rts	
000109D0                            ; ===========================================================================
000109D0                            
000109D0                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000109D0 4A28 0038                  		tst.b	$38(a0)
000109D4 6600                       		bne.s	loc_104A4
000109D6 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109DC 6600                       		bne.s	loc_1047A	; if not, branch
000109DE 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000109E4 6600                       		bne.s	loc_1047A
000109E6 4238 F7C9                  		clr.b	($FFFFF7C9).w
000109EA 3038 D008                  		move.w	($FFFFD008).w,d0
000109EE B068 0008                  		cmp.w	8(a0),d0
000109F2 6400                       		bcc.s	loc_1047A
000109F4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000109FA                            
000109FA                            loc_1047A:
000109FA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000109FE 7000                       		moveq	#0,d0
00010A00 1028 003C                  		move.b	$3C(a0),d0
00010A04 0832 0000 0000             		btst	#0,(a2,d0.w)
00010A0A 6700                       		beq.s	loc_104AE
00010A0C 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A12 6600                       		bne.s	loc_1049E	; if not, branch
00010A14 0C00 0003                  		cmpi.b	#3,d0
00010A18 6600                       		bne.s	loc_1049E
00010A1A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A1E                            
00010A1E                            loc_1049E:
00010A1E 117C 0001 0038             		move.b	#1,$38(a0)
00010A24                            
00010A24                            loc_104A4:
00010A24 4A68 003A                  		tst.w	$3A(a0)
00010A28 6700                       		beq.s	loc_104C8
00010A2A 5568 003A                  		subq.w	#2,$3A(a0)
00010A2E                            
00010A2E                            loc_104AE:
00010A2E 3028 003A                  		move.w	$3A(a0),d0
00010A32 0828 0000 0022             		btst	#0,$22(a0)
00010A38 6700                       		beq.s	loc_104BC
00010A3A 4440                       		neg.w	d0
00010A3C                            
00010A3C                            loc_104BC:
00010A3C 3228 0030                  		move.w	$30(a0),d1
00010A40 D240                       		add.w	d0,d1
00010A42 3141 000C                  		move.w	d1,$C(a0)
00010A46 4E75                       		rts	
00010A48                            ; ===========================================================================
00010A48                            
00010A48                            loc_104C8:
00010A48 5228 0028                  		addq.b	#1,$28(a0)
00010A4C 4228 0038                  		clr.b	$38(a0)
00010A50 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A54 7000                       		moveq	#0,d0
00010A56 1028 0023                  		move.b	$23(a0),d0
00010A5A 67D2                       		beq.s	loc_104AE
00010A5C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A62 60CA                       		bra.s	loc_104AE
00010A64                            ; ===========================================================================
00010A64                            
00010A64                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010A64 4A28 0038                  		tst.b	$38(a0)
00010A68 6600                       		bne.s	loc_10500
00010A6A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A6E 7000                       		moveq	#0,d0
00010A70 1028 003C                  		move.b	$3C(a0),d0
00010A74 4A32 0000                  		tst.b	(a2,d0.w)
00010A78 6A00                       		bpl.s	loc_10512
00010A7A 117C 0001 0038             		move.b	#1,$38(a0)
00010A80                            
00010A80                            loc_10500:
00010A80 7000                       		moveq	#0,d0
00010A82 1028 0016                  		move.b	$16(a0),d0
00010A86 D040                       		add.w	d0,d0
00010A88 B068 003A                  		cmp.w	$3A(a0),d0
00010A8C 6700                       		beq.s	loc_1052C
00010A8E 5468 003A                  		addq.w	#2,$3A(a0)
00010A92                            
00010A92                            loc_10512:
00010A92 3028 003A                  		move.w	$3A(a0),d0
00010A96 0828 0000 0022             		btst	#0,$22(a0)
00010A9C 6700                       		beq.s	loc_10520
00010A9E 4440                       		neg.w	d0
00010AA0                            
00010AA0                            loc_10520:
00010AA0 3228 0030                  		move.w	$30(a0),d1
00010AA4 D240                       		add.w	d0,d1
00010AA6 3141 000C                  		move.w	d1,$C(a0)
00010AAA 4E75                       		rts	
00010AAC                            ; ===========================================================================
00010AAC                            
00010AAC                            loc_1052C:
00010AAC 5328 0028                  		subq.b	#1,$28(a0)
00010AB0 4228 0038                  		clr.b	$38(a0)
00010AB4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AB8 7000                       		moveq	#0,d0
00010ABA 1028 0023                  		move.b	$23(a0),d0
00010ABE 67D2                       		beq.s	loc_10512
00010AC0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010AC6 60CA                       		bra.s	loc_10512
00010AC8                            ; ===========================================================================
00010AC8                            
00010AC8                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010AC8 4A28 0038                  		tst.b	$38(a0)
00010ACC 6600                       		bne.s	loc_1055E
00010ACE 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010AD2 6700                       		beq.s	locret_10578
00010AD4 117C 0001 0038             		move.b	#1,$38(a0)
00010ADA 4268 003A                  		clr.w	$3A(a0)
00010ADE                            
00010ADE                            loc_1055E:
00010ADE 5268 0008                  		addq.w	#1,8(a0)
00010AE2 3168 0008 0034             		move.w	8(a0),$34(a0)
00010AE8 5268 003A                  		addq.w	#1,$3A(a0)
00010AEC 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010AF2 6600                       		bne.s	locret_10578
00010AF4 4228 0028                  		clr.b	$28(a0)
00010AF8                            
00010AF8                            locret_10578:
00010AF8 4E75                       		rts	
00010AFA                            ; ===========================================================================
00010AFA                            
00010AFA                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010AFA 4A28 0038                  		tst.b	$38(a0)
00010AFE 6600                       		bne.s	loc_10598
00010B00 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B04 7000                       		moveq	#0,d0
00010B06 1028 003C                  		move.b	$3C(a0),d0
00010B0A 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B10 6700                       		beq.s	loc_105A2
00010B12 117C 0001 0038             		move.b	#1,$38(a0)
00010B18                            
00010B18                            loc_10598:
00010B18 4A68 003A                  		tst.w	$3A(a0)
00010B1C 6700                       		beq.s	loc_105C0
00010B1E 5568 003A                  		subq.w	#2,$3A(a0)
00010B22                            
00010B22                            loc_105A2:
00010B22 3028 003A                  		move.w	$3A(a0),d0
00010B26 0828 0000 0022             		btst	#0,$22(a0)
00010B2C 6700                       		beq.s	loc_105B4
00010B2E 4440                       		neg.w	d0
00010B30 0640 0080                  		addi.w	#$80,d0
00010B34                            
00010B34                            loc_105B4:
00010B34 3228 0034                  		move.w	$34(a0),d1
00010B38 D240                       		add.w	d0,d1
00010B3A 3141 0008                  		move.w	d1,8(a0)
00010B3E 4E75                       		rts	
00010B40                            ; ===========================================================================
00010B40                            
00010B40                            loc_105C0:
00010B40 5228 0028                  		addq.b	#1,$28(a0)
00010B44 4228 0038                  		clr.b	$38(a0)
00010B48 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B4C 7000                       		moveq	#0,d0
00010B4E 1028 0023                  		move.b	$23(a0),d0
00010B52 67CE                       		beq.s	loc_105A2
00010B54 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B5A 60C6                       		bra.s	loc_105A2
00010B5C                            ; ===========================================================================
00010B5C                            
00010B5C                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010B5C 4A28 0038                  		tst.b	$38(a0)
00010B60 6600                       		bne.s	loc_105F8
00010B62 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B66 7000                       		moveq	#0,d0
00010B68 1028 003C                  		move.b	$3C(a0),d0
00010B6C 4A32 0000                  		tst.b	(a2,d0.w)
00010B70 6A00                       		bpl.s	loc_10606
00010B72 117C 0001 0038             		move.b	#1,$38(a0)
00010B78                            
00010B78                            loc_105F8:
00010B78 303C 0080                  		move.w	#$80,d0
00010B7C B068 003A                  		cmp.w	$3A(a0),d0
00010B80 6700                       		beq.s	loc_10624
00010B82 5468 003A                  		addq.w	#2,$3A(a0)
00010B86                            
00010B86                            loc_10606:
00010B86 3028 003A                  		move.w	$3A(a0),d0
00010B8A 0828 0000 0022             		btst	#0,$22(a0)
00010B90 6700                       		beq.s	loc_10618
00010B92 4440                       		neg.w	d0
00010B94 0640 0080                  		addi.w	#$80,d0
00010B98                            
00010B98                            loc_10618:
00010B98 3228 0034                  		move.w	$34(a0),d1
00010B9C D240                       		add.w	d0,d1
00010B9E 3141 0008                  		move.w	d1,8(a0)
00010BA2 4E75                       		rts	
00010BA4                            ; ===========================================================================
00010BA4                            
00010BA4                            loc_10624:
00010BA4 5328 0028                  		subq.b	#1,$28(a0)
00010BA8 4228 0038                  		clr.b	$38(a0)
00010BAC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BB0 7000                       		moveq	#0,d0
00010BB2 1028 0023                  		move.b	$23(a0),d0
00010BB6 67CE                       		beq.s	loc_10606
00010BB8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010BBE 60C6                       		bra.s	loc_10606
00010BC0                            ; ===========================================================================
00010BC0                            
00010BC0                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010BC0 323C 0010                  		move.w	#$10,d1
00010BC4 7000                       		moveq	#0,d0
00010BC6 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010BCA E248                       		lsr.w	#1,d0
00010BCC 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010BD0 6000                       		bra.s	Obj56_Move_Sqr
00010BD2                            ; ===========================================================================
00010BD2                            
00010BD2                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010BD2 323C 0030                  		move.w	#$30,d1
00010BD6 7000                       		moveq	#0,d0
00010BD8 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010BDC 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010BE0 6000                       		bra.s	Obj56_Move_Sqr
00010BE2                            ; ===========================================================================
00010BE2                            
00010BE2                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010BE2 323C 0050                  		move.w	#$50,d1
00010BE6 7000                       		moveq	#0,d0
00010BE8 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010BEC 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010BF0 6000                       		bra.s	Obj56_Move_Sqr
00010BF2                            ; ===========================================================================
00010BF2                            
00010BF2                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010BF2 323C 0070                  		move.w	#$70,d1
00010BF6 7000                       		moveq	#0,d0
00010BF8 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010BFC 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010C00                            
00010C00                            Obj56_Move_Sqr:
00010C00 4A43                       		tst.w	d3
00010C02 6600                       		bne.s	loc_1068E
00010C04 5228 0022                  		addq.b	#1,$22(a0)
00010C08 0228 0003 0022             		andi.b	#3,$22(a0)
00010C0E                            
00010C0E                            loc_1068E:
00010C0E 1428 0022                  		move.b	$22(a0),d2
00010C12 0202 0003                  		andi.b	#3,d2
00010C16 6600                       		bne.s	loc_106AE
00010C18 9041                       		sub.w	d1,d0
00010C1A D068 0034                  		add.w	$34(a0),d0
00010C1E 3140 0008                  		move.w	d0,8(a0)
00010C22 4441                       		neg.w	d1
00010C24 D268 0030                  		add.w	$30(a0),d1
00010C28 3141 000C                  		move.w	d1,$C(a0)
00010C2C 4E75                       		rts	
00010C2E                            ; ===========================================================================
00010C2E                            
00010C2E                            loc_106AE:
00010C2E 5302                       		subq.b	#1,d2
00010C30 6600                       		bne.s	loc_106CC
00010C32 5341                       		subq.w	#1,d1
00010C34 9041                       		sub.w	d1,d0
00010C36 4440                       		neg.w	d0
00010C38 D068 0030                  		add.w	$30(a0),d0
00010C3C 3140 000C                  		move.w	d0,$C(a0)
00010C40 5241                       		addq.w	#1,d1
00010C42 D268 0034                  		add.w	$34(a0),d1
00010C46 3141 0008                  		move.w	d1,8(a0)
00010C4A 4E75                       		rts	
00010C4C                            ; ===========================================================================
00010C4C                            
00010C4C                            loc_106CC:
00010C4C 5302                       		subq.b	#1,d2
00010C4E 6600                       		bne.s	loc_106EA
00010C50 5341                       		subq.w	#1,d1
00010C52 9041                       		sub.w	d1,d0
00010C54 4440                       		neg.w	d0
00010C56 D068 0034                  		add.w	$34(a0),d0
00010C5A 3140 0008                  		move.w	d0,8(a0)
00010C5E 5241                       		addq.w	#1,d1
00010C60 D268 0030                  		add.w	$30(a0),d1
00010C64 3141 000C                  		move.w	d1,$C(a0)
00010C68 4E75                       		rts	
00010C6A                            ; ===========================================================================
00010C6A                            
00010C6A                            loc_106EA:
00010C6A 9041                       		sub.w	d1,d0
00010C6C D068 0030                  		add.w	$30(a0),d0
00010C70 3140 000C                  		move.w	d0,$C(a0)
00010C74 4441                       		neg.w	d1
00010C76 D268 0034                  		add.w	$34(a0),d1
00010C7A 3141 0008                  		move.w	d1,8(a0)
00010C7E 4E75                       		rts	
00010C80                            ; ===========================================================================
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            Map_obj56:
00010C80                            	include "_maps\obj56.asm"
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C80                            ; ---------------------------------------------------------------------------
00010C80 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010C84 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010C88 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010C8C 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010C90 01                         byte_10710:	dc.b 1
00010C91 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010C96 04                         byte_10716:	dc.b 4
00010C97 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010C9C E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010CA1 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010CA6 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010CAB 02                         byte_1072B:	dc.b 2
00010CAC E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010CB1 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010CB6 04                         byte_10736:	dc.b 4
00010CB7 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010CBC E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010CC1 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010CC6 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010CCB 03                         byte_1074B:	dc.b 3
00010CCC D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010CD1 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010CD6 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010CDB 01                         byte_1075B:	dc.b 1
00010CDC F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010CE1 02                         byte_10761:	dc.b 2
00010CE2 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010CE7 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010CEC 04                         byte_1076C:	dc.b 4
00010CED F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010CF2 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010CF7 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010CFC F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010D02 00                         		even
00010D02 00                         		even
00010D02                            
00010D02                            ; ===========================================================================
00010D02                            ; ---------------------------------------------------------------------------
00010D02                            ; Object 57 - spiked balls (SYZ, LZ)
00010D02                            ; ---------------------------------------------------------------------------
00010D02                            
00010D02                            Obj57:					; XREF: Obj_Index
00010D02 7000                       		moveq	#0,d0
00010D04 1028 0024                  		move.b	$24(a0),d0
00010D08 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010D0C 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010D10                            ; ===========================================================================
00010D10 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010D12 0000                       		dc.w Obj57_Move-Obj57_Index
00010D14 0000                       		dc.w Obj57_Display-Obj57_Index
00010D16                            ; ===========================================================================
00010D16                            
00010D16                            Obj57_Main:				; XREF: Obj57_Index
00010D16 5428 0024                  		addq.b	#2,$24(a0)
00010D1A 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D22 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D28 117C 0004 0001             		move.b	#4,1(a0)
00010D2E 117C 0004 0018             		move.b	#4,$18(a0)
00010D34 117C 0008 0019             		move.b	#8,$19(a0)
00010D3A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010D40 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010D46 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010D4C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D52 6600                       		bne.s	loc_107E8
00010D54 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010D5A 317C 0310 0002             		move.w	#$310,2(a0)
00010D60 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010D68                            
00010D68                            loc_107E8:
00010D68 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D6C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010D70 4881                       		ext.w	d1
00010D72 E741                       		asl.w	#3,d1		; multiply by 8
00010D74 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010D78 1028 0022                  		move.b	$22(a0),d0
00010D7C E418                       		ror.b	#2,d0
00010D7E 0200 00C0                  		andi.b	#-$40,d0
00010D82 1140 0026                  		move.b	d0,$26(a0)
00010D86 45E8 0029                  		lea	$29(a0),a2
00010D8A 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D8E 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010D92 14FC 0000                  		move.b	#0,(a2)+
00010D96 3601                       		move.w	d1,d3
00010D98 E94B                       		lsl.w	#4,d3
00010D9A 1143 003C                  		move.b	d3,$3C(a0)
00010D9E 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010DA0 6500                       		bcs.s	loc_10894
00010DA2 0828 0003 0028             		btst	#3,$28(a0)
00010DA8 6700                       		beq.s	Obj57_MakeChain
00010DAA 5341                       		subq.w	#1,d1
00010DAC 6500                       		bcs.s	loc_10894
00010DAE                            
00010DAE                            Obj57_MakeChain:
00010DAE 6100 D266                  		bsr.w	SingleObjLoad
00010DB2 6600                       		bne.s	loc_10894
00010DB4 5228 0029                  		addq.b	#1,$29(a0)
00010DB8 3A09                       		move.w	a1,d5
00010DBA 0445 D000                  		subi.w	#-$3000,d5
00010DBE EC4D                       		lsr.w	#6,d5
00010DC0 0245 007F                  		andi.w	#$7F,d5
00010DC4 14C5                       		move.b	d5,(a2)+
00010DC6 137C 0004 0024             		move.b	#4,$24(a1)
00010DCC 1290                       		move.b	0(a0),0(a1)
00010DCE 2368 0004 0004             		move.l	4(a0),4(a1)
00010DD4 3368 0002 0002             		move.w	2(a0),2(a1)
00010DDA 1368 0001 0001             		move.b	1(a0),1(a1)
00010DE0 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010DE6 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010DEC 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010DF2 0403 0010                  		subi.b	#$10,d3
00010DF6 1343 003C                  		move.b	d3,$3C(a1)
00010DFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010E00 6600                       		bne.s	loc_10890
00010E02 4A03                       		tst.b	d3
00010E04 6600                       		bne.s	loc_10890
00010E06 137C 0002 001A             		move.b	#2,$1A(a1)
00010E0C                            
00010E0C                            loc_10890:
00010E0C 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010E10                            
00010E10                            loc_10894:
00010E10 3A08                       		move.w	a0,d5
00010E12 0445 D000                  		subi.w	#-$3000,d5
00010E16 EC4D                       		lsr.w	#6,d5
00010E18 0245 007F                  		andi.w	#$7F,d5
00010E1C 14C5                       		move.b	d5,(a2)+
00010E1E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E24 6600                       		bne.s	Obj57_Move
00010E26 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E2C 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010E32                            
00010E32                            Obj57_Move:				; XREF: Obj57_Index
00010E32 6100 0000                  		bsr.w	Obj57_MoveSub
00010E36 6000 0000                  		bra.w	Obj57_ChkDel
00010E3A                            ; ===========================================================================
00010E3A                            
00010E3A                            Obj57_MoveSub:				; XREF: Obj57_Move
00010E3A 3028 003E                  		move.w	$3E(a0),d0
00010E3E D168 0026                  		add.w	d0,$26(a0)
00010E42 1028 0026                  		move.b	$26(a0),d0
00010E46 4EB9 0000 2C22             		jsr	(CalcSine).l
00010E4C 3428 0038                  		move.w	$38(a0),d2
00010E50 3628 003A                  		move.w	$3A(a0),d3
00010E54 45E8 0029                  		lea	$29(a0),a2
00010E58 7C00                       		moveq	#0,d6
00010E5A 1C1A                       		move.b	(a2)+,d6
00010E5C                            
00010E5C                            Obj57_MoveLoop:
00010E5C 7800                       		moveq	#0,d4
00010E5E 181A                       		move.b	(a2)+,d4
00010E60 ED4C                       		lsl.w	#6,d4
00010E62 0684 00FF D000             		addi.l	#$FFD000,d4
00010E68 2244                       		movea.l	d4,a1
00010E6A 7800                       		moveq	#0,d4
00010E6C 1829 003C                  		move.b	$3C(a1),d4
00010E70 2A04                       		move.l	d4,d5
00010E72 C9C0                       		muls.w	d0,d4
00010E74 E084                       		asr.l	#8,d4
00010E76 CBC1                       		muls.w	d1,d5
00010E78 E085                       		asr.l	#8,d5
00010E7A D842                       		add.w	d2,d4
00010E7C DA43                       		add.w	d3,d5
00010E7E 3344 000C                  		move.w	d4,$C(a1)
00010E82 3345 0008                  		move.w	d5,8(a1)
00010E86 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010E8A 4E75                       		rts	
00010E8C                            ; ===========================================================================
00010E8C                            
00010E8C                            Obj57_ChkDel:				; XREF: Obj57_Move
00010E8C 3028 003A                  		move.w	$3A(a0),d0
00010E90 0240 FF80                  		andi.w	#$FF80,d0
00010E94 3238 F700                  		move.w	($FFFFF700).w,d1
00010E98 0441 0080                  		subi.w	#$80,d1
00010E9C 0241 FF80                  		andi.w	#$FF80,d1
00010EA0 9041                       		sub.w	d1,d0
00010EA2 0C40 0280                  		cmpi.w	#$280,d0
00010EA6 6200 0000                  		bhi.w	Obj57_Delete
00010EAA 6000 CCE4                  		bra.w	DisplaySprite
00010EAE                            ; ===========================================================================
00010EAE                            
00010EAE                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010EAE 7400                       		moveq	#0,d2
00010EB0 45E8 0029                  		lea	$29(a0),a2
00010EB4 141A                       		move.b	(a2)+,d2
00010EB6                            
00010EB6                            Obj57_DelLoop:
00010EB6 7000                       		moveq	#0,d0
00010EB8 101A                       		move.b	(a2)+,d0
00010EBA ED48                       		lsl.w	#6,d0
00010EBC 0680 00FF D000             		addi.l	#$FFD000,d0
00010EC2 2240                       		movea.l	d0,a1
00010EC4 6100 CD08                  		bsr.w	DeleteObject2
00010EC8 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010ECC                            
00010ECC 4E75                       		rts	
00010ECE                            ; ===========================================================================
00010ECE                            
00010ECE                            Obj57_Display:				; XREF: Obj57_Index
00010ECE 6000 CCC0                  		bra.w	DisplaySprite
00010ED2                            ; ===========================================================================
00010ED2                            ; ---------------------------------------------------------------------------
00010ED2                            ; Sprite mappings - chain of spiked balls (SYZ)
00010ED2                            ; ---------------------------------------------------------------------------
00010ED2                            Map_obj57:
00010ED2                            	include "_maps\obj57syz.asm"
00010ED2                            ; ---------------------------------------------------------------------------
00010ED2                            ; Sprite mappings - chain of spiked balls (SYZ)
00010ED2                            ; ---------------------------------------------------------------------------
00010ED2 0000                       		dc.w byte_10958-Map_obj57
00010ED4 01                         byte_10958:	dc.b 1
00010ED5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EDA                            		even
00010EDA                            		even
00010EDA                            
00010EDA                            ; ---------------------------------------------------------------------------
00010EDA                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EDA                            ; ---------------------------------------------------------------------------
00010EDA                            Map_obj57a:
00010EDA                            	include "_maps\obj57lz.asm"
00010EDA                            ; ---------------------------------------------------------------------------
00010EDA                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EDA                            ; ---------------------------------------------------------------------------
00010EDA 0000                       		dc.w byte_10964-Map_obj57a
00010EDC 0000                       		dc.w byte_1096A-Map_obj57a
00010EDE 0000                       		dc.w byte_10970-Map_obj57a
00010EE0 01                         byte_10964:	dc.b 1
00010EE1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EE6 01                         byte_1096A:	dc.b 1
00010EE7 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010EEC 01                         byte_10970:	dc.b 1
00010EED F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010EF2                            		even
00010EF2                            		even
00010EF2                            
00010EF2                            ; ===========================================================================
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            ; Object 58 - giant spiked balls (SYZ)
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            
00010EF2                            Obj58:					; XREF: Obj_Index
00010EF2 7000                       		moveq	#0,d0
00010EF4 1028 0024                  		move.b	$24(a0),d0
00010EF8 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010EFC 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010F00                            ; ===========================================================================
00010F00 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010F02 0000                       		dc.w Obj58_Move-Obj58_Index
00010F04                            ; ===========================================================================
00010F04                            
00010F04                            Obj58_Main:				; XREF: Obj58_Index
00010F04 5428 0024                  		addq.b	#2,$24(a0)
00010F08 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010F10 317C 0396 0002             		move.w	#$396,2(a0)
00010F16 117C 0004 0001             		move.b	#4,1(a0)
00010F1C 117C 0004 0018             		move.b	#4,$18(a0)
00010F22 117C 0018 0019             		move.b	#$18,$19(a0)
00010F28 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F2E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F34 117C 0086 0020             		move.b	#$86,$20(a0)
00010F3A 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F3E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F42 4881                       		ext.w	d1
00010F44 E741                       		asl.w	#3,d1		; multiply by 8
00010F46 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010F4A 1028 0022                  		move.b	$22(a0),d0
00010F4E E418                       		ror.b	#2,d0
00010F50 0200 00C0                  		andi.b	#$C0,d0
00010F54 1140 0026                  		move.b	d0,$26(a0)
00010F58 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010F5E                            
00010F5E                            Obj58_Move:				; XREF: Obj58_Index
00010F5E 7000                       		moveq	#0,d0
00010F60 1028 0028                  		move.b	$28(a0),d0	; get object type
00010F64 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010F68 D040                       		add.w	d0,d0
00010F6A 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010F6E 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010F72 3028 003A                  		move.w	$3A(a0),d0
00010F76 0240 FF80                  		andi.w	#$FF80,d0
00010F7A 3238 F700                  		move.w	($FFFFF700).w,d1
00010F7E 0441 0080                  		subi.w	#$80,d1
00010F82 0241 FF80                  		andi.w	#$FF80,d1
00010F86 9041                       		sub.w	d1,d0
00010F88 0C40 0280                  		cmpi.w	#$280,d0
00010F8C 6200 CC3E                  		bhi.w	DeleteObject
00010F90 6000 CBFE                  		bra.w	DisplaySprite
00010F94                            ; ===========================================================================
00010F94 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010F96 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010F98 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010F9A 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010F9C                            ; ===========================================================================
00010F9C                            
00010F9C                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010F9C 4E75                       		rts	
00010F9E                            ; ===========================================================================
00010F9E                            
00010F9E                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010F9E 323C 0060                  		move.w	#$60,d1
00010FA2 7000                       		moveq	#0,d0
00010FA4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FA8 0828 0000 0022             		btst	#0,$22(a0)
00010FAE 6700                       		beq.s	loc_10A38
00010FB0 4440                       		neg.w	d0
00010FB2 D041                       		add.w	d1,d0
00010FB4                            
00010FB4                            loc_10A38:
00010FB4 3228 003A                  		move.w	$3A(a0),d1
00010FB8 9240                       		sub.w	d0,d1
00010FBA 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010FBE 4E75                       		rts	
00010FC0                            ; ===========================================================================
00010FC0                            
00010FC0                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010FC0 323C 0060                  		move.w	#$60,d1
00010FC4 7000                       		moveq	#0,d0
00010FC6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FCA 0828 0000 0022             		btst	#0,$22(a0)
00010FD0 6700                       		beq.s	loc_10A5C
00010FD2 4440                       		neg.w	d0
00010FD4 0640 0080                  		addi.w	#$80,d0
00010FD8                            
00010FD8                            loc_10A5C:
00010FD8 3228 0038                  		move.w	$38(a0),d1
00010FDC 9240                       		sub.w	d0,d1
00010FDE 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010FE2 4E75                       		rts	
00010FE4                            ; ===========================================================================
00010FE4                            
00010FE4                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010FE4 3028 003E                  		move.w	$3E(a0),d0
00010FE8 D168 0026                  		add.w	d0,$26(a0)
00010FEC 1028 0026                  		move.b	$26(a0),d0
00010FF0 4EB9 0000 2C22             		jsr	(CalcSine).l
00010FF6 3428 0038                  		move.w	$38(a0),d2
00010FFA 3628 003A                  		move.w	$3A(a0),d3
00010FFE 7800                       		moveq	#0,d4
00011000 1828 003C                  		move.b	$3C(a0),d4
00011004 2A04                       		move.l	d4,d5
00011006 C9C0                       		muls.w	d0,d4
00011008 E084                       		asr.l	#8,d4
0001100A CBC1                       		muls.w	d1,d5
0001100C E085                       		asr.l	#8,d5
0001100E D842                       		add.w	d2,d4
00011010 DA43                       		add.w	d3,d5
00011012 3144 000C                  		move.w	d4,$C(a0)
00011016 3145 0008                  		move.w	d5,8(a0)
0001101A 4E75                       		rts	
0001101C                            ; ===========================================================================
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            ; Sprite mappings - SBZ	spiked ball on a chain
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            Map_obj15b:
0001101C                            	include "_maps\obj15sbz.asm"
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001101C                            ; ---------------------------------------------------------------------------
0001101C 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011020 0000                       		dc.w byte_10AC6-Map_obj15b
00011022 05                         byte_10AA6:	dc.b 5
00011023 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011028 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001102D F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011032 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011037 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001103C 01                         byte_10AC0:	dc.b 1
0001103D F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011042 02                         byte_10AC6:	dc.b 2
00011043 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011048 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001104E 00                         		even
0001104E 00                         		even
0001104E                            
0001104E                            ; ===========================================================================
0001104E                            ; ---------------------------------------------------------------------------
0001104E                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001104E                            ; ---------------------------------------------------------------------------
0001104E                            
0001104E                            Obj59:					; XREF: Obj_Index
0001104E 7000                       		moveq	#0,d0
00011050 1028 0024                  		move.b	$24(a0),d0
00011054 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011058 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001105C 3028 0032                  		move.w	$32(a0),d0
00011060 0240 FF80                  		andi.w	#$FF80,d0
00011064 3238 F700                  		move.w	($FFFFF700).w,d1
00011068 0441 0080                  		subi.w	#$80,d1
0001106C 0241 FF80                  		andi.w	#$FF80,d1
00011070 9041                       		sub.w	d1,d0
00011072 0C40 0280                  		cmpi.w	#$280,d0
00011076 6200 CB54                  		bhi.w	DeleteObject
0001107A 6000 CB14                  		bra.w	DisplaySprite
0001107E                            ; ===========================================================================
0001107E 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011080 0000                       		dc.w Obj59_Platform-Obj59_Index
00011082 0000                       		dc.w Obj59_Action-Obj59_Index
00011084 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011086                            
00011086 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011088                            
00011088 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001108A 2001                       		dc.b $20, 1
0001108C 3401                       		dc.b $34, 1
0001108E 1003                       		dc.b $10, 3
00011090 2003                       		dc.b $20, 3
00011092 3403                       		dc.b $34, 3
00011094 1401                       		dc.b $14, 1
00011096 2401                       		dc.b $24, 1
00011098 2C01                       		dc.b $2C, 1
0001109A 1403                       		dc.b $14, 3
0001109C 2403                       		dc.b $24, 3
0001109E 2C03                       		dc.b $2C, 3
000110A0 2005                       		dc.b $20, 5
000110A2 2007                       		dc.b $20, 7
000110A4 3009                       		dc.b $30, 9
000110A6                            ; ===========================================================================
000110A6                            
000110A6                            Obj59_Main:				; XREF: Obj59_Index
000110A6 5428 0024                  		addq.b	#2,$24(a0)
000110AA 7000                       		moveq	#0,d0
000110AC 1028 0028                  		move.b	$28(a0),d0
000110B0 6A00                       		bpl.s	Obj59_Main2
000110B2 5828 0024                  		addq.b	#4,$24(a0)
000110B6 0240 007F                  		andi.w	#$7F,d0
000110BA C0FC 0006                  		mulu.w	#6,d0
000110BE 3140 003C                  		move.w	d0,$3C(a0)
000110C2 3140 003E                  		move.w	d0,$3E(a0)
000110C6 588F                       		addq.l	#4,sp
000110C8 4E75                       		rts	
000110CA                            ; ===========================================================================
000110CA                            
000110CA                            Obj59_Main2:
000110CA E648                       		lsr.w	#3,d0
000110CC 0240 001E                  		andi.w	#$1E,d0
000110D0 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000110D4 115A 0019                  		move.b	(a2)+,$19(a0)
000110D8 115A 001A                  		move.b	(a2)+,$1A(a0)
000110DC 7000                       		moveq	#0,d0
000110DE 1028 0028                  		move.b	$28(a0),d0
000110E2 D040                       		add.w	d0,d0
000110E4 0240 001E                  		andi.w	#$1E,d0
000110E8 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000110EC 101A                       		move.b	(a2)+,d0
000110EE E548                       		lsl.w	#2,d0
000110F0 3140 003C                  		move.w	d0,$3C(a0)
000110F4 115A 0028                  		move.b	(a2)+,$28(a0)
000110F8 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011100 317C 4000 0002             		move.w	#$4000,2(a0)
00011106 117C 0004 0001             		move.b	#4,1(a0)
0001110C 117C 0004 0018             		move.b	#4,$18(a0)
00011112 3168 0008 0032             		move.w	8(a0),$32(a0)
00011118 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001111E                            
0001111E                            Obj59_Platform:				; XREF: Obj59_Index
0001111E 7200                       		moveq	#0,d1
00011120 1228 0019                  		move.b	$19(a0),d1
00011124 4EB9 0000 789E             		jsr	(PlatformObject).l
0001112A 6000 0000                  		bra.w	Obj59_Types
0001112E                            ; ===========================================================================
0001112E                            
0001112E                            Obj59_Action:				; XREF: Obj59_Index
0001112E 7200                       		moveq	#0,d1
00011130 1228 0019                  		move.b	$19(a0),d1
00011134 4EB9 0000 7A12             		jsr	(ExitPlatform).l
0001113A 3F28 0008                  		move.w	8(a0),-(sp)
0001113E 6100 0000                  		bsr.w	Obj59_Types
00011142 341F                       		move.w	(sp)+,d2
00011144 4A10                       		tst.b	0(a0)
00011146 6700                       		beq.s	locret_10BD4
00011148 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
0001114E                            ; ===========================================================================
0001114E                            
0001114E                            locret_10BD4:
0001114E 4E75                       		rts	
00011150                            ; ===========================================================================
00011150                            
00011150                            Obj59_Types:
00011150 7000                       		moveq	#0,d0
00011152 1028 0028                  		move.b	$28(a0),d0
00011156 0240 000F                  		andi.w	#$F,d0
0001115A D040                       		add.w	d0,d0
0001115C 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011160 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011164                            ; ===========================================================================
00011164 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011168 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001116C 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011170 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011174 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011178                            ; ===========================================================================
00011178                            
00011178                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011178 4E75                       		rts	
0001117A                            ; ===========================================================================
0001117A                            
0001117A                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001117A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011180 6600                       		bne.s	locret_10C0C
00011182 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011186                            
00011186                            locret_10C0C:
00011186 4E75                       		rts	
00011188                            ; ===========================================================================
00011188                            
00011188                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011188 6100 0000                  		bsr.w	Obj59_Move
0001118C 3028 0034                  		move.w	$34(a0),d0
00011190 4440                       		neg.w	d0
00011192 D068 0030                  		add.w	$30(a0),d0
00011196 3140 000C                  		move.w	d0,$C(a0)
0001119A 4E75                       		rts	
0001119C                            ; ===========================================================================
0001119C                            
0001119C                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001119C 6100 0000                  		bsr.w	Obj59_Move
000111A0 3028 0034                  		move.w	$34(a0),d0
000111A4 D068 0030                  		add.w	$30(a0),d0
000111A8 3140 000C                  		move.w	d0,$C(a0)
000111AC 4E75                       		rts	
000111AE                            ; ===========================================================================
000111AE                            
000111AE                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000111AE 6100 0000                  		bsr.w	Obj59_Move
000111B2 3028 0034                  		move.w	$34(a0),d0
000111B6 E240                       		asr.w	#1,d0
000111B8 4440                       		neg.w	d0
000111BA D068 0030                  		add.w	$30(a0),d0
000111BE 3140 000C                  		move.w	d0,$C(a0)
000111C2 3028 0034                  		move.w	$34(a0),d0
000111C6 D068 0032                  		add.w	$32(a0),d0
000111CA 3140 0008                  		move.w	d0,8(a0)
000111CE 4E75                       		rts	
000111D0                            ; ===========================================================================
000111D0                            
000111D0                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000111D0 6100 0000                  		bsr.w	Obj59_Move
000111D4 3028 0034                  		move.w	$34(a0),d0
000111D8 E240                       		asr.w	#1,d0
000111DA D068 0030                  		add.w	$30(a0),d0
000111DE 3140 000C                  		move.w	d0,$C(a0)
000111E2 3028 0034                  		move.w	$34(a0),d0
000111E6 4440                       		neg.w	d0
000111E8 D068 0032                  		add.w	$32(a0),d0
000111EC 3140 0008                  		move.w	d0,8(a0)
000111F0 4E75                       		rts	
000111F2                            ; ===========================================================================
000111F2                            
000111F2                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000111F2 6100 0000                  		bsr.w	Obj59_Move
000111F6 3028 0034                  		move.w	$34(a0),d0
000111FA 4440                       		neg.w	d0
000111FC D068 0030                  		add.w	$30(a0),d0
00011200 3140 000C                  		move.w	d0,$C(a0)
00011204 4A28 0028                  		tst.b	$28(a0)
00011208 6700 0000                  		beq.w	loc_10C94
0001120C 4E75                       		rts	
0001120E                            ; ===========================================================================
0001120E                            
0001120E                            loc_10C94:
0001120E 0828 0003 0022             		btst	#3,$22(a0)
00011214 6700                       		beq.s	Obj59_Delete
00011216 08E9 0001 0022             		bset	#1,$22(a1)
0001121C 08A9 0003 0022             		bclr	#3,$22(a1)
00011222 137C 0002 0024             		move.b	#2,$24(a1)
00011228                            
00011228                            Obj59_Delete:
00011228 6000 C9A2                  		bra.w	DeleteObject
0001122C                            
0001122C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001122C                            
0001122C                            
0001122C                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001122C 3028 0038                  		move.w	$38(a0),d0
00011230 4A28 003A                  		tst.b	$3A(a0)
00011234 6600                       		bne.s	loc_10CC8
00011236 0C40 0800                  		cmpi.w	#$800,d0
0001123A 6400                       		bcc.s	loc_10CD0
0001123C 0640 0010                  		addi.w	#$10,d0
00011240 6000                       		bra.s	loc_10CD0
00011242                            ; ===========================================================================
00011242                            
00011242                            loc_10CC8:
00011242 4A40                       		tst.w	d0
00011244 6700                       		beq.s	loc_10CD0
00011246 0440 0010                  		subi.w	#$10,d0
0001124A                            
0001124A                            loc_10CD0:
0001124A 3140 0038                  		move.w	d0,$38(a0)
0001124E 48C0                       		ext.l	d0
00011250 E180                       		asl.l	#8,d0
00011252 D0A8 0034                  		add.l	$34(a0),d0
00011256 2140 0034                  		move.l	d0,$34(a0)
0001125A 4840                       		swap	d0
0001125C 3428 003C                  		move.w	$3C(a0),d2
00011260 B042                       		cmp.w	d2,d0
00011262 6300                       		bls.s	loc_10CF0
00011264 117C 0001 003A             		move.b	#1,$3A(a0)
0001126A                            
0001126A                            loc_10CF0:
0001126A D442                       		add.w	d2,d2
0001126C B042                       		cmp.w	d2,d0
0001126E 6600                       		bne.s	locret_10CFA
00011270 4228 0028                  		clr.b	$28(a0)
00011274                            
00011274                            locret_10CFA:
00011274 4E75                       		rts	
00011276                            ; End of function Obj59_Move
00011276                            
00011276                            ; ===========================================================================
00011276                            
00011276                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011276 5368 003C                  		subq.w	#1,$3C(a0)
0001127A 6600                       		bne.s	Obj59_ChkDel
0001127C 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011282 6100 CD92                  		bsr.w	SingleObjLoad
00011286 6600                       		bne.s	Obj59_ChkDel
00011288 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001128C 3368 0008 0008             		move.w	8(a0),8(a1)
00011292 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011298 137C 000E 0028             		move.b	#$E,$28(a1)
0001129E                            
0001129E                            Obj59_ChkDel:
0001129E 588F                       		addq.l	#4,sp
000112A0 3028 0008                  		move.w	8(a0),d0
000112A4 0240 FF80                  		andi.w	#$FF80,d0
000112A8 3238 F700                  		move.w	($FFFFF700).w,d1
000112AC 0441 0080                  		subi.w	#$80,d1
000112B0 0241 FF80                  		andi.w	#$FF80,d1
000112B4 9041                       		sub.w	d1,d0
000112B6 0C40 0280                  		cmpi.w	#$280,d0
000112BA 6200 C910                  		bhi.w	DeleteObject
000112BE 4E75                       		rts	
000112C0                            ; ===========================================================================
000112C0                            ; ---------------------------------------------------------------------------
000112C0                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112C0                            ; ---------------------------------------------------------------------------
000112C0                            Map_obj59:
000112C0                            	include "_maps\obj59.asm"
000112C0                            ; ---------------------------------------------------------------------------
000112C0                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112C0                            ; ---------------------------------------------------------------------------
000112C0 0000                       		dc.w byte_10D4A-Map_obj59
000112C2 03                         byte_10D4A:	dc.b 3
000112C3 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000112C8 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000112CD F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000112D2                            		even
000112D2                            		even
000112D2                            
000112D2                            ; ===========================================================================
000112D2                            ; ---------------------------------------------------------------------------
000112D2                            ; Object 5A - platforms	moving in circles (SLZ)
000112D2                            ; ---------------------------------------------------------------------------
000112D2                            
000112D2                            Obj5A:					; XREF: Obj_Index
000112D2 7000                       		moveq	#0,d0
000112D4 1028 0024                  		move.b	$24(a0),d0
000112D8 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000112DC 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000112E0 3028 0032                  		move.w	$32(a0),d0
000112E4 0240 FF80                  		andi.w	#$FF80,d0
000112E8 3238 F700                  		move.w	($FFFFF700).w,d1
000112EC 0441 0080                  		subi.w	#$80,d1
000112F0 0241 FF80                  		andi.w	#$FF80,d1
000112F4 9041                       		sub.w	d1,d0
000112F6 0C40 0280                  		cmpi.w	#$280,d0
000112FA 6200 C8D0                  		bhi.w	DeleteObject
000112FE 6000 C890                  		bra.w	DisplaySprite
00011302                            ; ===========================================================================
00011302 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011304 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011306 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011308                            ; ===========================================================================
00011308                            
00011308                            Obj5A_Main:				; XREF: Obj5A_Index
00011308 5428 0024                  		addq.b	#2,$24(a0)
0001130C 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011314 317C 4000 0002             		move.w	#$4000,2(a0)
0001131A 117C 0004 0001             		move.b	#4,1(a0)
00011320 117C 0004 0018             		move.b	#4,$18(a0)
00011326 117C 0018 0019             		move.b	#$18,$19(a0)
0001132C 3168 0008 0032             		move.w	8(a0),$32(a0)
00011332 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011338                            
00011338                            Obj5A_Platform:				; XREF: Obj5A_Index
00011338 7200                       		moveq	#0,d1
0001133A 1228 0019                  		move.b	$19(a0),d1
0001133E 4EB9 0000 789E             		jsr	(PlatformObject).l
00011344 6000 0000                  		bra.w	Obj5A_Types
00011348                            ; ===========================================================================
00011348                            
00011348                            Obj5A_Action:				; XREF: Obj5A_Index
00011348 7200                       		moveq	#0,d1
0001134A 1228 0019                  		move.b	$19(a0),d1
0001134E 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011354 3F28 0008                  		move.w	8(a0),-(sp)
00011358 6100 0000                  		bsr.w	Obj5A_Types
0001135C 341F                       		move.w	(sp)+,d2
0001135E 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00011364                            ; ===========================================================================
00011364                            
00011364                            Obj5A_Types:
00011364 7000                       		moveq	#0,d0
00011366 1028 0028                  		move.b	$28(a0),d0
0001136A 0240 000C                  		andi.w	#$C,d0
0001136E E248                       		lsr.w	#1,d0
00011370 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011374 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011378                            ; ===========================================================================
00011378 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001137A 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001137C                            ; ===========================================================================
0001137C                            
0001137C                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001137C 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011380 0401 0050                  		subi.b	#$50,d1
00011384 4881                       		ext.w	d1
00011386 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001138A 0402 0050                  		subi.b	#$50,d2
0001138E 4882                       		ext.w	d2
00011390 0828 0000 0028             		btst	#0,$28(a0)
00011396 6700                       		beq.s	loc_10E24
00011398 4441                       		neg.w	d1
0001139A 4442                       		neg.w	d2
0001139C                            
0001139C                            loc_10E24:
0001139C 0828 0001 0028             		btst	#1,$28(a0)
000113A2 6700                       		beq.s	loc_10E30
000113A4 4441                       		neg.w	d1
000113A6 C342                       		exg	d1,d2
000113A8                            
000113A8                            loc_10E30:
000113A8 D268 0032                  		add.w	$32(a0),d1
000113AC 3141 0008                  		move.w	d1,8(a0)
000113B0 D468 0030                  		add.w	$30(a0),d2
000113B4 3142 000C                  		move.w	d2,$C(a0)
000113B8 4E75                       		rts	
000113BA                            ; ===========================================================================
000113BA                            
000113BA                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000113BA 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113BE 0401 0050                  		subi.b	#$50,d1
000113C2 4881                       		ext.w	d1
000113C4 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113C8 0402 0050                  		subi.b	#$50,d2
000113CC 4882                       		ext.w	d2
000113CE 0828 0000 0028             		btst	#0,$28(a0)
000113D4 6700                       		beq.s	loc_10E62
000113D6 4441                       		neg.w	d1
000113D8 4442                       		neg.w	d2
000113DA                            
000113DA                            loc_10E62:
000113DA 0828 0001 0028             		btst	#1,$28(a0)
000113E0 6700                       		beq.s	loc_10E6E
000113E2 4441                       		neg.w	d1
000113E4 C342                       		exg	d1,d2
000113E6                            
000113E6                            loc_10E6E:
000113E6 4441                       		neg.w	d1
000113E8 D268 0032                  		add.w	$32(a0),d1
000113EC 3141 0008                  		move.w	d1,8(a0)
000113F0 D468 0030                  		add.w	$30(a0),d2
000113F4 3142 000C                  		move.w	d2,$C(a0)
000113F8 4E75                       		rts	
000113FA                            ; ===========================================================================
000113FA                            ; ---------------------------------------------------------------------------
000113FA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113FA                            ; ---------------------------------------------------------------------------
000113FA                            Map_obj5A:
000113FA                            	include "_maps\obj5A.asm"
000113FA                            ; ---------------------------------------------------------------------------
000113FA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113FA                            ; ---------------------------------------------------------------------------
000113FA 0000                       		dc.w byte_10E84-Map_obj5A
000113FC 02                         byte_10E84:	dc.b 2
000113FD F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011402 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011408 00                         		even
00011408 00                         		even
00011408                            
00011408                            ; ===========================================================================
00011408                            ; ---------------------------------------------------------------------------
00011408                            ; Object 5B - blocks that form a staircase (SLZ)
00011408                            ; ---------------------------------------------------------------------------
00011408                            
00011408                            Obj5B:					; XREF: Obj_Index
00011408 7000                       		moveq	#0,d0
0001140A 1028 0024                  		move.b	$24(a0),d0
0001140E 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011412 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011416 3028 0030                  		move.w	$30(a0),d0
0001141A 0240 FF80                  		andi.w	#$FF80,d0
0001141E 3238 F700                  		move.w	($FFFFF700).w,d1
00011422 0441 0080                  		subi.w	#$80,d1
00011426 0241 FF80                  		andi.w	#$FF80,d1
0001142A 9041                       		sub.w	d1,d0
0001142C 0C40 0280                  		cmpi.w	#$280,d0
00011430 6200 C79A                  		bhi.w	DeleteObject
00011434 6000 C75A                  		bra.w	DisplaySprite
00011438                            ; ===========================================================================
00011438 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001143A 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001143C 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001143E                            ; ===========================================================================
0001143E                            
0001143E                            Obj5B_Main:				; XREF: Obj5B_Index
0001143E 5428 0024                  		addq.b	#2,$24(a0)
00011442 7638                       		moveq	#$38,d3
00011444 7801                       		moveq	#1,d4
00011446 0828 0000 0022             		btst	#0,$22(a0)
0001144C 6700                       		beq.s	loc_10EDA
0001144E 763B                       		moveq	#$3B,d3
00011450 78FF                       		moveq	#-1,d4
00011452                            
00011452                            loc_10EDA:
00011452 3428 0008                  		move.w	8(a0),d2
00011456 2248                       		movea.l	a0,a1
00011458 7203                       		moveq	#3,d1
0001145A 6000                       		bra.s	Obj5B_MakeBlocks
0001145C                            ; ===========================================================================
0001145C                            
0001145C                            Obj5B_Loop:
0001145C 6100 CBCE                  		bsr.w	SingleObjLoad2
00011460 6600 0000                  		bne.w	Obj5B_Move
00011464 137C 0004 0024             		move.b	#4,$24(a1)
0001146A                            
0001146A                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001146A 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001146E 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011476 337C 4000 0002             		move.w	#$4000,2(a1)
0001147C 137C 0004 0001             		move.b	#4,1(a1)
00011482 137C 0003 0018             		move.b	#3,$18(a1)
00011488 137C 0010 0019             		move.b	#$10,$19(a1)
0001148E 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011494 3342 0008                  		move.w	d2,8(a1)
00011498 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001149E 3368 0008 0030             		move.w	8(a0),$30(a1)
000114A4 3369 000C 0032             		move.w	$C(a1),$32(a1)
000114AA 0642 0020                  		addi.w	#$20,d2
000114AE 1343 0037                  		move.b	d3,$37(a1)
000114B2 2348 003C                  		move.l	a0,$3C(a1)
000114B6 D604                       		add.b	d4,d3
000114B8 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000114BC                            
000114BC                            Obj5B_Move:				; XREF: Obj5B_Index
000114BC 7000                       		moveq	#0,d0
000114BE 1028 0028                  		move.b	$28(a0),d0
000114C2 0240 0007                  		andi.w	#7,d0
000114C6 D040                       		add.w	d0,d0
000114C8 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000114CC 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000114D0                            
000114D0                            Obj5B_Solid:				; XREF: Obj5B_Index
000114D0 2468 003C                  		movea.l	$3C(a0),a2
000114D4 7000                       		moveq	#0,d0
000114D6 1028 0037                  		move.b	$37(a0),d0
000114DA 1032 0000                  		move.b	(a2,d0.w),d0
000114DE D068 0032                  		add.w	$32(a0),d0
000114E2 3140 000C                  		move.w	d0,$C(a0)
000114E6 7200                       		moveq	#0,d1
000114E8 1228 0019                  		move.b	$19(a0),d1
000114EC 0641 000B                  		addi.w	#$B,d1
000114F0 343C 0010                  		move.w	#$10,d2
000114F4 363C 0011                  		move.w	#$11,d3
000114F8 3828 0008                  		move.w	8(a0),d4
000114FC 6100 EA62                  		bsr.w	SolidObject
00011500 4A04                       		tst.b	d4
00011502 6A00                       		bpl.s	loc_10F92
00011504 1544 0036                  		move.b	d4,$36(a2)
00011508                            
00011508                            loc_10F92:
00011508 0828 0003 0022             		btst	#3,$22(a0)
0001150E 6700                       		beq.s	locret_10FA0
00011510 157C 0001 0036             		move.b	#1,$36(a2)
00011516                            
00011516                            locret_10FA0:
00011516 4E75                       		rts	
00011518                            ; ===========================================================================
00011518 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001151A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001151C 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001151E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011520                            ; ===========================================================================
00011520                            
00011520                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011520 4A68 0034                  		tst.w	$34(a0)
00011524 6600                       		bne.s	loc_10FC0
00011526 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001152C 6600                       		bne.s	locret_10FBE
0001152E 317C 001E 0034             		move.w	#$1E,$34(a0)
00011534                            
00011534                            locret_10FBE:
00011534 4E75                       		rts	
00011536                            ; ===========================================================================
00011536                            
00011536                            loc_10FC0:
00011536 5368 0034                  		subq.w	#1,$34(a0)
0001153A 66F8                       		bne.s	locret_10FBE
0001153C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011540 4E75                       		rts	
00011542                            ; ===========================================================================
00011542                            
00011542                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011542 4A68 0034                  		tst.w	$34(a0)
00011546 6600                       		bne.s	loc_10FE0
00011548 4A28 0036                  		tst.b	$36(a0)
0001154C 6A00                       		bpl.s	locret_10FDE
0001154E 317C 003C 0034             		move.w	#$3C,$34(a0)
00011554                            
00011554                            locret_10FDE:
00011554 4E75                       		rts	
00011556                            ; ===========================================================================
00011556                            
00011556                            loc_10FE0:
00011556 5368 0034                  		subq.w	#1,$34(a0)
0001155A 6600                       		bne.s	loc_10FEC
0001155C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011560 4E75                       		rts	
00011562                            ; ===========================================================================
00011562                            
00011562                            loc_10FEC:
00011562 43E8 0038                  		lea	$38(a0),a1
00011566 3028 0034                  		move.w	$34(a0),d0
0001156A E408                       		lsr.b	#2,d0
0001156C 0200 0001                  		andi.b	#1,d0
00011570 12C0                       		move.b	d0,(a1)+
00011572 0A00 0001                  		eori.b	#1,d0
00011576 12C0                       		move.b	d0,(a1)+
00011578 0A00 0001                  		eori.b	#1,d0
0001157C 12C0                       		move.b	d0,(a1)+
0001157E 0A00 0001                  		eori.b	#1,d0
00011582 12C0                       		move.b	d0,(a1)+
00011584 4E75                       		rts	
00011586                            ; ===========================================================================
00011586                            
00011586                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011586 43E8 0038                  		lea	$38(a0),a1
0001158A 0C11 0080                  		cmpi.b	#$80,(a1)
0001158E 6700                       		beq.s	locret_11038
00011590 5211                       		addq.b	#1,(a1)
00011592 7200                       		moveq	#0,d1
00011594 1219                       		move.b	(a1)+,d1
00011596 4841                       		swap	d1
00011598 E289                       		lsr.l	#1,d1
0001159A 2401                       		move.l	d1,d2
0001159C E289                       		lsr.l	#1,d1
0001159E 2601                       		move.l	d1,d3
000115A0 D682                       		add.l	d2,d3
000115A2 4841                       		swap	d1
000115A4 4842                       		swap	d2
000115A6 4843                       		swap	d3
000115A8 12C3                       		move.b	d3,(a1)+
000115AA 12C2                       		move.b	d2,(a1)+
000115AC 12C1                       		move.b	d1,(a1)+
000115AE                            
000115AE                            locret_11038:
000115AE 4E75                       		rts	
000115B0 4E75                       		rts	
000115B2                            ; ===========================================================================
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            Map_obj5B:
000115B2                            	include "_maps\obj5B.asm"
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115B2                            ; ---------------------------------------------------------------------------
000115B2 0000                       		dc.w byte_1103E-Map_obj5B
000115B4 01                         byte_1103E:	dc.b 1
000115B5 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000115BA                            		even
000115BA                            		even
000115BA                            
000115BA                            ; ===========================================================================
000115BA                            ; ---------------------------------------------------------------------------
000115BA                            ; Object 5C - metal girders in foreground (SLZ)
000115BA                            ; ---------------------------------------------------------------------------
000115BA                            
000115BA                            Obj5C:					; XREF: Obj_Index
000115BA 7000                       		moveq	#0,d0
000115BC 1028 0024                  		move.b	$24(a0),d0
000115C0 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000115C4 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000115C8                            ; ===========================================================================
000115C8 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000115CA 0000                       		dc.w Obj5C_Display-Obj5C_Index
000115CC                            ; ===========================================================================
000115CC                            
000115CC                            Obj5C_Main:				; XREF: Obj5C_Index
000115CC 5428 0024                  		addq.b	#2,$24(a0)
000115D0 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000115D8 317C 83CC 0002             		move.w	#$83CC,2(a0)
000115DE 117C 0010 0019             		move.b	#$10,$19(a0)
000115E4                            
000115E4                            Obj5C_Display:				; XREF: Obj5C_Index
000115E4 2238 F700                  		move.l	($FFFFF700).w,d1
000115E8 D281                       		add.l	d1,d1
000115EA 4841                       		swap	d1
000115EC 4441                       		neg.w	d1
000115EE 3141 0008                  		move.w	d1,8(a0)
000115F2 2238 F704                  		move.l	($FFFFF704).w,d1
000115F6 D281                       		add.l	d1,d1
000115F8 4841                       		swap	d1
000115FA 0241 003F                  		andi.w	#$3F,d1
000115FE 4441                       		neg.w	d1
00011600 0641 0100                  		addi.w	#$100,d1
00011604 3141 000A                  		move.w	d1,$A(a0)
00011608 6000 C586                  		bra.w	DisplaySprite
0001160C                            ; ===========================================================================
0001160C                            ; ---------------------------------------------------------------------------
0001160C                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001160C                            ; ---------------------------------------------------------------------------
0001160C                            Map_obj5C:
0001160C                            	include "_maps\obj5C.asm"
0001160C                            ; ---------------------------------------------------------------------------
0001160C                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001160C                            ; ---------------------------------------------------------------------------
0001160C 0000                       		dc.w byte_11098-Map_obj5C
0001160E 09                         byte_11098:	dc.b 9
0001160F 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011614 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011619 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001161E E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011623 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011628 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001162D 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011632 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011637 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001163C                            		even
0001163C                            		even
0001163C                            
0001163C                            ; ===========================================================================
0001163C                            ; ---------------------------------------------------------------------------
0001163C                            ; Object 1B - water surface (LZ)
0001163C                            ; ---------------------------------------------------------------------------
0001163C                            
0001163C                            Obj1B:					; XREF: Obj_Index
0001163C 7000                       		moveq	#0,d0
0001163E 1028 0024                  		move.b	$24(a0),d0
00011642 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011646 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001164A                            ; ===========================================================================
0001164A 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001164C 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001164E                            ; ===========================================================================
0001164E                            
0001164E                            Obj1B_Main:				; XREF: Obj1B_Index
0001164E 5428 0024                  		addq.b	#2,$24(a0)
00011652 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001165A 317C C300 0002             		move.w	#$C300,2(a0)
00011660 117C 0004 0001             		move.b	#4,1(a0)
00011666 117C 0080 0019             		move.b	#$80,$19(a0)
0001166C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011672                            
00011672                            Obj1B_Action:				; XREF: Obj1B_Index
00011672 3238 F700                  		move.w	($FFFFF700).w,d1
00011676 0241 FFE0                  		andi.w	#$FFE0,d1
0001167A D268 0030                  		add.w	$30(a0),d1
0001167E 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011684 6700                       		beq.s	loc_11114
00011686 0641 0020                  		addi.w	#$20,d1
0001168A                            
0001168A                            loc_11114:
0001168A 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001168E 3238 F646                  		move.w	($FFFFF646).w,d1
00011692 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011696 4A28 0032                  		tst.b	$32(a0)
0001169A 6600                       		bne.s	Obj1B_Animate
0001169C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000116A2 6700                       		beq.s	loc_1114A	; if not, branch
000116A4 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000116A8 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000116AE 6000                       		bra.s	Obj1B_Display
000116B0                            ; ===========================================================================
000116B0                            
000116B0                            Obj1B_Animate:				; XREF: loc_11114
000116B0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000116B4 6600                       		bne.s	Obj1B_Display	; if yes, branch
000116B6 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000116BC 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000116C0                            
000116C0                            loc_1114A:				; XREF: loc_11114
000116C0 5328 001E                  		subq.b	#1,$1E(a0)
000116C4 6A00                       		bpl.s	Obj1B_Display
000116C6 117C 0007 001E             		move.b	#7,$1E(a0)
000116CC 5228 001A                  		addq.b	#1,$1A(a0)
000116D0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000116D6 6500                       		bcs.s	Obj1B_Display
000116D8 117C 0000 001A             		move.b	#0,$1A(a0)
000116DE                            
000116DE                            Obj1B_Display:
000116DE 6000 C4B0                  		bra.w	DisplaySprite
000116E2                            ; ===========================================================================
000116E2                            ; ---------------------------------------------------------------------------
000116E2                            ; Sprite mappings - water surface (LZ)
000116E2                            ; ---------------------------------------------------------------------------
000116E2                            Map_obj1B:
000116E2                            	include "_maps\obj1B.asm"
000116E2                            ; ---------------------------------------------------------------------------
000116E2                            ; Sprite mappings - water surface (LZ)
000116E2                            ; ---------------------------------------------------------------------------
000116E2 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000116E6 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000116EA 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000116EE 03                         byte_11178:	dc.b 3
000116EF FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000116F4 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000116F9 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000116FE 03                         byte_11188:	dc.b 3
000116FF FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011704 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011709 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001170E 03                         byte_11198:	dc.b 3
0001170F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011714 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011719 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001171E 06                         byte_111A8:	dc.b 6
0001171F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011724 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011729 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001172E FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011733 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011738 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001173D 06                         byte_111C7:	dc.b 6
0001173E FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011743 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011748 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001174D FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011752 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011757 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001175C 06                         byte_111E6:	dc.b 6
0001175D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011762 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011767 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001176C FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011771 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011776 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001177C 00                         		even
0001177C 00                         		even
0001177C                            
0001177C                            ; ===========================================================================
0001177C                            ; ---------------------------------------------------------------------------
0001177C                            ; Object 0B - pole that	breaks (LZ)
0001177C                            ; ---------------------------------------------------------------------------
0001177C                            
0001177C                            Obj0B:					; XREF: Obj_Index
0001177C 7000                       		moveq	#0,d0
0001177E 1028 0024                  		move.b	$24(a0),d0
00011782 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011786 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001178A                            ; ===========================================================================
0001178A 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001178C 0000                       		dc.w Obj0B_Action-Obj0B_Index
0001178E 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011790                            ; ===========================================================================
00011790                            
00011790                            Obj0B_Main:				; XREF: Obj0B_Index
00011790 5428 0024                  		addq.b	#2,$24(a0)
00011794 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001179C 317C 43DE 0002             		move.w	#$43DE,2(a0)
000117A2 117C 0004 0001             		move.b	#4,1(a0)
000117A8 117C 0008 0019             		move.b	#8,$19(a0)
000117AE 117C 0004 0018             		move.b	#4,$18(a0)
000117B4 117C 00E1 0020             		move.b	#$E1,$20(a0)
000117BA 7000                       		moveq	#0,d0
000117BC 1028 0028                  		move.b	$28(a0),d0	; get object type
000117C0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000117C4 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000117C8                            
000117C8                            Obj0B_Action:				; XREF: Obj0B_Index
000117C8 4A28 0032                  		tst.b	$32(a0)
000117CC 6700                       		beq.s	Obj0B_Grab
000117CE 4A68 0030                  		tst.w	$30(a0)
000117D2 6700                       		beq.s	Obj0B_MoveUp
000117D4 5368 0030                  		subq.w	#1,$30(a0)
000117D8 6600                       		bne.s	Obj0B_MoveUp
000117DA 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000117E0 6000                       		bra.s	Obj0B_Release
000117E2                            ; ===========================================================================
000117E2                            
000117E2                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000117E2 43F8 D000                  		lea	($FFFFD000).w,a1
000117E6 3028 000C                  		move.w	$C(a0),d0
000117EA 0440 0018                  		subi.w	#$18,d0
000117EE 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000117F4 6700                       		beq.s	Obj0B_MoveDown
000117F6 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000117FA B069 000C                  		cmp.w	$C(a1),d0
000117FE 6500                       		bcs.s	Obj0B_MoveDown
00011800 3340 000C                  		move.w	d0,$C(a1)
00011804                            
00011804                            Obj0B_MoveDown:
00011804 0640 0024                  		addi.w	#$24,d0
00011808 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0001180E 6700                       		beq.s	Obj0B_LetGo
00011810 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011814 B069 000C                  		cmp.w	$C(a1),d0
00011818 6400                       		bcc.s	Obj0B_LetGo
0001181A 3340 000C                  		move.w	d0,$C(a1)
0001181E                            
0001181E                            Obj0B_LetGo:
0001181E 1038 F603                  		move.b	($FFFFF603).w,d0
00011822 0240 0070                  		andi.w	#$70,d0
00011826 6700                       		beq.s	Obj0B_Display
00011828                            
00011828                            Obj0B_Release:				; XREF: Obj0B_Action
00011828 4228 0020                  		clr.b	$20(a0)
0001182C 5428 0024                  		addq.b	#2,$24(a0)
00011830 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011834 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011838 4228 0032                  		clr.b	$32(a0)
0001183C 6000                       		bra.s	Obj0B_Display
0001183E                            ; ===========================================================================
0001183E                            
0001183E                            Obj0B_Grab:				; XREF: Obj0B_Action
0001183E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011842 6700                       		beq.s	Obj0B_Display	; if not, branch
00011844 43F8 D000                  		lea	($FFFFD000).w,a1
00011848 3028 0008                  		move.w	8(a0),d0
0001184C 0640 0014                  		addi.w	#$14,d0
00011850 B069 0008                  		cmp.w	8(a1),d0
00011854 6400                       		bcc.s	Obj0B_Display
00011856 4228 0021                  		clr.b	$21(a0)
0001185A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011860 6400                       		bcc.s	Obj0B_Display
00011862 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011866 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001186A 3028 0008                  		move.w	8(a0),d0
0001186E 0640 0014                  		addi.w	#$14,d0
00011872 3340 0008                  		move.w	d0,8(a1)
00011876 08A9 0000 0022             		bclr	#0,$22(a1)
0001187C 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011882 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011888 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001188E 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011894                            
00011894                            Obj0B_Display:				; XREF: Obj0B_Index
00011894 6000 E3A2                  		bra.w	MarkObjGone
00011898                            ; ===========================================================================
00011898                            ; ---------------------------------------------------------------------------
00011898                            ; Sprite mappings - pole that breaks (LZ)
00011898                            ; ---------------------------------------------------------------------------
00011898                            Map_obj0B:
00011898                            	include "_maps\obj0B.asm"
00011898                            ; ---------------------------------------------------------------------------
00011898                            ; Sprite mappings - pole that breaks (LZ)
00011898                            ; ---------------------------------------------------------------------------
00011898 0000                       		dc.w byte_11326-Map_obj0B
0001189A 0000                       		dc.w byte_11331-Map_obj0B
0001189C 02                         byte_11326:	dc.b 2			; normal pole
0001189D E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000118A2 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000118A7 04                         byte_11331:	dc.b 4			; broken pole
000118A8 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000118AD F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000118B2 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000118B7 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000118BC                            		even
000118BC                            		even
000118BC                            
000118BC                            ; ===========================================================================
000118BC                            ; ---------------------------------------------------------------------------
000118BC                            ; Object 0C - flapping door (LZ)
000118BC                            ; ---------------------------------------------------------------------------
000118BC                            
000118BC                            Obj0C:					; XREF: Obj_Index
000118BC 7000                       		moveq	#0,d0
000118BE 1028 0024                  		move.b	$24(a0),d0
000118C2 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000118C6 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000118CA                            ; ===========================================================================
000118CA 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000118CC 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000118CE                            ; ===========================================================================
000118CE                            
000118CE                            Obj0C_Main:				; XREF: Obj0C_Index
000118CE 5428 0024                  		addq.b	#2,$24(a0)
000118D2 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000118DA 317C 4328 0002             		move.w	#$4328,2(a0)
000118E0 0028 0004 0001             		ori.b	#4,1(a0)
000118E6 117C 0028 0019             		move.b	#$28,$19(a0)
000118EC 7000                       		moveq	#0,d0
000118EE 1028 0028                  		move.b	$28(a0),d0	; get object type
000118F2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000118F6 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000118FA                            
000118FA                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000118FA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000118FE 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011900 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011906 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
0001190C 4A28 0001                  		tst.b	1(a0)
00011910 6A00                       		bpl.s	Obj0C_Solid
00011912 303C 00BB                  		move.w	#$BB,d0
00011916 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
0001191C                            
0001191C                            Obj0C_Solid:
0001191C 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011922 6100 9342                  		bsr.w	AnimateSprite
00011926 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001192A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0001192E 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011930 3038 D008                  		move.w	($FFFFD008).w,d0
00011934 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011938 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001193A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011940 323C 0013                  		move.w	#$13,d1
00011944 343C 0020                  		move.w	#$20,d2
00011948 3602                       		move.w	d2,d3
0001194A 5243                       		addq.w	#1,d3
0001194C 3828 0008                  		move.w	8(a0),d4
00011950 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011954                            
00011954                            Obj0C_Display:
00011954 6000 E2E2                  		bra.w	MarkObjGone
00011958                            ; ===========================================================================
00011958                            Ani_obj0C:
00011958                            	include "_anim\obj0C.asm"
00011958                            ; ---------------------------------------------------------------------------
00011958                            ; Animation script - flapping door (LZ)
00011958                            ; ---------------------------------------------------------------------------
00011958 0000                       		dc.w byte_113E6-Ani_obj0C
0001195A 0000                       		dc.w byte_113EC-Ani_obj0C
0001195C 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011962 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011968                            		even
00011968                            		even
00011968                            
00011968                            ; ---------------------------------------------------------------------------
00011968                            ; Sprite mappings - flapping door (LZ)
00011968                            ; ---------------------------------------------------------------------------
00011968                            Map_obj0C:
00011968                            	include "_maps\obj0C.asm"
00011968                            ; ---------------------------------------------------------------------------
00011968                            ; Sprite mappings - flapping door (LZ)
00011968                            ; ---------------------------------------------------------------------------
00011968 0000                       		dc.w byte_113F8-Map_obj0C
0001196A 0000                       		dc.w byte_11403-Map_obj0C
0001196C 0000                       		dc.w byte_1140E-Map_obj0C
0001196E 02                         byte_113F8:	dc.b 2
0001196F E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011974 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011979 02                         byte_11403:	dc.b 2
0001197A DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001197F 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011984 02                         byte_1140E:	dc.b 2
00011985 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001198A 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011990 00                         		even
00011990 00                         		even
00011990                            
00011990                            ; ===========================================================================
00011990                            ; ---------------------------------------------------------------------------
00011990                            ; Object 71 - invisible	solid blocks
00011990                            ; ---------------------------------------------------------------------------
00011990                            
00011990                            Obj71:					; XREF: Obj_Index
00011990 7000                       		moveq	#0,d0
00011992 1028 0024                  		move.b	$24(a0),d0
00011996 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001199A 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0001199E                            ; ===========================================================================
0001199E 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000119A0 0000                       		dc.w Obj71_Solid-Obj71_Index
000119A2                            ; ===========================================================================
000119A2                            
000119A2                            Obj71_Main:				; XREF: Obj71_Index
000119A2 5428 0024                  		addq.b	#2,$24(a0)
000119A6 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000119AE 317C 8680 0002             		move.w	#$8680,2(a0)
000119B4 0028 0004 0001             		ori.b	#4,1(a0)
000119BA 1028 0028                  		move.b	$28(a0),d0	; get object type
000119BE 1200                       		move.b	d0,d1
000119C0 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000119C4 0640 0010                  		addi.w	#$10,d0
000119C8 E248                       		lsr.w	#1,d0
000119CA 1140 0019                  		move.b	d0,$19(a0)	; set object width
000119CE 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000119D2 5241                       		addq.w	#1,d1
000119D4 E749                       		lsl.w	#3,d1
000119D6 1141 0016                  		move.b	d1,$16(a0)	; set object height
000119DA                            
000119DA                            Obj71_Solid:				; XREF: Obj71_Index
000119DA 6100 C42E                  		bsr.w	ChkObjOnScreen
000119DE 6600                       		bne.s	Obj71_ChkDel
000119E0 7200                       		moveq	#0,d1
000119E2 1228 0019                  		move.b	$19(a0),d1
000119E6 0641 000B                  		addi.w	#$B,d1
000119EA 7400                       		moveq	#0,d2
000119EC 1428 0016                  		move.b	$16(a0),d2
000119F0 3602                       		move.w	d2,d3
000119F2 5243                       		addq.w	#1,d3
000119F4 3828 0008                  		move.w	8(a0),d4
000119F8 6100 E5A8                  		bsr.w	SolidObject71
000119FC                            
000119FC                            Obj71_ChkDel:
000119FC 3028 0008                  		move.w	8(a0),d0
00011A00 0240 FF80                  		andi.w	#$FF80,d0
00011A04 3238 F700                  		move.w	($FFFFF700).w,d1
00011A08 0441 0080                  		subi.w	#$80,d1
00011A0C 0241 FF80                  		andi.w	#$FF80,d1
00011A10 9041                       		sub.w	d1,d0
00011A12 0C40 0280                  		cmpi.w	#$280,d0
00011A16 6200                       		bhi.s	Obj71_Delete
00011A18 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011A1C 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A1E 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A22                            ; ===========================================================================
00011A22                            
00011A22                            Obj71_NoDisplay:
00011A22 4E75                       		rts	
00011A24                            ; ===========================================================================
00011A24                            
00011A24                            Obj71_Delete:
00011A24 4EFA C1A6                  		jmp	DeleteObject
00011A28                            ; ===========================================================================
00011A28                            ; ---------------------------------------------------------------------------
00011A28                            ; Sprite mappings - invisible solid blocks
00011A28                            ; ---------------------------------------------------------------------------
00011A28                            Map_obj71:
00011A28                            	include "_maps\obj71.asm"
00011A28                            ; ---------------------------------------------------------------------------
00011A28                            ; Sprite mappings - invisible solid blocks
00011A28                            ; ---------------------------------------------------------------------------
00011A28 0000                       		dc.w byte_114BC-Map_obj71
00011A2A 0000                       		dc.w byte_114D1-Map_obj71
00011A2C 0000                       		dc.w byte_114E6-Map_obj71
00011A2E 04                         byte_114BC:	dc.b 4
00011A2F F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011A34 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011A39 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011A3E 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011A43 04                         byte_114D1:	dc.b 4
00011A44 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011A49 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011A4E 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011A53 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011A58 04                         byte_114E6:	dc.b 4
00011A59 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011A5E E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011A63 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011A68 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011A6E 00                         		even
00011A6E 00                         		even
00011A6E                            
00011A6E                            ; ===========================================================================
00011A6E                            ; ---------------------------------------------------------------------------
00011A6E                            ; Object 5D - fans (SLZ)
00011A6E                            ; ---------------------------------------------------------------------------
00011A6E                            
00011A6E                            Obj5D:					; XREF: Obj_Index
00011A6E 7000                       		moveq	#0,d0
00011A70 1028 0024                  		move.b	$24(a0),d0
00011A74 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011A78 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011A7C                            ; ===========================================================================
00011A7C 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011A7E 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011A80                            ; ===========================================================================
00011A80                            
00011A80                            Obj5D_Main:				; XREF: Obj5D_Index
00011A80 5428 0024                  		addq.b	#2,$24(a0)
00011A84 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011A8C 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011A92 0028 0004 0001             		ori.b	#4,1(a0)
00011A98 117C 0010 0019             		move.b	#$10,$19(a0)
00011A9E 117C 0004 0018             		move.b	#4,$18(a0)
00011AA4                            
00011AA4                            Obj5D_Delay:				; XREF: Obj5D_Index
00011AA4 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011AAA 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011AAC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011AB0 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011AB2 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011AB8 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011ABE 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011AC0 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011AC6                            
00011AC6                            Obj5D_Blow:
00011AC6 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011ACA 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011ACE 43F8 D000                  		lea	($FFFFD000).w,a1
00011AD2 3029 0008                  		move.w	8(a1),d0
00011AD6 9068 0008                  		sub.w	8(a0),d0
00011ADA 0828 0000 0022             		btst	#0,$22(a0)
00011AE0 6600                       		bne.s	Obj5D_ChkSonic
00011AE2 4440                       		neg.w	d0
00011AE4                            
00011AE4                            Obj5D_ChkSonic:
00011AE4 0640 0050                  		addi.w	#$50,d0
00011AE8 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011AEC 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011AEE 3229 000C                  		move.w	$C(a1),d1
00011AF2 0641 0060                  		addi.w	#$60,d1
00011AF6 9268 000C                  		sub.w	$C(a0),d1
00011AFA 6500                       		bcs.s	Obj5D_Animate
00011AFC 0C41 0070                  		cmpi.w	#$70,d1
00011B00 6400                       		bcc.s	Obj5D_Animate
00011B02 0440 0050                  		subi.w	#$50,d0
00011B06 6400                       		bcc.s	loc_1159A
00011B08 4640                       		not.w	d0
00011B0A D040                       		add.w	d0,d0
00011B0C                            
00011B0C                            loc_1159A:
00011B0C 0640 0060                  		addi.w	#$60,d0
00011B10 0828 0000 0022             		btst	#0,$22(a0)
00011B16 6600                       		bne.s	loc_115A8
00011B18 4440                       		neg.w	d0
00011B1A                            
00011B1A                            loc_115A8:
00011B1A 4400                       		neg.b	d0
00011B1C E840                       		asr.w	#4,d0
00011B1E 0828 0000 0028             		btst	#0,$28(a0)
00011B24 6700                       		beq.s	Obj5D_MoveSonic
00011B26 4440                       		neg.w	d0
00011B28                            
00011B28                            Obj5D_MoveSonic:
00011B28 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B2C                            
00011B2C                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B2C 5328 001E                  		subq.b	#1,$1E(a0)
00011B30 6A00                       		bpl.s	Obj5D_ChkDel
00011B32 117C 0000 001E             		move.b	#0,$1E(a0)
00011B38 5228 001B                  		addq.b	#1,$1B(a0)
00011B3C 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011B42 6500                       		bcs.s	loc_115D8
00011B44 117C 0000 001B             		move.b	#0,$1B(a0)
00011B4A                            
00011B4A                            loc_115D8:
00011B4A 7000                       		moveq	#0,d0
00011B4C 0828 0000 0028             		btst	#0,$28(a0)
00011B52 6700                       		beq.s	loc_115E4
00011B54 7002                       		moveq	#2,d0
00011B56                            
00011B56                            loc_115E4:
00011B56 D028 001B                  		add.b	$1B(a0),d0
00011B5A 1140 001A                  		move.b	d0,$1A(a0)
00011B5E                            
00011B5E                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011B5E 6100 C030                  		bsr.w	DisplaySprite
00011B62 3028 0008                  		move.w	8(a0),d0
00011B66 0240 FF80                  		andi.w	#$FF80,d0
00011B6A 3238 F700                  		move.w	($FFFFF700).w,d1
00011B6E 0441 0080                  		subi.w	#$80,d1
00011B72 0241 FF80                  		andi.w	#$FF80,d1
00011B76 9041                       		sub.w	d1,d0
00011B78 0C40 0280                  		cmpi.w	#$280,d0
00011B7C 6200 C04E                  		bhi.w	DeleteObject
00011B80 4E75                       		rts	
00011B82                            ; ===========================================================================
00011B82                            ; ---------------------------------------------------------------------------
00011B82                            ; Sprite mappings - fans (SLZ)
00011B82                            ; ---------------------------------------------------------------------------
00011B82                            Map_obj5D:
00011B82                            	include "_maps\obj5D.asm"
00011B82                            ; ---------------------------------------------------------------------------
00011B82                            ; Sprite mappings - fans (SLZ)
00011B82                            ; ---------------------------------------------------------------------------
00011B82 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011B86 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011B8A 0000                       		dc.w byte_1161A-Map_obj5D
00011B8C 02                         byte_1161A:	dc.b 2
00011B8D F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011B92 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011B97 02                         byte_11625:	dc.b 2
00011B98 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011B9D 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011BA2 02                         byte_11630:	dc.b 2
00011BA3 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011BA8 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011BAE 00                         		even
00011BAE 00                         		even
00011BAE                            
00011BAE                            ; ===========================================================================
00011BAE                            ; ---------------------------------------------------------------------------
00011BAE                            ; Object 5E - seesaws (SLZ)
00011BAE                            ; ---------------------------------------------------------------------------
00011BAE                            
00011BAE                            Obj5E:					; XREF: Obj_Index
00011BAE 7000                       		moveq	#0,d0
00011BB0 1028 0024                  		move.b	$24(a0),d0
00011BB4 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011BB8 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011BBC 3028 0030                  		move.w	$30(a0),d0
00011BC0 0240 FF80                  		andi.w	#$FF80,d0
00011BC4 3238 F700                  		move.w	($FFFFF700).w,d1
00011BC8 0441 0080                  		subi.w	#$80,d1
00011BCC 0241 FF80                  		andi.w	#$FF80,d1
00011BD0 9041                       		sub.w	d1,d0
00011BD2 6B00 BFF8                  		bmi.w	DeleteObject
00011BD6 0C40 0280                  		cmpi.w	#$280,d0
00011BDA 6200 BFF0                  		bhi.w	DeleteObject
00011BDE 6000 BFB0                  		bra.w	DisplaySprite
00011BE2                            ; ===========================================================================
00011BE2 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011BE4 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011BE6 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011BE8 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011BEA 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011BEC 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011BEE                            ; ===========================================================================
00011BEE                            
00011BEE                            Obj5E_Main:				; XREF: Obj5E_Index
00011BEE 5428 0024                  		addq.b	#2,$24(a0)
00011BF2 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011BFA 317C 0374 0002             		move.w	#$374,2(a0)
00011C00 0028 0004 0001             		ori.b	#4,1(a0)
00011C06 117C 0004 0018             		move.b	#4,$18(a0)
00011C0C 117C 0030 0019             		move.b	#$30,$19(a0)
00011C12 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C18 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011C1C 6600                       		bne.s	loc_116D2	; if not, branch
00011C1E 6100 C40C                  		bsr.w	SingleObjLoad2
00011C22 6600                       		bne.s	loc_116D2
00011C24 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C28 5C29 0024                  		addq.b	#6,$24(a1)
00011C2C 3368 0008 0008             		move.w	8(a0),8(a1)
00011C32 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C38 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C3E 2348 003C                  		move.l	a0,$3C(a1)
00011C42                            
00011C42                            loc_116D2:
00011C42 0828 0000 0022             		btst	#0,$22(a0)
00011C48 6700                       		beq.s	loc_116E0
00011C4A 117C 0002 001A             		move.b	#2,$1A(a0)
00011C50                            
00011C50                            loc_116E0:
00011C50 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011C56                            
00011C56                            Obj5E_Slope:				; XREF: Obj5E_Index
00011C56 1228 003A                  		move.b	$3A(a0),d1
00011C5A 6100 0000                  		bsr.w	loc_11766
00011C5E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C64 0828 0000 001A             		btst	#0,$1A(a0)
00011C6A 6700                       		beq.s	loc_11702
00011C6C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C72                            
00011C72                            loc_11702:
00011C72 43F8 D000                  		lea	($FFFFD000).w,a1
00011C76 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011C7C 323C 0030                  		move.w	#$30,d1
00011C80 4EB9 0000 7972             		jsr	(SlopeObject).l
00011C86 4E75                       		rts	
00011C88                            ; ===========================================================================
00011C88                            
00011C88                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011C88 6100 0000                  		bsr.w	loc_1174A
00011C8C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C92 0828 0000 001A             		btst	#0,$1A(a0)
00011C98 6700                       		beq.s	loc_11730
00011C9A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011CA0                            
00011CA0                            loc_11730:
00011CA0 323C 0030                  		move.w	#$30,d1
00011CA4 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011CAA 323C 0030                  		move.w	#$30,d1
00011CAE 3428 0008                  		move.w	8(a0),d2
00011CB2 4EB9 0000 8970             		jsr	SlopeObject2
00011CB8 4E75                       		rts	
00011CBA                            ; ===========================================================================
00011CBA                            
00011CBA                            loc_1174A:				; XREF: Obj5E_Slope2
00011CBA 7202                       		moveq	#2,d1
00011CBC 43F8 D000                  		lea	($FFFFD000).w,a1
00011CC0 3028 0008                  		move.w	8(a0),d0
00011CC4 9069 0008                  		sub.w	8(a1),d0
00011CC8 6400                       		bcc.s	loc_1175E
00011CCA 4440                       		neg.w	d0
00011CCC 7200                       		moveq	#0,d1
00011CCE                            
00011CCE                            loc_1175E:
00011CCE 0C40 0008                  		cmpi.w	#8,d0
00011CD2 6400                       		bcc.s	loc_11766
00011CD4 7201                       		moveq	#1,d1
00011CD6                            
00011CD6                            loc_11766:
00011CD6 1028 001A                  		move.b	$1A(a0),d0
00011CDA B001                       		cmp.b	d1,d0
00011CDC 6700                       		beq.s	locret_11790
00011CDE 6400                       		bcc.s	loc_11772
00011CE0 5400                       		addq.b	#2,d0
00011CE2                            
00011CE2                            loc_11772:
00011CE2 5300                       		subq.b	#1,d0
00011CE4 1140 001A                  		move.b	d0,$1A(a0)
00011CE8 1141 003A                  		move.b	d1,$3A(a0)
00011CEC 08A8 0000 0001             		bclr	#0,1(a0)
00011CF2 0828 0001 001A             		btst	#1,$1A(a0)
00011CF8 6700                       		beq.s	locret_11790
00011CFA 08E8 0000 0001             		bset	#0,1(a0)
00011D00                            
00011D00                            locret_11790:
00011D00 4E75                       		rts	
00011D02                            ; ===========================================================================
00011D02                            
00011D02                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011D02 5428 0024                  		addq.b	#2,$24(a0)
00011D06 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011D0E 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011D14 0028 0004 0001             		ori.b	#4,1(a0)
00011D1A 117C 0004 0018             		move.b	#4,$18(a0)
00011D20 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D26 117C 000C 0019             		move.b	#$C,$19(a0)
00011D2C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D32 0668 0028 0008             		addi.w	#$28,8(a0)
00011D38 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011D3E 117C 0001 001A             		move.b	#1,$1A(a0)
00011D44 0828 0000 0022             		btst	#0,$22(a0)
00011D4A 6700                       		beq.s	Obj5E_MoveSpike
00011D4C 0468 0050 0008             		subi.w	#$50,8(a0)
00011D52 117C 0002 003A             		move.b	#2,$3A(a0)
00011D58                            
00011D58                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011D58 2268 003C                  		movea.l	$3C(a0),a1
00011D5C 7000                       		moveq	#0,d0
00011D5E 1028 003A                  		move.b	$3A(a0),d0
00011D62 9029 003A                  		sub.b	$3A(a1),d0
00011D66 6700                       		beq.s	loc_1183E
00011D68 6400                       		bcc.s	loc_117FC
00011D6A 4400                       		neg.b	d0
00011D6C                            
00011D6C                            loc_117FC:
00011D6C 323C F7E8                  		move.w	#-$818,d1
00011D70 343C FEEC                  		move.w	#-$114,d2
00011D74 0C00 0001                  		cmpi.b	#1,d0
00011D78 6700                       		beq.s	loc_11822
00011D7A 323C F510                  		move.w	#-$AF0,d1
00011D7E 343C FF34                  		move.w	#-$CC,d2
00011D82 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011D88 6D00                       		blt.s	loc_11822
00011D8A 323C F200                  		move.w	#-$E00,d1
00011D8E 343C FF60                  		move.w	#-$A0,d2
00011D92                            
00011D92                            loc_11822:
00011D92 3141 0012                  		move.w	d1,$12(a0)
00011D96 3142 0010                  		move.w	d2,$10(a0)
00011D9A 3028 0008                  		move.w	8(a0),d0
00011D9E 9068 0030                  		sub.w	$30(a0),d0
00011DA2 6400                       		bcc.s	loc_11838
00011DA4 4468 0010                  		neg.w	$10(a0)
00011DA8                            
00011DA8                            loc_11838:
00011DA8 5428 0024                  		addq.b	#2,$24(a0)
00011DAC 6000                       		bra.s	Obj5E_SpikeFall
00011DAE                            ; ===========================================================================
00011DAE                            
00011DAE                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011DAE 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011DB4 7000                       		moveq	#0,d0
00011DB6 1029 001A                  		move.b	$1A(a1),d0
00011DBA 343C 0028                  		move.w	#$28,d2
00011DBE 3228 0008                  		move.w	8(a0),d1
00011DC2 9268 0030                  		sub.w	$30(a0),d1
00011DC6 6400                       		bcc.s	loc_1185C
00011DC8 4442                       		neg.w	d2
00011DCA 5440                       		addq.w	#2,d0
00011DCC                            
00011DCC                            loc_1185C:
00011DCC D040                       		add.w	d0,d0
00011DCE 3228 0034                  		move.w	$34(a0),d1
00011DD2 D272 0000                  		add.w	(a2,d0.w),d1
00011DD6 3141 000C                  		move.w	d1,$C(a0)
00011DDA D468 0030                  		add.w	$30(a0),d2
00011DDE 3142 0008                  		move.w	d2,8(a0)
00011DE2 4268 000E                  		clr.w	$E(a0)
00011DE6 4268 000A                  		clr.w	$A(a0)
00011DEA 4E75                       		rts	
00011DEC                            ; ===========================================================================
00011DEC                            
00011DEC                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011DEC 4A68 0012                  		tst.w	$12(a0)
00011DF0 6A00                       		bpl.s	loc_1189A
00011DF2 6100 BD4A                  		bsr.w	ObjectFall
00011DF6 3028 0034                  		move.w	$34(a0),d0
00011DFA 0440 002F                  		subi.w	#$2F,d0
00011DFE B068 000C                  		cmp.w	$C(a0),d0
00011E02 6E00                       		bgt.s	locret_11898
00011E04 6100 BD38                  		bsr.w	ObjectFall
00011E08                            
00011E08                            locret_11898:
00011E08 4E75                       		rts	
00011E0A                            ; ===========================================================================
00011E0A                            
00011E0A                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011E0A 6100 BD32                  		bsr.w	ObjectFall
00011E0E 2268 003C                  		movea.l	$3C(a0),a1
00011E12 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E18 7000                       		moveq	#0,d0
00011E1A 1029 001A                  		move.b	$1A(a1),d0
00011E1E 3228 0008                  		move.w	8(a0),d1
00011E22 9268 0030                  		sub.w	$30(a0),d1
00011E26 6400                       		bcc.s	loc_118BA
00011E28 5440                       		addq.w	#2,d0
00011E2A                            
00011E2A                            loc_118BA:
00011E2A D040                       		add.w	d0,d0
00011E2C 3228 0034                  		move.w	$34(a0),d1
00011E30 D272 0000                  		add.w	(a2,d0.w),d1
00011E34 B268 000C                  		cmp.w	$C(a0),d1
00011E38 6E00                       		bgt.s	locret_11938
00011E3A 2268 003C                  		movea.l	$3C(a0),a1
00011E3E 7202                       		moveq	#2,d1
00011E40 4A68 0010                  		tst.w	$10(a0)
00011E44 6B00                       		bmi.s	Obj5E_Spring
00011E46 7200                       		moveq	#0,d1
00011E48                            
00011E48                            Obj5E_Spring:
00011E48 1341 003A                  		move.b	d1,$3A(a1)
00011E4C 1141 003A                  		move.b	d1,$3A(a0)
00011E50 B229 001A                  		cmp.b	$1A(a1),d1
00011E54 6700                       		beq.s	loc_1192C
00011E56 08A9 0003 0022             		bclr	#3,$22(a1)
00011E5C 6700                       		beq.s	loc_1192C
00011E5E 4229 0025                  		clr.b	$25(a1)
00011E62 137C 0002 0024             		move.b	#2,$24(a1)
00011E68 45F8 D000                  		lea	($FFFFD000).w,a2
00011E6C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011E72 446A 0012                  		neg.w	$12(a2)
00011E76 08EA 0001 0022             		bset	#1,$22(a2)
00011E7C 08AA 0003 0022             		bclr	#3,$22(a2)
00011E82 422A 003C                  		clr.b	$3C(a2)
00011E86 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011E8C 157C 0002 0024             		move.b	#2,$24(a2)
00011E92 303C 00CC                  		move.w	#$CC,d0
00011E96 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011E9C                            
00011E9C                            loc_1192C:
00011E9C 4268 0010                  		clr.w	$10(a0)
00011EA0 4268 0012                  		clr.w	$12(a0)
00011EA4 5528 0024                  		subq.b	#2,$24(a0)
00011EA8                            
00011EA8                            locret_11938:
00011EA8 4E75                       		rts	
00011EAA                            ; ===========================================================================
00011EAA FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011EB4                            
00011EB4                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011EE4                            		even
00011EE4                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011F14                            		even
00011F14                            ; ---------------------------------------------------------------------------
00011F14                            ; Sprite mappings - seesaws (SLZ)
00011F14                            ; ---------------------------------------------------------------------------
00011F14                            Map_obj5E:
00011F14                            	include "_maps\obj5E.asm"
00011F14                            ; ---------------------------------------------------------------------------
00011F14                            ; Sprite mappings - seesaws (SLZ)
00011F14                            ; ---------------------------------------------------------------------------
00011F14 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F18 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F1C 07                         byte_119AC:	dc.b 7
00011F1D D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F22 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F27 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F2C EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F31 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011F36 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011F3B FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011F40 04                         byte_119D0:	dc.b 4
00011F41 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011F46 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011F4B E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011F50 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011F56 00                         		even
00011F56 00                         		even
00011F56                            
00011F56                            ; ---------------------------------------------------------------------------
00011F56                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F56                            ; ---------------------------------------------------------------------------
00011F56                            Map_obj5Ea:
00011F56                            	include "_maps\obj5Eballs.asm"
00011F56                            ; ---------------------------------------------------------------------------
00011F56                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F56                            ; ---------------------------------------------------------------------------
00011F56 0000                       		dc.w byte_119EA-Map_obj5Ea
00011F58 0000                       		dc.w byte_119F0-Map_obj5Ea
00011F5A 01                         byte_119EA:	dc.b 1
00011F5B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F60 01                         byte_119F0:	dc.b 1
00011F61 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011F66                            		even
00011F66                            		even
00011F66                            
00011F66                            ; ===========================================================================
00011F66                            ; ---------------------------------------------------------------------------
00011F66                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011F66                            ; ---------------------------------------------------------------------------
00011F66                            
00011F66                            Obj5F:					; XREF: Obj_Index
00011F66 7000                       		moveq	#0,d0
00011F68 1028 0024                  		move.b	$24(a0),d0
00011F6C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011F70 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011F74                            ; ===========================================================================
00011F74 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011F76 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011F78 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011F7A 0000                       		dc.w Obj5F_End-Obj5F_Index
00011F7C                            ; ===========================================================================
00011F7C                            
00011F7C                            Obj5F_Main:				; XREF: Obj5F_Index
00011F7C 5428 0024                  		addq.b	#2,$24(a0)
00011F80 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011F88 317C 0400 0002             		move.w	#$400,2(a0)
00011F8E 0028 0004 0001             		ori.b	#4,1(a0)
00011F94 117C 0003 0018             		move.b	#3,$18(a0)
00011F9A 117C 000C 0019             		move.b	#$C,$19(a0)
00011FA0 1028 0028                  		move.b	$28(a0),d0
00011FA4 6700                       		beq.s	loc_11A3C
00011FA6 1140 0024                  		move.b	d0,$24(a0)
00011FAA 4E75                       		rts	
00011FAC                            ; ===========================================================================
00011FAC                            
00011FAC                            loc_11A3C:
00011FAC 117C 009A 0020             		move.b	#$9A,$20(a0)
00011FB2 0868 0000 0022             		bchg	#0,$22(a0)
00011FB8                            
00011FB8                            Obj5F_Action:				; XREF: Obj5F_Index
00011FB8 7000                       		moveq	#0,d0
00011FBA 1028 0025                  		move.b	$25(a0),d0
00011FBE 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011FC2 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011FC6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011FCC 6100 8C98                  		bsr.w	AnimateSprite
00011FD0 6000 DC66                  		bra.w	MarkObjGone
00011FD4                            ; ===========================================================================
00011FD4 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011FD6 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011FD8 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011FDA                            ; ===========================================================================
00011FDA                            
00011FDA                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011FDA 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FDE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FE2 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011FE4 5428 0025                  		addq.b	#2,$25(a0)
00011FE8 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011FEE 317C 0010 0010             		move.w	#$10,$10(a0)
00011FF4 117C 0001 001C             		move.b	#1,$1C(a0)
00011FFA 0868 0000 0022             		bchg	#0,$22(a0)
00012000 6700                       		beq.s	locret_11A96
00012002 4468 0010                  		neg.w	$10(a0)		; change direction
00012006                            
00012006                            locret_11A96:
00012006 4E75                       		rts	
00012008                            ; ===========================================================================
00012008                            
00012008                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012008 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001200C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012010 6B00                       		bmi.s	loc_11AA8
00012012 6100 BB56                  		bsr.w	SpeedToPos
00012016 4E75                       		rts	
00012018                            ; ===========================================================================
00012018                            
00012018                            loc_11AA8:
00012018 5528 0025                  		subq.b	#2,$25(a0)
0001201C 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012022 4268 0010                  		clr.w	$10(a0)		; stop walking
00012026 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001202C 4E75                       		rts	
0001202E                            ; ===========================================================================
0001202E                            
0001202E                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001202E 5368 0030                  		subq.w	#1,$30(a0)
00012032 6A00                       		bpl.s	locret_11AD0
00012034 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012038 117C 0000 0024             		move.b	#0,$24(a0)
0001203E                            
0001203E                            locret_11AD0:
0001203E 4E75                       		rts	
00012040                            ; ===========================================================================
00012040                            
00012040                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012040 3038 D008                  		move.w	($FFFFD008).w,d0
00012044 9068 0008                  		sub.w	8(a0),d0
00012048 6400                       		bcc.s	loc_11ADE
0001204A 4440                       		neg.w	d0
0001204C                            
0001204C                            loc_11ADE:
0001204C 0C40 0060                  		cmpi.w	#$60,d0
00012050 6400                       		bcc.s	locret_11B5E
00012052 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012056 9068 000C                  		sub.w	$C(a0),d0
0001205A 6400                       		bcc.s	Obj5F_MakeFuse
0001205C 4440                       		neg.w	d0
0001205E                            
0001205E                            Obj5F_MakeFuse:
0001205E 0C40 0060                  		cmpi.w	#$60,d0
00012062 6400                       		bcc.s	locret_11B5E
00012064 4A78 FE08                  		tst.w	($FFFFFE08).w
00012068 6600                       		bne.s	locret_11B5E
0001206A 117C 0004 0025             		move.b	#4,$25(a0)
00012070 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012076 4268 0010                  		clr.w	$10(a0)
0001207A 117C 0002 001C             		move.b	#2,$1C(a0)
00012080 6100 BFAA                  		bsr.w	SingleObjLoad2
00012084 6600                       		bne.s	locret_11B5E
00012086 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001208A 3368 0008 0008             		move.w	8(a0),8(a1)
00012090 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012096 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001209C 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120A2 137C 0004 0028             		move.b	#4,$28(a1)
000120A8 137C 0003 001C             		move.b	#3,$1C(a1)
000120AE 337C 0010 0012             		move.w	#$10,$12(a1)
000120B4 0828 0001 0022             		btst	#1,$22(a0)
000120BA 6700                       		beq.s	loc_11B54
000120BC 4469 0012                  		neg.w	$12(a1)
000120C0                            
000120C0                            loc_11B54:
000120C0 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000120C6 2348 003C                  		move.l	a0,$3C(a1)
000120CA                            
000120CA                            locret_11B5E:
000120CA 4E75                       		rts	
000120CC                            ; ===========================================================================
000120CC                            
000120CC                            Obj5F_Display:				; XREF: Obj5F_Index
000120CC 6100                       		bsr.s	loc_11B70
000120CE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000120D4 6100 8B90                  		bsr.w	AnimateSprite
000120D8 6000 DB5E                  		bra.w	MarkObjGone
000120DC                            ; ===========================================================================
000120DC                            
000120DC                            loc_11B70:
000120DC 5368 0030                  		subq.w	#1,$30(a0)
000120E0 6B00                       		bmi.s	loc_11B7C
000120E2 6100 BA86                  		bsr.w	SpeedToPos
000120E6 4E75                       		rts	
000120E8                            ; ===========================================================================
000120E8                            
000120E8                            loc_11B7C:
000120E8 4268 0030                  		clr.w	$30(a0)
000120EC 4228 0024                  		clr.b	$24(a0)
000120F0 3168 0034 000C             		move.w	$34(a0),$C(a0)
000120F6 7203                       		moveq	#3,d1
000120F8 2248                       		movea.l	a0,a1
000120FA 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012100 6000                       		bra.s	Obj5F_MakeShrap
00012102                            ; ===========================================================================
00012102                            
00012102                            Obj5F_Loop:
00012102 6100 BF28                  		bsr.w	SingleObjLoad2
00012106 6600                       		bne.s	loc_11BCE
00012108                            
00012108                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012108 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001210C 3368 0008 0008             		move.w	8(a0),8(a1)
00012112 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012118 137C 0006 0028             		move.b	#6,$28(a1)
0001211E 137C 0004 001C             		move.b	#4,$1C(a1)
00012124 335A 0010                  		move.w	(a2)+,$10(a1)
00012128 335A 0012                  		move.w	(a2)+,$12(a1)
0001212C 137C 0098 0020             		move.b	#$98,$20(a1)
00012132 08E9 0007 0001             		bset	#7,1(a1)
00012138                            
00012138                            loc_11BCE:
00012138 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001213C                            
0001213C 117C 0006 0024             		move.b	#6,$24(a0)
00012142                            
00012142                            Obj5F_End:				; XREF: Obj5F_Index
00012142 6100 BA26                  		bsr.w	SpeedToPos
00012146 0668 0018 0012             		addi.w	#$18,$12(a0)
0001214C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012152 6100 8B12                  		bsr.w	AnimateSprite
00012156 4A28 0001                  		tst.b	1(a0)
0001215A 6A00 BA70                  		bpl.w	DeleteObject
0001215E 6000 BA30                  		bra.w	DisplaySprite
00012162                            ; ===========================================================================
00012162 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012172                            
00012172                            Ani_obj5F:
00012172                            	include "_anim\obj5F.asm"
00012172                            ; ---------------------------------------------------------------------------
00012172                            ; Animation script - Bomb enemy
00012172                            ; ---------------------------------------------------------------------------
00012172 0000                       		dc.w byte_11C12-Ani_obj5F
00012174 0000                       		dc.w byte_11C16-Ani_obj5F
00012176 0000                       		dc.w byte_11C1C-Ani_obj5F
00012178 0000                       		dc.w byte_11C20-Ani_obj5F
0001217A 0000                       		dc.w byte_11C24-Ani_obj5F
0001217C 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012180 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012186 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001218A 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001218E 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012192                            		even
00012192                            		even
00012192                            
00012192                            ; ---------------------------------------------------------------------------
00012192                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012192                            ; ---------------------------------------------------------------------------
00012192                            Map_obj5F:
00012192                            	include "_maps\obj5F.asm"
00012192                            ; ---------------------------------------------------------------------------
00012192                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012192                            ; ---------------------------------------------------------------------------
00012192 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012196 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001219A 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001219E 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000121A2 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000121A6 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000121AA 03                         byte_11C40:	dc.b 3
000121AB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000121B0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121B5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121BA 03                         byte_11C50:	dc.b 3
000121BB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121C0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121C5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121CA 03                         byte_11C60:	dc.b 3
000121CB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121D0 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000121D5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121DA 03                         byte_11C70:	dc.b 3
000121DB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121E0 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000121E5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121EA 03                         byte_11C80:	dc.b 3
000121EB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121F0 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000121F5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121FA 03                         byte_11C90:	dc.b 3
000121FB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012200 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012205 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001220A 02                         byte_11CA0:	dc.b 2
0001220B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012210 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012215 02                         byte_11CAB:	dc.b 2
00012216 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001221B 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012220 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012221 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012226 01                         byte_11CBC:	dc.b 1			; fuse
00012227 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001222C 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001222D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012232 01                         byte_11CC8:	dc.b 1			; fireball
00012233 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012238                            		even
00012238                            		even
00012238                            
00012238                            ; ===========================================================================
00012238                            ; ---------------------------------------------------------------------------
00012238                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012238                            ; ---------------------------------------------------------------------------
00012238                            
00012238                            Obj60:					; XREF: Obj_Index
00012238 7000                       		moveq	#0,d0
0001223A 1028 0024                  		move.b	$24(a0),d0
0001223E 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012242 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012246                            ; ===========================================================================
00012246 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012248 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001224A 0000                       		dc.w Obj60_Display-Obj60_Index
0001224C 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001224E 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012250                            ; ===========================================================================
00012250                            
00012250                            Obj60_Main:				; XREF: Obj60_Index
00012250 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012258 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001225E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012264 6700                       		beq.s	loc_11D02
00012266 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001226C                            
0001226C                            loc_11D02:
0001226C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012272 6600                       		bne.s	loc_11D10
00012274 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001227A                            
0001227A                            loc_11D10:
0001227A 0028 0004 0001             		ori.b	#4,1(a0)
00012280 117C 0004 0018             		move.b	#4,$18(a0)
00012286 117C 000B 0020             		move.b	#$B,$20(a0)
0001228C 117C 000C 0019             		move.b	#$C,$19(a0)
00012292 7400                       		moveq	#0,d2
00012294 45E8 0037                  		lea	$37(a0),a2
00012298 264A                       		movea.l	a2,a3
0001229A 524A                       		addq.w	#1,a2
0001229C 7203                       		moveq	#3,d1
0001229E                            
0001229E                            Obj60_MakeOrbs:
0001229E 6100 BD8C                  		bsr.w	SingleObjLoad2
000122A2 6600                       		bne.s	loc_11D90
000122A4 5213                       		addq.b	#1,(a3)
000122A6 3A09                       		move.w	a1,d5
000122A8 0445 D000                  		subi.w	#-$3000,d5
000122AC EC4D                       		lsr.w	#6,d5
000122AE 0245 007F                  		andi.w	#$7F,d5
000122B2 14C5                       		move.b	d5,(a2)+
000122B4 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000122B6 137C 0006 0024             		move.b	#6,$24(a1)
000122BC 2368 0004 0004             		move.l	4(a0),4(a1)
000122C2 3368 0002 0002             		move.w	2(a0),2(a1)
000122C8 0029 0004 0001             		ori.b	#4,1(a1)
000122CE 137C 0004 0018             		move.b	#4,$18(a1)
000122D4 137C 0008 0019             		move.b	#8,$19(a1)
000122DA 137C 0003 001A             		move.b	#3,$1A(a1)
000122E0 137C 0098 0020             		move.b	#$98,$20(a1)
000122E6 1342 0026                  		move.b	d2,$26(a1)
000122EA 0602 0040                  		addi.b	#$40,d2
000122EE 2348 003C                  		move.l	a0,$3C(a1)
000122F2 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000122F6                            
000122F6                            loc_11D90:
000122F6 7001                       		moveq	#1,d0
000122F8 0828 0000 0022             		btst	#0,$22(a0)
000122FE 6700                       		beq.s	Obj60_Move
00012300 4440                       		neg.w	d0
00012302                            
00012302                            Obj60_Move:
00012302 1140 0036                  		move.b	d0,$36(a0)
00012306 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001230C 5428 0024                  		addq.b	#2,$24(a0)
00012310 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012316 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001231C 6700                       		beq.s	locret_11DBC	; if not, branch
0001231E 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012322                            
00012322                            locret_11DBC:
00012322 4E75                       		rts	
00012324                            ; ===========================================================================
00012324                            
00012324                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012324 3038 D008                  		move.w	($FFFFD008).w,d0
00012328 9068 0008                  		sub.w	8(a0),d0
0001232C 6400                       		bcc.s	loc_11DCA
0001232E 4440                       		neg.w	d0
00012330                            
00012330                            loc_11DCA:
00012330 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012334 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012336 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001233A 9068 000C                  		sub.w	$C(a0),d0
0001233E 6400                       		bcc.s	loc_11DDC
00012340 4440                       		neg.w	d0
00012342                            
00012342                            loc_11DDC:
00012342 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012346 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012348 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001234C 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001234E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012354                            
00012354                            Obj60_Animate:
00012354 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001235A 6100 890A                  		bsr.w	AnimateSprite
0001235E 6000 0000                  		bra.w	Obj60_ChkDel
00012362                            ; ===========================================================================
00012362                            
00012362                            Obj60_Display:				; XREF: Obj60_Index
00012362 6100 B806                  		bsr.w	SpeedToPos
00012366                            
00012366                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012366 3028 0008                  		move.w	8(a0),d0
0001236A 0240 FF80                  		andi.w	#$FF80,d0
0001236E 3238 F700                  		move.w	($FFFFF700).w,d1
00012372 0441 0080                  		subi.w	#$80,d1
00012376 0241 FF80                  		andi.w	#$FF80,d1
0001237A 9041                       		sub.w	d1,d0
0001237C 0C40 0280                  		cmpi.w	#$280,d0
00012380 6200 0000                  		bhi.w	Obj60_ChkGone
00012384 6000 B80A                  		bra.w	DisplaySprite
00012388                            ; ===========================================================================
00012388                            
00012388                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012388 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001238C 7000                       		moveq	#0,d0
0001238E 1028 0023                  		move.b	$23(a0),d0
00012392 6700                       		beq.s	loc_11E34
00012394 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001239A                            
0001239A                            loc_11E34:
0001239A 45E8 0037                  		lea	$37(a0),a2
0001239E 7400                       		moveq	#0,d2
000123A0 141A                       		move.b	(a2)+,d2
000123A2 5342                       		subq.w	#1,d2
000123A4 6500                       		bcs.s	Obj60_Delete
000123A6                            
000123A6                            loc_11E40:
000123A6 7000                       		moveq	#0,d0
000123A8 101A                       		move.b	(a2)+,d0
000123AA ED48                       		lsl.w	#6,d0
000123AC 0680 00FF D000             		addi.l	#$FFD000,d0
000123B2 2240                       		movea.l	d0,a1
000123B4 6100 B818                  		bsr.w	DeleteObject2
000123B8 51CA FFEC                  		dbf	d2,loc_11E40
000123BC                            
000123BC                            Obj60_Delete:
000123BC 6000 B80E                  		bra.w	DeleteObject
000123C0                            ; ===========================================================================
000123C0                            
000123C0                            Obj60_MoveOrb:				; XREF: Obj60_Index
000123C0 2268 003C                  		movea.l	$3C(a0),a1
000123C4 0C11 0060                  		cmpi.b	#$60,0(a1)
000123C8 6600 B802                  		bne.w	DeleteObject
000123CC 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000123D2 6600                       		bne.s	Obj60_Circle
000123D4 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000123DA 6600                       		bne.s	Obj60_Circle
000123DC 5428 0024                  		addq.b	#2,$24(a0)
000123E0 5329 0037                  		subq.b	#1,$37(a1)
000123E4 6600                       		bne.s	Obj60_FireOrb
000123E6 5429 0024                  		addq.b	#2,$24(a1)
000123EA                            
000123EA                            Obj60_FireOrb:
000123EA 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000123F0 0829 0000 0022             		btst	#0,$22(a1)
000123F6 6700                       		beq.s	Obj60_Display2
000123F8 4468 0010                  		neg.w	$10(a0)
000123FC                            
000123FC                            Obj60_Display2:
000123FC 6000 B792                  		bra.w	DisplaySprite
00012400                            ; ===========================================================================
00012400                            
00012400                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012400 1028 0026                  		move.b	$26(a0),d0
00012404 4EB9 0000 2C22             		jsr	(CalcSine).l
0001240A E841                       		asr.w	#4,d1
0001240C D269 0008                  		add.w	8(a1),d1
00012410 3141 0008                  		move.w	d1,8(a0)
00012414 E840                       		asr.w	#4,d0
00012416 D069 000C                  		add.w	$C(a1),d0
0001241A 3140 000C                  		move.w	d0,$C(a0)
0001241E 1029 0036                  		move.b	$36(a1),d0
00012422 D128 0026                  		add.b	d0,$26(a0)
00012426 6000 B768                  		bra.w	DisplaySprite
0001242A                            ; ===========================================================================
0001242A                            
0001242A                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001242A 6100 B73E                  		bsr.w	SpeedToPos
0001242E 4A28 0001                  		tst.b	1(a0)
00012432 6A00 B798                  		bpl.w	DeleteObject
00012436 6000 B758                  		bra.w	DisplaySprite
0001243A                            ; ===========================================================================
0001243A                            Ani_obj60:
0001243A                            	include "_anim\obj60.asm"
0001243A                            ; ---------------------------------------------------------------------------
0001243A                            ; Animation script - Orbinaut enemy
0001243A                            ; ---------------------------------------------------------------------------
0001243A 0000                       		dc.w byte_11EDA-Ani_obj60
0001243C 0000                       		dc.w byte_11EDE-Ani_obj60
0001243E 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012442 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012448                            		even
00012448                            		even
00012448                            
00012448                            ; ---------------------------------------------------------------------------
00012448                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012448                            ; ---------------------------------------------------------------------------
00012448                            Map_obj60:
00012448                            	include "_maps\obj60.asm"
00012448                            ; ---------------------------------------------------------------------------
00012448                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012448                            ; ---------------------------------------------------------------------------
00012448 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001244C 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012450 01                         byte_11EEC:	dc.b 1
00012451 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012456 01                         byte_11EF2:	dc.b 1
00012457 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001245C 01                         byte_11EF8:	dc.b 1
0001245D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012462 01                         byte_11EFE:	dc.b 1
00012463 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012468                            		even
00012468                            		even
00012468                            
00012468                            ; ===========================================================================
00012468                            ; ---------------------------------------------------------------------------
00012468                            ; Object 16 - harpoon (LZ)
00012468                            ; ---------------------------------------------------------------------------
00012468                            
00012468                            Obj16:					; XREF: Obj_Index
00012468 7000                       		moveq	#0,d0
0001246A 1028 0024                  		move.b	$24(a0),d0
0001246E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012472 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012476                            ; ===========================================================================
00012476 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012478 0000                       		dc.w Obj16_Move-Obj16_Index
0001247A 0000                       		dc.w Obj16_Wait-Obj16_Index
0001247C                            ; ===========================================================================
0001247C                            
0001247C                            Obj16_Main:				; XREF: Obj16_Index
0001247C 5428 0024                  		addq.b	#2,$24(a0)
00012480 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012488 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001248E 0028 0004 0001             		ori.b	#4,1(a0)
00012494 117C 0004 0018             		move.b	#4,$18(a0)
0001249A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000124A0 117C 0014 0019             		move.b	#$14,$19(a0)
000124A6 317C 003C 0030             		move.w	#60,$30(a0)
000124AC                            
000124AC                            Obj16_Move:				; XREF: Obj16_Index
000124AC 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000124B2 6100 87B2                  		bsr.w	AnimateSprite
000124B6 7000                       		moveq	#0,d0
000124B8 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000124BC 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000124C2 6000 D774                  		bra.w	MarkObjGone
000124C6                            ; ===========================================================================
000124C6 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000124CC                            ; ===========================================================================
000124CC                            
000124CC                            Obj16_Wait:				; XREF: Obj16_Index
000124CC 5368 0030                  		subq.w	#1,$30(a0)
000124D0 6A00                       		bpl.s	Obj16_ChkDel
000124D2 317C 003C 0030             		move.w	#60,$30(a0)
000124D8 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000124DC 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000124E2                            
000124E2                            Obj16_ChkDel:
000124E2 6000 D754                  		bra.w	MarkObjGone
000124E6                            ; ===========================================================================
000124E6                            Ani_obj16:
000124E6                            	include "_anim\obj16.asm"
000124E6                            ; ---------------------------------------------------------------------------
000124E6                            ; Animation script - harpoon (LZ)
000124E6                            ; ---------------------------------------------------------------------------
000124E6 0000                       		dc.w byte_11F8A-Ani_obj16
000124E8 0000                       		dc.w byte_11F8E-Ani_obj16
000124EA 0000                       		dc.w byte_11F92-Ani_obj16
000124EC 0000                       		dc.w byte_11F96-Ani_obj16
000124EE 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000124F2 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000124F6 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000124FA 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000124FE                            		even
000124FE                            		even
000124FE                            
000124FE                            ; ---------------------------------------------------------------------------
000124FE                            ; Sprite mappings - harpoon (LZ)
000124FE                            ; ---------------------------------------------------------------------------
000124FE                            Map_obj16:
000124FE                            	include "_maps\obj16.asm"
000124FE                            ; ---------------------------------------------------------------------------
000124FE                            ; Sprite mappings - harpoon (LZ)
000124FE                            ; ---------------------------------------------------------------------------
000124FE 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012502 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012506 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001250A 01                         byte_11FA6:	dc.b 1
0001250B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012510 01                         byte_11FAC:	dc.b 1
00012511 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012516 02                         byte_11FB2:	dc.b 2
00012517 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001251C FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012521 01                         byte_11FBD:	dc.b 1
00012522 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012527 01                         byte_11FC3:	dc.b 1
00012528 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001252D 02                         byte_11FC9:	dc.b 2
0001252E D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012533 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012538                            		even
00012538                            		even
00012538                            
00012538                            ; ===========================================================================
00012538                            ; ---------------------------------------------------------------------------
00012538                            ; Object 61 - blocks (LZ)
00012538                            ; ---------------------------------------------------------------------------
00012538                            
00012538                            Obj61:					; XREF: Obj_Index
00012538 7000                       		moveq	#0,d0
0001253A 1028 0024                  		move.b	$24(a0),d0
0001253E 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012542 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012546                            ; ===========================================================================
00012546 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012548 0000                       		dc.w Obj61_Action-Obj61_Index
0001254A                            
0001254A 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001254C 200C                       		dc.b $20, $C
0001254E 1010                       		dc.b $10, $10
00012550 1010                       		dc.b $10, $10
00012552                            ; ===========================================================================
00012552                            
00012552                            Obj61_Main:				; XREF: Obj61_Index
00012552 5428 0024                  		addq.b	#2,$24(a0)
00012556 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001255E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012564 117C 0004 0001             		move.b	#4,1(a0)
0001256A 117C 0003 0018             		move.b	#3,$18(a0)
00012570 7000                       		moveq	#0,d0
00012572 1028 0028                  		move.b	$28(a0),d0
00012576 E648                       		lsr.w	#3,d0
00012578 0240 000E                  		andi.w	#$E,d0
0001257C 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012580 115A 0019                  		move.b	(a2)+,$19(a0)
00012584 1152 0016                  		move.b	(a2),$16(a0)
00012588 E248                       		lsr.w	#1,d0
0001258A 1140 001A                  		move.b	d0,$1A(a0)
0001258E 3168 0008 0034             		move.w	8(a0),$34(a0)
00012594 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001259A 1028 0028                  		move.b	$28(a0),d0
0001259E 0200 000F                  		andi.b	#$F,d0
000125A2 6700                       		beq.s	Obj61_Action
000125A4 0C00 0007                  		cmpi.b	#7,d0
000125A8 6700                       		beq.s	Obj61_Action
000125AA 117C 0001 0038             		move.b	#1,$38(a0)
000125B0                            
000125B0                            Obj61_Action:				; XREF: Obj61_Index
000125B0 3F28 0008                  		move.w	8(a0),-(sp)
000125B4 7000                       		moveq	#0,d0
000125B6 1028 0028                  		move.b	$28(a0),d0
000125BA 0240 000F                  		andi.w	#$F,d0
000125BE D040                       		add.w	d0,d0
000125C0 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000125C4 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000125C8 381F                       		move.w	(sp)+,d4
000125CA 4A28 0001                  		tst.b	1(a0)
000125CE 6A00                       		bpl.s	Obj61_ChkDel
000125D0 7200                       		moveq	#0,d1
000125D2 1228 0019                  		move.b	$19(a0),d1
000125D6 0641 000B                  		addi.w	#$B,d1
000125DA 7400                       		moveq	#0,d2
000125DC 1428 0016                  		move.b	$16(a0),d2
000125E0 3602                       		move.w	d2,d3
000125E2 5243                       		addq.w	#1,d3
000125E4 6100 D97A                  		bsr.w	SolidObject
000125E8 1144 003F                  		move.b	d4,$3F(a0)
000125EC 6100 0000                  		bsr.w	loc_12180
000125F0                            
000125F0                            Obj61_ChkDel:
000125F0 3028 0034                  		move.w	$34(a0),d0
000125F4 0240 FF80                  		andi.w	#$FF80,d0
000125F8 3238 F700                  		move.w	($FFFFF700).w,d1
000125FC 0441 0080                  		subi.w	#$80,d1
00012600 0241 FF80                  		andi.w	#$FF80,d1
00012604 9041                       		sub.w	d1,d0
00012606 0C40 0280                  		cmpi.w	#$280,d0
0001260A 6200 B5C0                  		bhi.w	DeleteObject
0001260E 6000 B580                  		bra.w	DisplaySprite
00012612                            ; ===========================================================================
00012612 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012616 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001261A 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001261E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012622                            ; ===========================================================================
00012622                            
00012622                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012622 4E75                       		rts	
00012624                            ; ===========================================================================
00012624                            
00012624                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012624 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012628 6600                       		bne.s	loc_120D6	; if yes, branch
0001262A 0828 0003 0022             		btst	#3,$22(a0)
00012630 6700                       		beq.s	locret_120D4
00012632 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012638                            
00012638                            locret_120D4:
00012638 4E75                       		rts	
0001263A                            ; ===========================================================================
0001263A                            
0001263A                            loc_120D6:
0001263A 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001263E 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012640 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012644 4228 0038                  		clr.b	$38(a0)
00012648 4E75                       		rts	
0001264A                            ; ===========================================================================
0001264A                            
0001264A                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001264A 6100 B51E                  		bsr.w	SpeedToPos
0001264E 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012652 6100 0000                  		bsr.w	ObjHitFloor
00012656 4A41                       		tst.w	d1
00012658 6A00 0000                  		bpl.w	locret_12106
0001265C 5241                       		addq.w	#1,d1
0001265E D368 000C                  		add.w	d1,$C(a0)
00012662 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012666 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001266A                            
0001266A                            locret_12106:
0001266A 4E75                       		rts	
0001266C                            ; ===========================================================================
0001266C                            
0001266C                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001266C 6100 B4FC                  		bsr.w	SpeedToPos
00012670 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012674 6100 0000                  		bsr.w	ObjHitCeiling
00012678 4A41                       		tst.w	d1
0001267A 6A00 0000                  		bpl.w	locret_12126
0001267E 9368 000C                  		sub.w	d1,$C(a0)
00012682 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012686 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001268A                            
0001268A                            locret_12126:
0001268A 4E75                       		rts	
0001268C                            ; ===========================================================================
0001268C                            
0001268C                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001268C 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012692 6600                       		bne.s	locret_12138	; if not, branch
00012694 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012698 4228 0038                  		clr.b	$38(a0)
0001269C                            
0001269C                            locret_12138:
0001269C 4E75                       		rts	
0001269E                            ; ===========================================================================
0001269E                            
0001269E                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001269E 3038 F646                  		move.w	($FFFFF646).w,d0
000126A2 9068 000C                  		sub.w	$C(a0),d0
000126A6 6700                       		beq.s	locret_1217E
000126A8 6400                       		bcc.s	loc_12162
000126AA 0C40 FFFE                  		cmpi.w	#-2,d0
000126AE 6C00                       		bge.s	loc_1214E
000126B0 70FE                       		moveq	#-2,d0
000126B2                            
000126B2                            loc_1214E:
000126B2 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000126B6 6100 0000                  		bsr.w	ObjHitCeiling
000126BA 4A41                       		tst.w	d1
000126BC 6A00 0000                  		bpl.w	locret_12160
000126C0 9368 000C                  		sub.w	d1,$C(a0)
000126C4                            
000126C4                            locret_12160:
000126C4 4E75                       		rts	
000126C6                            ; ===========================================================================
000126C6                            
000126C6                            loc_12162:				; XREF: Obj61_Type07
000126C6 0C40 0002                  		cmpi.w	#2,d0
000126CA 6F00                       		ble.s	loc_1216A
000126CC 7002                       		moveq	#2,d0
000126CE                            
000126CE                            loc_1216A:
000126CE D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000126D2 6100 0000                  		bsr.w	ObjHitFloor
000126D6 4A41                       		tst.w	d1
000126D8 6A00 0000                  		bpl.w	locret_1217E
000126DC 5241                       		addq.w	#1,d1
000126DE D368 000C                  		add.w	d1,$C(a0)
000126E2                            
000126E2                            locret_1217E:
000126E2 4E75                       		rts	
000126E4                            ; ===========================================================================
000126E4                            
000126E4                            loc_12180:				; XREF: Obj61_Action
000126E4 4A28 0038                  		tst.b	$38(a0)
000126E8 6700                       		beq.s	locret_121C0
000126EA 0828 0003 0022             		btst	#3,$22(a0)
000126F0 6600                       		bne.s	loc_1219A
000126F2 4A28 003E                  		tst.b	$3E(a0)
000126F6 6700                       		beq.s	locret_121C0
000126F8 5928 003E                  		subq.b	#4,$3E(a0)
000126FC 6000                       		bra.s	loc_121A6
000126FE                            ; ===========================================================================
000126FE                            
000126FE                            loc_1219A:
000126FE 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012704 6700                       		beq.s	locret_121C0
00012706 5828 003E                  		addq.b	#4,$3E(a0)
0001270A                            
0001270A                            loc_121A6:
0001270A 1028 003E                  		move.b	$3E(a0),d0
0001270E 4EB9 0000 2C22             		jsr	(CalcSine).l
00012714 323C 0400                  		move.w	#$400,d1
00012718 C1C1                       		muls.w	d1,d0
0001271A 4840                       		swap	d0
0001271C D068 0030                  		add.w	$30(a0),d0
00012720 3140 000C                  		move.w	d0,$C(a0)
00012724                            
00012724                            locret_121C0:
00012724 4E75                       		rts	
00012726                            ; ===========================================================================
00012726                            ; ---------------------------------------------------------------------------
00012726                            ; Sprite mappings - blocks (LZ)
00012726                            ; ---------------------------------------------------------------------------
00012726                            Map_obj61:
00012726                            	include "_maps\obj61.asm"
00012726                            ; ---------------------------------------------------------------------------
00012726                            ; Sprite mappings - blocks (LZ)
00012726                            ; ---------------------------------------------------------------------------
00012726 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001272A 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001272E 01                         byte_121CA:	dc.b 1
0001272F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012734 02                         byte_121D0:	dc.b 2
00012735 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001273A F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001273F 01                         byte_121DB:	dc.b 1
00012740 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012745 01                         byte_121E1:	dc.b 1
00012746 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001274C 00                         		even
0001274C 00                         		even
0001274C                            
0001274C                            ; ===========================================================================
0001274C                            ; ---------------------------------------------------------------------------
0001274C                            ; Object 62 - gargoyle head (LZ)
0001274C                            ; ---------------------------------------------------------------------------
0001274C                            
0001274C                            Obj62:					; XREF: Obj_Index
0001274C 7000                       		moveq	#0,d0
0001274E 1028 0024                  		move.b	$24(a0),d0
00012752 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012756 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001275A 6000 D4DC                  		bra.w	MarkObjGone
0001275E                            ; ===========================================================================
0001275E 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012760 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012762 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012764 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012766                            
00012766 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001276E                            ; ===========================================================================
0001276E                            
0001276E                            Obj62_Main:				; XREF: Obj62_Index
0001276E 5428 0024                  		addq.b	#2,$24(a0)
00012772 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001277A 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012780 0028 0004 0001             		ori.b	#4,1(a0)
00012786 117C 0003 0018             		move.b	#3,$18(a0)
0001278C 117C 0010 0019             		move.b	#$10,$19(a0)
00012792 1028 0028                  		move.b	$28(a0),d0	; get object type
00012796 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001279A 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000127A0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127A6 0228 000F 0028             		andi.b	#$F,$28(a0)
000127AC                            
000127AC                            Obj62_MakeFire:				; XREF: Obj62_Index
000127AC 5328 001E                  		subq.b	#1,$1E(a0)
000127B0 6600                       		bne.s	Obj62_NoFire
000127B2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127B8 6100 B650                  		bsr.w	ChkObjOnScreen
000127BC 6600                       		bne.s	Obj62_NoFire
000127BE 6100 B856                  		bsr.w	SingleObjLoad
000127C2 6600                       		bne.s	Obj62_NoFire
000127C4 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000127C8 5829 0024                  		addq.b	#4,$24(a1)
000127CC 3368 0008 0008             		move.w	8(a0),8(a1)
000127D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127D8 1368 0001 0001             		move.b	1(a0),1(a1)
000127DE 1368 0022 0022             		move.b	$22(a0),$22(a1)
000127E4                            
000127E4                            Obj62_NoFire:
000127E4 4E75                       		rts	
000127E6                            ; ===========================================================================
000127E6                            
000127E6                            Obj62_FireBall:				; XREF: Obj62_Index
000127E6 5428 0024                  		addq.b	#2,$24(a0)
000127EA 117C 0008 0016             		move.b	#8,$16(a0)
000127F0 117C 0008 0017             		move.b	#8,$17(a0)
000127F6 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000127FE 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012804 0028 0004 0001             		ori.b	#4,1(a0)
0001280A 117C 0004 0018             		move.b	#4,$18(a0)
00012810 117C 0098 0020             		move.b	#$98,$20(a0)
00012816 117C 0008 0019             		move.b	#8,$19(a0)
0001281C 117C 0002 001A             		move.b	#2,$1A(a0)
00012822 5068 000C                  		addq.w	#8,$C(a0)
00012826 317C 0200 0010             		move.w	#$200,$10(a0)
0001282C 0828 0000 0022             		btst	#0,$22(a0)
00012832 6600                       		bne.s	Obj62_Sound
00012834 4468 0010                  		neg.w	$10(a0)
00012838                            
00012838                            Obj62_Sound:
00012838 303C 00AE                  		move.w	#$AE,d0
0001283C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012842                            
00012842                            Obj62_AniFire:				; XREF: Obj62_Index
00012842 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012846 0200 0007                  		andi.b	#7,d0
0001284A 6600                       		bne.s	Obj62_StopFire
0001284C 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012852                            
00012852                            Obj62_StopFire:
00012852 6100 B316                  		bsr.w	SpeedToPos
00012856 0828 0000 0022             		btst	#0,$22(a0)
0001285C 6600                       		bne.s	Obj62_StopFire2
0001285E 76F8                       		moveq	#-8,d3
00012860 6100 0000                  		bsr.w	ObjHitWallLeft
00012864 4A41                       		tst.w	d1
00012866 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001286A 4E75                       		rts	
0001286C                            ; ===========================================================================
0001286C                            
0001286C                            Obj62_StopFire2:
0001286C 7608                       		moveq	#8,d3
0001286E 6100 0000                  		bsr.w	ObjHitWallRight
00012872 4A41                       		tst.w	d1
00012874 6B00 B356                  		bmi.w	DeleteObject
00012878 4E75                       		rts	
0001287A                            ; ===========================================================================
0001287A                            ; ---------------------------------------------------------------------------
0001287A                            ; Sprite mappings - gargoyle head (LZ)
0001287A                            ; ---------------------------------------------------------------------------
0001287A                            Map_obj62:
0001287A                            	include "_maps\obj62.asm"
0001287A                            ; ---------------------------------------------------------------------------
0001287A                            ; Sprite mappings - gargoyle head (LZ)
0001287A                            ; ---------------------------------------------------------------------------
0001287A 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
0001287E 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012882 03                         byte_12320:	dc.b 3
00012883 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012888 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001288D 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012892 01                         byte_12330:	dc.b 1
00012893 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012898 01                         byte_12336:	dc.b 1
00012899 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001289E                            		even
0001289E                            		even
0001289E                            
0001289E                            ; ===========================================================================
0001289E                            ; ---------------------------------------------------------------------------
0001289E                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001289E                            ; ---------------------------------------------------------------------------
0001289E                            
0001289E                            Obj63:					; XREF: Obj_Index
0001289E 7000                       		moveq	#0,d0
000128A0 1028 0024                  		move.b	$24(a0),d0
000128A4 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000128A8 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000128AC 3028 0030                  		move.w	$30(a0),d0
000128B0 0240 FF80                  		andi.w	#$FF80,d0
000128B4 3238 F700                  		move.w	($FFFFF700).w,d1
000128B8 0441 0080                  		subi.w	#$80,d1
000128BC 0241 FF80                  		andi.w	#$FF80,d1
000128C0 9041                       		sub.w	d1,d0
000128C2 0C40 0280                  		cmpi.w	#$280,d0
000128C6 6200                       		bhi.s	loc_1236A
000128C8                            
000128C8                            Obj63_Display:				; XREF: loc_1236A
000128C8 6000 B2C6                  		bra.w	DisplaySprite
000128CC                            ; ===========================================================================
000128CC                            
000128CC                            loc_1236A:				; XREF: Obj63
000128CC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000128D2 6600                       		bne.s	loc_12378
000128D4 0C40 FF80                  		cmpi.w	#-$80,d0
000128D8 64EE                       		bcc.s	Obj63_Display
000128DA                            
000128DA                            loc_12378:
000128DA 1028 002F                  		move.b	$2F(a0),d0
000128DE 6A00 B2EC                  		bpl.w	DeleteObject
000128E2 0240 007F                  		andi.w	#$7F,d0
000128E6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000128EA 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000128F0 6000 B2DA                  		bra.w	DeleteObject
000128F4                            ; ===========================================================================
000128F4 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000128F6 0000                       		dc.w loc_124B2-Obj63_Index
000128F8 0000                       		dc.w loc_124C2-Obj63_Index
000128FA 0000                       		dc.w loc_124DE-Obj63_Index
000128FC                            ; ===========================================================================
000128FC                            
000128FC                            Obj63_Main:				; XREF: Obj63_Index
000128FC 1028 0028                  		move.b	$28(a0),d0
00012900 6B00 0000                  		bmi.w	loc_12460
00012904 5428 0024                  		addq.b	#2,$24(a0)
00012908 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012910 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012916 0028 0004 0001             		ori.b	#4,1(a0)
0001291C 117C 0010 0019             		move.b	#$10,$19(a0)
00012922 117C 0004 0018             		move.b	#4,$18(a0)
00012928 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
0001292E 6600                       		bne.s	loc_123E2
00012930 5828 0024                  		addq.b	#4,$24(a0)
00012934 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001293A 117C 0001 0018             		move.b	#1,$18(a0)
00012940 6000 0000                  		bra.w	loc_124DE
00012944                            ; ===========================================================================
00012944                            
00012944                            loc_123E2:
00012944 117C 0004 001A             		move.b	#4,$1A(a0)
0001294A 7000                       		moveq	#0,d0
0001294C 1028 0028                  		move.b	$28(a0),d0
00012950 3200                       		move.w	d0,d1
00012952 E648                       		lsr.w	#3,d0
00012954 0240 001E                  		andi.w	#$1E,d0
00012958 45FA 0000                  		lea	Obj63_Data(pc),a2
0001295C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012960 315A 0038                  		move.w	(a2)+,$38(a0)
00012964 315A 0030                  		move.w	(a2)+,$30(a0)
00012968 214A 003C                  		move.l	a2,$3C(a0)
0001296C 0241 000F                  		andi.w	#$F,d1
00012970 E549                       		lsl.w	#2,d1
00012972 1141 0038                  		move.b	d1,$38(a0)
00012976 117C 0004 003A             		move.b	#4,$3A(a0)
0001297C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012980 6700                       		beq.s	loc_1244C
00012982 117C 0001 003B             		move.b	#1,$3B(a0)
00012988 4428 003A                  		neg.b	$3A(a0)
0001298C 7200                       		moveq	#0,d1
0001298E 1228 0038                  		move.b	$38(a0),d1
00012992 D228 003A                  		add.b	$3A(a0),d1
00012996 B228 0039                  		cmp.b	$39(a0),d1
0001299A 6500                       		bcs.s	loc_12448
0001299C 1001                       		move.b	d1,d0
0001299E 7200                       		moveq	#0,d1
000129A0 4A00                       		tst.b	d0
000129A2 6A00                       		bpl.s	loc_12448
000129A4 1228 0039                  		move.b	$39(a0),d1
000129A8 5901                       		subq.b	#4,d1
000129AA                            
000129AA                            loc_12448:
000129AA 1141 0038                  		move.b	d1,$38(a0)
000129AE                            
000129AE                            loc_1244C:
000129AE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000129B4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000129BA 6100 0000                  		bsr.w	Obj63_ChangeDir
000129BE 6000 0000                  		bra.w	loc_124B2
000129C2                            ; ===========================================================================
000129C2                            
000129C2                            loc_12460:				; XREF: Obj63_Main
000129C2 1140 002F                  		move.b	d0,$2F(a0)
000129C6 0240 007F                  		andi.w	#$7F,d0
000129CA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000129CE 08F2 0000 0000             		bset	#0,(a2,d0.w)
000129D4 6600 B1F6                  		bne.w	DeleteObject
000129D8 D040                       		add.w	d0,d0
000129DA 0240 001E                  		andi.w	#$1E,d0
000129DE 0640 0070                  		addi.w	#$70,d0
000129E2 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000129E8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000129EC 321A                       		move.w	(a2)+,d1
000129EE 2248                       		movea.l	a0,a1
000129F0 6000                       		bra.s	Obj63_MakePtfms
000129F2                            ; ===========================================================================
000129F2                            
000129F2                            Obj63_Loop:
000129F2 6100 B622                  		bsr.w	SingleObjLoad
000129F6 6600                       		bne.s	loc_124AA
000129F8                            
000129F8                            Obj63_MakePtfms:			; XREF: loc_12460
000129F8 12BC 0063                  		move.b	#$63,0(a1)
000129FC 335A 0008                  		move.w	(a2)+,8(a1)
00012A00 335A 000C                  		move.w	(a2)+,$C(a1)
00012A04 301A                       		move.w	(a2)+,d0
00012A06 1340 0028                  		move.b	d0,$28(a1)
00012A0A                            
00012A0A                            loc_124AA:
00012A0A 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012A0E                            
00012A0E 588F                       		addq.l	#4,sp
00012A10 4E75                       		rts	
00012A12                            ; ===========================================================================
00012A12                            
00012A12                            loc_124B2:				; XREF: Obj63_Index
00012A12 7200                       		moveq	#0,d1
00012A14 1228 0019                  		move.b	$19(a0),d1
00012A18 4EB9 0000 789E             		jsr	(PlatformObject).l
00012A1E 6000 0000                  		bra.w	sub_12502
00012A22                            ; ===========================================================================
00012A22                            
00012A22                            loc_124C2:				; XREF: Obj63_Index
00012A22 7200                       		moveq	#0,d1
00012A24 1228 0019                  		move.b	$19(a0),d1
00012A28 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00012A2E 3F28 0008                  		move.w	8(a0),-(sp)
00012A32 6100 0000                  		bsr.w	sub_12502
00012A36 341F                       		move.w	(sp)+,d2
00012A38 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00012A3E                            ; ===========================================================================
00012A3E                            
00012A3E                            loc_124DE:				; XREF: Obj63_Index
00012A3E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012A42 0240 0003                  		andi.w	#3,d0
00012A46 6600                       		bne.s	loc_124FC
00012A48 7201                       		moveq	#1,d1
00012A4A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012A4E 6700                       		beq.s	loc_124F2
00012A50 4401                       		neg.b	d1
00012A52                            
00012A52                            loc_124F2:
00012A52 D328 001A                  		add.b	d1,$1A(a0)
00012A56 0228 0003 001A             		andi.b	#3,$1A(a0)
00012A5C                            
00012A5C                            loc_124FC:
00012A5C 588F                       		addq.l	#4,sp
00012A5E 6000 D1D8                  		bra.w	MarkObjGone
00012A62                            
00012A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A62                            
00012A62                            
00012A62                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012A62 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012A66 6700                       		beq.s	loc_12520
00012A68 4A28 003B                  		tst.b	$3B(a0)
00012A6C 6600                       		bne.s	loc_12520
00012A6E 117C 0001 003B             		move.b	#1,$3B(a0)
00012A74 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012A7A 4428 003A                  		neg.b	$3A(a0)
00012A7E 6000                       		bra.s	loc_12534
00012A80                            ; ===========================================================================
00012A80                            
00012A80                            loc_12520:
00012A80 3028 0008                  		move.w	8(a0),d0
00012A84 B068 0034                  		cmp.w	$34(a0),d0
00012A88 6600                       		bne.s	loc_1256A
00012A8A 3028 000C                  		move.w	$C(a0),d0
00012A8E B068 0036                  		cmp.w	$36(a0),d0
00012A92 6600                       		bne.s	loc_1256A
00012A94                            
00012A94                            loc_12534:
00012A94 7200                       		moveq	#0,d1
00012A96 1228 0038                  		move.b	$38(a0),d1
00012A9A D228 003A                  		add.b	$3A(a0),d1
00012A9E B228 0039                  		cmp.b	$39(a0),d1
00012AA2 6500                       		bcs.s	loc_12552
00012AA4 1001                       		move.b	d1,d0
00012AA6 7200                       		moveq	#0,d1
00012AA8 4A00                       		tst.b	d0
00012AAA 6A00                       		bpl.s	loc_12552
00012AAC 1228 0039                  		move.b	$39(a0),d1
00012AB0 5901                       		subq.b	#4,d1
00012AB2                            
00012AB2                            loc_12552:
00012AB2 1141 0038                  		move.b	d1,$38(a0)
00012AB6 2268 003C                  		movea.l	$3C(a0),a1
00012ABA 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012AC0 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012AC6 6100 0000                  		bsr.w	Obj63_ChangeDir
00012ACA                            
00012ACA                            loc_1256A:
00012ACA 6100 B09E                  		bsr.w	SpeedToPos
00012ACE 4E75                       		rts	
00012AD0                            ; End of function sub_12502
00012AD0                            
00012AD0                            
00012AD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012AD0                            
00012AD0                            
00012AD0                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012AD0 7000                       		moveq	#0,d0
00012AD2 343C FF00                  		move.w	#-$100,d2
00012AD6 3028 0008                  		move.w	8(a0),d0
00012ADA 9068 0034                  		sub.w	$34(a0),d0
00012ADE 6400                       		bcc.s	loc_12584
00012AE0 4440                       		neg.w	d0
00012AE2 4442                       		neg.w	d2
00012AE4                            
00012AE4                            loc_12584:
00012AE4 7200                       		moveq	#0,d1
00012AE6 363C FF00                  		move.w	#-$100,d3
00012AEA 3228 000C                  		move.w	$C(a0),d1
00012AEE 9268 0036                  		sub.w	$36(a0),d1
00012AF2 6400                       		bcc.s	loc_12598
00012AF4 4441                       		neg.w	d1
00012AF6 4443                       		neg.w	d3
00012AF8                            
00012AF8                            loc_12598:
00012AF8 B240                       		cmp.w	d0,d1
00012AFA 6500                       		bcs.s	loc_125C2
00012AFC 3028 0008                  		move.w	8(a0),d0
00012B00 9068 0034                  		sub.w	$34(a0),d0
00012B04 6700                       		beq.s	loc_125AE
00012B06 48C0                       		ext.l	d0
00012B08 E180                       		asl.l	#8,d0
00012B0A 81C1                       		divs.w	d1,d0
00012B0C 4440                       		neg.w	d0
00012B0E                            
00012B0E                            loc_125AE:
00012B0E 3140 0010                  		move.w	d0,$10(a0)
00012B12 3143 0012                  		move.w	d3,$12(a0)
00012B16 4840                       		swap	d0
00012B18 3140 000A                  		move.w	d0,$A(a0)
00012B1C 4268 000E                  		clr.w	$E(a0)
00012B20 4E75                       		rts	
00012B22                            ; ===========================================================================
00012B22                            
00012B22                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B22 3228 000C                  		move.w	$C(a0),d1
00012B26 9268 0036                  		sub.w	$36(a0),d1
00012B2A 6700                       		beq.s	loc_125D4
00012B2C 48C1                       		ext.l	d1
00012B2E E181                       		asl.l	#8,d1
00012B30 83C0                       		divs.w	d0,d1
00012B32 4441                       		neg.w	d1
00012B34                            
00012B34                            loc_125D4:
00012B34 3141 0012                  		move.w	d1,$12(a0)
00012B38 3142 0010                  		move.w	d2,$10(a0)
00012B3C 4841                       		swap	d1
00012B3E 3141 000E                  		move.w	d1,$E(a0)
00012B42 4268 000A                  		clr.w	$A(a0)
00012B46 4E75                       		rts	
00012B48                            ; End of function Obj63_ChangeDir
00012B48                            
00012B48                            ; ===========================================================================
00012B48 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012B4A 0000                       		dc.w word_12610-Obj63_Data
00012B4C 0000                       		dc.w word_12628-Obj63_Data
00012B4E 0000                       		dc.w word_1263C-Obj63_Data
00012B50 0000                       		dc.w word_12650-Obj63_Data
00012B52 0000                       		dc.w word_12668-Obj63_Data
00012B54 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012B64 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012B70 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012B80 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012B88 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012B9C 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012BB0 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012BC8 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012BDC                            
00012BDC                            ; ---------------------------------------------------------------------------
00012BDC                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BDC                            ; ---------------------------------------------------------------------------
00012BDC                            Map_obj63:
00012BDC                            	include "_maps\obj63.asm"
00012BDC                            ; ---------------------------------------------------------------------------
00012BDC                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BDC                            ; ---------------------------------------------------------------------------
00012BDC 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012BE0 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012BE4 0000                       		dc.w byte_1269E-Map_obj63
00012BE6 01                         byte_12686:	dc.b 1
00012BE7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BEC 01                         byte_1268C:	dc.b 1
00012BED F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012BF2 01                         byte_12692:	dc.b 1
00012BF3 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012BF8 01                         byte_12698:	dc.b 1
00012BF9 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012BFE 01                         byte_1269E:	dc.b 1
00012BFF F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012C04                            		even
00012C04                            		even
00012C04                            
00012C04                            ; ===========================================================================
00012C04                            ; ---------------------------------------------------------------------------
00012C04                            ; Object 64 - bubbles (LZ)
00012C04                            ; ---------------------------------------------------------------------------
00012C04                            
00012C04                            Obj64:					; XREF: Obj_Index
00012C04 7000                       		moveq	#0,d0
00012C06 1028 0024                  		move.b	$24(a0),d0
00012C0A 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012C0E 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012C12                            ; ===========================================================================
00012C12 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012C14 0000                       		dc.w Obj64_Animate-Obj64_Index
00012C16 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012C18 0000                       		dc.w Obj64_Display2-Obj64_Index
00012C1A 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012C1C 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C1E                            ; ===========================================================================
00012C1E                            
00012C1E                            Obj64_Main:				; XREF: Obj64_Index
00012C1E 5428 0024                  		addq.b	#2,$24(a0)
00012C22 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C2A 317C 8348 0002             		move.w	#$8348,2(a0)
00012C30 117C 0084 0001             		move.b	#$84,1(a0)
00012C36 117C 0010 0019             		move.b	#$10,$19(a0)
00012C3C 117C 0001 0018             		move.b	#1,$18(a0)
00012C42 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C46 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012C48 5028 0024                  		addq.b	#8,$24(a0)
00012C4C 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012C50 1140 0032                  		move.b	d0,$32(a0)
00012C54 1140 0033                  		move.b	d0,$33(a0)
00012C58 117C 0006 001C             		move.b	#6,$1C(a0)
00012C5E 6000 0000                  		bra.w	Obj64_BblMaker
00012C62                            ; ===========================================================================
00012C62                            
00012C62                            Obj64_Bubble:				; XREF: Obj64_Main
00012C62 1140 001C                  		move.b	d0,$1C(a0)
00012C66 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C6C 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012C72 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012C78 1140 0026                  		move.b	d0,$26(a0)
00012C7C                            
00012C7C                            Obj64_Animate:				; XREF: Obj64_Index
00012C7C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012C82 4EB9 0000 AC66             		jsr	AnimateSprite
00012C88 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012C8E 6600                       		bne.s	Obj64_ChkWater
00012C90 117C 0001 002E             		move.b	#1,$2E(a0)
00012C96                            
00012C96                            Obj64_ChkWater:				; XREF: Obj64_Index
00012C96 3038 F646                  		move.w	($FFFFF646).w,d0
00012C9A B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012C9E 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012CA0                            
00012CA0                            Obj64_Burst:				; XREF: Obj64_Wobble
00012CA0 117C 0006 0024             		move.b	#6,$24(a0)
00012CA6 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012CAA 6000 0000                  		bra.w	Obj64_Display2
00012CAE                            ; ===========================================================================
00012CAE                            
00012CAE                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012CAE 1028 0026                  		move.b	$26(a0),d0
00012CB2 5228 0026                  		addq.b	#1,$26(a0)
00012CB6 0240 007F                  		andi.w	#$7F,d0
00012CBA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012CC0 1031 0000                  		move.b	(a1,d0.w),d0
00012CC4 4880                       		ext.w	d0
00012CC6 D068 0030                  		add.w	$30(a0),d0
00012CCA 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012CCE 4A28 002E                  		tst.b	$2E(a0)
00012CD2 6700                       		beq.s	Obj64_Display
00012CD4 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012CD8 6700                       		beq.s	Obj64_Display	; if not, branch
00012CDA                            
00012CDA 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012CDE 303C 00AD                  		move.w	#$AD,d0
00012CE2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012CE8 43F8 D000                  		lea	($FFFFD000).w,a1
00012CEC 4269 0010                  		clr.w	$10(a1)
00012CF0 4269 0012                  		clr.w	$12(a1)
00012CF4 4269 0014                  		clr.w	$14(a1)
00012CF8 137C 0015 001C             		move.b	#$15,$1C(a1)
00012CFE 337C 0023 003E             		move.w	#$23,$3E(a1)
00012D04 137C 0000 003C             		move.b	#0,$3C(a1)
00012D0A 08A9 0005 0022             		bclr	#5,$22(a1)
00012D10 08A9 0004 0022             		bclr	#4,$22(a1)
00012D16 0829 0002 0022             		btst	#2,$22(a1)
00012D1C 6700 FF82                  		beq.w	Obj64_Burst
00012D20 08A9 0002 0022             		bclr	#2,$22(a1)
00012D26 137C 0013 0016             		move.b	#$13,$16(a1)
00012D2C 137C 0009 0017             		move.b	#9,$17(a1)
00012D32 5B69 000C                  		subq.w	#5,$C(a1)
00012D36 6000 FF68                  		bra.w	Obj64_Burst
00012D3A                            ; ===========================================================================
00012D3A                            
00012D3A                            Obj64_Display:				; XREF: Obj64_Wobble
00012D3A 6100 AE2E                  		bsr.w	SpeedToPos
00012D3E 4A28 0001                  		tst.b	1(a0)
00012D42 6A00                       		bpl.s	Obj64_Delete
00012D44 4EFA AE4A                  		jmp	DisplaySprite
00012D48                            ; ===========================================================================
00012D48                            
00012D48                            Obj64_Delete:
00012D48 4EFA AE82                  		jmp	DeleteObject
00012D4C                            ; ===========================================================================
00012D4C                            
00012D4C                            Obj64_Display2:				; XREF: Obj64_Index
00012D4C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D52 4EB9 0000 AC66             		jsr	AnimateSprite
00012D58 4A28 0001                  		tst.b	1(a0)
00012D5C 6A00                       		bpl.s	Obj64_Delete2
00012D5E 4EFA AE30                  		jmp	DisplaySprite
00012D62                            ; ===========================================================================
00012D62                            
00012D62                            Obj64_Delete2:
00012D62 4EFA AE68                  		jmp	DeleteObject
00012D66                            ; ===========================================================================
00012D66                            
00012D66                            Obj64_Delete3:				; XREF: Obj64_Index
00012D66 6000 AE64                  		bra.w	DeleteObject
00012D6A                            ; ===========================================================================
00012D6A                            
00012D6A                            Obj64_BblMaker:				; XREF: Obj64_Index
00012D6A 4A68 0036                  		tst.w	$36(a0)
00012D6E 6600                       		bne.s	loc_12874
00012D70 3038 F646                  		move.w	($FFFFF646).w,d0
00012D74 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012D78 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012D7C 4A28 0001                  		tst.b	1(a0)
00012D80 6A00 0000                  		bpl.w	Obj64_ChkDel
00012D84 5368 0038                  		subq.w	#1,$38(a0)
00012D88 6A00 0000                  		bpl.w	loc_12914
00012D8C 317C 0001 0036             		move.w	#1,$36(a0)
00012D92                            
00012D92                            loc_1283A:
00012D92 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012D98 3200                       		move.w	d0,d1
00012D9A 0240 0007                  		andi.w	#7,d0
00012D9E 0C40 0006                  		cmpi.w	#6,d0
00012DA2 64EE                       		bcc.s	loc_1283A
00012DA4                            
00012DA4 1140 0034                  		move.b	d0,$34(a0)
00012DA8 0241 000C                  		andi.w	#$C,d1
00012DAC 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012DB2 D2C1                       		adda.w	d1,a1
00012DB4 2149 003C                  		move.l	a1,$3C(a0)
00012DB8 5328 0032                  		subq.b	#1,$32(a0)
00012DBC 6A00                       		bpl.s	loc_12872
00012DBE 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012DC4 08E8 0007 0036             		bset	#7,$36(a0)
00012DCA                            
00012DCA                            loc_12872:
00012DCA 6000                       		bra.s	loc_1287C
00012DCC                            ; ===========================================================================
00012DCC                            
00012DCC                            loc_12874:				; XREF: Obj64_BblMaker
00012DCC 5368 0038                  		subq.w	#1,$38(a0)
00012DD0 6A00 0000                  		bpl.w	loc_12914
00012DD4                            
00012DD4                            loc_1287C:
00012DD4 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DDA 0240 001F                  		andi.w	#$1F,d0
00012DDE 3140 0038                  		move.w	d0,$38(a0)
00012DE2 6100 B232                  		bsr.w	SingleObjLoad
00012DE6 6600                       		bne.s	loc_128F8
00012DE8 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012DEC 3368 0008 0008             		move.w	8(a0),8(a1)
00012DF2 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DF8 0240 000F                  		andi.w	#$F,d0
00012DFC 5140                       		subq.w	#8,d0
00012DFE D169 0008                  		add.w	d0,8(a1)
00012E02 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012E08 7000                       		moveq	#0,d0
00012E0A 1028 0034                  		move.b	$34(a0),d0
00012E0E 2468 003C                  		movea.l	$3C(a0),a2
00012E12 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012E18 0828 0007 0036             		btst	#7,$36(a0)
00012E1E 6700                       		beq.s	loc_128F8
00012E20 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E26 0240 0003                  		andi.w	#3,d0
00012E2A 6600                       		bne.s	loc_128E4
00012E2C 08E8 0006 0036             		bset	#6,$36(a0)
00012E32 6600                       		bne.s	loc_128F8
00012E34 137C 0002 0028             		move.b	#2,$28(a1)
00012E3A                            
00012E3A                            loc_128E4:
00012E3A 4A28 0034                  		tst.b	$34(a0)
00012E3E 6600                       		bne.s	loc_128F8
00012E40 08E8 0006 0036             		bset	#6,$36(a0)
00012E46 6600                       		bne.s	loc_128F8
00012E48 137C 0002 0028             		move.b	#2,$28(a1)
00012E4E                            
00012E4E                            loc_128F8:
00012E4E 5328 0034                  		subq.b	#1,$34(a0)
00012E52 6A00                       		bpl.s	loc_12914
00012E54 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E5A 0240 007F                  		andi.w	#$7F,d0
00012E5E 0640 0080                  		addi.w	#$80,d0
00012E62 D168 0038                  		add.w	d0,$38(a0)
00012E66 4268 0036                  		clr.w	$36(a0)
00012E6A                            
00012E6A                            loc_12914:
00012E6A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E70 4EB9 0000 AC66             		jsr	AnimateSprite
00012E76                            
00012E76                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012E76 3028 0008                  		move.w	8(a0),d0
00012E7A 0240 FF80                  		andi.w	#$FF80,d0
00012E7E 3238 F700                  		move.w	($FFFFF700).w,d1
00012E82 0441 0080                  		subi.w	#$80,d1
00012E86 0241 FF80                  		andi.w	#$FF80,d1
00012E8A 9041                       		sub.w	d1,d0
00012E8C 0C40 0280                  		cmpi.w	#$280,d0
00012E90 6200 AD3A                  		bhi.w	DeleteObject
00012E94 3038 F646                  		move.w	($FFFFF646).w,d0
00012E98 B068 000C                  		cmp.w	$C(a0),d0
00012E9C 6500 ACF2                  		bcs.w	DisplaySprite
00012EA0 4E75                       		rts	
00012EA2                            ; ===========================================================================
00012EA2                            ; bubble production sequence
00012EA2                            
00012EA2                            ; 0 = small bubble, 1 =	large bubble
00012EA2                            
00012EA2 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012EB4                            
00012EB4                            ; ===========================================================================
00012EB4                            
00012EB4                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012EB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012EB8 6B00                       		bmi.s	loc_12998
00012EBA 43F8 D000                  		lea	($FFFFD000).w,a1
00012EBE 3029 0008                  		move.w	8(a1),d0
00012EC2 3228 0008                  		move.w	8(a0),d1
00012EC6 0441 0010                  		subi.w	#$10,d1
00012ECA B240                       		cmp.w	d0,d1
00012ECC 6400                       		bcc.s	loc_12998
00012ECE 0641 0020                  		addi.w	#$20,d1
00012ED2 B240                       		cmp.w	d0,d1
00012ED4 6500                       		bcs.s	loc_12998
00012ED6 3029 000C                  		move.w	$C(a1),d0
00012EDA 3228 000C                  		move.w	$C(a0),d1
00012EDE B240                       		cmp.w	d0,d1
00012EE0 6400                       		bcc.s	loc_12998
00012EE2 0641 0010                  		addi.w	#$10,d1
00012EE6 B240                       		cmp.w	d0,d1
00012EE8 6500                       		bcs.s	loc_12998
00012EEA 7001                       		moveq	#1,d0
00012EEC 4E75                       		rts	
00012EEE                            ; ===========================================================================
00012EEE                            
00012EEE                            loc_12998:
00012EEE 7000                       		moveq	#0,d0
00012EF0 4E75                       		rts	
00012EF2                            ; ===========================================================================
00012EF2                            Ani_obj64:
00012EF2                            	include "_anim\obj64.asm"
00012EF2                            ; ---------------------------------------------------------------------------
00012EF2                            ; Animation script - bubbles (LZ)
00012EF2                            ; ---------------------------------------------------------------------------
00012EF2 0000                       		dc.w byte_129AA-Ani_obj64
00012EF4 0000                       		dc.w byte_129B0-Ani_obj64
00012EF6 0000                       		dc.w byte_129B6-Ani_obj64
00012EF8 0000                       		dc.w byte_129BE-Ani_obj64
00012EFA 0000                       		dc.w byte_129BE-Ani_obj64
00012EFC 0000                       		dc.w byte_129C0-Ani_obj64
00012EFE 0000                       		dc.w byte_129C6-Ani_obj64
00012F00 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012F06 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012F0C 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012F14 04FC                       byte_129BE:	dc.b 4,	$FC
00012F16 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012F1C 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F22 00                         		even
00012F22 00                         		even
00012F22                            
00012F22                            ; ---------------------------------------------------------------------------
00012F22                            ; Sprite mappings - bubbles (LZ)
00012F22                            ; ---------------------------------------------------------------------------
00012F22                            Map_obj64:
00012F22                            	include "_maps\obj64.asm"
00012F22                            ; ---------------------------------------------------------------------------
00012F22                            ; Sprite mappings - bubbles (LZ)
00012F22                            ; ---------------------------------------------------------------------------
00012F22 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F26 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F2A 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F2E 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012F32 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012F36 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012F3A 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012F3E 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012F42 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012F46 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012F4A 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012F4E 0000                       		dc.w byte_12A9C-Map_obj64
00012F50 01                         byte_129FA:	dc.b 1
00012F51 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012F56 01                         byte_12A00:	dc.b 1
00012F57 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012F5C 01                         byte_12A06:	dc.b 1
00012F5D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012F62 01                         byte_12A0C:	dc.b 1
00012F63 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012F68 01                         byte_12A12:	dc.b 1
00012F69 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012F6E 01                         byte_12A18:	dc.b 1
00012F6F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012F74 01                         byte_12A1E:	dc.b 1
00012F75 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012F7A 04                         byte_12A24:	dc.b 4
00012F7B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012F80 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012F85 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012F8A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012F8F 04                         byte_12A39:	dc.b 4
00012F90 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012F95 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012F9A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012F9F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012FA4 01                         byte_12A4E:	dc.b 1
00012FA5 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012FAA 01                         byte_12A54:	dc.b 1
00012FAB F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012FB0 01                         byte_12A5A:	dc.b 1
00012FB1 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012FB6 01                         byte_12A60:	dc.b 1
00012FB7 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012FBC 01                         byte_12A66:	dc.b 1
00012FBD F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012FC2 01                         byte_12A6C:	dc.b 1
00012FC3 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012FC8 01                         byte_12A72:	dc.b 1
00012FC9 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012FCE 01                         byte_12A78:	dc.b 1
00012FCF F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012FD4 01                         byte_12A7E:	dc.b 1
00012FD5 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012FDA 01                         byte_12A84:	dc.b 1
00012FDB F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012FE0 01                         byte_12A8A:	dc.b 1
00012FE1 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012FE6 01                         byte_12A90:	dc.b 1
00012FE7 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012FEC 01                         byte_12A96:	dc.b 1
00012FED F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012FF2 00                         byte_12A9C:	dc.b 0
00012FF4 00                         		even
00012FF4 00                         		even
00012FF4                            
00012FF4                            ; ===========================================================================
00012FF4                            ; ---------------------------------------------------------------------------
00012FF4                            ; Object 65 - waterfalls (LZ)
00012FF4                            ; ---------------------------------------------------------------------------
00012FF4                            
00012FF4                            Obj65:					; XREF: Obj_Index
00012FF4 7000                       		moveq	#0,d0
00012FF6 1028 0024                  		move.b	$24(a0),d0
00012FFA 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012FFE 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013002                            ; ===========================================================================
00013002 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013004 0000                       		dc.w Obj65_Animate-Obj65_Index
00013006 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013008 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001300A 0000                       		dc.w loc_12B36-Obj65_Index
0001300C                            ; ===========================================================================
0001300C                            
0001300C                            Obj65_Main:				; XREF: Obj65_Index
0001300C 5828 0024                  		addq.b	#4,$24(a0)
00013010 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013018 317C 4259 0002             		move.w	#$4259,2(a0)
0001301E 0028 0004 0001             		ori.b	#4,1(a0)
00013024 117C 0018 0019             		move.b	#$18,$19(a0)
0001302A 117C 0001 0018             		move.b	#1,$18(a0)
00013030 1028 0028                  		move.b	$28(a0),d0	; get object type
00013034 6A00                       		bpl.s	loc_12AE6
00013036 08E8 0007 0002             		bset	#7,2(a0)
0001303C                            
0001303C                            loc_12AE6:
0001303C 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013040 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013044 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013048 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001304A 4228 0018                  		clr.b	$18(a0)
0001304E 5528 0024                  		subq.b	#2,$24(a0)
00013052 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013058 6700                       		beq.s	loc_12B0A	; if not, branch
0001305A 117C 0006 0024             		move.b	#6,$24(a0)
00013060                            
00013060                            loc_12B0A:
00013060 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013066 6700                       		beq.s	Obj65_Animate	; if not, branch
00013068 117C 0008 0024             		move.b	#8,$24(a0)
0001306E                            
0001306E                            Obj65_Animate:				; XREF: Obj65_Index
0001306E 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013074 4EB9 0000 AC66             		jsr	AnimateSprite
0001307A                            
0001307A                            Obj65_ChkDel:				; XREF: Obj65_Index
0001307A 6000 CBBC                  		bra.w	MarkObjGone
0001307E                            ; ===========================================================================
0001307E                            
0001307E                            Obj65_FixHeight:			; XREF: Obj65_Index
0001307E 3038 F646                  		move.w	($FFFFF646).w,d0
00013082 0440 0010                  		subi.w	#$10,d0
00013086 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001308A 60E2                       		bra.s	Obj65_Animate
0001308C                            ; ===========================================================================
0001308C                            
0001308C                            loc_12B36:				; XREF: Obj65_Index
0001308C 08A8 0007 0002             		bclr	#7,2(a0)
00013092 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013098 6600                       		bne.s	Obj65_Animate2
0001309A 08E8 0007 0002             		bset	#7,2(a0)
000130A0                            
000130A0                            Obj65_Animate2:
000130A0 60CC                       		bra.s	Obj65_Animate
000130A2                            ; ===========================================================================
000130A2                            Ani_obj65:
000130A2                            	include "_anim\obj65.asm"
000130A2                            ; ---------------------------------------------------------------------------
000130A2                            ; Animation script - waterfall (LZ)
000130A2                            ; ---------------------------------------------------------------------------
000130A2 0000                       		dc.w byte_12B4E-Ani_obj65
000130A4 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000130AA 00                         		even
000130AA 00                         		even
000130AA                            
000130AA                            ; ---------------------------------------------------------------------------
000130AA                            ; Sprite mappings - waterfalls (LZ)
000130AA                            ; ---------------------------------------------------------------------------
000130AA                            Map_obj65:
000130AA                            	include "_maps\obj65.asm"
000130AA                            ; ---------------------------------------------------------------------------
000130AA                            ; Sprite mappings - waterfalls (LZ)
000130AA                            ; ---------------------------------------------------------------------------
000130AA 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000130AE 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000130B2 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000130B6 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000130BA 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000130BE 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000130C2 01                         byte_12B6C:	dc.b 1
000130C3 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000130C8 02                         byte_12B72:	dc.b 2
000130C9 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000130CE 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000130D3 02                         byte_12B7D:	dc.b 2
000130D4 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130D9 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130DE 01                         byte_12B88:	dc.b 1
000130DF F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000130E4 02                         byte_12B8E:	dc.b 2
000130E5 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130EA 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130EF 01                         byte_12B99:	dc.b 1
000130F0 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000130F5 01                         byte_12B9F:	dc.b 1
000130F6 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000130FB 01                         byte_12BA5:	dc.b 1
000130FC F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013101 02                         byte_12BAB:	dc.b 2
00013102 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013107 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001310C 02                         byte_12BB6:	dc.b 2
0001310D F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013112 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013117 02                         byte_12BC1:	dc.b 2
00013118 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001311D F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013122 02                         byte_12BCC:	dc.b 2
00013123 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013128 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001312E 00                         		even
0001312E 00                         		even
0001312E                            
0001312E                            ; ===========================================================================
0001312E                            ; ---------------------------------------------------------------------------
0001312E                            ; Object 01 - Sonic
0001312E                            ; ---------------------------------------------------------------------------
0001312E                            
0001312E                            Obj01:					; XREF: Obj_Index
0001312E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013132 6700                       		beq.s	Obj01_Normal	; if not, branch
00013134 4EF9 0000 0000             		jmp	DebugMode
0001313A                            ; ===========================================================================
0001313A                            
0001313A                            Obj01_Normal:
0001313A 7000                       		moveq	#0,d0
0001313C 1028 0024                  		move.b	$24(a0),d0
00013140 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013144 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013148                            ; ===========================================================================
00013148 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001314A 0000                       		dc.w Obj01_Control-Obj01_Index
0001314C 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001314E 0000                       		dc.w Obj01_Death-Obj01_Index
00013150 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013152                            ; ===========================================================================
00013152                            
00013152                            Obj01_Main:				; XREF: Obj01_Index
00013152 5428 0024                  		addq.b	#2,$24(a0)
00013156 117C 0013 0016             		move.b	#$13,$16(a0)
0001315C 117C 0009 0017             		move.b	#9,$17(a0)
00013162 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001316A 317C 0780 0002             		move.w	#$780,2(a0)
00013170 117C 0002 0018             		move.b	#2,$18(a0)
00013176 117C 0018 0019             		move.b	#$18,$19(a0)
0001317C 117C 0004 0001             		move.b	#4,1(a0)
00013182 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013188 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001318E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013194                            
00013194                            Obj01_Control:				; XREF: Obj01_Index
00013194 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013198 6700                       		beq.s	loc_12C58	; if not, branch
0001319A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000131A0 6700                       		beq.s	loc_12C58	; if not, branch
000131A2 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000131A8 4238 F7CC                  		clr.b	($FFFFF7CC).w
000131AC 4E75                       		rts	
000131AE                            ; ===========================================================================
000131AE                            
000131AE                            loc_12C58:
000131AE 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000131B2 6600                       		bne.s	loc_12C64	; if yes, branch
000131B4 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000131BA                            
000131BA                            loc_12C64:
000131BA 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000131C0 6600                       		bne.s	loc_12C7E	; if yes, branch
000131C2 7000                       		moveq	#0,d0
000131C4 1028 0022                  		move.b	$22(a0),d0
000131C8 0240 0006                  		andi.w	#6,d0
000131CC 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000131D0 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000131D4                            
000131D4                            loc_12C7E:
000131D4 6100                       		bsr.s	Sonic_Display
000131D6 6100 0000                  		bsr.w	Sonic_RecordPos
000131DA 6100 0000                  		bsr.w	Sonic_Water
000131DE 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000131E4 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000131EA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000131EE 6700                       		beq.s	loc_12CA6
000131F0 4A28 001C                  		tst.b	$1C(a0)
000131F4 6600                       		bne.s	loc_12CA6
000131F6 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000131FC                            
000131FC                            loc_12CA6:
000131FC 6100 0000                  		bsr.w	Sonic_Animate
00013200 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013204 6B00                       		bmi.s	loc_12CB6
00013206 4EB9 0000 0000             		jsr	TouchResponse
0001320C                            
0001320C                            loc_12CB6:
0001320C 6100 0000                  		bsr.w	Sonic_Loops
00013210 6100 0000                  		bsr.w	LoadSonicDynPLC
00013214 4E75                       		rts	
00013216                            ; ===========================================================================
00013216 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013218 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001321A 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001321C 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001321E                            ; ---------------------------------------------------------------------------
0001321E                            ; Music	to play	after invincibility wears off
0001321E                            ; ---------------------------------------------------------------------------
0001321E                            ; ===========================================================================
0001321E                            
0001321E                            Sonic_Display:				; XREF: loc_12C7E
0001321E 3028 0030                  		move.w	$30(a0),d0
00013222 6700                       		beq.s	Obj01_Display
00013224 5368 0030                  		subq.w	#1,$30(a0)
00013228 E648                       		lsr.w	#3,d0
0001322A 6400                       		bcc.s	Obj01_ChkInvin
0001322C                            
0001322C                            Obj01_Display:
0001322C 4EBA A962                  		jsr	DisplaySprite
00013230                            
00013230                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013230                             
00013230                            Obj01_ChkInvin:
00013230 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013234 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013238 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001323C 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013240 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013244 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013248 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001324C 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013250 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013256 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001325A 7000                       		moveq	#0,d0
0001325C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013260                             
00013260 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013266 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013268 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001326E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013270                             
00013270                            Obj01_GetBgm2:
00013270 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013276 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013278 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001327E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013280                             
00013280                            Obj01_GetBgm3:
00013280 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013286 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013288 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001328E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013290                             
00013290                            Obj01_GetBgm4:
00013290 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013296 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013298 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001329E                             
0001329E                            Obj01_PlayMusic:
0001329E 1031 0000                  		move.b	(a1,d0.w),d0
000132A2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
000132A8                             
000132A8                            ; NineKode ends here.
000132A8                            
000132A8                            Obj01_RmvInvin:
000132A8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000132AE                            
000132AE                            Obj01_ChkShoes:
000132AE 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000132B2 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000132B4 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000132B8 6700                       		beq.s	Obj01_ExitChk
000132BA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000132BE 6600                       		bne.s	Obj01_ExitChk
000132C0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000132C6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000132CC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000132D2 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000132D8 303C 00E3                  		move.w	#$E3,d0
000132DC 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
000132E2                            ; ===========================================================================
000132E2                            
000132E2                            Obj01_ExitChk:
000132E2 4E75                       		rts	
000132E4                            
000132E4                            ; ---------------------------------------------------------------------------
000132E4                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000132E4                            ; ---------------------------------------------------------------------------
000132E4                            
000132E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132E4                            
000132E4                            
000132E4                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000132E4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000132E8 43F8 CB00                  		lea	($FFFFCB00).w,a1
000132EC 43F1 0000                  		lea	(a1,d0.w),a1
000132F0 32E8 0008                  		move.w	8(a0),(a1)+
000132F4 32E8 000C                  		move.w	$C(a0),(a1)+
000132F8 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000132FC 4E75                       		rts	
000132FE                            ; End of function Sonic_RecordPos
000132FE                            
000132FE                            ; ---------------------------------------------------------------------------
000132FE                            ; Subroutine for Sonic when he's underwater
000132FE                            ; ---------------------------------------------------------------------------
000132FE                            
000132FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132FE                            
000132FE                            
000132FE                            Sonic_Water:				; XREF: loc_12C7E
000132FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013304 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013306                            
00013306                            locret_12D80:
00013306 4E75                       		rts	
00013308                            ; ===========================================================================
00013308                            
00013308                            Obj01_InWater:
00013308 3038 F646                  		move.w	($FFFFF646).w,d0
0001330C B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013310 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013312 08E8 0006 0022             		bset	#6,$22(a0)
00013318 66EC                       		bne.s	locret_12D80
0001331A 6100 0000                  		bsr.w	ResumeMusic
0001331E 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013324 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001332A 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013330 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013336 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001333C E0E8 0010                  		asr	$10(a0)
00013340 E0E8 0012                  		asr	$12(a0)
00013344 E0E8 0012                  		asr	$12(a0)
00013348 67BC                       		beq.s	locret_12D80
0001334A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013350 303C 00AA                  		move.w	#$AA,d0
00013354 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
0001335A                            ; ===========================================================================
0001335A                            
0001335A                            Obj01_OutWater:
0001335A 08A8 0006 0022             		bclr	#6,$22(a0)
00013360 67A4                       		beq.s	locret_12D80
00013362 6100 0000                  		bsr.w	ResumeMusic
00013366 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001336C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013372 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013378 E1E8 0012                  		asl	$12(a0)
0001337C 6700 FF88                  		beq.w	locret_12D80
00013380 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013386 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001338C 6E00                       		bgt.s	loc_12E0E
0001338E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013394                            
00013394                            loc_12E0E:
00013394 303C 00AA                  		move.w	#$AA,d0
00013398 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
0001339E                            ; End of function Sonic_Water
0001339E                            
0001339E                            ; ===========================================================================
0001339E                            ; ---------------------------------------------------------------------------
0001339E                            ; Modes	for controlling	Sonic
0001339E                            ; ---------------------------------------------------------------------------
0001339E                            
0001339E                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001339E 6100 0000                  		bsr.w	Sonic_Jump
000133A2 6100 0000                  		bsr.w	Sonic_SlopeResist
000133A6 6100 0000                  		bsr.w	Sonic_Move
000133AA 6100 0000                  		bsr.w	Sonic_Roll
000133AE 6100 0000                  		bsr.w	Sonic_LevelBound
000133B2 4EBA A7B6                  		jsr	SpeedToPos
000133B6 6100 0000                  		bsr.w	Sonic_AnglePos
000133BA 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133BE 4E75                       		rts	
000133C0                            ; ===========================================================================
000133C0                            
000133C0                            Obj01_MdJump:				; XREF: Obj01_Modes
000133C0 6100 0000                  		bsr.w	Sonic_JumpHeight
000133C4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133C8 6100 0000                  		bsr.w	Sonic_LevelBound
000133CC 4EBA A770                  		jsr	ObjectFall
000133D0 0828 0006 0022             		btst	#6,$22(a0)
000133D6 6700                       		beq.s	loc_12E5C
000133D8 0468 0028 0012             		subi.w	#$28,$12(a0)
000133DE                            
000133DE                            loc_12E5C:
000133DE 6100 0000                  		bsr.w	Sonic_JumpAngle
000133E2 6100 0000                  		bsr.w	Sonic_Floor
000133E6 4E75                       		rts	
000133E8                            ; ===========================================================================
000133E8                            
000133E8                            Obj01_MdRoll:				; XREF: Obj01_Modes
000133E8 6100 0000                  		bsr.w	Sonic_Jump
000133EC 6100 0000                  		bsr.w	Sonic_RollRepel
000133F0 6100 0000                  		bsr.w	Sonic_RollSpeed
000133F4 6100 0000                  		bsr.w	Sonic_LevelBound
000133F8 4EBA A770                  		jsr	SpeedToPos
000133FC 6100 0000                  		bsr.w	Sonic_AnglePos
00013400 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013404 4E75                       		rts	
00013406                            ; ===========================================================================
00013406                            
00013406                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013406 6100 0000                  		bsr.w	Sonic_JumpHeight
0001340A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001340E 6100 0000                  		bsr.w	Sonic_LevelBound
00013412 4EBA A72A                  		jsr	ObjectFall
00013416 0828 0006 0022             		btst	#6,$22(a0)
0001341C 6700                       		beq.s	loc_12EA6
0001341E 0468 0028 0012             		subi.w	#$28,$12(a0)
00013424                            
00013424                            loc_12EA6:
00013424 6100 0000                  		bsr.w	Sonic_JumpAngle
00013428 6100 0000                  		bsr.w	Sonic_Floor
0001342C 4E75                       		rts	
0001342E                            ; ---------------------------------------------------------------------------
0001342E                            ; Subroutine to	make Sonic walk/run
0001342E                            ; ---------------------------------------------------------------------------
0001342E                            
0001342E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001342E                            
0001342E                            
0001342E                            Sonic_Move:				; XREF: Obj01_MdNormal
0001342E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013432 3A38 F762                  		move.w	($FFFFF762).w,d5
00013436 3838 F764                  		move.w	($FFFFF764).w,d4
0001343A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001343E 6600 0000                  		bne.w	loc_12FEE
00013442 4A68 003E                  		tst.w	$3E(a0)
00013446 6600 0000                  		bne.w	Obj01_ResetScr
0001344A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013450 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013452 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013458 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001345A 6100 0000                  		bsr.w	Sonic_MoveLeft
0001345E                            
0001345E                            Obj01_NotLeft:
0001345E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013464 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013466 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001346C 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
0001346E 6100 0000                  		bsr.w	Sonic_MoveLeft
00013472 6000                       		bra.s	Obj01_NotRight
00013474                            
00013474                            Obj01_MoveRight:
00013474 6100 0000                  		bsr.w	Sonic_MoveRight
00013478                            
00013478                            Obj01_NotRight:
00013478 1028 0026                  		move.b	$26(a0),d0
0001347C 0600 0020                  		addi.b	#$20,d0
00013480 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013484 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013488 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001348C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013490 08A8 0005 0022             		bclr	#5,$22(a0)
00013496 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001349C 0828 0003 0022             		btst	#3,$22(a0)
000134A2 6700                       		beq.s	Sonic_Balance
000134A4 7000                       		moveq	#0,d0
000134A6 1028 003D                  		move.b	$3D(a0),d0
000134AA ED48                       		lsl.w	#6,d0
000134AC 43F8 D000                  		lea	($FFFFD000).w,a1
000134B0 43F1 0000                  		lea	(a1,d0.w),a1
000134B4 4A29 0022                  		tst.b	$22(a1)
000134B8 6B00                       		bmi.s	Sonic_LookUp
000134BA 7200                       		moveq	#0,d1
000134BC 1229 0019                  		move.b	$19(a1),d1
000134C0 3401                       		move.w	d1,d2
000134C2 D442                       		add.w	d2,d2
000134C4 5942                       		subq.w	#4,d2
000134C6 D268 0008                  		add.w	8(a0),d1
000134CA 9269 0008                  		sub.w	8(a1),d1
000134CE 0C41 0004                  		cmpi.w	#4,d1
000134D2 6D00                       		blt.s	loc_12F6A
000134D4 B242                       		cmp.w	d2,d1
000134D6 6C00                       		bge.s	loc_12F5A
000134D8 6000                       		bra.s	Sonic_LookUp
000134DA                            ; ===========================================================================
000134DA                            
000134DA                            Sonic_Balance:
000134DA 4EB9 0000 0000             		jsr	ObjHitFloor
000134E0 0C41 000C                  		cmpi.w	#$C,d1
000134E4 6D00                       		blt.s	Sonic_LookUp
000134E6 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000134EC 6600                       		bne.s	loc_12F62
000134EE                            
000134EE                            loc_12F5A:
000134EE 08A8 0000 0022             		bclr	#0,$22(a0)
000134F4 6000                       		bra.s	loc_12F70
000134F6                            ; ===========================================================================
000134F6                            
000134F6                            loc_12F62:
000134F6 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000134FC 6600                       		bne.s	Sonic_LookUp
000134FE                            
000134FE                            loc_12F6A:
000134FE 08E8 0000 0022             		bset	#0,$22(a0)
00013504                            
00013504                            loc_12F70:
00013504 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001350A 6000                       		bra.s	Obj01_ResetScr
0001350C                            ; ===========================================================================
0001350C                            
0001350C                            Sonic_LookUp:
0001350C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013512 6700                       		beq.s	Sonic_Duck	; if not, branch
00013514 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001351A 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013520 6700                       		beq.s	loc_12FC2
00013522 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013526 6000                       		bra.s	loc_12FC2
00013528                            ; ===========================================================================
00013528                            
00013528                            Sonic_Duck:
00013528 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001352E 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013530 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013536 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001353C 6700                       		beq.s	loc_12FC2
0001353E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013542 6000                       		bra.s	loc_12FC2
00013544                            ; ===========================================================================
00013544                            
00013544                            Obj01_ResetScr:
00013544 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001354A 6700                       		beq.s	loc_12FC2	; if yes, branch
0001354C 6400                       		bcc.s	loc_12FBE
0001354E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013552                            
00013552                            loc_12FBE:
00013552 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013556                            
00013556                            loc_12FC2:
00013556 1038 F602                  		move.b	($FFFFF602).w,d0
0001355A 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001355E 6600                       		bne.s	loc_12FEE	; if yes, branch
00013560 3028 0014                  		move.w	$14(a0),d0
00013564 6700                       		beq.s	loc_12FEE
00013566 6B00                       		bmi.s	loc_12FE2
00013568 9045                       		sub.w	d5,d0
0001356A 6400                       		bcc.s	loc_12FDC
0001356C 303C 0000                  		move.w	#0,d0
00013570                            
00013570                            loc_12FDC:
00013570 3140 0014                  		move.w	d0,$14(a0)
00013574 6000                       		bra.s	loc_12FEE
00013576                            ; ===========================================================================
00013576                            
00013576                            loc_12FE2:
00013576 D045                       		add.w	d5,d0
00013578 6400                       		bcc.s	loc_12FEA
0001357A 303C 0000                  		move.w	#0,d0
0001357E                            
0001357E                            loc_12FEA:
0001357E 3140 0014                  		move.w	d0,$14(a0)
00013582                            
00013582                            loc_12FEE:
00013582 1028 0026                  		move.b	$26(a0),d0
00013586 4EB9 0000 2C22             		jsr	(CalcSine).l
0001358C C3E8 0014                  		muls.w	$14(a0),d1
00013590 E081                       		asr.l	#8,d1
00013592 3141 0010                  		move.w	d1,$10(a0)
00013596 C1E8 0014                  		muls.w	$14(a0),d0
0001359A E080                       		asr.l	#8,d0
0001359C 3140 0012                  		move.w	d0,$12(a0)
000135A0                            
000135A0                            loc_1300C:
000135A0 1028 0026                  		move.b	$26(a0),d0
000135A4 0600 0040                  		addi.b	#$40,d0
000135A8 6B00                       		bmi.s	locret_1307C
000135AA 123C 0040                  		move.b	#$40,d1
000135AE 4A68 0014                  		tst.w	$14(a0)
000135B2 6700                       		beq.s	locret_1307C
000135B4 6B00                       		bmi.s	loc_13024
000135B6 4441                       		neg.w	d1
000135B8                            
000135B8                            loc_13024:
000135B8 1028 0026                  		move.b	$26(a0),d0
000135BC D001                       		add.b	d1,d0
000135BE 3F00                       		move.w	d0,-(sp)
000135C0 6100 0000                  		bsr.w	Sonic_WalkSpeed
000135C4 301F                       		move.w	(sp)+,d0
000135C6 4A41                       		tst.w	d1
000135C8 6A00                       		bpl.s	locret_1307C
000135CA E141                       		asl.w	#8,d1
000135CC 0600 0020                  		addi.b	#$20,d0
000135D0 0200 00C0                  		andi.b	#$C0,d0
000135D4 6700                       		beq.s	loc_13078
000135D6 0C00 0040                  		cmpi.b	#$40,d0
000135DA 6700                       		beq.s	loc_13066
000135DC 0C00 0080                  		cmpi.b	#$80,d0
000135E0 6700                       		beq.s	loc_13060
000135E2 D368 0010                  		add.w	d1,$10(a0)
000135E6 08E8 0005 0022             		bset	#5,$22(a0)
000135EC 317C 0000 0014             		move.w	#0,$14(a0)
000135F2 4E75                       		rts	
000135F4                            ; ===========================================================================
000135F4                            
000135F4                            loc_13060:
000135F4 9368 0012                  		sub.w	d1,$12(a0)
000135F8 4E75                       		rts	
000135FA                            ; ===========================================================================
000135FA                            
000135FA                            loc_13066:
000135FA 9368 0010                  		sub.w	d1,$10(a0)
000135FE 08E8 0005 0022             		bset	#5,$22(a0)
00013604 317C 0000 0014             		move.w	#0,$14(a0)
0001360A 4E75                       		rts	
0001360C                            ; ===========================================================================
0001360C                            
0001360C                            loc_13078:
0001360C D368 0012                  		add.w	d1,$12(a0)
00013610                            
00013610                            locret_1307C:
00013610 4E75                       		rts	
00013612                            ; End of function Sonic_Move
00013612                            
00013612                            
00013612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013612                            
00013612                            
00013612                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013612 3028 0014                  		move.w	$14(a0),d0
00013616 6700                       		beq.s	loc_13086
00013618 6A00                       		bpl.s	loc_130B2
0001361A                            
0001361A                            loc_13086:
0001361A 08E8 0000 0022             		bset	#0,$22(a0)
00013620 6600                       		bne.s	loc_1309A
00013622 08A8 0005 0022             		bclr	#5,$22(a0)
00013628 117C 0001 001D             		move.b	#1,$1D(a0)
0001362E                            
0001362E                            loc_1309A:
0001362E 9045                       		sub.w	d5,d0
00013630 3206                       		move.w	d6,d1
00013632 4441                       		neg.w	d1
00013634 B041                       		cmp.w	d1,d0
00013636 6E00                       		bgt.s	loc_130A6
00013638 3001                       		move.w	d1,d0
0001363A                            
0001363A                            loc_130A6:
0001363A 3140 0014                  		move.w	d0,$14(a0)
0001363E 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013644 4E75                       		rts	
00013646                            ; ===========================================================================
00013646                            
00013646                            loc_130B2:				; XREF: Sonic_MoveLeft
00013646 9044                       		sub.w	d4,d0
00013648 6400                       		bcc.s	loc_130BA
0001364A 303C FF80                  		move.w	#-$80,d0
0001364E                            
0001364E                            loc_130BA:
0001364E 3140 0014                  		move.w	d0,$14(a0)
00013652 1028 0026                  		move.b	$26(a0),d0
00013656 0600 0020                  		addi.b	#$20,d0
0001365A 0200 00C0                  		andi.b	#$C0,d0
0001365E 6600                       		bne.s	locret_130E8
00013660 0C40 0400                  		cmpi.w	#$400,d0
00013664 6D00                       		blt.s	locret_130E8
00013666 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001366C 08A8 0000 0022             		bclr	#0,$22(a0)
00013672 303C 00A4                  		move.w	#$A4,d0
00013676 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
0001367C                            
0001367C                            locret_130E8:
0001367C 4E75                       		rts	
0001367E                            ; End of function Sonic_MoveLeft
0001367E                            
0001367E                            
0001367E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001367E                            
0001367E                            
0001367E                            Sonic_MoveRight:			; XREF: Sonic_Move
0001367E 3028 0014                  		move.w	$14(a0),d0
00013682 6B00                       		bmi.s	loc_13118
00013684 08A8 0000 0022             		bclr	#0,$22(a0)
0001368A 6700                       		beq.s	loc_13104
0001368C 08A8 0005 0022             		bclr	#5,$22(a0)
00013692 117C 0001 001D             		move.b	#1,$1D(a0)
00013698                            
00013698                            loc_13104:
00013698 D045                       		add.w	d5,d0
0001369A B046                       		cmp.w	d6,d0
0001369C 6D00                       		blt.s	loc_1310C
0001369E 3006                       		move.w	d6,d0
000136A0                            
000136A0                            loc_1310C:
000136A0 3140 0014                  		move.w	d0,$14(a0)
000136A4 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000136AA 4E75                       		rts	
000136AC                            ; ===========================================================================
000136AC                            
000136AC                            loc_13118:				; XREF: Sonic_MoveRight
000136AC D044                       		add.w	d4,d0
000136AE 6400                       		bcc.s	loc_13120
000136B0 303C 0080                  		move.w	#$80,d0
000136B4                            
000136B4                            loc_13120:
000136B4 3140 0014                  		move.w	d0,$14(a0)
000136B8 1028 0026                  		move.b	$26(a0),d0
000136BC 0600 0020                  		addi.b	#$20,d0
000136C0 0200 00C0                  		andi.b	#$C0,d0
000136C4 6600                       		bne.s	locret_1314E
000136C6 0C40 FC00                  		cmpi.w	#-$400,d0
000136CA 6E00                       		bgt.s	locret_1314E
000136CC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136D2 08E8 0000 0022             		bset	#0,$22(a0)
000136D8 303C 00A4                  		move.w	#$A4,d0
000136DC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000136E2                            
000136E2                            locret_1314E:
000136E2 4E75                       		rts	
000136E4                            ; End of function Sonic_MoveRight
000136E4                            
000136E4                            ; ---------------------------------------------------------------------------
000136E4                            ; Subroutine to	change Sonic's speed as he rolls
000136E4                            ; ---------------------------------------------------------------------------
000136E4                            
000136E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136E4                            
000136E4                            
000136E4                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000136E4 3C38 F760                  		move.w	($FFFFF760).w,d6
000136E8 E346                       		asl.w	#1,d6
000136EA 3A38 F762                  		move.w	($FFFFF762).w,d5
000136EE E245                       		asr.w	#1,d5
000136F0 3838 F764                  		move.w	($FFFFF764).w,d4
000136F4 E444                       		asr.w	#2,d4
000136F6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000136FA 6600 0000                  		bne.w	loc_131CC
000136FE 4A68 003E                  		tst.w	$3E(a0)
00013702 6600                       		bne.s	loc_13188
00013704 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001370A 6700                       		beq.s	loc_1317C	; if not, branch
0001370C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013712 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013714 6100 0000                  		bsr.w	Sonic_RollLeft
00013718                            
00013718                            loc_1317C:
00013718 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001371E 6700                       		beq.s	loc_13188	; if not, branch
00013720 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013726 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013728 6100 0000                  		bsr.w	Sonic_RollLeft
0001372C 6000                       		bra.s	loc_13188
0001372E                            
0001372E                            SonicRS_RollRight:
0001372E 6100 0000                  		bsr.w	Sonic_RollRight
00013732                            
00013732                            loc_13188:
00013732 3028 0014                  		move.w	$14(a0),d0
00013736 6700                       		beq.s	loc_131AA
00013738 6B00                       		bmi.s	loc_1319E
0001373A 9045                       		sub.w	d5,d0
0001373C 6400                       		bcc.s	loc_13198
0001373E 303C 0000                  		move.w	#0,d0
00013742                            
00013742                            loc_13198:
00013742 3140 0014                  		move.w	d0,$14(a0)
00013746 6000                       		bra.s	loc_131AA
00013748                            ; ===========================================================================
00013748                            
00013748                            loc_1319E:				; XREF: Sonic_RollSpeed
00013748 D045                       		add.w	d5,d0
0001374A 6400                       		bcc.s	loc_131A6
0001374C 303C 0000                  		move.w	#0,d0
00013750                            
00013750                            loc_131A6:
00013750 3140 0014                  		move.w	d0,$14(a0)
00013754                            
00013754                            loc_131AA:
00013754 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013758 6600                       		bne.s	loc_131CC	; if yes, branch
0001375A 08A8 0002 0022             		bclr	#2,$22(a0)
00013760 117C 0013 0016             		move.b	#$13,$16(a0)
00013766 117C 0009 0017             		move.b	#9,$17(a0)
0001376C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013772 5B68 000C                  		subq.w	#5,$C(a0)
00013776                            
00013776                            loc_131CC:
00013776 1028 0026                  		move.b	$26(a0),d0
0001377A 4EB9 0000 2C22             		jsr	(CalcSine).l
00013780 C1E8 0014                  		muls.w	$14(a0),d0
00013784 E080                       		asr.l	#8,d0
00013786 3140 0012                  		move.w	d0,$12(a0)
0001378A C3E8 0014                  		muls.w	$14(a0),d1
0001378E E081                       		asr.l	#8,d1
00013790 0C41 1000                  		cmpi.w	#$1000,d1
00013794 6F00                       		ble.s	loc_131F0
00013796 323C 1000                  		move.w	#$1000,d1
0001379A                            
0001379A                            loc_131F0:
0001379A 0C41 F000                  		cmpi.w	#-$1000,d1
0001379E 6C00                       		bge.s	loc_131FA
000137A0 323C F000                  		move.w	#-$1000,d1
000137A4                            
000137A4                            loc_131FA:
000137A4 3141 0010                  		move.w	d1,$10(a0)
000137A8 6000 FDF6                  		bra.w	loc_1300C
000137AC                            ; End of function Sonic_RollSpeed
000137AC                            
000137AC                            
000137AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137AC                            
000137AC                            
000137AC                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000137AC 3028 0014                  		move.w	$14(a0),d0
000137B0 6700                       		beq.s	loc_1320A
000137B2 6A00                       		bpl.s	loc_13218
000137B4                            
000137B4                            loc_1320A:
000137B4 08E8 0000 0022             		bset	#0,$22(a0)
000137BA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137C0 4E75                       		rts	
000137C2                            ; ===========================================================================
000137C2                            
000137C2                            loc_13218:
000137C2 9044                       		sub.w	d4,d0
000137C4 6400                       		bcc.s	loc_13220
000137C6 303C FF80                  		move.w	#-$80,d0
000137CA                            
000137CA                            loc_13220:
000137CA 3140 0014                  		move.w	d0,$14(a0)
000137CE 4E75                       		rts	
000137D0                            ; End of function Sonic_RollLeft
000137D0                            
000137D0                            
000137D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137D0                            
000137D0                            
000137D0                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000137D0 3028 0014                  		move.w	$14(a0),d0
000137D4 6B00                       		bmi.s	loc_1323A
000137D6 08A8 0000 0022             		bclr	#0,$22(a0)
000137DC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137E2 4E75                       		rts	
000137E4                            ; ===========================================================================
000137E4                            
000137E4                            loc_1323A:
000137E4 D044                       		add.w	d4,d0
000137E6 6400                       		bcc.s	loc_13242
000137E8 303C 0080                  		move.w	#$80,d0
000137EC                            
000137EC                            loc_13242:
000137EC 3140 0014                  		move.w	d0,$14(a0)
000137F0 4E75                       		rts	
000137F2                            ; End of function Sonic_RollRight
000137F2                            
000137F2                            ; ---------------------------------------------------------------------------
000137F2                            ; Subroutine to	change Sonic's direction while jumping
000137F2                            ; ---------------------------------------------------------------------------
000137F2                            
000137F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137F2                            
000137F2                            
000137F2                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000137F2 3C38 F760                  		move.w	($FFFFF760).w,d6
000137F6 3A38 F762                  		move.w	($FFFFF762).w,d5
000137FA E345                       		asl.w	#1,d5
000137FC 0828 0004 0022             		btst	#4,$22(a0)
00013802 6600                       		bne.s	Obj01_ResetScr2
00013804 3028 0010                  		move.w	$10(a0),d0
00013808 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001380E 6700                       		beq.s	loc_13278	; if not, branch
00013810 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013816 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013818 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001381C 6E00                       		bgt.s	loc_13278
0001381E 3001                       		move.w	d1,d0
00013820                            
00013820                            loc_13278:
00013820 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013826 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013828 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001382E 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013830 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013834 6E00                       		bgt.s	Obj01_JumpMove
00013836 3001                       		move.w	d1,d0
00013838 6000                       		bra.s	Obj01_JumpMove
0001383A                            
0001383A                            SonicCJD_JumpLeft:
0001383A 08E8 0000 0022             		bset	#0,$22(a0)
00013840 9045                       		sub.w	d5,d0
00013842 3206                       		move.w	d6,d1
00013844 4441                       		neg.w	d1
00013846 B041                       		cmp.w	d1,d0
00013848                            		; bgt.s	loc_13278
00013848                            		; move.w	d1,d0
00013848 4E75                       		rts
0001384A                            
0001384A                            SonicCJD_JumpRight:
0001384A 08A8 0000 0022             		bclr	#0,$22(a0)
00013850 D045                       		add.w	d5,d0
00013852 B046                       		cmp.w	d6,d0
00013854 6D00                       		blt.s	Obj01_JumpMove
00013856 3006                       		move.w	d6,d0
00013858                            
00013858                            Obj01_JumpMove:
00013858 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
0001385C                            
0001385C                            Obj01_ResetScr2:
0001385C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013862 6700                       		beq.s	loc_132A4	; if yes, branch
00013864 6400                       		bcc.s	loc_132A0
00013866 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001386A                            
0001386A                            loc_132A0:
0001386A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001386E                            
0001386E                            loc_132A4:
0001386E 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013874 6500                       		bcs.s	locret_132D2	; if yes, branch
00013876 3028 0010                  		move.w	$10(a0),d0
0001387A 3200                       		move.w	d0,d1
0001387C EA41                       		asr.w	#5,d1
0001387E 6700                       		beq.s	locret_132D2
00013880 6B00                       		bmi.s	loc_132C6
00013882 9041                       		sub.w	d1,d0
00013884 6400                       		bcc.s	loc_132C0
00013886 303C 0000                  		move.w	#0,d0
0001388A                            
0001388A                            loc_132C0:
0001388A 3140 0010                  		move.w	d0,$10(a0)
0001388E 4E75                       		rts	
00013890                            ; ===========================================================================
00013890                            
00013890                            loc_132C6:
00013890 9041                       		sub.w	d1,d0
00013892 6500                       		bcs.s	loc_132CE
00013894 303C 0000                  		move.w	#0,d0
00013898                            
00013898                            loc_132CE:
00013898 3140 0010                  		move.w	d0,$10(a0)
0001389C                            
0001389C                            locret_132D2:
0001389C 4E75                       		rts	
0001389E                            ; End of function Sonic_ChgJumpDir
0001389E                            
0001389E                            ; ===========================================================================
0001389E                            ; ---------------------------------------------------------------------------
0001389E                            ; Unused subroutine to squash Sonic
0001389E                            ; ---------------------------------------------------------------------------
0001389E 1028 0026                  		move.b	$26(a0),d0
000138A2 0600 0020                  		addi.b	#$20,d0
000138A6 0200 00C0                  		andi.b	#$C0,d0
000138AA 6600                       		bne.s	locret_13302
000138AC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138B0 4A41                       		tst.w	d1
000138B2 6A00                       		bpl.s	locret_13302
000138B4 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000138BA 317C 0000 0010             		move.w	#0,$10(a0)
000138C0 317C 0000 0012             		move.w	#0,$12(a0)
000138C6 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000138CC                            
000138CC                            locret_13302:
000138CC 4E75                       		rts	
000138CE                            ; ---------------------------------------------------------------------------
000138CE                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000138CE                            ; ---------------------------------------------------------------------------
000138CE                            
000138CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138CE                            
000138CE                            
000138CE                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000138CE 2228 0008                  		move.l	8(a0),d1
000138D2 3028 0010                  		move.w	$10(a0),d0
000138D6 48C0                       		ext.l	d0
000138D8 E180                       		asl.l	#8,d0
000138DA D280                       		add.l	d0,d1
000138DC 4841                       		swap	d1
000138DE 3038 F728                  		move.w	($FFFFF728).w,d0
000138E2 0640 0010                  		addi.w	#$10,d0
000138E6 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000138E8 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000138EA 3038 F72A                  		move.w	($FFFFF72A).w,d0
000138EE 0640 0128                  		addi.w	#$128,d0
000138F2 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000138F6 6600                       		bne.s	loc_13332
000138F8 0640 0040                  		addi.w	#$40,d0
000138FC                            
000138FC                            loc_13332:
000138FC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000138FE 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013900                            
00013900                            loc_13336:
00013900 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013904 0640 00E0                  		addi.w	#$E0,d0
00013908 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
0001390C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001390E 4E75                       		rts	
00013910                            ; ===========================================================================
00013910                            
00013910                            Boundary_Bottom:
00013910 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013916 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
0001391A 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013920 6500 0000                  		bcs.w	KillSonic
00013924 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013928 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001392E 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013934 4E75                       		rts	
00013936                            ; ===========================================================================
00013936                            
00013936                            Boundary_Sides:
00013936 3140 0008                  		move.w	d0,8(a0)
0001393A 317C 0000 000A             		move.w	#0,$A(a0)
00013940 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013946 317C 0000 0014             		move.w	#0,$14(a0)
0001394C 60B2                       		bra.s	loc_13336
0001394E                            ; End of function Sonic_LevelBound
0001394E                            
0001394E                            ; ---------------------------------------------------------------------------
0001394E                            ; Subroutine allowing Sonic to roll when he's moving
0001394E                            ; ---------------------------------------------------------------------------
0001394E                            
0001394E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001394E                            
0001394E                            
0001394E                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001394E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013952 6600                       		bne.s	Obj01_NoRoll
00013954 3028 0014                  		move.w	$14(a0),d0
00013958 6A00                       		bpl.s	loc_13392
0001395A 4440                       		neg.w	d0
0001395C                            
0001395C                            loc_13392:
0001395C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013960 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013962 1038 F602                  		move.b	($FFFFF602).w,d0
00013966 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
0001396A 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001396C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013972 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013974                            
00013974                            Obj01_NoRoll:
00013974 4E75                       		rts	
00013976                            ; ===========================================================================
00013976                            
00013976                            Obj01_ChkRoll:
00013976 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
0001397C 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001397E 4E75                       		rts	
00013980                            ; ===========================================================================
00013980                            
00013980                            Obj01_DoRoll:
00013980 08E8 0002 0022             		bset	#2,$22(a0)
00013986 117C 000E 0016             		move.b	#$E,$16(a0)
0001398C 117C 0007 0017             		move.b	#7,$17(a0)
00013992 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013998 5A68 000C                  		addq.w	#5,$C(a0)
0001399C 303C 00BE                  		move.w	#$BE,d0
000139A0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
000139A6 4A68 0014                  		tst.w	$14(a0)
000139AA 6600                       		bne.s	locret_133E8
000139AC 317C 0200 0014             		move.w	#$200,$14(a0)
000139B2                            
000139B2                            locret_133E8:
000139B2 4E75                       		rts	
000139B4                            ; End of function Sonic_Roll
000139B4                            
000139B4                            ; ---------------------------------------------------------------------------
000139B4                            ; Subroutine allowing Sonic to jump
000139B4                            ; ---------------------------------------------------------------------------
000139B4                            
000139B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139B4                            
000139B4                            
000139B4                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000139B4 1038 F603                  		move.b	($FFFFF603).w,d0
000139B8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000139BC 6700 0000                  		beq.w	locret_1348E	; if not, branch
000139C0 7000                       		moveq	#0,d0
000139C2 1028 0026                  		move.b	$26(a0),d0
000139C6 0600 0080                  		addi.b	#$80,d0
000139CA 6100 0000                  		bsr.w	sub_14D48
000139CE 0C41 0006                  		cmpi.w	#6,d1
000139D2 6D00 0000                  		blt.w	locret_1348E
000139D6 343C 0680                  		move.w	#$680,d2
000139DA 0828 0006 0022             		btst	#6,$22(a0)
000139E0 6700                       		beq.s	loc_1341C
000139E2 343C 0380                  		move.w	#$380,d2
000139E6                            
000139E6                            loc_1341C:
000139E6 7000                       		moveq	#0,d0
000139E8 1028 0026                  		move.b	$26(a0),d0
000139EC 0400 0040                  		subi.b	#$40,d0
000139F0 4EB9 0000 2C22             		jsr	(CalcSine).l
000139F6 C3C2                       		muls.w	d2,d1
000139F8 E081                       		asr.l	#8,d1
000139FA D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000139FE C1C2                       		muls.w	d2,d0
00013A00 E080                       		asr.l	#8,d0
00013A02 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013A06 08E8 0001 0022             		bset	#1,$22(a0)
00013A0C 08A8 0005 0022             		bclr	#5,$22(a0)
00013A12 588F                       		addq.l	#4,sp
00013A14 117C 0001 003C             		move.b	#1,$3C(a0)
00013A1A 4228 0038                  		clr.b	$38(a0)
00013A1E 303C 00A0                  		move.w	#$A0,d0
00013A22 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013A28 117C 0013 0016             		move.b	#$13,$16(a0)
00013A2E 117C 0009 0017             		move.b	#9,$17(a0)
00013A34 0828 0002 0022             		btst	#2,$22(a0)
00013A3A 6600                       		bne.s	loc_13490
00013A3C 117C 000E 0016             		move.b	#$E,$16(a0)
00013A42 117C 0007 0017             		move.b	#7,$17(a0)
00013A48 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013A4E 08E8 0002 0022             		bset	#2,$22(a0)
00013A54 5A68 000C                  		addq.w	#5,$C(a0)
00013A58                            
00013A58                            locret_1348E:
00013A58 4E75                       		rts	
00013A5A                            ; ===========================================================================
00013A5A                            
00013A5A                            loc_13490:
00013A5A 08E8 0004 0022             		bset	#4,$22(a0)
00013A60 4E75                       		rts	
00013A62                            ; End of function Sonic_Jump
00013A62                            
00013A62                            
00013A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A62                            
00013A62                            
00013A62                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A62 4A28 003C                  		tst.b	$3C(a0)
00013A66 6700                       		beq.s	loc_134C4
00013A68 323C FC00                  		move.w	#-$400,d1
00013A6C 0828 0006 0022             		btst	#6,$22(a0)
00013A72 6700                       		beq.s	loc_134AE
00013A74 323C FE00                  		move.w	#-$200,d1
00013A78                            
00013A78                            loc_134AE:
00013A78 B268 0012                  		cmp.w	$12(a0),d1
00013A7C 6F00                       		ble.s	locret_134C2
00013A7E 1038 F602                  		move.b	($FFFFF602).w,d0
00013A82 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013A86 6600                       		bne.s	locret_134C2	; if yes, branch
00013A88 3141 0012                  		move.w	d1,$12(a0)
00013A8C                            
00013A8C                            locret_134C2:
00013A8C 4E75                       		rts	
00013A8E                            ; ===========================================================================
00013A8E                            
00013A8E                            loc_134C4:
00013A8E 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013A94 6C00                       		bge.s	locret_134D2
00013A96 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013A9C                            
00013A9C                            locret_134D2:
00013A9C 4E75                       		rts	
00013A9E                            ; End of function Sonic_JumpHeight
00013A9E                            
00013A9E                            ; ---------------------------------------------------------------------------
00013A9E                            ; Subroutine to	slow Sonic walking up a	slope
00013A9E                            ; ---------------------------------------------------------------------------
00013A9E                            
00013A9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A9E                            
00013A9E                            
00013A9E                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013A9E 1028 0026                  		move.b	$26(a0),d0
00013AA2 0600 0060                  		addi.b	#$60,d0
00013AA6 0C00 00C0                  		cmpi.b	#$C0,d0
00013AAA 6400                       		bcc.s	locret_13508
00013AAC 1028 0026                  		move.b	$26(a0),d0
00013AB0 4EB9 0000 2C22             		jsr	(CalcSine).l
00013AB6 C1FC 0020                  		muls.w	#$20,d0
00013ABA E080                       		asr.l	#8,d0
00013ABC 4A68 0014                  		tst.w	$14(a0)
00013AC0 6700                       		beq.s	locret_13508
00013AC2 6B00                       		bmi.s	loc_13504
00013AC4 4A40                       		tst.w	d0
00013AC6 6700                       		beq.s	locret_13502
00013AC8 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013ACC                            
00013ACC                            locret_13502:
00013ACC 4E75                       		rts	
00013ACE                            ; ===========================================================================
00013ACE                            
00013ACE                            loc_13504:
00013ACE D168 0014                  		add.w	d0,$14(a0)
00013AD2                            
00013AD2                            locret_13508:
00013AD2 4E75                       		rts	
00013AD4                            ; End of function Sonic_SlopeResist
00013AD4                            
00013AD4                            ; ---------------------------------------------------------------------------
00013AD4                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013AD4                            ; ---------------------------------------------------------------------------
00013AD4                            
00013AD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AD4                            
00013AD4                            
00013AD4                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013AD4 1028 0026                  		move.b	$26(a0),d0
00013AD8 0600 0060                  		addi.b	#$60,d0
00013ADC 0C00 00C0                  		cmpi.b	#-$40,d0
00013AE0 6400                       		bcc.s	locret_13544
00013AE2 1028 0026                  		move.b	$26(a0),d0
00013AE6 4EB9 0000 2C22             		jsr	(CalcSine).l
00013AEC C1FC 0050                  		muls.w	#$50,d0
00013AF0 E080                       		asr.l	#8,d0
00013AF2 4A68 0014                  		tst.w	$14(a0)
00013AF6 6B00                       		bmi.s	loc_1353A
00013AF8 4A40                       		tst.w	d0
00013AFA 6A00                       		bpl.s	loc_13534
00013AFC E480                       		asr.l	#2,d0
00013AFE                            
00013AFE                            loc_13534:
00013AFE D168 0014                  		add.w	d0,$14(a0)
00013B02 4E75                       		rts	
00013B04                            ; ===========================================================================
00013B04                            
00013B04                            loc_1353A:
00013B04 4A40                       		tst.w	d0
00013B06 6B00                       		bmi.s	loc_13540
00013B08 E480                       		asr.l	#2,d0
00013B0A                            
00013B0A                            loc_13540:
00013B0A D168 0014                  		add.w	d0,$14(a0)
00013B0E                            
00013B0E                            locret_13544:
00013B0E 4E75                       		rts	
00013B10                            ; End of function Sonic_RollRepel
00013B10                            
00013B10                            ; ---------------------------------------------------------------------------
00013B10                            ; Subroutine to	push Sonic down	a slope
00013B10                            ; ---------------------------------------------------------------------------
00013B10                            
00013B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B10                            
00013B10                            
00013B10                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B10 4E71                       		nop	
00013B12 4A28 0038                  		tst.b	$38(a0)
00013B16 6600                       		bne.s	locret_13580
00013B18 4A68 003E                  		tst.w	$3E(a0)
00013B1C 6600                       		bne.s	loc_13582
00013B1E 1028 0026                  		move.b	$26(a0),d0
00013B22 0600 0020                  		addi.b	#$20,d0
00013B26 0200 00C0                  		andi.b	#$C0,d0
00013B2A 6700                       		beq.s	locret_13580
00013B2C 3028 0014                  		move.w	$14(a0),d0
00013B30 6A00                       		bpl.s	loc_1356A
00013B32 4440                       		neg.w	d0
00013B34                            
00013B34                            loc_1356A:
00013B34 0C40 0280                  		cmpi.w	#$280,d0
00013B38 6400                       		bcc.s	locret_13580
00013B3A 4268 0014                  		clr.w	$14(a0)
00013B3E 08E8 0001 0022             		bset	#1,$22(a0)
00013B44 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013B4A                            
00013B4A                            locret_13580:
00013B4A 4E75                       		rts	
00013B4C                            ; ===========================================================================
00013B4C                            
00013B4C                            loc_13582:
00013B4C 5368 003E                  		subq.w	#1,$3E(a0)
00013B50 4E75                       		rts	
00013B52                            ; End of function Sonic_SlopeRepel
00013B52                            
00013B52                            ; ---------------------------------------------------------------------------
00013B52                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013B52                            ; ---------------------------------------------------------------------------
00013B52                            
00013B52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B52                            
00013B52                            
00013B52                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B52 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B56 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013B58 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013B5A                            
00013B5A 5400                       		addq.b	#2,d0		; increase angle
00013B5C 6400                       		bcc.s	loc_13596
00013B5E 7000                       		moveq	#0,d0
00013B60                            
00013B60                            loc_13596:
00013B60 6000                       		bra.s	loc_1359E
00013B62                            ; ===========================================================================
00013B62                            
00013B62                            loc_13598:
00013B62 5500                       		subq.b	#2,d0		; decrease angle
00013B64 6400                       		bcc.s	loc_1359E
00013B66 7000                       		moveq	#0,d0
00013B68                            
00013B68                            loc_1359E:
00013B68 1140 0026                  		move.b	d0,$26(a0)
00013B6C                            
00013B6C                            locret_135A2:
00013B6C 4E75                       		rts	
00013B6E                            ; End of function Sonic_JumpAngle
00013B6E                            
00013B6E                            ; ---------------------------------------------------------------------------
00013B6E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013B6E                            ; ---------------------------------------------------------------------------
00013B6E                            
00013B6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B6E                            
00013B6E                            
00013B6E                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013B6E 3228 0010                  		move.w	$10(a0),d1
00013B72 3428 0012                  		move.w	$12(a0),d2
00013B76 4EB9 0000 2EF0             		jsr	(CalcAngle).l
00013B7C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013B80 0400 0020                  		subi.b	#$20,d0
00013B84 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013B88 0200 00C0                  		andi.b	#$C0,d0
00013B8C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013B90 0C00 0040                  		cmpi.b	#$40,d0
00013B94 6700 0000                  		beq.w	loc_13680
00013B98 0C00 0080                  		cmpi.b	#$80,d0
00013B9C 6700 0000                  		beq.w	loc_136E2
00013BA0 0C00 00C0                  		cmpi.b	#-$40,d0
00013BA4 6700 0000                  		beq.w	loc_1373E
00013BA8 6100 0000                  		bsr.w	Sonic_HitWall
00013BAC 4A41                       		tst.w	d1
00013BAE 6A00                       		bpl.s	loc_135F0
00013BB0 9368 0008                  		sub.w	d1,8(a0)
00013BB4 317C 0000 0010             		move.w	#0,$10(a0)
00013BBA                            
00013BBA                            loc_135F0:
00013BBA 6100 0000                  		bsr.w	sub_14EB4
00013BBE 4A41                       		tst.w	d1
00013BC0 6A00                       		bpl.s	loc_13602
00013BC2 D368 0008                  		add.w	d1,8(a0)
00013BC6 317C 0000 0010             		move.w	#0,$10(a0)
00013BCC                            
00013BCC                            loc_13602:
00013BCC 6100 0000                  		bsr.w	Sonic_HitFloor
00013BD0 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013BD4 4A41                       		tst.w	d1
00013BD6 6A00                       		bpl.s	locret_1367E
00013BD8 1428 0012                  		move.b	$12(a0),d2
00013BDC 5002                       		addq.b	#8,d2
00013BDE 4402                       		neg.b	d2
00013BE0 B202                       		cmp.b	d2,d1
00013BE2 6C00                       		bge.s	loc_1361E
00013BE4 B002                       		cmp.b	d2,d0
00013BE6 6D00                       		blt.s	locret_1367E
00013BE8                            
00013BE8                            loc_1361E:
00013BE8 D368 000C                  		add.w	d1,$C(a0)
00013BEC 1143 0026                  		move.b	d3,$26(a0)
00013BF0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013BF4 117C 0000 001C             		move.b	#0,$1C(a0)
00013BFA 1003                       		move.b	d3,d0
00013BFC 0600 0020                  		addi.b	#$20,d0
00013C00 0200 0040                  		andi.b	#$40,d0
00013C04 6600                       		bne.s	loc_1365C
00013C06 1003                       		move.b	d3,d0
00013C08 0600 0010                  		addi.b	#$10,d0
00013C0C 0200 0020                  		andi.b	#$20,d0
00013C10 6700                       		beq.s	loc_1364E
00013C12 E0E8 0012                  		asr	$12(a0)
00013C16 6000                       		bra.s	loc_13670
00013C18                            ; ===========================================================================
00013C18                            
00013C18                            loc_1364E:
00013C18 317C 0000 0012             		move.w	#0,$12(a0)
00013C1E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C24 4E75                       		rts	
00013C26                            ; ===========================================================================
00013C26                            
00013C26                            loc_1365C:
00013C26 317C 0000 0010             		move.w	#0,$10(a0)
00013C2C 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013C32 6F00                       		ble.s	loc_13670
00013C34 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013C3A                            
00013C3A                            loc_13670:
00013C3A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C40 4A03                       		tst.b	d3
00013C42 6A00                       		bpl.s	locret_1367E
00013C44 4468 0014                  		neg.w	$14(a0)
00013C48                            
00013C48                            locret_1367E:
00013C48 4E75                       		rts	
00013C4A                            ; ===========================================================================
00013C4A                            
00013C4A                            loc_13680:
00013C4A 6100 0000                  		bsr.w	Sonic_HitWall
00013C4E 4A41                       		tst.w	d1
00013C50 6A00                       		bpl.s	loc_1369A
00013C52 9368 0008                  		sub.w	d1,8(a0)
00013C56 317C 0000 0010             		move.w	#0,$10(a0)
00013C5C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C62 4E75                       		rts	
00013C64                            ; ===========================================================================
00013C64                            
00013C64                            loc_1369A:
00013C64 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013C68 4A41                       		tst.w	d1
00013C6A 6A00                       		bpl.s	loc_136B4
00013C6C 9368 000C                  		sub.w	d1,$C(a0)
00013C70 4A68 0012                  		tst.w	$12(a0)
00013C74 6A00                       		bpl.s	locret_136B2
00013C76 317C 0000 0012             		move.w	#0,$12(a0)
00013C7C                            
00013C7C                            locret_136B2:
00013C7C 4E75                       		rts	
00013C7E                            ; ===========================================================================
00013C7E                            
00013C7E                            loc_136B4:
00013C7E 4A68 0012                  		tst.w	$12(a0)
00013C82 6B00                       		bmi.s	locret_136E0
00013C84 6100 0000                  		bsr.w	Sonic_HitFloor
00013C88 4A41                       		tst.w	d1
00013C8A 6A00                       		bpl.s	locret_136E0
00013C8C D368 000C                  		add.w	d1,$C(a0)
00013C90 1143 0026                  		move.b	d3,$26(a0)
00013C94 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C98 117C 0000 001C             		move.b	#0,$1C(a0)
00013C9E 317C 0000 0012             		move.w	#0,$12(a0)
00013CA4 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CAA                            
00013CAA                            locret_136E0:
00013CAA 4E75                       		rts	
00013CAC                            ; ===========================================================================
00013CAC                            
00013CAC                            loc_136E2:
00013CAC 6100 0000                  		bsr.w	Sonic_HitWall
00013CB0 4A41                       		tst.w	d1
00013CB2 6A00                       		bpl.s	loc_136F4
00013CB4 9368 0008                  		sub.w	d1,8(a0)
00013CB8 317C 0000 0010             		move.w	#0,$10(a0)
00013CBE                            
00013CBE                            loc_136F4:
00013CBE 6100 0000                  		bsr.w	sub_14EB4
00013CC2 4A41                       		tst.w	d1
00013CC4 6A00                       		bpl.s	loc_13706
00013CC6 D368 0008                  		add.w	d1,8(a0)
00013CCA 317C 0000 0010             		move.w	#0,$10(a0)
00013CD0                            
00013CD0                            loc_13706:
00013CD0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013CD4 4A41                       		tst.w	d1
00013CD6 6A00                       		bpl.s	locret_1373C
00013CD8 9368 000C                  		sub.w	d1,$C(a0)
00013CDC 1003                       		move.b	d3,d0
00013CDE 0600 0020                  		addi.b	#$20,d0
00013CE2 0200 0040                  		andi.b	#$40,d0
00013CE6 6600                       		bne.s	loc_13726
00013CE8 317C 0000 0012             		move.w	#0,$12(a0)
00013CEE 4E75                       		rts	
00013CF0                            ; ===========================================================================
00013CF0                            
00013CF0                            loc_13726:
00013CF0 1143 0026                  		move.b	d3,$26(a0)
00013CF4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CF8 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013CFE 4A03                       		tst.b	d3
00013D00 6A00                       		bpl.s	locret_1373C
00013D02 4468 0014                  		neg.w	$14(a0)
00013D06                            
00013D06                            locret_1373C:
00013D06 4E75                       		rts	
00013D08                            ; ===========================================================================
00013D08                            
00013D08                            loc_1373E:
00013D08 6100 0000                  		bsr.w	sub_14EB4
00013D0C 4A41                       		tst.w	d1
00013D0E 6A00                       		bpl.s	loc_13758
00013D10 D368 0008                  		add.w	d1,8(a0)
00013D14 317C 0000 0010             		move.w	#0,$10(a0)
00013D1A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D20 4E75                       		rts	
00013D22                            ; ===========================================================================
00013D22                            
00013D22                            loc_13758:
00013D22 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D26 4A41                       		tst.w	d1
00013D28 6A00                       		bpl.s	loc_13772
00013D2A 9368 000C                  		sub.w	d1,$C(a0)
00013D2E 4A68 0012                  		tst.w	$12(a0)
00013D32 6A00                       		bpl.s	locret_13770
00013D34 317C 0000 0012             		move.w	#0,$12(a0)
00013D3A                            
00013D3A                            locret_13770:
00013D3A 4E75                       		rts	
00013D3C                            ; ===========================================================================
00013D3C                            
00013D3C                            loc_13772:
00013D3C 4A68 0012                  		tst.w	$12(a0)
00013D40 6B00                       		bmi.s	locret_1379E
00013D42 6100 0000                  		bsr.w	Sonic_HitFloor
00013D46 4A41                       		tst.w	d1
00013D48 6A00                       		bpl.s	locret_1379E
00013D4A D368 000C                  		add.w	d1,$C(a0)
00013D4E 1143 0026                  		move.b	d3,$26(a0)
00013D52 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D56 117C 0000 001C             		move.b	#0,$1C(a0)
00013D5C 317C 0000 0012             		move.w	#0,$12(a0)
00013D62 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D68                            
00013D68                            locret_1379E:
00013D68 4E75                       		rts	
00013D6A                            ; End of function Sonic_Floor
00013D6A                            
00013D6A                            ; ---------------------------------------------------------------------------
00013D6A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013D6A                            ; ---------------------------------------------------------------------------
00013D6A                            
00013D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D6A                            
00013D6A                            
00013D6A                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013D6A 0828 0004 0022             		btst	#4,$22(a0)
00013D70 6700                       		beq.s	loc_137AE
00013D72 4E71                       		nop	
00013D74 4E71                       		nop	
00013D76 4E71                       		nop	
00013D78                            
00013D78                            loc_137AE:
00013D78 08A8 0005 0022             		bclr	#5,$22(a0)
00013D7E 08A8 0001 0022             		bclr	#1,$22(a0)
00013D84 08A8 0004 0022             		bclr	#4,$22(a0)
00013D8A 0828 0002 0022             		btst	#2,$22(a0)
00013D90 6700                       		beq.s	loc_137E4
00013D92 08A8 0002 0022             		bclr	#2,$22(a0)
00013D98 117C 0013 0016             		move.b	#$13,$16(a0)
00013D9E 117C 0009 0017             		move.b	#9,$17(a0)
00013DA4 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013DAA 5B68 000C                  		subq.w	#5,$C(a0)
00013DAE                            
00013DAE                            loc_137E4:
00013DAE 117C 0000 003C             		move.b	#0,$3C(a0)
00013DB4 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013DBA 4E75                       		rts	
00013DBC                            ; End of function Sonic_ResetOnFloor
00013DBC                            
00013DBC                            ; ===========================================================================
00013DBC                            ; ---------------------------------------------------------------------------
00013DBC                            ; Sonic	when he	gets hurt
00013DBC                            ; ---------------------------------------------------------------------------
00013DBC                            
00013DBC                            Obj01_Hurt:				; XREF: Obj01_Index
00013DBC 4EBA 9DAC                  		jsr	SpeedToPos
00013DC0 0668 0030 0012             		addi.w	#$30,$12(a0)
00013DC6 0828 0006 0022             		btst	#6,$22(a0)
00013DCC 6700                       		beq.s	loc_1380C
00013DCE 0468 0020 0012             		subi.w	#$20,$12(a0)
00013DD4                            
00013DD4                            loc_1380C:
00013DD4 6100 0000                  		bsr.w	Sonic_HurtStop
00013DD8 6100 FAF4                  		bsr.w	Sonic_LevelBound
00013DDC 6100 F506                  		bsr.w	Sonic_RecordPos
00013DE0 6100 0000                  		bsr.w	Sonic_Animate
00013DE4 6100 0000                  		bsr.w	LoadSonicDynPLC
00013DE8 4EFA 9DA6                  		jmp	DisplaySprite
00013DEC                            
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            ; Subroutine to	stop Sonic falling after he's been hurt
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            
00013DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DEC                            
00013DEC                            
00013DEC                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013DEC 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013DF0 0640 00E0                  		addi.w	#$E0,d0
00013DF4 B068 000C                  		cmp.w	$C(a0),d0
00013DF8 6500 0000                  		bcs.w	KillSonic
00013DFC 6100 FD70                  		bsr.w	Sonic_Floor
00013E00 0828 0001 0022             		btst	#1,$22(a0)
00013E06 6600                       		bne.s	locret_13860
00013E08 7000                       		moveq	#0,d0
00013E0A 3140 0012                  		move.w	d0,$12(a0)
00013E0E 3140 0010                  		move.w	d0,$10(a0)
00013E12 3140 0014                  		move.w	d0,$14(a0)
00013E16 117C 0000 001C             		move.b	#0,$1C(a0)
00013E1C 5528 0024                  		subq.b	#2,$24(a0)
00013E20 317C 0078 0030             		move.w	#$78,$30(a0)
00013E26                            
00013E26                            locret_13860:
00013E26 4E75                       		rts	
00013E28                            ; End of function Sonic_HurtStop
00013E28                            
00013E28                            ; ===========================================================================
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            ; Sonic	when he	dies
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            
00013E28                            Obj01_Death:				; XREF: Obj01_Index
00013E28 6100 0000                  		bsr.w	GameOver
00013E2C 4EBA 9D10                  		jsr	ObjectFall
00013E30 6100 F4B2                  		bsr.w	Sonic_RecordPos
00013E34 6100 0000                  		bsr.w	Sonic_Animate
00013E38 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E3C 4EFA 9D52                  		jmp	DisplaySprite
00013E40                            
00013E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E40                            
00013E40                            
00013E40                            GameOver:				; XREF: Obj01_Death
00013E40 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E44 0640 0100                  		addi.w	#$100,d0
00013E48 B068 000C                  		cmp.w	$C(a0),d0
00013E4C 6400 0000                  		bcc.w	locret_13900
00013E50 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013E56 5428 0024                  		addq.b	#2,$24(a0)
00013E5A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013E5E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013E62 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013E66 6600                       		bne.s	loc_138D4
00013E68 317C 0000 003A             		move.w	#0,$3A(a0)
00013E6E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013E74 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013E7A 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013E80 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013E84                            
00013E84                            loc_138C2:
00013E84 303C 008F                  		move.w	#$8F,d0
00013E88 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013E8E 7003                       		moveq	#3,d0
00013E90 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013E96                            ; ===========================================================================
00013E96                            
00013E96                            loc_138D4:
00013E96 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013E9C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013EA0 6700                       		beq.s	locret_13900	; if not, branch
00013EA2 317C 0000 003A             		move.w	#0,$3A(a0)
00013EA8 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013EAE 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013EB4 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013EBA 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013EC0 60C2                       		bra.s	loc_138C2
00013EC2                            ; ===========================================================================
00013EC2                            
00013EC2                            locret_13900:
00013EC2 4E75                       		rts	
00013EC4                            ; End of function GameOver
00013EC4                            
00013EC4                            ; ===========================================================================
00013EC4                            ; ---------------------------------------------------------------------------
00013EC4                            ; Sonic	when the level is restarted
00013EC4                            ; ---------------------------------------------------------------------------
00013EC4                            
00013EC4                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013EC4 4A68 003A                  		tst.w	$3A(a0)
00013EC8 6700                       		beq.s	locret_13914
00013ECA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013ECE 6600                       		bne.s	locret_13914
00013ED0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013ED6                            
00013ED6                            locret_13914:
00013ED6 4E75                       		rts	
00013ED8                            
00013ED8                            ; ---------------------------------------------------------------------------
00013ED8                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013ED8                            ; ---------------------------------------------------------------------------
00013ED8                            
00013ED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ED8                            
00013ED8                            
00013ED8                            Sonic_Loops:				; XREF: Obj01_Control
00013ED8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013EDE 6700                       		beq.s	loc_13926	; if yes, branch
00013EE0 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013EE4 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013EE8                            
00013EE8                            loc_13926:
00013EE8 3028 000C                  		move.w	$C(a0),d0
00013EEC E248                       		lsr.w	#1,d0
00013EEE 0240 0380                  		andi.w	#$380,d0
00013EF2 1228 0008                  		move.b	8(a0),d1
00013EF6 0241 007F                  		andi.w	#$7F,d1
00013EFA D041                       		add.w	d1,d0
00013EFC 43F8 A400                  		lea	($FFFFA400).w,a1
00013F00 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013F04 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013F08 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013F0C B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013F10 6700 FA64                  		beq.w	Obj01_ChkRoll
00013F14 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013F18 6700                       		beq.s	loc_13976
00013F1A B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013F1E 6700                       		beq.s	loc_13966
00013F20 08A8 0006 0001             		bclr	#6,1(a0)
00013F26 4E75                       		rts	
00013F28                            ; ===========================================================================
00013F28                            
00013F28                            loc_13966:
00013F28 0828 0001 0022             		btst	#1,$22(a0)
00013F2E 6700                       		beq.s	loc_13976
00013F30 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F36 4E75                       		rts	
00013F38                            ; ===========================================================================
00013F38                            
00013F38                            loc_13976:
00013F38 3428 0008                  		move.w	8(a0),d2
00013F3C 0C02 002C                  		cmpi.b	#$2C,d2
00013F40 6400                       		bcc.s	loc_13988
00013F42 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F48 4E75                       		rts	
00013F4A                            ; ===========================================================================
00013F4A                            
00013F4A                            loc_13988:
00013F4A 0C02 00E0                  		cmpi.b	#-$20,d2
00013F4E 6500                       		bcs.s	loc_13996
00013F50 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F56 4E75                       		rts	
00013F58                            ; ===========================================================================
00013F58                            
00013F58                            loc_13996:
00013F58 0828 0006 0001             		btst	#6,1(a0)
00013F5E 6600                       		bne.s	loc_139B2
00013F60 1228 0026                  		move.b	$26(a0),d1
00013F64 6700                       		beq.s	locret_139C2
00013F66 0C01 0080                  		cmpi.b	#-$80,d1
00013F6A 6200                       		bhi.s	locret_139C2
00013F6C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F72 4E75                       		rts	
00013F74                            ; ===========================================================================
00013F74                            
00013F74                            loc_139B2:
00013F74 1228 0026                  		move.b	$26(a0),d1
00013F78 0C01 0080                  		cmpi.b	#-$80,d1
00013F7C 6300                       		bls.s	locret_139C2
00013F7E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F84                            
00013F84                            locret_139C2:
00013F84 4E75                       		rts	
00013F86                            ; End of function Sonic_Loops
00013F86                            
00013F86                            ; ---------------------------------------------------------------------------
00013F86                            ; Subroutine to	animate	Sonic's sprites
00013F86                            ; ---------------------------------------------------------------------------
00013F86                            
00013F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F86                            
00013F86                            
00013F86                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013F86 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013F8C 7000                       		moveq	#0,d0
00013F8E 1028 001C                  		move.b	$1C(a0),d0
00013F92 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013F96 6700                       		beq.s	SAnim_Do	; if not, branch
00013F98 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013F9C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013FA2 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013FA8                            
00013FA8                            SAnim_Do:
00013FA8 D040                       		add.w	d0,d0
00013FAA D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013FAE 1011                       		move.b	(a1),d0
00013FB0 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013FB2 1228 0022                  		move.b	$22(a0),d1
00013FB6 0201 0001                  		andi.b	#1,d1
00013FBA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013FC0 8328 0001                  		or.b	d1,1(a0)
00013FC4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013FC8 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013FCA 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013FCE                            
00013FCE                            SAnim_Do2:
00013FCE 7200                       		moveq	#0,d1
00013FD0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013FD4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013FD8 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013FDA                            
00013FDA                            SAnim_Next:
00013FDA 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013FDE 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013FE2                            
00013FE2                            SAnim_Delay:
00013FE2 4E75                       		rts	
00013FE4                            ; ===========================================================================
00013FE4                            
00013FE4                            SAnim_End_FF:
00013FE4 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013FE6 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013FE8 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013FEE 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013FF2 60E6                       		bra.s	SAnim_Next
00013FF4                            ; ===========================================================================
00013FF4                            
00013FF4                            SAnim_End_FE:
00013FF4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013FF6 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013FF8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013FFC 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014000 9200                       		sub.b	d0,d1
00014002 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014006 60D2                       		bra.s	SAnim_Next
00014008                            ; ===========================================================================
00014008                            
00014008                            SAnim_End_FD:
00014008 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001400A 6600                       		bne.s	SAnim_End	; if not, branch
0001400C 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014012                            
00014012                            SAnim_End:
00014012 4E75                       		rts	
00014014                            ; ===========================================================================
00014014                            
00014014                            SAnim_WalkRun:				; XREF: SAnim_Do
00014014 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014018 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001401A 5200                       		addq.b	#1,d0		; is animation walking/running?
0001401C 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014020 7200                       		moveq	#0,d1
00014022 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014026 1428 0022                  		move.b	$22(a0),d2
0001402A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001402E 6600                       		bne.s	loc_13A70	; if yes, branch
00014030 4600                       		not.b	d0		; reverse angle
00014032                            
00014032                            loc_13A70:
00014032 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014036 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014038 7203                       		moveq	#3,d1
0001403A                            
0001403A                            loc_13A78:
0001403A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014040 B302                       		eor.b	d1,d2
00014042 8528 0001                  		or.b	d2,1(a0)
00014046 0828 0005 0022             		btst	#5,$22(a0)
0001404C 6600 0000                  		bne.w	SAnim_Push
00014050 E808                       		lsr.b	#4,d0		; divide angle by $10
00014052 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014056 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001405A 6A00                       		bpl.s	loc_13A9C
0001405C 4442                       		neg.w	d2
0001405E                            
0001405E                            loc_13A9C:
0001405E 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014064 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014068 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001406A 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014070 1200                       		move.b	d0,d1
00014072 E209                       		lsr.b	#1,d1
00014074 D001                       		add.b	d1,d0
00014076                            
00014076                            loc_13AB4:
00014076 D000                       		add.b	d0,d0
00014078 1600                       		move.b	d0,d3
0001407A 4442                       		neg.w	d2
0001407C 0642 0800                  		addi.w	#$800,d2
00014080 6A00                       		bpl.s	loc_13AC2
00014082 7400                       		moveq	#0,d2
00014084                            
00014084                            loc_13AC2:
00014084 E04A                       		lsr.w	#8,d2
00014086 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001408A 6100 FF42                  		bsr.w	SAnim_Do2
0001408E D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014092 4E75                       		rts	
00014094                            ; ===========================================================================
00014094                            
00014094                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014094 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014096 6600                       		bne.s	SAnim_Push	; if not, branch
00014098 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001409C 6A00                       		bpl.s	loc_13ADE
0001409E 4442                       		neg.w	d2
000140A0                            
000140A0                            loc_13ADE:
000140A0 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000140A6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000140AA 6400                       		bcc.s	loc_13AF0	; if yes, branch
000140AC 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000140B2                            
000140B2                            loc_13AF0:
000140B2 4442                       		neg.w	d2
000140B4 0642 0400                  		addi.w	#$400,d2
000140B8 6A00                       		bpl.s	loc_13AFA
000140BA 7400                       		moveq	#0,d2
000140BC                            
000140BC                            loc_13AFA:
000140BC E04A                       		lsr.w	#8,d2
000140BE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140C2 1228 0022                  		move.b	$22(a0),d1
000140C6 0201 0001                  		andi.b	#1,d1
000140CA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140D0 8328 0001                  		or.b	d1,1(a0)
000140D4 6000 FEF8                  		bra.w	SAnim_Do2
000140D8                            ; ===========================================================================
000140D8                            
000140D8                            SAnim_Push:				; XREF: SAnim_RollJump
000140D8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140DC 6B00                       		bmi.s	loc_13B1E
000140DE 4442                       		neg.w	d2
000140E0                            
000140E0                            loc_13B1E:
000140E0 0642 0800                  		addi.w	#$800,d2
000140E4 6A00                       		bpl.s	loc_13B26
000140E6 7400                       		moveq	#0,d2
000140E8                            
000140E8                            loc_13B26:
000140E8 EC4A                       		lsr.w	#6,d2
000140EA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140EE 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000140F4 1228 0022                  		move.b	$22(a0),d1
000140F8 0201 0001                  		andi.b	#1,d1
000140FC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014102 8328 0001                  		or.b	d1,1(a0)
00014106 6000 FEC6                  		bra.w	SAnim_Do2
0001410A                            ; End of function Sonic_Animate
0001410A                            
0001410A                            ; ===========================================================================
0001410A                            SonicAniData:
0001410A                            	include "_anim\Sonic.asm"
0001410A                            ; ---------------------------------------------------------------------------
0001410A                            ; Animation script - Sonic
0001410A                            ; ---------------------------------------------------------------------------
0001410A 0000                       		dc.w SonAni_Walk-SonicAniData
0001410C 0000                       		dc.w SonAni_Run-SonicAniData
0001410E 0000                       		dc.w SonAni_Roll-SonicAniData
00014110 0000                       		dc.w SonAni_Roll2-SonicAniData
00014112 0000                       		dc.w SonAni_Push-SonicAniData
00014114 0000                       		dc.w SonAni_Wait-SonicAniData
00014116 0000                       		dc.w SonAni_Balance-SonicAniData
00014118 0000                       		dc.w SonAni_LookUp-SonicAniData
0001411A 0000                       		dc.w SonAni_Duck-SonicAniData
0001411C 0000                       		dc.w SonAni_Warp1-SonicAniData
0001411E 0000                       		dc.w SonAni_Warp2-SonicAniData
00014120 0000                       		dc.w SonAni_Warp3-SonicAniData
00014122 0000                       		dc.w SonAni_Warp4-SonicAniData
00014124 0000                       		dc.w SonAni_Stop-SonicAniData
00014126 0000                       		dc.w SonAni_Float1-SonicAniData
00014128 0000                       		dc.w SonAni_Float2-SonicAniData
0001412A 0000                       		dc.w SonAni_Spring-SonicAniData
0001412C 0000                       		dc.w SonAni_LZHang-SonicAniData
0001412E 0000                       		dc.w SonAni_Leap1-SonicAniData
00014130 0000                       		dc.w SonAni_Leap2-SonicAniData
00014132 0000                       		dc.w SonAni_Surf-SonicAniData
00014134 0000                       		dc.w SonAni_Bubble-SonicAniData
00014136 0000                       		dc.w SonAni_Death1-SonicAniData
00014138 0000                       		dc.w SonAni_Drown-SonicAniData
0001413A 0000                       		dc.w SonAni_Death2-SonicAniData
0001413C 0000                       		dc.w SonAni_Shrink-SonicAniData
0001413E 0000                       		dc.w SonAni_Hurt-SonicAniData
00014140 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014142 0000                       		dc.w SonAni_Blank-SonicAniData
00014144 0000                       		dc.w SonAni_Float3-SonicAniData
00014146 0000                       		dc.w SonAni_Float4-SonicAniData
00014148 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014152 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001415A FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014162 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001416A FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014172 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014188 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
0001418C 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014190 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014194 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014198 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001419C 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000141A0 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000141A4 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000141A8 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000141AC 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000141B4 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000141B8 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000141BC 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000141C2 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000141C8 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000141CC 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000141D4 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000141D8 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000141DC 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000141E0 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000141EA 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
000141EE 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000141F2 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000141F6 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000141FE 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014202                            		even
00014202                            		even
00014202                            
00014202                            ; ---------------------------------------------------------------------------
00014202                            ; Sonic	pattern	loading	subroutine
00014202                            ; ---------------------------------------------------------------------------
00014202                            
00014202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014202                            
00014202                            
00014202                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014202 7000                       		moveq	#0,d0
00014204 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014208 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001420C 6700                       		beq.s	locret_13C96
0001420E 11C0 F766                  		move.b	d0,($FFFFF766).w
00014212 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00014218 D040                       		add.w	d0,d0
0001421A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001421E 7200                       		moveq	#0,d1
00014220 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014222 5301                       		subq.b	#1,d1
00014224 6B00                       		bmi.s	locret_13C96
00014226 47F8 C800                  		lea	($FFFFC800).w,a3
0001422A 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014230                            
00014230                            SPLC_ReadEntry:
00014230 7400                       		moveq	#0,d2
00014232 141A                       		move.b	(a2)+,d2
00014234 3002                       		move.w	d2,d0
00014236 E808                       		lsr.b	#4,d0
00014238 E14A                       		lsl.w	#8,d2
0001423A 141A                       		move.b	(a2)+,d2
0001423C EB4A                       		lsl.w	#5,d2
0001423E 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00014244 D3C2                       		adda.l	d2,a1
00014246                            
00014246                            SPLC_LoadTile:
00014246 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
0001424A 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001424E 47EB 0020                  		lea	$20(a3),a3	; next tile
00014252 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014256                            
00014256 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
0001425A                            
0001425A                            locret_13C96:
0001425A 4E75                       		rts	
0001425C                            ; End of function LoadSonicDynPLC
0001425C                            
0001425C                            ; ===========================================================================
0001425C                            ; ---------------------------------------------------------------------------
0001425C                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001425C                            ; ---------------------------------------------------------------------------
0001425C                            
0001425C                            Obj0A:					; XREF: Obj_Index
0001425C 7000                       		moveq	#0,d0
0001425E 1028 0024                  		move.b	$24(a0),d0
00014262 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014266 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001426A                            ; ===========================================================================
0001426A 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001426E 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014272 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014276 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001427A 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001427C                            ; ===========================================================================
0001427C                            
0001427C                            Obj0A_Main:				; XREF: Obj0A_Index
0001427C 5428 0024                  		addq.b	#2,$24(a0)
00014280 217C 0001 2F22 0004        		move.l	#Map_obj64,4(a0)
00014288 317C 8348 0002             		move.w	#$8348,2(a0)
0001428E 117C 0084 0001             		move.b	#$84,1(a0)
00014294 117C 0010 0019             		move.b	#$10,$19(a0)
0001429A 117C 0001 0018             		move.b	#1,$18(a0)
000142A0 1028 0028                  		move.b	$28(a0),d0
000142A4 6A00                       		bpl.s	loc_13D00
000142A6 5028 0024                  		addq.b	#8,$24(a0)
000142AA 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000142B2 317C 0440 0002             		move.w	#$440,2(a0)
000142B8 0240 007F                  		andi.w	#$7F,d0
000142BC 1140 0033                  		move.b	d0,$33(a0)
000142C0 6000 0000                  		bra.w	Obj0A_Countdown
000142C4                            ; ===========================================================================
000142C4                            
000142C4                            loc_13D00:
000142C4 1140 001C                  		move.b	d0,$1C(a0)
000142C8 3168 0008 0030             		move.w	8(a0),$30(a0)
000142CE 317C FF78 0012             		move.w	#-$88,$12(a0)
000142D4                            
000142D4                            Obj0A_Animate:				; XREF: Obj0A_Index
000142D4 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000142DA 4EB9 0000 AC66             		jsr	AnimateSprite
000142E0                            
000142E0                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000142E0 3038 F646                  		move.w	($FFFFF646).w,d0
000142E4 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000142E8 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000142EA 117C 0006 0024             		move.b	#6,$24(a0)
000142F0 5E28 001C                  		addq.b	#7,$1C(a0)
000142F4 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000142FA 6700                       		beq.s	Obj0A_Display
000142FC 6000                       		bra.s	Obj0A_Display
000142FE                            ; ===========================================================================
000142FE                            
000142FE                            Obj0A_Wobble:
000142FE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014302 6700                       		beq.s	loc_13D44
00014304 5868 0030                  		addq.w	#4,$30(a0)
00014308                            
00014308                            loc_13D44:
00014308 1028 0026                  		move.b	$26(a0),d0
0001430C 5228 0026                  		addq.b	#1,$26(a0)
00014310 0240 007F                  		andi.w	#$7F,d0
00014314 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001431A 1031 0000                  		move.b	(a1,d0.w),d0
0001431E 4880                       		ext.w	d0
00014320 D068 0030                  		add.w	$30(a0),d0
00014324 3140 0008                  		move.w	d0,8(a0)
00014328 6100                       		bsr.s	Obj0A_ShowNumber
0001432A 4EBA 983E                  		jsr	SpeedToPos
0001432E 4A28 0001                  		tst.b	1(a0)
00014332 6A00                       		bpl.s	Obj0A_Delete
00014334 4EFA 985A                  		jmp	DisplaySprite
00014338                            ; ===========================================================================
00014338                            
00014338                            Obj0A_Delete:
00014338 4EFA 9892                  		jmp	DeleteObject
0001433C                            ; ===========================================================================
0001433C                            
0001433C                            Obj0A_Display:				; XREF: Obj0A_Index
0001433C 6100                       		bsr.s	Obj0A_ShowNumber
0001433E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014344 4EB9 0000 AC66             		jsr	AnimateSprite
0001434A 4EFA 9844                  		jmp	DisplaySprite
0001434E                            ; ===========================================================================
0001434E                            
0001434E                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001434E 4EFA 987C                  		jmp	DeleteObject
00014352                            ; ===========================================================================
00014352                            
00014352                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014352 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014358 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001435A 5368 0038                  		subq.w	#1,$38(a0)
0001435E 6600                       		bne.s	Obj0A_Display2
00014360 117C 000E 0024             		move.b	#$E,$24(a0)
00014366 5E28 001C                  		addq.b	#7,$1C(a0)
0001436A 60D0                       		bra.s	Obj0A_Display
0001436C                            ; ===========================================================================
0001436C                            
0001436C                            Obj0A_Display2:
0001436C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014372 4EB9 0000 AC66             		jsr	AnimateSprite
00014378 4A28 0001                  		tst.b	1(a0)
0001437C 6A00                       		bpl.s	Obj0A_Delete3
0001437E 4EFA 9810                  		jmp	DisplaySprite
00014382                            ; ===========================================================================
00014382                            
00014382                            Obj0A_Delete3:
00014382 4EFA 9848                  		jmp	DeleteObject
00014386                            ; ===========================================================================
00014386                            
00014386                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014386 4A68 0038                  		tst.w	$38(a0)
0001438A 6700                       		beq.s	locret_13E1A
0001438C 5368 0038                  		subq.w	#1,$38(a0)
00014390 6600                       		bne.s	locret_13E1A
00014392 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014398 6400                       		bcc.s	locret_13E1A
0001439A 317C 000F 0038             		move.w	#$F,$38(a0)
000143A0 4268 0012                  		clr.w	$12(a0)
000143A4 117C 0080 0001             		move.b	#$80,1(a0)
000143AA 3028 0008                  		move.w	8(a0),d0
000143AE 9078 F700                  		sub.w	($FFFFF700).w,d0
000143B2 0640 0080                  		addi.w	#$80,d0
000143B6 3140 0008                  		move.w	d0,8(a0)
000143BA 3028 000C                  		move.w	$C(a0),d0
000143BE 9078 F704                  		sub.w	($FFFFF704).w,d0
000143C2 0640 0080                  		addi.w	#$80,d0
000143C6 3140 000A                  		move.w	d0,$A(a0)
000143CA 117C 000C 0024             		move.b	#$C,$24(a0)
000143D0                            
000143D0                            locret_13E1A:
000143D0 4E75                       		rts	
000143D2                            ; ===========================================================================
000143D2                            Obj0A_WobbleData:
000143D2 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000143E3 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000143F4 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014405 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014415 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014422 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001442F FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001443C FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014449 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014452                            ; ===========================================================================
00014452                            
00014452                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014452 4A68 002C                  		tst.w	$2C(a0)
00014456 6600 0000                  		bne.w	loc_13F86
0001445A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014460 6400 0000                  		bcc.w	locret_1408C
00014464 0838 0006 D022             		btst	#6,($FFFFD022).w
0001446A 6700 0000                  		beq.w	locret_1408C
0001446E 5368 0038                  		subq.w	#1,$38(a0)
00014472 6A00 0000                  		bpl.w	loc_13FAC
00014476 317C 003B 0038             		move.w	#59,$38(a0)
0001447C 317C 0001 0036             		move.w	#1,$36(a0)
00014482 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014488 0240 0001                  		andi.w	#1,d0
0001448C 1140 0034                  		move.b	d0,$34(a0)
00014490 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014494 0C40 0019                  		cmpi.w	#$19,d0
00014498 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001449A 0C40 0014                  		cmpi.w	#$14,d0
0001449E 6700                       		beq.s	Obj0A_WarnSound
000144A0 0C40 000F                  		cmpi.w	#$F,d0
000144A4 6700                       		beq.s	Obj0A_WarnSound
000144A6 0C40 000C                  		cmpi.w	#$C,d0
000144AA 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000144AC 6600                       		bne.s	loc_13F02
000144AE 303C 0092                  		move.w	#$92,d0
000144B2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
000144B8                            
000144B8                            loc_13F02:
000144B8 5328 0032                  		subq.b	#1,$32(a0)
000144BC 6A00                       		bpl.s	Obj0A_ReduceAir
000144BE 1168 0033 0032             		move.b	$33(a0),$32(a0)
000144C4 08E8 0007 0036             		bset	#7,$36(a0)
000144CA 6000                       		bra.s	Obj0A_ReduceAir
000144CC                            ; ===========================================================================
000144CC                            
000144CC                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000144CC 303C 00C2                  		move.w	#$C2,d0
000144D0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000144D6                            
000144D6                            Obj0A_ReduceAir:
000144D6 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000144DA 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000144DE 6100 0000                  		bsr.w	ResumeMusic
000144E2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000144E8 303C 00B2                  		move.w	#$B2,d0
000144EC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
000144F2 117C 000A 0034             		move.b	#$A,$34(a0)
000144F8 317C 0001 0036             		move.w	#1,$36(a0)
000144FE 317C 0078 002C             		move.w	#$78,$2C(a0)
00014504 2F08                       		move.l	a0,-(sp)
00014506 41F8 D000                  		lea	($FFFFD000).w,a0
0001450A 6100 F85E                  		bsr.w	Sonic_ResetOnFloor
0001450E 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014514 08E8 0001 0022             		bset	#1,$22(a0)
0001451A 08E8 0007 0002             		bset	#7,2(a0)
00014520 317C 0000 0012             		move.w	#0,$12(a0)
00014526 317C 0000 0010             		move.w	#0,$10(a0)
0001452C 317C 0000 0014             		move.w	#0,$14(a0)
00014532 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014538 205F                       		movea.l	(sp)+,a0
0001453A 4E75                       		rts	
0001453C                            ; ===========================================================================
0001453C                            
0001453C                            loc_13F86:
0001453C 5368 002C                  		subq.w	#1,$2C(a0)
00014540 6600                       		bne.s	loc_13F94
00014542 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014548 4E75                       		rts	
0001454A                            ; ===========================================================================
0001454A                            
0001454A                            loc_13F94:
0001454A 2F08                       		move.l	a0,-(sp)
0001454C 41F8 D000                  		lea	($FFFFD000).w,a0
00014550 4EBA 9618                  		jsr	SpeedToPos
00014554 0668 0010 0012             		addi.w	#$10,$12(a0)
0001455A 205F                       		movea.l	(sp)+,a0
0001455C 6000                       		bra.s	loc_13FAC
0001455E                            ; ===========================================================================
0001455E                            
0001455E                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001455E 6000                       		bra.s	Obj0A_MakeItem
00014560                            ; ===========================================================================
00014560                            
00014560                            loc_13FAC:
00014560 4A68 0036                  		tst.w	$36(a0)
00014564 6700 0000                  		beq.w	locret_1408C
00014568 5368 003A                  		subq.w	#1,$3A(a0)
0001456C 6A00 0000                  		bpl.w	locret_1408C
00014570                            
00014570                            Obj0A_MakeItem:
00014570 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014576 0240 000F                  		andi.w	#$F,d0
0001457A 3140 003A                  		move.w	d0,$3A(a0)
0001457E 4EBA 9A96                  		jsr	SingleObjLoad
00014582 6600 0000                  		bne.w	locret_1408C
00014586 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001458A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014590 7006                       		moveq	#6,d0
00014592 0838 0000 D022             		btst	#0,($FFFFD022).w
00014598 6700                       		beq.s	loc_13FF2
0001459A 4440                       		neg.w	d0
0001459C 137C 0040 0026             		move.b	#$40,$26(a1)
000145A2                            
000145A2                            loc_13FF2:
000145A2 D169 0008                  		add.w	d0,8(a1)
000145A6 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000145AC 137C 0006 0028             		move.b	#6,$28(a1)
000145B2 4A68 002C                  		tst.w	$2C(a0)
000145B6 6700 0000                  		beq.w	loc_1403E
000145BA 0268 0007 003A             		andi.w	#7,$3A(a0)
000145C0 0668 0000 003A             		addi.w	#0,$3A(a0)
000145C6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000145CA 0440 000C                  		subi.w	#$C,d0
000145CE 3340 000C                  		move.w	d0,$C(a1)
000145D2 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000145D8 1340 0026                  		move.b	d0,$26(a1)
000145DC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000145E0 0200 0003                  		andi.b	#3,d0
000145E4 6600                       		bne.s	loc_14082
000145E6 137C 000E 0028             		move.b	#$E,$28(a1)
000145EC 6000                       		bra.s	loc_14082
000145EE                            ; ===========================================================================
000145EE                            
000145EE                            loc_1403E:
000145EE 0828 0007 0036             		btst	#7,$36(a0)
000145F4 6700                       		beq.s	loc_14082
000145F6 3438 FE14                  		move.w	($FFFFFE14).w,d2
000145FA E24A                       		lsr.w	#1,d2
000145FC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014602 0240 0003                  		andi.w	#3,d0
00014606 6600                       		bne.s	loc_1406A
00014608 08E8 0006 0036             		bset	#6,$36(a0)
0001460E 6600                       		bne.s	loc_14082
00014610 1342 0028                  		move.b	d2,$28(a1)
00014614 337C 001C 0038             		move.w	#$1C,$38(a1)
0001461A                            
0001461A                            loc_1406A:
0001461A 4A28 0034                  		tst.b	$34(a0)
0001461E 6600                       		bne.s	loc_14082
00014620 08E8 0006 0036             		bset	#6,$36(a0)
00014626 6600                       		bne.s	loc_14082
00014628 1342 0028                  		move.b	d2,$28(a1)
0001462C 337C 001C 0038             		move.w	#$1C,$38(a1)
00014632                            
00014632                            loc_14082:
00014632 5328 0034                  		subq.b	#1,$34(a0)
00014636 6A00                       		bpl.s	locret_1408C
00014638 4268 0036                  		clr.w	$36(a0)
0001463C                            
0001463C                            locret_1408C:
0001463C 4E75                       		rts	
0001463E                            
0001463E                            ; ---------------------------------------------------------------------------
0001463E                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001463E                            ; ---------------------------------------------------------------------------
0001463E                            
0001463E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001463E                            
0001463E                            
0001463E                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001463E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014644                             
00014644                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014644                             
00014644 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014648                             
00014648 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001464E 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014650 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014656 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014658                             
00014658                            Air_GetBgm2:
00014658 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001465E 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014660 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014666 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014668                             
00014668                            Air_GetBgm3:
00014668 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001466E 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014670 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014676 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014678                             
00014678                            Air_GetBgm4:
00014678 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001467E 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014680 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014686                             
00014686                            Air_PlayMusic:
00014686 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
0001468A                             
0001468A                            loc_140A6:
0001468A 4EB9 0000 15B6             		jsr	(PlaySound).l
00014690                             
00014690                            ; NineKode ends here
00014690                            
00014690                            loc_140AC:
00014690 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014696 4238 D372                  		clr.b	($FFFFD372).w
0001469A 4E75                       		rts	
0001469C                            ; End of function ResumeMusic
0001469C                            
0001469C                            ; ===========================================================================
0001469C                            Ani_obj0A:
0001469C                            	include "_anim\obj0A.asm"
0001469C                            ; ---------------------------------------------------------------------------
0001469C                            ; Animation script - countdown numbers and bubbles (LZ)
0001469C                            ; ---------------------------------------------------------------------------
0001469C 0000                       		dc.w byte_140D6-Ani_obj0A
0001469E 0000                       		dc.w byte_140E0-Ani_obj0A
000146A0 0000                       		dc.w byte_140EA-Ani_obj0A
000146A2 0000                       		dc.w byte_140F4-Ani_obj0A
000146A4 0000                       		dc.w byte_140FE-Ani_obj0A
000146A6 0000                       		dc.w byte_14108-Ani_obj0A
000146A8 0000                       		dc.w byte_14112-Ani_obj0A
000146AA 0000                       		dc.w byte_14118-Ani_obj0A
000146AC 0000                       		dc.w byte_14120-Ani_obj0A
000146AE 0000                       		dc.w byte_14128-Ani_obj0A
000146B0 0000                       		dc.w byte_14130-Ani_obj0A
000146B2 0000                       		dc.w byte_14138-Ani_obj0A
000146B4 0000                       		dc.w byte_14140-Ani_obj0A
000146B6 0000                       		dc.w byte_14148-Ani_obj0A
000146B8 0000                       		dc.w byte_1414A-Ani_obj0A
000146BA 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000146C4 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000146CE 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000146D8 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000146E2 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000146EC 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000146F6 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000146FC 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014704 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001470C 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014714 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001471C 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014724 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001472C 0EFC                       byte_14148:	dc.b $E, $FC
0001472E 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014734                            		even
00014734                            		even
00014734                            
00014734                            ; ---------------------------------------------------------------------------
00014734                            ; Sprite mappings - drowning countdown numbers (LZ)
00014734                            ; ---------------------------------------------------------------------------
00014734                            Map_obj0A:
00014734                            	include "_maps\obj0A.asm"
00014734                            ; ---------------------------------------------------------------------------
00014734                            ; Sprite mappings - drowning countdown numbers (LZ)
00014734                            ; ---------------------------------------------------------------------------
00014734 0000                       		dc.w byte_14152-Map_obj0A
00014736 01                         byte_14152:	dc.b 1
00014737 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001473C                            		even
0001473C                            		even
0001473C                            
0001473C                            ; ===========================================================================
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            ; Object 38 - shield and invincibility stars
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            
0001473C                            Obj38:					; XREF: Obj_Index
0001473C 7000                       		moveq	#0,d0
0001473E 1028 0024                  		move.b	$24(a0),d0
00014742 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014746 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
0001474A                            ; ===========================================================================
0001474A 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
0001474C 0000                       		dc.w Obj38_Shield-Obj38_Index
0001474E 0000                       		dc.w Obj38_Stars-Obj38_Index
00014750                            ; ===========================================================================
00014750                            
00014750                            Obj38_Main:				; XREF: Obj38_Index
00014750 5428 0024                  		addq.b	#2,$24(a0)
00014754 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
0001475C 117C 0004 0001             		move.b	#4,1(a0)
00014762 117C 0001 0018             		move.b	#1,$18(a0)
00014768 117C 0010 0019             		move.b	#$10,$19(a0)
0001476E 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014772 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014774 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
0001477A 4E75                       		rts	
0001477C                            ; ===========================================================================
0001477C                            
0001477C                            Obj38_DoStars:
0001477C 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014780 317C 055C 0002             		move.w	#$55C,2(a0)
00014786 4E75                       		rts	
00014788                            ; ===========================================================================
00014788                            
00014788                            Obj38_Shield:				; XREF: Obj38_Index
00014788 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001478C 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001478E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014792 6700                       		beq.s	Obj38_Delete	; if not, branch
00014794 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001479A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000147A0 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000147A6 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000147AC 4EB9 0000 AC66             		jsr	AnimateSprite
000147B2 4EFA 93DC                  		jmp	DisplaySprite
000147B6                            ; ===========================================================================
000147B6                            
000147B6                            Obj38_RmvShield:
000147B6 4E75                       		rts	
000147B8                            ; ===========================================================================
000147B8                            
000147B8                            Obj38_Delete:
000147B8 4EFA 9412                  		jmp	DeleteObject
000147BC                            ; ===========================================================================
000147BC                            
000147BC                            Obj38_Stars:				; XREF: Obj38_Index
000147BC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147C0 6700                       		beq.s	Obj38_Delete2	; if not, branch
000147C2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000147C6 1228 001C                  		move.b	$1C(a0),d1
000147CA 5301                       		subq.b	#1,d1
000147CC 6000                       		bra.s	Obj38_StarTrail
000147CE                            ; ===========================================================================
000147CE E909                       		lsl.b	#4,d1
000147D0 5801                       		addq.b	#4,d1
000147D2 9001                       		sub.b	d1,d0
000147D4 1228 0030                  		move.b	$30(a0),d1
000147D8 9001                       		sub.b	d1,d0
000147DA 5801                       		addq.b	#4,d1
000147DC 0201 000F                  		andi.b	#$F,d1
000147E0 1141 0030                  		move.b	d1,$30(a0)
000147E4 6000                       		bra.s	Obj38_StarTrail2a
000147E6                            ; ===========================================================================
000147E6                            
000147E6                            Obj38_StarTrail:			; XREF: Obj38_Stars
000147E6 E709                       		lsl.b	#3,d1
000147E8 1401                       		move.b	d1,d2
000147EA D201                       		add.b	d1,d1
000147EC D202                       		add.b	d2,d1
000147EE 5801                       		addq.b	#4,d1
000147F0 9001                       		sub.b	d1,d0
000147F2 1228 0030                  		move.b	$30(a0),d1
000147F6 9001                       		sub.b	d1,d0
000147F8 5801                       		addq.b	#4,d1
000147FA 0C01 0018                  		cmpi.b	#$18,d1
000147FE 6500                       		bcs.s	Obj38_StarTrail2
00014800 7200                       		moveq	#0,d1
00014802                            
00014802                            Obj38_StarTrail2:
00014802 1141 0030                  		move.b	d1,$30(a0)
00014806                            
00014806                            Obj38_StarTrail2a:
00014806 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001480A 43F1 0000                  		lea	(a1,d0.w),a1
0001480E 3159 0008                  		move.w	(a1)+,8(a0)
00014812 3159 000C                  		move.w	(a1)+,$C(a0)
00014816 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001481C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014822 4EB9 0000 AC66             		jsr	AnimateSprite
00014828 4EFA 9366                  		jmp	DisplaySprite
0001482C                            ; ===========================================================================
0001482C                            
0001482C                            Obj38_Delete2:				; XREF: Obj38_Stars
0001482C 4EFA 939E                  		jmp	DeleteObject
00014830                            ; ===========================================================================
00014830                            ; ---------------------------------------------------------------------------
00014830                            ; Object 4A - special stage entry from beta
00014830                            ; ---------------------------------------------------------------------------
00014830                            
00014830                            Obj4A:					; XREF: Obj_Index
00014830 7000                       		moveq	#0,d0
00014832 1028 0024                  		move.b	$24(a0),d0
00014836 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001483A 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001483E                            ; ===========================================================================
0001483E 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014840 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014842 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014844                            ; ===========================================================================
00014844                            
00014844                            Obj4A_Main:				; XREF: Obj4A_Index
00014844 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014848 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001484A 4E75                       		rts	
0001484C                            ; ===========================================================================
0001484C                            
0001484C                            Obj4A_Main2:
0001484C 5428 0024                  		addq.b	#2,$24(a0)
00014850 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014858 117C 0004 0001             		move.b	#4,1(a0)
0001485E 117C 0001 0018             		move.b	#1,$18(a0)
00014864 117C 0038 0019             		move.b	#$38,$19(a0)
0001486A 317C 0541 0002             		move.w	#$541,2(a0)
00014870 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014876                            
00014876                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014876 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001487C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014882 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014888 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001488E 4EB9 0000 AC66             		jsr	AnimateSprite
00014894 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001489A 6600                       		bne.s	Obj4A_Display
0001489C 4A38 D000                  		tst.b	($FFFFD000).w
000148A0 6700                       		beq.s	Obj4A_Display
000148A2 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000148A8 303C 00A8                  		move.w	#$A8,d0
000148AC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000148B2                            
000148B2                            Obj4A_Display:
000148B2 4EFA 92DC                  		jmp	DisplaySprite
000148B6                            ; ===========================================================================
000148B6                            
000148B6                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000148B6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000148BA 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000148BC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000148C2 4EFA 9308                  		jmp	DeleteObject
000148C6                            ; ===========================================================================
000148C6                            
000148C6                            Obj4A_Wait:
000148C6 4E75                       		rts	
000148C8                            ; ===========================================================================
000148C8                            ; ---------------------------------------------------------------------------
000148C8                            ; Object 08 - water splash (LZ)
000148C8                            ; ---------------------------------------------------------------------------
000148C8                            
000148C8                            Obj08:					; XREF: Obj_Index
000148C8 7000                       		moveq	#0,d0
000148CA 1028 0024                  		move.b	$24(a0),d0
000148CE 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000148D2 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000148D6                            ; ===========================================================================
000148D6 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000148D8 0000                       		dc.w Obj08_Display-Obj08_Index
000148DA 0000                       		dc.w Obj08_Delete-Obj08_Index
000148DC                            ; ===========================================================================
000148DC                            
000148DC                            Obj08_Main:				; XREF: Obj08_Index
000148DC 5428 0024                  		addq.b	#2,$24(a0)
000148E0 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000148E8 0028 0004 0001             		ori.b	#4,1(a0)
000148EE 117C 0001 0018             		move.b	#1,$18(a0)
000148F4 117C 0010 0019             		move.b	#$10,$19(a0)
000148FA 317C 4259 0002             		move.w	#$4259,2(a0)
00014900 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014906                            
00014906                            Obj08_Display:				; XREF: Obj08_Index
00014906 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001490C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014912 4EB9 0000 AC66             		jsr	AnimateSprite
00014918 4EFA 9276                  		jmp	DisplaySprite
0001491C                            ; ===========================================================================
0001491C                            
0001491C                            Obj08_Delete:				; XREF: Obj08_Index
0001491C 4EFA 92AE                  		jmp	DeleteObject	; delete when animation	is complete
00014920                            ; ===========================================================================
00014920                            Ani_obj38:
00014920                            	include "_anim\obj38.asm"
00014920                            ; ---------------------------------------------------------------------------
00014920                            ; Animation script - shield and invincibility stars
00014920                            ; ---------------------------------------------------------------------------
00014920 0000                       		dc.w byte_14356-Ani_obj38
00014922 0000                       		dc.w byte_1435E-Ani_obj38
00014924 0000                       		dc.w byte_14364-Ani_obj38
00014926 0000                       		dc.w byte_1437E-Ani_obj38
00014928 0000                       		dc.w byte_14398-Ani_obj38
0001492A 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014932 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014938 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014949 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014952 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014963 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001496C 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001497D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014986                            		even
00014986                            		even
00014986                            
00014986                            ; ---------------------------------------------------------------------------
00014986                            ; Sprite mappings - shield and invincibility stars
00014986                            ; ---------------------------------------------------------------------------
00014986                            Map_obj38:
00014986                            	include "_maps\obj38.asm"
00014986                            ; ---------------------------------------------------------------------------
00014986                            ; Sprite mappings - shield and invincibility stars
00014986                            ; ---------------------------------------------------------------------------
00014986 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
0001498A 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
0001498E 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014992 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014996 04                         byte_143C2:	dc.b 4
00014997 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0001499C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149A1 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000149A6 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149AB 04                         byte_143D7:	dc.b 4
000149AC E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000149B1 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000149B6 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000149BB 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000149C0 04                         byte_143EC:	dc.b 4
000149C1 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149C6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149CB 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149D0 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000149D5 04                         byte_14401:	dc.b 4
000149D6 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149DB E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149E0 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149E5 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000149EA 04                         byte_14416:	dc.b 4
000149EB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149F0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149F5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000149FA 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149FF 04                         byte_1442B:	dc.b 4
00014A00 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014A05 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014A0A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014A0F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014A14 04                         byte_14440:	dc.b 4
00014A15 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014A1A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014A1F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014A24 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014A2A 00                         		even
00014A2A 00                         		even
00014A2A                            
00014A2A                            Ani_obj4A:
00014A2A                            	include "_anim\obj4A.asm"
00014A2A                            ; ---------------------------------------------------------------------------
00014A2A                            ; Animation script - special stage entry effect from beta
00014A2A                            ; ---------------------------------------------------------------------------
00014A2A 0000                       		dc.w byte_14458-Ani_obj4A
00014A2C 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014A40                            		even
00014A40                            		even
00014A40                            
00014A40                            ; ---------------------------------------------------------------------------
00014A40                            ; Sprite mappings - special stage entry	from beta
00014A40                            ; ---------------------------------------------------------------------------
00014A40                            Map_obj4A:
00014A40                            	include "_maps\obj4A.asm"
00014A40                            ; ---------------------------------------------------------------------------
00014A40                            ; Sprite mappings - special stage entry	from beta
00014A40                            ; ---------------------------------------------------------------------------
00014A40 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014A44 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014A48 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014A4C 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014A50 03                         byte_1447C:	dc.b 3
00014A51 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014A56 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014A5B 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014A60 03                         byte_1448C:	dc.b 3
00014A61 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014A66 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014A6B 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014A70 05                         byte_1449C:	dc.b 5
00014A71 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014A76 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014A7B FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014A80 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014A85 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014A8A 09                         byte_144B6:	dc.b 9
00014A8B F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014A90 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014A95 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014A9A 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014A9F F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014AA4 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014AA9 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014AAE 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014AB3 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014AB8 12                         byte_144E4:	dc.b $12
00014AB9 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014ABE F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014AC3 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014AC8 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014ACD 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014AD2 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014AD7 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014ADC F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014AE1 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014AE6 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014AEB 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014AF0 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014AF5 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014AFA F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014AFF 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014B04 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014B09 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014B0E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014B13 11                         byte_1453F:	dc.b $11
00014B14 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014B19 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014B1E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014B23 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014B28 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014B2D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B32 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014B37 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014B3C 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014B41 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014B46 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014B4B 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014B50 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014B55 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014B5A F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014B5F 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014B64 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014B69 09                         byte_14595:	dc.b 9
00014B6A FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014B6F 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014B74 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014B79 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014B7E FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014B83 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014B88 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014B8D 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014B92 04                         		dc.b 4
00014B93 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014B98                            		even
00014B98                            		even
00014B98                            
00014B98                            Ani_obj08:
00014B98                            	include "_anim\obj08.asm"
00014B98                            ; ---------------------------------------------------------------------------
00014B98                            ; Animation script - water splash (LZ)
00014B98                            ; ---------------------------------------------------------------------------
00014B98 0000                       		dc.w byte_145C6-Ani_obj08
00014B9A 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014BA0                            		even
00014BA0                            		even
00014BA0                            
00014BA0                            ; ---------------------------------------------------------------------------
00014BA0                            ; Sprite mappings - water splash (LZ)
00014BA0                            ; ---------------------------------------------------------------------------
00014BA0                            Map_obj08:
00014BA0                            	include "_maps\obj08.asm"
00014BA0                            ; ---------------------------------------------------------------------------
00014BA0                            ; Sprite mappings - water splash (LZ)
00014BA0                            ; ---------------------------------------------------------------------------
00014BA0 0000                       		dc.w byte_145D2-Map_obj08
00014BA2 0000                       		dc.w byte_145DD-Map_obj08
00014BA4 0000                       		dc.w byte_145E8-Map_obj08
00014BA6 02                         byte_145D2:	dc.b 2
00014BA7 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014BAC FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014BB1 02                         byte_145DD:	dc.b 2
00014BB2 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014BB7 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014BBC 01                         byte_145E8:	dc.b 1
00014BBD E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014BC2                            		even
00014BC2                            		even
00014BC2                            
00014BC2                            ; ---------------------------------------------------------------------------
00014BC2                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014BC2                            ; ---------------------------------------------------------------------------
00014BC2                            
00014BC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BC2                            
00014BC2                            
00014BC2                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014BC2 0828 0003 0022             		btst	#3,$22(a0)
00014BC8 6700                       		beq.s	loc_14602
00014BCA 7000                       		moveq	#0,d0
00014BCC 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BD0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BD4 4E75                       		rts	
00014BD6                            ; ===========================================================================
00014BD6                            
00014BD6                            loc_14602:
00014BD6 7003                       		moveq	#3,d0
00014BD8 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BDC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BE0 1028 0026                  		move.b	$26(a0),d0
00014BE4 0600 0020                  		addi.b	#$20,d0
00014BE8 6A00                       		bpl.s	loc_14624
00014BEA 1028 0026                  		move.b	$26(a0),d0
00014BEE 6A00                       		bpl.s	loc_1461E
00014BF0 5300                       		subq.b	#1,d0
00014BF2                            
00014BF2                            loc_1461E:
00014BF2 0600 0020                  		addi.b	#$20,d0
00014BF6 6000                       		bra.s	loc_14630
00014BF8                            ; ===========================================================================
00014BF8                            
00014BF8                            loc_14624:
00014BF8 1028 0026                  		move.b	$26(a0),d0
00014BFC 6A00                       		bpl.s	loc_1462C
00014BFE 5200                       		addq.b	#1,d0
00014C00                            
00014C00                            loc_1462C:
00014C00 0600 001F                  		addi.b	#$1F,d0
00014C04                            
00014C04                            loc_14630:
00014C04 0200 00C0                  		andi.b	#$C0,d0
00014C08 0C00 0040                  		cmpi.b	#$40,d0
00014C0C 6700 0000                  		beq.w	Sonic_WalkVertL
00014C10 0C00 0080                  		cmpi.b	#$80,d0
00014C14 6700 0000                  		beq.w	Sonic_WalkCeiling
00014C18 0C00 00C0                  		cmpi.b	#$C0,d0
00014C1C 6700 0000                  		beq.w	Sonic_WalkVertR
00014C20 3428 000C                  		move.w	$C(a0),d2
00014C24 3628 0008                  		move.w	8(a0),d3
00014C28 7000                       		moveq	#0,d0
00014C2A 1028 0016                  		move.b	$16(a0),d0
00014C2E 4880                       		ext.w	d0
00014C30 D440                       		add.w	d0,d2
00014C32 1028 0017                  		move.b	$17(a0),d0
00014C36 4880                       		ext.w	d0
00014C38 D640                       		add.w	d0,d3
00014C3A 49F8 F768                  		lea	($FFFFF768).w,a4
00014C3E 367C 0010                  		movea.w	#$10,a3
00014C42 3C3C 0000                  		move.w	#0,d6
00014C46 7A0D                       		moveq	#$D,d5
00014C48 6100 0000                  		bsr.w	FindFloor
00014C4C 3F01                       		move.w	d1,-(sp)
00014C4E 3428 000C                  		move.w	$C(a0),d2
00014C52 3628 0008                  		move.w	8(a0),d3
00014C56 7000                       		moveq	#0,d0
00014C58 1028 0016                  		move.b	$16(a0),d0
00014C5C 4880                       		ext.w	d0
00014C5E D440                       		add.w	d0,d2
00014C60 1028 0017                  		move.b	$17(a0),d0
00014C64 4880                       		ext.w	d0
00014C66 4440                       		neg.w	d0
00014C68 D640                       		add.w	d0,d3
00014C6A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C6E 367C 0010                  		movea.w	#$10,a3
00014C72 3C3C 0000                  		move.w	#0,d6
00014C76 7A0D                       		moveq	#$D,d5
00014C78 6100 0000                  		bsr.w	FindFloor
00014C7C 301F                       		move.w	(sp)+,d0
00014C7E 6100 0000                  		bsr.w	Sonic_Angle
00014C82 4A41                       		tst.w	d1
00014C84 6700                       		beq.s	locret_146BE
00014C86 6A00                       		bpl.s	loc_146C0
00014C88 0C41 FFF2                  		cmpi.w	#-$E,d1
00014C8C 6D00                       		blt.s	locret_146E6
00014C8E D368 000C                  		add.w	d1,$C(a0)
00014C92                            
00014C92                            locret_146BE:
00014C92 4E75                       		rts	
00014C94                            ; ===========================================================================
00014C94                            
00014C94                            loc_146C0:
00014C94 0C41 000E                  		cmpi.w	#$E,d1
00014C98 6E00                       		bgt.s	loc_146CC
00014C9A                            
00014C9A                            loc_146C6:
00014C9A D368 000C                  		add.w	d1,$C(a0)
00014C9E 4E75                       		rts	
00014CA0                            ; ===========================================================================
00014CA0                            
00014CA0                            loc_146CC:
00014CA0 4A28 0038                  		tst.b	$38(a0)
00014CA4 66F4                       		bne.s	loc_146C6
00014CA6 08E8 0001 0022             		bset	#1,$22(a0)
00014CAC 08A8 0005 0022             		bclr	#5,$22(a0)
00014CB2 117C 0001 001D             		move.b	#1,$1D(a0)
00014CB8 4E75                       		rts	
00014CBA                            ; ===========================================================================
00014CBA                            
00014CBA                            locret_146E6:
00014CBA 4E75                       		rts	
00014CBC                            ; End of function Sonic_AnglePos
00014CBC                            
00014CBC                            ; ===========================================================================
00014CBC 2428 0008                  		move.l	8(a0),d2
00014CC0 3028 0010                  		move.w	$10(a0),d0
00014CC4 48C0                       		ext.l	d0
00014CC6 E180                       		asl.l	#8,d0
00014CC8 9480                       		sub.l	d0,d2
00014CCA 2142 0008                  		move.l	d2,8(a0)
00014CCE 303C 0038                  		move.w	#$38,d0
00014CD2 48C0                       		ext.l	d0
00014CD4 E180                       		asl.l	#8,d0
00014CD6 9680                       		sub.l	d0,d3
00014CD8 2143 000C                  		move.l	d3,$C(a0)
00014CDC 4E75                       		rts	
00014CDE                            ; ===========================================================================
00014CDE                            
00014CDE                            locret_1470A:
00014CDE 4E75                       		rts	
00014CE0                            ; ===========================================================================
00014CE0 2628 000C                  		move.l	$C(a0),d3
00014CE4 3028 0012                  		move.w	$12(a0),d0
00014CE8 0440 0038                  		subi.w	#$38,d0
00014CEC 3140 0012                  		move.w	d0,$12(a0)
00014CF0 48C0                       		ext.l	d0
00014CF2 E180                       		asl.l	#8,d0
00014CF4 9680                       		sub.l	d0,d3
00014CF6 2143 000C                  		move.l	d3,$C(a0)
00014CFA 4E75                       		rts	
00014CFC 4E75                       		rts	
00014CFE                            ; ===========================================================================
00014CFE 2428 0008                  		move.l	8(a0),d2
00014D02 2628 000C                  		move.l	$C(a0),d3
00014D06 3028 0010                  		move.w	$10(a0),d0
00014D0A 48C0                       		ext.l	d0
00014D0C E180                       		asl.l	#8,d0
00014D0E 9480                       		sub.l	d0,d2
00014D10 3028 0012                  		move.w	$12(a0),d0
00014D14 48C0                       		ext.l	d0
00014D16 E180                       		asl.l	#8,d0
00014D18 9680                       		sub.l	d0,d3
00014D1A 2142 0008                  		move.l	d2,8(a0)
00014D1E 2143 000C                  		move.l	d3,$C(a0)
00014D22 4E75                       		rts	
00014D24                            
00014D24                            ; ---------------------------------------------------------------------------
00014D24                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014D24                            ; ---------------------------------------------------------------------------
00014D24                            
00014D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D24                            
00014D24                            
00014D24                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014D24 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014D28 B240                       		cmp.w	d0,d1
00014D2A 6F00                       		ble.s	loc_1475E
00014D2C 1438 F768                  		move.b	($FFFFF768).w,d2
00014D30 3200                       		move.w	d0,d1
00014D32                            
00014D32                            loc_1475E:
00014D32 0802 0000                  		btst	#0,d2
00014D36 6600                       		bne.s	loc_1476A
00014D38 1142 0026                  		move.b	d2,$26(a0)
00014D3C 4E75                       		rts	
00014D3E                            ; ===========================================================================
00014D3E                            
00014D3E                            loc_1476A:
00014D3E 1428 0026                  		move.b	$26(a0),d2
00014D42 0602 0020                  		addi.b	#$20,d2
00014D46 0202 00C0                  		andi.b	#$C0,d2
00014D4A 1142 0026                  		move.b	d2,$26(a0)
00014D4E 4E75                       		rts	
00014D50                            ; End of function Sonic_Angle
00014D50                            
00014D50                            ; ---------------------------------------------------------------------------
00014D50                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014D50                            ; ---------------------------------------------------------------------------
00014D50                            
00014D50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D50                            
00014D50                            
00014D50                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014D50 3428 000C                  		move.w	$C(a0),d2
00014D54 3628 0008                  		move.w	8(a0),d3
00014D58 7000                       		moveq	#0,d0
00014D5A 1028 0017                  		move.b	$17(a0),d0
00014D5E 4880                       		ext.w	d0
00014D60 4440                       		neg.w	d0
00014D62 D440                       		add.w	d0,d2
00014D64 1028 0016                  		move.b	$16(a0),d0
00014D68 4880                       		ext.w	d0
00014D6A D640                       		add.w	d0,d3
00014D6C 49F8 F768                  		lea	($FFFFF768).w,a4
00014D70 367C 0010                  		movea.w	#$10,a3
00014D74 3C3C 0000                  		move.w	#0,d6
00014D78 7A0D                       		moveq	#$D,d5
00014D7A 6100 0000                  		bsr.w	FindWall
00014D7E 3F01                       		move.w	d1,-(sp)
00014D80 3428 000C                  		move.w	$C(a0),d2
00014D84 3628 0008                  		move.w	8(a0),d3
00014D88 7000                       		moveq	#0,d0
00014D8A 1028 0017                  		move.b	$17(a0),d0
00014D8E 4880                       		ext.w	d0
00014D90 D440                       		add.w	d0,d2
00014D92 1028 0016                  		move.b	$16(a0),d0
00014D96 4880                       		ext.w	d0
00014D98 D640                       		add.w	d0,d3
00014D9A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014D9E 367C 0010                  		movea.w	#$10,a3
00014DA2 3C3C 0000                  		move.w	#0,d6
00014DA6 7A0D                       		moveq	#$D,d5
00014DA8 6100 0000                  		bsr.w	FindWall
00014DAC 301F                       		move.w	(sp)+,d0
00014DAE 6100 FF74                  		bsr.w	Sonic_Angle
00014DB2 4A41                       		tst.w	d1
00014DB4 6700                       		beq.s	locret_147F0
00014DB6 6A00                       		bpl.s	loc_147F2
00014DB8 0C41 FFF2                  		cmpi.w	#-$E,d1
00014DBC 6D00 FF20                  		blt.w	locret_1470A
00014DC0 D368 0008                  		add.w	d1,8(a0)
00014DC4                            
00014DC4                            locret_147F0:
00014DC4 4E75                       		rts	
00014DC6                            ; ===========================================================================
00014DC6                            
00014DC6                            loc_147F2:
00014DC6 0C41 000E                  		cmpi.w	#$E,d1
00014DCA 6E00                       		bgt.s	loc_147FE
00014DCC                            
00014DCC                            loc_147F8:
00014DCC D368 0008                  		add.w	d1,8(a0)
00014DD0 4E75                       		rts	
00014DD2                            ; ===========================================================================
00014DD2                            
00014DD2                            loc_147FE:
00014DD2 4A28 0038                  		tst.b	$38(a0)
00014DD6 66F4                       		bne.s	loc_147F8
00014DD8 08E8 0001 0022             		bset	#1,$22(a0)
00014DDE 08A8 0005 0022             		bclr	#5,$22(a0)
00014DE4 117C 0001 001D             		move.b	#1,$1D(a0)
00014DEA 4E75                       		rts	
00014DEC                            ; End of function Sonic_WalkVertR
00014DEC                            
00014DEC                            ; ---------------------------------------------------------------------------
00014DEC                            ; Subroutine allowing Sonic to walk upside-down
00014DEC                            ; ---------------------------------------------------------------------------
00014DEC                            
00014DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DEC                            
00014DEC                            
00014DEC                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014DEC 3428 000C                  		move.w	$C(a0),d2
00014DF0 3628 0008                  		move.w	8(a0),d3
00014DF4 7000                       		moveq	#0,d0
00014DF6 1028 0016                  		move.b	$16(a0),d0
00014DFA 4880                       		ext.w	d0
00014DFC 9440                       		sub.w	d0,d2
00014DFE 0A42 000F                  		eori.w	#$F,d2
00014E02 1028 0017                  		move.b	$17(a0),d0
00014E06 4880                       		ext.w	d0
00014E08 D640                       		add.w	d0,d3
00014E0A 49F8 F768                  		lea	($FFFFF768).w,a4
00014E0E 367C FFF0                  		movea.w	#-$10,a3
00014E12 3C3C 1000                  		move.w	#$1000,d6
00014E16 7A0D                       		moveq	#$D,d5
00014E18 6100 0000                  		bsr.w	FindFloor
00014E1C 3F01                       		move.w	d1,-(sp)
00014E1E 3428 000C                  		move.w	$C(a0),d2
00014E22 3628 0008                  		move.w	8(a0),d3
00014E26 7000                       		moveq	#0,d0
00014E28 1028 0016                  		move.b	$16(a0),d0
00014E2C 4880                       		ext.w	d0
00014E2E 9440                       		sub.w	d0,d2
00014E30 0A42 000F                  		eori.w	#$F,d2
00014E34 1028 0017                  		move.b	$17(a0),d0
00014E38 4880                       		ext.w	d0
00014E3A 9640                       		sub.w	d0,d3
00014E3C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E40 367C FFF0                  		movea.w	#-$10,a3
00014E44 3C3C 1000                  		move.w	#$1000,d6
00014E48 7A0D                       		moveq	#$D,d5
00014E4A 6100 0000                  		bsr.w	FindFloor
00014E4E 301F                       		move.w	(sp)+,d0
00014E50 6100 FED2                  		bsr.w	Sonic_Angle
00014E54 4A41                       		tst.w	d1
00014E56 6700                       		beq.s	locret_14892
00014E58 6A00                       		bpl.s	loc_14894
00014E5A 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E5E 6D00 FE5A                  		blt.w	locret_146E6
00014E62 9368 000C                  		sub.w	d1,$C(a0)
00014E66                            
00014E66                            locret_14892:
00014E66 4E75                       		rts	
00014E68                            ; ===========================================================================
00014E68                            
00014E68                            loc_14894:
00014E68 0C41 000E                  		cmpi.w	#$E,d1
00014E6C 6E00                       		bgt.s	loc_148A0
00014E6E                            
00014E6E                            loc_1489A:
00014E6E 9368 000C                  		sub.w	d1,$C(a0)
00014E72 4E75                       		rts	
00014E74                            ; ===========================================================================
00014E74                            
00014E74                            loc_148A0:
00014E74 4A28 0038                  		tst.b	$38(a0)
00014E78 66F4                       		bne.s	loc_1489A
00014E7A 08E8 0001 0022             		bset	#1,$22(a0)
00014E80 08A8 0005 0022             		bclr	#5,$22(a0)
00014E86 117C 0001 001D             		move.b	#1,$1D(a0)
00014E8C 4E75                       		rts	
00014E8E                            ; End of function Sonic_WalkCeiling
00014E8E                            
00014E8E                            ; ---------------------------------------------------------------------------
00014E8E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014E8E                            ; ---------------------------------------------------------------------------
00014E8E                            
00014E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E8E                            
00014E8E                            
00014E8E                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014E8E 3428 000C                  		move.w	$C(a0),d2
00014E92 3628 0008                  		move.w	8(a0),d3
00014E96 7000                       		moveq	#0,d0
00014E98 1028 0017                  		move.b	$17(a0),d0
00014E9C 4880                       		ext.w	d0
00014E9E 9440                       		sub.w	d0,d2
00014EA0 1028 0016                  		move.b	$16(a0),d0
00014EA4 4880                       		ext.w	d0
00014EA6 9640                       		sub.w	d0,d3
00014EA8 0A43 000F                  		eori.w	#$F,d3
00014EAC 49F8 F768                  		lea	($FFFFF768).w,a4
00014EB0 367C FFF0                  		movea.w	#-$10,a3
00014EB4 3C3C 0800                  		move.w	#$800,d6
00014EB8 7A0D                       		moveq	#$D,d5
00014EBA 6100 0000                  		bsr.w	FindWall
00014EBE 3F01                       		move.w	d1,-(sp)
00014EC0 3428 000C                  		move.w	$C(a0),d2
00014EC4 3628 0008                  		move.w	8(a0),d3
00014EC8 7000                       		moveq	#0,d0
00014ECA 1028 0017                  		move.b	$17(a0),d0
00014ECE 4880                       		ext.w	d0
00014ED0 D440                       		add.w	d0,d2
00014ED2 1028 0016                  		move.b	$16(a0),d0
00014ED6 4880                       		ext.w	d0
00014ED8 9640                       		sub.w	d0,d3
00014EDA 0A43 000F                  		eori.w	#$F,d3
00014EDE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EE2 367C FFF0                  		movea.w	#-$10,a3
00014EE6 3C3C 0800                  		move.w	#$800,d6
00014EEA 7A0D                       		moveq	#$D,d5
00014EEC 6100 0000                  		bsr.w	FindWall
00014EF0 301F                       		move.w	(sp)+,d0
00014EF2 6100 FE30                  		bsr.w	Sonic_Angle
00014EF6 4A41                       		tst.w	d1
00014EF8 6700                       		beq.s	locret_14934
00014EFA 6A00                       		bpl.s	loc_14936
00014EFC 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F00 6D00 FDDC                  		blt.w	locret_1470A
00014F04 9368 0008                  		sub.w	d1,8(a0)
00014F08                            
00014F08                            locret_14934:
00014F08 4E75                       		rts	
00014F0A                            ; ===========================================================================
00014F0A                            
00014F0A                            loc_14936:
00014F0A 0C41 000E                  		cmpi.w	#$E,d1
00014F0E 6E00                       		bgt.s	loc_14942
00014F10                            
00014F10                            loc_1493C:
00014F10 9368 0008                  		sub.w	d1,8(a0)
00014F14 4E75                       		rts	
00014F16                            ; ===========================================================================
00014F16                            
00014F16                            loc_14942:
00014F16 4A28 0038                  		tst.b	$38(a0)
00014F1A 66F4                       		bne.s	loc_1493C
00014F1C 08E8 0001 0022             		bset	#1,$22(a0)
00014F22 08A8 0005 0022             		bclr	#5,$22(a0)
00014F28 117C 0001 001D             		move.b	#1,$1D(a0)
00014F2E 4E75                       		rts	
00014F30                            ; End of function Sonic_WalkVertL
00014F30                            
00014F30                            ; ---------------------------------------------------------------------------
00014F30                            ; Subroutine to	find which tile	the object is standing on
00014F30                            ; ---------------------------------------------------------------------------
00014F30                            
00014F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F30                            
00014F30                            
00014F30                            Floor_ChkTile:				; XREF: FindFloor; et al
00014F30 3002                       		move.w	d2,d0
00014F32 E248                       		lsr.w	#1,d0
00014F34 0240 0380                  		andi.w	#$380,d0
00014F38 3203                       		move.w	d3,d1
00014F3A E049                       		lsr.w	#8,d1
00014F3C 0241 007F                  		andi.w	#$7F,d1
00014F40 D041                       		add.w	d1,d0
00014F42 72FF                       		moveq	#-1,d1
00014F44 43F8 A400                  		lea	($FFFFA400).w,a1
00014F48 1231 0000                  		move.b	(a1,d0.w),d1
00014F4C 6700                       		beq.s	loc_14996
00014F4E 6B00                       		bmi.s	loc_1499A
00014F50 5301                       		subq.b	#1,d1
00014F52 4881                       		ext.w	d1
00014F54 EE59                       		ror.w	#7,d1
00014F56 3002                       		move.w	d2,d0
00014F58 D040                       		add.w	d0,d0
00014F5A 0240 01E0                  		andi.w	#$1E0,d0
00014F5E D240                       		add.w	d0,d1
00014F60 3003                       		move.w	d3,d0
00014F62 E648                       		lsr.w	#3,d0
00014F64 0240 001E                  		andi.w	#$1E,d0
00014F68 D240                       		add.w	d0,d1
00014F6A                            
00014F6A                            loc_14996:
00014F6A 2241                       		movea.l	d1,a1
00014F6C 4E75                       		rts	
00014F6E                            ; ===========================================================================
00014F6E                            
00014F6E                            loc_1499A:
00014F6E 0241 007F                  		andi.w	#$7F,d1
00014F72 0828 0006 0001             		btst	#6,1(a0)
00014F78 6700                       		beq.s	loc_149B2
00014F7A 5241                       		addq.w	#1,d1
00014F7C 0C41 0029                  		cmpi.w	#$29,d1
00014F80 6600                       		bne.s	loc_149B2
00014F82 323C 0051                  		move.w	#$51,d1
00014F86                            
00014F86                            loc_149B2:
00014F86 5301                       		subq.b	#1,d1
00014F88 EE59                       		ror.w	#7,d1
00014F8A 3002                       		move.w	d2,d0
00014F8C D040                       		add.w	d0,d0
00014F8E 0240 01E0                  		andi.w	#$1E0,d0
00014F92 D240                       		add.w	d0,d1
00014F94 3003                       		move.w	d3,d0
00014F96 E648                       		lsr.w	#3,d0
00014F98 0240 001E                  		andi.w	#$1E,d0
00014F9C D240                       		add.w	d0,d1
00014F9E 2241                       		movea.l	d1,a1
00014FA0 4E75                       		rts	
00014FA2                            ; End of function Floor_ChkTile
00014FA2                            
00014FA2                            
00014FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FA2                            
00014FA2                            
00014FA2                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014FA2 618C                       		bsr.s	Floor_ChkTile
00014FA4 3011                       		move.w	(a1),d0
00014FA6 3800                       		move.w	d0,d4
00014FA8 0240 07FF                  		andi.w	#$7FF,d0
00014FAC 6700                       		beq.s	loc_149DE
00014FAE 0B04                       		btst	d5,d4
00014FB0 6600                       		bne.s	loc_149EC
00014FB2                            
00014FB2                            loc_149DE:
00014FB2 D44B                       		add.w	a3,d2
00014FB4 6100 0000                  		bsr.w	FindFloor2
00014FB8 944B                       		sub.w	a3,d2
00014FBA 0641 0010                  		addi.w	#$10,d1
00014FBE 4E75                       		rts	
00014FC0                            ; ===========================================================================
00014FC0                            
00014FC0                            loc_149EC:
00014FC0 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014FC4 1032 0000                  		move.b	(a2,d0.w),d0
00014FC8 0240 00FF                  		andi.w	#$FF,d0
00014FCC 67E4                       		beq.s	loc_149DE
00014FCE 45F9 0000 0000             		lea	(AngleMap).l,a2
00014FD4 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014FD8 E948                       		lsl.w	#4,d0
00014FDA 3203                       		move.w	d3,d1
00014FDC 0804 000B                  		btst	#$B,d4
00014FE0 6700                       		beq.s	loc_14A12
00014FE2 4641                       		not.w	d1
00014FE4 4414                       		neg.b	(a4)
00014FE6                            
00014FE6                            loc_14A12:
00014FE6 0804 000C                  		btst	#$C,d4
00014FEA 6700                       		beq.s	loc_14A22
00014FEC 0614 0040                  		addi.b	#$40,(a4)
00014FF0 4414                       		neg.b	(a4)
00014FF2 0414 0040                  		subi.b	#$40,(a4)
00014FF6                            
00014FF6                            loc_14A22:
00014FF6 0241 000F                  		andi.w	#$F,d1
00014FFA D240                       		add.w	d0,d1
00014FFC 45F9 0000 0000             		lea	(CollArray1).l,a2
00015002 1032 1000                  		move.b	(a2,d1.w),d0
00015006 4880                       		ext.w	d0
00015008 BD44                       		eor.w	d6,d4
0001500A 0804 000C                  		btst	#$C,d4
0001500E 6700                       		beq.s	loc_14A3E
00015010 4440                       		neg.w	d0
00015012                            
00015012                            loc_14A3E:
00015012 4A40                       		tst.w	d0
00015014 679C                       		beq.s	loc_149DE
00015016 6B00                       		bmi.s	loc_14A5A
00015018 0C00 0010                  		cmpi.b	#$10,d0
0001501C 6700                       		beq.s	loc_14A66
0001501E 3202                       		move.w	d2,d1
00015020 0241 000F                  		andi.w	#$F,d1
00015024 D041                       		add.w	d1,d0
00015026 323C 000F                  		move.w	#$F,d1
0001502A 9240                       		sub.w	d0,d1
0001502C 4E75                       		rts	
0001502E                            ; ===========================================================================
0001502E                            
0001502E                            loc_14A5A:
0001502E 3202                       		move.w	d2,d1
00015030 0241 000F                  		andi.w	#$F,d1
00015034 D041                       		add.w	d1,d0
00015036 6A00 FF7A                  		bpl.w	loc_149DE
0001503A                            
0001503A                            loc_14A66:
0001503A 944B                       		sub.w	a3,d2
0001503C 6100 0000                  		bsr.w	FindFloor2
00015040 D44B                       		add.w	a3,d2
00015042 0441 0010                  		subi.w	#$10,d1
00015046 4E75                       		rts	
00015048                            ; End of function FindFloor
00015048                            
00015048                            
00015048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015048                            
00015048                            
00015048                            FindFloor2:				; XREF: FindFloor
00015048 6100 FEE6                  		bsr.w	Floor_ChkTile
0001504C 3011                       		move.w	(a1),d0
0001504E 3800                       		move.w	d0,d4
00015050 0240 07FF                  		andi.w	#$7FF,d0
00015054 6700                       		beq.s	loc_14A86
00015056 0B04                       		btst	d5,d4
00015058 6600                       		bne.s	loc_14A94
0001505A                            
0001505A                            loc_14A86:
0001505A 323C 000F                  		move.w	#$F,d1
0001505E 3002                       		move.w	d2,d0
00015060 0240 000F                  		andi.w	#$F,d0
00015064 9240                       		sub.w	d0,d1
00015066 4E75                       		rts	
00015068                            ; ===========================================================================
00015068                            
00015068                            loc_14A94:
00015068 2478 F796                  		movea.l	($FFFFF796).w,a2
0001506C 1032 0000                  		move.b	(a2,d0.w),d0
00015070 0240 00FF                  		andi.w	#$FF,d0
00015074 67E4                       		beq.s	loc_14A86
00015076 45F9 0000 0000             		lea	(AngleMap).l,a2
0001507C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015080 E948                       		lsl.w	#4,d0
00015082 3203                       		move.w	d3,d1
00015084 0804 000B                  		btst	#$B,d4
00015088 6700                       		beq.s	loc_14ABA
0001508A 4641                       		not.w	d1
0001508C 4414                       		neg.b	(a4)
0001508E                            
0001508E                            loc_14ABA:
0001508E 0804 000C                  		btst	#$C,d4
00015092 6700                       		beq.s	loc_14ACA
00015094 0614 0040                  		addi.b	#$40,(a4)
00015098 4414                       		neg.b	(a4)
0001509A 0414 0040                  		subi.b	#$40,(a4)
0001509E                            
0001509E                            loc_14ACA:
0001509E 0241 000F                  		andi.w	#$F,d1
000150A2 D240                       		add.w	d0,d1
000150A4 45F9 0000 0000             		lea	(CollArray1).l,a2
000150AA 1032 1000                  		move.b	(a2,d1.w),d0
000150AE 4880                       		ext.w	d0
000150B0 BD44                       		eor.w	d6,d4
000150B2 0804 000C                  		btst	#$C,d4
000150B6 6700                       		beq.s	loc_14AE6
000150B8 4440                       		neg.w	d0
000150BA                            
000150BA                            loc_14AE6:
000150BA 4A40                       		tst.w	d0
000150BC 679C                       		beq.s	loc_14A86
000150BE 6B00                       		bmi.s	loc_14AFC
000150C0 3202                       		move.w	d2,d1
000150C2 0241 000F                  		andi.w	#$F,d1
000150C6 D041                       		add.w	d1,d0
000150C8 323C 000F                  		move.w	#$F,d1
000150CC 9240                       		sub.w	d0,d1
000150CE 4E75                       		rts	
000150D0                            ; ===========================================================================
000150D0                            
000150D0                            loc_14AFC:
000150D0 3202                       		move.w	d2,d1
000150D2 0241 000F                  		andi.w	#$F,d1
000150D6 D041                       		add.w	d1,d0
000150D8 6A00 FF80                  		bpl.w	loc_14A86
000150DC 4641                       		not.w	d1
000150DE 4E75                       		rts	
000150E0                            ; End of function FindFloor2
000150E0                            
000150E0                            
000150E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150E0                            
000150E0                            
000150E0                            FindWall:				; XREF: Sonic_WalkVertR; et al
000150E0 6100 FE4E                  		bsr.w	Floor_ChkTile
000150E4 3011                       		move.w	(a1),d0
000150E6 3800                       		move.w	d0,d4
000150E8 0240 07FF                  		andi.w	#$7FF,d0
000150EC 6700                       		beq.s	loc_14B1E
000150EE 0B04                       		btst	d5,d4
000150F0 6600                       		bne.s	loc_14B2C
000150F2                            
000150F2                            loc_14B1E:
000150F2 D64B                       		add.w	a3,d3
000150F4 6100 0000                  		bsr.w	FindWall2
000150F8 964B                       		sub.w	a3,d3
000150FA 0641 0010                  		addi.w	#$10,d1
000150FE 4E75                       		rts	
00015100                            ; ===========================================================================
00015100                            
00015100                            loc_14B2C:
00015100 2478 F796                  		movea.l	($FFFFF796).w,a2
00015104 1032 0000                  		move.b	(a2,d0.w),d0
00015108 0240 00FF                  		andi.w	#$FF,d0
0001510C 67E4                       		beq.s	loc_14B1E
0001510E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015114 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015118 E948                       		lsl.w	#4,d0
0001511A 3202                       		move.w	d2,d1
0001511C 0804 000C                  		btst	#$C,d4
00015120 6700                       		beq.s	loc_14B5A
00015122 4641                       		not.w	d1
00015124 0614 0040                  		addi.b	#$40,(a4)
00015128 4414                       		neg.b	(a4)
0001512A 0414 0040                  		subi.b	#$40,(a4)
0001512E                            
0001512E                            loc_14B5A:
0001512E 0804 000B                  		btst	#$B,d4
00015132 6700                       		beq.s	loc_14B62
00015134 4414                       		neg.b	(a4)
00015136                            
00015136                            loc_14B62:
00015136 0241 000F                  		andi.w	#$F,d1
0001513A D240                       		add.w	d0,d1
0001513C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015142 1032 1000                  		move.b	(a2,d1.w),d0
00015146 4880                       		ext.w	d0
00015148 BD44                       		eor.w	d6,d4
0001514A 0804 000B                  		btst	#$B,d4
0001514E 6700                       		beq.s	loc_14B7E
00015150 4440                       		neg.w	d0
00015152                            
00015152                            loc_14B7E:
00015152 4A40                       		tst.w	d0
00015154 679C                       		beq.s	loc_14B1E
00015156 6B00                       		bmi.s	loc_14B9A
00015158 0C00 0010                  		cmpi.b	#$10,d0
0001515C 6700                       		beq.s	loc_14BA6
0001515E 3203                       		move.w	d3,d1
00015160 0241 000F                  		andi.w	#$F,d1
00015164 D041                       		add.w	d1,d0
00015166 323C 000F                  		move.w	#$F,d1
0001516A 9240                       		sub.w	d0,d1
0001516C 4E75                       		rts	
0001516E                            ; ===========================================================================
0001516E                            
0001516E                            loc_14B9A:
0001516E 3203                       		move.w	d3,d1
00015170 0241 000F                  		andi.w	#$F,d1
00015174 D041                       		add.w	d1,d0
00015176 6A00 FF7A                  		bpl.w	loc_14B1E
0001517A                            
0001517A                            loc_14BA6:
0001517A 964B                       		sub.w	a3,d3
0001517C 6100 0000                  		bsr.w	FindWall2
00015180 D64B                       		add.w	a3,d3
00015182 0441 0010                  		subi.w	#$10,d1
00015186 4E75                       		rts	
00015188                            ; End of function FindWall
00015188                            
00015188                            
00015188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015188                            
00015188                            
00015188                            FindWall2:				; XREF: FindWall
00015188 6100 FDA6                  		bsr.w	Floor_ChkTile
0001518C 3011                       		move.w	(a1),d0
0001518E 3800                       		move.w	d0,d4
00015190 0240 07FF                  		andi.w	#$7FF,d0
00015194 6700                       		beq.s	loc_14BC6
00015196 0B04                       		btst	d5,d4
00015198 6600                       		bne.s	loc_14BD4
0001519A                            
0001519A                            loc_14BC6:
0001519A 323C 000F                  		move.w	#$F,d1
0001519E 3003                       		move.w	d3,d0
000151A0 0240 000F                  		andi.w	#$F,d0
000151A4 9240                       		sub.w	d0,d1
000151A6 4E75                       		rts	
000151A8                            ; ===========================================================================
000151A8                            
000151A8                            loc_14BD4:
000151A8 2478 F796                  		movea.l	($FFFFF796).w,a2
000151AC 1032 0000                  		move.b	(a2,d0.w),d0
000151B0 0240 00FF                  		andi.w	#$FF,d0
000151B4 67E4                       		beq.s	loc_14BC6
000151B6 45F9 0000 0000             		lea	(AngleMap).l,a2
000151BC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000151C0 E948                       		lsl.w	#4,d0
000151C2 3202                       		move.w	d2,d1
000151C4 0804 000C                  		btst	#$C,d4
000151C8 6700                       		beq.s	loc_14C02
000151CA 4641                       		not.w	d1
000151CC 0614 0040                  		addi.b	#$40,(a4)
000151D0 4414                       		neg.b	(a4)
000151D2 0414 0040                  		subi.b	#$40,(a4)
000151D6                            
000151D6                            loc_14C02:
000151D6 0804 000B                  		btst	#$B,d4
000151DA 6700                       		beq.s	loc_14C0A
000151DC 4414                       		neg.b	(a4)
000151DE                            
000151DE                            loc_14C0A:
000151DE 0241 000F                  		andi.w	#$F,d1
000151E2 D240                       		add.w	d0,d1
000151E4 45F9 0000 0000             		lea	(CollArray2).l,a2
000151EA 1032 1000                  		move.b	(a2,d1.w),d0
000151EE 4880                       		ext.w	d0
000151F0 BD44                       		eor.w	d6,d4
000151F2 0804 000B                  		btst	#$B,d4
000151F6 6700                       		beq.s	loc_14C26
000151F8 4440                       		neg.w	d0
000151FA                            
000151FA                            loc_14C26:
000151FA 4A40                       		tst.w	d0
000151FC 679C                       		beq.s	loc_14BC6
000151FE 6B00                       		bmi.s	loc_14C3C
00015200 3203                       		move.w	d3,d1
00015202 0241 000F                  		andi.w	#$F,d1
00015206 D041                       		add.w	d1,d0
00015208 323C 000F                  		move.w	#$F,d1
0001520C 9240                       		sub.w	d0,d1
0001520E 4E75                       		rts	
00015210                            ; ===========================================================================
00015210                            
00015210                            loc_14C3C:
00015210 3203                       		move.w	d3,d1
00015212 0241 000F                  		andi.w	#$F,d1
00015216 D041                       		add.w	d1,d0
00015218 6A00 FF80                  		bpl.w	loc_14BC6
0001521C 4641                       		not.w	d1
0001521E 4E75                       		rts	
00015220                            ; End of function FindWall2
00015220                            
00015220                            ; ---------------------------------------------------------------------------
00015220                            ; Unused floor/wall subroutine - logs something	to do with collision
00015220                            ; ---------------------------------------------------------------------------
00015220                            
00015220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015220                            
00015220                            
00015220                            FloorLog_Unk:				; XREF: Level
00015220 4E75                       		rts	
00015222                            
00015222 43F9 0000 0000             		lea	(CollArray1).l,a1
00015228 45F9 0000 0000             		lea	(CollArray1).l,a2
0001522E 363C 00FF                  		move.w	#$FF,d3
00015232                            
00015232                            loc_14C5E:
00015232 7A10                       		moveq	#$10,d5
00015234 343C 000F                  		move.w	#$F,d2
00015238                            
00015238                            loc_14C64:
00015238 7800                       		moveq	#0,d4
0001523A 323C 000F                  		move.w	#$F,d1
0001523E                            
0001523E                            loc_14C6A:
0001523E 3019                       		move.w	(a1)+,d0
00015240 EAA8                       		lsr.l	d5,d0
00015242 D944                       		addx.w	d4,d4
00015244 51C9 FFF8                  		dbf	d1,loc_14C6A
00015248                            
00015248 34C4                       		move.w	d4,(a2)+
0001524A 92FC 0020                  		suba.w	#$20,a1
0001524E 5345                       		subq.w	#1,d5
00015250 51CA FFE6                  		dbf	d2,loc_14C64
00015254                            
00015254 D2FC 0020                  		adda.w	#$20,a1
00015258 51CB FFD8                  		dbf	d3,loc_14C5E
0001525C                            
0001525C 43F9 0000 0000             		lea	(CollArray1).l,a1
00015262 45F9 0000 0000             		lea	(CollArray2).l,a2
00015268 6100                       		bsr.s	FloorLog_Unk2
0001526A 43F9 0000 0000             		lea	(CollArray1).l,a1
00015270 45F9 0000 0000             		lea	(CollArray1).l,a2
00015276                            
00015276                            ; End of function FloorLog_Unk
00015276                            
00015276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015276                            
00015276                            
00015276                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015276 363C 0FFF                  		move.w	#$FFF,d3
0001527A                            
0001527A                            loc_14CA6:
0001527A 7400                       		moveq	#0,d2
0001527C 323C 000F                  		move.w	#$F,d1
00015280 3019                       		move.w	(a1)+,d0
00015282 6700                       		beq.s	loc_14CD4
00015284 6B00                       		bmi.s	loc_14CBE
00015286                            
00015286                            loc_14CB2:
00015286 E248                       		lsr.w	#1,d0
00015288 6400                       		bcc.s	loc_14CB8
0001528A 5202                       		addq.b	#1,d2
0001528C                            
0001528C                            loc_14CB8:
0001528C 51C9 FFF8                  		dbf	d1,loc_14CB2
00015290                            
00015290 6000                       		bra.s	loc_14CD6
00015292                            ; ===========================================================================
00015292                            
00015292                            loc_14CBE:
00015292 0C40 FFFF                  		cmpi.w	#-1,d0
00015296 6700                       		beq.s	loc_14CD0
00015298                            
00015298                            loc_14CC4:
00015298 E348                       		lsl.w	#1,d0
0001529A 6400                       		bcc.s	loc_14CCA
0001529C 5302                       		subq.b	#1,d2
0001529E                            
0001529E                            loc_14CCA:
0001529E 51C9 FFF8                  		dbf	d1,loc_14CC4
000152A2                            
000152A2 6000                       		bra.s	loc_14CD6
000152A4                            ; ===========================================================================
000152A4                            
000152A4                            loc_14CD0:
000152A4 303C 0010                  		move.w	#$10,d0
000152A8                            
000152A8                            loc_14CD4:
000152A8 3400                       		move.w	d0,d2
000152AA                            
000152AA                            loc_14CD6:
000152AA 14C2                       		move.b	d2,(a2)+
000152AC 51CB FFCC                  		dbf	d3,loc_14CA6
000152B0                            
000152B0 4E75                       		rts	
000152B2                            
000152B2                            ; End of function FloorLog_Unk2
000152B2                            
000152B2                            
000152B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152B2                            
000152B2                            
000152B2                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000152B2 2628 0008                  		move.l	8(a0),d3
000152B6 2428 000C                  		move.l	$C(a0),d2
000152BA 3228 0010                  		move.w	$10(a0),d1
000152BE 48C1                       		ext.l	d1
000152C0 E181                       		asl.l	#8,d1
000152C2 D681                       		add.l	d1,d3
000152C4 3228 0012                  		move.w	$12(a0),d1
000152C8 48C1                       		ext.l	d1
000152CA E181                       		asl.l	#8,d1
000152CC D481                       		add.l	d1,d2
000152CE 4842                       		swap	d2
000152D0 4843                       		swap	d3
000152D2 11C0 F768                  		move.b	d0,($FFFFF768).w
000152D6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000152DA 1200                       		move.b	d0,d1
000152DC 0600 0020                  		addi.b	#$20,d0
000152E0 6A00                       		bpl.s	loc_14D1A
000152E2 1001                       		move.b	d1,d0
000152E4 6A00                       		bpl.s	loc_14D14
000152E6 5300                       		subq.b	#1,d0
000152E8                            
000152E8                            loc_14D14:
000152E8 0600 0020                  		addi.b	#$20,d0
000152EC 6000                       		bra.s	loc_14D24
000152EE                            ; ===========================================================================
000152EE                            
000152EE                            loc_14D1A:
000152EE 1001                       		move.b	d1,d0
000152F0 6A00                       		bpl.s	loc_14D20
000152F2 5200                       		addq.b	#1,d0
000152F4                            
000152F4                            loc_14D20:
000152F4 0600 001F                  		addi.b	#$1F,d0
000152F8                            
000152F8                            loc_14D24:
000152F8 0200 00C0                  		andi.b	#$C0,d0
000152FC 6700 0000                  		beq.w	loc_14DF0
00015300 0C00 0080                  		cmpi.b	#$80,d0
00015304 6700 0000                  		beq.w	loc_14F7C
00015308 0201 0038                  		andi.b	#$38,d1
0001530C 6600                       		bne.s	loc_14D3C
0001530E 5042                       		addq.w	#8,d2
00015310                            
00015310                            loc_14D3C:
00015310 0C00 0040                  		cmpi.b	#$40,d0
00015314 6700 0000                  		beq.w	loc_1504A
00015318 6000 0000                  		bra.w	loc_14EBC
0001531C                            
0001531C                            ; End of function Sonic_WalkSpeed
0001531C                            
0001531C                            
0001531C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001531C                            
0001531C                            
0001531C                            sub_14D48:				; XREF: Sonic_Jump
0001531C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015320 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015324 0600 0020                  		addi.b	#$20,d0
00015328 0200 00C0                  		andi.b	#$C0,d0
0001532C 0C00 0040                  		cmpi.b	#$40,d0
00015330 6700 0000                  		beq.w	loc_14FD6
00015334 0C00 0080                  		cmpi.b	#$80,d0
00015338 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001533C 0C00 00C0                  		cmpi.b	#$C0,d0
00015340 6700 0000                  		beq.w	sub_14E50
00015344                            
00015344                            ; End of function sub_14D48
00015344                            
00015344                            ; ---------------------------------------------------------------------------
00015344                            ; Subroutine to	make Sonic land	on the floor after jumping
00015344                            ; ---------------------------------------------------------------------------
00015344                            
00015344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015344                            
00015344                            
00015344                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015344 3428 000C                  		move.w	$C(a0),d2
00015348 3628 0008                  		move.w	8(a0),d3
0001534C 7000                       		moveq	#0,d0
0001534E 1028 0016                  		move.b	$16(a0),d0
00015352 4880                       		ext.w	d0
00015354 D440                       		add.w	d0,d2
00015356 1028 0017                  		move.b	$17(a0),d0
0001535A 4880                       		ext.w	d0
0001535C D640                       		add.w	d0,d3
0001535E 49F8 F768                  		lea	($FFFFF768).w,a4
00015362 367C 0010                  		movea.w	#$10,a3
00015366 3C3C 0000                  		move.w	#0,d6
0001536A 7A0D                       		moveq	#$D,d5
0001536C 6100 FC34                  		bsr.w	FindFloor
00015370 3F01                       		move.w	d1,-(sp)
00015372 3428 000C                  		move.w	$C(a0),d2
00015376 3628 0008                  		move.w	8(a0),d3
0001537A 7000                       		moveq	#0,d0
0001537C 1028 0016                  		move.b	$16(a0),d0
00015380 4880                       		ext.w	d0
00015382 D440                       		add.w	d0,d2
00015384 1028 0017                  		move.b	$17(a0),d0
00015388 4880                       		ext.w	d0
0001538A 9640                       		sub.w	d0,d3
0001538C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015390 367C 0010                  		movea.w	#$10,a3
00015394 3C3C 0000                  		move.w	#0,d6
00015398 7A0D                       		moveq	#$D,d5
0001539A 6100 FC06                  		bsr.w	FindFloor
0001539E 301F                       		move.w	(sp)+,d0
000153A0 143C 0000                  		move.b	#0,d2
000153A4                            
000153A4                            loc_14DD0:
000153A4 1638 F76A                  		move.b	($FFFFF76A).w,d3
000153A8 B240                       		cmp.w	d0,d1
000153AA 6F00                       		ble.s	loc_14DDE
000153AC 1638 F768                  		move.b	($FFFFF768).w,d3
000153B0 C141                       		exg	d0,d1
000153B2                            
000153B2                            loc_14DDE:
000153B2 0803 0000                  		btst	#0,d3
000153B6 6700                       		beq.s	locret_14DE6
000153B8 1602                       		move.b	d2,d3
000153BA                            
000153BA                            locret_14DE6:
000153BA 4E75                       		rts	
000153BC                            
000153BC                            ; End of function Sonic_HitFloor
000153BC                            
000153BC                            ; ===========================================================================
000153BC 3428 000C                  		move.w	$C(a0),d2
000153C0 3628 0008                  		move.w	8(a0),d3
000153C4                            
000153C4                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000153C4 0642 000A                  		addi.w	#$A,d2
000153C8 49F8 F768                  		lea	($FFFFF768).w,a4
000153CC 367C 0010                  		movea.w	#$10,a3
000153D0 3C3C 0000                  		move.w	#0,d6
000153D4 7A0E                       		moveq	#$E,d5
000153D6 6100 FBCA                  		bsr.w	FindFloor
000153DA 143C 0000                  		move.b	#0,d2
000153DE                            
000153DE                            loc_14E0A:				; XREF: sub_14EB4
000153DE 1638 F768                  		move.b	($FFFFF768).w,d3
000153E2 0803 0000                  		btst	#0,d3
000153E6 6700                       		beq.s	locret_14E16
000153E8 1602                       		move.b	d2,d3
000153EA                            
000153EA                            locret_14E16:
000153EA 4E75                       		rts	
000153EC                            
000153EC                            ; ---------------------------------------------------------------------------
000153EC                            ; Subroutine allowing objects to interact with the floor
000153EC                            ; ---------------------------------------------------------------------------
000153EC                            
000153EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153EC                            
000153EC                            
000153EC                            ObjHitFloor:
000153EC 3628 0008                  		move.w	8(a0),d3
000153F0                            
000153F0                            ; End of function ObjHitFloor
000153F0                            
000153F0                            
000153F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153F0                            
000153F0                            
000153F0                            ObjHitFloor2:
000153F0 3428 000C                  		move.w	$C(a0),d2
000153F4 7000                       		moveq	#0,d0
000153F6 1028 0016                  		move.b	$16(a0),d0
000153FA 4880                       		ext.w	d0
000153FC D440                       		add.w	d0,d2
000153FE 49F8 F768                  		lea	($FFFFF768).w,a4
00015402 18BC 0000                  		move.b	#0,(a4)
00015406 367C 0010                  		movea.w	#$10,a3
0001540A 3C3C 0000                  		move.w	#0,d6
0001540E 7A0D                       		moveq	#$D,d5
00015410 6100 FB90                  		bsr.w	FindFloor
00015414 1638 F768                  		move.b	($FFFFF768).w,d3
00015418 0803 0000                  		btst	#0,d3
0001541C 6700                       		beq.s	locret_14E4E
0001541E 163C 0000                  		move.b	#0,d3
00015422                            
00015422                            locret_14E4E:
00015422 4E75                       		rts	
00015424                            ; End of function ObjHitFloor2
00015424                            
00015424                            
00015424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015424                            
00015424                            
00015424                            sub_14E50:				; XREF: sub_14D48
00015424 3428 000C                  		move.w	$C(a0),d2
00015428 3628 0008                  		move.w	8(a0),d3
0001542C 7000                       		moveq	#0,d0
0001542E 1028 0017                  		move.b	$17(a0),d0
00015432 4880                       		ext.w	d0
00015434 9440                       		sub.w	d0,d2
00015436 1028 0016                  		move.b	$16(a0),d0
0001543A 4880                       		ext.w	d0
0001543C D640                       		add.w	d0,d3
0001543E 49F8 F768                  		lea	($FFFFF768).w,a4
00015442 367C 0010                  		movea.w	#$10,a3
00015446 3C3C 0000                  		move.w	#0,d6
0001544A 7A0E                       		moveq	#$E,d5
0001544C 6100 FC92                  		bsr.w	FindWall
00015450 3F01                       		move.w	d1,-(sp)
00015452 3428 000C                  		move.w	$C(a0),d2
00015456 3628 0008                  		move.w	8(a0),d3
0001545A 7000                       		moveq	#0,d0
0001545C 1028 0017                  		move.b	$17(a0),d0
00015460 4880                       		ext.w	d0
00015462 D440                       		add.w	d0,d2
00015464 1028 0016                  		move.b	$16(a0),d0
00015468 4880                       		ext.w	d0
0001546A D640                       		add.w	d0,d3
0001546C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015470 367C 0010                  		movea.w	#$10,a3
00015474 3C3C 0000                  		move.w	#0,d6
00015478 7A0E                       		moveq	#$E,d5
0001547A 6100 FC64                  		bsr.w	FindWall
0001547E 301F                       		move.w	(sp)+,d0
00015480 143C 00C0                  		move.b	#-$40,d2
00015484 6000 FF1E                  		bra.w	loc_14DD0
00015488                            
00015488                            ; End of function sub_14E50
00015488                            
00015488                            
00015488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015488                            
00015488                            
00015488                            sub_14EB4:				; XREF: Sonic_Floor
00015488 3428 000C                  		move.w	$C(a0),d2
0001548C 3628 0008                  		move.w	8(a0),d3
00015490                            
00015490                            loc_14EBC:
00015490 0643 000A                  		addi.w	#$A,d3
00015494 49F8 F768                  		lea	($FFFFF768).w,a4
00015498 367C 0010                  		movea.w	#$10,a3
0001549C 3C3C 0000                  		move.w	#0,d6
000154A0 7A0E                       		moveq	#$E,d5
000154A2 6100 FC3C                  		bsr.w	FindWall
000154A6 143C 00C0                  		move.b	#-$40,d2
000154AA 6000 FF32                  		bra.w	loc_14E0A
000154AE                            
000154AE                            ; End of function sub_14EB4
000154AE                            
000154AE                            ; ---------------------------------------------------------------------------
000154AE                            ; Subroutine to	detect when an object hits a wall to its right
000154AE                            ; ---------------------------------------------------------------------------
000154AE                            
000154AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154AE                            
000154AE                            
000154AE                            ObjHitWallRight:
000154AE D668 0008                  		add.w	8(a0),d3
000154B2 3428 000C                  		move.w	$C(a0),d2
000154B6 49F8 F768                  		lea	($FFFFF768).w,a4
000154BA 18BC 0000                  		move.b	#0,(a4)
000154BE 367C 0010                  		movea.w	#$10,a3
000154C2 3C3C 0000                  		move.w	#0,d6
000154C6 7A0E                       		moveq	#$E,d5
000154C8 6100 FC16                  		bsr.w	FindWall
000154CC 1638 F768                  		move.b	($FFFFF768).w,d3
000154D0 0803 0000                  		btst	#0,d3
000154D4 6700                       		beq.s	locret_14F06
000154D6 163C 00C0                  		move.b	#-$40,d3
000154DA                            
000154DA                            locret_14F06:
000154DA 4E75                       		rts	
000154DC                            
000154DC                            ; End of function ObjHitWallRight
000154DC                            
000154DC                            ; ---------------------------------------------------------------------------
000154DC                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000154DC                            ; touches them
000154DC                            ; ---------------------------------------------------------------------------
000154DC                            
000154DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154DC                            
000154DC                            
000154DC                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000154DC 3428 000C                  		move.w	$C(a0),d2
000154E0 3628 0008                  		move.w	8(a0),d3
000154E4 7000                       		moveq	#0,d0
000154E6 1028 0016                  		move.b	$16(a0),d0
000154EA 4880                       		ext.w	d0
000154EC 9440                       		sub.w	d0,d2
000154EE 0A42 000F                  		eori.w	#$F,d2
000154F2 1028 0017                  		move.b	$17(a0),d0
000154F6 4880                       		ext.w	d0
000154F8 D640                       		add.w	d0,d3
000154FA 49F8 F768                  		lea	($FFFFF768).w,a4
000154FE 367C FFF0                  		movea.w	#-$10,a3
00015502 3C3C 1000                  		move.w	#$1000,d6
00015506 7A0E                       		moveq	#$E,d5
00015508 6100 FA98                  		bsr.w	FindFloor
0001550C 3F01                       		move.w	d1,-(sp)
0001550E 3428 000C                  		move.w	$C(a0),d2
00015512 3628 0008                  		move.w	8(a0),d3
00015516 7000                       		moveq	#0,d0
00015518 1028 0016                  		move.b	$16(a0),d0
0001551C 4880                       		ext.w	d0
0001551E 9440                       		sub.w	d0,d2
00015520 0A42 000F                  		eori.w	#$F,d2
00015524 1028 0017                  		move.b	$17(a0),d0
00015528 4880                       		ext.w	d0
0001552A 9640                       		sub.w	d0,d3
0001552C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015530 367C FFF0                  		movea.w	#-$10,a3
00015534 3C3C 1000                  		move.w	#$1000,d6
00015538 7A0E                       		moveq	#$E,d5
0001553A 6100 FA66                  		bsr.w	FindFloor
0001553E 301F                       		move.w	(sp)+,d0
00015540 143C 0080                  		move.b	#-$80,d2
00015544 6000 FE5E                  		bra.w	loc_14DD0
00015548                            ; End of function Sonic_DontRunOnWalls
00015548                            
00015548                            ; ===========================================================================
00015548 3428 000C                  		move.w	$C(a0),d2
0001554C 3628 0008                  		move.w	8(a0),d3
00015550                            
00015550                            loc_14F7C:
00015550 0442 000A                  		subi.w	#$A,d2
00015554 0A42 000F                  		eori.w	#$F,d2
00015558 49F8 F768                  		lea	($FFFFF768).w,a4
0001555C 367C FFF0                  		movea.w	#-$10,a3
00015560 3C3C 1000                  		move.w	#$1000,d6
00015564 7A0E                       		moveq	#$E,d5
00015566 6100 FA3A                  		bsr.w	FindFloor
0001556A 143C 0080                  		move.b	#-$80,d2
0001556E 6000 FE6E                  		bra.w	loc_14E0A
00015572                            
00015572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015572                            
00015572                            
00015572                            ObjHitCeiling:
00015572 3428 000C                  		move.w	$C(a0),d2
00015576 3628 0008                  		move.w	8(a0),d3
0001557A 7000                       		moveq	#0,d0
0001557C 1028 0016                  		move.b	$16(a0),d0
00015580 4880                       		ext.w	d0
00015582 9440                       		sub.w	d0,d2
00015584 0A42 000F                  		eori.w	#$F,d2
00015588 49F8 F768                  		lea	($FFFFF768).w,a4
0001558C 367C FFF0                  		movea.w	#-$10,a3
00015590 3C3C 1000                  		move.w	#$1000,d6
00015594 7A0E                       		moveq	#$E,d5
00015596 6100 FA0A                  		bsr.w	FindFloor
0001559A 1638 F768                  		move.b	($FFFFF768).w,d3
0001559E 0803 0000                  		btst	#0,d3
000155A2 6700                       		beq.s	locret_14FD4
000155A4 163C 0080                  		move.b	#-$80,d3
000155A8                            
000155A8                            locret_14FD4:
000155A8 4E75                       		rts	
000155AA                            ; End of function ObjHitCeiling
000155AA                            
000155AA                            ; ===========================================================================
000155AA                            
000155AA                            loc_14FD6:				; XREF: sub_14D48
000155AA 3428 000C                  		move.w	$C(a0),d2
000155AE 3628 0008                  		move.w	8(a0),d3
000155B2 7000                       		moveq	#0,d0
000155B4 1028 0017                  		move.b	$17(a0),d0
000155B8 4880                       		ext.w	d0
000155BA 9440                       		sub.w	d0,d2
000155BC 1028 0016                  		move.b	$16(a0),d0
000155C0 4880                       		ext.w	d0
000155C2 9640                       		sub.w	d0,d3
000155C4 0A43 000F                  		eori.w	#$F,d3
000155C8 49F8 F768                  		lea	($FFFFF768).w,a4
000155CC 367C FFF0                  		movea.w	#-$10,a3
000155D0 3C3C 0800                  		move.w	#$800,d6
000155D4 7A0E                       		moveq	#$E,d5
000155D6 6100 FB08                  		bsr.w	FindWall
000155DA 3F01                       		move.w	d1,-(sp)
000155DC 3428 000C                  		move.w	$C(a0),d2
000155E0 3628 0008                  		move.w	8(a0),d3
000155E4 7000                       		moveq	#0,d0
000155E6 1028 0017                  		move.b	$17(a0),d0
000155EA 4880                       		ext.w	d0
000155EC D440                       		add.w	d0,d2
000155EE 1028 0016                  		move.b	$16(a0),d0
000155F2 4880                       		ext.w	d0
000155F4 9640                       		sub.w	d0,d3
000155F6 0A43 000F                  		eori.w	#$F,d3
000155FA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000155FE 367C FFF0                  		movea.w	#-$10,a3
00015602 3C3C 0800                  		move.w	#$800,d6
00015606 7A0E                       		moveq	#$E,d5
00015608 6100 FAD6                  		bsr.w	FindWall
0001560C 301F                       		move.w	(sp)+,d0
0001560E 143C 0040                  		move.b	#$40,d2
00015612 6000 FD90                  		bra.w	loc_14DD0
00015616                            
00015616                            ; ---------------------------------------------------------------------------
00015616                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015616                            ; ---------------------------------------------------------------------------
00015616                            
00015616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015616                            
00015616                            
00015616                            Sonic_HitWall:				; XREF: Sonic_Floor
00015616 3428 000C                  		move.w	$C(a0),d2
0001561A 3628 0008                  		move.w	8(a0),d3
0001561E                            
0001561E                            loc_1504A:
0001561E 0443 000A                  		subi.w	#$A,d3
00015622 0A43 000F                  		eori.w	#$F,d3
00015626 49F8 F768                  		lea	($FFFFF768).w,a4
0001562A 367C FFF0                  		movea.w	#-$10,a3
0001562E 3C3C 0800                  		move.w	#$800,d6
00015632 7A0E                       		moveq	#$E,d5
00015634 6100 FAAA                  		bsr.w	FindWall
00015638 143C 0040                  		move.b	#$40,d2
0001563C 6000 FDA0                  		bra.w	loc_14E0A
00015640                            ; End of function Sonic_HitWall
00015640                            
00015640                            ; ---------------------------------------------------------------------------
00015640                            ; Subroutine to	detect when an object hits a wall to its left
00015640                            ; ---------------------------------------------------------------------------
00015640                            
00015640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015640                            
00015640                            
00015640                            ObjHitWallLeft:
00015640 D668 0008                  		add.w	8(a0),d3
00015644 3428 000C                  		move.w	$C(a0),d2
00015648 49F8 F768                  		lea	($FFFFF768).w,a4
0001564C 18BC 0000                  		move.b	#0,(a4)
00015650 367C FFF0                  		movea.w	#-$10,a3
00015654 3C3C 0800                  		move.w	#$800,d6
00015658 7A0E                       		moveq	#$E,d5
0001565A 6100 FA84                  		bsr.w	FindWall
0001565E 1638 F768                  		move.b	($FFFFF768).w,d3
00015662 0803 0000                  		btst	#0,d3
00015666 6700                       		beq.s	locret_15098
00015668 163C 0040                  		move.b	#$40,d3
0001566C                            
0001566C                            locret_15098:
0001566C 4E75                       		rts	
0001566E                            ; End of function ObjHitWallLeft
0001566E                            
0001566E                            ; ===========================================================================
0001566E                            ; ---------------------------------------------------------------------------
0001566E                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001566E                            ; ---------------------------------------------------------------------------
0001566E                            
0001566E                            Obj66:					; XREF: Obj_Index
0001566E 7000                       		moveq	#0,d0
00015670 1028 0024                  		move.b	$24(a0),d0
00015674 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015678 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
0001567C                            ; ===========================================================================
0001567C 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001567E 0000                       		dc.w Obj66_Action-Obj66_Index
00015680 0000                       		dc.w Obj66_Display-Obj66_Index
00015682 0000                       		dc.w Obj66_Release-Obj66_Index
00015684                            ; ===========================================================================
00015684                            
00015684                            Obj66_Main:				; XREF: Obj66_Index
00015684 5428 0024                  		addq.b	#2,$24(a0)
00015688 323C 0001                  		move.w	#1,d1
0001568C 2248                       		movea.l	a0,a1
0001568E 6000                       		bra.s	Obj66_MakeItem
00015690                            ; ===========================================================================
00015690                            
00015690                            Obj66_Loop:
00015690 6100 8984                  		bsr.w	SingleObjLoad
00015694 6600                       		bne.s	loc_150FE
00015696 12BC 0066                  		move.b	#$66,0(a1)
0001569A 5829 0024                  		addq.b	#4,$24(a1)
0001569E 3368 0008 0008             		move.w	8(a0),8(a1)
000156A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000156AA 137C 0003 0018             		move.b	#3,$18(a1)
000156B0 137C 0010 001A             		move.b	#$10,$1A(a1)
000156B6                            
000156B6                            Obj66_MakeItem:				; XREF: Obj66_Main
000156B6 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000156BE 337C 4348 0002             		move.w	#$4348,2(a1)
000156C4 0029 0004 0001             		ori.b	#4,1(a1)
000156CA 137C 0038 0019             		move.b	#$38,$19(a1)
000156D0                            
000156D0                            loc_150FE:
000156D0 51C9 FFBE                  		dbf	d1,Obj66_Loop
000156D4                            
000156D4 117C 0030 0019             		move.b	#$30,$19(a0)
000156DA 117C 0004 0018             		move.b	#4,$18(a0)
000156E0 317C 003C 0030             		move.w	#$3C,$30(a0)
000156E6 117C 0001 0034             		move.b	#1,$34(a0)
000156EC 1168 0028 0038             		move.b	$28(a0),$38(a0)
000156F2                            
000156F2                            Obj66_Action:				; XREF: Obj66_Index
000156F2 6100 0000                  		bsr.w	Obj66_ChkSwitch
000156F6 4A28 0001                  		tst.b	1(a0)
000156FA 6A00 0000                  		bpl.w	Obj66_Display
000156FE 323C 0030                  		move.w	#$30,d1
00015702 3401                       		move.w	d1,d2
00015704 3602                       		move.w	d2,d3
00015706 5243                       		addq.w	#1,d3
00015708 3828 0008                  		move.w	8(a0),d4
0001570C 6100 A852                  		bsr.w	SolidObject
00015710 0828 0005 0022             		btst	#5,$22(a0)
00015716 6700 0000                  		beq.w	Obj66_Display
0001571A 43F8 D000                  		lea	($FFFFD000).w,a1
0001571E 720E                       		moveq	#$E,d1
00015720 3029 0008                  		move.w	8(a1),d0
00015724 B068 0008                  		cmp.w	8(a0),d0
00015728 6500                       		bcs.s	Obj66_GrabSonic
0001572A 7207                       		moveq	#7,d1
0001572C                            
0001572C                            Obj66_GrabSonic:
0001572C B228 001A                  		cmp.b	$1A(a0),d1
00015730 6600                       		bne.s	Obj66_Display
00015732 1141 0032                  		move.b	d1,$32(a0)
00015736 5828 0024                  		addq.b	#4,$24(a0)
0001573A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015740 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015746 337C 0800 0014             		move.w	#$800,$14(a1)
0001574C 337C 0000 0010             		move.w	#0,$10(a1)
00015752 337C 0000 0012             		move.w	#0,$12(a1)
00015758 08A8 0005 0022             		bclr	#5,$22(a0)
0001575E 08A9 0005 0022             		bclr	#5,$22(a1)
00015764 08E9 0001 0022             		bset	#1,$22(a1)
0001576A 3429 0008                  		move.w	8(a1),d2
0001576E 3629 000C                  		move.w	$C(a1),d3
00015772 6100 0000                  		bsr.w	Obj66_ChgPos
00015776 D569 0008                  		add.w	d2,8(a1)
0001577A D769 000C                  		add.w	d3,$C(a1)
0001577E E0E9 0008                  		asr	8(a1)
00015782 E0E9 000C                  		asr	$C(a1)
00015786                            
00015786                            Obj66_Display:				; XREF: Obj66_Index
00015786 6000 A4B0                  		bra.w	MarkObjGone
0001578A                            ; ===========================================================================
0001578A                            
0001578A                            Obj66_Release:				; XREF: Obj66_Index
0001578A 1028 001A                  		move.b	$1A(a0),d0
0001578E 0C00 0004                  		cmpi.b	#4,d0
00015792 6700                       		beq.s	loc_151C8
00015794 0C00 0007                  		cmpi.b	#7,d0
00015798 6600                       		bne.s	loc_151F8
0001579A                            
0001579A                            loc_151C8:
0001579A B028 0032                  		cmp.b	$32(a0),d0
0001579E 6700                       		beq.s	loc_151F8
000157A0 43F8 D000                  		lea	($FFFFD000).w,a1
000157A4 337C 0000 0010             		move.w	#0,$10(a1)
000157AA 337C 0800 0012             		move.w	#$800,$12(a1)
000157B0 0C00 0004                  		cmpi.b	#4,d0
000157B4 6700                       		beq.s	loc_151F0
000157B6 337C 0800 0010             		move.w	#$800,$10(a1)
000157BC 337C 0800 0012             		move.w	#$800,$12(a1)
000157C2                            
000157C2                            loc_151F0:
000157C2 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000157C6 5928 0024                  		subq.b	#4,$24(a0)
000157CA                            
000157CA                            loc_151F8:
000157CA 6100                       		bsr.s	Obj66_ChkSwitch
000157CC 6100                       		bsr.s	Obj66_ChgPos
000157CE 6000 A468                  		bra.w	MarkObjGone
000157D2                            
000157D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157D2                            
000157D2                            
000157D2                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000157D2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000157D6 7000                       		moveq	#0,d0
000157D8 1028 0038                  		move.b	$38(a0),d0
000157DC 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000157E2 6700                       		beq.s	loc_15224	; if not, branch
000157E4 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000157E8 6600                       		bne.s	Obj66_Animate	; if yes, branch
000157EA 4428 0034                  		neg.b	$34(a0)
000157EE 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000157F4 6000                       		bra.s	Obj66_Animate
000157F6                            ; ===========================================================================
000157F6                            
000157F6                            loc_15224:
000157F6 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000157FA                            
000157FA                            Obj66_Animate:
000157FA 5328 001E                  		subq.b	#1,$1E(a0)
000157FE 6A00                       		bpl.s	locret_15246
00015800 117C 0007 001E             		move.b	#7,$1E(a0)
00015806 1228 0034                  		move.b	$34(a0),d1
0001580A 1028 001A                  		move.b	$1A(a0),d0
0001580E D001                       		add.b	d1,d0
00015810 0200 000F                  		andi.b	#$F,d0
00015814 1140 001A                  		move.b	d0,$1A(a0)
00015818                            
00015818                            locret_15246:
00015818 4E75                       		rts	
0001581A                            ; End of function Obj66_ChkSwitch
0001581A                            
0001581A                            
0001581A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001581A                            
0001581A                            
0001581A                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001581A 43F8 D000                  		lea	($FFFFD000).w,a1
0001581E 7000                       		moveq	#0,d0
00015820 1028 001A                  		move.b	$1A(a0),d0
00015824 D040                       		add.w	d0,d0
00015826 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001582A 101A                       		move.b	(a2)+,d0
0001582C 4880                       		ext.w	d0
0001582E D068 0008                  		add.w	8(a0),d0
00015832 3340 0008                  		move.w	d0,8(a1)
00015836 101A                       		move.b	(a2)+,d0
00015838 4880                       		ext.w	d0
0001583A D068 000C                  		add.w	$C(a0),d0
0001583E 3340 000C                  		move.w	d0,$C(a1)
00015842 4E75                       		rts	
00015844                            ; End of function Obj66_ChgPos
00015844                            
00015844                            ; ===========================================================================
00015844 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015848 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
0001584C 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015850 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015854 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015858 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
0001585C 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015860 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015864                            ; ---------------------------------------------------------------------------
00015864                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015864                            ; ---------------------------------------------------------------------------
00015864                            Map_obj66:
00015864                            	include "_maps\obj66.asm"
00015864                            ; ---------------------------------------------------------------------------
00015864                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015864                            ; ---------------------------------------------------------------------------
00015864 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015868 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
0001586C 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015870 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015874 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015878 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
0001587C 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015880 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015884 0000                       		dc.w byte_154A4-Map_obj66
00015886 06                         byte_152B4:	dc.b 6
00015887 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
0001588C 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015891 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015896 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001589B 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000158A0 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000158A5 06                         byte_152D3:	dc.b 6
000158A6 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000158AB 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000158B0 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000158B5 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000158BA 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000158BF 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000158C4 06                         byte_152F2:	dc.b 6
000158C5 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000158CA 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000158CF 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000158D4 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000158D9 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000158DE 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000158E3 06                         byte_15311:	dc.b 6
000158E4 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000158E9 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000158EE 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000158F3 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000158F8 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000158FD 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015902 06                         byte_15330:	dc.b 6
00015903 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015908 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001590D 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015912 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015917 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001591C 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015921 06                         byte_1534F:	dc.b 6
00015922 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015927 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001592C 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015931 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015936 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001593B 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015940 06                         byte_1536E:	dc.b 6
00015941 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015946 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001594B 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015950 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015955 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001595A 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001595F 06                         byte_1538D:	dc.b 6
00015960 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015965 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001596A F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001596F F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015974 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015979 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001597E 06                         byte_153AC:	dc.b 6
0001597F E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015984 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015989 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001598E E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015993 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015998 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
0001599D 06                         byte_153CB:	dc.b 6
0001599E D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000159A3 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000159A8 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000159AD DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000159B2 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000159B7 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000159BC 06                         byte_153EA:	dc.b 6
000159BD D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000159C2 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000159C7 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000159CC D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000159D1 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000159D6 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000159DB 06                         byte_15409:	dc.b 6
000159DC D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000159E1 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000159E6 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000159EB CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000159F0 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000159F5 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000159FA 06                         byte_15428:	dc.b 6
000159FB D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015A00 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015A05 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015A0A C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015A0F E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015A14 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015A19 06                         byte_15447:	dc.b 6
00015A1A D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015A1F D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015A24 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015A29 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015A2E E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015A33 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015A38 06                         byte_15466:	dc.b 6
00015A39 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015A3E D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015A43 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015A48 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015A4D E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015A52 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015A57 06                         byte_15485:	dc.b 6
00015A58 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015A5D D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015A62 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015A67 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015A6C F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015A71 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015A76 0C                         byte_154A4:	dc.b $C
00015A77 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015A7C D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015A81 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015A86 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015A8B D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015A90 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015A95 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015A9A 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015A9F 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015AA4 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015AA9 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015AAE 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015AB4 00                         		even
00015AB4 00                         		even
00015AB4                            
00015AB4                            ; ===========================================================================
00015AB4                            ; ---------------------------------------------------------------------------
00015AB4                            ; Object 67 - disc that	you run	around (SBZ)
00015AB4                            ; ---------------------------------------------------------------------------
00015AB4                            
00015AB4                            Obj67:					; XREF: Obj_Index
00015AB4 7000                       		moveq	#0,d0
00015AB6 1028 0024                  		move.b	$24(a0),d0
00015ABA 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015ABE 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015AC2                            ; ===========================================================================
00015AC2 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015AC4 0000                       		dc.w Obj67_Action-Obj67_Index
00015AC6                            ; ===========================================================================
00015AC6                            
00015AC6                            Obj67_Main:				; XREF: Obj67_Index
00015AC6 5428 0024                  		addq.b	#2,$24(a0)
00015ACA 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015AD2 317C C344 0002             		move.w	#$C344,2(a0)
00015AD8 117C 0004 0001             		move.b	#4,1(a0)
00015ADE 117C 0004 0018             		move.b	#4,$18(a0)
00015AE4 117C 0008 0019             		move.b	#8,$19(a0)
00015AEA 3168 0008 0032             		move.w	8(a0),$32(a0)
00015AF0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015AF6 117C 0018 0034             		move.b	#$18,$34(a0)
00015AFC 117C 0048 0038             		move.b	#$48,$38(a0)
00015B02 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B06 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B0A 6700                       		beq.s	loc_15546
00015B0C 117C 0010 0034             		move.b	#$10,$34(a0)
00015B12 117C 0038 0038             		move.b	#$38,$38(a0)
00015B18                            
00015B18                            loc_15546:
00015B18 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B1C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B20 4881                       		ext.w	d1
00015B22 E741                       		asl.w	#3,d1
00015B24 3141 0036                  		move.w	d1,$36(a0)
00015B28 1028 0022                  		move.b	$22(a0),d0
00015B2C E418                       		ror.b	#2,d0
00015B2E 0200 00C0                  		andi.b	#-$40,d0
00015B32 1140 0026                  		move.b	d0,$26(a0)
00015B36                            
00015B36                            Obj67_Action:				; XREF: Obj67_Index
00015B36 6100 0000                  		bsr.w	Obj67_MoveSonic
00015B3A 6100 0000                  		bsr.w	Obj67_MoveSpot
00015B3E 6000 0000                  		bra.w	Obj67_ChkDel
00015B42                            ; ===========================================================================
00015B42                            
00015B42                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015B42 7400                       		moveq	#0,d2
00015B44 1428 0038                  		move.b	$38(a0),d2
00015B48 3602                       		move.w	d2,d3
00015B4A D643                       		add.w	d3,d3
00015B4C 43F8 D000                  		lea	($FFFFD000).w,a1
00015B50 3029 0008                  		move.w	8(a1),d0
00015B54 9068 0032                  		sub.w	$32(a0),d0
00015B58 D042                       		add.w	d2,d0
00015B5A B043                       		cmp.w	d3,d0
00015B5C 6400                       		bcc.s	loc_155A8
00015B5E 3229 000C                  		move.w	$C(a1),d1
00015B62 9268 0030                  		sub.w	$30(a0),d1
00015B66 D242                       		add.w	d2,d1
00015B68 B243                       		cmp.w	d3,d1
00015B6A 6400                       		bcc.s	loc_155A8
00015B6C 0829 0001 0022             		btst	#1,$22(a1)
00015B72 6700                       		beq.s	loc_155B8
00015B74 4228 003A                  		clr.b	$3A(a0)
00015B78 4E75                       		rts	
00015B7A                            ; ===========================================================================
00015B7A                            
00015B7A                            loc_155A8:
00015B7A 4A28 003A                  		tst.b	$3A(a0)
00015B7E 6700                       		beq.s	locret_155B6
00015B80 4229 0038                  		clr.b	$38(a1)
00015B84 4228 003A                  		clr.b	$3A(a0)
00015B88                            
00015B88                            locret_155B6:
00015B88 4E75                       		rts	
00015B8A                            ; ===========================================================================
00015B8A                            
00015B8A                            loc_155B8:
00015B8A 4A28 003A                  		tst.b	$3A(a0)
00015B8E 6600                       		bne.s	loc_155E2
00015B90 117C 0001 003A             		move.b	#1,$3A(a0)
00015B96 0829 0002 0022             		btst	#2,$22(a1)
00015B9C 6600                       		bne.s	loc_155D0
00015B9E 4229 001C                  		clr.b	$1C(a1)
00015BA2                            
00015BA2                            loc_155D0:
00015BA2 08A9 0005 0022             		bclr	#5,$22(a1)
00015BA8 137C 0001 001D             		move.b	#1,$1D(a1)
00015BAE 137C 0001 0038             		move.b	#1,$38(a1)
00015BB4                            
00015BB4                            loc_155E2:
00015BB4 3029 0014                  		move.w	$14(a1),d0
00015BB8 4A68 0036                  		tst.w	$36(a0)
00015BBC 6A00                       		bpl.s	loc_15608
00015BBE 0C40 FC00                  		cmpi.w	#-$400,d0
00015BC2 6F00                       		ble.s	loc_155FA
00015BC4 337C FC00 0014             		move.w	#-$400,$14(a1)
00015BCA 4E75                       		rts	
00015BCC                            ; ===========================================================================
00015BCC                            
00015BCC                            loc_155FA:
00015BCC 0C40 F100                  		cmpi.w	#-$F00,d0
00015BD0 6C00                       		bge.s	locret_15606
00015BD2 337C F100 0014             		move.w	#-$F00,$14(a1)
00015BD8                            
00015BD8                            locret_15606:
00015BD8 4E75                       		rts	
00015BDA                            ; ===========================================================================
00015BDA                            
00015BDA                            loc_15608:
00015BDA 0C40 0400                  		cmpi.w	#$400,d0
00015BDE 6C00                       		bge.s	loc_15616
00015BE0 337C 0400 0014             		move.w	#$400,$14(a1)
00015BE6 4E75                       		rts	
00015BE8                            ; ===========================================================================
00015BE8                            
00015BE8                            loc_15616:
00015BE8 0C40 0F00                  		cmpi.w	#$F00,d0
00015BEC 6F00                       		ble.s	locret_15622
00015BEE 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015BF4                            
00015BF4                            locret_15622:
00015BF4 4E75                       		rts	
00015BF6                            ; ===========================================================================
00015BF6                            
00015BF6                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015BF6 3028 0036                  		move.w	$36(a0),d0
00015BFA D168 0026                  		add.w	d0,$26(a0)
00015BFE 1028 0026                  		move.b	$26(a0),d0
00015C02 4EB9 0000 2C22             		jsr	(CalcSine).l
00015C08 3428 0030                  		move.w	$30(a0),d2
00015C0C 3628 0032                  		move.w	$32(a0),d3
00015C10 7800                       		moveq	#0,d4
00015C12 1828 0034                  		move.b	$34(a0),d4
00015C16 E14C                       		lsl.w	#8,d4
00015C18 2A04                       		move.l	d4,d5
00015C1A C9C0                       		muls.w	d0,d4
00015C1C 4844                       		swap	d4
00015C1E CBC1                       		muls.w	d1,d5
00015C20 4845                       		swap	d5
00015C22 D842                       		add.w	d2,d4
00015C24 DA43                       		add.w	d3,d5
00015C26 3144 000C                  		move.w	d4,$C(a0)
00015C2A 3145 0008                  		move.w	d5,8(a0)
00015C2E 4E75                       		rts	
00015C30                            ; ===========================================================================
00015C30                            
00015C30                            Obj67_ChkDel:				; XREF: Obj67_Action
00015C30 3028 0032                  		move.w	$32(a0),d0
00015C34 0240 FF80                  		andi.w	#-$80,d0
00015C38 3238 F700                  		move.w	($FFFFF700).w,d1
00015C3C 0441 0080                  		subi.w	#$80,d1
00015C40 0241 FF80                  		andi.w	#-$80,d1
00015C44 9041                       		sub.w	d1,d0
00015C46 0C40 0280                  		cmpi.w	#$280,d0
00015C4A 6200                       		bhi.s	Obj67_Delete
00015C4C 4EF9 0000 DB90             		jmp	DisplaySprite
00015C52                            ; ===========================================================================
00015C52                            
00015C52                            Obj67_Delete:
00015C52 4EF9 0000 DBCC             		jmp	DeleteObject
00015C58                            ; ===========================================================================
00015C58                            ; ---------------------------------------------------------------------------
00015C58                            ; Sprite mappings - disc that you run around (SBZ)
00015C58                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C58                            ; part of the level tiles.)
00015C58                            ; ---------------------------------------------------------------------------
00015C58                            Map_obj67:
00015C58                            	include "_maps\obj67.asm"
00015C58                            ; ---------------------------------------------------------------------------
00015C58                            ; Sprite mappings - disc that you run around (SBZ)
00015C58                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C58                            ; part of the level tiles.)
00015C58                            ; ---------------------------------------------------------------------------
00015C58 0000                       		dc.w byte_15688-Map_obj67
00015C5A 01                         byte_15688:	dc.b 1
00015C5B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015C60                            		even
00015C60                            		even
00015C60                            
00015C60                            ; ===========================================================================
00015C60                            ; ---------------------------------------------------------------------------
00015C60                            ; Object 68 - conveyor belts (SBZ)
00015C60                            ; ---------------------------------------------------------------------------
00015C60                            
00015C60                            Obj68:					; XREF: Obj_Index
00015C60 7000                       		moveq	#0,d0
00015C62 1028 0024                  		move.b	$24(a0),d0
00015C66 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015C6A 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015C6E                            ; ===========================================================================
00015C6E 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015C70 0000                       		dc.w Obj68_Action-Obj68_Index
00015C72                            ; ===========================================================================
00015C72                            
00015C72                            Obj68_Main:				; XREF: Obj68_Index
00015C72 5428 0024                  		addq.b	#2,$24(a0)
00015C76 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015C7C 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C80 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015C84 6700                       		beq.s	loc_156BA	; if zero, branch
00015C86 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015C8C                            
00015C8C                            loc_156BA:
00015C8C 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C90 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015C94 4881                       		ext.w	d1
00015C96 E841                       		asr.w	#4,d1
00015C98 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015C9C                            
00015C9C                            Obj68_Action:				; XREF: Obj68_Index
00015C9C 6100                       		bsr.s	Obj68_MoveSonic
00015C9E 3028 0008                  		move.w	8(a0),d0
00015CA2 0240 FF80                  		andi.w	#$FF80,d0
00015CA6 3238 F700                  		move.w	($FFFFF700).w,d1
00015CAA 0441 0080                  		subi.w	#$80,d1
00015CAE 0241 FF80                  		andi.w	#$FF80,d1
00015CB2 9041                       		sub.w	d1,d0
00015CB4 0C40 0280                  		cmpi.w	#$280,d0
00015CB8 6200                       		bhi.s	Obj68_Delete
00015CBA 4E75                       		rts	
00015CBC                            ; ===========================================================================
00015CBC                            
00015CBC                            Obj68_Delete:
00015CBC 4EF9 0000 DBCC             		jmp	DeleteObject
00015CC2                            ; ===========================================================================
00015CC2                            
00015CC2                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015CC2 7400                       		moveq	#0,d2
00015CC4 1428 0038                  		move.b	$38(a0),d2
00015CC8 3602                       		move.w	d2,d3
00015CCA D643                       		add.w	d3,d3
00015CCC 43F8 D000                  		lea	($FFFFD000).w,a1
00015CD0 3029 0008                  		move.w	8(a1),d0
00015CD4 9068 0008                  		sub.w	8(a0),d0
00015CD8 D042                       		add.w	d2,d0
00015CDA B043                       		cmp.w	d3,d0
00015CDC 6400                       		bcc.s	locret_1572E
00015CDE 3229 000C                  		move.w	$C(a1),d1
00015CE2 9268 000C                  		sub.w	$C(a0),d1
00015CE6 0641 0030                  		addi.w	#$30,d1
00015CEA 0C41 0030                  		cmpi.w	#$30,d1
00015CEE 6400                       		bcc.s	locret_1572E
00015CF0 0829 0001 0022             		btst	#1,$22(a1)
00015CF6 6600                       		bne.s	locret_1572E
00015CF8 3028 0036                  		move.w	$36(a0),d0
00015CFC D169 0008                  		add.w	d0,8(a1)
00015D00                            
00015D00                            locret_1572E:
00015D00 4E75                       		rts	
00015D02                            
00015D02                            ; ===========================================================================
00015D02                            ; ---------------------------------------------------------------------------
00015D02                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015D02                            ; ---------------------------------------------------------------------------
00015D02                            
00015D02                            Obj69:					; XREF: Obj_Index
00015D02 7000                       		moveq	#0,d0
00015D04 1028 0024                  		move.b	$24(a0),d0
00015D08 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015D0C 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015D10                            ; ===========================================================================
00015D10 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015D12 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015D14 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015D16                            ; ===========================================================================
00015D16                            
00015D16                            Obj69_Main:				; XREF: Obj69_Index
00015D16 5428 0024                  		addq.b	#2,$24(a0)
00015D1A 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015D22 317C 4492 0002             		move.w	#$4492,2(a0)
00015D28 0028 0004 0001             		ori.b	#4,1(a0)
00015D2E 117C 0080 0019             		move.b	#$80,$19(a0)
00015D34 7000                       		moveq	#0,d0
00015D36 1028 0028                  		move.b	$28(a0),d0
00015D3A 0240 000F                  		andi.w	#$F,d0
00015D3E C0FC 003C                  		mulu.w	#$3C,d0
00015D42 3140 0032                  		move.w	d0,$32(a0)
00015D46 4A28 0028                  		tst.b	$28(a0)
00015D4A 6A00                       		bpl.s	Obj69_Trapdoor
00015D4C 5428 0024                  		addq.b	#2,$24(a0)
00015D50 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015D58 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015D5E 117C 0010 0019             		move.b	#$10,$19(a0)
00015D64 117C 0002 001C             		move.b	#2,$1C(a0)
00015D6A 7000                       		moveq	#0,d0
00015D6C 1028 0028                  		move.b	$28(a0),d0	; get object type
00015D70 3200                       		move.w	d0,d1
00015D72 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015D76 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015D7A 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015D7E 3140 0032                  		move.w	d0,$32(a0)
00015D82 0241 0070                  		andi.w	#$70,d1
00015D86 0641 0010                  		addi.w	#$10,d1
00015D8A E549                       		lsl.w	#2,d1
00015D8C 5341                       		subq.w	#1,d1
00015D8E 3141 0036                  		move.w	d1,$36(a0)
00015D92 6000                       		bra.s	Obj69_Spinner
00015D94                            ; ===========================================================================
00015D94                            
00015D94                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015D94 5368 0030                  		subq.w	#1,$30(a0)
00015D98 6A00                       		bpl.s	Obj69_Animate
00015D9A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015DA0 0868 0000 001C             		bchg	#0,$1C(a0)
00015DA6 4A28 0001                  		tst.b	1(a0)
00015DAA 6A00                       		bpl.s	Obj69_Animate
00015DAC 303C 00BB                  		move.w	#$BB,d0
00015DB0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015DB6                            
00015DB6                            Obj69_Animate:
00015DB6 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015DBC 4EB9 0000 AC66             		jsr	AnimateSprite
00015DC2 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015DC6 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015DC8 323C 004B                  		move.w	#$4B,d1
00015DCC 343C 000C                  		move.w	#$C,d2
00015DD0 3602                       		move.w	d2,d3
00015DD2 5243                       		addq.w	#1,d3
00015DD4 3828 0008                  		move.w	8(a0),d4
00015DD8 6100 A186                  		bsr.w	SolidObject
00015DDC 6000 9E5A                  		bra.w	MarkObjGone
00015DE0                            ; ===========================================================================
00015DE0                            
00015DE0                            Obj69_NotSolid:
00015DE0 0828 0003 0022             		btst	#3,$22(a0)
00015DE6 6700                       		beq.s	Obj69_Display
00015DE8 43F8 D000                  		lea	($FFFFD000).w,a1
00015DEC 08A9 0003 0022             		bclr	#3,$22(a1)
00015DF2 08A8 0003 0022             		bclr	#3,$22(a0)
00015DF8 4228 0025                  		clr.b	$25(a0)
00015DFC                            
00015DFC                            Obj69_Display:
00015DFC 6000 9E3A                  		bra.w	MarkObjGone
00015E00                            ; ===========================================================================
00015E00                            
00015E00                            Obj69_Spinner:				; XREF: Obj69_Index
00015E00 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E04 C068 0036                  		and.w	$36(a0),d0
00015E08 6600                       		bne.s	Obj69_Delay
00015E0A 117C 0001 0034             		move.b	#1,$34(a0)
00015E10                            
00015E10                            Obj69_Delay:
00015E10 4A28 0034                  		tst.b	$34(a0)
00015E14 6700                       		beq.s	Obj69_Animate2
00015E16 5368 0030                  		subq.w	#1,$30(a0)
00015E1A 6A00                       		bpl.s	Obj69_Animate2
00015E1C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E22 4228 0034                  		clr.b	$34(a0)
00015E26 0868 0000 001C             		bchg	#0,$1C(a0)
00015E2C                            
00015E2C                            Obj69_Animate2:
00015E2C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E32 4EB9 0000 AC66             		jsr	AnimateSprite
00015E38 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015E3C 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015E3E 323C 001B                  		move.w	#$1B,d1
00015E42 343C 0007                  		move.w	#7,d2
00015E46 3602                       		move.w	d2,d3
00015E48 5243                       		addq.w	#1,d3
00015E4A 3828 0008                  		move.w	8(a0),d4
00015E4E 6100 A110                  		bsr.w	SolidObject
00015E52 6000 9DE4                  		bra.w	MarkObjGone
00015E56                            ; ===========================================================================
00015E56                            
00015E56                            Obj69_NotSolid2:
00015E56 0828 0003 0022             		btst	#3,$22(a0)
00015E5C 6700                       		beq.s	Obj69_Display2
00015E5E 43F8 D000                  		lea	($FFFFD000).w,a1
00015E62 08A9 0003 0022             		bclr	#3,$22(a1)
00015E68 08A8 0003 0022             		bclr	#3,$22(a0)
00015E6E 4228 0025                  		clr.b	$25(a0)
00015E72                            
00015E72                            Obj69_Display2:
00015E72 6000 9DC4                  		bra.w	MarkObjGone
00015E76                            ; ===========================================================================
00015E76                            Ani_obj69:
00015E76                            	include "_anim\obj69.asm"
00015E76                            ; ---------------------------------------------------------------------------
00015E76                            ; Animation script - trapdoor (SBZ)
00015E76                            ; ---------------------------------------------------------------------------
00015E76 0000                       		dc.w byte_158AC-Ani_obj69
00015E78 0000                       		dc.w byte_158B2-Ani_obj69
00015E7A 0000                       		dc.w byte_158B8-Ani_obj69
00015E7C 0000                       		dc.w byte_158CC-Ani_obj69
00015E7E 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015E84 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015E8A 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015E97 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015E9E 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EAB 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EB2                            		even
00015EB2                            		even
00015EB2                            
00015EB2                            ; ---------------------------------------------------------------------------
00015EB2                            ; Sprite mappings - trapdoor (SBZ)
00015EB2                            ; ---------------------------------------------------------------------------
00015EB2                            Map_obj69:
00015EB2                            	include "_maps\obj69.asm"
00015EB2                            ; ---------------------------------------------------------------------------
00015EB2                            ; Sprite mappings - trapdoor (SBZ)
00015EB2                            ; ---------------------------------------------------------------------------
00015EB2 0000                       		dc.w byte_158E6-Map_obj69
00015EB4 0000                       		dc.w byte_158FB-Map_obj69
00015EB6 0000                       		dc.w byte_15924-Map_obj69
00015EB8 04                         byte_158E6:	dc.b 4
00015EB9 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015EBE F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015EC3 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015EC8 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015ECD 08                         byte_158FB:	dc.b 8
00015ECE F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015ED3 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015ED8 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015EDD 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015EE2 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015EE7 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015EEC 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015EF1 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015EF6 04                         byte_15924:	dc.b 4
00015EF7 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015EFC 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015F01 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015F06 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015F0C 00                         		even
00015F0C 00                         		even
00015F0C                            
00015F0C                            ; ---------------------------------------------------------------------------
00015F0C                            ; Sprite mappings - spinning platforms (SBZ)
00015F0C                            ; ---------------------------------------------------------------------------
00015F0C                            Map_obj69a:
00015F0C                            	include "_maps\obj69a.asm"
00015F0C                            ; ---------------------------------------------------------------------------
00015F0C                            ; Sprite mappings - spinning platforms (SBZ)
00015F0C                            ; ---------------------------------------------------------------------------
00015F0C 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015F10 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015F14 0000                       		dc.w byte_15970-Map_obj69a
00015F16 02                         byte_15944:	dc.b 2
00015F17 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015F1C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015F21 02                         byte_1594F:	dc.b 2
00015F22 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015F27 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015F2C 02                         byte_1595A:	dc.b 2
00015F2D F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015F32 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015F37 02                         byte_15965:	dc.b 2
00015F38 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015F3D 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015F42 02                         byte_15970:	dc.b 2
00015F43 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015F48 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015F4E 00                         		even
00015F4E 00                         		even
00015F4E                            
00015F4E                            ; ===========================================================================
00015F4E                            ; ---------------------------------------------------------------------------
00015F4E                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015F4E                            ; ---------------------------------------------------------------------------
00015F4E                            
00015F4E                            Obj6A:					; XREF: Obj_Index
00015F4E 7000                       		moveq	#0,d0
00015F50 1028 0024                  		move.b	$24(a0),d0
00015F54 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015F58 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015F5C                            ; ===========================================================================
00015F5C 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015F5E 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015F60                            ; ===========================================================================
00015F60                            
00015F60                            Obj6A_Main:				; XREF: Obj6A_Index
00015F60 5428 0024                  		addq.b	#2,$24(a0)
00015F64 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015F6C 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015F72 117C 0004 0001             		move.b	#4,1(a0)
00015F78 117C 0004 0018             		move.b	#4,$18(a0)
00015F7E 117C 0020 0019             		move.b	#$20,$19(a0)
00015F84 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015F8A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015F90 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015F96 6400                       		bcc.s	Obj6A_Action
00015F98 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015F9E                            
00015F9E                            Obj6A_Action:				; XREF: Obj6A_Index
00015F9E 7000                       		moveq	#0,d0
00015FA0 1028 0028                  		move.b	$28(a0),d0
00015FA4 0240 0007                  		andi.w	#7,d0
00015FA8 D040                       		add.w	d0,d0
00015FAA 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015FAE 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015FB2 3028 003A                  		move.w	$3A(a0),d0
00015FB6 0240 FF80                  		andi.w	#$FF80,d0
00015FBA 3238 F700                  		move.w	($FFFFF700).w,d1
00015FBE 0441 0080                  		subi.w	#$80,d1
00015FC2 0241 FF80                  		andi.w	#$FF80,d1
00015FC6 9041                       		sub.w	d1,d0
00015FC8 0C40 0280                  		cmpi.w	#$280,d0
00015FCC 6200                       		bhi.s	Obj6A_Delete
00015FCE 4EF9 0000 DB90             		jmp	DisplaySprite
00015FD4                            ; ===========================================================================
00015FD4                            
00015FD4                            Obj6A_Delete:
00015FD4 4EF9 0000 DBCC             		jmp	DeleteObject
00015FDA                            ; ===========================================================================
00015FDA 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015FDE 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015FE2 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015FE4                            ; ===========================================================================
00015FE4                            
00015FE4                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015FE4 4E75                       		rts	
00015FE6                            ; ===========================================================================
00015FE6                            
00015FE6                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015FE6 323C 0060                  		move.w	#$60,d1
00015FEA 7000                       		moveq	#0,d0
00015FEC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015FF0 0828 0000 0022             		btst	#0,$22(a0)
00015FF6 6700                       		beq.s	Obj6A_Animate01
00015FF8 4440                       		neg.w	d0
00015FFA D041                       		add.w	d1,d0
00015FFC                            
00015FFC                            Obj6A_Animate01:
00015FFC 3228 003A                  		move.w	$3A(a0),d1
00016000 9240                       		sub.w	d0,d1
00016002 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016006 5328 001E                  		subq.b	#1,$1E(a0)
0001600A 6A00                       		bpl.s	loc_15A46
0001600C 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016012 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016018                            
00016018                            loc_15A46:
00016018 4A28 0001                  		tst.b	1(a0)
0001601C 6A00                       		bpl.s	locret_15A60
0001601E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016022 0240 000F                  		andi.w	#$F,d0
00016026 6600                       		bne.s	locret_15A60
00016028 303C 00B0                  		move.w	#$B0,d0
0001602C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016032                            
00016032                            locret_15A60:
00016032 4E75                       		rts	
00016034                            ; ===========================================================================
00016034                            
00016034                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016034 323C 0030                  		move.w	#$30,d1
00016038 7000                       		moveq	#0,d0
0001603A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001603E 0828 0000 0022             		btst	#0,$22(a0)
00016044 6700                       		beq.s	Obj6A_Animate02
00016046 4440                       		neg.w	d0
00016048 0640 0080                  		addi.w	#$80,d0
0001604C                            
0001604C                            Obj6A_Animate02:
0001604C 3228 0038                  		move.w	$38(a0),d1
00016050 9240                       		sub.w	d0,d1
00016052 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016056 5328 001E                  		subq.b	#1,$1E(a0)
0001605A 6A00                       		bpl.s	loc_15A96
0001605C 117C 0002 001E             		move.b	#2,$1E(a0)
00016062 0868 0000 001A             		bchg	#0,$1A(a0)
00016068                            
00016068                            loc_15A96:
00016068 4A28 0001                  		tst.b	1(a0)
0001606C 6A00                       		bpl.s	locret_15AB0
0001606E 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016072 0C00 0018                  		cmpi.b	#$18,d0
00016076 6600                       		bne.s	locret_15AB0
00016078 303C 00B0                  		move.w	#$B0,d0
0001607C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016082                            
00016082                            locret_15AB0:
00016082 4E75                       		rts	
00016084                            ; ===========================================================================
00016084                            
00016084                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016084 4A28 003D                  		tst.b	$3D(a0)
00016088 6600                       		bne.s	Obj6A_Animate03
0001608A 3038 D008                  		move.w	($FFFFD008).w,d0
0001608E 0440 00C0                  		subi.w	#$C0,d0
00016092 6500                       		bcs.s	loc_15B02
00016094 9068 0008                  		sub.w	8(a0),d0
00016098 6500                       		bcs.s	loc_15B02
0001609A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001609E 0440 0080                  		subi.w	#$80,d0
000160A2 B068 000C                  		cmp.w	$C(a0),d0
000160A6 6400                       		bcc.s	locret_15B04
000160A8 0640 0100                  		addi.w	#$100,d0
000160AC B068 000C                  		cmp.w	$C(a0),d0
000160B0 6500                       		bcs.s	locret_15B04
000160B2 117C 0001 003D             		move.b	#1,$3D(a0)
000160B8 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000160BE 117C 00A2 0020             		move.b	#$A2,$20(a0)
000160C4 117C 0002 001A             		move.b	#2,$1A(a0)
000160CA 303C 00B0                  		move.w	#$B0,d0
000160CE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160D4                            
000160D4                            loc_15B02:
000160D4 588F                       		addq.l	#4,sp
000160D6                            
000160D6                            locret_15B04:
000160D6 4E75                       		rts	
000160D8                            ; ===========================================================================
000160D8                            
000160D8                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000160D8 4EB9 0000 DB6A             		jsr	SpeedToPos
000160DE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000160E4 5328 001E                  		subq.b	#1,$1E(a0)
000160E8 6A00                       		bpl.s	locret_15B24
000160EA 117C 0002 001E             		move.b	#2,$1E(a0)
000160F0 0868 0000 001A             		bchg	#0,$1A(a0)
000160F6                            
000160F6                            locret_15B24:
000160F6 4E75                       		rts	
000160F8                            ; ===========================================================================
000160F8                            
000160F8                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000160F8 4A28 003D                  		tst.b	$3D(a0)
000160FC 6600                       		bne.s	Obj6A_Animate04
000160FE 3038 D008                  		move.w	($FFFFD008).w,d0
00016102 0640 00E0                  		addi.w	#$E0,d0
00016106 9068 0008                  		sub.w	8(a0),d0
0001610A 6400                       		bcc.s	loc_15B74
0001610C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016110 0440 0080                  		subi.w	#$80,d0
00016114 B068 000C                  		cmp.w	$C(a0),d0
00016118 6400                       		bcc.s	locret_15B76
0001611A 0640 0100                  		addi.w	#$100,d0
0001611E B068 000C                  		cmp.w	$C(a0),d0
00016122 6500                       		bcs.s	locret_15B76
00016124 117C 0001 003D             		move.b	#1,$3D(a0)
0001612A 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016130 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016136 117C 0002 001A             		move.b	#2,$1A(a0)
0001613C 303C 00B0                  		move.w	#$B0,d0
00016140 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016146                            
00016146                            loc_15B74:
00016146 588F                       		addq.l	#4,sp
00016148                            
00016148                            locret_15B76:
00016148 4E75                       		rts	
0001614A                            ; ===========================================================================
0001614A                            
0001614A                            Obj6A_Animate04:
0001614A 4EB9 0000 DB6A             		jsr	SpeedToPos
00016150 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016156 5328 001E                  		subq.b	#1,$1E(a0)
0001615A 6A00                       		bpl.s	locret_15B96
0001615C 117C 0002 001E             		move.b	#2,$1E(a0)
00016162 0868 0000 001A             		bchg	#0,$1A(a0)
00016168                            
00016168                            locret_15B96:
00016168 4E75                       		rts	
0001616A                            ; ===========================================================================
0001616A                            ; ---------------------------------------------------------------------------
0001616A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001616A                            ; ---------------------------------------------------------------------------
0001616A                            Map_obj6A:
0001616A                            	include "_maps\obj6A.asm"
0001616A                            ; ---------------------------------------------------------------------------
0001616A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001616A                            ; ---------------------------------------------------------------------------
0001616A 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001616E 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016172 07                         byte_15BA0:	dc.b 7
00016173 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016178 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001617D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016182 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016187 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001618C 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016191 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016196 07                         byte_15BC4:	dc.b 7
00016197 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001619C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161A1 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161A6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161AB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161B0 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161B5 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161BA 04                         byte_15BE8:	dc.b 4
000161BB E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161C0 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161C5 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161CA 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161CF 04                         byte_15BFD:	dc.b 4
000161D0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161D5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161DA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161DF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161E4                            		even
000161E4                            		even
000161E4                            
000161E4                            ; ===========================================================================
000161E4                            ; ---------------------------------------------------------------------------
000161E4                            ; Object 6B - stomper (SBZ)
000161E4                            ; ---------------------------------------------------------------------------
000161E4                            
000161E4                            Obj6B:					; XREF: Obj_Index
000161E4 7000                       		moveq	#0,d0
000161E6 1028 0024                  		move.b	$24(a0),d0
000161EA 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000161EE 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000161F2                            ; ===========================================================================
000161F2 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000161F4 0000                       		dc.w Obj6B_Action-Obj6B_Index
000161F6                            
000161F6 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000161FA 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000161FE 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016202 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016206 8040 0005                  		dc.b  $80, $40,	  0,   5
0001620A                            ; ===========================================================================
0001620A                            
0001620A                            Obj6B_Main:				; XREF: Obj6B_Index
0001620A 5428 0024                  		addq.b	#2,$24(a0)
0001620E 7000                       		moveq	#0,d0
00016210 1028 0028                  		move.b	$28(a0),d0
00016214 E448                       		lsr.w	#2,d0
00016216 0240 001C                  		andi.w	#$1C,d0
0001621A 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001621E 115B 0019                  		move.b	(a3)+,$19(a0)
00016222 115B 0016                  		move.b	(a3)+,$16(a0)
00016226 E448                       		lsr.w	#2,d0
00016228 1140 001A                  		move.b	d0,$1A(a0)
0001622C 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016234 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001623A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016240 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016242 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016248 6700                       		beq.s	Obj6B_SBZ3
0001624A                            
0001624A                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001624A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001624E 7000                       		moveq	#0,d0
00016250 1028 0023                  		move.b	$23(a0),d0
00016254 6700                       		beq.s	Obj6B_Delete
00016256 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001625C                            
0001625C                            Obj6B_Delete:
0001625C 4EF9 0000 DBCC             		jmp	DeleteObject
00016262                            ; ===========================================================================
00016262                            
00016262                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016262 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016268 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001626E 6600                       		bne.s	Obj6B_SBZ12
00016270 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016274 7000                       		moveq	#0,d0
00016276 1028 0023                  		move.b	$23(a0),d0
0001627A 6700                       		beq.s	Obj6B_SBZ12
0001627C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016282 6700                       		beq.s	Obj6B_SBZ12
00016284 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016288 60C0                       		bra.s	Obj6B_ChkGone
0001628A                            ; ===========================================================================
0001628A                            
0001628A                            Obj6B_SBZ12:				; XREF: Obj6B_Main
0001628A 0028 0004 0001             		ori.b	#4,1(a0)
00016290 117C 0004 0018             		move.b	#4,$18(a0)
00016296 3168 0008 0034             		move.w	8(a0),$34(a0)
0001629C 3168 000C 0030             		move.w	$C(a0),$30(a0)
000162A2 7000                       		moveq	#0,d0
000162A4 101B                       		move.b	(a3)+,d0
000162A6 3140 003C                  		move.w	d0,$3C(a0)
000162AA 7000                       		moveq	#0,d0
000162AC 1028 0028                  		move.b	$28(a0),d0
000162B0 6A00                       		bpl.s	Obj6B_Action
000162B2 0200 000F                  		andi.b	#$F,d0
000162B6 1140 003E                  		move.b	d0,$3E(a0)
000162BA 1153 0028                  		move.b	(a3),$28(a0)
000162BE 0C13 0005                  		cmpi.b	#5,(a3)
000162C2 6600                       		bne.s	Obj6B_ChkGone2
000162C4 08E8 0004 0001             		bset	#4,1(a0)
000162CA                            
000162CA                            Obj6B_ChkGone2:
000162CA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162CE 7000                       		moveq	#0,d0
000162D0 1028 0023                  		move.b	$23(a0),d0
000162D4 6700                       		beq.s	Obj6B_Action
000162D6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000162DC                            
000162DC                            Obj6B_Action:				; XREF: Obj6B_Index
000162DC 3F28 0008                  		move.w	8(a0),-(sp)
000162E0 7000                       		moveq	#0,d0
000162E2 1028 0028                  		move.b	$28(a0),d0
000162E6 0240 000F                  		andi.w	#$F,d0
000162EA D040                       		add.w	d0,d0
000162EC 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000162F0 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000162F4 381F                       		move.w	(sp)+,d4
000162F6 4A28 0001                  		tst.b	1(a0)
000162FA 6A00                       		bpl.s	Obj6B_ChkDel
000162FC 7200                       		moveq	#0,d1
000162FE 1228 0019                  		move.b	$19(a0),d1
00016302 0641 000B                  		addi.w	#$B,d1
00016306 7400                       		moveq	#0,d2
00016308 1428 0016                  		move.b	$16(a0),d2
0001630C 3602                       		move.w	d2,d3
0001630E 5243                       		addq.w	#1,d3
00016310 6100 9C4E                  		bsr.w	SolidObject
00016314                            
00016314                            Obj6B_ChkDel:
00016314 3028 0034                  		move.w	$34(a0),d0
00016318 0240 FF80                  		andi.w	#$FF80,d0
0001631C 3238 F700                  		move.w	($FFFFF700).w,d1
00016320 0441 0080                  		subi.w	#$80,d1
00016324 0241 FF80                  		andi.w	#$FF80,d1
00016328 9041                       		sub.w	d1,d0
0001632A 0C40 0280                  		cmpi.w	#$280,d0
0001632E 6200                       		bhi.s	loc_15D64
00016330 4EF9 0000 DB90             		jmp	DisplaySprite
00016336                            ; ===========================================================================
00016336                            
00016336                            loc_15D64:
00016336 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001633C 6600                       		bne.s	Obj6B_Delete2
0001633E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016342 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016346 7000                       		moveq	#0,d0
00016348 1028 0023                  		move.b	$23(a0),d0
0001634C 6700                       		beq.s	Obj6B_Delete2
0001634E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016354                            
00016354                            Obj6B_Delete2:
00016354 4EF9 0000 DBCC             		jmp	DeleteObject
0001635A                            ; ===========================================================================
0001635A 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001635E 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016362 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016366                            ; ===========================================================================
00016366                            
00016366                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016366 4E75                       		rts	
00016368                            ; ===========================================================================
00016368                            
00016368                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016368 4A28 0038                  		tst.b	$38(a0)
0001636C 6600                       		bne.s	loc_15DB4
0001636E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016372 7000                       		moveq	#0,d0
00016374 1028 003E                  		move.b	$3E(a0),d0
00016378 0832 0000 0000             		btst	#0,(a2,d0.w)
0001637E 6700                       		beq.s	loc_15DC2
00016380 117C 0001 0038             		move.b	#1,$38(a0)
00016386                            
00016386                            loc_15DB4:
00016386 3028 003C                  		move.w	$3C(a0),d0
0001638A B068 003A                  		cmp.w	$3A(a0),d0
0001638E 6700                       		beq.s	loc_15DE0
00016390 5468 003A                  		addq.w	#2,$3A(a0)
00016394                            
00016394                            loc_15DC2:
00016394 3028 003A                  		move.w	$3A(a0),d0
00016398 0828 0000 0022             		btst	#0,$22(a0)
0001639E 6700                       		beq.s	loc_15DD4
000163A0 4440                       		neg.w	d0
000163A2 0640 0080                  		addi.w	#$80,d0
000163A6                            
000163A6                            loc_15DD4:
000163A6 3228 0034                  		move.w	$34(a0),d1
000163AA 9240                       		sub.w	d0,d1
000163AC 3141 0008                  		move.w	d1,8(a0)
000163B0 4E75                       		rts	
000163B2                            ; ===========================================================================
000163B2                            
000163B2                            loc_15DE0:
000163B2 5228 0028                  		addq.b	#1,$28(a0)
000163B6 317C 00B4 0036             		move.w	#$B4,$36(a0)
000163BC 4228 0038                  		clr.b	$38(a0)
000163C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163C4 7000                       		moveq	#0,d0
000163C6 1028 0023                  		move.b	$23(a0),d0
000163CA 67C8                       		beq.s	loc_15DC2
000163CC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000163D2 60C0                       		bra.s	loc_15DC2
000163D4                            ; ===========================================================================
000163D4                            
000163D4                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000163D4 4A28 0038                  		tst.b	$38(a0)
000163D8 6600                       		bne.s	loc_15E14
000163DA 5368 0036                  		subq.w	#1,$36(a0)
000163DE 6600                       		bne.s	loc_15E1E
000163E0 117C 0001 0038             		move.b	#1,$38(a0)
000163E6                            
000163E6                            loc_15E14:
000163E6 4A68 003A                  		tst.w	$3A(a0)
000163EA 6700                       		beq.s	loc_15E3C
000163EC 5568 003A                  		subq.w	#2,$3A(a0)
000163F0                            
000163F0                            loc_15E1E:
000163F0 3028 003A                  		move.w	$3A(a0),d0
000163F4 0828 0000 0022             		btst	#0,$22(a0)
000163FA 6700                       		beq.s	loc_15E30
000163FC 4440                       		neg.w	d0
000163FE 0640 0080                  		addi.w	#$80,d0
00016402                            
00016402                            loc_15E30:
00016402 3228 0034                  		move.w	$34(a0),d1
00016406 9240                       		sub.w	d0,d1
00016408 3141 0008                  		move.w	d1,8(a0)
0001640C 4E75                       		rts	
0001640E                            ; ===========================================================================
0001640E                            
0001640E                            loc_15E3C:
0001640E 5328 0028                  		subq.b	#1,$28(a0)
00016412 4228 0038                  		clr.b	$38(a0)
00016416 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001641A 7000                       		moveq	#0,d0
0001641C 1028 0023                  		move.b	$23(a0),d0
00016420 67CE                       		beq.s	loc_15E1E
00016422 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016428 60C6                       		bra.s	loc_15E1E
0001642A                            ; ===========================================================================
0001642A                            
0001642A                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001642A 4A28 0038                  		tst.b	$38(a0)
0001642E 6600                       		bne.s	loc_15E7C
00016430 4A68 003A                  		tst.w	$3A(a0)
00016434 6700                       		beq.s	loc_15E6A
00016436 5368 003A                  		subq.w	#1,$3A(a0)
0001643A 6000                       		bra.s	loc_15E8E
0001643C                            ; ===========================================================================
0001643C                            
0001643C                            loc_15E6A:
0001643C 5368 0036                  		subq.w	#1,$36(a0)
00016440 6A00                       		bpl.s	loc_15E8E
00016442 317C 003C 0036             		move.w	#$3C,$36(a0)
00016448 117C 0001 0038             		move.b	#1,$38(a0)
0001644E                            
0001644E                            loc_15E7C:
0001644E 5068 003A                  		addq.w	#8,$3A(a0)
00016452 3028 003A                  		move.w	$3A(a0),d0
00016456 B068 003C                  		cmp.w	$3C(a0),d0
0001645A 6600                       		bne.s	loc_15E8E
0001645C 4228 0038                  		clr.b	$38(a0)
00016460                            
00016460                            loc_15E8E:
00016460 3028 003A                  		move.w	$3A(a0),d0
00016464 0828 0000 0022             		btst	#0,$22(a0)
0001646A 6700                       		beq.s	loc_15EA0
0001646C 4440                       		neg.w	d0
0001646E 0640 0038                  		addi.w	#$38,d0
00016472                            
00016472                            loc_15EA0:
00016472 3228 0030                  		move.w	$30(a0),d1
00016476 D240                       		add.w	d0,d1
00016478 3141 000C                  		move.w	d1,$C(a0)
0001647C 4E75                       		rts	
0001647E                            ; ===========================================================================
0001647E                            
0001647E                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001647E 4A28 0038                  		tst.b	$38(a0)
00016482 6600                       		bne.s	loc_15ED0
00016484 4A68 003A                  		tst.w	$3A(a0)
00016488 6700                       		beq.s	loc_15EBE
0001648A 5168 003A                  		subq.w	#8,$3A(a0)
0001648E 6000                       		bra.s	loc_15EF0
00016490                            ; ===========================================================================
00016490                            
00016490                            loc_15EBE:
00016490 5368 0036                  		subq.w	#1,$36(a0)
00016494 6A00                       		bpl.s	loc_15EF0
00016496 317C 003C 0036             		move.w	#$3C,$36(a0)
0001649C 117C 0001 0038             		move.b	#1,$38(a0)
000164A2                            
000164A2                            loc_15ED0:
000164A2 3028 003A                  		move.w	$3A(a0),d0
000164A6 B068 003C                  		cmp.w	$3C(a0),d0
000164AA 6700                       		beq.s	loc_15EE0
000164AC 5068 003A                  		addq.w	#8,$3A(a0)
000164B0 6000                       		bra.s	loc_15EF0
000164B2                            ; ===========================================================================
000164B2                            
000164B2                            loc_15EE0:
000164B2 5368 0036                  		subq.w	#1,$36(a0)
000164B6 6A00                       		bpl.s	loc_15EF0
000164B8 317C 003C 0036             		move.w	#$3C,$36(a0)
000164BE 4228 0038                  		clr.b	$38(a0)
000164C2                            
000164C2                            loc_15EF0:
000164C2 3028 003A                  		move.w	$3A(a0),d0
000164C6 0828 0000 0022             		btst	#0,$22(a0)
000164CC 6700                       		beq.s	loc_15F02
000164CE 4440                       		neg.w	d0
000164D0 0640 0038                  		addi.w	#$38,d0
000164D4                            
000164D4                            loc_15F02:
000164D4 3228 0030                  		move.w	$30(a0),d1
000164D8 D240                       		add.w	d0,d1
000164DA 3141 000C                  		move.w	d1,$C(a0)
000164DE 4E75                       		rts	
000164E0                            ; ===========================================================================
000164E0                            
000164E0                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000164E0 4A28 0038                  		tst.b	$38(a0)
000164E4 6600                       		bne.s	loc_15F3E
000164E6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000164EA 7000                       		moveq	#0,d0
000164EC 1028 003E                  		move.b	$3E(a0),d0
000164F0 0832 0000 0000             		btst	#0,(a2,d0.w)
000164F6 6700                       		beq.s	locret_15F5C
000164F8 117C 0001 0038             		move.b	#1,$38(a0)
000164FE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016502 7000                       		moveq	#0,d0
00016504 1028 0023                  		move.b	$23(a0),d0
00016508 6700                       		beq.s	loc_15F3E
0001650A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016510                            
00016510                            loc_15F3E:
00016510 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016518 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016520 3168 0008 0034             		move.w	8(a0),$34(a0)
00016526 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001652C 6700                       		beq.s	loc_15F5E
0001652E                            
0001652E                            locret_15F5C:
0001652E 4E75                       		rts	
00016530                            ; ===========================================================================
00016530                            
00016530                            loc_15F5E:
00016530 4228 0028                  		clr.b	$28(a0)
00016534 4228 0038                  		clr.b	$38(a0)
00016538 4E75                       		rts	
0001653A                            ; ===========================================================================
0001653A                            ; ---------------------------------------------------------------------------
0001653A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001653A                            ; ---------------------------------------------------------------------------
0001653A                            Map_obj6B:
0001653A                            	include "_maps\obj6B.asm"
0001653A                            ; ---------------------------------------------------------------------------
0001653A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001653A                            ; ---------------------------------------------------------------------------
0001653A 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001653E 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016542 0000                       		dc.w byte_15FB0-Map_obj6B
00016544 04                         byte_15F72:	dc.b 4
00016545 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001654A F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001654F F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016554 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016559 08                         byte_15F87:	dc.b 8
0001655A E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001655F E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016564 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016569 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001656E 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016573 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016578 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001657D 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016582 0E                         byte_15FB0:	dc.b $E
00016583 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016588 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001658D C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016592 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016597 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001659C C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000165A1 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000165A6 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000165AB E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000165B0 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000165B5 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000165BA 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000165BF 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000165C4 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000165CA 00                         		even
000165CA 00                         		even
000165CA                            
000165CA                            ; ===========================================================================
000165CA                            ; ---------------------------------------------------------------------------
000165CA                            ; Object 6C - vanishing	platforms (SBZ)
000165CA                            ; ---------------------------------------------------------------------------
000165CA                            
000165CA                            Obj6C:					; XREF: Obj_Index
000165CA 7000                       		moveq	#0,d0
000165CC 1028 0024                  		move.b	$24(a0),d0
000165D0 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000165D4 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000165D8                            ; ===========================================================================
000165D8 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000165DA 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000165DC 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000165DE 0000                       		dc.w loc_16068-Obj6C_Index
000165E0                            ; ===========================================================================
000165E0                            
000165E0                            Obj6C_Main:				; XREF: Obj6C_Index
000165E0 5C28 0024                  		addq.b	#6,$24(a0)
000165E4 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000165EC 317C 44C3 0002             		move.w	#$44C3,2(a0)
000165F2 0028 0004 0001             		ori.b	#4,1(a0)
000165F8 117C 0010 0019             		move.b	#$10,$19(a0)
000165FE 117C 0004 0018             		move.b	#4,$18(a0)
00016604 7000                       		moveq	#0,d0
00016606 1028 0028                  		move.b	$28(a0),d0	; get object type
0001660A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001660E 5240                       		addq.w	#1,d0		; add 1
00016610 EF48                       		lsl.w	#7,d0		; multiply by $80
00016612 3200                       		move.w	d0,d1
00016614 5340                       		subq.w	#1,d0
00016616 3140 0030                  		move.w	d0,$30(a0)
0001661A 3140 0032                  		move.w	d0,$32(a0)
0001661E 7000                       		moveq	#0,d0
00016620 1028 0028                  		move.b	$28(a0),d0	; get object type
00016624 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016628 0641 0080                  		addi.w	#$80,d1
0001662C C0C1                       		mulu.w	d1,d0
0001662E E088                       		lsr.l	#8,d0
00016630 3140 0036                  		move.w	d0,$36(a0)
00016634 5341                       		subq.w	#1,d1
00016636 3141 0038                  		move.w	d1,$38(a0)
0001663A                            
0001663A                            loc_16068:				; XREF: Obj6C_Index
0001663A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001663E 9068 0036                  		sub.w	$36(a0),d0
00016642 C068 0038                  		and.w	$38(a0),d0
00016646 6600                       		bne.s	Obj6C_Animate
00016648 5928 0024                  		subq.b	#4,$24(a0)
0001664C 6000                       		bra.s	Obj6C_Vanish
0001664E                            ; ===========================================================================
0001664E                            
0001664E                            Obj6C_Animate:
0001664E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016654 4EB9 0000 AC66             		jsr	AnimateSprite
0001665A 6000 95DC                  		bra.w	MarkObjGone
0001665E                            ; ===========================================================================
0001665E                            
0001665E                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001665E 5368 0030                  		subq.w	#1,$30(a0)
00016662 6A00                       		bpl.s	loc_160AA
00016664 317C 007F 0030             		move.w	#127,$30(a0)
0001666A 4A28 001C                  		tst.b	$1C(a0)
0001666E 6700                       		beq.s	loc_160A4
00016670 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016676                            
00016676                            loc_160A4:
00016676 0868 0000 001C             		bchg	#0,$1C(a0)
0001667C                            
0001667C                            loc_160AA:
0001667C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016682 4EB9 0000 AC66             		jsr	AnimateSprite
00016688 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001668E 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016690 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016696 6600                       		bne.s	loc_160D6
00016698 7200                       		moveq	#0,d1
0001669A 1228 0019                  		move.b	$19(a0),d1
0001669E 4EB9 0000 789E             		jsr	(PlatformObject).l
000166A4 6000 9592                  		bra.w	MarkObjGone
000166A8                            ; ===========================================================================
000166A8                            
000166A8                            loc_160D6:
000166A8 7200                       		moveq	#0,d1
000166AA 1228 0019                  		move.b	$19(a0),d1
000166AE 4EB9 0000 7A12             		jsr	(ExitPlatform).l
000166B4 3428 0008                  		move.w	8(a0),d2
000166B8 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
000166BE 6000 9578                  		bra.w	MarkObjGone
000166C2                            ; ===========================================================================
000166C2                            
000166C2                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000166C2 0828 0003 0022             		btst	#3,$22(a0)
000166C8 6700                       		beq.s	Obj6C_Display
000166CA 43F8 D000                  		lea	($FFFFD000).w,a1
000166CE 08A9 0003 0022             		bclr	#3,$22(a1)
000166D4 08A8 0003 0022             		bclr	#3,$22(a0)
000166DA 117C 0002 0024             		move.b	#2,$24(a0)
000166E0 4228 0025                  		clr.b	$25(a0)
000166E4                            
000166E4                            Obj6C_Display:
000166E4 6000 9552                  		bra.w	MarkObjGone
000166E8                            ; ===========================================================================
000166E8                            Ani_obj6C:
000166E8                            	include "_anim\obj6C.asm"
000166E8                            ; ---------------------------------------------------------------------------
000166E8                            ; Animation script - vanishing platforms (SBZ)
000166E8                            ; ---------------------------------------------------------------------------
000166E8 0000                       		dc.w byte_1611A-Ani_obj6C
000166EA 0000                       		dc.w byte_16122-Ani_obj6C
000166EC 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000166F4 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000166FC                            		even
000166FC                            		even
000166FC                            
000166FC                            ; ---------------------------------------------------------------------------
000166FC                            ; Sprite mappings - vanishing platforms	(SBZ)
000166FC                            ; ---------------------------------------------------------------------------
000166FC                            Map_obj6C:
000166FC                            	include "_maps\obj6C.asm"
000166FC                            ; ---------------------------------------------------------------------------
000166FC                            ; Sprite mappings - vanishing platforms	(SBZ)
000166FC                            ; ---------------------------------------------------------------------------
000166FC 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016700 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016704 01                         byte_16132:	dc.b 1
00016705 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001670A 01                         byte_16138:	dc.b 1
0001670B F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016710 01                         byte_1613E:	dc.b 1
00016711 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016716 00                         byte_16144:	dc.b 0
00016718 00                         		even
00016718 00                         		even
00016718                            
00016718                            ; ===========================================================================
00016718                            ; ---------------------------------------------------------------------------
00016718                            ; Object 6E - electrocution orbs (SBZ)
00016718                            ; ---------------------------------------------------------------------------
00016718                            
00016718                            Obj6E:					; XREF: Obj_Index
00016718 7000                       		moveq	#0,d0
0001671A 1028 0024                  		move.b	$24(a0),d0
0001671E 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016722 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016726                            ; ===========================================================================
00016726 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016728 0000                       		dc.w Obj6E_Shock-Obj6E_Index
0001672A                            ; ===========================================================================
0001672A                            
0001672A                            Obj6E_Main:				; XREF: Obj6E_Index
0001672A 5428 0024                  		addq.b	#2,$24(a0)
0001672E 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016736 317C 047E 0002             		move.w	#$47E,2(a0)
0001673C 0028 0004 0001             		ori.b	#4,1(a0)
00016742 117C 0028 0019             		move.b	#$28,$19(a0)
00016748 7000                       		moveq	#0,d0
0001674A 1028 0028                  		move.b	$28(a0),d0	; read object type
0001674E E948                       		lsl.w	#4,d0		; multiply by $10
00016750 5340                       		subq.w	#1,d0
00016752 3140 0034                  		move.w	d0,$34(a0)
00016756                            
00016756                            Obj6E_Shock:				; XREF: Obj6E_Index
00016756 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001675A C068 0034                  		and.w	$34(a0),d0
0001675E 6600                       		bne.s	Obj6E_Animate
00016760 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016766 4A28 0001                  		tst.b	1(a0)
0001676A 6A00                       		bpl.s	Obj6E_Animate
0001676C 303C 00B1                  		move.w	#$B1,d0
00016770 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
00016776                            
00016776                            Obj6E_Animate:
00016776 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
0001677C 4EB9 0000 AC66             		jsr	AnimateSprite
00016782 117C 0000 0020             		move.b	#0,$20(a0)
00016788 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
0001678E 6600                       		bne.s	Obj6E_Display	; if not, branch
00016790 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016796                            
00016796                            Obj6E_Display:
00016796 6000 94A0                  		bra.w	MarkObjGone
0001679A                            ; ===========================================================================
0001679A                            Ani_obj6E:
0001679A                            	include "_anim\obj6E.asm"
0001679A                            ; ---------------------------------------------------------------------------
0001679A                            ; Animation script - electrocution orbs (SBZ)
0001679A                            ; ---------------------------------------------------------------------------
0001679A 0000                       		dc.w byte_161CC-Ani_obj6E
0001679C 0000                       		dc.w byte_161D0-Ani_obj6E
0001679E 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000167A2 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000167B2                            		even
000167B2                            		even
000167B2                            
000167B2                            ; ---------------------------------------------------------------------------
000167B2                            ; Sprite mappings - electrocution orbs (SBZ)
000167B2                            ; ---------------------------------------------------------------------------
000167B2                            Map_obj6E:
000167B2                            	include "_maps\obj6E.asm"
000167B2                            ; ---------------------------------------------------------------------------
000167B2                            ; Sprite mappings - electrocution orbs (SBZ)
000167B2                            ; ---------------------------------------------------------------------------
000167B2 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000167B6 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000167BA 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000167BE 02                         byte_161EC:	dc.b 2
000167BF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167C4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167C9 03                         byte_161F7:	dc.b 3
000167CA F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000167CF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167D4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167D9 05                         byte_16207:	dc.b 5
000167DA F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000167DF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167E4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167E9 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000167EE F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000167F3 04                         byte_16221:	dc.b 4
000167F4 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167F9 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167FE F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016803 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016808 06                         byte_16236:	dc.b 6
00016809 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001680E 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016813 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00016818 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
0001681D F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00016822 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016827 04                         byte_16255:	dc.b 4
00016828 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001682D 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016832 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016837 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
0001683C                            		even
0001683C                            		even
0001683C                            
0001683C                            ; ===========================================================================
0001683C                            ; ---------------------------------------------------------------------------
0001683C                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001683C                            ; ---------------------------------------------------------------------------
0001683C                            
0001683C                            Obj6F:					; XREF: Obj_Index
0001683C 7000                       		moveq	#0,d0
0001683E 1028 0024                  		move.b	$24(a0),d0
00016842 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016846 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
0001684A 3028 0030                  		move.w	$30(a0),d0
0001684E 0240 FF80                  		andi.w	#$FF80,d0
00016852 3238 F700                  		move.w	($FFFFF700).w,d1
00016856 0441 0080                  		subi.w	#$80,d1
0001685A 0241 FF80                  		andi.w	#$FF80,d1
0001685E 9041                       		sub.w	d1,d0
00016860 0C40 0280                  		cmpi.w	#$280,d0
00016864 6200                       		bhi.s	loc_1629A
00016866                            
00016866                            Obj6F_Display:
00016866 4EF9 0000 DB90             		jmp	DisplaySprite
0001686C                            ; ===========================================================================
0001686C                            
0001686C                            loc_1629A:
0001686C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016872 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016874 0C40 FF80                  		cmpi.w	#-$80,d0
00016878 64EC                       		bcc.s	Obj6F_Display
0001687A                            
0001687A                            Obj6F_Act1or2:
0001687A 1028 002F                  		move.b	$2F(a0),d0
0001687E 6A00                       		bpl.s	Obj6F_Delete
00016880 0240 007F                  		andi.w	#$7F,d0
00016884 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016888 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001688E                            
0001688E                            Obj6F_Delete:
0001688E 4EF9 0000 DBCC             		jmp	DeleteObject
00016894                            ; ===========================================================================
00016894 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016896 0000                       		dc.w loc_163D8-Obj6F_Index
00016898                            ; ===========================================================================
00016898                            
00016898                            Obj6F_Main:				; XREF: Obj6F_Index
00016898 1028 0028                  		move.b	$28(a0),d0
0001689C 6B00 0000                  		bmi.w	loc_16380
000168A0 5428 0024                  		addq.b	#2,$24(a0)
000168A4 217C 0001 5F0C 0004        		move.l	#Map_obj69a,4(a0)
000168AC 317C 04DF 0002             		move.w	#$4DF,2(a0)
000168B2 117C 0010 0019             		move.b	#$10,$19(a0)
000168B8 0028 0004 0001             		ori.b	#4,1(a0)
000168BE 117C 0004 0018             		move.b	#4,$18(a0)
000168C4 7000                       		moveq	#0,d0
000168C6 1028 0028                  		move.b	$28(a0),d0
000168CA 3200                       		move.w	d0,d1
000168CC E648                       		lsr.w	#3,d0
000168CE 0240 001E                  		andi.w	#$1E,d0
000168D2 45FA 0000                  		lea	off_164A6(pc),a2
000168D6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000168DA 315A 0038                  		move.w	(a2)+,$38(a0)
000168DE 315A 0030                  		move.w	(a2)+,$30(a0)
000168E2 214A 003C                  		move.l	a2,$3C(a0)
000168E6 0241 000F                  		andi.w	#$F,d1
000168EA E549                       		lsl.w	#2,d1
000168EC 1141 0038                  		move.b	d1,$38(a0)
000168F0 117C 0004 003A             		move.b	#4,$3A(a0)
000168F6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000168FA 6700                       		beq.s	loc_16356
000168FC 117C 0001 003B             		move.b	#1,$3B(a0)
00016902 4428 003A                  		neg.b	$3A(a0)
00016906 7200                       		moveq	#0,d1
00016908 1228 0038                  		move.b	$38(a0),d1
0001690C D228 003A                  		add.b	$3A(a0),d1
00016910 B228 0039                  		cmp.b	$39(a0),d1
00016914 6500                       		bcs.s	loc_16352
00016916 1001                       		move.b	d1,d0
00016918 7200                       		moveq	#0,d1
0001691A 4A00                       		tst.b	d0
0001691C 6A00                       		bpl.s	loc_16352
0001691E 1228 0039                  		move.b	$39(a0),d1
00016922 5901                       		subq.b	#4,d1
00016924                            
00016924                            loc_16352:
00016924 1141 0038                  		move.b	d1,$38(a0)
00016928                            
00016928                            loc_16356:
00016928 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001692E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016934 4A41                       		tst.w	d1
00016936 6600                       		bne.s	loc_1636C
00016938 117C 0001 001C             		move.b	#1,$1C(a0)
0001693E                            
0001693E                            loc_1636C:
0001693E 0C41 0008                  		cmpi.w	#8,d1
00016942 6600                       		bne.s	loc_16378
00016944 117C 0000 001C             		move.b	#0,$1C(a0)
0001694A                            
0001694A                            loc_16378:
0001694A 6100 C184                  		bsr.w	Obj63_ChangeDir
0001694E 6000 0000                  		bra.w	loc_163D8
00016952                            ; ===========================================================================
00016952                            
00016952                            loc_16380:				; XREF: Obj6F_Main
00016952 1140 002F                  		move.b	d0,$2F(a0)
00016956 0240 007F                  		andi.w	#$7F,d0
0001695A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001695E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016964 6700                       		beq.s	loc_1639A
00016966 4EF9 0000 DBCC             		jmp	DeleteObject
0001696C                            ; ===========================================================================
0001696C                            
0001696C                            loc_1639A:
0001696C D040                       		add.w	d0,d0
0001696E 0240 001E                  		andi.w	#$1E,d0
00016972 0640 0080                  		addi.w	#$80,d0
00016976 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001697C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016980 321A                       		move.w	(a2)+,d1
00016982 2248                       		movea.l	a0,a1
00016984 6000                       		bra.s	Obj6F_LoadPform
00016986                            ; ===========================================================================
00016986                            
00016986                            Obj6F_Loop:
00016986 4EB9 0000 E016             		jsr	SingleObjLoad
0001698C 6600                       		bne.s	loc_163D0
0001698E                            
0001698E                            Obj6F_LoadPform:			; XREF: loc_1639A
0001698E 12BC 006F                  		move.b	#$6F,0(a1)
00016992 335A 0008                  		move.w	(a2)+,8(a1)
00016996 335A 000C                  		move.w	(a2)+,$C(a1)
0001699A 301A                       		move.w	(a2)+,d0
0001699C 1340 0028                  		move.b	d0,$28(a1)
000169A0                            
000169A0                            loc_163D0:
000169A0 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000169A4                            
000169A4 588F                       		addq.l	#4,sp
000169A6 4E75                       		rts	
000169A8                            ; ===========================================================================
000169A8                            
000169A8                            loc_163D8:				; XREF: Obj6F_Index
000169A8 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000169AE 4EB9 0000 AC66             		jsr	AnimateSprite
000169B4 4A28 001A                  		tst.b	$1A(a0)
000169B8 6600                       		bne.s	loc_16404
000169BA 3F28 0008                  		move.w	8(a0),-(sp)
000169BE 6100 0000                  		bsr.w	loc_16424
000169C2 323C 001B                  		move.w	#$1B,d1
000169C6 343C 0007                  		move.w	#7,d2
000169CA 3602                       		move.w	d2,d3
000169CC 5243                       		addq.w	#1,d3
000169CE 381F                       		move.w	(sp)+,d4
000169D0 6000 958E                  		bra.w	SolidObject
000169D4                            ; ===========================================================================
000169D4                            
000169D4                            loc_16404:
000169D4 0828 0003 0022             		btst	#3,$22(a0)
000169DA 6700                       		beq.s	loc_16420
000169DC 43F8 D000                  		lea	($FFFFD000).w,a1
000169E0 08A9 0003 0022             		bclr	#3,$22(a1)
000169E6 08A8 0003 0022             		bclr	#3,$22(a0)
000169EC 4228 0025                  		clr.b	$25(a0)
000169F0                            
000169F0                            loc_16420:
000169F0 6000 0002                  		bra.w	*+4
000169F4                            
000169F4                            loc_16424:
000169F4 3028 0008                  		move.w	8(a0),d0
000169F8 B068 0034                  		cmp.w	$34(a0),d0
000169FC 6600                       		bne.s	loc_16484
000169FE 3028 000C                  		move.w	$C(a0),d0
00016A02 B068 0036                  		cmp.w	$36(a0),d0
00016A06 6600                       		bne.s	loc_16484
00016A08 7200                       		moveq	#0,d1
00016A0A 1228 0038                  		move.b	$38(a0),d1
00016A0E D228 003A                  		add.b	$3A(a0),d1
00016A12 B228 0039                  		cmp.b	$39(a0),d1
00016A16 6500                       		bcs.s	loc_16456
00016A18 1001                       		move.b	d1,d0
00016A1A 7200                       		moveq	#0,d1
00016A1C 4A00                       		tst.b	d0
00016A1E 6A00                       		bpl.s	loc_16456
00016A20 1228 0039                  		move.b	$39(a0),d1
00016A24 5901                       		subq.b	#4,d1
00016A26                            
00016A26                            loc_16456:
00016A26 1141 0038                  		move.b	d1,$38(a0)
00016A2A 2268 003C                  		movea.l	$3C(a0),a1
00016A2E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016A34 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016A3A 4A41                       		tst.w	d1
00016A3C 6600                       		bne.s	loc_16474
00016A3E 117C 0001 001C             		move.b	#1,$1C(a0)
00016A44                            
00016A44                            loc_16474:
00016A44 0C41 0008                  		cmpi.w	#8,d1
00016A48 6600                       		bne.s	loc_16480
00016A4A 117C 0000 001C             		move.b	#0,$1C(a0)
00016A50                            
00016A50                            loc_16480:
00016A50 6100 C07E                  		bsr.w	Obj63_ChangeDir
00016A54                            
00016A54                            loc_16484:
00016A54 4EF9 0000 DB6A             		jmp	SpeedToPos
00016A5A                            ; ===========================================================================
00016A5A                            Ani_obj6F:
00016A5A                            	include "_anim\obj6F.asm"
00016A5A                            ; ---------------------------------------------------------------------------
00016A5A                            ; Animation script - platform on conveyor belt (SBZ)
00016A5A                            ; ---------------------------------------------------------------------------
00016A5A 0000                       		dc.w byte_1648E-Ani_obj6F
00016A5C 0000                       		dc.w byte_164A2-Ani_obj6F
00016A5E 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016A6B 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016A72 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016A76 00                         		even
00016A76 00                         		even
00016A76                            
00016A76 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016A7C 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016A82 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016A96 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016AAA 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016ABE 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016AD2 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016AE6 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016AFA                            ; ===========================================================================
00016AFA                            ; ---------------------------------------------------------------------------
00016AFA                            ; Object 70 - large girder block (SBZ)
00016AFA                            ; ---------------------------------------------------------------------------
00016AFA                            
00016AFA                            Obj70:					; XREF: Obj_Index
00016AFA 7000                       		moveq	#0,d0
00016AFC 1028 0024                  		move.b	$24(a0),d0
00016B00 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016B04 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016B08                            ; ===========================================================================
00016B08 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016B0A 0000                       		dc.w Obj70_Action-Obj70_Index
00016B0C                            ; ===========================================================================
00016B0C                            
00016B0C                            Obj70_Main:				; XREF: Obj70_Index
00016B0C 5428 0024                  		addq.b	#2,$24(a0)
00016B10 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016B18 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016B1E 0028 0004 0001             		ori.b	#4,1(a0)
00016B24 117C 0004 0018             		move.b	#4,$18(a0)
00016B2A 117C 0060 0019             		move.b	#$60,$19(a0)
00016B30 117C 0018 0016             		move.b	#$18,$16(a0)
00016B36 3168 0008 0032             		move.w	8(a0),$32(a0)
00016B3C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016B42 6100 0000                  		bsr.w	Obj70_Move2
00016B46                            
00016B46                            Obj70_Action:				; XREF: Obj70_Index
00016B46 3F28 0008                  		move.w	8(a0),-(sp)
00016B4A 4A68 003A                  		tst.w	$3A(a0)
00016B4E 6700                       		beq.s	Obj70_Move
00016B50 5368 003A                  		subq.w	#1,$3A(a0)
00016B54 6600                       		bne.s	Obj70_Solid
00016B56                            
00016B56                            Obj70_Move:
00016B56 4EB9 0000 DB6A             		jsr	SpeedToPos
00016B5C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016B60 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016B62 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016B66                            
00016B66                            Obj70_Solid:
00016B66 381F                       		move.w	(sp)+,d4
00016B68 4A28 0001                  		tst.b	1(a0)
00016B6C 6A00                       		bpl.s	Obj70_ChkDel
00016B6E 7200                       		moveq	#0,d1
00016B70 1228 0019                  		move.b	$19(a0),d1
00016B74 0641 000B                  		addi.w	#$B,d1
00016B78 7400                       		moveq	#0,d2
00016B7A 1428 0016                  		move.b	$16(a0),d2
00016B7E 3602                       		move.w	d2,d3
00016B80 5243                       		addq.w	#1,d3
00016B82 6100 93DC                  		bsr.w	SolidObject
00016B86                            
00016B86                            Obj70_ChkDel:
00016B86 3028 0032                  		move.w	$32(a0),d0
00016B8A 0240 FF80                  		andi.w	#$FF80,d0
00016B8E 3238 F700                  		move.w	($FFFFF700).w,d1
00016B92 0441 0080                  		subi.w	#$80,d1
00016B96 0241 FF80                  		andi.w	#$FF80,d1
00016B9A 9041                       		sub.w	d1,d0
00016B9C 0C40 0280                  		cmpi.w	#$280,d0
00016BA0 6200                       		bhi.s	Obj70_Delete
00016BA2 4EF9 0000 DB90             		jmp	DisplaySprite
00016BA8                            ; ===========================================================================
00016BA8                            
00016BA8                            Obj70_Delete:
00016BA8 4EF9 0000 DBCC             		jmp	DeleteObject
00016BAE                            ; ===========================================================================
00016BAE                            
00016BAE                            Obj70_Move2:				; XREF: Obj70_Main
00016BAE 1028 0038                  		move.b	$38(a0),d0
00016BB2 0240 0018                  		andi.w	#$18,d0
00016BB6 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016BBC 43F1 0000                  		lea	(a1,d0.w),a1
00016BC0 3159 0010                  		move.w	(a1)+,$10(a0)
00016BC4 3159 0012                  		move.w	(a1)+,$12(a0)
00016BC8 3159 0034                  		move.w	(a1)+,$34(a0)
00016BCC 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016BD0 317C 0007 003A             		move.w	#7,$3A(a0)
00016BD6 4E75                       		rts	
00016BD8                            ; ===========================================================================
00016BD8 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016BE0 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016BE8 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016BF0 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016BF8                            ; ---------------------------------------------------------------------------
00016BF8                            ; Sprite mappings - large girder block (SBZ)
00016BF8                            ; ---------------------------------------------------------------------------
00016BF8                            Map_obj70:
00016BF8                            	include "_maps\obj70.asm"
00016BF8                            ; ---------------------------------------------------------------------------
00016BF8                            ; Sprite mappings - large girder block (SBZ)
00016BF8                            ; ---------------------------------------------------------------------------
00016BF8 0000                       		dc.w byte_1662A-Map_obj70
00016BFA 0C                         byte_1662A:	dc.b $C
00016BFB E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016C00 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016C05 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016C0A 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016C0F E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016C14 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016C19 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016C1E 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016C23 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016C28 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016C2D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016C32 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016C38 00                         		even
00016C38 00                         		even
00016C38                            
00016C38                            ; ===========================================================================
00016C38                            ; ---------------------------------------------------------------------------
00016C38                            ; Object 72 - teleporter (SBZ)
00016C38                            ; ---------------------------------------------------------------------------
00016C38                            
00016C38                            Obj72:					; XREF: Obj_Index
00016C38 7000                       		moveq	#0,d0
00016C3A 1028 0024                  		move.b	$24(a0),d0
00016C3E 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016C42 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016C46 3028 0008                  		move.w	8(a0),d0
00016C4A 0240 FF80                  		andi.w	#$FF80,d0
00016C4E 3238 F700                  		move.w	($FFFFF700).w,d1
00016C52 0441 0080                  		subi.w	#$80,d1
00016C56 0241 FF80                  		andi.w	#$FF80,d1
00016C5A 9041                       		sub.w	d1,d0
00016C5C 0C40 0280                  		cmpi.w	#$280,d0
00016C60 6200                       		bhi.s	Obj72_Delete
00016C62 4E75                       		rts	
00016C64                            ; ===========================================================================
00016C64                            
00016C64                            Obj72_Delete:
00016C64 4EF9 0000 DBCC             		jmp	DeleteObject
00016C6A                            ; ===========================================================================
00016C6A 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016C6C 0000                       		dc.w loc_166C8-Obj72_Index
00016C6E 0000                       		dc.w loc_1675E-Obj72_Index
00016C70 0000                       		dc.w loc_16798-Obj72_Index
00016C72                            ; ===========================================================================
00016C72                            
00016C72                            Obj72_Main:				; XREF: Obj72_Index
00016C72 5428 0024                  		addq.b	#2,$24(a0)
00016C76 1028 0028                  		move.b	$28(a0),d0
00016C7A D040                       		add.w	d0,d0
00016C7C 0240 001E                  		andi.w	#$1E,d0
00016C80 45FA 0000                  		lea	Obj72_Data(pc),a2
00016C84 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C88 315A 003A                  		move.w	(a2)+,$3A(a0)
00016C8C 214A 003C                  		move.l	a2,$3C(a0)
00016C90 315A 0036                  		move.w	(a2)+,$36(a0)
00016C94 315A 0038                  		move.w	(a2)+,$38(a0)
00016C98                            
00016C98                            loc_166C8:				; XREF: Obj72_Index
00016C98 43F8 D000                  		lea	($FFFFD000).w,a1
00016C9C 3029 0008                  		move.w	8(a1),d0
00016CA0 9068 0008                  		sub.w	8(a0),d0
00016CA4 0828 0000 0022             		btst	#0,$22(a0)
00016CAA 6700                       		beq.s	loc_166E0
00016CAC 0640 000F                  		addi.w	#$F,d0
00016CB0                            
00016CB0                            loc_166E0:
00016CB0 0C40 0010                  		cmpi.w	#$10,d0
00016CB4 6400                       		bcc.s	locret_1675C
00016CB6 3229 000C                  		move.w	$C(a1),d1
00016CBA 9268 000C                  		sub.w	$C(a0),d1
00016CBE 0641 0020                  		addi.w	#$20,d1
00016CC2 0C41 0040                  		cmpi.w	#$40,d1
00016CC6 6400                       		bcc.s	locret_1675C
00016CC8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016CCC 6600                       		bne.s	locret_1675C
00016CCE 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016CD4 6600                       		bne.s	loc_1670E
00016CD6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016CDC 6500                       		bcs.s	locret_1675C
00016CDE                            
00016CDE                            loc_1670E:
00016CDE 5428 0024                  		addq.b	#2,$24(a0)
00016CE2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016CE8 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016CEE 337C 0800 0014             		move.w	#$800,$14(a1)
00016CF4 337C 0000 0010             		move.w	#0,$10(a1)
00016CFA 337C 0000 0012             		move.w	#0,$12(a1)
00016D00 08A8 0005 0022             		bclr	#5,$22(a0)
00016D06 08A9 0005 0022             		bclr	#5,$22(a1)
00016D0C 08E9 0001 0022             		bset	#1,$22(a1)
00016D12 3368 0008 0008             		move.w	8(a0),8(a1)
00016D18 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016D1E 4228 0032                  		clr.b	$32(a0)
00016D22 303C 00BE                  		move.w	#$BE,d0
00016D26 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016D2C                            
00016D2C                            locret_1675C:
00016D2C 4E75                       		rts	
00016D2E                            ; ===========================================================================
00016D2E                            
00016D2E                            loc_1675E:				; XREF: Obj72_Index
00016D2E 43F8 D000                  		lea	($FFFFD000).w,a1
00016D32 1028 0032                  		move.b	$32(a0),d0
00016D36 5428 0032                  		addq.b	#2,$32(a0)
00016D3A 4EB9 0000 2C22             		jsr	(CalcSine).l
00016D40 EA40                       		asr.w	#5,d0
00016D42 3428 000C                  		move.w	$C(a0),d2
00016D46 9440                       		sub.w	d0,d2
00016D48 3342 000C                  		move.w	d2,$C(a1)
00016D4C 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016D52 6600                       		bne.s	locret_16796
00016D54 6100 0000                  		bsr.w	sub_1681C
00016D58 5428 0024                  		addq.b	#2,$24(a0)
00016D5C 303C 00BC                  		move.w	#$BC,d0
00016D60 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016D66                            
00016D66                            locret_16796:
00016D66 4E75                       		rts	
00016D68                            ; ===========================================================================
00016D68                            
00016D68                            loc_16798:				; XREF: Obj72_Index
00016D68 588F                       		addq.l	#4,sp
00016D6A 43F8 D000                  		lea	($FFFFD000).w,a1
00016D6E 5328 002E                  		subq.b	#1,$2E(a0)
00016D72 6A00                       		bpl.s	loc_167DA
00016D74 3368 0036 0008             		move.w	$36(a0),8(a1)
00016D7A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016D80 7200                       		moveq	#0,d1
00016D82 1228 003A                  		move.b	$3A(a0),d1
00016D86 5801                       		addq.b	#4,d1
00016D88 B228 003B                  		cmp.b	$3B(a0),d1
00016D8C 6500                       		bcs.s	loc_167C2
00016D8E 7200                       		moveq	#0,d1
00016D90 6000                       		bra.s	loc_16800
00016D92                            ; ===========================================================================
00016D92                            
00016D92                            loc_167C2:
00016D92 1141 003A                  		move.b	d1,$3A(a0)
00016D96 2468 003C                  		movea.l	$3C(a0),a2
00016D9A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016DA0 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016DA6 6000 0000                  		bra.w	sub_1681C
00016DAA                            ; ===========================================================================
00016DAA                            
00016DAA                            loc_167DA:
00016DAA 2429 0008                  		move.l	8(a1),d2
00016DAE 2629 000C                  		move.l	$C(a1),d3
00016DB2 3029 0010                  		move.w	$10(a1),d0
00016DB6 48C0                       		ext.l	d0
00016DB8 E180                       		asl.l	#8,d0
00016DBA D480                       		add.l	d0,d2
00016DBC 3029 0012                  		move.w	$12(a1),d0
00016DC0 48C0                       		ext.l	d0
00016DC2 E180                       		asl.l	#8,d0
00016DC4 D680                       		add.l	d0,d3
00016DC6 2342 0008                  		move.l	d2,8(a1)
00016DCA 2343 000C                  		move.l	d3,$C(a1)
00016DCE 4E75                       		rts	
00016DD0                            ; ===========================================================================
00016DD0                            
00016DD0                            loc_16800:
00016DD0 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016DD6 4228 0024                  		clr.b	$24(a0)
00016DDA 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016DDE 337C 0000 0010             		move.w	#0,$10(a1)
00016DE4 337C 0200 0012             		move.w	#$200,$12(a1)
00016DEA 4E75                       		rts	
00016DEC                            
00016DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DEC                            
00016DEC                            
00016DEC                            sub_1681C:
00016DEC 7000                       		moveq	#0,d0
00016DEE 343C 1000                  		move.w	#$1000,d2
00016DF2 3028 0036                  		move.w	$36(a0),d0
00016DF6 9069 0008                  		sub.w	8(a1),d0
00016DFA 6C00                       		bge.s	loc_16830
00016DFC 4440                       		neg.w	d0
00016DFE 4442                       		neg.w	d2
00016E00                            
00016E00                            loc_16830:
00016E00 7200                       		moveq	#0,d1
00016E02 363C 1000                  		move.w	#$1000,d3
00016E06 3228 0038                  		move.w	$38(a0),d1
00016E0A 9269 000C                  		sub.w	$C(a1),d1
00016E0E 6C00                       		bge.s	loc_16844
00016E10 4441                       		neg.w	d1
00016E12 4443                       		neg.w	d3
00016E14                            
00016E14                            loc_16844:
00016E14 B240                       		cmp.w	d0,d1
00016E16 6500                       		bcs.s	loc_1687A
00016E18 7200                       		moveq	#0,d1
00016E1A 3228 0038                  		move.w	$38(a0),d1
00016E1E 9269 000C                  		sub.w	$C(a1),d1
00016E22 4841                       		swap	d1
00016E24 83C3                       		divs.w	d3,d1
00016E26 7000                       		moveq	#0,d0
00016E28 3028 0036                  		move.w	$36(a0),d0
00016E2C 9069 0008                  		sub.w	8(a1),d0
00016E30 6700                       		beq.s	loc_16866
00016E32 4840                       		swap	d0
00016E34 81C1                       		divs.w	d1,d0
00016E36                            
00016E36                            loc_16866:
00016E36 3340 0010                  		move.w	d0,$10(a1)
00016E3A 3343 0012                  		move.w	d3,$12(a1)
00016E3E 4A41                       		tst.w	d1
00016E40 6A00                       		bpl.s	loc_16874
00016E42 4441                       		neg.w	d1
00016E44                            
00016E44                            loc_16874:
00016E44 3141 002E                  		move.w	d1,$2E(a0)
00016E48 4E75                       		rts	
00016E4A                            ; ===========================================================================
00016E4A                            
00016E4A                            loc_1687A:
00016E4A 7000                       		moveq	#0,d0
00016E4C 3028 0036                  		move.w	$36(a0),d0
00016E50 9069 0008                  		sub.w	8(a1),d0
00016E54 4840                       		swap	d0
00016E56 81C2                       		divs.w	d2,d0
00016E58 7200                       		moveq	#0,d1
00016E5A 3228 0038                  		move.w	$38(a0),d1
00016E5E 9269 000C                  		sub.w	$C(a1),d1
00016E62 6700                       		beq.s	loc_16898
00016E64 4841                       		swap	d1
00016E66 83C0                       		divs.w	d0,d1
00016E68                            
00016E68                            loc_16898:
00016E68 3341 0012                  		move.w	d1,$12(a1)
00016E6C 3342 0010                  		move.w	d2,$10(a1)
00016E70 4A40                       		tst.w	d0
00016E72 6A00                       		bpl.s	loc_168A6
00016E74 4440                       		neg.w	d0
00016E76                            
00016E76                            loc_168A6:
00016E76 3140 002E                  		move.w	d0,$2E(a0)
00016E7A 4E75                       		rts	
00016E7C                            ; End of function sub_1681C
00016E7C                            
00016E7C                            ; ===========================================================================
00016E7C 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016E82 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016E88 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016E8C 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016E92 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016E98 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016E9E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016EA4 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016EAA 0884 0298 0894             		dc.w $884, $298, $894
00016EB0 0270 0894 0190             		dc.w $270, $894, $190
00016EB6 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016EBC 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016EC2 1184 0498 1158             		dc.w $1184, $498, $1158
00016EC8 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016ECE 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016ED4 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016EDA 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016EE0 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016EE6 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016EEC FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016EF2 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016EF8 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016EFE 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016F04                            ; ===========================================================================
00016F04                            ; ---------------------------------------------------------------------------
00016F04                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016F04                            ; ---------------------------------------------------------------------------
00016F04                            
00016F04                            Obj78:					; XREF: Obj_Index
00016F04 7000                       		moveq	#0,d0
00016F06 1028 0024                  		move.b	$24(a0),d0
00016F0A 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016F0E 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016F12                            ; ===========================================================================
00016F12 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016F14 0000                       		dc.w Obj78_Action-Obj78_Index
00016F16 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F18 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016F1A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F1C 0000                       		dc.w Obj78_Delete-Obj78_Index
00016F1E 0000                       		dc.w loc_16CC0-Obj78_Index
00016F20                            ; ===========================================================================
00016F20                            
00016F20                            locret_16950:
00016F20 4E75                       		rts	
00016F22                            ; ===========================================================================
00016F22                            
00016F22                            Obj78_Main:				; XREF: Obj78_Index
00016F22 117C 0007 0016             		move.b	#7,$16(a0)
00016F28 117C 0008 0017             		move.b	#8,$17(a0)
00016F2E 4EB9 0000 DB3E             		jsr	ObjectFall
00016F34 4EBA E4B6                  		jsr	ObjHitFloor
00016F38 4A41                       		tst.w	d1
00016F3A 6AE4                       		bpl.s	locret_16950
00016F3C D368 000C                  		add.w	d1,$C(a0)
00016F40 4268 0012                  		clr.w	$12(a0)
00016F44 5428 0024                  		addq.b	#2,$24(a0)
00016F48 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016F50 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016F56 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016F5C 6700                       		beq.s	loc_16996
00016F5E 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016F64                            
00016F64                            loc_16996:
00016F64 0228 0003 0001             		andi.b	#3,1(a0)
00016F6A 0028 0004 0001             		ori.b	#4,1(a0)
00016F70 1168 0001 0022             		move.b	1(a0),$22(a0)
00016F76 117C 0004 0018             		move.b	#4,$18(a0)
00016F7C 117C 0008 0019             		move.b	#8,$19(a0)
00016F82 117C 000B 0020             		move.b	#$B,$20(a0)
00016F88 3428 0008                  		move.w	8(a0),d2
00016F8C 7A0C                       		moveq	#$C,d5
00016F8E 0828 0000 0022             		btst	#0,$22(a0)
00016F94 6700                       		beq.s	loc_169CA
00016F96 4445                       		neg.w	d5
00016F98                            
00016F98                            loc_169CA:
00016F98 1C3C 0004                  		move.b	#4,d6
00016F9C 7600                       		moveq	#0,d3
00016F9E 7804                       		moveq	#4,d4
00016FA0 2448                       		movea.l	a0,a2
00016FA2 7202                       		moveq	#2,d1
00016FA4                            
00016FA4                            Obj78_LoadBody:
00016FA4 4EB9 0000 E02C             		jsr	SingleObjLoad2
00016FAA 6600                       		bne.s	Obj78_QuitLoad
00016FAC 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016FB0 1346 0024                  		move.b	d6,$24(a1)
00016FB4 5406                       		addq.b	#2,d6
00016FB6 2368 0004 0004             		move.l	4(a0),4(a1)
00016FBC 3368 0002 0002             		move.w	2(a0),2(a1)
00016FC2 137C 0005 0018             		move.b	#5,$18(a1)
00016FC8 137C 0008 0019             		move.b	#8,$19(a1)
00016FCE 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016FD4 D445                       		add.w	d5,d2
00016FD6 3342 0008                  		move.w	d2,8(a1)
00016FDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016FE0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016FE6 1368 0022 0001             		move.b	$22(a0),1(a1)
00016FEC 137C 0008 001A             		move.b	#8,$1A(a1)
00016FF2 234A 003C                  		move.l	a2,$3C(a1)
00016FF6 1344 003C                  		move.b	d4,$3C(a1)
00016FFA 5804                       		addq.b	#4,d4
00016FFC 2449                       		movea.l	a1,a2
00016FFE                            
00016FFE                            Obj78_QuitLoad:
00016FFE 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017002                            
00017002 117C 0007 002A             		move.b	#7,$2A(a0)
00017008 4228 003C                  		clr.b	$3C(a0)
0001700C                            
0001700C                            Obj78_Action:				; XREF: Obj78_Index
0001700C 4A28 0022                  		tst.b	$22(a0)
00017010 6B00 0000                  		bmi.w	loc_16C96
00017014 7000                       		moveq	#0,d0
00017016 1028 0025                  		move.b	$25(a0),d0
0001701A 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001701E 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017022 1228 002B                  		move.b	$2B(a0),d1
00017026 6A00                       		bpl.s	Obj78_Display
00017028 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001702E 1028 0026                  		move.b	$26(a0),d0
00017032 0240 007F                  		andi.w	#$7F,d0
00017036 5828 0026                  		addq.b	#4,$26(a0)
0001703A 1031 0000                  		move.b	(a1,d0.w),d0
0001703E 6A00                       		bpl.s	Obj78_AniHead
00017040 08A8 0007 002B             		bclr	#7,$2B(a0)
00017046 6000                       		bra.s	Obj78_Display
00017048                            ; ===========================================================================
00017048                            
00017048                            Obj78_AniHead:
00017048 0201 0010                  		andi.b	#$10,d1
0001704C D001                       		add.b	d1,d0
0001704E 1140 001A                  		move.b	d0,$1A(a0)
00017052                            
00017052                            Obj78_Display:
00017052 3028 0008                  		move.w	8(a0),d0
00017056 0240 FF80                  		andi.w	#$FF80,d0
0001705A 3238 F700                  		move.w	($FFFFF700).w,d1
0001705E 0441 0080                  		subi.w	#$80,d1
00017062 0241 FF80                  		andi.w	#$FF80,d1
00017066 9041                       		sub.w	d1,d0
00017068 0C40 0280                  		cmpi.w	#$280,d0
0001706C 6200 0000                  		bhi.w	Obj78_ChkGone
00017070 4EF9 0000 DB90             		jmp	DisplaySprite
00017076                            ; ===========================================================================
00017076                            
00017076                            Obj78_ChkGone:
00017076 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001707A 7000                       		moveq	#0,d0
0001707C 1028 0023                  		move.b	$23(a0),d0
00017080 6700                       		beq.s	loc_16ABC
00017082 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017088                            
00017088                            loc_16ABC:
00017088 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001708E 4E75                       		rts	
00017090                            ; ===========================================================================
00017090                            
00017090                            Obj78_Delete:				; XREF: Obj78_Index
00017090 4EF9 0000 DBCC             		jmp	DeleteObject
00017096                            ; ===========================================================================
00017096 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017098 0000                       		dc.w loc_16B02-Obj78_Index2
0001709A                            ; ===========================================================================
0001709A                            
0001709A                            Obj78_Move:				; XREF: Obj78_Index2
0001709A 5328 002A                  		subq.b	#1,$2A(a0)
0001709E 6B00                       		bmi.s	Obj78_Move2
000170A0 4E75                       		rts	
000170A2                            ; ===========================================================================
000170A2                            
000170A2                            Obj78_Move2:
000170A2 5428 0025                  		addq.b	#2,$25(a0)
000170A6 117C 0010 002A             		move.b	#$10,$2A(a0)
000170AC 317C FF40 0010             		move.w	#-$C0,$10(a0)
000170B2 317C 0040 0014             		move.w	#$40,$14(a0)
000170B8 0868 0004 002B             		bchg	#4,$2B(a0)
000170BE 6600                       		bne.s	loc_16AFC
000170C0 4268 0010                  		clr.w	$10(a0)
000170C4 4468 0014                  		neg.w	$14(a0)
000170C8                            
000170C8                            loc_16AFC:
000170C8 08E8 0007 002B             		bset	#7,$2B(a0)
000170CE                            
000170CE                            loc_16B02:				; XREF: Obj78_Index2
000170CE 5328 002A                  		subq.b	#1,$2A(a0)
000170D2 6B00                       		bmi.s	loc_16B5E
000170D4 2F28 0008                  		move.l	8(a0),-(sp)
000170D8 2428 0008                  		move.l	8(a0),d2
000170DC 3028 0010                  		move.w	$10(a0),d0
000170E0 0828 0000 0022             		btst	#0,$22(a0)
000170E6 6700                       		beq.s	loc_16B1E
000170E8 4440                       		neg.w	d0
000170EA                            
000170EA                            loc_16B1E:
000170EA 48C0                       		ext.l	d0
000170EC E180                       		asl.l	#8,d0
000170EE D480                       		add.l	d0,d2
000170F0 2142 0008                  		move.l	d2,8(a0)
000170F4 4EBA E2F6                  		jsr	ObjHitFloor
000170F8 241F                       		move.l	(sp)+,d2
000170FA 0C41 FFF8                  		cmpi.w	#-8,d1
000170FE 6D00                       		blt.s	loc_16B70
00017100 0C41 000C                  		cmpi.w	#$C,d1
00017104 6C00                       		bge.s	loc_16B70
00017106 D368 000C                  		add.w	d1,$C(a0)
0001710A 4842                       		swap	d2
0001710C B468 0008                  		cmp.w	8(a0),d2
00017110 6700                       		beq.s	locret_16B5C
00017112 7000                       		moveq	#0,d0
00017114 1028 003C                  		move.b	$3C(a0),d0
00017118 5228 003C                  		addq.b	#1,$3C(a0)
0001711C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017122 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017126                            
00017126                            locret_16B5C:
00017126 4E75                       		rts	
00017128                            ; ===========================================================================
00017128                            
00017128                            loc_16B5E:
00017128 5528 0025                  		subq.b	#2,$25(a0)
0001712C 117C 0007 002A             		move.b	#7,$2A(a0)
00017132 317C 0000 0010             		move.w	#0,$10(a0)
00017138 4E75                       		rts	
0001713A                            ; ===========================================================================
0001713A                            
0001713A                            loc_16B70:
0001713A 2142 0008                  		move.l	d2,8(a0)
0001713E 0868 0000 0022             		bchg	#0,$22(a0)
00017144 1168 0022 0001             		move.b	$22(a0),1(a0)
0001714A 7000                       		moveq	#0,d0
0001714C 1028 003C                  		move.b	$3C(a0),d0
00017150 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017156 5228 003C                  		addq.b	#1,$3C(a0)
0001715A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017160 4E75                       		rts	
00017162                            ; ===========================================================================
00017162                            
00017162                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017162 2268 003C                  		movea.l	$3C(a0),a1
00017166 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001716C 6A00                       		bpl.s	Obj78_BodySeg1
0001716E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017174 1028 0026                  		move.b	$26(a0),d0
00017178 0240 007F                  		andi.w	#$7F,d0
0001717C 5828 0026                  		addq.b	#4,$26(a0)
00017180 4A31 0004                  		tst.b	4(a1,d0.w)
00017184 6A00                       		bpl.s	Obj78_AniBody
00017186 5828 0026                  		addq.b	#4,$26(a0)
0001718A                            
0001718A                            Obj78_AniBody:
0001718A 1031 0000                  		move.b	(a1,d0.w),d0
0001718E 5000                       		addq.b	#8,d0
00017190 1140 001A                  		move.b	d0,$1A(a0)
00017194                            
00017194                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017194 2268 003C                  		movea.l	$3C(a0),a1
00017198 4A28 0022                  		tst.b	$22(a0)
0001719C 6B00 0000                  		bmi.w	loc_16C90
000171A0 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171A6 1169 0025 0025             		move.b	$25(a1),$25(a0)
000171AC 6700 0000                  		beq.w	loc_16C64
000171B0 3169 0014 0014             		move.w	$14(a1),$14(a0)
000171B6 3029 0010                  		move.w	$10(a1),d0
000171BA D069 0014                  		add.w	$14(a1),d0
000171BE 3140 0010                  		move.w	d0,$10(a0)
000171C2 2428 0008                  		move.l	8(a0),d2
000171C6 2602                       		move.l	d2,d3
000171C8 3028 0010                  		move.w	$10(a0),d0
000171CC 0828 0000 0022             		btst	#0,$22(a0)
000171D2 6700                       		beq.s	loc_16C0C
000171D4 4440                       		neg.w	d0
000171D6                            
000171D6                            loc_16C0C:
000171D6 48C0                       		ext.l	d0
000171D8 E180                       		asl.l	#8,d0
000171DA D480                       		add.l	d0,d2
000171DC 2142 0008                  		move.l	d2,8(a0)
000171E0 4843                       		swap	d3
000171E2 B668 0008                  		cmp.w	8(a0),d3
000171E6 6700                       		beq.s	loc_16C64
000171E8 7000                       		moveq	#0,d0
000171EA 1028 003C                  		move.b	$3C(a0),d0
000171EE 1231 002C                  		move.b	$2C(a1,d0.w),d1
000171F2 0C01 0080                  		cmpi.b	#-$80,d1
000171F6 6600                       		bne.s	loc_16C50
000171F8 4843                       		swap	d3
000171FA 2143 0008                  		move.l	d3,8(a0)
000171FE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017202 0868 0000 0022             		bchg	#0,$22(a0)
00017208 1168 0022 0001             		move.b	$22(a0),1(a0)
0001720E 5228 003C                  		addq.b	#1,$3C(a0)
00017212 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017218 6000                       		bra.s	loc_16C64
0001721A                            ; ===========================================================================
0001721A                            
0001721A                            loc_16C50:
0001721A 4881                       		ext.w	d1
0001721C D368 000C                  		add.w	d1,$C(a0)
00017220 5228 003C                  		addq.b	#1,$3C(a0)
00017224 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001722A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001722E                            
0001722E                            loc_16C64:
0001722E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017234 6700                       		beq.s	loc_16C90
00017236 0C11 0027                  		cmpi.b	#$27,0(a1)
0001723A 6700                       		beq.s	loc_16C7C
0001723C 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017242 6600                       		bne.s	loc_16C82
00017244                            
00017244                            loc_16C7C:
00017244 117C 000A 0024             		move.b	#$A,$24(a0)
0001724A                            
0001724A                            loc_16C82:
0001724A 4EF9 0000 DB90             		jmp	DisplaySprite
00017250                            
00017250                            ; ===========================================================================
00017250 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017258                            ; ===========================================================================
00017258                            
00017258                            loc_16C90:
00017258 08E9 0007 0022             		bset	#7,$22(a1)
0001725E                            
0001725E                            loc_16C96:
0001725E 7000                       		moveq	#0,d0
00017260 1028 0024                  		move.b	$24(a0),d0
00017264 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017268 0828 0000 0022             		btst	#0,$22(a0)
0001726E 6700                       		beq.s	loc_16CAA
00017270 4440                       		neg.w	d0
00017272                            
00017272                            loc_16CAA:
00017272 3140 0010                  		move.w	d0,$10(a0)
00017276 317C FC00 0012             		move.w	#-$400,$12(a0)
0001727C 117C 000C 0024             		move.b	#$C,$24(a0)
00017282 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017288                            
00017288                            loc_16CC0:				; XREF: Obj78_Index
00017288 4EB9 0000 DB3E             		jsr	ObjectFall
0001728E 4A68 0012                  		tst.w	$12(a0)
00017292 6B00                       		bmi.s	loc_16CE0
00017294 4EBA E156                  		jsr	ObjHitFloor
00017298 4A41                       		tst.w	d1
0001729A 6A00                       		bpl.s	loc_16CE0
0001729C D368 000C                  		add.w	d1,$C(a0)
000172A0 317C FC00 0012             		move.w	#-$400,$12(a0)
000172A6                            
000172A6                            loc_16CE0:
000172A6 4A28 0001                  		tst.b	1(a0)
000172AA 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000172AE 4EF9 0000 DB90             		jmp	DisplaySprite
000172B4                            ; ===========================================================================
000172B4                            Ani_obj78:
000172B4                            	include "_anim\obj78.asm"
000172B4                            ; ---------------------------------------------------------------------------
000172B4                            ; Animation script - Caterkiller enemy (uses non-standard format)
000172B4                            ; ---------------------------------------------------------------------------
000172B4 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000172C4 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000172D4 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000172E4 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000172F4 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017304 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017314 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017324 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017334                            	even
00017334                            	even
00017334                            
00017334                            ; ---------------------------------------------------------------------------
00017334                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017334                            ; ---------------------------------------------------------------------------
00017334                            Map_obj78:
00017334                            	include "_maps\obj78.asm"
00017334                            ; ---------------------------------------------------------------------------
00017334                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017334                            ; ---------------------------------------------------------------------------
00017334 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017338 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001733C 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017340 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017344 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017348 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001734C 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017350 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017354 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017358 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001735C 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017360 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017364 01                         byte_16D9E:	dc.b 1
00017365 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001736A 01                         byte_16DA4:	dc.b 1
0001736B F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017370 01                         byte_16DAA:	dc.b 1
00017371 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017376 01                         byte_16DB0:	dc.b 1
00017377 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001737C 01                         byte_16DB6:	dc.b 1
0001737D EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017382 01                         byte_16DBC:	dc.b 1
00017383 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017388 01                         byte_16DC2:	dc.b 1
00017389 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001738E 01                         byte_16DC8:	dc.b 1
0001738F EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017394 01                         byte_16DCE:	dc.b 1
00017395 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001739A 01                         byte_16DD4:	dc.b 1
0001739B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000173A0 01                         byte_16DDA:	dc.b 1
000173A1 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000173A6 01                         byte_16DE0:	dc.b 1
000173A7 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000173AC 01                         byte_16DE6:	dc.b 1
000173AD F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000173B2 01                         byte_16DEC:	dc.b 1
000173B3 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000173B8 01                         byte_16DF2:	dc.b 1
000173B9 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000173BE 01                         byte_16DF8:	dc.b 1
000173BF F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000173C4 01                         byte_16DFE:	dc.b 1
000173C5 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000173CA 01                         byte_16E04:	dc.b 1
000173CB F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000173D0 01                         byte_16E0A:	dc.b 1
000173D1 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000173D6 01                         byte_16E10:	dc.b 1
000173D7 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000173DC 01                         byte_16E16:	dc.b 1
000173DD EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000173E2 01                         byte_16E1C:	dc.b 1
000173E3 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000173E8 01                         byte_16E22:	dc.b 1
000173E9 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000173EE 01                         byte_16E28:	dc.b 1
000173EF EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000173F4                            		even
000173F4                            		even
000173F4                            
000173F4                            ; ===========================================================================
000173F4                            ; ---------------------------------------------------------------------------
000173F4                            ; Object 79 - lamppost
000173F4                            ; ---------------------------------------------------------------------------
000173F4                            
000173F4                            Obj79:					; XREF: Obj_Index
000173F4 7000                       		moveq	#0,d0
000173F6 1028 0024                  		move.b	$24(a0),d0
000173FA 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000173FE 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017402 4EFA 8834                  		jmp	MarkObjGone
00017406                            ; ===========================================================================
00017406 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017408 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001740A 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001740C 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001740E                            ; ===========================================================================
0001740E                            
0001740E                            Obj79_Main:				; XREF: Obj79_Index
0001740E 5428 0024                  		addq.b	#2,$24(a0)
00017412 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001741A 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017420 117C 0004 0001             		move.b	#4,1(a0)
00017426 117C 0008 0019             		move.b	#8,$19(a0)
0001742C 117C 0005 0018             		move.b	#5,$18(a0)
00017432 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017436 7000                       		moveq	#0,d0
00017438 1028 0023                  		move.b	$23(a0),d0
0001743C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017442 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017448 6600                       		bne.s	Obj79_RedLamp
0001744A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001744E 0201 007F                  		andi.b	#$7F,d1
00017452 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017456 0202 007F                  		andi.b	#$7F,d2
0001745A B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001745C 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001745E                            
0001745E                            Obj79_RedLamp:
0001745E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017464 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001746A 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017470 4E75                       		rts	
00017472                            ; ===========================================================================
00017472                            
00017472                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017472 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017476 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001747A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001747E 6B00 0000                  		bmi.w	locret_16F90
00017482 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017486 0201 007F                  		andi.b	#$7F,d1
0001748A 1428 0028                  		move.b	$28(a0),d2
0001748E 0202 007F                  		andi.b	#$7F,d2
00017492 B202                       		cmp.b	d2,d1
00017494 6500                       		bcs.s	Obj79_HitLamp
00017496 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001749A 7000                       		moveq	#0,d0
0001749C 1028 0023                  		move.b	$23(a0),d0
000174A0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174A6 117C 0004 0024             		move.b	#4,$24(a0)
000174AC 117C 0003 001A             		move.b	#3,$1A(a0)
000174B2 6000 0000                  		bra.w	locret_16F90
000174B6                            ; ===========================================================================
000174B6                            
000174B6                            Obj79_HitLamp:
000174B6 3038 D008                  		move.w	($FFFFD008).w,d0
000174BA 9068 0008                  		sub.w	8(a0),d0
000174BE 5040                       		addq.w	#8,d0
000174C0 0C40 0010                  		cmpi.w	#$10,d0
000174C4 6400 0000                  		bcc.w	locret_16F90
000174C8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174CC 9068 000C                  		sub.w	$C(a0),d0
000174D0 0640 0040                  		addi.w	#$40,d0
000174D4 0C40 0068                  		cmpi.w	#$68,d0
000174D8 6400                       		bcc.s	locret_16F90
000174DA 303C 00A1                  		move.w	#$A1,d0
000174DE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
000174E4 5428 0024                  		addq.b	#2,$24(a0)
000174E8 4EB9 0000 E016             		jsr	SingleObjLoad
000174EE 6600                       		bne.s	loc_16F76
000174F0 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000174F4 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000174FA 3368 0008 0030             		move.w	8(a0),$30(a1)
00017500 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017506 0469 0018 0032             		subi.w	#$18,$32(a1)
0001750C 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017514 337C 07A0 0002             		move.w	#$7A0,2(a1)
0001751A 137C 0004 0001             		move.b	#4,1(a1)
00017520 137C 0008 0019             		move.b	#8,$19(a1)
00017526 137C 0004 0018             		move.b	#4,$18(a1)
0001752C 137C 0002 001A             		move.b	#2,$1A(a1)
00017532 337C 0020 0036             		move.w	#$20,$36(a1)
00017538                            
00017538                            loc_16F76:
00017538 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001753E 6100 0000                  		bsr.w	Obj79_StoreInfo
00017542 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017546 7000                       		moveq	#0,d0
00017548 1028 0023                  		move.b	$23(a0),d0
0001754C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017552                            
00017552                            locret_16F90:
00017552 4E75                       		rts	
00017554                            ; ===========================================================================
00017554                            
00017554                            Obj79_AfterHit:				; XREF: Obj79_Index
00017554 4E75                       		rts	
00017556                            ; ===========================================================================
00017556                            
00017556                            Obj79_Twirl:				; XREF: Obj79_Index
00017556 5368 0036                  		subq.w	#1,$36(a0)
0001755A 6A00                       		bpl.s	loc_16FA0
0001755C 117C 0004 0024             		move.b	#4,$24(a0)
00017562                            
00017562                            loc_16FA0:
00017562 1028 0026                  		move.b	$26(a0),d0
00017566 0428 0010 0026             		subi.b	#$10,$26(a0)
0001756C 0400 0040                  		subi.b	#$40,d0
00017570 4EB9 0000 2C22             		jsr	(CalcSine).l
00017576 C3FC 0C00                  		muls.w	#$C00,d1
0001757A 4841                       		swap	d1
0001757C D268 0030                  		add.w	$30(a0),d1
00017580 3141 0008                  		move.w	d1,8(a0)
00017584 C1FC 0C00                  		muls.w	#$C00,d0
00017588 4840                       		swap	d0
0001758A D068 0032                  		add.w	$32(a0),d0
0001758E 3140 000C                  		move.w	d0,$C(a0)
00017592 4E75                       		rts	
00017594                            ; ===========================================================================
00017594                            ; ---------------------------------------------------------------------------
00017594                            ; Subroutine to	store information when you hit a lamppost
00017594                            ; ---------------------------------------------------------------------------
00017594                            
00017594                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017594 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001759A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000175A0 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000175A6 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000175AC 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000175B2 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000175B8 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000175BE 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000175C4 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000175CA 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000175D0 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000175D6 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000175DC 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000175E2 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000175E8 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000175EE 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000175F4 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000175FA 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017600 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017606 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001760C 4E75                       		rts	
0001760E                            
0001760E                            ; ---------------------------------------------------------------------------
0001760E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001760E                            ; ---------------------------------------------------------------------------
0001760E                            
0001760E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001760E                            
0001760E                            
0001760E                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001760E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017614 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001761A 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017620 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017626 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001762C 4278 FE20                  		clr.w	($FFFFFE20).w
00017630 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017634 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001763A 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017640 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017644 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001764A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017650 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017656 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001765C 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017662 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017668 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001766E 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017674 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001767A 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017680 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017686 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001768C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017692 6600                       		bne.s	loc_170E4
00017694 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001769A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000176A0 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000176A6                            
000176A6                            loc_170E4:
000176A6 4A38 FE30                  		tst.b	($FFFFFE30).w
000176AA 6A00                       		bpl.s	locret_170F6
000176AC 3038 FE32                  		move.w	($FFFFFE32).w,d0
000176B0 0440 00A0                  		subi.w	#$A0,d0
000176B4 31C0 F728                  		move.w	d0,($FFFFF728).w
000176B8                            
000176B8                            locret_170F6:
000176B8 4E75                       		rts	
000176BA                            ; End of function Obj79_LoadInfo
000176BA                            
000176BA                            ; ===========================================================================
000176BA                            ; ---------------------------------------------------------------------------
000176BA                            ; Sprite mappings - lamppost
000176BA                            ; ---------------------------------------------------------------------------
000176BA                            Map_obj79:
000176BA                            	include "_maps\obj79.asm"
000176BA                            ; ---------------------------------------------------------------------------
000176BA                            ; Sprite mappings - lamppost
000176BA                            ; ---------------------------------------------------------------------------
000176BA 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000176BE 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000176C2 06                         byte_17100:	dc.b 6
000176C3 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000176C8 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000176CD F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000176D2 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000176D7 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000176DC D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000176E1 04                         byte_1711F:	dc.b 4
000176E2 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000176E7 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000176EC F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000176F1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000176F6 02                         byte_17134:	dc.b 2
000176F7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000176FC F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017701 06                         byte_1713F:	dc.b 6
00017702 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017707 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001770C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017711 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017716 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001771B D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017720                            		even
00017720                            		even
00017720                            
00017720                            ; ===========================================================================
00017720                            ; ---------------------------------------------------------------------------
00017720                            ; Object 7D - hidden points at the end of a level
00017720                            ; ---------------------------------------------------------------------------
00017720                            
00017720                            Obj7D:					; XREF: Obj_Index
00017720 7000                       		moveq	#0,d0
00017722 1028 0024                  		move.b	$24(a0),d0
00017726 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001772A 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001772E                            ; ===========================================================================
0001772E 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017730 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017732                            ; ===========================================================================
00017732                            
00017732                            Obj7D_Main:				; XREF: Obj7D_Index
00017732 7410                       		moveq	#$10,d2
00017734 3602                       		move.w	d2,d3
00017736 D643                       		add.w	d3,d3
00017738 43F8 D000                  		lea	($FFFFD000).w,a1
0001773C 3029 0008                  		move.w	8(a1),d0
00017740 9068 0008                  		sub.w	8(a0),d0
00017744 D042                       		add.w	d2,d0
00017746 B043                       		cmp.w	d3,d0
00017748 6400                       		bcc.s	Obj7D_ChkDel
0001774A 3229 000C                  		move.w	$C(a1),d1
0001774E 9268 000C                  		sub.w	$C(a0),d1
00017752 D242                       		add.w	d2,d1
00017754 B243                       		cmp.w	d3,d1
00017756 6400                       		bcc.s	Obj7D_ChkDel
00017758 4A78 FE08                  		tst.w	($FFFFFE08).w
0001775C 6600                       		bne.s	Obj7D_ChkDel
0001775E 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017762 6600                       		bne.s	Obj7D_ChkDel
00017764 5428 0024                  		addq.b	#2,$24(a0)
00017768 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017770 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017776 0028 0004 0001             		ori.b	#4,1(a0)
0001777C 117C 0000 0018             		move.b	#0,$18(a0)
00017782 117C 0010 0019             		move.b	#$10,$19(a0)
00017788 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001778E 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017794 303C 00C9                  		move.w	#$C9,d0
00017798 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
0001779E 7000                       		moveq	#0,d0
000177A0 1028 0028                  		move.b	$28(a0),d0
000177A4 D040                       		add.w	d0,d0
000177A6 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000177AA 4EB9 0000 0000             		jsr	AddPoints
000177B0                            
000177B0                            Obj7D_ChkDel:
000177B0 3028 0008                  		move.w	8(a0),d0
000177B4 0240 FF80                  		andi.w	#$FF80,d0
000177B8 3238 F700                  		move.w	($FFFFF700).w,d1
000177BC 0441 0080                  		subi.w	#$80,d1
000177C0 0241 FF80                  		andi.w	#$FF80,d1
000177C4 9041                       		sub.w	d1,d0
000177C6 0C40 0280                  		cmpi.w	#$280,d0
000177CA 6200                       		bhi.s	Obj7D_Delete
000177CC 4E75                       		rts	
000177CE                            ; ===========================================================================
000177CE                            
000177CE                            Obj7D_Delete:
000177CE 4EF9 0000 DBCC             		jmp	DeleteObject
000177D4                            ; ===========================================================================
000177D4 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000177D6 03E8                       		dc.w 1000
000177D8 0064                       		dc.w 100
000177DA 0001                       		dc.w 1
000177DC                            ; ===========================================================================
000177DC                            
000177DC                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000177DC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000177E0 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000177E2 3028 0008                  		move.w	8(a0),d0
000177E6 0240 FF80                  		andi.w	#-$80,d0
000177EA 3238 F700                  		move.w	($FFFFF700).w,d1
000177EE 0441 0080                  		subi.w	#$80,d1
000177F2 0241 FF80                  		andi.w	#-$80,d1
000177F6 9041                       		sub.w	d1,d0
000177F8 0C40 0280                  		cmpi.w	#$280,d0
000177FC 6200                       		bhi.s	Obj7D_Delete2
000177FE 4EF9 0000 DB90             		jmp	DisplaySprite
00017804                            ; ===========================================================================
00017804                            
00017804                            Obj7D_Delete2:
00017804 4EF9 0000 DBCC             		jmp	DeleteObject
0001780A                            ; ===========================================================================
0001780A                            ; ---------------------------------------------------------------------------
0001780A                            ; Sprite mappings - hidden points at the end of	a level
0001780A                            ; ---------------------------------------------------------------------------
0001780A                            Map_obj7D:
0001780A                            	include "_maps\obj7D.asm"
0001780A                            ; ---------------------------------------------------------------------------
0001780A                            ; Sprite mappings - hidden points at the end of	a level
0001780A                            ; ---------------------------------------------------------------------------
0001780A 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001780E 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017812 00                         byte_17250:	dc.b 0
00017813 01                         byte_17251:	dc.b 1
00017814 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017819 01                         byte_17257:	dc.b 1
0001781A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001781F 01                         byte_1725D:	dc.b 1
00017820 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017826 00                         		even
00017826 00                         		even
00017826                            
00017826                            ; ===========================================================================
00017826                            ; ---------------------------------------------------------------------------
00017826                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017826                            ; ---------------------------------------------------------------------------
00017826                            
00017826                            Obj8A:					; XREF: Obj_Index
00017826 7000                       		moveq	#0,d0
00017828 1028 0024                  		move.b	$24(a0),d0
0001782C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017830 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017834                            ; ===========================================================================
00017834 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017836 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017838                            ; ===========================================================================
00017838                            
00017838                            Obj8A_Main:				; XREF: Obj8A_Index
00017838 5428 0024                  		addq.b	#2,$24(a0)
0001783C 317C 0120 0008             		move.w	#$120,8(a0)
00017842 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017848 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017850 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017856 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001785A 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001785E 117C 0000 0001             		move.b	#0,1(a0)
00017864 117C 0000 0018             		move.b	#0,$18(a0)
0001786A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017870 6600                       		bne.s	Obj8A_Display	; if not, branch
00017872 317C 00A6 0002             		move.w	#$A6,2(a0)
00017878 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001787E 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017882 6700                       		beq.s	Obj8A_Display	; if not, branch
00017884 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001788A 6600                       		bne.s	Obj8A_Display	; if not, branch
0001788C 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017892 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017898 4EF9 0000 DBCC             		jmp	DeleteObject
0001789E                            ; ===========================================================================
0001789E                            
0001789E                            Obj8A_Display:				; XREF: Obj8A_Index
0001789E 4EF9 0000 DB90             		jmp	DisplaySprite
000178A4                            ; ===========================================================================
000178A4                            ; ---------------------------------------------------------------------------
000178A4                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000178A4                            ; ---------------------------------------------------------------------------
000178A4                            Map_obj8A:
000178A4                            	include "_maps\obj8A.asm"
000178A4                            ; --------------------------------------------------------------------------------
000178A4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000178A4                            ; --------------------------------------------------------------------------------
000178A4                            
000178A4                            SME_MD8yg:	
000178A4 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000178A8 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000178AC 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000178B0 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
000178B4 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000178B8 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000178BA 0E                         SME_MD8yg_16:	dc.b $E	
000178BB F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
000178C0 F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
000178C5 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
000178CA F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
000178CF F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
000178D4 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
000178D9 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
000178DE F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
000178E3 F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
000178E8 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
000178ED F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
000178F2 F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
000178F7 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
000178FC F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
00017901 10                         SME_MD8yg_5D:	dc.b $10	
00017902 D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017907 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
0001790C D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
00017911 D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017916 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
0001791B D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
00017920 D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
00017925 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
0001792A 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
0001792F 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
00017934 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017939 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
0001793E 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
00017943 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017948 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
0001794D 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
00017952 0A                         SME_MD8yg_AE:	dc.b $A	
00017953 D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017958 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
0001795D D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
00017962 D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
00017967 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
0001796C D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
00017971 D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
00017976 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
0001797B 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
00017980 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
00017985 18                         SME_MD8yg_E1:	dc.b $18	
00017986 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
0001798B D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
00017990 D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
00017995 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
0001799A D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
0001799F D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
000179A4 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
000179A9 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
000179AE D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
000179B3 D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
000179B8 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
000179BD D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
000179C2 D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
000179C7 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
000179CC D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
000179D1 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
000179D6 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
000179DB 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
000179E0 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
000179E5 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
000179EA 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
000179EF 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
000179F4 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
000179F9 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
000179FE 14                         SME_MD8yg_15A:	dc.b $14	
000179FF D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017A04 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017A09 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017A0E D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017A13 D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017A18 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017A1D 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017A22 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017A27 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017A2C 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017A31 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017A36 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017A3B 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017A40 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017A45 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017A4A 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017A4F 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017A54 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017A59 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017A5E 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017A63 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017A64 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017A69 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017A6E D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017A73 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017A78 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017A7D D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017A82 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017A87 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017A8C D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017A91 D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017A96 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017A9B D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017AA0 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017AA5 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017AAA 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017AAF 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017AB4 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017AB9 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017ABE 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017AC3 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017AC8 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017ACD 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017AD2 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017AD7 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017ADC 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017AE1 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017AE6 17                         SME_MD8yg_242:	dc.b $17	
00017AE7 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017AEC D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017AF1 D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017AF6 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017AFB D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017B00 D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017B05 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017B0A D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017B0F D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017B14 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017B19 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017B1E D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017B23 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B28 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B2D 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017B32 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017B37 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017B3C 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017B41 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017B46 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017B4B 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017B50 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017B55 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017B5A 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017B5B D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017B60 D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017B65 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017B6A D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017B6F D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017B74 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017B79 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017B7E D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017B83 D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017B88 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017B8D D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017B92 D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017B97 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017B9C 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017BA1 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017BA6 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017BAB 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017BB0 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017BB5 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017BBA 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017BBF 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017BC4 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017BC9 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017BCE 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017BD3 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017BD8 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017BDD 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017BE2 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017BE7 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017BEC 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017BF1 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017BF6 0F                         SME_MD8yg_352:	dc.b $F	
00017BF7 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017BFC F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017C01 F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017C06 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017C0B F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017C10 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017C15 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017C1A F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017C1F F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017C24 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017C29 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017C2E F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017C33 F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017C38 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017C3D F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017C42 08                         SME_MD8yg_39E:	dc.b 8	
00017C43 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017C48 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017C4D 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017C52 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017C57 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017C5C 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017C61 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017C66 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017C6B 17                         SME_MD8yg_3C7:	dc.b $17	
00017C6C E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017C71 D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017C76 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017C7B E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017C80 D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017C85 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017C8A D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017C8F E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017C94 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017C99 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017C9E D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017CA3 D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017CA8 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017CAD E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017CB2 E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017CB7 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017CBC E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017CC1 E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017CC6 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017CCB F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017CD0 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017CD5 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017CDA F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017CE0 00                         		even
00017CE0 00                         		even
00017CE0                            
00017CE0                            ; ===========================================================================
00017CE0                            ; ---------------------------------------------------------------------------
00017CE0                            ; Object 3D - Eggman (GHZ)
00017CE0                            ; ---------------------------------------------------------------------------
00017CE0                            
00017CE0                            Obj3D:					; XREF: Obj_Index
00017CE0 7000                       		moveq	#0,d0
00017CE2 1028 0024                  		move.b	$24(a0),d0
00017CE6 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017CEA 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017CEE                            ; ===========================================================================
00017CEE 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017CF0 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017CF2 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017CF4 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017CF6                            
00017CF6 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017CF8 0401                       		dc.b 4,	1
00017CFA 0607                       		dc.b 6,	7
00017CFC                            ; ===========================================================================
00017CFC                            
00017CFC                            Obj3D_Main:				; XREF: Obj3D_Index
00017CFC 45F9 0001 7CF6             		lea	(Obj3D_ObjData).l,a2
00017D02 2248                       		movea.l	a0,a1
00017D04 7202                       		moveq	#2,d1
00017D06 6000                       		bra.s	Obj3D_LoadBoss
00017D08                            ; ===========================================================================
00017D08                            
00017D08                            Obj3D_Loop:
00017D08 4EB9 0000 E02C             		jsr	SingleObjLoad2
00017D0E 6600                       		bne.s	loc_17772
00017D10                            
00017D10                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017D10 135A 0024                  		move.b	(a2)+,$24(a1)
00017D14 12BC 003D                  		move.b	#$3D,0(a1)
00017D18 3368 0008 0008             		move.w	8(a0),8(a1)
00017D1E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D24 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017D2C 337C 0400 0002             		move.w	#$400,2(a1)
00017D32 137C 0004 0001             		move.b	#4,1(a1)
00017D38 137C 0020 0019             		move.b	#$20,$19(a1)
00017D3E 137C 0003 0018             		move.b	#3,$18(a1)
00017D44 135A 001C                  		move.b	(a2)+,$1C(a1)
00017D48 2348 0034                  		move.l	a0,$34(a1)
00017D4C 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017D50                            
00017D50                            loc_17772:
00017D50 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D56 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D5C 117C 000F 0020             		move.b	#$F,$20(a0)
00017D62 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017D68                            
00017D68                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017D68 7000                       		moveq	#0,d0
00017D6A 1028 0025                  		move.b	$25(a0),d0
00017D6E 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017D72 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017D76 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017D7C 4EB9 0000 AC66             		jsr	AnimateSprite
00017D82 1028 0022                  		move.b	$22(a0),d0
00017D86 0200 0003                  		andi.b	#3,d0
00017D8A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017D90 8128 0001                  		or.b	d0,1(a0)
00017D94 4EF9 0000 DB90             		jmp	DisplaySprite
00017D9A                            ; ===========================================================================
00017D9A 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017D9C 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017D9E 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017DA0 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017DA2 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017DA4 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017DA6 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017DA8                            ; ===========================================================================
00017DA8                            
00017DA8                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017DA8 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017DAE 6100 0000                  		bsr.w	BossMove
00017DB2 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017DB8 6600                       		bne.s	loc_177E6
00017DBA 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017DC0 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017DC4                            
00017DC4                            loc_177E6:
00017DC4 1028 003F                  		move.b	$3F(a0),d0
00017DC8 4EB9 0000 2C22             		jsr	(CalcSine).l
00017DCE EC40                       		asr.w	#6,d0
00017DD0 D068 0038                  		add.w	$38(a0),d0
00017DD4 3140 000C                  		move.w	d0,$C(a0)
00017DD8 3168 0030 0008             		move.w	$30(a0),8(a0)
00017DDE 5428 003F                  		addq.b	#2,$3F(a0)
00017DE2 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017DE8 6400                       		bcc.s	locret_1784A
00017DEA 4A28 0022                  		tst.b	$22(a0)
00017DEE 6B00                       		bmi.s	loc_1784C
00017DF0 4A28 0020                  		tst.b	$20(a0)
00017DF4 6600                       		bne.s	locret_1784A
00017DF6 4A28 003E                  		tst.b	$3E(a0)
00017DFA 6600                       		bne.s	Obj3D_ShipFlash
00017DFC 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017E02 303C 00AC                  		move.w	#$AC,d0
00017E06 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017E0C                            
00017E0C                            Obj3D_ShipFlash:
00017E0C 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017E10 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017E12 4A51                       		tst.w	(a1)
00017E14 6600                       		bne.s	loc_1783C
00017E16 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017E1A                            
00017E1A                            loc_1783C:
00017E1A 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017E1C 5328 003E                  		subq.b	#1,$3E(a0)
00017E20 6600                       		bne.s	locret_1784A
00017E22 117C 000F 0020             		move.b	#$F,$20(a0)
00017E28                            
00017E28                            locret_1784A:
00017E28 4E75                       		rts	
00017E2A                            ; ===========================================================================
00017E2A                            
00017E2A                            loc_1784C:				; XREF: loc_177E6
00017E2A 7064                       		moveq	#100,d0
00017E2C 6100 0000                  		bsr.w	AddPoints
00017E30 117C 0008 0025             		move.b	#8,$25(a0)
00017E36 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017E3C 4E75                       		rts	
00017E3E                            
00017E3E                            ; ---------------------------------------------------------------------------
00017E3E                            ; Defeated boss	subroutine
00017E3E                            ; ---------------------------------------------------------------------------
00017E3E                            
00017E3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E3E                            
00017E3E                            
00017E3E                            BossDefeated:
00017E3E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017E42 0200 0007                  		andi.b	#7,d0
00017E46 6600                       		bne.s	locret_178A2
00017E48 4EB9 0000 E016             		jsr	SingleObjLoad
00017E4E 6600                       		bne.s	locret_178A2
00017E50 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017E54 3368 0008 0008             		move.w	8(a0),8(a1)
00017E5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E60 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00017E66 3200                       		move.w	d0,d1
00017E68 7200                       		moveq	#0,d1
00017E6A 1200                       		move.b	d0,d1
00017E6C E409                       		lsr.b	#2,d1
00017E6E 0441 0020                  		subi.w	#$20,d1
00017E72 D369 0008                  		add.w	d1,8(a1)
00017E76 E048                       		lsr.w	#8,d0
00017E78 E608                       		lsr.b	#3,d0
00017E7A D169 000C                  		add.w	d0,$C(a1)
00017E7E                            
00017E7E                            locret_178A2:
00017E7E 4E75                       		rts	
00017E80                            ; End of function BossDefeated
00017E80                            
00017E80                            ; ---------------------------------------------------------------------------
00017E80                            ; Subroutine to	move a boss
00017E80                            ; ---------------------------------------------------------------------------
00017E80                            
00017E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E80                            
00017E80                            
00017E80                            BossMove:
00017E80 2428 0030                  		move.l	$30(a0),d2
00017E84 2628 0038                  		move.l	$38(a0),d3
00017E88 3028 0010                  		move.w	$10(a0),d0
00017E8C 48C0                       		ext.l	d0
00017E8E E180                       		asl.l	#8,d0
00017E90 D480                       		add.l	d0,d2
00017E92 3028 0012                  		move.w	$12(a0),d0
00017E96 48C0                       		ext.l	d0
00017E98 E180                       		asl.l	#8,d0
00017E9A D680                       		add.l	d0,d3
00017E9C 2142 0030                  		move.l	d2,$30(a0)
00017EA0 2143 0038                  		move.l	d3,$38(a0)
00017EA4 4E75                       		rts	
00017EA6                            ; End of function BossMove
00017EA6                            
00017EA6                            ; ===========================================================================
00017EA6                            
00017EA6                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017EA6 317C FF00 0010             		move.w	#-$100,$10(a0)
00017EAC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017EB2 6100 FFCC                  		bsr.w	BossMove
00017EB6 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017EBC 6600                       		bne.s	loc_17916
00017EBE 317C 0000 0010             		move.w	#0,$10(a0)
00017EC4 317C 0000 0012             		move.w	#0,$12(a0)
00017ECA 5428 0025                  		addq.b	#2,$25(a0)
00017ECE 4EB9 0000 E02C             		jsr	SingleObjLoad2
00017ED4 6600                       		bne.s	loc_17910
00017ED6 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017EDA 3368 0030 0008             		move.w	$30(a0),8(a1)
00017EE0 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017EE6 2348 0034                  		move.l	a0,$34(a1)
00017EEA                            
00017EEA                            loc_17910:
00017EEA 317C 0077 003C             		move.w	#$77,$3C(a0)
00017EF0                            
00017EF0                            loc_17916:
00017EF0 6000 FED2                  		bra.w	loc_177E6
00017EF4                            ; ===========================================================================
00017EF4                            
00017EF4                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017EF4 5368 003C                  		subq.w	#1,$3C(a0)
00017EF8 6A00                       		bpl.s	Obj3D_Reverse
00017EFA 5428 0025                  		addq.b	#2,$25(a0)
00017EFE 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F04 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017F0A 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017F10 6600                       		bne.s	Obj3D_Reverse
00017F12 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017F18 317C 0040 0010             		move.w	#$40,$10(a0)
00017F1E                            
00017F1E                            Obj3D_Reverse:
00017F1E 0828 0000 0022             		btst	#0,$22(a0)
00017F24 6600                       		bne.s	loc_17950
00017F26 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017F2A                            
00017F2A                            loc_17950:
00017F2A 6000 FE98                  		bra.w	loc_177E6
00017F2E                            ; ===========================================================================
00017F2E                            
00017F2E                            loc_17954:				; XREF: Obj3D_ShipIndex
00017F2E 5368 003C                  		subq.w	#1,$3C(a0)
00017F32 6B00                       		bmi.s	loc_17960
00017F34 6100 FF4A                  		bsr.w	BossMove
00017F38 6000                       		bra.s	loc_17976
00017F3A                            ; ===========================================================================
00017F3A                            
00017F3A                            loc_17960:
00017F3A 0868 0000 0022             		bchg	#0,$22(a0)
00017F40 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F46 5528 0025                  		subq.b	#2,$25(a0)
00017F4A 317C 0000 0010             		move.w	#0,$10(a0)
00017F50                            
00017F50                            loc_17976:
00017F50 6000 FE72                  		bra.w	loc_177E6
00017F54                            ; ===========================================================================
00017F54                            
00017F54                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017F54 5368 003C                  		subq.w	#1,$3C(a0)
00017F58 6B00                       		bmi.s	loc_17984
00017F5A 6000 FEE2                  		bra.w	BossDefeated
00017F5E                            ; ===========================================================================
00017F5E                            
00017F5E                            loc_17984:
00017F5E 08E8 0000 0022             		bset	#0,$22(a0)
00017F64 08A8 0007 0022             		bclr	#7,$22(a0)
00017F6A 4268 0010                  		clr.w	$10(a0)
00017F6E 5428 0025                  		addq.b	#2,$25(a0)
00017F72 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017F78 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017F7C 6600                       		bne.s	locret_179AA
00017F7E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017F84                            
00017F84                            locret_179AA:
00017F84 4E75                       		rts	
00017F86                            ; ===========================================================================
00017F86                            
00017F86                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017F86 5268 003C                  		addq.w	#1,$3C(a0)
00017F8A 6700                       		beq.s	loc_179BC
00017F8C 6A00                       		bpl.s	loc_179C2
00017F8E 0668 0018 0012             		addi.w	#$18,$12(a0)
00017F94 6000                       		bra.s	loc_179EE
00017F96                            ; ===========================================================================
00017F96                            
00017F96                            loc_179BC:
00017F96 4268 0012                  		clr.w	$12(a0)
00017F9A 6000                       		bra.s	loc_179EE
00017F9C                            ; ===========================================================================
00017F9C                            
00017F9C                            loc_179C2:
00017F9C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017FA2 6500                       		bcs.s	loc_179DA
00017FA4 6700                       		beq.s	loc_179E0
00017FA6 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017FAC 6500                       		bcs.s	loc_179EE
00017FAE 5428 0025                  		addq.b	#2,$25(a0)
00017FB2 6000                       		bra.s	loc_179EE
00017FB4                            ; ===========================================================================
00017FB4                            
00017FB4                            loc_179DA:
00017FB4 5168 0012                  		subq.w	#8,$12(a0)
00017FB8 6000                       		bra.s	loc_179EE
00017FBA                            ; ===========================================================================
00017FBA                            
00017FBA                            loc_179E0:
00017FBA 4268 0012                  		clr.w	$12(a0)
00017FBE 303C 0081                  		move.w	#$81,d0
00017FC2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00017FC8                            
00017FC8                            loc_179EE:
00017FC8 6100 FEB6                  		bsr.w	BossMove
00017FCC 6000 FDF6                  		bra.w	loc_177E6
00017FD0                            ; ===========================================================================
00017FD0                            
00017FD0                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017FD0 317C 0400 0010             		move.w	#$400,$10(a0)
00017FD6 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017FDC 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017FE2 6700                       		beq.s	loc_17A10
00017FE4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017FE8 6000                       		bra.s	loc_17A16
00017FEA                            ; ===========================================================================
00017FEA                            
00017FEA                            loc_17A10:
00017FEA 4A28 0001                  		tst.b	1(a0)
00017FEE 6A00                       		bpl.s	Obj3D_ShipDel
00017FF0                            
00017FF0                            loc_17A16:
00017FF0 6100 FE8E                  		bsr.w	BossMove
00017FF4 6000 FDCE                  		bra.w	loc_177E6
00017FF8                            ; ===========================================================================
00017FF8                            
00017FF8                            Obj3D_ShipDel:
00017FF8 4EF9 0000 DBCC             		jmp	DeleteObject
00017FFE                            ; ===========================================================================
00017FFE                            
00017FFE                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017FFE 7000                       		moveq	#0,d0
00018000 7201                       		moveq	#1,d1
00018002 2268 0034                  		movea.l	$34(a0),a1
00018006 1029 0025                  		move.b	$25(a1),d0
0001800A 5900                       		subq.b	#4,d0
0001800C 6600                       		bne.s	loc_17A3E
0001800E 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018014 6600                       		bne.s	loc_17A46
00018016 7204                       		moveq	#4,d1
00018018                            
00018018                            loc_17A3E:
00018018 5D00                       		subq.b	#6,d0
0001801A 6B00                       		bmi.s	loc_17A46
0001801C 720A                       		moveq	#$A,d1
0001801E 6000                       		bra.s	loc_17A5A
00018020                            ; ===========================================================================
00018020                            
00018020                            loc_17A46:
00018020 4A29 0020                  		tst.b	$20(a1)
00018024 6600                       		bne.s	loc_17A50
00018026 7205                       		moveq	#5,d1
00018028 6000                       		bra.s	loc_17A5A
0001802A                            ; ===========================================================================
0001802A                            
0001802A                            loc_17A50:
0001802A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018030 6500                       		bcs.s	loc_17A5A
00018032 7204                       		moveq	#4,d1
00018034                            
00018034                            loc_17A5A:
00018034 1141 001C                  		move.b	d1,$1C(a0)
00018038 5500                       		subq.b	#2,d0
0001803A 6600                       		bne.s	Obj3D_FaceDisp
0001803C 117C 0006 001C             		move.b	#6,$1C(a0)
00018042 4A28 0001                  		tst.b	1(a0)
00018046 6A00                       		bpl.s	Obj3D_FaceDel
00018048                            
00018048                            Obj3D_FaceDisp:
00018048 6000                       		bra.s	Obj3D_Display
0001804A                            ; ===========================================================================
0001804A                            
0001804A                            Obj3D_FaceDel:
0001804A 4EF9 0000 DBCC             		jmp	DeleteObject
00018050                            ; ===========================================================================
00018050                            
00018050                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018050 117C 0007 001C             		move.b	#7,$1C(a0)
00018056 2268 0034                  		movea.l	$34(a0),a1
0001805A 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018060 6600                       		bne.s	loc_17A96
00018062 117C 000B 001C             		move.b	#$B,$1C(a0)
00018068 4A28 0001                  		tst.b	1(a0)
0001806C 6A00                       		bpl.s	Obj3D_FlameDel
0001806E 6000                       		bra.s	Obj3D_FlameDisp
00018070                            ; ===========================================================================
00018070                            
00018070                            loc_17A96:
00018070 3029 0010                  		move.w	$10(a1),d0
00018074 6700                       		beq.s	Obj3D_FlameDisp
00018076 117C 0008 001C             		move.b	#8,$1C(a0)
0001807C                            
0001807C                            Obj3D_FlameDisp:
0001807C 6000                       		bra.s	Obj3D_Display
0001807E                            ; ===========================================================================
0001807E                            
0001807E                            Obj3D_FlameDel:
0001807E 4EF9 0000 DBCC             		jmp	DeleteObject
00018084                            ; ===========================================================================
00018084                            
00018084                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018084 2268 0034                  		movea.l	$34(a0),a1
00018088 3169 0008 0008             		move.w	8(a1),8(a0)
0001808E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018094 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001809A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180A0 4EB9 0000 AC66             		jsr	AnimateSprite
000180A6 1028 0022                  		move.b	$22(a0),d0
000180AA 0200 0003                  		andi.b	#3,d0
000180AE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180B4 8128 0001                  		or.b	d0,1(a0)
000180B8 4EF9 0000 DB90             		jmp	DisplaySprite
000180BE                            ; ===========================================================================
000180BE                            ; ---------------------------------------------------------------------------
000180BE                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000180BE                            ; ---------------------------------------------------------------------------
000180BE                            
000180BE                            Obj48:					; XREF: Obj_Index
000180BE 7000                       		moveq	#0,d0
000180C0 1028 0024                  		move.b	$24(a0),d0
000180C4 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000180C8 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000180CC                            ; ===========================================================================
000180CC 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000180CE 0000                       		dc.w Obj48_Base-Obj48_Index
000180D0 0000                       		dc.w Obj48_Display2-Obj48_Index
000180D2 0000                       		dc.w loc_17C68-Obj48_Index
000180D4 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000180D6                            ; ===========================================================================
000180D6                            
000180D6                            Obj48_Main:				; XREF: Obj48_Index
000180D6 5428 0024                  		addq.b	#2,$24(a0)
000180DA 317C 4080 0026             		move.w	#$4080,$26(a0)
000180E0 317C FE00 003E             		move.w	#-$200,$3E(a0)
000180E6 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000180EE 317C 046C 0002             		move.w	#$46C,2(a0)
000180F4 45E8 0028                  		lea	$28(a0),a2
000180F8 14FC 0000                  		move.b	#0,(a2)+
000180FC 7205                       		moveq	#5,d1
000180FE 2248                       		movea.l	a0,a1
00018100 6000                       		bra.s	loc_17B60
00018102                            ; ===========================================================================
00018102                            
00018102                            Obj48_MakeLinks:
00018102 4EB9 0000 E02C             		jsr	SingleObjLoad2
00018108 6600                       		bne.s	Obj48_MakeBall
0001810A 3368 0008 0008             		move.w	8(a0),8(a1)
00018110 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018116 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001811A 137C 0006 0024             		move.b	#6,$24(a1)
00018120 237C 0000 8096 0004        		move.l	#Map_obj15,4(a1)
00018128 337C 0380 0002             		move.w	#$380,2(a1)
0001812E 137C 0001 001A             		move.b	#1,$1A(a1)
00018134 5228 0028                  		addq.b	#1,$28(a0)
00018138                            
00018138                            loc_17B60:				; XREF: Obj48_Main
00018138 3A09                       		move.w	a1,d5
0001813A 0445 D000                  		subi.w	#$D000,d5
0001813E EC4D                       		lsr.w	#6,d5
00018140 0245 007F                  		andi.w	#$7F,d5
00018144 14C5                       		move.b	d5,(a2)+
00018146 137C 0004 0001             		move.b	#4,1(a1)
0001814C 137C 0008 0019             		move.b	#8,$19(a1)
00018152 137C 0006 0018             		move.b	#6,$18(a1)
00018158 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001815E 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018162                            
00018162                            Obj48_MakeBall:
00018162 137C 0008 0024             		move.b	#8,$24(a1)
00018168 237C 0000 85F4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018170 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018176 137C 0001 001A             		move.b	#1,$1A(a1)
0001817C 137C 0005 0018             		move.b	#5,$18(a1)
00018182 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018188 4E75                       		rts	
0001818A                            ; ===========================================================================
0001818A                            
0001818A 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018190                            
00018190                            ; ===========================================================================
00018190                            
00018190                            Obj48_Base:				; XREF: Obj48_Index
00018190 47F9 0001 818A             		lea	(Obj48_PosData).l,a3
00018196 45E8 0028                  		lea	$28(a0),a2
0001819A 7C00                       		moveq	#0,d6
0001819C 1C1A                       		move.b	(a2)+,d6
0001819E                            
0001819E                            loc_17BC6:
0001819E 7800                       		moveq	#0,d4
000181A0 181A                       		move.b	(a2)+,d4
000181A2 ED4C                       		lsl.w	#6,d4
000181A4 0684 00FF D000             		addi.l	#$FFD000,d4
000181AA 2244                       		movea.l	d4,a1
000181AC 101B                       		move.b	(a3)+,d0
000181AE B029 003C                  		cmp.b	$3C(a1),d0
000181B2 6700                       		beq.s	loc_17BE0
000181B4 5229 003C                  		addq.b	#1,$3C(a1)
000181B8                            
000181B8                            loc_17BE0:
000181B8 51CE FFE4                  		dbf	d6,loc_17BC6
000181BC                            
000181BC B029 003C                  		cmp.b	$3C(a1),d0
000181C0 6600                       		bne.s	loc_17BFA
000181C2 2268 0034                  		movea.l	$34(a0),a1
000181C6 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000181CC 6600                       		bne.s	loc_17BFA
000181CE 5428 0024                  		addq.b	#2,$24(a0)
000181D2                            
000181D2                            loc_17BFA:
000181D2 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000181D8 6700                       		beq.s	Obj48_Display
000181DA 5268 0032                  		addq.w	#1,$32(a0)
000181DE                            
000181DE                            Obj48_Display:
000181DE 6100 0000                  		bsr.w	sub_17C2A
000181E2 1028 0026                  		move.b	$26(a0),d0
000181E6 4EB9 0000 8008             		jsr	(Obj15_Move2).l
000181EC 4EF9 0000 DB90             		jmp	DisplaySprite
000181F2                            ; ===========================================================================
000181F2                            
000181F2                            Obj48_Display2:				; XREF: Obj48_Index
000181F2 6100 0000                  		bsr.w	sub_17C2A
000181F6 4EB9 0000 7FC8             		jsr	(Obj48_Move).l
000181FC 4EF9 0000 DB90             		jmp	DisplaySprite
00018202                            
00018202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018202                            
00018202                            
00018202                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018202 2268 0034                  		movea.l	$34(a0),a1
00018206 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001820C 6400                       		bcc.s	loc_17C3C
0001820E 0868 0000 001A             		bchg	#0,$1A(a0)
00018214                            
00018214                            loc_17C3C:
00018214 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001821A 3029 000C                  		move.w	$C(a1),d0
0001821E D068 0032                  		add.w	$32(a0),d0
00018222 3140 0038                  		move.w	d0,$38(a0)
00018226 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001822C 4A29 0022                  		tst.b	$22(a1)
00018230 6A00                       		bpl.s	locret_17C66
00018232 10BC 003F                  		move.b	#$3F,0(a0)
00018236 117C 0000 0024             		move.b	#0,$24(a0)
0001823C                            
0001823C                            locret_17C66:
0001823C 4E75                       		rts	
0001823E                            ; End of function sub_17C2A
0001823E                            
0001823E                            ; ===========================================================================
0001823E                            
0001823E                            loc_17C68:				; XREF: Obj48_Index
0001823E 2268 0034                  		movea.l	$34(a0),a1
00018242 4A29 0022                  		tst.b	$22(a1)
00018246 6A00                       		bpl.s	Obj48_Display3
00018248 10BC 003F                  		move.b	#$3F,0(a0)
0001824C 117C 0000 0024             		move.b	#0,$24(a0)
00018252                            
00018252                            Obj48_Display3:
00018252 4EF9 0000 DB90             		jmp	DisplaySprite
00018258                            ; ===========================================================================
00018258                            
00018258                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018258 7000                       		moveq	#0,d0
0001825A 4A28 001A                  		tst.b	$1A(a0)
0001825E 6600                       		bne.s	Obj48_Vanish
00018260 5200                       		addq.b	#1,d0
00018262                            
00018262                            Obj48_Vanish:
00018262 1140 001A                  		move.b	d0,$1A(a0)
00018266 2268 0034                  		movea.l	$34(a0),a1
0001826A 4A29 0022                  		tst.b	$22(a1)
0001826E 6A00                       		bpl.s	Obj48_Display4
00018270 117C 0000 0020             		move.b	#0,$20(a0)
00018276 6100 FBC6                  		bsr.w	BossDefeated
0001827A 5328 003C                  		subq.b	#1,$3C(a0)
0001827E 6A00                       		bpl.s	Obj48_Display4
00018280 10BC 003F                  		move.b	#$3F,(a0)
00018284 117C 0000 0024             		move.b	#0,$24(a0)
0001828A                            
0001828A                            Obj48_Display4:
0001828A 4EF9 0000 DB90             		jmp	DisplaySprite
00018290                            ; ===========================================================================
00018290                            Ani_Eggman:
00018290                            	include "_anim\Eggman.asm"
00018290                            ; ---------------------------------------------------------------------------
00018290                            ; Animation script - Eggman (bosses)
00018290                            ; ---------------------------------------------------------------------------
00018290 0000                       		dc.w byte_17CD4-Ani_Eggman
00018292 0000                       		dc.w byte_17CD8-Ani_Eggman
00018294 0000                       		dc.w byte_17CDC-Ani_Eggman
00018296 0000                       		dc.w byte_17CE0-Ani_Eggman
00018298 0000                       		dc.w byte_17CE4-Ani_Eggman
0001829A 0000                       		dc.w byte_17CE8-Ani_Eggman
0001829C 0000                       		dc.w byte_17CEC-Ani_Eggman
0001829E 0000                       		dc.w byte_17CF0-Ani_Eggman
000182A0 0000                       		dc.w byte_17CF4-Ani_Eggman
000182A2 0000                       		dc.w byte_17CF8-Ani_Eggman
000182A4 0000                       		dc.w byte_17CFC-Ani_Eggman
000182A6 0000                       		dc.w byte_17D00-Ani_Eggman
000182A8 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000182AC 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000182B0 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000182B4 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000182B8 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000182BC 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000182C0 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000182C4 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000182C8 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000182CC 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000182D0 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000182D4 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000182E0                            		even
000182E0                            		even
000182E0                            
000182E0                            ; ---------------------------------------------------------------------------
000182E0                            ; Sprite mappings - Eggman (boss levels)
000182E0                            ; ---------------------------------------------------------------------------
000182E0                            Map_Eggman:
000182E0                            	include "_maps\Eggman.asm"
000182E0                            Map_dc7e:
000182E0 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000182E2 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000182E4 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000182E6 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000182E8 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000182EA 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000182EC 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000182EE 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000182F0 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000182F2 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000182F4 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000182F6 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000182F8 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000182FA 06                         Map_dc7e_1A: 	dc.b $6
000182FB EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018300 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018305 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001830A FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
0001830F 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018314 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018319 02                         Map_dc7e_39: 	dc.b $2
0001831A E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001831F EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018324 02                         Map_dc7e_44: 	dc.b $2
00018325 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001832A EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001832F 03                         Map_dc7e_4F: 	dc.b $3
00018330 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018335 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001833A EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
0001833F 03                         Map_dc7e_5F: 	dc.b $3
00018340 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018345 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001834A EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
0001834F 03                         Map_dc7e_6F: 	dc.b $3
00018350 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018355 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001835A EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001835F 03                         Map_dc7e_7F: 	dc.b $3
00018360 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018365 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001836A EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001836F 04                         Map_dc7e_8F: 	dc.b $4
00018370 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018375 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001837A EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001837F EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018384 01                         Map_dc7e_A4: 	dc.b $1
00018385 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001838A 01                         Map_dc7e_AA: 	dc.b $1
0001838B 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018390 00                         Map_dc7e_B0: 	dc.b $0
00018391 02                         Map_dc7e_B1: 	dc.b $2
00018392 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018397 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001839C 02                         Map_dc7e_BC: 	dc.b $2
0001839D F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000183A2 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000183A8 00                         	even
000183A8 00                         	even
000183A8                            
000183A8                            ; ---------------------------------------------------------------------------
000183A8                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183A8                            ; ---------------------------------------------------------------------------
000183A8                            Map_BossItems:
000183A8                            	include "_maps\Boss items.asm"
000183A8                            ; ---------------------------------------------------------------------------
000183A8                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183A8                            ; ---------------------------------------------------------------------------
000183A8 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000183AC 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000183B0 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000183B4 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000183B8 01                         byte_17DE4:	dc.b 1
000183B9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183BE 02                         byte_17DEA:	dc.b 2
000183BF FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000183C4 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183C9 00                         		dc.b 0
000183CA 01                         byte_17DF6:	dc.b 1
000183CB FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000183D0 01                         byte_17DFC:	dc.b 1
000183D1 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000183D6 01                         byte_17E02:	dc.b 1
000183D7 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000183DC 04                         byte_17E08:	dc.b 4
000183DD F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000183E2 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000183E7 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000183EC 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000183F1 00                         		dc.b 0
000183F2 02                         byte_17E1E:	dc.b 2
000183F3 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000183F8 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000183FD 00                         		dc.b 0
000183FE 02                         byte_17E2A:	dc.b 2
000183FF 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018404 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001840A 00                         		even
0001840A 00                         		even
0001840A                            
0001840A                            ; ===========================================================================
0001840A                            ; ---------------------------------------------------------------------------
0001840A                            ; Object 77 - Eggman (LZ)
0001840A                            ; ---------------------------------------------------------------------------
0001840A                            
0001840A                            Obj77:					; XREF: Obj_Index
0001840A 7000                       		moveq	#0,d0
0001840C 1028 0024                  		move.b	$24(a0),d0
00018410 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018414 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018418                            ; ===========================================================================
00018418 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001841A 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001841C 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001841E 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018420                            
00018420 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018422 0401                       		dc.b 4,	1
00018424 0607                       		dc.b 6,	7
00018426                            ; ===========================================================================
00018426                            
00018426                            Obj77_Main:				; XREF: Obj77_Index
00018426 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001842C 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00018432 3168 0008 0030             		move.w	8(a0),$30(a0)
00018438 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001843E 117C 000F 0020             		move.b	#$F,$20(a0)
00018444 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001844A 117C 0004 0018             		move.b	#4,$18(a0)
00018450 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00018454 2248                       		movea.l	a0,a1
00018456 7202                       		moveq	#2,d1
00018458 6000                       		bra.s	Obj77_LoadBoss
0001845A                            ; ===========================================================================
0001845A                            
0001845A                            Obj77_Loop:
0001845A 4EB9 0000 E02C             		jsr	SingleObjLoad2
00018460 6600                       		bne.s	Obj77_ShipMain
00018462 12BC 0077                  		move.b	#$77,0(a1)
00018466 3368 0008 0008             		move.w	8(a0),8(a1)
0001846C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018472                            
00018472                            Obj77_LoadBoss:				; XREF: Obj77_Main
00018472 08A8 0000 0022             		bclr	#0,$22(a0)
00018478 4229 0025                  		clr.b	$25(a1)
0001847C 135A 0024                  		move.b	(a2)+,$24(a1)
00018480 135A 001C                  		move.b	(a2)+,$1C(a1)
00018484 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001848A 237C 0001 82E0 0004        		move.l	#Map_Eggman,4(a1)
00018492 337C 0400 0002             		move.w	#$400,2(a1)
00018498 137C 0004 0001             		move.b	#4,1(a1)
0001849E 137C 0020 0019             		move.b	#$20,$19(a1)
000184A4 2348 0034                  		move.l	a0,$34(a1)
000184A8 51C9 FFB0                  		dbf	d1,Obj77_Loop
000184AC                            
000184AC                            Obj77_ShipMain:
000184AC 43F8 D000                  		lea	($FFFFD000).w,a1
000184B0 7000                       		moveq	#0,d0
000184B2 1028 0025                  		move.b	$25(a0),d0
000184B6 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000184BA 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000184BE 43F9 0001 8290             		lea	(Ani_Eggman).l,a1
000184C4 4EB9 0000 AC66             		jsr	AnimateSprite
000184CA 7003                       		moveq	#3,d0
000184CC C028 0022                  		and.b	$22(a0),d0
000184D0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000184D6 8128 0001                  		or.b	d0,1(a0)
000184DA 4EF9 0000 DB90             		jmp	DisplaySprite
000184E0                            ; ===========================================================================
000184E0 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000184E4 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000184E8 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000184EC 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000184F0                            ; ===========================================================================
000184F0                            
000184F0                            loc_17F1E:				; XREF: Obj77_ShipIndex
000184F0 3029 0008                  		move.w	8(a1),d0
000184F4 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000184F8 6500                       		bcs.s	loc_17F38
000184FA 317C FE80 0012             		move.w	#-$180,$12(a0)
00018500 317C 0060 0010             		move.w	#$60,$10(a0)
00018506 5428 0025                  		addq.b	#2,$25(a0)
0001850A                            
0001850A                            loc_17F38:
0001850A 6100 F974                  		bsr.w	BossMove
0001850E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018514 3168 0030 0008             		move.w	$30(a0),8(a0)
0001851A                            
0001851A                            loc_17F48:
0001851A 4A28 003D                  		tst.b	$3D(a0)
0001851E 6600                       		bne.s	loc_17F8E
00018520 4A28 0022                  		tst.b	$22(a0)
00018524 6B00                       		bmi.s	loc_17F92
00018526 4A28 0020                  		tst.b	$20(a0)
0001852A 6600                       		bne.s	locret_17F8C
0001852C 4A28 003E                  		tst.b	$3E(a0)
00018530 6600                       		bne.s	loc_17F70
00018532 117C 0020 003E             		move.b	#$20,$3E(a0)
00018538 303C 00AC                  		move.w	#$AC,d0
0001853C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
00018542                            
00018542                            loc_17F70:
00018542 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018546 7000                       		moveq	#0,d0
00018548 4A51                       		tst.w	(a1)
0001854A 6600                       		bne.s	loc_17F7E
0001854C 303C 0EEE                  		move.w	#$EEE,d0
00018550                            
00018550                            loc_17F7E:
00018550 3280                       		move.w	d0,(a1)
00018552 5328 003E                  		subq.b	#1,$3E(a0)
00018556 6600                       		bne.s	locret_17F8C
00018558 117C 000F 0020             		move.b	#$F,$20(a0)
0001855E                            
0001855E                            locret_17F8C:
0001855E 4E75                       		rts	
00018560                            ; ===========================================================================
00018560                            
00018560                            loc_17F8E:				; XREF: loc_17F48
00018560 6000 F8DC                  		bra.w	BossDefeated
00018564                            ; ===========================================================================
00018564                            
00018564                            loc_17F92:				; XREF: loc_17F48
00018564 7064                       		moveq	#100,d0
00018566 6100 0000                  		bsr.w	AddPoints
0001856A 117C 00FF 003D             		move.b	#-1,$3D(a0)
00018570 4E75                       		rts	
00018572                            ; ===========================================================================
00018572                            
00018572                            loc_17FA0:				; XREF: Obj77_ShipIndex
00018572 70FE                       		moveq	#-2,d0
00018574 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001857A 6500                       		bcs.s	loc_17FB6
0001857C 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00018582 4268 0010                  		clr.w	$10(a0)
00018586 5240                       		addq.w	#1,d0
00018588                            
00018588                            loc_17FB6:
00018588 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001858E 6E00                       		bgt.s	loc_17FCA
00018590 317C 0500 0038             		move.w	#$500,$38(a0)
00018596 4268 0012                  		clr.w	$12(a0)
0001859A 5240                       		addq.w	#1,d0
0001859C                            
0001859C                            loc_17FCA:
0001859C 6600                       		bne.s	loc_17FDC
0001859E 317C 0140 0010             		move.w	#$140,$10(a0)
000185A4 317C FE00 0012             		move.w	#-$200,$12(a0)
000185AA 5428 0025                  		addq.b	#2,$25(a0)
000185AE                            
000185AE                            loc_17FDC:
000185AE 6000 FF5A                  		bra.w	loc_17F38
000185B2                            ; ===========================================================================
000185B2                            
000185B2                            loc_17FE0:				; XREF: Obj77_ShipIndex
000185B2 70FE                       		moveq	#-2,d0
000185B4 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000185BA 6500                       		bcs.s	loc_17FF6
000185BC 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000185C2 4268 0010                  		clr.w	$10(a0)
000185C6 5240                       		addq.w	#1,d0
000185C8                            
000185C8                            loc_17FF6:
000185C8 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000185CE 6E00                       		bgt.s	loc_1800A
000185D0 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000185D6 4268 0012                  		clr.w	$12(a0)
000185DA 5240                       		addq.w	#1,d0
000185DC                            
000185DC                            loc_1800A:
000185DC 6600                       		bne.s	loc_1801A
000185DE 317C FE80 0012             		move.w	#-$180,$12(a0)
000185E4 5428 0025                  		addq.b	#2,$25(a0)
000185E8 4228 003F                  		clr.b	$3F(a0)
000185EC                            
000185EC                            loc_1801A:
000185EC 6000 FF1C                  		bra.w	loc_17F38
000185F0                            ; ===========================================================================
000185F0                            
000185F0                            loc_1801E:				; XREF: Obj77_ShipIndex
000185F0 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000185F6 6E00                       		bgt.s	loc_1804E
000185F8 317C 0100 0038             		move.w	#$100,$38(a0)
000185FE 317C 0140 0010             		move.w	#$140,$10(a0)
00018604 317C FF80 0012             		move.w	#-$80,$12(a0)
0001860A 4A28 003D                  		tst.b	$3D(a0)
0001860E 6700                       		beq.s	loc_18046
00018610 E1E8 0010                  		asl	$10(a0)
00018614 E1E8 0012                  		asl	$12(a0)
00018618                            
00018618                            loc_18046:
00018618 5428 0025                  		addq.b	#2,$25(a0)
0001861C 6000 FEEC                  		bra.w	loc_17F38
00018620                            ; ===========================================================================
00018620                            
00018620                            loc_1804E:
00018620 08E8 0000 0022             		bset	#0,$22(a0)
00018626 5428 003F                  		addq.b	#2,$3F(a0)
0001862A 1028 003F                  		move.b	$3F(a0),d0
0001862E 4EB9 0000 2C22             		jsr	(CalcSine).l
00018634 4A41                       		tst.w	d1
00018636 6A00                       		bpl.s	loc_1806C
00018638 08A8 0000 0022             		bclr	#0,$22(a0)
0001863E                            
0001863E                            loc_1806C:
0001863E E840                       		asr.w	#4,d0
00018640 4840                       		swap	d0
00018642 4240                       		clr.w	d0
00018644 D0A8 0030                  		add.l	$30(a0),d0
00018648 4840                       		swap	d0
0001864A 3140 0008                  		move.w	d0,8(a0)
0001864E 3028 0012                  		move.w	$12(a0),d0
00018652 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018656 9268 000C                  		sub.w	$C(a0),d1
0001865A 6500                       		bcs.s	loc_180A2
0001865C 0441 0048                  		subi.w	#$48,d1
00018660 6500                       		bcs.s	loc_180A2
00018662 E240                       		asr.w	#1,d0
00018664 0441 0028                  		subi.w	#$28,d1
00018668 6500                       		bcs.s	loc_180A2
0001866A E240                       		asr.w	#1,d0
0001866C 0441 0028                  		subi.w	#$28,d1
00018670 6500                       		bcs.s	loc_180A2
00018672 7000                       		moveq	#0,d0
00018674                            
00018674                            loc_180A2:
00018674 48C0                       		ext.l	d0
00018676 E180                       		asl.l	#8,d0
00018678 4A28 003D                  		tst.b	$3D(a0)
0001867C 6700                       		beq.s	loc_180AE
0001867E D080                       		add.l	d0,d0
00018680                            
00018680                            loc_180AE:
00018680 D1A8 0038                  		add.l	d0,$38(a0)
00018684 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001868A 6000 FE8E                  		bra.w	loc_17F48
0001868E                            ; ===========================================================================
0001868E                            
0001868E                            loc_180BC:				; XREF: Obj77_ShipIndex
0001868E 70FE                       		moveq	#-2,d0
00018690 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018696 6500                       		bcs.s	loc_180D2
00018698 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001869E 4268 0010                  		clr.w	$10(a0)
000186A2 5240                       		addq.w	#1,d0
000186A4                            
000186A4                            loc_180D2:
000186A4 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000186AA 6E00                       		bgt.s	loc_180E6
000186AC 317C 00C0 0038             		move.w	#$C0,$38(a0)
000186B2 4268 0012                  		clr.w	$12(a0)
000186B6 5240                       		addq.w	#1,d0
000186B8                            
000186B8                            loc_180E6:
000186B8 6600                       		bne.s	loc_180F2
000186BA 5428 0025                  		addq.b	#2,$25(a0)
000186BE 08A8 0000 0022             		bclr	#0,$22(a0)
000186C4                            
000186C4                            loc_180F2:
000186C4 6000 FE44                  		bra.w	loc_17F38
000186C8                            ; ===========================================================================
000186C8                            
000186C8                            loc_180F6:				; XREF: Obj77_ShipIndex
000186C8 4A28 003D                  		tst.b	$3D(a0)
000186CC 6600                       		bne.s	loc_18112
000186CE 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000186D4 6D00                       		blt.s	loc_18126
000186D6 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
000186DC 6E00                       		bgt.s	loc_18126
000186DE 117C 0032 003C             		move.b	#$32,$3C(a0)
000186E4                            
000186E4                            loc_18112:
000186E4 303C 0082                  		move.w	#$82,d0
000186E8 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
000186EE 08E8 0000 0022             		bset	#0,$22(a0)
000186F4 5428 0025                  		addq.b	#2,$25(a0)
000186F8                            
000186F8                            loc_18126:
000186F8 6000 FE10                  		bra.w	loc_17F38
000186FC                            ; ===========================================================================
000186FC                            
000186FC                            loc_1812A:				; XREF: Obj77_ShipIndex
000186FC 4A28 003D                  		tst.b	$3D(a0)
00018700 6600                       		bne.s	loc_18136
00018702 5328 003C                  		subq.b	#1,$3C(a0)
00018706 6600                       		bne.s	loc_1814E
00018708                            
00018708                            loc_18136:
00018708 4228 003C                  		clr.b	$3C(a0)
0001870C 317C 0400 0010             		move.w	#$400,$10(a0)
00018712 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018718 4228 003D                  		clr.b	$3D(a0)
0001871C 5428 0025                  		addq.b	#2,$25(a0)
00018720                            
00018720                            loc_1814E:
00018720 6000 FDE8                  		bra.w	loc_17F38
00018724                            ; ===========================================================================
00018724                            
00018724                            loc_18152:				; XREF: Obj77_ShipIndex
00018724 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001872A 6400                       		bcc.s	loc_18160
0001872C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018730 6000                       		bra.s	loc_18166
00018732                            ; ===========================================================================
00018732                            
00018732                            loc_18160:
00018732 4A28 0001                  		tst.b	1(a0)
00018736 6A00                       		bpl.s	Obj77_ShipDel
00018738                            
00018738                            loc_18166:
00018738 6000 FDD0                  		bra.w	loc_17F38
0001873C                            ; ===========================================================================
0001873C                            
0001873C                            Obj77_ShipDel:
0001873C 4EF9 0000 DBCC             		jmp	DeleteObject
00018742                            ; ===========================================================================
00018742                            
00018742                            Obj77_FaceMain:				; XREF: Obj77_Index
00018742 2268 0034                  		movea.l	$34(a0),a1
00018746 1011                       		move.b	(a1),d0
00018748 B010                       		cmp.b	(a0),d0
0001874A 6600                       		bne.s	Obj77_FaceDel
0001874C 7000                       		moveq	#0,d0
0001874E 1029 0025                  		move.b	$25(a1),d0
00018752 7201                       		moveq	#1,d1
00018754 4A28 003D                  		tst.b	$3D(a0)
00018758 6700                       		beq.s	loc_1818C
0001875A 720A                       		moveq	#$A,d1
0001875C 6000                       		bra.s	loc_181A0
0001875E                            ; ===========================================================================
0001875E                            
0001875E                            loc_1818C:
0001875E 4A29 0020                  		tst.b	$20(a1)
00018762 6600                       		bne.s	loc_18196
00018764 7205                       		moveq	#5,d1
00018766 6000                       		bra.s	loc_181A0
00018768                            ; ===========================================================================
00018768                            
00018768                            loc_18196:
00018768 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001876E 6500                       		bcs.s	loc_181A0
00018770 7204                       		moveq	#4,d1
00018772                            
00018772                            loc_181A0:
00018772 1141 001C                  		move.b	d1,$1C(a0)
00018776 0C00 000E                  		cmpi.b	#$E,d0
0001877A 6600                       		bne.s	loc_181B6
0001877C 117C 0006 001C             		move.b	#6,$1C(a0)
00018782 4A28 0001                  		tst.b	1(a0)
00018786 6A00                       		bpl.s	Obj77_FaceDel
00018788                            
00018788                            loc_181B6:
00018788 6000                       		bra.s	Obj77_Display
0001878A                            ; ===========================================================================
0001878A                            
0001878A                            Obj77_FaceDel:
0001878A 4EF9 0000 DBCC             		jmp	DeleteObject
00018790                            ; ===========================================================================
00018790                            
00018790                            Obj77_FlameMain:			; XREF: Obj77_Index
00018790 117C 0007 001C             		move.b	#7,$1C(a0)
00018796 2268 0034                  		movea.l	$34(a0),a1
0001879A 1011                       		move.b	(a1),d0
0001879C B010                       		cmp.b	(a0),d0
0001879E 6600                       		bne.s	Obj77_FlameDel
000187A0 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000187A6 6600                       		bne.s	loc_181F0
000187A8 117C 000B 001C             		move.b	#$B,$1C(a0)
000187AE 4A28 0001                  		tst.b	1(a0)
000187B2 6A00                       		bpl.s	Obj77_FlameDel
000187B4 6000                       		bra.s	loc_181F0
000187B6                            ; ===========================================================================
000187B6 4A69 0010                  		tst.w	$10(a1)
000187BA 6700                       		beq.s	loc_181F0
000187BC 117C 0008 001C             		move.b	#8,$1C(a0)
000187C2                            
000187C2                            loc_181F0:
000187C2 6000                       		bra.s	Obj77_Display
000187C4                            ; ===========================================================================
000187C4                            
000187C4                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000187C4 4EF9 0000 DBCC             		jmp	DeleteObject
000187CA                            ; ===========================================================================
000187CA                            
000187CA                            Obj77_Display:
000187CA 43F9 0001 8290             		lea	(Ani_Eggman).l,a1
000187D0 4EB9 0000 AC66             		jsr	AnimateSprite
000187D6 2268 0034                  		movea.l	$34(a0),a1
000187DA 3169 0008 0008             		move.w	8(a1),8(a0)
000187E0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000187E6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000187EC 7003                       		moveq	#3,d0
000187EE C028 0022                  		and.b	$22(a0),d0
000187F2 0228 00FC 0001             		andi.b	#-4,1(a0)
000187F8 8128 0001                  		or.b	d0,1(a0)
000187FC 4EF9 0000 DB90             		jmp	DisplaySprite
00018802                            ; ===========================================================================
00018802                            ; ---------------------------------------------------------------------------
00018802                            ; Object 73 - Eggman (MZ)
00018802                            ; ---------------------------------------------------------------------------
00018802                            
00018802                            Obj73:					; XREF: Obj_Index
00018802 7000                       		moveq	#0,d0
00018804 1028 0024                  		move.b	$24(a0),d0
00018808 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001880C 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018810                            ; ===========================================================================
00018810 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018812 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018814 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018816 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018818 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001881A                            
0001881A 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001881D 0401 04                    		dc.b 4,	1, 4
00018820 0607 04                    		dc.b 6,	7, 4
00018823 0800 03                    		dc.b 8,	0, 3
00018826                            ; ===========================================================================
00018826                            
00018826                            Obj73_Main:				; XREF: Obj73_Index
00018826 3168 0008 0030             		move.w	8(a0),$30(a0)
0001882C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018832 117C 000F 0020             		move.b	#$F,$20(a0)
00018838 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001883E 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018842 2248                       		movea.l	a0,a1
00018844 7203                       		moveq	#3,d1
00018846 6000                       		bra.s	Obj73_LoadBoss
00018848                            ; ===========================================================================
00018848                            
00018848                            Obj73_Loop:
00018848 4EB9 0000 E02C             		jsr	SingleObjLoad2
0001884E 6600                       		bne.s	Obj73_ShipMain
00018850 12BC 0073                  		move.b	#$73,0(a1)
00018854 3368 0008 0008             		move.w	8(a0),8(a1)
0001885A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018860                            
00018860                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018860 08A8 0000 0022             		bclr	#0,$22(a0)
00018866 4229 0025                  		clr.b	$25(a1)
0001886A 135A 0024                  		move.b	(a2)+,$24(a1)
0001886E 135A 001C                  		move.b	(a2)+,$1C(a1)
00018872 135A 0018                  		move.b	(a2)+,$18(a1)
00018876 237C 0001 82E0 0004        		move.l	#Map_Eggman,4(a1)
0001887E 337C 0400 0002             		move.w	#$400,2(a1)
00018884 137C 0004 0001             		move.b	#4,1(a1)
0001888A 137C 0020 0019             		move.b	#$20,$19(a1)
00018890 2348 0034                  		move.l	a0,$34(a1)
00018894 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018898                            
00018898                            Obj73_ShipMain:
00018898 7000                       		moveq	#0,d0
0001889A 1028 0025                  		move.b	$25(a0),d0
0001889E 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000188A2 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000188A6 43F9 0001 8290             		lea	(Ani_Eggman).l,a1
000188AC 4EB9 0000 AC66             		jsr	AnimateSprite
000188B2 7003                       		moveq	#3,d0
000188B4 C028 0022                  		and.b	$22(a0),d0
000188B8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000188BE 8128 0001                  		or.b	d0,1(a0)
000188C2 4EF9 0000 DB90             		jmp	DisplaySprite
000188C8                            ; ===========================================================================
000188C8 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000188CA 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000188CC 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000188CE 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000188D0 0000                       		dc.w loc_18582-Obj73_ShipIndex
000188D2                            ; ===========================================================================
000188D2                            
000188D2                            loc_18302:				; XREF: Obj73_ShipIndex
000188D2 1028 003F                  		move.b	$3F(a0),d0
000188D6 5428 003F                  		addq.b	#2,$3F(a0)
000188DA 4EB9 0000 2C22             		jsr	(CalcSine).l
000188E0 E440                       		asr.w	#2,d0
000188E2 3140 0012                  		move.w	d0,$12(a0)
000188E6 317C FF00 0010             		move.w	#-$100,$10(a0)
000188EC 6100 F592                  		bsr.w	BossMove
000188F0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000188F6 6600                       		bne.s	loc_18334
000188F8 5428 0025                  		addq.b	#2,$25(a0)
000188FC 4228 0028                  		clr.b	$28(a0)
00018900 42A8 0010                  		clr.l	$10(a0)
00018904                            
00018904                            loc_18334:
00018904 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001890A 1140 0034                  		move.b	d0,$34(a0)
0001890E                            
0001890E                            loc_1833E:
0001890E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018914 3168 0030 0008             		move.w	$30(a0),8(a0)
0001891A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018920 6400                       		bcc.s	locret_18390
00018922 4A28 0022                  		tst.b	$22(a0)
00018926 6B00                       		bmi.s	loc_18392
00018928 4A28 0020                  		tst.b	$20(a0)
0001892C 6600                       		bne.s	locret_18390
0001892E 4A28 003E                  		tst.b	$3E(a0)
00018932 6600                       		bne.s	loc_18374
00018934 117C 0028 003E             		move.b	#$28,$3E(a0)
0001893A 303C 00AC                  		move.w	#$AC,d0
0001893E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018944                            
00018944                            loc_18374:
00018944 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018948 7000                       		moveq	#0,d0
0001894A 4A51                       		tst.w	(a1)
0001894C 6600                       		bne.s	loc_18382
0001894E 303C 0EEE                  		move.w	#$EEE,d0
00018952                            
00018952                            loc_18382:
00018952 3280                       		move.w	d0,(a1)
00018954 5328 003E                  		subq.b	#1,$3E(a0)
00018958 6600                       		bne.s	locret_18390
0001895A 117C 000F 0020             		move.b	#$F,$20(a0)
00018960                            
00018960                            locret_18390:
00018960 4E75                       		rts	
00018962                            ; ===========================================================================
00018962                            
00018962                            loc_18392:				; XREF: loc_1833E
00018962 7064                       		moveq	#100,d0
00018964 6100 0000                  		bsr.w	AddPoints
00018968 117C 0004 0025             		move.b	#4,$25(a0)
0001896E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018974 4268 0010                  		clr.w	$10(a0)
00018978 4E75                       		rts	
0001897A                            ; ===========================================================================
0001897A                            
0001897A                            loc_183AA:				; XREF: Obj73_ShipIndex
0001897A 7000                       		moveq	#0,d0
0001897C 1028 0028                  		move.b	$28(a0),d0
00018980 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018984 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018988 0228 0006 0028             		andi.b	#6,$28(a0)
0001898E 6000 FF7E                  		bra.w	loc_1833E
00018992                            ; ===========================================================================
00018992 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018994 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018996 0000                       		dc.w loc_183CA-off_183C2
00018998 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001899A                            ; ===========================================================================
0001899A                            
0001899A                            loc_183CA:				; XREF: off_183C2
0001899A 4A68 0010                  		tst.w	$10(a0)
0001899E 6600                       		bne.s	loc_183FE
000189A0 7040                       		moveq	#$40,d0
000189A2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000189A8 6700                       		beq.s	loc_183E6
000189AA 6500                       		bcs.s	loc_183DE
000189AC 4440                       		neg.w	d0
000189AE                            
000189AE                            loc_183DE:
000189AE 3140 0012                  		move.w	d0,$12(a0)
000189B2 6000 F4CC                  		bra.w	BossMove
000189B6                            ; ===========================================================================
000189B6                            
000189B6                            loc_183E6:
000189B6 317C 0200 0010             		move.w	#$200,$10(a0)
000189BC 317C 0100 0012             		move.w	#$100,$12(a0)
000189C2 0828 0000 0022             		btst	#0,$22(a0)
000189C8 6600                       		bne.s	loc_183FE
000189CA 4468 0010                  		neg.w	$10(a0)
000189CE                            
000189CE                            loc_183FE:
000189CE 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000189D4 6400                       		bcc.s	Obj73_MakeLava
000189D6 6100 F4A8                  		bsr.w	BossMove
000189DA 5968 0012                  		subq.w	#4,$12(a0)
000189DE                            
000189DE                            Obj73_MakeLava:
000189DE 5328 0034                  		subq.b	#1,$34(a0)
000189E2 6400                       		bcc.s	loc_1845C
000189E4 4EB9 0000 E016             		jsr	SingleObjLoad
000189EA 6600                       		bne.s	loc_1844A
000189EC 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000189F0 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000189F6 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000189FC 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018A02 80FC 0050                  		divu.w	#$50,d0
00018A06 4840                       		swap	d0
00018A08 0640 1878                  		addi.w	#$1878,d0
00018A0C 3340 0008                  		move.w	d0,8(a1)
00018A10 EE09                       		lsr.b	#7,d1
00018A12 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018A18                            
00018A18                            loc_1844A:
00018A18 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A1E 0200 001F                  		andi.b	#$1F,d0
00018A22 0600 0040                  		addi.b	#$40,d0
00018A26 1140 0034                  		move.b	d0,$34(a0)
00018A2A                            
00018A2A                            loc_1845C:
00018A2A 0828 0000 0022             		btst	#0,$22(a0)
00018A30 6700                       		beq.s	loc_18474
00018A32 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A38 6D00                       		blt.s	locret_1849C
00018A3A 317C 1910 0030             		move.w	#$1910,$30(a0)
00018A40 6000                       		bra.s	loc_18482
00018A42                            ; ===========================================================================
00018A42                            
00018A42                            loc_18474:
00018A42 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018A48 6E00                       		bgt.s	locret_1849C
00018A4A 317C 1830 0030             		move.w	#$1830,$30(a0)
00018A50                            
00018A50                            loc_18482:
00018A50 4268 0010                  		clr.w	$10(a0)
00018A54 317C FE80 0012             		move.w	#-$180,$12(a0)
00018A5A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018A60 6400                       		bcc.s	loc_18498
00018A62 4468 0012                  		neg.w	$12(a0)
00018A66                            
00018A66                            loc_18498:
00018A66 5428 0028                  		addq.b	#2,$28(a0)
00018A6A                            
00018A6A                            locret_1849C:
00018A6A 4E75                       		rts	
00018A6C                            ; ===========================================================================
00018A6C                            
00018A6C                            Obj73_MakeLava2:			; XREF: off_183C2
00018A6C 6100 F412                  		bsr.w	BossMove
00018A70 3028 0038                  		move.w	$38(a0),d0
00018A74 0440 022C                  		subi.w	#$22C,d0
00018A78 6E00                       		bgt.s	locret_184F4
00018A7A 303C 022C                  		move.w	#$22C,d0
00018A7E 4A68 0012                  		tst.w	$12(a0)
00018A82 6700                       		beq.s	loc_184EA
00018A84 4268 0012                  		clr.w	$12(a0)
00018A88 317C 0050 003C             		move.w	#$50,$3C(a0)
00018A8E 0868 0000 0022             		bchg	#0,$22(a0)
00018A94 4EB9 0000 E016             		jsr	SingleObjLoad
00018A9A 6600                       		bne.s	loc_184EA
00018A9C 3368 0030 0008             		move.w	$30(a0),8(a1)
00018AA2 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018AA8 0669 0018 000C             		addi.w	#$18,$C(a1)
00018AAE 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018AB2 137C 0001 0028             		move.b	#1,$28(a1)
00018AB8                            
00018AB8                            loc_184EA:
00018AB8 5368 003C                  		subq.w	#1,$3C(a0)
00018ABC 6600                       		bne.s	locret_184F4
00018ABE 5428 0028                  		addq.b	#2,$28(a0)
00018AC2                            
00018AC2                            locret_184F4:
00018AC2 4E75                       		rts	
00018AC4                            ; ===========================================================================
00018AC4                            
00018AC4                            loc_184F6:				; XREF: Obj73_ShipIndex
00018AC4 5368 003C                  		subq.w	#1,$3C(a0)
00018AC8 6B00                       		bmi.s	loc_18500
00018ACA 6000 F372                  		bra.w	BossDefeated
00018ACE                            ; ===========================================================================
00018ACE                            
00018ACE                            loc_18500:
00018ACE 08E8 0000 0022             		bset	#0,$22(a0)
00018AD4 08A8 0007 0022             		bclr	#7,$22(a0)
00018ADA 4268 0010                  		clr.w	$10(a0)
00018ADE 5428 0025                  		addq.b	#2,$25(a0)
00018AE2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018AE8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018AEC 6600                       		bne.s	locret_1852A
00018AEE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018AF4 4268 0012                  		clr.w	$12(a0)
00018AF8                            
00018AF8                            locret_1852A:
00018AF8 4E75                       		rts	
00018AFA                            ; ===========================================================================
00018AFA                            
00018AFA                            loc_1852C:				; XREF: Obj73_ShipIndex
00018AFA 5268 003C                  		addq.w	#1,$3C(a0)
00018AFE 6700                       		beq.s	loc_18544
00018B00 6A00                       		bpl.s	loc_1854E
00018B02 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018B08 6400                       		bcc.s	loc_18544
00018B0A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B10 6000                       		bra.s	loc_1857A
00018B12                            ; ===========================================================================
00018B12                            
00018B12                            loc_18544:
00018B12 4268 0012                  		clr.w	$12(a0)
00018B16 4268 003C                  		clr.w	$3C(a0)
00018B1A 6000                       		bra.s	loc_1857A
00018B1C                            ; ===========================================================================
00018B1C                            
00018B1C                            loc_1854E:
00018B1C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B22 6500                       		bcs.s	loc_18566
00018B24 6700                       		beq.s	loc_1856C
00018B26 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B2C 6500                       		bcs.s	loc_1857A
00018B2E 5428 0025                  		addq.b	#2,$25(a0)
00018B32 6000                       		bra.s	loc_1857A
00018B34                            ; ===========================================================================
00018B34                            
00018B34                            loc_18566:
00018B34 5168 0012                  		subq.w	#8,$12(a0)
00018B38 6000                       		bra.s	loc_1857A
00018B3A                            ; ===========================================================================
00018B3A                            
00018B3A                            loc_1856C:
00018B3A 4268 0012                  		clr.w	$12(a0)
00018B3E 303C 0083                  		move.w	#$83,d0
00018B42 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018B48                            
00018B48                            loc_1857A:
00018B48 6100 F336                  		bsr.w	BossMove
00018B4C 6000 FDC0                  		bra.w	loc_1833E
00018B50                            ; ===========================================================================
00018B50                            
00018B50                            loc_18582:				; XREF: Obj73_ShipIndex
00018B50 317C 0500 0010             		move.w	#$500,$10(a0)
00018B56 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B5C 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018B62 6400                       		bcc.s	loc_1859C
00018B64 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018B68 6000                       		bra.s	loc_185A2
00018B6A                            ; ===========================================================================
00018B6A                            
00018B6A                            loc_1859C:
00018B6A 4A28 0001                  		tst.b	1(a0)
00018B6E 6A00                       		bpl.s	Obj73_ShipDel
00018B70                            
00018B70                            loc_185A2:
00018B70 6100 F30E                  		bsr.w	BossMove
00018B74 6000 FD98                  		bra.w	loc_1833E
00018B78                            ; ===========================================================================
00018B78                            
00018B78                            Obj73_ShipDel:
00018B78 4EF9 0000 DBCC             		jmp	DeleteObject
00018B7E                            ; ===========================================================================
00018B7E                            
00018B7E                            Obj73_FaceMain:				; XREF: Obj73_Index
00018B7E 7000                       		moveq	#0,d0
00018B80 7201                       		moveq	#1,d1
00018B82 2268 0034                  		movea.l	$34(a0),a1
00018B86 1029 0025                  		move.b	$25(a1),d0
00018B8A 5540                       		subq.w	#2,d0
00018B8C 6600                       		bne.s	loc_185D2
00018B8E 0829 0001 0028             		btst	#1,$28(a1)
00018B94 6700                       		beq.s	loc_185DA
00018B96 4A69 0012                  		tst.w	$12(a1)
00018B9A 6600                       		bne.s	loc_185DA
00018B9C 7204                       		moveq	#4,d1
00018B9E 6000                       		bra.s	loc_185EE
00018BA0                            ; ===========================================================================
00018BA0                            
00018BA0                            loc_185D2:
00018BA0 5500                       		subq.b	#2,d0
00018BA2 6B00                       		bmi.s	loc_185DA
00018BA4 720A                       		moveq	#$A,d1
00018BA6 6000                       		bra.s	loc_185EE
00018BA8                            ; ===========================================================================
00018BA8                            
00018BA8                            loc_185DA:
00018BA8 4A29 0020                  		tst.b	$20(a1)
00018BAC 6600                       		bne.s	loc_185E4
00018BAE 7205                       		moveq	#5,d1
00018BB0 6000                       		bra.s	loc_185EE
00018BB2                            ; ===========================================================================
00018BB2                            
00018BB2                            loc_185E4:
00018BB2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018BB8 6500                       		bcs.s	loc_185EE
00018BBA 7204                       		moveq	#4,d1
00018BBC                            
00018BBC                            loc_185EE:
00018BBC 1141 001C                  		move.b	d1,$1C(a0)
00018BC0 5900                       		subq.b	#4,d0
00018BC2 6600                       		bne.s	loc_18602
00018BC4 117C 0006 001C             		move.b	#6,$1C(a0)
00018BCA 4A28 0001                  		tst.b	1(a0)
00018BCE 6A00                       		bpl.s	Obj73_FaceDel
00018BD0                            
00018BD0                            loc_18602:
00018BD0 6000                       		bra.s	Obj73_Display
00018BD2                            ; ===========================================================================
00018BD2                            
00018BD2                            Obj73_FaceDel:
00018BD2 4EF9 0000 DBCC             		jmp	DeleteObject
00018BD8                            ; ===========================================================================
00018BD8                            
00018BD8                            Obj73_FlameMain:			; XREF: Obj73_Index
00018BD8 117C 0007 001C             		move.b	#7,$1C(a0)
00018BDE 2268 0034                  		movea.l	$34(a0),a1
00018BE2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018BE8 6D00                       		blt.s	loc_1862A
00018BEA 117C 000B 001C             		move.b	#$B,$1C(a0)
00018BF0 4A28 0001                  		tst.b	1(a0)
00018BF4 6A00                       		bpl.s	Obj73_FlameDel
00018BF6 6000                       		bra.s	loc_18636
00018BF8                            ; ===========================================================================
00018BF8                            
00018BF8                            loc_1862A:
00018BF8 4A69 0010                  		tst.w	$10(a1)
00018BFC 6700                       		beq.s	loc_18636
00018BFE 117C 0008 001C             		move.b	#8,$1C(a0)
00018C04                            
00018C04                            loc_18636:
00018C04 6000                       		bra.s	Obj73_Display
00018C06                            ; ===========================================================================
00018C06                            
00018C06                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018C06 4EF9 0000 DBCC             		jmp	DeleteObject
00018C0C                            ; ===========================================================================
00018C0C                            
00018C0C                            Obj73_Display:
00018C0C 43F9 0001 8290             		lea	(Ani_Eggman).l,a1
00018C12 4EB9 0000 AC66             		jsr	AnimateSprite
00018C18                            
00018C18                            loc_1864A:
00018C18 2268 0034                  		movea.l	$34(a0),a1
00018C1C 3169 0008 0008             		move.w	8(a1),8(a0)
00018C22 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018C28 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018C2E 7003                       		moveq	#3,d0
00018C30 C028 0022                  		and.b	$22(a0),d0
00018C34 0228 00FC 0001             		andi.b	#-4,1(a0)
00018C3A 8128 0001                  		or.b	d0,1(a0)
00018C3E 4EF9 0000 DB90             		jmp	DisplaySprite
00018C44                            ; ===========================================================================
00018C44                            
00018C44                            Obj73_TubeMain:				; XREF: Obj73_Index
00018C44 2268 0034                  		movea.l	$34(a0),a1
00018C48 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C4E 6600                       		bne.s	loc_18688
00018C50 4A28 0001                  		tst.b	1(a0)
00018C54 6A00                       		bpl.s	Obj73_TubeDel
00018C56                            
00018C56                            loc_18688:
00018C56 217C 0001 83A8 0004        		move.l	#Map_BossItems,4(a0)
00018C5E 317C 246C 0002             		move.w	#$246C,2(a0)
00018C64 117C 0004 001A             		move.b	#4,$1A(a0)
00018C6A 60AC                       		bra.s	loc_1864A
00018C6C                            ; ===========================================================================
00018C6C                            
00018C6C                            Obj73_TubeDel:
00018C6C 4EF9 0000 DBCC             		jmp	DeleteObject
00018C72                            ; ===========================================================================
00018C72                            ; ---------------------------------------------------------------------------
00018C72                            ; Object 74 - lava that	Eggman drops (MZ)
00018C72                            ; ---------------------------------------------------------------------------
00018C72                            
00018C72                            Obj74:					; XREF: Obj_Index
00018C72 7000                       		moveq	#0,d0
00018C74 1028 0024                  		move.b	$24(a0),d0
00018C78 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018C7C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018C80 4EF9 0000 DB90             		jmp	DisplaySprite
00018C86                            ; ===========================================================================
00018C86 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018C88 0000                       		dc.w Obj74_Action-Obj74_Index
00018C8A 0000                       		dc.w loc_18886-Obj74_Index
00018C8C 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018C8E                            ; ===========================================================================
00018C8E                            
00018C8E                            Obj74_Main:				; XREF: Obj74_Index
00018C8E 117C 0008 0016             		move.b	#8,$16(a0)
00018C94 117C 0008 0017             		move.b	#8,$17(a0)
00018C9A 217C 0000 B854 0004        		move.l	#Map_obj14,4(a0)
00018CA2 317C 0345 0002             		move.w	#$345,2(a0)
00018CA8 117C 0004 0001             		move.b	#4,1(a0)
00018CAE 117C 0005 0018             		move.b	#5,$18(a0)
00018CB4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CBA 117C 0008 0019             		move.b	#8,$19(a0)
00018CC0 5428 0024                  		addq.b	#2,$24(a0)
00018CC4 4A28 0028                  		tst.b	$28(a0)
00018CC8 6600                       		bne.s	loc_1870A
00018CCA 117C 008B 0020             		move.b	#$8B,$20(a0)
00018CD0 5428 0024                  		addq.b	#2,$24(a0)
00018CD4 6000 0000                  		bra.w	loc_18886
00018CD8                            ; ===========================================================================
00018CD8                            
00018CD8                            loc_1870A:
00018CD8 117C 001E 0029             		move.b	#$1E,$29(a0)
00018CDE 303C 00AE                  		move.w	#$AE,d0
00018CE2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018CE8                            
00018CE8                            Obj74_Action:				; XREF: Obj74_Index
00018CE8 7000                       		moveq	#0,d0
00018CEA 1028 0025                  		move.b	$25(a0),d0
00018CEE 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018CF2 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018CF6 4EB9 0000 DB6A             		jsr	SpeedToPos
00018CFC 43F9 0000 EA4A             		lea	(Ani_obj14).l,a1
00018D02 4EB9 0000 AC66             		jsr	AnimateSprite
00018D08 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018D0E 6200                       		bhi.s	Obj74_Delete
00018D10 4E75                       		rts	
00018D12                            ; ===========================================================================
00018D12                            
00018D12                            Obj74_Delete:
00018D12 4EF9 0000 DBCC             		jmp	DeleteObject
00018D18                            ; ===========================================================================
00018D18 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018D1A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018D1C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018D1E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018D20                            ; ===========================================================================
00018D20                            
00018D20                            Obj74_Drop:				; XREF: Obj74_Index2
00018D20 08E8 0001 0022             		bset	#1,$22(a0)
00018D26 5328 0029                  		subq.b	#1,$29(a0)
00018D2A 6A00                       		bpl.s	locret_18780
00018D2C 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D32 4228 0028                  		clr.b	$28(a0)
00018D36 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D3C 08A8 0001 0022             		bclr	#1,$22(a0)
00018D42 6100 C6A8                  		bsr.w	ObjHitFloor
00018D46 4A41                       		tst.w	d1
00018D48 6A00                       		bpl.s	locret_18780
00018D4A 5428 0025                  		addq.b	#2,$25(a0)
00018D4E                            
00018D4E                            locret_18780:
00018D4E 4E75                       		rts	
00018D50                            ; ===========================================================================
00018D50                            
00018D50                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018D50 5568 000C                  		subq.w	#2,$C(a0)
00018D54 08E8 0007 0002             		bset	#7,2(a0)
00018D5A 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018D60 4268 0012                  		clr.w	$12(a0)
00018D64 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D6A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D70 117C 0003 0029             		move.b	#3,$29(a0)
00018D76 4EB9 0000 E02C             		jsr	SingleObjLoad2
00018D7C 6600                       		bne.s	loc_187CA
00018D7E 47D1                       		lea	(a1),a3
00018D80 45D0                       		lea	(a0),a2
00018D82 7003                       		moveq	#3,d0
00018D84                            
00018D84                            Obj74_Loop:
00018D84 26DA                       		move.l	(a2)+,(a3)+
00018D86 26DA                       		move.l	(a2)+,(a3)+
00018D88 26DA                       		move.l	(a2)+,(a3)+
00018D8A 26DA                       		move.l	(a2)+,(a3)+
00018D8C 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018D90                            
00018D90 4469 0010                  		neg.w	$10(a1)
00018D94 5429 0025                  		addq.b	#2,$25(a1)
00018D98                            
00018D98                            loc_187CA:
00018D98 5428 0025                  		addq.b	#2,$25(a0)
00018D9C 4E75                       		rts	
00018D9E                            
00018D9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018D9E                            
00018D9E                            
00018D9E                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018D9E 4EB9 0000 E02C             		jsr	SingleObjLoad2
00018DA4 6600                       		bne.s	locret_187EE
00018DA6 3368 0008 0008             		move.w	8(a0),8(a1)
00018DAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DB2 12BC 0074                  		move.b	#$74,(a1)
00018DB6 337C 0067 0028             		move.w	#$67,$28(a1)
00018DBC                            
00018DBC                            locret_187EE:
00018DBC 4E75                       		rts	
00018DBE                            ; End of function Obj74_Duplicate2
00018DBE                            
00018DBE                            ; ===========================================================================
00018DBE                            
00018DBE                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018DBE 6100 C62C                  		bsr.w	ObjHitFloor
00018DC2 4A41                       		tst.w	d1
00018DC4 6A00                       		bpl.s	loc_18826
00018DC6 3028 0008                  		move.w	8(a0),d0
00018DCA 0C40 1940                  		cmpi.w	#$1940,d0
00018DCE 6E00                       		bgt.s	loc_1882C
00018DD0 3228 0030                  		move.w	$30(a0),d1
00018DD4 B240                       		cmp.w	d0,d1
00018DD6 6700                       		beq.s	loc_1881E
00018DD8 0240 0010                  		andi.w	#$10,d0
00018DDC 0241 0010                  		andi.w	#$10,d1
00018DE0 B240                       		cmp.w	d0,d1
00018DE2 6700                       		beq.s	loc_1881E
00018DE4 61B8                       		bsr.s	Obj74_Duplicate2
00018DE6 3168 0008 0032             		move.w	8(a0),$32(a0)
00018DEC                            
00018DEC                            loc_1881E:
00018DEC 3168 0008 0030             		move.w	8(a0),$30(a0)
00018DF2 4E75                       		rts	
00018DF4                            ; ===========================================================================
00018DF4                            
00018DF4                            loc_18826:
00018DF4 5428 0025                  		addq.b	#2,$25(a0)
00018DF8 4E75                       		rts	
00018DFA                            ; ===========================================================================
00018DFA                            
00018DFA                            loc_1882C:
00018DFA 5428 0024                  		addq.b	#2,$24(a0)
00018DFE 4E75                       		rts	
00018E00                            ; ===========================================================================
00018E00                            
00018E00                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018E00 08A8 0001 0022             		bclr	#1,$22(a0)
00018E06 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018E0C 3028 0008                  		move.w	8(a0),d0
00018E10 9068 0032                  		sub.w	$32(a0),d0
00018E14 6A00                       		bpl.s	loc_1884A
00018E16 4440                       		neg.w	d0
00018E18                            
00018E18                            loc_1884A:
00018E18 0C40 0012                  		cmpi.w	#$12,d0
00018E1C 6600                       		bne.s	loc_18856
00018E1E 08A8 0007 0002             		bclr	#7,2(a0)
00018E24                            
00018E24                            loc_18856:
00018E24 6100 C5C6                  		bsr.w	ObjHitFloor
00018E28 4A41                       		tst.w	d1
00018E2A 6A00                       		bpl.s	locret_1887E
00018E2C 5328 0029                  		subq.b	#1,$29(a0)
00018E30 6700                       		beq.s	Obj74_Delete2
00018E32 4268 0012                  		clr.w	$12(a0)
00018E36 3168 0032 0008             		move.w	$32(a0),8(a0)
00018E3C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E42 08E8 0007 0002             		bset	#7,2(a0)
00018E48 5528 0025                  		subq.b	#2,$25(a0)
00018E4C                            
00018E4C                            locret_1887E:
00018E4C 4E75                       		rts	
00018E4E                            ; ===========================================================================
00018E4E                            
00018E4E                            Obj74_Delete2:
00018E4E 4EF9 0000 DBCC             		jmp	DeleteObject
00018E54                            ; ===========================================================================
00018E54                            
00018E54                            loc_18886:				; XREF: Obj74_Index
00018E54 08E8 0007 0002             		bset	#7,2(a0)
00018E5A 5328 0029                  		subq.b	#1,$29(a0)
00018E5E 6600                       		bne.s	Obj74_Animate
00018E60 117C 0001 001C             		move.b	#1,$1C(a0)
00018E66 5968 000C                  		subq.w	#4,$C(a0)
00018E6A 4228 0020                  		clr.b	$20(a0)
00018E6E                            
00018E6E                            Obj74_Animate:
00018E6E 43F9 0000 EA4A             		lea	(Ani_obj14).l,a1
00018E74 4EF9 0000 AC66             		jmp	AnimateSprite
00018E7A                            ; ===========================================================================
00018E7A                            
00018E7A                            Obj74_Delete3:				; XREF: Obj74_Index
00018E7A 4EF9 0000 DBCC             		jmp	DeleteObject
00018E80                            ; ===========================================================================
00018E80                            
00018E80                            Obj7A_Delete:
00018E80 4EF9 0000 DBCC             		jmp	DeleteObject
00018E86                            ; ===========================================================================
00018E86                            ; ---------------------------------------------------------------------------
00018E86                            ; Object 7A - Eggman (SLZ)
00018E86                            ; ---------------------------------------------------------------------------
00018E86                            
00018E86                            Obj7A:					; XREF: Obj_Index
00018E86 7000                       		moveq	#0,d0
00018E88 1028 0024                  		move.b	$24(a0),d0
00018E8C 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018E90 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018E94                            ; ===========================================================================
00018E94 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018E96 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018E98 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018E9A 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018E9C 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018E9E                            
00018E9E 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018EA1 0401 04                    		dc.b 4,	1, 4
00018EA4 0607 04                    		dc.b 6,	7, 4
00018EA7 0800 03                    		dc.b 8,	0, 3
00018EAA                            ; ===========================================================================
00018EAA                            
00018EAA                            Obj7A_Main:				; XREF: Obj7A_Index
00018EAA 317C 2188 0008             		move.w	#$2188,8(a0)
00018EB0 317C 0228 000C             		move.w	#$228,$C(a0)
00018EB6 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EBC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EC2 117C 000F 0020             		move.b	#$F,$20(a0)
00018EC8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018ECE 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018ED2 2248                       		movea.l	a0,a1
00018ED4 7203                       		moveq	#3,d1
00018ED6 6000                       		bra.s	Obj7A_LoadBoss
00018ED8                            ; ===========================================================================
00018ED8                            
00018ED8                            Obj7A_Loop:
00018ED8 4EB9 0000 E02C             		jsr	SingleObjLoad2
00018EDE 6600                       		bne.s	loc_1895C
00018EE0 12BC 007A                  		move.b	#$7A,0(a1)
00018EE4 3368 0008 0008             		move.w	8(a0),8(a1)
00018EEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018EF0                            
00018EF0                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018EF0 08A8 0000 0022             		bclr	#0,$22(a0)
00018EF6 4229 0025                  		clr.b	$25(a1)
00018EFA 135A 0024                  		move.b	(a2)+,$24(a1)
00018EFE 135A 001C                  		move.b	(a2)+,$1C(a1)
00018F02 135A 0018                  		move.b	(a2)+,$18(a1)
00018F06 237C 0001 82E0 0004        		move.l	#Map_Eggman,4(a1)
00018F0E 337C 0400 0002             		move.w	#$400,2(a1)
00018F14 137C 0004 0001             		move.b	#4,1(a1)
00018F1A 137C 0020 0019             		move.b	#$20,$19(a1)
00018F20 2348 0034                  		move.l	a0,$34(a1)
00018F24 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018F28                            
00018F28                            loc_1895C:
00018F28 43F8 D040                  		lea	($FFFFD040).w,a1
00018F2C 45E8 002A                  		lea	$2A(a0),a2
00018F30 705E                       		moveq	#$5E,d0
00018F32 723E                       		moveq	#$3E,d1
00018F34                            
00018F34                            loc_18968:
00018F34 B011                       		cmp.b	(a1),d0
00018F36 6600                       		bne.s	loc_18974
00018F38 4A29 0028                  		tst.b	$28(a1)
00018F3C 6700                       		beq.s	loc_18974
00018F3E 34C9                       		move.w	a1,(a2)+
00018F40                            
00018F40                            loc_18974:
00018F40 D2FC 0040                  		adda.w	#$40,a1
00018F44 51C9 FFEE                  		dbf	d1,loc_18968
00018F48                            
00018F48                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018F48 7000                       		moveq	#0,d0
00018F4A 1028 0025                  		move.b	$25(a0),d0
00018F4E 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018F52 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018F56 43F9 0001 8290             		lea	(Ani_Eggman).l,a1
00018F5C 4EB9 0000 AC66             		jsr	AnimateSprite
00018F62 7003                       		moveq	#3,d0
00018F64 C028 0022                  		and.b	$22(a0),d0
00018F68 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018F6E 8128 0001                  		or.b	d0,1(a0)
00018F72 4EF9 0000 DB90             		jmp	DisplaySprite
00018F78                            ; ===========================================================================
00018F78 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018F7A 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018F7C 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018F7E 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018F80 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018F82 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018F84                            ; ===========================================================================
00018F84                            
00018F84                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018F84 317C FF00 0010             		move.w	#-$100,$10(a0)
00018F8A 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018F90 6400                       		bcc.s	loc_189CA
00018F92 5428 0025                  		addq.b	#2,$25(a0)
00018F96                            
00018F96                            loc_189CA:
00018F96 6100 EEE8                  		bsr.w	BossMove
00018F9A 1028 003F                  		move.b	$3F(a0),d0
00018F9E 5428 003F                  		addq.b	#2,$3F(a0)
00018FA2 4EB9 0000 2C22             		jsr	(CalcSine).l
00018FA8 EC40                       		asr.w	#6,d0
00018FAA D068 0038                  		add.w	$38(a0),d0
00018FAE 3140 000C                  		move.w	d0,$C(a0)
00018FB2 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FB8 6000                       		bra.s	loc_189FE
00018FBA                            ; ===========================================================================
00018FBA                            
00018FBA                            loc_189EE:
00018FBA 6100 EEC4                  		bsr.w	BossMove
00018FBE 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018FC4 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FCA                            
00018FCA                            loc_189FE:
00018FCA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018FD0 6400                       		bcc.s	locret_18A44
00018FD2 4A28 0022                  		tst.b	$22(a0)
00018FD6 6B00                       		bmi.s	loc_18A46
00018FD8 4A28 0020                  		tst.b	$20(a0)
00018FDC 6600                       		bne.s	locret_18A44
00018FDE 4A28 003E                  		tst.b	$3E(a0)
00018FE2 6600                       		bne.s	loc_18A28
00018FE4 117C 0020 003E             		move.b	#$20,$3E(a0)
00018FEA 303C 00AC                  		move.w	#$AC,d0
00018FEE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018FF4                            
00018FF4                            loc_18A28:
00018FF4 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018FF8 7000                       		moveq	#0,d0
00018FFA 4A51                       		tst.w	(a1)
00018FFC 6600                       		bne.s	loc_18A36
00018FFE 303C 0EEE                  		move.w	#$EEE,d0
00019002                            
00019002                            loc_18A36:
00019002 3280                       		move.w	d0,(a1)
00019004 5328 003E                  		subq.b	#1,$3E(a0)
00019008 6600                       		bne.s	locret_18A44
0001900A 117C 000F 0020             		move.b	#$F,$20(a0)
00019010                            
00019010                            locret_18A44:
00019010 4E75                       		rts	
00019012                            ; ===========================================================================
00019012                            
00019012                            loc_18A46:
00019012 7064                       		moveq	#100,d0
00019014 6100 0000                  		bsr.w	AddPoints
00019018 117C 0006 0025             		move.b	#6,$25(a0)
0001901E 117C 0078 003C             		move.b	#$78,$3C(a0)
00019024 4268 0010                  		clr.w	$10(a0)
00019028 4E75                       		rts	
0001902A                            ; ===========================================================================
0001902A                            
0001902A                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001902A 3028 0030                  		move.w	$30(a0),d0
0001902E 317C 0200 0010             		move.w	#$200,$10(a0)
00019034 0828 0000 0022             		btst	#0,$22(a0)
0001903A 6600                       		bne.s	loc_18A7C
0001903C 4468 0010                  		neg.w	$10(a0)
00019040 0C40 2008                  		cmpi.w	#$2008,d0
00019044 6E00                       		bgt.s	loc_18A88
00019046 6000                       		bra.s	loc_18A82
00019048                            ; ===========================================================================
00019048                            
00019048                            loc_18A7C:
00019048 0C40 2138                  		cmpi.w	#$2138,d0
0001904C 6D00                       		blt.s	loc_18A88
0001904E                            
0001904E                            loc_18A82:
0001904E 0868 0000 0022             		bchg	#0,$22(a0)
00019054                            
00019054                            loc_18A88:
00019054 3028 0008                  		move.w	8(a0),d0
00019058 72FF                       		moveq	#-1,d1
0001905A 7402                       		moveq	#2,d2
0001905C 45E8 002A                  		lea	$2A(a0),a2
00019060 7828                       		moveq	#$28,d4
00019062 4A68 0010                  		tst.w	$10(a0)
00019066 6A00                       		bpl.s	loc_18A9E
00019068 4444                       		neg.w	d4
0001906A                            
0001906A                            loc_18A9E:
0001906A 321A                       		move.w	(a2)+,d1
0001906C 2641                       		movea.l	d1,a3
0001906E 082B 0003 0022             		btst	#3,$22(a3)
00019074 6600                       		bne.s	loc_18AB4
00019076 362B 0008                  		move.w	8(a3),d3
0001907A D644                       		add.w	d4,d3
0001907C 9640                       		sub.w	d0,d3
0001907E 6700                       		beq.s	loc_18AC0
00019080                            
00019080                            loc_18AB4:
00019080 51CA FFE8                  		dbf	d2,loc_18A9E
00019084                            
00019084 1142 0028                  		move.b	d2,$28(a0)
00019088 6000 FF0C                  		bra.w	loc_189CA
0001908C                            ; ===========================================================================
0001908C                            
0001908C                            loc_18AC0:
0001908C 1142 0028                  		move.b	d2,$28(a0)
00019090 5428 0025                  		addq.b	#2,$25(a0)
00019094 117C 0028 003C             		move.b	#$28,$3C(a0)
0001909A 6000 FEFA                  		bra.w	loc_189CA
0001909E                            ; ===========================================================================
0001909E                            
0001909E                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001909E 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000190A4 6600                       		bne.s	loc_18B36
000190A6 70FF                       		moveq	#-1,d0
000190A8 1028 0028                  		move.b	$28(a0),d0
000190AC 4880                       		ext.w	d0
000190AE 6B00                       		bmi.s	loc_18B40
000190B0 5540                       		subq.w	#2,d0
000190B2 4440                       		neg.w	d0
000190B4 D040                       		add.w	d0,d0
000190B6 43E8 002A                  		lea	$2A(a0),a1
000190BA 3031 0000                  		move.w	(a1,d0.w),d0
000190BE 2440                       		movea.l	d0,a2
000190C0 43F8 D040                  		lea	($FFFFD040).w,a1
000190C4 723E                       		moveq	#$3E,d1
000190C6                            
000190C6                            loc_18AFA:
000190C6 B0A9 003C                  		cmp.l	$3C(a1),d0
000190CA 6700                       		beq.s	loc_18B40
000190CC D2FC 0040                  		adda.w	#$40,a1
000190D0 51C9 FFF4                  		dbf	d1,loc_18AFA
000190D4                            
000190D4 2F08                       		move.l	a0,-(sp)
000190D6 41D2                       		lea	(a2),a0
000190D8 4EB9 0000 E02C             		jsr	SingleObjLoad2
000190DE 205F                       		movea.l	(sp)+,a0
000190E0 6600                       		bne.s	loc_18B40
000190E2 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000190E6 3368 0008 0008             		move.w	8(a0),8(a1)
000190EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190F2 0669 0020 000C             		addi.w	#$20,$C(a1)
000190F8 136A 0022 0022             		move.b	$22(a2),$22(a1)
000190FE 234A 003C                  		move.l	a2,$3C(a1)
00019102                            
00019102                            loc_18B36:
00019102 5328 003C                  		subq.b	#1,$3C(a0)
00019106 6700                       		beq.s	loc_18B40
00019108 6000 FEC0                  		bra.w	loc_189FE
0001910C                            ; ===========================================================================
0001910C                            
0001910C                            loc_18B40:
0001910C 5528 0025                  		subq.b	#2,$25(a0)
00019110 6000 FE84                  		bra.w	loc_189CA
00019114                            ; ===========================================================================
00019114                            
00019114                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019114 5328 003C                  		subq.b	#1,$3C(a0)
00019118 6B00                       		bmi.s	loc_18B52
0001911A 6000 ED22                  		bra.w	BossDefeated
0001911E                            ; ===========================================================================
0001911E                            
0001911E                            loc_18B52:
0001911E 5428 0025                  		addq.b	#2,$25(a0)
00019122 4268 0012                  		clr.w	$12(a0)
00019126 08E8 0000 0022             		bset	#0,$22(a0)
0001912C 08A8 0007 0022             		bclr	#7,$22(a0)
00019132 4268 0010                  		clr.w	$10(a0)
00019136 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001913C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019140 6600                       		bne.s	loc_18B7C
00019142 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019148                            
00019148                            loc_18B7C:
00019148 6000 FE80                  		bra.w	loc_189FE
0001914C                            ; ===========================================================================
0001914C                            
0001914C                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001914C 5228 003C                  		addq.b	#1,$3C(a0)
00019150 6700                       		beq.s	loc_18B90
00019152 6A00                       		bpl.s	loc_18B96
00019154 0668 0018 0012             		addi.w	#$18,$12(a0)
0001915A 6000                       		bra.s	loc_18BC2
0001915C                            ; ===========================================================================
0001915C                            
0001915C                            loc_18B90:
0001915C 4268 0012                  		clr.w	$12(a0)
00019160 6000                       		bra.s	loc_18BC2
00019162                            ; ===========================================================================
00019162                            
00019162                            loc_18B96:
00019162 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019168 6500                       		bcs.s	loc_18BAE
0001916A 6700                       		beq.s	loc_18BB4
0001916C 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019172 6500                       		bcs.s	loc_18BC2
00019174 5428 0025                  		addq.b	#2,$25(a0)
00019178 6000                       		bra.s	loc_18BC2
0001917A                            ; ===========================================================================
0001917A                            
0001917A                            loc_18BAE:
0001917A 5168 0012                  		subq.w	#8,$12(a0)
0001917E 6000                       		bra.s	loc_18BC2
00019180                            ; ===========================================================================
00019180                            
00019180                            loc_18BB4:
00019180 4268 0012                  		clr.w	$12(a0)
00019184 303C 0084                  		move.w	#$84,d0
00019188 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
0001918E                            
0001918E                            loc_18BC2:
0001918E 6000 FE2A                  		bra.w	loc_189EE
00019192                            ; ===========================================================================
00019192                            
00019192                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019192 317C 0400 0010             		move.w	#$400,$10(a0)
00019198 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001919E 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000191A4 6400                       		bcc.s	loc_18BE0
000191A6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000191AA 6000                       		bra.s	loc_18BE8
000191AC                            ; ===========================================================================
000191AC                            
000191AC                            loc_18BE0:
000191AC 4A28 0001                  		tst.b	1(a0)
000191B0 6A00 FCCE                  		bpl.w	Obj7A_Delete
000191B4                            
000191B4                            loc_18BE8:
000191B4 6100 ECCA                  		bsr.w	BossMove
000191B8 6000 FDDC                  		bra.w	loc_189CA
000191BC                            ; ===========================================================================
000191BC                            
000191BC                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000191BC 7000                       		moveq	#0,d0
000191BE 7201                       		moveq	#1,d1
000191C0 2268 0034                  		movea.l	$34(a0),a1
000191C4 1029 0025                  		move.b	$25(a1),d0
000191C8 0C00 0006                  		cmpi.b	#6,d0
000191CC 6B00                       		bmi.s	loc_18C06
000191CE 720A                       		moveq	#$A,d1
000191D0 6000                       		bra.s	loc_18C1A
000191D2                            ; ===========================================================================
000191D2                            
000191D2                            loc_18C06:
000191D2 4A29 0020                  		tst.b	$20(a1)
000191D6 6600                       		bne.s	loc_18C10
000191D8 7205                       		moveq	#5,d1
000191DA 6000                       		bra.s	loc_18C1A
000191DC                            ; ===========================================================================
000191DC                            
000191DC                            loc_18C10:
000191DC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000191E2 6500                       		bcs.s	loc_18C1A
000191E4 7204                       		moveq	#4,d1
000191E6                            
000191E6                            loc_18C1A:
000191E6 1141 001C                  		move.b	d1,$1C(a0)
000191EA 0C00 000A                  		cmpi.b	#$A,d0
000191EE 6600                       		bne.s	loc_18C32
000191F0 117C 0006 001C             		move.b	#6,$1C(a0)
000191F6 4A28 0001                  		tst.b	1(a0)
000191FA 6A00 FC84                  		bpl.w	Obj7A_Delete
000191FE                            
000191FE                            loc_18C32:
000191FE 6000                       		bra.s	loc_18C6C
00019200                            ; ===========================================================================
00019200                            
00019200                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019200 117C 0008 001C             		move.b	#8,$1C(a0)
00019206 2268 0034                  		movea.l	$34(a0),a1
0001920A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019210 6600                       		bne.s	loc_18C56
00019212 4A28 0001                  		tst.b	1(a0)
00019216 6A00 FC68                  		bpl.w	Obj7A_Delete
0001921A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019220 6000                       		bra.s	loc_18C6C
00019222                            ; ===========================================================================
00019222                            
00019222                            loc_18C56:
00019222 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019228 6E00                       		bgt.s	loc_18C6C
0001922A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019230 6D00                       		blt.s	loc_18C6C
00019232 117C 0007 001C             		move.b	#7,$1C(a0)
00019238                            
00019238                            loc_18C6C:
00019238 43F9 0001 8290             		lea	(Ani_Eggman).l,a1
0001923E 4EB9 0000 AC66             		jsr	AnimateSprite
00019244                            
00019244                            loc_18C78:
00019244 2268 0034                  		movea.l	$34(a0),a1
00019248 3169 0008 0008             		move.w	8(a1),8(a0)
0001924E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019254 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001925A 7003                       		moveq	#3,d0
0001925C C028 0022                  		and.b	$22(a0),d0
00019260 0228 00FC 0001             		andi.b	#-4,1(a0)
00019266 8128 0001                  		or.b	d0,1(a0)
0001926A 4EF9 0000 DB90             		jmp	DisplaySprite
00019270                            ; ===========================================================================
00019270                            
00019270                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019270 2268 0034                  		movea.l	$34(a0),a1
00019274 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001927A 6600                       		bne.s	loc_18CB8
0001927C 4A28 0001                  		tst.b	1(a0)
00019280 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019284                            
00019284                            loc_18CB8:
00019284 217C 0001 83A8 0004        		move.l	#Map_BossItems,4(a0)
0001928C 317C 246C 0002             		move.w	#$246C,2(a0)
00019292 117C 0003 001A             		move.b	#3,$1A(a0)
00019298 60AA                       		bra.s	loc_18C78
0001929A                            ; ===========================================================================
0001929A                            ; ---------------------------------------------------------------------------
0001929A                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001929A                            ; ---------------------------------------------------------------------------
0001929A                            
0001929A                            Obj7B:					; XREF: Obj_Index
0001929A 7000                       		moveq	#0,d0
0001929C 1028 0024                  		move.b	$24(a0),d0
000192A0 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000192A4 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000192A8 3028 0030                  		move.w	$30(a0),d0
000192AC 0240 FF80                  		andi.w	#$FF80,d0
000192B0 3238 F700                  		move.w	($FFFFF700).w,d1
000192B4 0441 0080                  		subi.w	#$80,d1
000192B8 0241 FF80                  		andi.w	#$FF80,d1
000192BC 9041                       		sub.w	d1,d0
000192BE 6B00 FBC0                  		bmi.w	Obj7A_Delete
000192C2 0C40 0280                  		cmpi.w	#$280,d0
000192C6 6200 FBB8                  		bhi.w	Obj7A_Delete
000192CA 4EF9 0000 DB90             		jmp	DisplaySprite
000192D0                            ; ===========================================================================
000192D0 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000192D2 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000192D4 0000                       		dc.w loc_18DC6-Obj7B_Index
000192D6 0000                       		dc.w loc_18EAA-Obj7B_Index
000192D8 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000192DA 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000192DC                            ; ===========================================================================
000192DC                            
000192DC                            Obj7B_Main:				; XREF: Obj7B_Index
000192DC 217C 0001 1F56 0004        		move.l	#Map_obj5Ea,4(a0)
000192E4 317C 0518 0002             		move.w	#$518,2(a0)
000192EA 117C 0001 001A             		move.b	#1,$1A(a0)
000192F0 0028 0004 0001             		ori.b	#4,1(a0)
000192F6 117C 0004 0018             		move.b	#4,$18(a0)
000192FC 117C 008B 0020             		move.b	#$8B,$20(a0)
00019302 117C 000C 0019             		move.b	#$C,$19(a0)
00019308 2268 003C                  		movea.l	$3C(a0),a1
0001930C 3169 0008 0030             		move.w	8(a1),$30(a0)
00019312 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019318 08E8 0000 0022             		bset	#0,$22(a0)
0001931E 3028 0008                  		move.w	8(a0),d0
00019322 B069 0008                  		cmp.w	8(a1),d0
00019326 6E00                       		bgt.s	loc_18D68
00019328 08A8 0000 0022             		bclr	#0,$22(a0)
0001932E 117C 0002 003A             		move.b	#2,$3A(a0)
00019334                            
00019334                            loc_18D68:
00019334 5428 0024                  		addq.b	#2,$24(a0)
00019338                            
00019338                            Obj7B_Fall:				; XREF: Obj7B_Index
00019338 4EB9 0000 DB3E             		jsr	ObjectFall
0001933E 2268 003C                  		movea.l	$3C(a0),a1
00019342 45F9 0000 0000             		lea	(word_19018).l,a2
00019348 7000                       		moveq	#0,d0
0001934A 1029 001A                  		move.b	$1A(a1),d0
0001934E 3228 0008                  		move.w	8(a0),d1
00019352 9268 0030                  		sub.w	$30(a0),d1
00019356 6400                       		bcc.s	loc_18D8E
00019358 5440                       		addq.w	#2,d0
0001935A                            
0001935A                            loc_18D8E:
0001935A D040                       		add.w	d0,d0
0001935C 3228 0034                  		move.w	$34(a0),d1
00019360 D272 0000                  		add.w	(a2,d0.w),d1
00019364 B268 000C                  		cmp.w	$C(a0),d1
00019368 6E00                       		bgt.s	locret_18DC4
0001936A 2268 003C                  		movea.l	$3C(a0),a1
0001936E 7202                       		moveq	#2,d1
00019370 0828 0000 0022             		btst	#0,$22(a0)
00019376 6700                       		beq.s	loc_18DAE
00019378 7200                       		moveq	#0,d1
0001937A                            
0001937A                            loc_18DAE:
0001937A 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019380 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019386 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001938C 6000 0000                  		bra.w	loc_18FA2
00019390                            ; ===========================================================================
00019390                            
00019390                            locret_18DC4:
00019390 4E75                       		rts	
00019392                            ; ===========================================================================
00019392                            
00019392                            loc_18DC6:				; XREF: Obj7B_Index
00019392 2268 003C                  		movea.l	$3C(a0),a1
00019396 7000                       		moveq	#0,d0
00019398 1028 003A                  		move.b	$3A(a0),d0
0001939C 9029 003A                  		sub.b	$3A(a1),d0
000193A0 6700                       		beq.s	loc_18E2A
000193A2 6400                       		bcc.s	loc_18DDA
000193A4 4400                       		neg.b	d0
000193A6                            
000193A6                            loc_18DDA:
000193A6 323C F7E8                  		move.w	#-$818,d1
000193AA 343C FEEC                  		move.w	#-$114,d2
000193AE 0C00 0001                  		cmpi.b	#1,d0
000193B2 6700                       		beq.s	loc_18E00
000193B4 323C F6A0                  		move.w	#-$960,d1
000193B8 343C FF0C                  		move.w	#-$F4,d2
000193BC 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000193C2 6D00                       		blt.s	loc_18E00
000193C4 323C F5E0                  		move.w	#-$A20,d1
000193C8 343C FF80                  		move.w	#-$80,d2
000193CC                            
000193CC                            loc_18E00:
000193CC 3141 0012                  		move.w	d1,$12(a0)
000193D0 3142 0010                  		move.w	d2,$10(a0)
000193D4 3028 0008                  		move.w	8(a0),d0
000193D8 9068 0030                  		sub.w	$30(a0),d0
000193DC 6400                       		bcc.s	loc_18E16
000193DE 4468 0010                  		neg.w	$10(a0)
000193E2                            
000193E2                            loc_18E16:
000193E2 117C 0001 001A             		move.b	#1,$1A(a0)
000193E8 317C 0020 0028             		move.w	#$20,$28(a0)
000193EE 5428 0024                  		addq.b	#2,$24(a0)
000193F2 6000 0000                  		bra.w	loc_18EAA
000193F6                            ; ===========================================================================
000193F6                            
000193F6                            loc_18E2A:				; XREF: loc_18DC6
000193F6 45F9 0000 0000             		lea	(word_19018).l,a2
000193FC 7000                       		moveq	#0,d0
000193FE 1029 001A                  		move.b	$1A(a1),d0
00019402 343C 0028                  		move.w	#$28,d2
00019406 3228 0008                  		move.w	8(a0),d1
0001940A 9268 0030                  		sub.w	$30(a0),d1
0001940E 6400                       		bcc.s	loc_18E48
00019410 4442                       		neg.w	d2
00019412 5440                       		addq.w	#2,d0
00019414                            
00019414                            loc_18E48:
00019414 D040                       		add.w	d0,d0
00019416 3228 0034                  		move.w	$34(a0),d1
0001941A D272 0000                  		add.w	(a2,d0.w),d1
0001941E 3141 000C                  		move.w	d1,$C(a0)
00019422 D468 0030                  		add.w	$30(a0),d2
00019426 3142 0008                  		move.w	d2,8(a0)
0001942A 4268 000E                  		clr.w	$E(a0)
0001942E 4268 000A                  		clr.w	$A(a0)
00019432 5368 0028                  		subq.w	#1,$28(a0)
00019436 6600                       		bne.s	loc_18E7A
00019438 317C 0020 0028             		move.w	#$20,$28(a0)
0001943E 117C 0008 0024             		move.b	#8,$24(a0)
00019444 4E75                       		rts	
00019446                            ; ===========================================================================
00019446                            
00019446                            loc_18E7A:
00019446 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001944C 6600                       		bne.s	loc_18E88
0001944E 117C 0005 001F             		move.b	#5,$1F(a0)
00019454                            
00019454                            loc_18E88:
00019454 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001945A 6600                       		bne.s	loc_18E96
0001945C 117C 0002 001F             		move.b	#2,$1F(a0)
00019462                            
00019462                            loc_18E96:
00019462 5328 001E                  		subq.b	#1,$1E(a0)
00019466 6E00                       		bgt.s	locret_18EA8
00019468 0868 0000 001A             		bchg	#0,$1A(a0)
0001946E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019474                            
00019474                            locret_18EA8:
00019474 4E75                       		rts	
00019476                            ; ===========================================================================
00019476                            
00019476                            loc_18EAA:				; XREF: Obj7B_Index
00019476 43F8 D040                  		lea	($FFFFD040).w,a1
0001947A 707A                       		moveq	#$7A,d0
0001947C 7240                       		moveq	#$40,d1
0001947E 743E                       		moveq	#$3E,d2
00019480                            
00019480                            loc_18EB4:
00019480 B011                       		cmp.b	(a1),d0
00019482 6700                       		beq.s	loc_18EC0
00019484 D2C1                       		adda.w	d1,a1
00019486 51CA FFF8                  		dbf	d2,loc_18EB4
0001948A                            
0001948A 6000                       		bra.s	loc_18F38
0001948C                            ; ===========================================================================
0001948C                            
0001948C                            loc_18EC0:
0001948C 3029 0008                  		move.w	8(a1),d0
00019490 3229 000C                  		move.w	$C(a1),d1
00019494 3428 0008                  		move.w	8(a0),d2
00019498 3628 000C                  		move.w	$C(a0),d3
0001949C 45FA 0000                  		lea	byte_19022(pc),a2
000194A0 47FA 0000                  		lea	byte_19026(pc),a3
000194A4 181A                       		move.b	(a2)+,d4
000194A6 4884                       		ext.w	d4
000194A8 D044                       		add.w	d4,d0
000194AA 181B                       		move.b	(a3)+,d4
000194AC 4884                       		ext.w	d4
000194AE D444                       		add.w	d4,d2
000194B0 B440                       		cmp.w	d0,d2
000194B2 6500                       		bcs.s	loc_18F38
000194B4 181A                       		move.b	(a2)+,d4
000194B6 4884                       		ext.w	d4
000194B8 D044                       		add.w	d4,d0
000194BA 181B                       		move.b	(a3)+,d4
000194BC 4884                       		ext.w	d4
000194BE D444                       		add.w	d4,d2
000194C0 B042                       		cmp.w	d2,d0
000194C2 6500                       		bcs.s	loc_18F38
000194C4 181A                       		move.b	(a2)+,d4
000194C6 4884                       		ext.w	d4
000194C8 D244                       		add.w	d4,d1
000194CA 181B                       		move.b	(a3)+,d4
000194CC 4884                       		ext.w	d4
000194CE D644                       		add.w	d4,d3
000194D0 B641                       		cmp.w	d1,d3
000194D2 6500                       		bcs.s	loc_18F38
000194D4 181A                       		move.b	(a2)+,d4
000194D6 4884                       		ext.w	d4
000194D8 D244                       		add.w	d4,d1
000194DA 181B                       		move.b	(a3)+,d4
000194DC 4884                       		ext.w	d4
000194DE D644                       		add.w	d4,d3
000194E0 B243                       		cmp.w	d3,d1
000194E2 6500                       		bcs.s	loc_18F38
000194E4 5428 0024                  		addq.b	#2,$24(a0)
000194E8 4268 0028                  		clr.w	$28(a0)
000194EC 4229 0020                  		clr.b	$20(a1)
000194F0 5329 0021                  		subq.b	#1,$21(a1)
000194F4 6600                       		bne.s	loc_18F38
000194F6 08E9 0007 0022             		bset	#7,$22(a1)
000194FC 4268 0010                  		clr.w	$10(a0)
00019500 4268 0012                  		clr.w	$12(a0)
00019504                            
00019504                            loc_18F38:
00019504 4A68 0012                  		tst.w	$12(a0)
00019508 6A00                       		bpl.s	loc_18F5C
0001950A 4EB9 0000 DB3E             		jsr	ObjectFall
00019510 3028 0034                  		move.w	$34(a0),d0
00019514 0440 002F                  		subi.w	#$2F,d0
00019518 B068 000C                  		cmp.w	$C(a0),d0
0001951C 6E00                       		bgt.s	loc_18F58
0001951E 4EB9 0000 DB3E             		jsr	ObjectFall
00019524                            
00019524                            loc_18F58:
00019524 6000 FF20                  		bra.w	loc_18E7A
00019528                            ; ===========================================================================
00019528                            
00019528                            loc_18F5C:
00019528 4EB9 0000 DB3E             		jsr	ObjectFall
0001952E 2268 003C                  		movea.l	$3C(a0),a1
00019532 45F9 0000 0000             		lea	(word_19018).l,a2
00019538 7000                       		moveq	#0,d0
0001953A 1029 001A                  		move.b	$1A(a1),d0
0001953E 3228 0008                  		move.w	8(a0),d1
00019542 9268 0030                  		sub.w	$30(a0),d1
00019546 6400                       		bcc.s	loc_18F7E
00019548 5440                       		addq.w	#2,d0
0001954A                            
0001954A                            loc_18F7E:
0001954A D040                       		add.w	d0,d0
0001954C 3228 0034                  		move.w	$34(a0),d1
00019550 D272 0000                  		add.w	(a2,d0.w),d1
00019554 B268 000C                  		cmp.w	$C(a0),d1
00019558 6ECA                       		bgt.s	loc_18F58
0001955A 2268 003C                  		movea.l	$3C(a0),a1
0001955E 7202                       		moveq	#2,d1
00019560 4A68 0010                  		tst.w	$10(a0)
00019564 6B00                       		bmi.s	loc_18F9C
00019566 7200                       		moveq	#0,d1
00019568                            
00019568                            loc_18F9C:
00019568 317C 0000 0028             		move.w	#0,$28(a0)
0001956E                            
0001956E                            loc_18FA2:
0001956E 1341 003A                  		move.b	d1,$3A(a1)
00019572 1141 003A                  		move.b	d1,$3A(a0)
00019576 B229 001A                  		cmp.b	$1A(a1),d1
0001957A 6700                       		beq.s	loc_19008
0001957C 08A9 0003 0022             		bclr	#3,$22(a1)
00019582 6700                       		beq.s	loc_19008
00019584 4229 0025                  		clr.b	$25(a1)
00019588 137C 0002 0024             		move.b	#2,$24(a1)
0001958E 45F8 D000                  		lea	($FFFFD000).w,a2
00019592 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019598 446A 0012                  		neg.w	$12(a2)
0001959C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000195A2 6600                       		bne.s	loc_18FDC
000195A4 E0EA 0012                  		asr	$12(a2)
000195A8                            
000195A8                            loc_18FDC:
000195A8 08EA 0001 0022             		bset	#1,$22(a2)
000195AE 08AA 0003 0022             		bclr	#3,$22(a2)
000195B4 422A 003C                  		clr.b	$3C(a2)
000195B8 2F08                       		move.l	a0,-(sp)
000195BA 41D2                       		lea	(a2),a0
000195BC 4EBA A3B8                  		jsr	Obj01_ChkRoll
000195C0 205F                       		movea.l	(sp)+,a0
000195C2 157C 0002 0024             		move.b	#2,$24(a2)
000195C8 303C 00CC                  		move.w	#$CC,d0
000195CC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
000195D2                            
000195D2                            loc_19008:
000195D2 4268 0010                  		clr.w	$10(a0)
000195D6 4268 0012                  		clr.w	$12(a0)
000195DA 5428 0024                  		addq.b	#2,$24(a0)
000195DE 6000 FE66                  		bra.w	loc_18E7A
000195E2                            ; ===========================================================================
000195E2 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000195EC                            		even
000195EC E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000195F0                            		even
000195F0 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000195F4                            		even
000195F4                            ; ===========================================================================
000195F4                            
000195F4                            Obj7B_Explode:				; XREF: Obj7B_Index
000195F4 10BC 003F                  		move.b	#$3F,(a0)
000195F8 4228 0024                  		clr.b	$24(a0)
000195FC 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019602 6700                       		beq.s	Obj7B_MakeFrag
00019604 4E75                       		rts	
00019606                            ; ===========================================================================
00019606                            
00019606                            Obj7B_MakeFrag:
00019606 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001960C 7203                       		moveq	#3,d1
0001960E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019612                            
00019612                            Obj7B_Loop:
00019612 4EB9 0000 E016             		jsr	SingleObjLoad
00019618 6600                       		bne.s	loc_1909A
0001961A 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001961E 137C 000A 0024             		move.b	#$A,$24(a1)
00019624 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001962C 137C 0003 0018             		move.b	#3,$18(a1)
00019632 337C 0518 0002             		move.w	#$518,2(a1)
00019638 3368 0008 0008             		move.w	8(a0),8(a1)
0001963E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019644 335A 0010                  		move.w	(a2)+,$10(a1)
00019648 335A 0012                  		move.w	(a2)+,$12(a1)
0001964C 137C 0098 0020             		move.b	#$98,$20(a1)
00019652 0029 0004 0001             		ori.b	#4,1(a1)
00019658 08E9 0007 0001             		bset	#7,1(a1)
0001965E 137C 000C 0019             		move.b	#$C,$19(a1)
00019664                            
00019664                            loc_1909A:
00019664 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019668                            
00019668 4E75                       		rts	
0001966A                            ; ===========================================================================
0001966A FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001966E FF60 FDC0                  		dc.w $FF60, $FDC0
00019672 0100 FCC0                  		dc.w $100, $FCC0
00019676 00A0 FDC0                  		dc.w $A0, $FDC0
0001967A                            ; ===========================================================================
0001967A                            
0001967A                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001967A 4EB9 0000 DB6A             		jsr	SpeedToPos
00019680 3168 0008 0030             		move.w	8(a0),$30(a0)
00019686 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001968C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019692 7004                       		moveq	#4,d0
00019694 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019698 E448                       		lsr.w	#2,d0
0001969A 1140 001A                  		move.b	d0,$1A(a0)
0001969E 4A28 0001                  		tst.b	1(a0)
000196A2 6A00 F7DC                  		bpl.w	Obj7A_Delete
000196A6 4E75                       		rts	
000196A8                            ; ===========================================================================
000196A8                            ; ---------------------------------------------------------------------------
000196A8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196A8                            ; ---------------------------------------------------------------------------
000196A8                            Map_obj7B:
000196A8                            	include "_maps\obj7B.asm"
000196A8                            ; ---------------------------------------------------------------------------
000196A8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196A8                            ; ---------------------------------------------------------------------------
000196A8 0000                       		dc.w byte_190E2-Map_obj7B
000196AA 0000                       		dc.w byte_190E8-Map_obj7B
000196AC 01                         byte_190E2:	dc.b 1
000196AD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000196B2 01                         byte_190E8:	dc.b 1
000196B3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000196B8                            		even
000196B8                            		even
000196B8                            
000196B8                            ; ===========================================================================
000196B8                            ; ---------------------------------------------------------------------------
000196B8                            ; Object 75 - Eggman (SYZ)
000196B8                            ; ---------------------------------------------------------------------------
000196B8                            
000196B8                            Obj75:					; XREF: Obj_Index
000196B8 7000                       		moveq	#0,d0
000196BA 1028 0024                  		move.b	$24(a0),d0
000196BE 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000196C2 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000196C6                            ; ===========================================================================
000196C6 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000196C8 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000196CA 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000196CC 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000196CE 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000196D0                            
000196D0 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000196D3 0401 05                    		dc.b 4,	1, 5
000196D6 0607 05                    		dc.b 6,	7, 5
000196D9 0800 05                    		dc.b 8,	0, 5
000196DC                            ; ===========================================================================
000196DC                            
000196DC                            Obj75_Main:				; XREF: Obj75_Index
000196DC 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000196E2 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000196E8 3168 0008 0030             		move.w	8(a0),$30(a0)
000196EE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000196F4 117C 000F 0020             		move.b	#$F,$20(a0)
000196FA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019700 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019704 2248                       		movea.l	a0,a1
00019706 7203                       		moveq	#3,d1
00019708 6000                       		bra.s	Obj75_LoadBoss
0001970A                            ; ===========================================================================
0001970A                            
0001970A                            Obj75_Loop:
0001970A 4EB9 0000 E02C             		jsr	SingleObjLoad2
00019710 6600                       		bne.s	Obj75_ShipMain
00019712 12BC 0075                  		move.b	#$75,(a1)
00019716 3368 0008 0008             		move.w	8(a0),8(a1)
0001971C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019722                            
00019722                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019722 08A8 0000 0022             		bclr	#0,$22(a0)
00019728 4229 0025                  		clr.b	$25(a1)
0001972C 135A 0024                  		move.b	(a2)+,$24(a1)
00019730 135A 001C                  		move.b	(a2)+,$1C(a1)
00019734 135A 0018                  		move.b	(a2)+,$18(a1)
00019738 237C 0001 82E0 0004        		move.l	#Map_Eggman,4(a1)
00019740 337C 0400 0002             		move.w	#$400,2(a1)
00019746 137C 0004 0001             		move.b	#4,1(a1)
0001974C 137C 0020 0019             		move.b	#$20,$19(a1)
00019752 2348 0034                  		move.l	a0,$34(a1)
00019756 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001975A                            
0001975A                            Obj75_ShipMain:				; XREF: Obj75_Index
0001975A 7000                       		moveq	#0,d0
0001975C 1028 0025                  		move.b	$25(a0),d0
00019760 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019764 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019768 43F9 0001 8290             		lea	(Ani_Eggman).l,a1
0001976E 4EB9 0000 AC66             		jsr	AnimateSprite
00019774 7003                       		moveq	#3,d0
00019776 C028 0022                  		and.b	$22(a0),d0
0001977A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019780 8128 0001                  		or.b	d0,1(a0)
00019784 4EF9 0000 DB90             		jmp	DisplaySprite
0001978A                            ; ===========================================================================
0001978A 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001978E 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019792 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019796                            ; ===========================================================================
00019796                            
00019796                            loc_191CC:				; XREF: Obj75_ShipIndex
00019796 317C FF00 0010             		move.w	#-$100,$10(a0)
0001979C 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000197A2 6400                       		bcc.s	loc_191DE
000197A4 5428 0025                  		addq.b	#2,$25(a0)
000197A8                            
000197A8                            loc_191DE:
000197A8 1028 003F                  		move.b	$3F(a0),d0
000197AC 5428 003F                  		addq.b	#2,$3F(a0)
000197B0 4EB9 0000 2C22             		jsr	(CalcSine).l
000197B6 E440                       		asr.w	#2,d0
000197B8 3140 0012                  		move.w	d0,$12(a0)
000197BC                            
000197BC                            loc_191F2:
000197BC 6100 E6C2                  		bsr.w	BossMove
000197C0 3168 0038 000C             		move.w	$38(a0),$C(a0)
000197C6 3168 0030 0008             		move.w	$30(a0),8(a0)
000197CC                            
000197CC                            loc_19202:
000197CC 3028 0008                  		move.w	8(a0),d0
000197D0 0440 2C00                  		subi.w	#$2C00,d0
000197D4 EA48                       		lsr.w	#5,d0
000197D6 1140 0034                  		move.b	d0,$34(a0)
000197DA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000197E0 6400                       		bcc.s	locret_19256
000197E2 4A28 0022                  		tst.b	$22(a0)
000197E6 6B00                       		bmi.s	loc_19258
000197E8 4A28 0020                  		tst.b	$20(a0)
000197EC 6600                       		bne.s	locret_19256
000197EE 4A28 003E                  		tst.b	$3E(a0)
000197F2 6600                       		bne.s	loc_1923A
000197F4 117C 0020 003E             		move.b	#$20,$3E(a0)
000197FA 303C 00AC                  		move.w	#$AC,d0
000197FE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019804                            
00019804                            loc_1923A:
00019804 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019808 7000                       		moveq	#0,d0
0001980A 4A51                       		tst.w	(a1)
0001980C 6600                       		bne.s	loc_19248
0001980E 303C 0EEE                  		move.w	#$EEE,d0
00019812                            
00019812                            loc_19248:
00019812 3280                       		move.w	d0,(a1)
00019814 5328 003E                  		subq.b	#1,$3E(a0)
00019818 6600                       		bne.s	locret_19256
0001981A 117C 000F 0020             		move.b	#$F,$20(a0)
00019820                            
00019820                            locret_19256:
00019820 4E75                       		rts	
00019822                            ; ===========================================================================
00019822                            
00019822                            loc_19258:				; XREF: loc_19202
00019822 7064                       		moveq	#100,d0
00019824 6100 0000                  		bsr.w	AddPoints
00019828 117C 0006 0025             		move.b	#6,$25(a0)
0001982E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019834 4268 0010                  		clr.w	$10(a0)
00019838 4E75                       		rts	
0001983A                            ; ===========================================================================
0001983A                            
0001983A                            loc_19270:				; XREF: Obj75_ShipIndex
0001983A 3028 0030                  		move.w	$30(a0),d0
0001983E 317C 0140 0010             		move.w	#$140,$10(a0)
00019844 0828 0000 0022             		btst	#0,$22(a0)
0001984A 6600                       		bne.s	loc_1928E
0001984C 4468 0010                  		neg.w	$10(a0)
00019850 0C40 2C08                  		cmpi.w	#$2C08,d0
00019854 6E00                       		bgt.s	loc_1929E
00019856 6000                       		bra.s	loc_19294
00019858                            ; ===========================================================================
00019858                            
00019858                            loc_1928E:
00019858 0C40 2D38                  		cmpi.w	#$2D38,d0
0001985C 6D00                       		blt.s	loc_1929E
0001985E                            
0001985E                            loc_19294:
0001985E 0868 0000 0022             		bchg	#0,$22(a0)
00019864 4228 003D                  		clr.b	$3D(a0)
00019868                            
00019868                            loc_1929E:
00019868 0440 2C10                  		subi.w	#$2C10,d0
0001986C 0240 001F                  		andi.w	#$1F,d0
00019870 0440 001F                  		subi.w	#$1F,d0
00019874 6A00                       		bpl.s	loc_192AE
00019876 4440                       		neg.w	d0
00019878                            
00019878                            loc_192AE:
00019878 5340                       		subq.w	#1,d0
0001987A 6E00                       		bgt.s	loc_192E8
0001987C 4A28 003D                  		tst.b	$3D(a0)
00019880 6600                       		bne.s	loc_192E8
00019882 3238 D008                  		move.w	($FFFFD008).w,d1
00019886 0441 2C00                  		subi.w	#$2C00,d1
0001988A EA41                       		asr.w	#5,d1
0001988C B228 0034                  		cmp.b	$34(a0),d1
00019890 6600                       		bne.s	loc_192E8
00019892 7000                       		moveq	#0,d0
00019894 1028 0034                  		move.b	$34(a0),d0
00019898 EB40                       		asl.w	#5,d0
0001989A 0640 2C10                  		addi.w	#$2C10,d0
0001989E 3140 0030                  		move.w	d0,$30(a0)
000198A2 6100 0000                  		bsr.w	Obj75_FindBlocks
000198A6 5428 0025                  		addq.b	#2,$25(a0)
000198AA 4268 0028                  		clr.w	$28(a0)
000198AE 4268 0010                  		clr.w	$10(a0)
000198B2                            
000198B2                            loc_192E8:
000198B2 6000 FEF4                  		bra.w	loc_191DE
000198B6                            ; ===========================================================================
000198B6                            
000198B6                            loc_192EC:				; XREF: Obj75_ShipIndex
000198B6 7000                       		moveq	#0,d0
000198B8 1028 0028                  		move.b	$28(a0),d0
000198BC 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000198C0 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000198C4                            ; ===========================================================================
000198C4 0000                       off_192FA:	dc.w loc_19302-off_192FA
000198C6 0000                       		dc.w loc_19348-off_192FA
000198C8 0000                       		dc.w loc_1938E-off_192FA
000198CA 0000                       		dc.w loc_193D0-off_192FA
000198CC                            ; ===========================================================================
000198CC                            
000198CC                            loc_19302:				; XREF: off_192FA
000198CC 317C 0180 0012             		move.w	#$180,$12(a0)
000198D2 3028 0038                  		move.w	$38(a0),d0
000198D6 0C40 0556                  		cmpi.w	#$556,d0
000198DA 6500                       		bcs.s	loc_19344
000198DC 317C 0556 0038             		move.w	#$556,$38(a0)
000198E2 4268 003C                  		clr.w	$3C(a0)
000198E6 70FF                       		moveq	#-1,d0
000198E8 3028 0036                  		move.w	$36(a0),d0
000198EC 6700                       		beq.s	loc_1933C
000198EE 2240                       		movea.l	d0,a1
000198F0 137C 00FF 0029             		move.b	#-1,$29(a1)
000198F6 117C 00FF 0029             		move.b	#-1,$29(a0)
000198FC 2348 0034                  		move.l	a0,$34(a1)
00019900 317C 0032 003C             		move.w	#$32,$3C(a0)
00019906                            
00019906                            loc_1933C:
00019906 4268 0012                  		clr.w	$12(a0)
0001990A 5428 0028                  		addq.b	#2,$28(a0)
0001990E                            
0001990E                            loc_19344:
0001990E 6000 FEAC                  		bra.w	loc_191F2
00019912                            ; ===========================================================================
00019912                            
00019912                            loc_19348:				; XREF: off_192FA
00019912 5368 003C                  		subq.w	#1,$3C(a0)
00019916 6A00                       		bpl.s	loc_19366
00019918 5428 0028                  		addq.b	#2,$28(a0)
0001991C 317C F800 0012             		move.w	#-$800,$12(a0)
00019922 4A68 0036                  		tst.w	$36(a0)
00019926 6600                       		bne.s	loc_19362
00019928 E0E8 0012                  		asr	$12(a0)
0001992C                            
0001992C                            loc_19362:
0001992C 7000                       		moveq	#0,d0
0001992E 6000                       		bra.s	loc_1937C
00019930                            ; ===========================================================================
00019930                            
00019930                            loc_19366:
00019930 7000                       		moveq	#0,d0
00019932 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019938 6E00                       		bgt.s	loc_1937C
0001993A 7002                       		moveq	#2,d0
0001993C 0828 0001 003D             		btst	#1,$3D(a0)
00019942 6700                       		beq.s	loc_1937C
00019944 4440                       		neg.w	d0
00019946                            
00019946                            loc_1937C:
00019946 D068 0038                  		add.w	$38(a0),d0
0001994A 3140 000C                  		move.w	d0,$C(a0)
0001994E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019954 6000 FE76                  		bra.w	loc_19202
00019958                            ; ===========================================================================
00019958                            
00019958                            loc_1938E:				; XREF: off_192FA
00019958 303C 04DA                  		move.w	#$4DA,d0
0001995C 4A68 0036                  		tst.w	$36(a0)
00019960 6700                       		beq.s	loc_1939C
00019962 0440 0018                  		subi.w	#$18,d0
00019966                            
00019966                            loc_1939C:
00019966 B068 0038                  		cmp.w	$38(a0),d0
0001996A 6D00                       		blt.s	loc_193BE
0001996C 317C 0008 003C             		move.w	#8,$3C(a0)
00019972 4A68 0036                  		tst.w	$36(a0)
00019976 6700                       		beq.s	loc_193B4
00019978 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001997E                            
0001997E                            loc_193B4:
0001997E 5428 0028                  		addq.b	#2,$28(a0)
00019982 4268 0012                  		clr.w	$12(a0)
00019986 6000                       		bra.s	loc_193CC
00019988                            ; ===========================================================================
00019988                            
00019988                            loc_193BE:
00019988 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001998E 6C00                       		bge.s	loc_193CC
00019990 0668 000C 0012             		addi.w	#$C,$12(a0)
00019996                            
00019996                            loc_193CC:
00019996 6000 FE24                  		bra.w	loc_191F2
0001999A                            ; ===========================================================================
0001999A                            
0001999A                            loc_193D0:				; XREF: off_192FA
0001999A 5368 003C                  		subq.w	#1,$3C(a0)
0001999E 6E00                       		bgt.s	loc_19406
000199A0 6B00                       		bmi.s	loc_193EE
000199A2 70FF                       		moveq	#-1,d0
000199A4 3028 0036                  		move.w	$36(a0),d0
000199A8 6700                       		beq.s	loc_193E8
000199AA 2240                       		movea.l	d0,a1
000199AC 137C 000A 0029             		move.b	#$A,$29(a1)
000199B2                            
000199B2                            loc_193E8:
000199B2 4268 0036                  		clr.w	$36(a0)
000199B6 6000                       		bra.s	loc_19406
000199B8                            ; ===========================================================================
000199B8                            
000199B8                            loc_193EE:
000199B8 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000199BE 6600                       		bne.s	loc_19406
000199C0 4228 0029                  		clr.b	$29(a0)
000199C4 5528 0025                  		subq.b	#2,$25(a0)
000199C8 117C 00FF 003D             		move.b	#-1,$3D(a0)
000199CE 6000                       		bra.s	loc_19446
000199D0                            ; ===========================================================================
000199D0                            
000199D0                            loc_19406:
000199D0 7001                       		moveq	#1,d0
000199D2 4A68 0036                  		tst.w	$36(a0)
000199D6 6700                       		beq.s	loc_19410
000199D8 7002                       		moveq	#2,d0
000199DA                            
000199DA                            loc_19410:
000199DA 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
000199E0 6700                       		beq.s	loc_19424
000199E2 6D00                       		blt.s	loc_1941C
000199E4 4440                       		neg.w	d0
000199E6                            
000199E6                            loc_1941C:
000199E6 4A68 0036                  		tst.w	$36(a0)
000199EA D168 0038                  		add.w	d0,$38(a0)
000199EE                            
000199EE                            loc_19424:
000199EE 7000                       		moveq	#0,d0
000199F0 4A68 0036                  		tst.w	$36(a0)
000199F4 6700                       		beq.s	loc_19438
000199F6 7002                       		moveq	#2,d0
000199F8 0828 0000 003D             		btst	#0,$3D(a0)
000199FE 6700                       		beq.s	loc_19438
00019A00 4440                       		neg.w	d0
00019A02                            
00019A02                            loc_19438:
00019A02 D068 0038                  		add.w	$38(a0),d0
00019A06 3140 000C                  		move.w	d0,$C(a0)
00019A0A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A10                            
00019A10                            loc_19446:
00019A10 6000 FDBA                  		bra.w	loc_19202
00019A14                            
00019A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A14                            
00019A14                            
00019A14                            Obj75_FindBlocks:			; XREF: loc_192AE
00019A14 4268 0036                  		clr.w	$36(a0)
00019A18 43F8 D040                  		lea	($FFFFD040).w,a1
00019A1C 703E                       		moveq	#$3E,d0
00019A1E 7276                       		moveq	#$76,d1
00019A20 1428 0034                  		move.b	$34(a0),d2
00019A24                            
00019A24                            Obj75_FindLoop:
00019A24 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019A26 6600                       		bne.s	loc_1946A	; if not, branch
00019A28 B429 0028                  		cmp.b	$28(a1),d2
00019A2C 6600                       		bne.s	loc_1946A
00019A2E 3149 0036                  		move.w	a1,$36(a0)
00019A32 6000                       		bra.s	locret_19472
00019A34                            ; ===========================================================================
00019A34                            
00019A34                            loc_1946A:
00019A34 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019A38 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019A3C                            
00019A3C                            locret_19472:
00019A3C 4E75                       		rts	
00019A3E                            ; End of function Obj75_FindBlocks
00019A3E                            
00019A3E                            ; ===========================================================================
00019A3E                            
00019A3E                            loc_19474:				; XREF: Obj75_ShipIndex
00019A3E 5368 003C                  		subq.w	#1,$3C(a0)
00019A42 6B00                       		bmi.s	loc_1947E
00019A44 6000 E3F8                  		bra.w	BossDefeated
00019A48                            ; ===========================================================================
00019A48                            
00019A48                            loc_1947E:
00019A48 5428 0025                  		addq.b	#2,$25(a0)
00019A4C 4268 0012                  		clr.w	$12(a0)
00019A50 08E8 0000 0022             		bset	#0,$22(a0)
00019A56 08A8 0007 0022             		bclr	#7,$22(a0)
00019A5C 4268 0010                  		clr.w	$10(a0)
00019A60 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019A66 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019A6A 6600                       		bne.s	loc_194A8
00019A6C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019A72                            
00019A72                            loc_194A8:
00019A72 6000 FD58                  		bra.w	loc_19202
00019A76                            ; ===========================================================================
00019A76                            
00019A76                            loc_194AC:				; XREF: Obj75_ShipIndex
00019A76 5268 003C                  		addq.w	#1,$3C(a0)
00019A7A 6700                       		beq.s	loc_194BC
00019A7C 6A00                       		bpl.s	loc_194C2
00019A7E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019A84 6000                       		bra.s	loc_194EE
00019A86                            ; ===========================================================================
00019A86                            
00019A86                            loc_194BC:
00019A86 4268 0012                  		clr.w	$12(a0)
00019A8A 6000                       		bra.s	loc_194EE
00019A8C                            ; ===========================================================================
00019A8C                            
00019A8C                            loc_194C2:
00019A8C 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019A92 6500                       		bcs.s	loc_194DA
00019A94 6700                       		beq.s	loc_194E0
00019A96 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019A9C 6500                       		bcs.s	loc_194EE
00019A9E 5428 0025                  		addq.b	#2,$25(a0)
00019AA2 6000                       		bra.s	loc_194EE
00019AA4                            ; ===========================================================================
00019AA4                            
00019AA4                            loc_194DA:
00019AA4 5168 0012                  		subq.w	#8,$12(a0)
00019AA8 6000                       		bra.s	loc_194EE
00019AAA                            ; ===========================================================================
00019AAA                            
00019AAA                            loc_194E0:
00019AAA 4268 0012                  		clr.w	$12(a0)
00019AAE 303C 0085                  		move.w	#$85,d0
00019AB2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019AB8                            
00019AB8                            loc_194EE:
00019AB8 6000 FD02                  		bra.w	loc_191F2
00019ABC                            ; ===========================================================================
00019ABC                            
00019ABC                            loc_194F2:				; XREF: Obj75_ShipIndex
00019ABC 317C 0400 0010             		move.w	#$400,$10(a0)
00019AC2 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019AC8 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019ACE 6400                       		bcc.s	loc_1950C
00019AD0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019AD4 6000                       		bra.s	loc_19512
00019AD6                            ; ===========================================================================
00019AD6                            
00019AD6                            loc_1950C:
00019AD6 4A28 0001                  		tst.b	1(a0)
00019ADA 6A00                       		bpl.s	Obj75_ShipDelete
00019ADC                            
00019ADC                            loc_19512:
00019ADC 6100 E3A2                  		bsr.w	BossMove
00019AE0 6000 FCC6                  		bra.w	loc_191DE
00019AE4                            ; ===========================================================================
00019AE4                            
00019AE4                            Obj75_ShipDelete:
00019AE4 4EF9 0000 DBCC             		jmp	DeleteObject
00019AEA                            ; ===========================================================================
00019AEA                            
00019AEA                            Obj75_FaceMain:				; XREF: Obj75_Index
00019AEA 7201                       		moveq	#1,d1
00019AEC 2268 0034                  		movea.l	$34(a0),a1
00019AF0 7000                       		moveq	#0,d0
00019AF2 1029 0025                  		move.b	$25(a1),d0
00019AF6 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019AFA 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019AFE 1141 001C                  		move.b	d1,$1C(a0)
00019B02 1010                       		move.b	(a0),d0
00019B04 B011                       		cmp.b	(a1),d0
00019B06 6600                       		bne.s	Obj75_FaceDelete
00019B08 6000                       		bra.s	loc_195BE
00019B0A                            ; ===========================================================================
00019B0A                            
00019B0A                            Obj75_FaceDelete:
00019B0A 4EF9 0000 DBCC             		jmp	DeleteObject
00019B10                            ; ===========================================================================
00019B10 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019B14 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019B18 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019B1C                            ; ===========================================================================
00019B1C                            
00019B1C                            loc_19552:				; XREF: off_19546
00019B1C 720A                       		moveq	#$A,d1
00019B1E 4E75                       		rts	
00019B20                            ; ===========================================================================
00019B20                            
00019B20                            loc_19556:				; XREF: off_19546
00019B20 7206                       		moveq	#6,d1
00019B22 4E75                       		rts	
00019B24                            ; ===========================================================================
00019B24                            
00019B24                            loc_1955A:				; XREF: off_19546
00019B24 7000                       		moveq	#0,d0
00019B26 1029 0028                  		move.b	$28(a1),d0
00019B2A 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019B2E 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019B32                            ; ===========================================================================
00019B32 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019B36 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019B3A                            ; ===========================================================================
00019B3A                            
00019B3A                            loc_19570:				; XREF: off_19568
00019B3A 6000                       		bra.s	loc_19574
00019B3C                            ; ===========================================================================
00019B3C                            
00019B3C                            loc_19572:				; XREF: off_19568
00019B3C 7206                       		moveq	#6,d1
00019B3E                            
00019B3E                            loc_19574:				; XREF: off_19546
00019B3E 4A29 0020                  		tst.b	$20(a1)
00019B42 6600                       		bne.s	loc_1957E
00019B44 7205                       		moveq	#5,d1
00019B46 4E75                       		rts	
00019B48                            ; ===========================================================================
00019B48                            
00019B48                            loc_1957E:
00019B48 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B4E 6500                       		bcs.s	locret_19588
00019B50 7204                       		moveq	#4,d1
00019B52                            
00019B52                            locret_19588:
00019B52 4E75                       		rts	
00019B54                            ; ===========================================================================
00019B54                            
00019B54                            Obj75_FlameMain:			; XREF: Obj75_Index
00019B54 117C 0007 001C             		move.b	#7,$1C(a0)
00019B5A 2268 0034                  		movea.l	$34(a0),a1
00019B5E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019B64 6600                       		bne.s	loc_195AA
00019B66 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B6C 4A28 0001                  		tst.b	1(a0)
00019B70 6A00                       		bpl.s	Obj75_FlameDelete
00019B72 6000                       		bra.s	loc_195B6
00019B74                            ; ===========================================================================
00019B74                            
00019B74                            loc_195AA:
00019B74 4A69 0010                  		tst.w	$10(a1)
00019B78 6700                       		beq.s	loc_195B6
00019B7A 117C 0008 001C             		move.b	#8,$1C(a0)
00019B80                            
00019B80                            loc_195B6:
00019B80 6000                       		bra.s	loc_195BE
00019B82                            ; ===========================================================================
00019B82                            
00019B82                            Obj75_FlameDelete:
00019B82 4EF9 0000 DBCC             		jmp	DeleteObject
00019B88                            ; ===========================================================================
00019B88                            
00019B88                            loc_195BE:
00019B88 43F9 0001 8290             		lea	(Ani_Eggman).l,a1
00019B8E 4EB9 0000 AC66             		jsr	AnimateSprite
00019B94 2268 0034                  		movea.l	$34(a0),a1
00019B98 3169 0008 0008             		move.w	8(a1),8(a0)
00019B9E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BA4                            
00019BA4                            loc_195DA:
00019BA4 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BAA 7003                       		moveq	#3,d0
00019BAC C028 0022                  		and.b	$22(a0),d0
00019BB0 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BB6 8128 0001                  		or.b	d0,1(a0)
00019BBA 4EF9 0000 DB90             		jmp	DisplaySprite
00019BC0                            ; ===========================================================================
00019BC0                            
00019BC0                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019BC0 217C 0001 83A8 0004        		move.l	#Map_BossItems,4(a0)
00019BC8 317C 246C 0002             		move.w	#$246C,2(a0)
00019BCE 117C 0005 001A             		move.b	#5,$1A(a0)
00019BD4 2268 0034                  		movea.l	$34(a0),a1
00019BD8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019BDE 6600                       		bne.s	loc_1961C
00019BE0 4A28 0001                  		tst.b	1(a0)
00019BE4 6A00                       		bpl.s	Obj75_SpikeDelete
00019BE6                            
00019BE6                            loc_1961C:
00019BE6 3169 0008 0008             		move.w	8(a1),8(a0)
00019BEC 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BF2 3028 003C                  		move.w	$3C(a0),d0
00019BF6 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019BFC 6600                       		bne.s	loc_19652
00019BFE 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019C04 6700                       		beq.s	loc_1964C
00019C06 4A29 0028                  		tst.b	$28(a1)
00019C0A 6600                       		bne.s	loc_19658
00019C0C 0C40 0094                  		cmpi.w	#$94,d0
00019C10 6C00                       		bge.s	loc_19658
00019C12 5E40                       		addq.w	#7,d0
00019C14 6000                       		bra.s	loc_19658
00019C16                            ; ===========================================================================
00019C16                            
00019C16                            loc_1964C:
00019C16 4A69 003C                  		tst.w	$3C(a1)
00019C1A 6A00                       		bpl.s	loc_19658
00019C1C                            
00019C1C                            loc_19652:
00019C1C 4A40                       		tst.w	d0
00019C1E 6F00                       		ble.s	loc_19658
00019C20 5B40                       		subq.w	#5,d0
00019C22                            
00019C22                            loc_19658:
00019C22 3140 003C                  		move.w	d0,$3C(a0)
00019C26 E440                       		asr.w	#2,d0
00019C28 D168 000C                  		add.w	d0,$C(a0)
00019C2C 117C 0008 0019             		move.b	#8,$19(a0)
00019C32 117C 000C 0016             		move.b	#$C,$16(a0)
00019C38 4228 0020                  		clr.b	$20(a0)
00019C3C 2268 0034                  		movea.l	$34(a0),a1
00019C40 4A29 0020                  		tst.b	$20(a1)
00019C44 6700                       		beq.s	loc_19688
00019C46 4A29 0029                  		tst.b	$29(a1)
00019C4A 6600                       		bne.s	loc_19688
00019C4C 117C 0084 0020             		move.b	#$84,$20(a0)
00019C52                            
00019C52                            loc_19688:
00019C52 6000 FF50                  		bra.w	loc_195DA
00019C56                            ; ===========================================================================
00019C56                            
00019C56                            Obj75_SpikeDelete:
00019C56 4EF9 0000 DBCC             		jmp	DeleteObject
00019C5C                            ; ===========================================================================
00019C5C                            ; ---------------------------------------------------------------------------
00019C5C                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019C5C                            ; ---------------------------------------------------------------------------
00019C5C                            
00019C5C                            Obj76:					; XREF: Obj_Index
00019C5C 7000                       		moveq	#0,d0
00019C5E 1028 0024                  		move.b	$24(a0),d0
00019C62 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019C66 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019C6A                            ; ===========================================================================
00019C6A 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019C6C 0000                       		dc.w Obj76_Action-Obj76_Index
00019C6E 0000                       		dc.w loc_19762-Obj76_Index
00019C70                            ; ===========================================================================
00019C70                            
00019C70                            Obj76_Main:				; XREF: Obj76_Index
00019C70 7800                       		moveq	#0,d4
00019C72 3A3C 2C10                  		move.w	#$2C10,d5
00019C76 7C09                       		moveq	#9,d6
00019C78 43D0                       		lea	(a0),a1
00019C7A 6000                       		bra.s	Obj76_MakeBlock
00019C7C                            ; ===========================================================================
00019C7C                            
00019C7C                            Obj76_Loop:
00019C7C 4EB9 0000 E016             		jsr	SingleObjLoad
00019C82 6600                       		bne.s	Obj76_ExitLoop
00019C84                            
00019C84                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019C84 12BC 0076                  		move.b	#$76,(a1)
00019C88 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019C90 337C 4000 0002             		move.w	#$4000,2(a1)
00019C96 137C 0004 0001             		move.b	#4,1(a1)
00019C9C 137C 0010 0019             		move.b	#$10,$19(a1)
00019CA2 137C 0010 0016             		move.b	#$10,$16(a1)
00019CA8 137C 0003 0018             		move.b	#3,$18(a1)
00019CAE 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019CB2 337C 0582 000C             		move.w	#$582,$C(a1)
00019CB8 3344 0028                  		move.w	d4,$28(a1)
00019CBC 0644 0101                  		addi.w	#$101,d4
00019CC0 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019CC4 5429 0024                  		addq.b	#2,$24(a1)
00019CC8 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019CCC                            
00019CCC                            Obj76_ExitLoop:
00019CCC 4E75                       		rts	
00019CCE                            ; ===========================================================================
00019CCE                            
00019CCE                            Obj76_Action:				; XREF: Obj76_Index
00019CCE 1028 0029                  		move.b	$29(a0),d0
00019CD2 B028 0028                  		cmp.b	$28(a0),d0
00019CD6 6700                       		beq.s	Obj76_Solid
00019CD8 4A00                       		tst.b	d0
00019CDA 6B00                       		bmi.s	loc_19718
00019CDC                            
00019CDC                            loc_19712:
00019CDC 6100 0000                  		bsr.w	Obj76_Break
00019CE0 6000                       		bra.s	Obj76_Display
00019CE2                            ; ===========================================================================
00019CE2                            
00019CE2                            loc_19718:
00019CE2 2268 0034                  		movea.l	$34(a0),a1
00019CE6 4A29 0021                  		tst.b	$21(a1)
00019CEA 67F0                       		beq.s	loc_19712
00019CEC 3169 0008 0008             		move.w	8(a1),8(a0)
00019CF2 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019CF8 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019CFE B2C8                       		cmpa.w	a0,a1
00019D00 6500                       		bcs.s	Obj76_Display
00019D02 3029 0012                  		move.w	$12(a1),d0
00019D06 48C0                       		ext.l	d0
00019D08 E080                       		asr.l	#8,d0
00019D0A D168 000C                  		add.w	d0,$C(a0)
00019D0E 6000                       		bra.s	Obj76_Display
00019D10                            ; ===========================================================================
00019D10                            
00019D10                            Obj76_Solid:				; XREF: Obj76_Action
00019D10 323C 001B                  		move.w	#$1B,d1
00019D14 343C 0010                  		move.w	#$10,d2
00019D18 363C 0011                  		move.w	#$11,d3
00019D1C 3828 0008                  		move.w	8(a0),d4
00019D20 4EB9 0000 FF60             		jsr	SolidObject
00019D26                            
00019D26                            Obj76_Display:				; XREF: Obj76_Action
00019D26 4EF9 0000 DB90             		jmp	DisplaySprite
00019D2C                            ; ===========================================================================
00019D2C                            
00019D2C                            loc_19762:				; XREF: Obj76_Index
00019D2C 4A28 0001                  		tst.b	1(a0)
00019D30 6A00                       		bpl.s	Obj76_Delete
00019D32 4EB9 0000 DB3E             		jsr	ObjectFall
00019D38 4EF9 0000 DB90             		jmp	DisplaySprite
00019D3E                            ; ===========================================================================
00019D3E                            
00019D3E                            Obj76_Delete:
00019D3E 4EF9 0000 DBCC             		jmp	DeleteObject
00019D44                            
00019D44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D44                            
00019D44                            
00019D44                            Obj76_Break:				; XREF: Obj76_Action
00019D44 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019D48 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019D4C 7801                       		moveq	#1,d4
00019D4E 7203                       		moveq	#3,d1
00019D50 7438                       		moveq	#$38,d2
00019D52 5428 0024                  		addq.b	#2,$24(a0)
00019D56 117C 0008 0019             		move.b	#8,$19(a0)
00019D5C 117C 0008 0016             		move.b	#8,$16(a0)
00019D62 43D0                       		lea	(a0),a1
00019D64 6000                       		bra.s	Obj76_MakeFrag
00019D66                            ; ===========================================================================
00019D66                            
00019D66                            Obj76_LoopFrag:
00019D66 4EB9 0000 E02C             		jsr	SingleObjLoad2
00019D6C 6600                       		bne.s	loc_197D4
00019D6E                            
00019D6E                            Obj76_MakeFrag:
00019D6E 45D0                       		lea	(a0),a2
00019D70 47D1                       		lea	(a1),a3
00019D72 7603                       		moveq	#3,d3
00019D74                            
00019D74                            loc_197AA:
00019D74 26DA                       		move.l	(a2)+,(a3)+
00019D76 26DA                       		move.l	(a2)+,(a3)+
00019D78 26DA                       		move.l	(a2)+,(a3)+
00019D7A 26DA                       		move.l	(a2)+,(a3)+
00019D7C 51CB FFF6                  		dbf	d3,loc_197AA
00019D80                            
00019D80 335C 0010                  		move.w	(a4)+,$10(a1)
00019D84 335C 0012                  		move.w	(a4)+,$12(a1)
00019D88 361D                       		move.w	(a5)+,d3
00019D8A D769 0008                  		add.w	d3,8(a1)
00019D8E 361D                       		move.w	(a5)+,d3
00019D90 D769 000C                  		add.w	d3,$C(a1)
00019D94 1344 001A                  		move.b	d4,$1A(a1)
00019D98 5244                       		addq.w	#1,d4
00019D9A 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019D9E                            
00019D9E                            loc_197D4:
00019D9E 303C 00CB                  		move.w	#$CB,d0
00019DA2 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019DA8                            ; End of function Obj76_Break
00019DA8                            
00019DA8                            ; ===========================================================================
00019DA8 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019DAC 0180 FE00                  		dc.w $180, $FE00
00019DB0 FF00 FF00                  		dc.w $FF00, $FF00
00019DB4 0100 FF00                  		dc.w $100, $FF00
00019DB8 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019DBC 0010 0000                  		dc.w $10, 0
00019DC0 0000 0010                  		dc.w 0,	$10
00019DC4 0010 0010                  		dc.w $10, $10
00019DC8                            ; ---------------------------------------------------------------------------
00019DC8                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019DC8                            ; ---------------------------------------------------------------------------
00019DC8                            Map_obj76:
00019DC8                            	include "_maps\obj76.asm"
00019DC8                            ; ---------------------------------------------------------------------------
00019DC8                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019DC8                            ; ---------------------------------------------------------------------------
00019DC8 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019DCC 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019DD0 0000                       		dc.w byte_19826-Map_obj76
00019DD2 02                         byte_19808:	dc.b 2
00019DD3 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019DD8 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019DDD 00                         		dc.b 0
00019DDE 01                         byte_19814:	dc.b 1
00019DDF F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019DE4 01                         byte_1981A:	dc.b 1
00019DE5 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019DEA 01                         byte_19820:	dc.b 1
00019DEB F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019DF0 01                         byte_19826:	dc.b 1
00019DF1 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019DF6                            		even
00019DF6                            		even
00019DF6                            
00019DF6                            ; ===========================================================================
00019DF6                            
00019DF6                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019DF6 4EF9 0000 DBCC             		jmp	DeleteObject
00019DFC                            ; ===========================================================================
00019DFC                            ; ---------------------------------------------------------------------------
00019DFC                            ; Object 82 - Eggman (SBZ2)
00019DFC                            ; ---------------------------------------------------------------------------
00019DFC                            
00019DFC                            Obj82:					; XREF: Obj_Index
00019DFC 7000                       		moveq	#0,d0
00019DFE 1028 0024                  		move.b	$24(a0),d0
00019E02 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019E06 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019E0A                            ; ===========================================================================
00019E0A 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019E0C 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019E0E 0000                       		dc.w Obj82_Switch-Obj82_Index
00019E10                            
00019E10 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019E13 0400 03                    		dc.b 4,	0, 3
00019E16                            ; ===========================================================================
00019E16                            
00019E16                            Obj82_Main:				; XREF: Obj82_Index
00019E16 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019E1A 317C 2160 0008             		move.w	#$2160,8(a0)
00019E20 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019E26 117C 000F 0020             		move.b	#$F,$20(a0)
00019E2C 117C 0010 0021             		move.b	#$10,$21(a0)
00019E32 08A8 0000 0022             		bclr	#0,$22(a0)
00019E38 4228 0025                  		clr.b	$25(a0)
00019E3C 115A 0024                  		move.b	(a2)+,$24(a0)
00019E40 115A 001C                  		move.b	(a2)+,$1C(a0)
00019E44 115A 0018                  		move.b	(a2)+,$18(a0)
00019E48 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019E50 317C 0400 0002             		move.w	#$400,2(a0)
00019E56 117C 0004 0001             		move.b	#4,1(a0)
00019E5C 08E8 0007 0001             		bset	#7,1(a0)
00019E62 117C 0020 0019             		move.b	#$20,$19(a0)
00019E68 4EB9 0000 E02C             		jsr	SingleObjLoad2
00019E6E 6600                       		bne.s	Obj82_Eggman
00019E70 2348 0034                  		move.l	a0,$34(a1)
00019E74 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019E78 337C 2130 0008             		move.w	#$2130,8(a1)
00019E7E 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019E84 4228 0025                  		clr.b	$25(a0)
00019E88 135A 0024                  		move.b	(a2)+,$24(a1)
00019E8C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019E90 135A 0018                  		move.b	(a2)+,$18(a1)
00019E94 237C 0000 C384 0004        		move.l	#Map_obj32,4(a1)
00019E9C 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019EA2 137C 0004 0001             		move.b	#4,1(a1)
00019EA8 08E9 0007 0001             		bset	#7,1(a1)
00019EAE 137C 0010 0019             		move.b	#$10,$19(a1)
00019EB4 137C 0000 001A             		move.b	#0,$1A(a1)
00019EBA                            
00019EBA                            Obj82_Eggman:				; XREF: Obj82_Index
00019EBA 7000                       		moveq	#0,d0
00019EBC 1028 0025                  		move.b	$25(a0),d0
00019EC0 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019EC4 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019EC8 43FA 0000                  		lea	Ani_obj82(pc),a1
00019ECC 4EB9 0000 AC66             		jsr	AnimateSprite
00019ED2 4EF9 0000 DB90             		jmp	DisplaySprite
00019ED8                            ; ===========================================================================
00019ED8 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019EDA 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019EDC 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019EDE 0000                       		dc.w loc_19934-Obj82_EggIndex
00019EE0                            ; ===========================================================================
00019EE0                            
00019EE0                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019EE0 3028 0008                  		move.w	8(a0),d0
00019EE4 9078 D008                  		sub.w	($FFFFD008).w,d0
00019EE8 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019EEC 6400                       		bcc.s	loc_19934	; if not, branch
00019EEE 5428 0025                  		addq.b	#2,$25(a0)
00019EF2 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019EF8 117C 0001 001C             		move.b	#1,$1C(a0)
00019EFE                            
00019EFE                            loc_19934:				; XREF: Obj82_EggIndex
00019EFE 4EF9 0000 DB6A             		jmp	SpeedToPos
00019F04                            ; ===========================================================================
00019F04                            
00019F04                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019F04 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019F08 6600                       		bne.s	loc_19954	; if time remains, branch
00019F0A 5428 0025                  		addq.b	#2,$25(a0)
00019F0E 117C 0002 001C             		move.b	#2,$1C(a0)
00019F14 5868 000C                  		addq.w	#4,$C(a0)
00019F18 317C 000F 003C             		move.w	#15,$3C(a0)
00019F1E                            
00019F1E                            loc_19954:
00019F1E 60DE                       		bra.s	loc_19934
00019F20                            ; ===========================================================================
00019F20                            
00019F20                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019F20 5368 003C                  		subq.w	#1,$3C(a0)
00019F24 6E00                       		bgt.s	loc_199D0
00019F26 6600                       		bne.s	loc_1996A
00019F28 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019F2E 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019F34                            
00019F34                            loc_1996A:
00019F34 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019F3A 6E00                       		bgt.s	loc_19976
00019F3C 4268 0010                  		clr.w	$10(a0)
00019F40                            
00019F40                            loc_19976:
00019F40 0668 0024 0012             		addi.w	#$24,$12(a0)
00019F46 4A68 0012                  		tst.w	$12(a0)
00019F4A 6B00                       		bmi.s	Obj82_FindBlocks
00019F4C 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019F52 6500                       		bcs.s	Obj82_FindBlocks
00019F54 317C 5357 0028             		move.w	#$5357,$28(a0)
00019F5A 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019F60 6500                       		bcs.s	Obj82_FindBlocks
00019F62 317C 059B 000C             		move.w	#$59B,$C(a0)
00019F68 4268 0012                  		clr.w	$12(a0)
00019F6C                            
00019F6C                            Obj82_FindBlocks:
00019F6C 3028 0010                  		move.w	$10(a0),d0
00019F70 8068 0012                  		or.w	$12(a0),d0
00019F74 6600                       		bne.s	loc_199D0
00019F76 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019F7A 703E                       		moveq	#$3E,d0
00019F7C 7240                       		moveq	#$40,d1
00019F7E                            
00019F7E                            Obj82_FindLoop:	
00019F7E D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019F80 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019F84 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019F88                            
00019F88 6600                       		bne.s	loc_199D0
00019F8A 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019F90 5428 0025                  		addq.b	#2,$25(a0)
00019F94 117C 0001 001C             		move.b	#1,$1C(a0)
00019F9A                            
00019F9A                            loc_199D0:
00019F9A 6000 FF62                  		bra.w	loc_19934
00019F9E                            ; ===========================================================================
00019F9E                            
00019F9E                            Obj82_Switch:				; XREF: Obj82_Index
00019F9E 7000                       		moveq	#0,d0
00019FA0 1028 0025                  		move.b	$25(a0),d0
00019FA4 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019FA8 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019FAC                            ; ===========================================================================
00019FAC 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019FAE 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019FB0                            ; ===========================================================================
00019FB0                            
00019FB0                            loc_199E6:				; XREF: Obj82_SwIndex
00019FB0 2268 0034                  		movea.l	$34(a0),a1
00019FB4 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019FBA 6600                       		bne.s	Obj82_SwDisplay
00019FBC 117C 0001 001A             		move.b	#1,$1A(a0)
00019FC2 5428 0025                  		addq.b	#2,$25(a0)
00019FC6                            
00019FC6                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019FC6 4EF9 0000 DB90             		jmp	DisplaySprite
00019FCC                            ; ===========================================================================
00019FCC                            Ani_obj82:
00019FCC                            	include "_anim\obj82.asm"
00019FCC                            ; ---------------------------------------------------------------------------
00019FCC                            ; Animation script - Eggman (SBZ2)
00019FCC                            ; ---------------------------------------------------------------------------
00019FCC 0000                       		dc.w byte_19A10-Ani_obj82
00019FCE 0000                       		dc.w byte_19A14-Ani_obj82
00019FD0 0000                       		dc.w byte_19A18-Ani_obj82
00019FD2 0000                       		dc.w byte_19A20-Ani_obj82
00019FD4 0000                       		dc.w byte_19A24-Ani_obj82
00019FD6 0000                       		dc.w byte_19A2A-Ani_obj82
00019FD8 0000                       		dc.w byte_19A30-Ani_obj82
00019FDA 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019FDE 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019FE2 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019FEA 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019FEE 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019FF4 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019FFA 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019FFE                            		even
00019FFE                            		even
00019FFE                            
00019FFE                            ; ---------------------------------------------------------------------------
00019FFE                            ; Sprite mappings - Eggman (SBZ2)
00019FFE                            ; ---------------------------------------------------------------------------
00019FFE                            Map_obj82:
00019FFE                            	include "_maps\obj82.asm"
00019FFE                            ; ================================================================================
00019FFE                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
00019FFE                            ; ================================================================================
00019FFE                            
00019FFE                            DATAA16Z12RYSAF:
00019FFE 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A002 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A006 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A00A 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A00E 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A012 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A014 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A015 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A01A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A01F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A024 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A025 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A02A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A02F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A034 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A039 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A03A E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A03F E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A044 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A049 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A04E 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A04F E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A054 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A059 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A05E 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A05F E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A064 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A069 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A06E E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A073 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A074 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A079 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A07E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A083 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A088 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A089 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A08E E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A093 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A098 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A09D F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A0A2 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A0A7 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A0AC 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A0AD 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A0B2 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A0B7 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A0BC F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A0C1 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A0C2 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A0C7 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A0CC 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A0D1 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A0D6 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A0DB 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A0DC E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0E1 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0E6 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A0EB 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0F0 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A0F5 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A0FA 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A0FF 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A104 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A105 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A10A F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A10F EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A114                            	even
0001A114                            	even
0001A114                            
0001A114                            ; ===========================================================================
0001A114                            ; ---------------------------------------------------------------------------
0001A114                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A114                            ; ---------------------------------------------------------------------------
0001A114                            
0001A114                            Obj83:					; XREF: Obj_Index
0001A114 7000                       		moveq	#0,d0
0001A116 1028 0024                  		move.b	$24(a0),d0
0001A11A 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A11E 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A122                            ; ===========================================================================
0001A122 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A124 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A126 0000                       		dc.w loc_19C36-Obj83_Index
0001A128 0000                       		dc.w loc_19C62-Obj83_Index
0001A12A 0000                       		dc.w loc_19C72-Obj83_Index
0001A12C 0000                       		dc.w loc_19C80-Obj83_Index
0001A12E                            ; ===========================================================================
0001A12E                            
0001A12E                            Obj83_Main:				; XREF: Obj83_Index
0001A12E 317C 2080 0008             		move.w	#$2080,8(a0)
0001A134 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A13A 117C 0080 0019             		move.b	#$80,$19(a0)
0001A140 117C 0010 0016             		move.b	#$10,$16(a0)
0001A146 117C 0004 0001             		move.b	#4,1(a0)
0001A14C 08E8 0007 0001             		bset	#7,1(a0)
0001A152 7800                       		moveq	#0,d4
0001A154 3A3C 2010                  		move.w	#$2010,d5
0001A158 7C07                       		moveq	#7,d6
0001A15A 45E8 0030                  		lea	$30(a0),a2
0001A15E                            
0001A15E                            Obj83_MakeBlock:
0001A15E 4EB9 0000 E016             		jsr	SingleObjLoad
0001A164 6600                       		bne.s	Obj83_ExitMake
0001A166 34C9                       		move.w	a1,(a2)+
0001A168 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A16C 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A174 337C 4518 0002             		move.w	#$4518,2(a1)
0001A17A 137C 0004 0001             		move.b	#4,1(a1)
0001A180 137C 0010 0019             		move.b	#$10,$19(a1)
0001A186 137C 0010 0016             		move.b	#$10,$16(a1)
0001A18C 137C 0003 0018             		move.b	#3,$18(a1)
0001A192 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A196 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A19C 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A1A0 137C 0008 0024             		move.b	#8,$24(a1)
0001A1A6 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A1AA                            
0001A1AA                            Obj83_ExitMake:
0001A1AA 5428 0024                  		addq.b	#2,$24(a0)
0001A1AE 4E75                       		rts	
0001A1B0                            ; ===========================================================================
0001A1B0                            
0001A1B0                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A1B0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A1B6 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A1B8 4228 001A                  		clr.b	$1A(a0)
0001A1BC 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A1C0                            
0001A1C0                            Obj83_Solid:
0001A1C0 7000                       		moveq	#0,d0
0001A1C2 1028 001A                  		move.b	$1A(a0),d0
0001A1C6 4400                       		neg.b	d0
0001A1C8 4880                       		ext.w	d0
0001A1CA 5040                       		addq.w	#8,d0
0001A1CC E940                       		asl.w	#4,d0
0001A1CE 383C 2100                  		move.w	#$2100,d4
0001A1D2 9840                       		sub.w	d0,d4
0001A1D4 1140 0019                  		move.b	d0,$19(a0)
0001A1D8 3144 0008                  		move.w	d4,8(a0)
0001A1DC 720B                       		moveq	#$B,d1
0001A1DE D240                       		add.w	d0,d1
0001A1E0 7410                       		moveq	#$10,d2
0001A1E2 7611                       		moveq	#$11,d3
0001A1E4 4EF9 0000 FF60             		jmp	SolidObject
0001A1EA                            ; ===========================================================================
0001A1EA                            
0001A1EA                            loc_19C36:				; XREF: Obj83_Index
0001A1EA 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A1F0 6400                       		bcc.s	Obj83_Solid2
0001A1F2 70FF                       		moveq	#-1,d0
0001A1F4 1028 001A                  		move.b	$1A(a0),d0
0001A1F8 4880                       		ext.w	d0
0001A1FA D040                       		add.w	d0,d0
0001A1FC 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A200 2240                       		movea.l	d0,a1
0001A202 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A208 5228 001A                  		addq.b	#1,$1A(a0)
0001A20C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A212 6700                       		beq.s	loc_19C62
0001A214                            
0001A214                            Obj83_Solid2:
0001A214 60AA                       		bra.s	Obj83_Solid
0001A216                            ; ===========================================================================
0001A216                            
0001A216                            loc_19C62:				; XREF: Obj83_Index
0001A216 08A8 0003 0022             		bclr	#3,$22(a0)
0001A21C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A222 6000 FBD2                  		bra.w	loc_1982C
0001A226                            ; ===========================================================================
0001A226                            
0001A226                            loc_19C72:				; XREF: Obj83_Index
0001A226 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A22C 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A22E 4EF9 0000 DB90             		jmp	DisplaySprite
0001A234                            ; ===========================================================================
0001A234                            
0001A234                            loc_19C80:				; XREF: Obj83_Index
0001A234 4A28 0001                  		tst.b	1(a0)
0001A238 6A00 FBBC                  		bpl.w	loc_1982C
0001A23C 4EB9 0000 DB3E             		jsr	ObjectFall
0001A242 4EF9 0000 DB90             		jmp	DisplaySprite
0001A248                            ; ===========================================================================
0001A248                            
0001A248                            Obj83_Break:				; XREF: loc_19C72
0001A248 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A24C 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A250 7801                       		moveq	#1,d4
0001A252 7203                       		moveq	#3,d1
0001A254 7438                       		moveq	#$38,d2
0001A256 5428 0024                  		addq.b	#2,$24(a0)
0001A25A 117C 0008 0019             		move.b	#8,$19(a0)
0001A260 117C 0008 0016             		move.b	#8,$16(a0)
0001A266 43D0                       		lea	(a0),a1
0001A268 6000                       		bra.s	Obj83_MakeFrag
0001A26A                            ; ===========================================================================
0001A26A                            
0001A26A                            Obj83_LoopFrag:
0001A26A 4EB9 0000 E02C             		jsr	SingleObjLoad2
0001A270 6600                       		bne.s	Obj83_BreakSnd
0001A272                            
0001A272                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A272 45D0                       		lea	(a0),a2
0001A274 47D1                       		lea	(a1),a3
0001A276 7603                       		moveq	#3,d3
0001A278                            
0001A278                            loc_19CC4:
0001A278 26DA                       		move.l	(a2)+,(a3)+
0001A27A 26DA                       		move.l	(a2)+,(a3)+
0001A27C 26DA                       		move.l	(a2)+,(a3)+
0001A27E 26DA                       		move.l	(a2)+,(a3)+
0001A280 51CB FFF6                  		dbf	d3,loc_19CC4
0001A284                            
0001A284 335C 0012                  		move.w	(a4)+,$12(a1)
0001A288 361D                       		move.w	(a5)+,d3
0001A28A D769 0008                  		add.w	d3,8(a1)
0001A28E 361D                       		move.w	(a5)+,d3
0001A290 D769 000C                  		add.w	d3,$C(a1)
0001A294 1344 001A                  		move.b	d4,$1A(a1)
0001A298 5244                       		addq.w	#1,d4
0001A29A 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A29E                            
0001A29E                            Obj83_BreakSnd:
0001A29E 303C 00CB                  		move.w	#$CB,d0
0001A2A2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A2A8 4EF9 0000 DB90             		jmp	DisplaySprite
0001A2AE                            ; ===========================================================================
0001A2AE 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A2B2 0120 00C0                  		dc.w $120, $C0
0001A2B6 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A2BA 0010 0000                  		dc.w $10, 0
0001A2BE 0000 0010                  		dc.w 0,	$10
0001A2C2 0010 0010                  		dc.w $10, $10
0001A2C6                            ; ---------------------------------------------------------------------------
0001A2C6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A2C6                            ; ---------------------------------------------------------------------------
0001A2C6                            Map_obj83:
0001A2C6                            	include "_maps\obj83.asm"
0001A2C6                            ; ---------------------------------------------------------------------------
0001A2C6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A2C6                            ; ---------------------------------------------------------------------------
0001A2C6 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A2CA 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A2CE 0000                       		dc.w byte_19D46-Map_obj83
0001A2D0 01                         byte_19D1C:	dc.b 1
0001A2D1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A2D6 02                         byte_19D22:	dc.b 2
0001A2D7 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A2DC F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A2E1 00                         		dc.b 0
0001A2E2 02                         byte_19D2E:	dc.b 2
0001A2E3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A2E8 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A2ED 00                         		dc.b 0
0001A2EE 02                         byte_19D3A:	dc.b 2
0001A2EF F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A2F4 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A2F9 00                         		dc.b 0
0001A2FA 02                         byte_19D46:	dc.b 2
0001A2FB F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A300 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A306 00                         		even
0001A306 00                         		even
0001A306                            
0001A306                            ; ===========================================================================
0001A306                            ; ---------------------------------------------------------------------------
0001A306                            ; Object 85 - Eggman (FZ)
0001A306                            ; ---------------------------------------------------------------------------
0001A306                            
0001A306                            Obj85_Delete:
0001A306 4EF9 0000 DBCC             		jmp	DeleteObject
0001A30C                            ; ===========================================================================
0001A30C                            
0001A30C                            Obj85:					; XREF: Obj_Index
0001A30C 7000                       		moveq	#0,d0
0001A30E 1028 0024                  		move.b	$24(a0),d0
0001A312 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A316 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A31A                            ; ===========================================================================
0001A31A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A31C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A31E 0000                       		dc.w loc_1A38E-Obj85_Index
0001A320 0000                       		dc.w loc_1A346-Obj85_Index
0001A322 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A324 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A326 0000                       		dc.w loc_1A264-Obj85_Index
0001A328                            
0001A328 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A32E 0001 9FFE                  		dc.l Map_obj82		; mappings pointer
0001A332 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A338 0000 0000                  		dc.l Map_obj84
0001A33C 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A342 0000 0000                  		dc.l Map_FZBoss
0001A346 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A34C 0001 9FFE                  		dc.l Map_obj82
0001A350 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A356 0001 82E0                  		dc.l Map_Eggman
0001A35A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A360 0001 82E0                  		dc.l Map_Eggman
0001A364                            
0001A364 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A369 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A36E 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A373 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A378 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A37D 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A382                            ; ===========================================================================
0001A382                            
0001A382                            Obj85_Main:				; XREF: Obj85_Index
0001A382 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A386 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A38A 2248                       		movea.l	a0,a1
0001A38C 7205                       		moveq	#5,d1
0001A38E 6000                       		bra.s	Obj85_LoadBoss
0001A390                            ; ===========================================================================
0001A390                            
0001A390                            Obj85_Loop:
0001A390 4EB9 0000 E02C             		jsr	SingleObjLoad2
0001A396 6600                       		bne.s	loc_19E20
0001A398                            
0001A398                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A398 12BC 0085                  		move.b	#$85,(a1)
0001A39C 335A 0008                  		move.w	(a2)+,8(a1)
0001A3A0 335A 000C                  		move.w	(a2)+,$C(a1)
0001A3A4 335A 0002                  		move.w	(a2)+,2(a1)
0001A3A8 235A 0004                  		move.l	(a2)+,4(a1)
0001A3AC 135B 0024                  		move.b	(a3)+,$24(a1)
0001A3B0 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A3B4 135B 0018                  		move.b	(a3)+,$18(a1)
0001A3B8 135B 0017                  		move.b	(a3)+,$17(a1)
0001A3BC 135B 0016                  		move.b	(a3)+,$16(a1)
0001A3C0 137C 0004 0001             		move.b	#4,1(a1)
0001A3C6 08E8 0007 0001             		bset	#7,1(a0)
0001A3CC 2348 0034                  		move.l	a0,$34(a1)
0001A3D0 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A3D4                            
0001A3D4                            loc_19E20:
0001A3D4 45E8 0036                  		lea	$36(a0),a2
0001A3D8 4EB9 0000 E016             		jsr	SingleObjLoad
0001A3DE 6600                       		bne.s	loc_19E5A
0001A3E0 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A3E4 3489                       		move.w	a1,(a2)
0001A3E6 2348 0034                  		move.l	a0,$34(a1)
0001A3EA 45E8 0038                  		lea	$38(a0),a2
0001A3EE 7400                       		moveq	#0,d2
0001A3F0 7203                       		moveq	#3,d1
0001A3F2                            
0001A3F2                            loc_19E3E:
0001A3F2 4EB9 0000 E02C             		jsr	SingleObjLoad2
0001A3F8 6600                       		bne.s	loc_19E5A
0001A3FA 34C9                       		move.w	a1,(a2)+
0001A3FC 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A400 2348 0034                  		move.l	a0,$34(a1)
0001A404 1342 0028                  		move.b	d2,$28(a1)
0001A408 5442                       		addq.w	#2,d2
0001A40A 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A40E                            
0001A40E                            loc_19E5A:
0001A40E 317C 0000 0034             		move.w	#0,$34(a0)
0001A414 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A41A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A420                            
0001A420                            Obj85_Eggman:				; XREF: Obj85_Index
0001A420 7000                       		moveq	#0,d0
0001A422 1028 0034                  		move.b	$34(a0),d0
0001A426 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A42A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A42E 4EF9 0000 DB90             		jmp	DisplaySprite
0001A434                            ; ===========================================================================
0001A434 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A438 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A43C 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A440 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A444                            ; ===========================================================================
0001A444                            
0001A444                            loc_19E90:				; XREF: off_19E80
0001A444 4AB8 F680                  		tst.l	($FFFFF680).w
0001A448 6600                       		bne.s	loc_19EA2
0001A44A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A450 6500                       		bcs.s	loc_19EA2
0001A452 5428 0034                  		addq.b	#2,$34(a0)
0001A456                            
0001A456                            loc_19EA2:
0001A456 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A45A 4E75                       		rts	
0001A45C                            ; ===========================================================================
0001A45C                            
0001A45C                            loc_19EA8:				; XREF: off_19E80
0001A45C 4A68 0030                  		tst.w	$30(a0)
0001A460 6A00                       		bpl.s	loc_19F10
0001A462 4268 0030                  		clr.w	$30(a0)
0001A466 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001A46C 0240 000C                  		andi.w	#$C,d0
0001A470 3200                       		move.w	d0,d1
0001A472 5441                       		addq.w	#2,d1
0001A474 4A80                       		tst.l	d0
0001A476 6A00                       		bpl.s	loc_19EC6
0001A478 C141                       		exg	d1,d0
0001A47A                            
0001A47A                            loc_19EC6:
0001A47A 43FA 0000                  		lea	word_19FD6(pc),a1
0001A47E 3031 0000                  		move.w	(a1,d0.w),d0
0001A482 3231 1000                  		move.w	(a1,d1.w),d1
0001A486 3140 0030                  		move.w	d0,$30(a0)
0001A48A 74FF                       		moveq	#-1,d2
0001A48C 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A490 2242                       		movea.l	d2,a1
0001A492 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A498 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A49E 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A4A2 2242                       		movea.l	d2,a1
0001A4A4 137C 0001 0029             		move.b	#1,$29(a1)
0001A4AA 337C 0000 0030             		move.w	#0,$30(a1)
0001A4B0 317C 0001 0032             		move.w	#1,$32(a0)
0001A4B6 4228 0035                  		clr.b	$35(a0)
0001A4BA 303C 00B7                  		move.w	#$B7,d0
0001A4BE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A4C4                            
0001A4C4                            loc_19F10:
0001A4C4 4A68 0032                  		tst.w	$32(a0)
0001A4C8 6B00 0000                  		bmi.w	loc_19FA6
0001A4CC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A4D2 3038 D008                  		move.w	($FFFFD008).w,d0
0001A4D6 9068 0008                  		sub.w	8(a0),d0
0001A4DA 6500                       		bcs.s	loc_19F2E
0001A4DC 08E8 0000 0022             		bset	#0,$22(a0)
0001A4E2                            
0001A4E2                            loc_19F2E:
0001A4E2 323C 002B                  		move.w	#$2B,d1
0001A4E6 343C 0014                  		move.w	#$14,d2
0001A4EA 363C 0014                  		move.w	#$14,d3
0001A4EE 3828 0008                  		move.w	8(a0),d4
0001A4F2 4EB9 0000 FF60             		jsr	SolidObject
0001A4F8 4A44                       		tst.w	d4
0001A4FA 6E00                       		bgt.s	loc_19F50
0001A4FC                            
0001A4FC                            loc_19F48:
0001A4FC 4A28 0035                  		tst.b	$35(a0)
0001A500 6600                       		bne.s	loc_19F88
0001A502 6000                       		bra.s	loc_19F96
0001A504                            ; ===========================================================================
0001A504                            
0001A504                            loc_19F50:
0001A504 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A508 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A50E 66EC                       		bne.s	loc_19F48
0001A510 303C 0300                  		move.w	#$300,d0
0001A514 0828 0000 0022             		btst	#0,$22(a0)
0001A51A 6600                       		bne.s	loc_19F6A
0001A51C 4440                       		neg.w	d0
0001A51E                            
0001A51E                            loc_19F6A:
0001A51E 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A522 4A28 0035                  		tst.b	$35(a0)
0001A526 6600                       		bne.s	loc_19F88
0001A528 5328 0021                  		subq.b	#1,$21(a0)
0001A52C 117C 0064 0035             		move.b	#$64,$35(a0)
0001A532 303C 00AC                  		move.w	#$AC,d0
0001A536 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A53C                            
0001A53C                            loc_19F88:
0001A53C 5328 0035                  		subq.b	#1,$35(a0)
0001A540 6700                       		beq.s	loc_19F96
0001A542 117C 0003 001C             		move.b	#3,$1C(a0)
0001A548 6000                       		bra.s	loc_19F9C
0001A54A                            ; ===========================================================================
0001A54A                            
0001A54A                            loc_19F96:
0001A54A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A550                            
0001A550                            loc_19F9C:
0001A550 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A554 4EF9 0000 AC66             		jmp	AnimateSprite
0001A55A                            ; ===========================================================================
0001A55A                            
0001A55A                            loc_19FA6:
0001A55A 4A28 0021                  		tst.b	$21(a0)
0001A55E 6700                       		beq.s	loc_19FBC
0001A560 5428 0034                  		addq.b	#2,$34(a0)
0001A564 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A56A 4268 0032                  		clr.w	$32(a0)
0001A56E 4E75                       		rts	
0001A570                            ; ===========================================================================
0001A570                            
0001A570                            loc_19FBC:
0001A570 117C 0006 0034             		move.b	#6,$34(a0)
0001A576 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A57C 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A582 117C 0014 0016             		move.b	#$14,$16(a0)
0001A588 4E75                       		rts	
0001A58A                            ; ===========================================================================
0001A58A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A59A                            ; ===========================================================================
0001A59A                            
0001A59A                            loc_19FE6:				; XREF: off_19E80
0001A59A 70FF                       		moveq	#-1,d0
0001A59C 3028 0036                  		move.w	$36(a0),d0
0001A5A0 2240                       		movea.l	d0,a1
0001A5A2 4A68 0030                  		tst.w	$30(a0)
0001A5A6 6A00                       		bpl.s	loc_1A000
0001A5A8 4268 0030                  		clr.w	$30(a0)
0001A5AC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5B2 6100                       		bsr.s	loc_1A020
0001A5B4                            
0001A5B4                            loc_1A000:
0001A5B4 700F                       		moveq	#$F,d0
0001A5B6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A5BA 6600                       		bne.s	loc_1A00A
0001A5BC 6100                       		bsr.s	loc_1A020
0001A5BE                            
0001A5BE                            loc_1A00A:
0001A5BE 4A68 0032                  		tst.w	$32(a0)
0001A5C2 6700                       		beq.s	locret_1A01E
0001A5C4 5528 0034                  		subq.b	#2,$34(a0)
0001A5C8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A5CE 4268 0032                  		clr.w	$32(a0)
0001A5D2                            
0001A5D2                            locret_1A01E:
0001A5D2 4E75                       		rts	
0001A5D4                            ; ===========================================================================
0001A5D4                            
0001A5D4                            loc_1A020:
0001A5D4 303C 00B1                  		move.w	#$B1,d0
0001A5D8 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A5DE                            ; ===========================================================================
0001A5DE                            
0001A5DE                            loc_1A02A:				; XREF: off_19E80
0001A5DE 117C 0030 0017             		move.b	#$30,$17(a0)
0001A5E4 08E8 0000 0022             		bset	#0,$22(a0)
0001A5EA 4EB9 0000 DB6A             		jsr	SpeedToPos
0001A5F0 117C 0006 001A             		move.b	#6,$1A(a0)
0001A5F6 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A5FC 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A602 6500                       		bcs.s	loc_1A070
0001A604 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A60A 5428 0034                  		addq.b	#2,$34(a0)
0001A60E 117C 0020 0017             		move.b	#$20,$17(a0)
0001A614 317C 0100 0010             		move.w	#$100,$10(a0)
0001A61A 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A620 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A624                            
0001A624                            loc_1A070:
0001A624 6000 0000                  		bra.w	loc_1A166
0001A628                            ; ===========================================================================
0001A628                            
0001A628                            loc_1A074:				; XREF: off_19E80
0001A628 08E8 0000 0022             		bset	#0,$22(a0)
0001A62E 117C 0004 001C             		move.b	#4,$1C(a0)
0001A634 4EB9 0000 DB6A             		jsr	SpeedToPos
0001A63A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A640 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A646 6500                       		bcs.s	loc_1A09A
0001A648 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A64E                            
0001A64E                            loc_1A09A:
0001A64E 317C 0400 0010             		move.w	#$400,$10(a0)
0001A654 3028 0008                  		move.w	8(a0),d0
0001A658 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A65C 6A00                       		bpl.s	loc_1A0B4
0001A65E 317C 0500 0010             		move.w	#$500,$10(a0)
0001A664 6000 0000                  		bra.w	loc_1A0F2
0001A668                            ; ===========================================================================
0001A668                            
0001A668                            loc_1A0B4:
0001A668 0440 0070                  		subi.w	#$70,d0
0001A66C 6500                       		bcs.s	loc_1A0F2
0001A66E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A674 5140                       		subq.w	#8,d0
0001A676 6500                       		bcs.s	loc_1A0F2
0001A678 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A67E 5140                       		subq.w	#8,d0
0001A680 6500                       		bcs.s	loc_1A0F2
0001A682 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A688 5140                       		subq.w	#8,d0
0001A68A 6500                       		bcs.s	loc_1A0F2
0001A68C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A692 5140                       		subq.w	#8,d0
0001A694 6500                       		bcs.s	loc_1A0F2
0001A696 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A69C 0440 0038                  		subi.w	#$38,d0
0001A6A0 6500                       		bcs.s	loc_1A0F2
0001A6A2 4268 0010                  		clr.w	$10(a0)
0001A6A6                            
0001A6A6                            loc_1A0F2:
0001A6A6 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A6AC 6500                       		bcs.s	loc_1A110
0001A6AE 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A6B4 317C 0240 0010             		move.w	#$240,$10(a0)
0001A6BA 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A6C0 5428 0034                  		addq.b	#2,$34(a0)
0001A6C4                            
0001A6C4                            loc_1A110:
0001A6C4 6000                       		bra.s	loc_1A15C
0001A6C6                            ; ===========================================================================
0001A6C6                            
0001A6C6                            loc_1A112:				; XREF: off_19E80
0001A6C6 4EB9 0000 DB6A             		jsr	SpeedToPos
0001A6CC 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A6D2 6500                       		bcs.s	loc_1A124
0001A6D4 4268 0010                  		clr.w	$10(a0)
0001A6D8                            
0001A6D8                            loc_1A124:
0001A6D8 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A6DE 4A68 0012                  		tst.w	$12(a0)
0001A6E2 6B00                       		bmi.s	loc_1A142
0001A6E4 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A6EA 6500                       		bcs.s	loc_1A142
0001A6EC 317C 0592 000C             		move.w	#$592,$C(a0)
0001A6F2 4268 0012                  		clr.w	$12(a0)
0001A6F6                            
0001A6F6                            loc_1A142:
0001A6F6 3028 0010                  		move.w	$10(a0),d0
0001A6FA 8068 0012                  		or.w	$12(a0),d0
0001A6FE 6600                       		bne.s	loc_1A15C
0001A700 5428 0034                  		addq.b	#2,$34(a0)
0001A704 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A70A 117C 0001 0021             		move.b	#1,$21(a0)
0001A710                            
0001A710                            loc_1A15C:
0001A710 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A714 4EB9 0000 AC66             		jsr	AnimateSprite
0001A71A                            
0001A71A                            loc_1A166:
0001A71A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A720 6C00                       		bge.s	loc_1A172
0001A722 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A726                            
0001A726                            loc_1A172:
0001A726 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A72C 6C00                       		bge.s	locret_1A190
0001A72E 323C 001B                  		move.w	#$1B,d1
0001A732 343C 0070                  		move.w	#$70,d2
0001A736 363C 0071                  		move.w	#$71,d3
0001A73A 3828 0008                  		move.w	8(a0),d4
0001A73E 4EF9 0000 FF60             		jmp	SolidObject
0001A744                            ; ===========================================================================
0001A744                            
0001A744                            locret_1A190:
0001A744 4E75                       		rts	
0001A746                            ; ===========================================================================
0001A746                            
0001A746                            loc_1A192:				; XREF: off_19E80
0001A746 217C 0001 82E0 0004        		move.l	#Map_Eggman,4(a0)
0001A74E 317C 0400 0002             		move.w	#$400,2(a0)
0001A754 117C 0000 001C             		move.b	#0,$1C(a0)
0001A75A 08E8 0000 0022             		bset	#0,$22(a0)
0001A760 4EB9 0000 DB6A             		jsr	SpeedToPos
0001A766 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A76C 6400                       		bcc.s	loc_1A1D0
0001A76E 317C 0180 0010             		move.w	#$180,$10(a0)
0001A774 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A77A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A780 5428 0034                  		addq.b	#2,$34(a0)
0001A784                            
0001A784                            loc_1A1D0:
0001A784 6000 FF8A                  		bra.w	loc_1A15C
0001A788                            ; ===========================================================================
0001A788                            
0001A788                            loc_1A1D4:				; XREF: off_19E80
0001A788 08E8 0000 0022             		bset	#0,$22(a0)
0001A78E 4EB9 0000 DB6A             		jsr	SpeedToPos
0001A794 4A68 0030                  		tst.w	$30(a0)
0001A798 6600                       		bne.s	loc_1A1FC
0001A79A 4A28 0020                  		tst.b	$20(a0)
0001A79E 6600                       		bne.s	loc_1A216
0001A7A0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A7A6 303C 00AC                  		move.w	#$AC,d0
0001A7AA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7B0                            
0001A7B0                            loc_1A1FC:
0001A7B0 5368 0030                  		subq.w	#1,$30(a0)
0001A7B4 6600                       		bne.s	loc_1A216
0001A7B6 4A28 0022                  		tst.b	$22(a0)
0001A7BA 6A00                       		bpl.s	loc_1A210
0001A7BC 317C 0060 0012             		move.w	#$60,$12(a0)
0001A7C2 6000                       		bra.s	loc_1A216
0001A7C4                            ; ===========================================================================
0001A7C4                            
0001A7C4                            loc_1A210:
0001A7C4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7CA                            
0001A7CA                            loc_1A216:
0001A7CA 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A7D0 6D00                       		blt.s	loc_1A23A
0001A7D2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A7D8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A7DE 4278 D014                  		clr.w	($FFFFD014).w
0001A7E2 4A68 0012                  		tst.w	$12(a0)
0001A7E6 6A00                       		bpl.s	loc_1A248
0001A7E8 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A7EE                            
0001A7EE                            loc_1A23A:
0001A7EE 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A7F4 6D00                       		blt.s	loc_1A248
0001A7F6 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A7FC                            
0001A7FC                            loc_1A248:
0001A7FC 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A802 6500                       		bcs.s	loc_1A260
0001A804 4A28 0001                  		tst.b	1(a0)
0001A808 6B00                       		bmi.s	loc_1A260
0001A80A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A810 6000 FAF4                  		bra.w	Obj85_Delete
0001A814                            ; ===========================================================================
0001A814                            
0001A814                            loc_1A260:
0001A814 6000 FEFA                  		bra.w	loc_1A15C
0001A818                            ; ===========================================================================
0001A818                            
0001A818                            loc_1A264:				; XREF: Obj85_Index
0001A818 2268 0034                  		movea.l	$34(a0),a1
0001A81C 1011                       		move.b	(a1),d0
0001A81E B010                       		cmp.b	(a0),d0
0001A820 6600 FAE4                  		bne.w	Obj85_Delete
0001A824 117C 0007 001C             		move.b	#7,$1C(a0)
0001A82A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A830 6C00                       		bge.s	loc_1A280
0001A832 6000                       		bra.s	loc_1A2A6
0001A834                            ; ===========================================================================
0001A834                            
0001A834                            loc_1A280:
0001A834 4A69 0010                  		tst.w	$10(a1)
0001A838 6700                       		beq.s	loc_1A28C
0001A83A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A840                            
0001A840                            loc_1A28C:
0001A840 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A844 4EB9 0000 AC66             		jsr	AnimateSprite
0001A84A                            
0001A84A                            loc_1A296:
0001A84A 2268 0034                  		movea.l	$34(a0),a1
0001A84E 3169 0008 0008             		move.w	8(a1),8(a0)
0001A854 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A85A                            
0001A85A                            loc_1A2A6:
0001A85A 2268 0034                  		movea.l	$34(a0),a1
0001A85E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A864 7003                       		moveq	#3,d0
0001A866 C028 0022                  		and.b	$22(a0),d0
0001A86A 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A870 8128 0001                  		or.b	d0,1(a0)
0001A874 4EF9 0000 DB90             		jmp	DisplaySprite
0001A87A                            ; ===========================================================================
0001A87A                            
0001A87A                            loc_1A2C6:				; XREF: Obj85_Index
0001A87A 2268 0034                  		movea.l	$34(a0),a1
0001A87E 1011                       		move.b	(a1),d0
0001A880 B010                       		cmp.b	(a0),d0
0001A882 6600 FA82                  		bne.w	Obj85_Delete
0001A886 0CA9 0001 82E0 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A88E 6700                       		beq.s	loc_1A2E4
0001A890 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A896 60C2                       		bra.s	loc_1A2A6
0001A898                            ; ===========================================================================
0001A898                            
0001A898                            loc_1A2E4:
0001A898 117C 0001 001C             		move.b	#1,$1C(a0)
0001A89E 4A29 0021                  		tst.b	$21(a1)
0001A8A2 6F00                       		ble.s	loc_1A312
0001A8A4 117C 0006 001C             		move.b	#6,$1C(a0)
0001A8AA 217C 0001 82E0 0004        		move.l	#Map_Eggman,4(a0)
0001A8B2 317C 0400 0002             		move.w	#$400,2(a0)
0001A8B8 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A8BC 4EB9 0000 AC66             		jsr	AnimateSprite
0001A8C2 6000 FF86                  		bra.w	loc_1A296
0001A8C6                            ; ===========================================================================
0001A8C6                            
0001A8C6                            loc_1A312:
0001A8C6 4A28 0001                  		tst.b	1(a0)
0001A8CA 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A8CE 6100 D56E                  		bsr.w	BossDefeated
0001A8D2 117C 0002 0018             		move.b	#2,$18(a0)
0001A8D8 117C 0000 001C             		move.b	#0,$1C(a0)
0001A8DE 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A8E6 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A8EC 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A8F0 4EB9 0000 AC66             		jsr	AnimateSprite
0001A8F6 6000 FF52                  		bra.w	loc_1A296
0001A8FA                            ; ===========================================================================
0001A8FA                            
0001A8FA                            loc_1A346:				; XREF: Obj85_Index
0001A8FA 08E8 0000 0022             		bset	#0,$22(a0)
0001A900 2268 0034                  		movea.l	$34(a0),a1
0001A904 0CA9 0001 82E0 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A90C 6700                       		beq.s	loc_1A35E
0001A90E 6000 FF4A                  		bra.w	loc_1A2A6
0001A912                            ; ===========================================================================
0001A912                            
0001A912                            loc_1A35E:
0001A912 3169 0008 0008             		move.w	8(a1),8(a0)
0001A918 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A91E 4A28 001E                  		tst.b	$1E(a0)
0001A922 6600                       		bne.s	loc_1A376
0001A924 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A92A                            
0001A92A                            loc_1A376:
0001A92A 5328 001E                  		subq.b	#1,$1E(a0)
0001A92E 6E00                       		bgt.s	loc_1A38A
0001A930 5228 001A                  		addq.b	#1,$1A(a0)
0001A934 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A93A 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A93E                            
0001A93E                            loc_1A38A:
0001A93E 6000 FF0A                  		bra.w	loc_1A296
0001A942                            ; ===========================================================================
0001A942                            
0001A942                            loc_1A38E:				; XREF: Obj85_Index
0001A942 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A948 3038 D008                  		move.w	($FFFFD008).w,d0
0001A94C 9068 0008                  		sub.w	8(a0),d0
0001A950 6500                       		bcs.s	loc_1A3A6
0001A952 4A28 0001                  		tst.b	1(a0)
0001A956 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A95A                            
0001A95A                            loc_1A3A6:
0001A95A 4EF9 0000 DB90             		jmp	DisplaySprite
0001A960                            ; ===========================================================================
0001A960                            
0001A960                            loc_1A3AC:				; XREF: Obj85_Index
0001A960 117C 0000 001A             		move.b	#0,$1A(a0)
0001A966 08E8 0000 0022             		bset	#0,$22(a0)
0001A96C 2268 0034                  		movea.l	$34(a0),a1
0001A970 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A976 6600                       		bne.s	loc_1A3D0
0001A978 0CA9 0001 82E0 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A980 6700 F984                  		beq.w	Obj85_Delete
0001A984                            
0001A984                            loc_1A3D0:
0001A984 6000 FED4                  		bra.w	loc_1A2A6
0001A988                            ; ===========================================================================
0001A988                            Ani_obj85:
0001A988                            	include "_anim\obj85.asm"
0001A988                            ; ---------------------------------------------------------------------------
0001A988                            ; Animation script - Eggman (FZ)
0001A988                            ; ---------------------------------------------------------------------------
0001A988 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A98A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A98E                            		even
0001A98E                            		even
0001A98E                            
0001A98E                            Map_Eggman2:
0001A98E                            	include "_maps\Eggman2.asm"
0001A98E                            ; ---------------------------------------------------------------------------
0001A98E                            ; Sprite mappings - Eggman (FZ)
0001A98E                            ; ---------------------------------------------------------------------------
0001A98E 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A990 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A992 06                         byte_1A3DE:	dc.b 6
0001A993 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A998 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A99D EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9A2 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9A7 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9AC 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9B1 06                         byte_1A3FD:	dc.b 6
0001A9B2 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A9B7 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A9BC EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9C1 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9C6 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9CB 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9D0                            		even
0001A9D0                            		even
0001A9D0                            
0001A9D0                            Map_FZBoss:
0001A9D0                            	include "_maps\FZ boss.asm"
0001A9D0                            ; ---------------------------------------------------------------------------
0001A9D0                            ; Sprite mappings - boss (FZ)
0001A9D0                            ; ---------------------------------------------------------------------------
0001A9D0 0000                       		dc.w byte_1A422-Map_FZBoss
0001A9D2 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A9D4 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A9D6 02                         byte_1A422:	dc.b 2
0001A9D7 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A9DC 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A9E1 03                         byte_1A42D:	dc.b 3
0001A9E2 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A9E7 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A9EC 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A9F1 02                         byte_1A43D:	dc.b 2
0001A9F2 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A9F7 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A9FC                            		even
0001A9FC                            		even
0001A9FC                            
0001A9FC                            ; ===========================================================================
0001A9FC                            
0001A9FC                            Obj84_Delete:
0001A9FC 4EF9 0000 DBCC             		jmp	DeleteObject
0001AA02                            ; ===========================================================================
0001AA02                            ; ---------------------------------------------------------------------------
0001AA02                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AA02                            ; ---------------------------------------------------------------------------
0001AA02                            
0001AA02                            Obj84:					; XREF: Obj_Index
0001AA02 7000                       		moveq	#0,d0
0001AA04 1028 0024                  		move.b	$24(a0),d0
0001AA08 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AA0C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AA10                            ; ===========================================================================
0001AA10 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AA12 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AA14 0000                       		dc.w loc_1A57E-Obj84_Index
0001AA16                            
0001AA16 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AA1A 2550 0620                  		dc.w $2550, $620
0001AA1E 2490 04C0                  		dc.w $2490, $4C0
0001AA22 2510 04C0                  		dc.w $2510, $4C0
0001AA26                            ; ===========================================================================
0001AA26                            
0001AA26                            Obj84_Main:				; XREF: Obj84_Index
0001AA26 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AA2A 7000                       		moveq	#0,d0
0001AA2C 1028 0028                  		move.b	$28(a0),d0
0001AA30 D040                       		add.w	d0,d0
0001AA32 D2C0                       		adda.w	d0,a1
0001AA34 117C 0004 0001             		move.b	#4,1(a0)
0001AA3A 08E8 0007 0001             		bset	#7,1(a0)
0001AA40 08E8 0004 0001             		bset	#4,1(a0)
0001AA46 317C 0300 0002             		move.w	#$300,2(a0)
0001AA4C 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AA54 3159 0008                  		move.w	(a1)+,8(a0)
0001AA58 3151 000C                  		move.w	(a1),$C(a0)
0001AA5C 3159 0038                  		move.w	(a1)+,$38(a0)
0001AA60 117C 0020 0016             		move.b	#$20,$16(a0)
0001AA66 117C 0060 0017             		move.b	#$60,$17(a0)
0001AA6C 117C 0020 0019             		move.b	#$20,$19(a0)
0001AA72 117C 0060 0016             		move.b	#$60,$16(a0)
0001AA78 117C 0003 0018             		move.b	#3,$18(a0)
0001AA7E 5428 0024                  		addq.b	#2,$24(a0)
0001AA82                            
0001AA82                            loc_1A4CE:				; XREF: Obj84_Index
0001AA82 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AA88 6F00                       		ble.s	loc_1A4DC
0001AA8A 08E8 0001 0001             		bset	#1,1(a0)
0001AA90                            
0001AA90                            loc_1A4DC:
0001AA90 42A8 003C                  		clr.l	$3C(a0)
0001AA94 4A28 0029                  		tst.b	$29(a0)
0001AA98 6700                       		beq.s	loc_1A4EA
0001AA9A 5428 0024                  		addq.b	#2,$24(a0)
0001AA9E                            
0001AA9E                            loc_1A4EA:
0001AA9E 2028 003C                  		move.l	$3C(a0),d0
0001AAA2 2228 0038                  		move.l	$38(a0),d1
0001AAA6 D280                       		add.l	d0,d1
0001AAA8 4841                       		swap	d1
0001AAAA 3141 000C                  		move.w	d1,$C(a0)
0001AAAE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AAB4 6600                       		bne.s	loc_1A524
0001AAB6 4A68 0030                  		tst.w	$30(a0)
0001AABA 6A00                       		bpl.s	loc_1A524
0001AABC 70F6                       		moveq	#-$A,d0
0001AABE 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAC4 6F00                       		ble.s	loc_1A514
0001AAC6 700E                       		moveq	#$E,d0
0001AAC8                            
0001AAC8                            loc_1A514:
0001AAC8 D240                       		add.w	d0,d1
0001AACA 2268 0034                  		movea.l	$34(a0),a1
0001AACE 3341 000C                  		move.w	d1,$C(a1)
0001AAD2 3368 0008 0008             		move.w	8(a0),8(a1)
0001AAD8                            
0001AAD8                            loc_1A524:
0001AAD8 323C 002B                  		move.w	#$2B,d1
0001AADC 343C 0060                  		move.w	#$60,d2
0001AAE0 363C 0061                  		move.w	#$61,d3
0001AAE4 3828 0008                  		move.w	8(a0),d4
0001AAE8 4EB9 0000 FF60             		jsr	SolidObject
0001AAEE 7000                       		moveq	#0,d0
0001AAF0 3228 003C                  		move.w	$3C(a0),d1
0001AAF4 6A00                       		bpl.s	loc_1A550
0001AAF6 4441                       		neg.w	d1
0001AAF8 5141                       		subq.w	#8,d1
0001AAFA 6500                       		bcs.s	loc_1A55C
0001AAFC 5200                       		addq.b	#1,d0
0001AAFE E841                       		asr.w	#4,d1
0001AB00 D041                       		add.w	d1,d0
0001AB02 6000                       		bra.s	loc_1A55C
0001AB04                            ; ===========================================================================
0001AB04                            
0001AB04                            loc_1A550:
0001AB04 0441 0027                  		subi.w	#$27,d1
0001AB08 6500                       		bcs.s	loc_1A55C
0001AB0A 5200                       		addq.b	#1,d0
0001AB0C E841                       		asr.w	#4,d1
0001AB0E D041                       		add.w	d1,d0
0001AB10                            
0001AB10                            loc_1A55C:
0001AB10 1140 001A                  		move.b	d0,$1A(a0)
0001AB14 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB18 9068 0008                  		sub.w	8(a0),d0
0001AB1C 6B00                       		bmi.s	loc_1A578
0001AB1E 0440 0140                  		subi.w	#$140,d0
0001AB22 6B00                       		bmi.s	loc_1A578
0001AB24 4A28 0001                  		tst.b	1(a0)
0001AB28 6A00 FED2                  		bpl.w	Obj84_Delete
0001AB2C                            
0001AB2C                            loc_1A578:
0001AB2C 4EF9 0000 DB90             		jmp	DisplaySprite
0001AB32                            ; ===========================================================================
0001AB32                            
0001AB32                            loc_1A57E:				; XREF: Obj84_Index
0001AB32 7000                       		moveq	#0,d0
0001AB34 1028 0028                  		move.b	$28(a0),d0
0001AB38 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AB3C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AB40 6000 FF5C                  		bra.w	loc_1A4EA
0001AB44                            ; ===========================================================================
0001AB44 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AB46 0000                       		dc.w loc_1A598-off_1A590
0001AB48 0000                       		dc.w loc_1A604-off_1A590
0001AB4A 0000                       		dc.w loc_1A604-off_1A590
0001AB4C                            ; ===========================================================================
0001AB4C                            
0001AB4C                            loc_1A598:				; XREF: off_1A590
0001AB4C 4A28 0029                  		tst.b	$29(a0)
0001AB50 6600                       		bne.s	loc_1A5D4
0001AB52 2268 0034                  		movea.l	$34(a0),a1
0001AB56 4A29 0021                  		tst.b	$21(a1)
0001AB5A 6600                       		bne.s	loc_1A5B4
0001AB5C 6100 D2E0                  		bsr.w	BossDefeated
0001AB60 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AB68                            
0001AB68                            loc_1A5B4:
0001AB68 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AB70 6400                       		bcc.s	locret_1A602
0001AB72 42A8 003C                  		clr.l	$3C(a0)
0001AB76 2268 0034                  		movea.l	$34(a0),a1
0001AB7A 5369 0032                  		subq.w	#1,$32(a1)
0001AB7E 4269 0030                  		clr.w	$30(a1)
0001AB82 5528 0024                  		subq.b	#2,$24(a0)
0001AB86 4E75                       		rts	
0001AB88                            ; ===========================================================================
0001AB88                            
0001AB88                            loc_1A5D4:
0001AB88 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AB8E 6C00                       		bge.s	loc_1A5E4
0001AB90 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AB98                            
0001AB98                            loc_1A5E4:
0001AB98 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ABA0 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ABA6 6E00                       		bgt.s	locret_1A602
0001ABA8 4268 003E                  		clr.w	$3E(a0)
0001ABAC 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ABB2 4228 0029                  		clr.b	$29(a0)
0001ABB6                            
0001ABB6                            locret_1A602:
0001ABB6 4E75                       		rts	
0001ABB8                            ; ===========================================================================
0001ABB8                            
0001ABB8                            loc_1A604:				; XREF: off_1A590
0001ABB8 08E8 0001 0001             		bset	#1,1(a0)
0001ABBE 4A28 0029                  		tst.b	$29(a0)
0001ABC2 6600                       		bne.s	loc_1A646
0001ABC4 2268 0034                  		movea.l	$34(a0),a1
0001ABC8 4A29 0021                  		tst.b	$21(a1)
0001ABCC 6600                       		bne.s	loc_1A626
0001ABCE 6100 D26E                  		bsr.w	BossDefeated
0001ABD2 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001ABDA                            
0001ABDA                            loc_1A626:
0001ABDA 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001ABE2 6400                       		bcc.s	locret_1A674
0001ABE4 42A8 003C                  		clr.l	$3C(a0)
0001ABE8 2268 0034                  		movea.l	$34(a0),a1
0001ABEC 5369 0032                  		subq.w	#1,$32(a1)
0001ABF0 4269 0030                  		clr.w	$30(a1)
0001ABF4 5528 0024                  		subq.b	#2,$24(a0)
0001ABF8 4E75                       		rts	
0001ABFA                            ; ===========================================================================
0001ABFA                            
0001ABFA                            loc_1A646:
0001ABFA 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AC00 6D00                       		blt.s	loc_1A656
0001AC02 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AC0A                            
0001AC0A                            loc_1A656:
0001AC0A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AC12 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AC18 6D00                       		blt.s	locret_1A674
0001AC1A 4268 003E                  		clr.w	$3E(a0)
0001AC1E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AC24 4228 0029                  		clr.b	$29(a0)
0001AC28                            
0001AC28                            locret_1A674:
0001AC28 4E75                       		rts	
0001AC2A                            ; ===========================================================================
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A                            Map_obj84:
0001AC2A                            	include "_maps\obj84.asm"
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AC2E 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AC32 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AC36 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC3A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC3E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AC42 06                         byte_1A68E:	dc.b 6
0001AC43 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC48 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC4D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC52 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC57 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC5C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC61 08                         byte_1A6AD:	dc.b 8
0001AC62 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC67 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC6C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC71 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC76 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC7B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC80 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AC85 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AC8A 0A                         byte_1A6D6:	dc.b $A
0001AC8B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC90 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC95 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC9A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC9F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACA4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACA9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACAE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACB3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ACB8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ACBD 0C                         byte_1A709:	dc.b $C
0001ACBE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACC3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACC8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACCD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACD2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACD7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACDC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACE1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACE6 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ACEB F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ACF0 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ACF5 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ACFA 0D                         byte_1A746:	dc.b $D
0001ACFB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD00 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD05 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD0A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD0F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD14 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD19 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD1E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD23 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD28 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD2D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD32 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD37 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD3C 0E                         byte_1A788:	dc.b $E
0001AD3D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD42 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD47 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD4C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD51 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD56 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD5B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD60 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD65 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD6A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD6F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD74 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD79 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD7E 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AD83 02                         byte_1A7CF:	dc.b 2
0001AD84 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AD89 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AD8E                            		even
0001AD8E                            		even
0001AD8E                            
0001AD8E                            ; ===========================================================================
0001AD8E                            ; ---------------------------------------------------------------------------
0001AD8E                            ; Object 86 - energy balls (FZ)
0001AD8E                            ; ---------------------------------------------------------------------------
0001AD8E                            
0001AD8E                            Obj86:					; XREF: Obj_Index
0001AD8E 7000                       		moveq	#0,d0
0001AD90 1028 0024                  		move.b	$24(a0),d0
0001AD94 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AD98 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AD9C                            ; ===========================================================================
0001AD9C 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AD9E 0000                       		dc.w Obj86_Generator-Obj86_Index
0001ADA0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001ADA2 0000                       		dc.w loc_1A962-Obj86_Index
0001ADA4 0000                       		dc.w loc_1A982-Obj86_Index
0001ADA6                            ; ===========================================================================
0001ADA6                            
0001ADA6                            Obj86_Main:				; XREF: Obj86_Index
0001ADA6 317C 2588 0008             		move.w	#$2588,8(a0)
0001ADAC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ADB2 317C 0300 0002             		move.w	#$300,2(a0)
0001ADB8 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001ADC0 117C 0000 001C             		move.b	#0,$1C(a0)
0001ADC6 117C 0003 0018             		move.b	#3,$18(a0)
0001ADCC 117C 0008 0017             		move.b	#8,$17(a0)
0001ADD2 117C 0008 0016             		move.b	#8,$16(a0)
0001ADD8 117C 0004 0001             		move.b	#4,1(a0)
0001ADDE 08E8 0007 0001             		bset	#7,1(a0)
0001ADE4 5428 0024                  		addq.b	#2,$24(a0)
0001ADE8                            
0001ADE8                            Obj86_Generator:			; XREF: Obj86_Index
0001ADE8 2268 0034                  		movea.l	$34(a0),a1
0001ADEC 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001ADF2 6600                       		bne.s	loc_1A850
0001ADF4 10BC 003F                  		move.b	#$3F,(a0)
0001ADF8 117C 0000 0024             		move.b	#0,$24(a0)
0001ADFE 4EF9 0000 DB90             		jmp	DisplaySprite
0001AE04                            ; ===========================================================================
0001AE04                            
0001AE04                            loc_1A850:
0001AE04 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE0A 4A28 0029                  		tst.b	$29(a0)
0001AE0E 6700                       		beq.s	loc_1A86C
0001AE10 5428 0024                  		addq.b	#2,$24(a0)
0001AE14 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE1A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AE20                            
0001AE20                            loc_1A86C:
0001AE20 323C 0013                  		move.w	#$13,d1
0001AE24 343C 0008                  		move.w	#8,d2
0001AE28 363C 0011                  		move.w	#$11,d3
0001AE2C 3828 0008                  		move.w	8(a0),d4
0001AE30 4EB9 0000 FF60             		jsr	SolidObject
0001AE36 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE3A 9068 0008                  		sub.w	8(a0),d0
0001AE3E 6B00                       		bmi.s	loc_1A89A
0001AE40 0440 0140                  		subi.w	#$140,d0
0001AE44 6B00                       		bmi.s	loc_1A89A
0001AE46 4A28 0001                  		tst.b	1(a0)
0001AE4A 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AE4E                            
0001AE4E                            loc_1A89A:
0001AE4E 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AE52 4EB9 0000 AC66             		jsr	AnimateSprite
0001AE58 4EF9 0000 DB90             		jmp	DisplaySprite
0001AE5E                            ; ===========================================================================
0001AE5E                            
0001AE5E                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AE5E 4A28 0029                  		tst.b	$29(a0)
0001AE62 6700 0000                  		beq.w	loc_1A954
0001AE66 4228 0029                  		clr.b	$29(a0)
0001AE6A D068 0030                  		add.w	$30(a0),d0
0001AE6E 0240 001E                  		andi.w	#$1E,d0
0001AE72 D4C0                       		adda.w	d0,a2
0001AE74 5868 0030                  		addq.w	#4,$30(a0)
0001AE78 4268 0032                  		clr.w	$32(a0)
0001AE7C 7403                       		moveq	#3,d2
0001AE7E                            
0001AE7E                            Obj86_Loop:
0001AE7E 4EB9 0000 E02C             		jsr	SingleObjLoad2
0001AE84 6600 0000                  		bne.w	loc_1A954
0001AE88 12BC 0086                  		move.b	#$86,(a1)
0001AE8C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE92 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AE98 137C 0008 0024             		move.b	#8,$24(a1)
0001AE9E 337C 2300 0002             		move.w	#$2300,2(a1)
0001AEA4 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AEAC 137C 000C 0016             		move.b	#$C,$16(a1)
0001AEB2 137C 000C 0017             		move.b	#$C,$17(a1)
0001AEB8 137C 0000 0020             		move.b	#0,$20(a1)
0001AEBE 137C 0003 0018             		move.b	#3,$18(a1)
0001AEC4 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AECA 137C 0004 0001             		move.b	#4,1(a1)
0001AED0 08E9 0007 0001             		bset	#7,1(a1)
0001AED6 2348 0034                  		move.l	a0,$34(a1)
0001AEDA 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001AEE0 3228 0032                  		move.w	$32(a0),d1
0001AEE4 C3FC FFB1                  		muls.w	#-$4F,d1
0001AEE8 0641 2578                  		addi.w	#$2578,d1
0001AEEC 0240 001F                  		andi.w	#$1F,d0
0001AEF0 0440 0010                  		subi.w	#$10,d0
0001AEF4 D041                       		add.w	d1,d0
0001AEF6 3340 0030                  		move.w	d0,$30(a1)
0001AEFA 5268 0032                  		addq.w	#1,$32(a0)
0001AEFE 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AF04 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AF08                            
0001AF08                            loc_1A954:
0001AF08 4A68 0032                  		tst.w	$32(a0)
0001AF0C 6600                       		bne.s	loc_1A95E
0001AF0E 5428 0024                  		addq.b	#2,$24(a0)
0001AF12                            
0001AF12                            loc_1A95E:
0001AF12 6000 FF0C                  		bra.w	loc_1A86C
0001AF16                            ; ===========================================================================
0001AF16                            
0001AF16                            loc_1A962:				; XREF: Obj86_Index
0001AF16 117C 0002 001C             		move.b	#2,$1C(a0)
0001AF1C 4A68 0038                  		tst.w	$38(a0)
0001AF20 6600                       		bne.s	loc_1A97E
0001AF22 117C 0002 0024             		move.b	#2,$24(a0)
0001AF28 2268 0034                  		movea.l	$34(a0),a1
0001AF2C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AF32                            
0001AF32                            loc_1A97E:
0001AF32 6000 FEEC                  		bra.w	loc_1A86C
0001AF36                            ; ===========================================================================
0001AF36                            
0001AF36                            loc_1A982:				; XREF: Obj86_Index
0001AF36 7000                       		moveq	#0,d0
0001AF38 1028 0025                  		move.b	$25(a0),d0
0001AF3C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AF40 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AF44 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AF48 4EB9 0000 AC66             		jsr	AnimateSprite
0001AF4E 4EF9 0000 DB90             		jmp	DisplaySprite
0001AF54                            ; ===========================================================================
0001AF54 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AF56 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AF58 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AF5A                            ; ===========================================================================
0001AF5A                            
0001AF5A                            loc_1A9A6:				; XREF: Obj86_Index2
0001AF5A 3028 0030                  		move.w	$30(a0),d0
0001AF5E 9068 0008                  		sub.w	8(a0),d0
0001AF62 E940                       		asl.w	#4,d0
0001AF64 3140 0010                  		move.w	d0,$10(a0)
0001AF68 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AF6E 5428 0025                  		addq.b	#2,$25(a0)
0001AF72 4E75                       		rts	
0001AF74                            ; ===========================================================================
0001AF74                            
0001AF74                            loc_1A9C0:				; XREF: Obj86_Index2
0001AF74 4A68 0010                  		tst.w	$10(a0)
0001AF78 6700                       		beq.s	loc_1A9E6
0001AF7A 4EB9 0000 DB6A             		jsr	SpeedToPos
0001AF80 3028 0008                  		move.w	8(a0),d0
0001AF84 9068 0030                  		sub.w	$30(a0),d0
0001AF88 6400                       		bcc.s	loc_1A9E6
0001AF8A 4268 0010                  		clr.w	$10(a0)
0001AF8E D168 0008                  		add.w	d0,8(a0)
0001AF92 2268 0034                  		movea.l	$34(a0),a1
0001AF96 5369 0032                  		subq.w	#1,$32(a1)
0001AF9A                            
0001AF9A                            loc_1A9E6:
0001AF9A 117C 0000 001C             		move.b	#0,$1C(a0)
0001AFA0 5368 0028                  		subq.w	#1,$28(a0)
0001AFA4 6600                       		bne.s	locret_1AA1C
0001AFA6 5428 0025                  		addq.b	#2,$25(a0)
0001AFAA 117C 0001 001C             		move.b	#1,$1C(a0)
0001AFB0 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AFB6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFBC 7000                       		moveq	#0,d0
0001AFBE 3038 D008                  		move.w	($FFFFD008).w,d0
0001AFC2 9068 0008                  		sub.w	8(a0),d0
0001AFC6 3140 0010                  		move.w	d0,$10(a0)
0001AFCA 317C 0140 0012             		move.w	#$140,$12(a0)
0001AFD0                            
0001AFD0                            locret_1AA1C:
0001AFD0 4E75                       		rts	
0001AFD2                            ; ===========================================================================
0001AFD2                            
0001AFD2                            loc_1AA1E:				; XREF: Obj86_Index2
0001AFD2 4EB9 0000 DB6A             		jsr	SpeedToPos
0001AFD8 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001AFDE 6400                       		bcc.s	loc_1AA34
0001AFE0 5368 0028                  		subq.w	#1,$28(a0)
0001AFE4 6700                       		beq.s	loc_1AA34
0001AFE6 4E75                       		rts	
0001AFE8                            ; ===========================================================================
0001AFE8                            
0001AFE8                            loc_1AA34:
0001AFE8 2268 0034                  		movea.l	$34(a0),a1
0001AFEC 5369 0038                  		subq.w	#1,$38(a1)
0001AFF0 6000 FA0A                  		bra.w	Obj84_Delete
0001AFF4                            ; ===========================================================================
0001AFF4                            Ani_obj86:
0001AFF4                            	include "_anim\obj86.asm"
0001AFF4                            ; ---------------------------------------------------------------------------
0001AFF4                            ; Animation script - energy ball launcher (FZ)
0001AFF4                            ; ---------------------------------------------------------------------------
0001AFF4 0000                       		dc.w byte_1AA46-Ani_obj86
0001AFF6 0000                       		dc.w byte_1AA4A-Ani_obj86
0001AFF8 0000                       		dc.w byte_1AA50-Ani_obj86
0001AFFA 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001AFFE 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B004 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B00A                            		even
0001B00A                            		even
0001B00A                            
0001B00A                            ; ---------------------------------------------------------------------------
0001B00A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B00A                            ; ---------------------------------------------------------------------------
0001B00A                            Map_obj86:
0001B00A                            	include "_maps\obj86.asm"
0001B00A                            ; ---------------------------------------------------------------------------
0001B00A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B00A                            ; ---------------------------------------------------------------------------
0001B00A 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B00E 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B012 01                         byte_1AA5E:	dc.b 1
0001B013 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B018 01                         byte_1AA64:	dc.b 1
0001B019 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B01E 01                         byte_1AA6A:	dc.b 1
0001B01F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B024 01                         byte_1AA70:	dc.b 1
0001B025 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B02A                            		even
0001B02A                            		even
0001B02A                            
0001B02A                            Ani_obj86a:
0001B02A                            	include "_anim\obj86a.asm"
0001B02A                            ; ---------------------------------------------------------------------------
0001B02A                            ; Animation script - energy balls (FZ)
0001B02A                            ; ---------------------------------------------------------------------------
0001B02A 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B02C 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B02E 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B03D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B04C 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B050 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B05A                            		even
0001B05A                            		even
0001B05A                            
0001B05A                            ; ---------------------------------------------------------------------------
0001B05A                            ; Sprite mappings - energy balls (FZ)
0001B05A                            ; ---------------------------------------------------------------------------
0001B05A                            Map_obj86a:
0001B05A                            	include "_maps\obj86a.asm"
0001B05A                            ; ---------------------------------------------------------------------------
0001B05A                            ; Sprite mappings - energy balls (FZ)
0001B05A                            ; ---------------------------------------------------------------------------
0001B05A 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B05E 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B062 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B066 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B06A 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B06E 0000                       		dc.w byte_1AB20-Map_obj86a
0001B070 02                         byte_1AABC:	dc.b 2
0001B071 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B076 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B07B 02                         byte_1AAC7:	dc.b 2
0001B07C F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B081 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B086 02                         byte_1AAD2:	dc.b 2
0001B087 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B08C 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B091 02                         byte_1AADD:	dc.b 2
0001B092 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B097 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B09C 02                         byte_1AAE8:	dc.b 2
0001B09D F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B0A2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B0A7 02                         byte_1AAF3:	dc.b 2
0001B0A8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B0AD F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B0B2 01                         byte_1AAFE:	dc.b 1
0001B0B3 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B0B8 01                         byte_1AB04:	dc.b 1
0001B0B9 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B0BE 02                         byte_1AB0A:	dc.b 2
0001B0BF F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B0C4 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B0C9 02                         byte_1AB15:	dc.b 2
0001B0CA F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B0CF F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B0D4 00                         byte_1AB20:	dc.b 0
0001B0D6 00                         		even
0001B0D6 00                         		even
0001B0D6                            
0001B0D6                            ; ===========================================================================
0001B0D6                            ; ---------------------------------------------------------------------------
0001B0D6                            ; Object 3E - prison capsule
0001B0D6                            ; ---------------------------------------------------------------------------
0001B0D6                            
0001B0D6                            Obj3E:					; XREF: Obj_Index
0001B0D6 7000                       		moveq	#0,d0
0001B0D8 1028 0024                  		move.b	$24(a0),d0
0001B0DC 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B0E0 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B0E4 3028 0008                  		move.w	8(a0),d0
0001B0E8 0240 FF80                  		andi.w	#$FF80,d0
0001B0EC 3238 F700                  		move.w	($FFFFF700).w,d1
0001B0F0 0441 0080                  		subi.w	#$80,d1
0001B0F4 0241 FF80                  		andi.w	#$FF80,d1
0001B0F8 9041                       		sub.w	d1,d0
0001B0FA 0C40 0280                  		cmpi.w	#$280,d0
0001B0FE 6200                       		bhi.s	Obj3E_Delete
0001B100 4EF9 0000 DB90             		jmp	DisplaySprite
0001B106                            ; ===========================================================================
0001B106                            
0001B106                            Obj3E_Delete:
0001B106 4EF9 0000 DBCC             		jmp	DeleteObject
0001B10C                            ; ===========================================================================
0001B10C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B10E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B110 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B112 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B114 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B116 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B118 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B11A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B11C                            
0001B11C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B120 040C 0501                  		dc.b 4,	$C, 5, 1
0001B124 0610 0403                  		dc.b 6,	$10, 4,	3
0001B128 0810 0305                  		dc.b 8,	$10, 3,	5
0001B12C                            ; ===========================================================================
0001B12C                            
0001B12C                            Obj3E_Main:				; XREF: Obj3E_Index
0001B12C 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B134 317C 049D 0002             		move.w	#$49D,2(a0)
0001B13A 117C 0004 0001             		move.b	#4,1(a0)
0001B140 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B146 7000                       		moveq	#0,d0
0001B148 1028 0028                  		move.b	$28(a0),d0
0001B14C E548                       		lsl.w	#2,d0
0001B14E 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B152 1159 0024                  		move.b	(a1)+,$24(a0)
0001B156 1159 0019                  		move.b	(a1)+,$19(a0)
0001B15A 1159 0018                  		move.b	(a1)+,$18(a0)
0001B15E 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B162 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B166 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B168 117C 0006 0020             		move.b	#6,$20(a0)
0001B16E 117C 0008 0021             		move.b	#8,$21(a0)
0001B174                            
0001B174                            Obj3E_Not02:
0001B174 4E75                       		rts	
0001B176                            ; ===========================================================================
0001B176                            
0001B176                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B176 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B17C 6700                       		beq.s	Obj3E_ChkOpened
0001B17E 323C 002B                  		move.w	#$2B,d1
0001B182 343C 0018                  		move.w	#$18,d2
0001B186 363C 0018                  		move.w	#$18,d3
0001B18A 3828 0008                  		move.w	8(a0),d4
0001B18E 4EF9 0000 FF60             		jmp	SolidObject
0001B194                            ; ===========================================================================
0001B194                            
0001B194                            Obj3E_ChkOpened:
0001B194 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B198 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B19A 4228 0025                  		clr.b	$25(a0)
0001B19E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B1A4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B1AA                            
0001B1AA                            Obj3E_DoOpen:
0001B1AA 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B1B0 4E75                       		rts	
0001B1B2                            ; ===========================================================================
0001B1B2                            
0001B1B2                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B1B2 323C 0017                  		move.w	#$17,d1
0001B1B6 343C 0008                  		move.w	#8,d2
0001B1BA 363C 0008                  		move.w	#8,d3
0001B1BE 3828 0008                  		move.w	8(a0),d4
0001B1C2 4EB9 0000 FF60             		jsr	SolidObject
0001B1C8 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B1CE 4EB9 0000 AC66             		jsr	AnimateSprite
0001B1D4 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B1DA 4A28 0025                  		tst.b	$25(a0)
0001B1DE 6700                       		beq.s	locret_1AC60
0001B1E0 5068 000C                  		addq.w	#8,$C(a0)
0001B1E4 117C 000A 0024             		move.b	#$A,$24(a0)
0001B1EA 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B1F0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B1F4 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B1F8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B1FE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B204 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B206 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B20C 6000                       		bra.s	Obj3E_ContinueCode
0001B20E                            
0001B20E                            Obj3E_MoveLeft:
0001B20E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B214                            
0001B214                            Obj3E_ContinueCode:
0001B214 4228 0025                  		clr.b	$25(a0)
0001B218 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B21E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B224                            
0001B224                            locret_1AC60:
0001B224 4E75                       		rts	
0001B226                            ; ===========================================================================
0001B226                            
0001B226                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B226 7007                       		moveq	#7,d0
0001B228 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B22C 6600                       		bne.s	loc_1ACA0
0001B22E 4EB9 0000 E016             		jsr	SingleObjLoad
0001B234 6600                       		bne.s	loc_1ACA0
0001B236 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B23A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B240 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B246 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B24C 7200                       		moveq	#0,d1
0001B24E 1200                       		move.b	d0,d1
0001B250 E409                       		lsr.b	#2,d1
0001B252 0441 0020                  		subi.w	#$20,d1
0001B256 D369 0008                  		add.w	d1,8(a1)
0001B25A E048                       		lsr.w	#8,d0
0001B25C E608                       		lsr.b	#3,d0
0001B25E D169 000C                  		add.w	d0,$C(a1)
0001B262                            
0001B262                            loc_1ACA0:
0001B262 5368 001E                  		subq.w	#1,$1E(a0)
0001B266 6700                       		beq.s	Obj3E_MakeAnimal
0001B268 4E75                       		rts	
0001B26A                            ; ===========================================================================
0001B26A                            
0001B26A                            Obj3E_MakeAnimal:
0001B26A 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B270 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B276 117C 0006 001A             		move.b	#6,$1A(a0)
0001B27C 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B282 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B288 7C07                       		moveq	#7,d6
0001B28A 3A3C 009A                  		move.w	#$9A,d5
0001B28E 78E4                       		moveq	#-$1C,d4
0001B290                            
0001B290                            Obj3E_Loop:
0001B290 4EB9 0000 E016             		jsr	SingleObjLoad
0001B296 6600                       		bne.s	locret_1ACF8
0001B298 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B29C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2A8 D969 0008                  		add.w	d4,8(a1)
0001B2AC 5E44                       		addq.w	#7,d4
0001B2AE 3345 0036                  		move.w	d5,$36(a1)
0001B2B2 5145                       		subq.w	#8,d5
0001B2B4 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B2B8                            
0001B2B8                            locret_1ACF8:
0001B2B8 4E75                       		rts	
0001B2BA                            ; ===========================================================================
0001B2BA                            
0001B2BA                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B2BA 7007                       		moveq	#7,d0
0001B2BC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B2C0 6600                       		bne.s	loc_1AD38
0001B2C2 4EB9 0000 E016             		jsr	SingleObjLoad
0001B2C8 6600                       		bne.s	loc_1AD38
0001B2CA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2CE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2DA 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B2E0 0240 001F                  		andi.w	#$1F,d0
0001B2E4 5D40                       		subq.w	#6,d0
0001B2E6 4A41                       		tst.w	d1
0001B2E8 6A00                       		bpl.s	loc_1AD2E
0001B2EA 4440                       		neg.w	d0
0001B2EC                            
0001B2EC                            loc_1AD2E:
0001B2EC D169 0008                  		add.w	d0,8(a1)
0001B2F0 337C 000C 0036             		move.w	#$C,$36(a1)
0001B2F6                            
0001B2F6                            loc_1AD38:
0001B2F6 5368 001E                  		subq.w	#1,$1E(a0)
0001B2FA 6600                       		bne.s	locret_1AD48
0001B2FC 5428 0024                  		addq.b	#2,$24(a0)
0001B300 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B306                            
0001B306                            locret_1AD48:
0001B306 4E75                       		rts	
0001B308                            ; ===========================================================================
0001B308                            
0001B308                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B308 703E                       		moveq	#$3E,d0
0001B30A 7228                       		moveq	#$28,d1
0001B30C 7440                       		moveq	#$40,d2
0001B30E 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B312                            
0001B312                            Obj3E_FindObj28:
0001B312 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B314 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B316 D2C2                       		adda.w	d2,a1		; next object RAM
0001B318 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B31C                            
0001B31C 4EB9 0000 F21C             		jsr	GotThroughAct
0001B322 4EF9 0000 DBCC             		jmp	DeleteObject
0001B328                            ; ===========================================================================
0001B328                            
0001B328                            Obj3E_Obj28Found:
0001B328 4E75                       		rts	
0001B32A                            ; ===========================================================================
0001B32A                            Ani_obj3E:
0001B32A                            	include "_anim\obj3E.asm"
0001B32A                            ; ---------------------------------------------------------------------------
0001B32A                            ; Animation script - prison capsule
0001B32A                            ; ---------------------------------------------------------------------------
0001B32A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B32C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B32E 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B332                            		even
0001B332                            		even
0001B332                            
0001B332                            ; ---------------------------------------------------------------------------
0001B332                            ; Sprite mappings - prison capsule
0001B332                            ; ---------------------------------------------------------------------------
0001B332                            Map_obj3E:
0001B332                            	include "_maps\obj3E.asm"
0001B332                            ; ---------------------------------------------------------------------------
0001B332                            ; Sprite mappings - prison capsule
0001B332                            ; ---------------------------------------------------------------------------
0001B332 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B336 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B33A 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B33E 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B340 07                         byte_1AD82:	dc.b 7
0001B341 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B346 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B34B E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B350 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B355 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B35A 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B35F 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B364 01                         byte_1ADA6:	dc.b 1
0001B365 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B36A 06                         byte_1ADAC:	dc.b 6
0001B36B 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B370 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B375 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B37A 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B37F 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B384 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B389 01                         byte_1ADCB:	dc.b 1
0001B38A F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B38F 02                         byte_1ADD1:	dc.b 2
0001B390 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B395 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B39A 01                         byte_1ADDC:	dc.b 1
0001B39B F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B3A0 00                         byte_1ADE2:	dc.b 0
0001B3A2 00                         		even
0001B3A2 00                         		even
0001B3A2                            
0001B3A2                            ; ---------------------------------------------------------------------------
0001B3A2                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B3A2                            ; ---------------------------------------------------------------------------
0001B3A2                            
0001B3A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3A2                            
0001B3A2                            
0001B3A2                            TouchResponse:				; XREF: Obj01
0001B3A2 4E71                       		nop	
0001B3A4 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B3A8 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B3AC 5142                       		subq.w	#8,d2
0001B3AE 7A00                       		moveq	#0,d5
0001B3B0 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B3B4 5705                       		subq.b	#3,d5
0001B3B6 9645                       		sub.w	d5,d3
0001B3B8 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B3BE 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B3C0 0643 000C                  		addi.w	#$C,d3
0001B3C4 7A0A                       		moveq	#$A,d5
0001B3C6                            
0001B3C6                            Touch_NoDuck:
0001B3C6 383C 0010                  		move.w	#$10,d4
0001B3CA DA45                       		add.w	d5,d5
0001B3CC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B3D0 3C3C 005F                  		move.w	#$5F,d6
0001B3D4                            
0001B3D4                            Touch_Loop:
0001B3D4 4A29 0001                  		tst.b	1(a1)
0001B3D8 6A00                       		bpl.s	Touch_NextObj
0001B3DA 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B3DE 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B3E0                            
0001B3E0                            Touch_NextObj:
0001B3E0 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B3E4 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B3E8                            
0001B3E8 7000                       		moveq	#0,d0
0001B3EA 4E75                       		rts	
0001B3EC                            ; ===========================================================================
0001B3EC 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B3EE 0C14                       		dc.b   $C, $14
0001B3F0 140C                       		dc.b  $14,  $C
0001B3F2 0410                       		dc.b	4, $10
0001B3F4 0C12                       		dc.b   $C, $12
0001B3F6 1010                       		dc.b  $10, $10
0001B3F8 0606                       		dc.b	6,   6
0001B3FA 180C                       		dc.b  $18,  $C
0001B3FC 0C10                       		dc.b   $C, $10
0001B3FE 100C                       		dc.b  $10,  $C
0001B400 0808                       		dc.b	8,   8
0001B402 1410                       		dc.b  $14, $10
0001B404 1408                       		dc.b  $14,   8
0001B406 0E0E                       		dc.b   $E,  $E
0001B408 1818                       		dc.b  $18, $18
0001B40A 2810                       		dc.b  $28, $10
0001B40C 1018                       		dc.b  $10, $18
0001B40E 0810                       		dc.b	8, $10
0001B410 2070                       		dc.b  $20, $70
0001B412 4020                       		dc.b  $40, $20
0001B414 8020                       		dc.b  $80, $20
0001B416 2020                       		dc.b  $20, $20
0001B418 0808                       		dc.b	8,   8
0001B41A 0404                       		dc.b	4,   4
0001B41C 2008                       		dc.b  $20,   8
0001B41E 0C0C                       		dc.b   $C,  $C
0001B420 0804                       		dc.b	8,   4
0001B422 1804                       		dc.b  $18,   4
0001B424 2804                       		dc.b  $28,   4
0001B426 0408                       		dc.b	4,   8
0001B428 0418                       		dc.b	4, $18
0001B42A 0428                       		dc.b	4, $28
0001B42C 0420                       		dc.b	4, $20
0001B42E 1818                       		dc.b  $18, $18
0001B430 0C18                       		dc.b   $C, $18
0001B432 4808                       		dc.b  $48,   8
0001B434                            ; ===========================================================================
0001B434                            
0001B434                            Touch_Height:				; XREF: TouchResponse
0001B434 0240 003F                  		andi.w	#$3F,d0
0001B438 D040                       		add.w	d0,d0
0001B43A 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B43E 7200                       		moveq	#0,d1
0001B440 121A                       		move.b	(a2)+,d1
0001B442 3029 0008                  		move.w	8(a1),d0
0001B446 9041                       		sub.w	d1,d0
0001B448 9042                       		sub.w	d2,d0
0001B44A 6400                       		bcc.s	loc_1AE98
0001B44C D241                       		add.w	d1,d1
0001B44E D041                       		add.w	d1,d0
0001B450 6500                       		bcs.s	Touch_Width
0001B452 6000 FF8C                  		bra.w	Touch_NextObj
0001B456                            ; ===========================================================================
0001B456                            
0001B456                            loc_1AE98:
0001B456 B044                       		cmp.w	d4,d0
0001B458 6200 FF86                  		bhi.w	Touch_NextObj
0001B45C                            
0001B45C                            Touch_Width:
0001B45C 7200                       		moveq	#0,d1
0001B45E 121A                       		move.b	(a2)+,d1
0001B460 3029 000C                  		move.w	$C(a1),d0
0001B464 9041                       		sub.w	d1,d0
0001B466 9043                       		sub.w	d3,d0
0001B468 6400                       		bcc.s	loc_1AEB6
0001B46A D241                       		add.w	d1,d1
0001B46C D240                       		add.w	d0,d1
0001B46E 6500                       		bcs.s	Touch_ChkValue
0001B470 6000 FF6E                  		bra.w	Touch_NextObj
0001B474                            ; ===========================================================================
0001B474                            
0001B474                            loc_1AEB6:
0001B474 B045                       		cmp.w	d5,d0
0001B476 6200 FF68                  		bhi.w	Touch_NextObj
0001B47A                            
0001B47A                            Touch_ChkValue:
0001B47A 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B47E 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B482 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B486 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B48A 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B48E 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B490 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B494                            
0001B494                            ; touch	response is $40-$7F
0001B494                            
0001B494 1029 0020                  		move.b	$20(a1),d0
0001B498 0200 003F                  		andi.b	#$3F,d0
0001B49C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B4A0 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B4A2 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B4A8 6400 0000                  		bcc.w	locret_1AEF2
0001B4AC 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B4B0                            
0001B4B0                            locret_1AEF2:
0001B4B0 4E75                       		rts	
0001B4B2                            ; ===========================================================================
0001B4B2                            
0001B4B2                            Touch_Monitor:
0001B4B2 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B4B6 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B4B8 3028 000C                  		move.w	$C(a0),d0
0001B4BC 0440 0010                  		subi.w	#$10,d0
0001B4C0 B069 000C                  		cmp.w	$C(a1),d0
0001B4C4 6500                       		bcs.s	locret_1AF2E
0001B4C6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B4CA 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B4D0 4A29 0025                  		tst.b	$25(a1)
0001B4D4 6600                       		bne.s	locret_1AF2E
0001B4D6 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B4DA 4E75                       		rts	
0001B4DC                            ; ===========================================================================
0001B4DC                            
0001B4DC                            loc_1AF1E:
0001B4DC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B4E2 6600                       		bne.s	locret_1AF2E
0001B4E4 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B4E8 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B4EC                            
0001B4EC                            locret_1AF2E:
0001B4EC 4E75                       		rts	
0001B4EE                            ; ===========================================================================
0001B4EE                            
0001B4EE                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B4EE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B4F2 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B4F4 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B4FA 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B4FE                            
0001B4FE                            loc_1AF40:
0001B4FE 4A29 0021                  		tst.b	$21(a1)
0001B502 6700                       		beq.s	Touch_KillEnemy
0001B504 4468 0010                  		neg.w	$10(a0)
0001B508 4468 0012                  		neg.w	$12(a0)
0001B50C E0E8 0010                  		asr	$10(a0)
0001B510 E0E8 0012                  		asr	$12(a0)
0001B514 137C 0000 0020             		move.b	#0,$20(a1)
0001B51A 5329 0021                  		subq.b	#1,$21(a1)
0001B51E 6600                       		bne.s	locret_1AF68
0001B520 08E9 0007 0022             		bset	#7,$22(a1)
0001B526                            
0001B526                            locret_1AF68:
0001B526 4E75                       		rts	
0001B528                            ; ===========================================================================
0001B528                            
0001B528                            Touch_KillEnemy:
0001B528 08E9 0007 0022             		bset	#7,$22(a1)
0001B52E 7000                       		moveq	#0,d0
0001B530 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B534 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B538 0C40 0006                  		cmpi.w	#6,d0
0001B53C 6500                       		bcs.s	loc_1AF82
0001B53E 7006                       		moveq	#6,d0
0001B540                            
0001B540                            loc_1AF82:
0001B540 3340 003E                  		move.w	d0,$3E(a1)
0001B544 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B548 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B54E 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B550 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B554 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B55A                            
0001B55A                            loc_1AF9C:
0001B55A 6100 0000                  		bsr.w	AddPoints
0001B55E 7400                       		moveq	#0,d2	; GMZ
0001B560 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B562 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B564                            
0001B564                            TouchKE_Explode:
0001B564 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B568 137C 0000 0024             		move.b	#0,$24(a1)
0001B56E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B572                            
0001B572                            TouchKE_NextExplosion:
0001B572 5802                       		addq.b	#4,d2
0001B574 4EB9 0000 E016             		jsr	SingleObjLoad
0001B57A 6600                       		bne.s	TouchKE_NoExplosion
0001B57C 336A 0008 0008             		move.w	8(a2),8(a1)
0001B582 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B588 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B58C                            
0001B58C                            TouchKE_NoExplosion:
0001B58C 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B58E 4A68 0012                  		tst.w	$12(a0)
0001B592 6B00                       		bmi.s	loc_1AFC2
0001B594 3028 000C                  		move.w	$C(a0),d0
0001B598 B069 000C                  		cmp.w	$C(a1),d0
0001B59C 6400                       		bcc.s	loc_1AFCA
0001B59E 4468 0012                  		neg.w	$12(a0)
0001B5A2 4E75                       		rts	
0001B5A4                            ; ===========================================================================
0001B5A4                            
0001B5A4                            loc_1AFC2:
0001B5A4 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B5AA 4E75                       		rts	
0001B5AC                            ; ===========================================================================
0001B5AC                            
0001B5AC                            loc_1AFCA:
0001B5AC 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B5B2 4E75                       		rts	
0001B5B4                            ; ===========================================================================
0001B5B4 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B5BC                            ; ===========================================================================
0001B5BC                            
0001B5BC                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B5BC 08E9 0007 0022             		bset	#7,$22(a1)
0001B5C2                            
0001B5C2                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B5C2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B5C6 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B5C8                            
0001B5C8                            loc_1AFE6:				; XREF: Touch_Hurt
0001B5C8 70FF                       		moveq	#-1,d0
0001B5CA 4E75                       		rts	
0001B5CC                            ; ===========================================================================
0001B5CC                            
0001B5CC                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B5CC 4E71                       		nop	
0001B5CE 4A68 0030                  		tst.w	$30(a0)
0001B5D2 66F4                       		bne.s	loc_1AFE6
0001B5D4 2449                       		movea.l	a1,a2
0001B5D6                            
0001B5D6                            ; End of function TouchResponse
0001B5D6                            ; continue straight to HurtSonic
0001B5D6                            
0001B5D6                            ; ---------------------------------------------------------------------------
0001B5D6                            ; Hurting Sonic	subroutine
0001B5D6                            ; ---------------------------------------------------------------------------
0001B5D6                            
0001B5D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5D6                            
0001B5D6                            
0001B5D6                            HurtSonic:
0001B5D6 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B5DA 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B5DC 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B5E0 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B5E4 4EB9 0000 E016             		jsr	SingleObjLoad
0001B5EA 6600                       		bne.s	Hurt_Shield
0001B5EC 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B5F0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5FC                            
0001B5FC                            Hurt_Shield:
0001B5FC 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B602 117C 0004 0024             		move.b	#4,$24(a0)
0001B608 6100 8760                  		bsr.w	Sonic_ResetOnFloor
0001B60C 08E8 0001 0022             		bset	#1,$22(a0)
0001B612 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B618 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B61E 0828 0006 0022             		btst	#6,$22(a0)
0001B624 6700                       		beq.s	Hurt_Reverse
0001B626 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B62C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B632                            
0001B632                            Hurt_Reverse:
0001B632 3028 0008                  		move.w	8(a0),d0
0001B636 B06A 0008                  		cmp.w	8(a2),d0
0001B63A 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B63C 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B640                            
0001B640                            Hurt_ChkSpikes:
0001B640 317C 0000 0014             		move.w	#0,$14(a0)
0001B646 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B64C 317C 0078 0030             		move.w	#$78,$30(a0)
0001B652 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B656 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B65A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B65C 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B660 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B662 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B666                            
0001B666                            Hurt_Sound:
0001B666 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B66C 70FF                       		moveq	#-1,d0
0001B66E 4E75                       		rts	
0001B670                            ; ===========================================================================
0001B670                            
0001B670                            Hurt_NoRings:
0001B670 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B674 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B678                            ; End of function HurtSonic
0001B678                            
0001B678                            ; ---------------------------------------------------------------------------
0001B678                            ; Subroutine to	kill Sonic
0001B678                            ; ---------------------------------------------------------------------------
0001B678                            
0001B678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B678                            
0001B678                            
0001B678                            KillSonic:
0001B678 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B67C 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B67E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B684 117C 0006 0024             		move.b	#6,$24(a0)
0001B68A 6100 86DE                  		bsr.w	Sonic_ResetOnFloor
0001B68E 08E8 0001 0022             		bset	#1,$22(a0)
0001B694 317C F900 0012             		move.w	#-$700,$12(a0)
0001B69A 317C 0000 0010             		move.w	#0,$10(a0)
0001B6A0 317C 0000 0014             		move.w	#0,$14(a0)
0001B6A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B6AC 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B6B2 08E8 0007 0002             		bset	#7,2(a0)
0001B6B8 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B6BC 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B6C0 6600                       		bne.s	Kill_Sound
0001B6C2 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B6C6                            
0001B6C6                            Kill_Sound:
0001B6C6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B6CC                            
0001B6CC                            Kill_NoDeath:
0001B6CC 70FF                       		moveq	#-1,d0
0001B6CE 4E75                       		rts	
0001B6D0                            ; End of function KillSonic
0001B6D0                            
0001B6D0                            
0001B6D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6D0                            
0001B6D0                            
0001B6D0                            Touch_Special:				; XREF: Touch_ChkValue
0001B6D0 1229 0020                  		move.b	$20(a1),d1
0001B6D4 0201 003F                  		andi.b	#$3F,d1
0001B6D8 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B6DC 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B6DE 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B6E2 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B6E4 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B6E8 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B6EA 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B6EE 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B6F0 4E75                       		rts	
0001B6F2                            ; ===========================================================================
0001B6F2                            
0001B6F2                            Touch_CatKiller:			; XREF: Touch_Special
0001B6F2 6000 FEC8                  		bra.w	loc_1AFDA
0001B6F6                            ; ===========================================================================
0001B6F6                            
0001B6F6                            Touch_Yadrin:				; XREF: Touch_Special
0001B6F6 9A40                       		sub.w	d0,d5
0001B6F8 0C45 0008                  		cmpi.w	#8,d5
0001B6FC 6400                       		bcc.s	loc_1B144
0001B6FE 3029 0008                  		move.w	8(a1),d0
0001B702 5940                       		subq.w	#4,d0
0001B704 0829 0000 0022             		btst	#0,$22(a1)
0001B70A 6700                       		beq.s	loc_1B130
0001B70C 0440 0010                  		subi.w	#$10,d0
0001B710                            
0001B710                            loc_1B130:
0001B710 9042                       		sub.w	d2,d0
0001B712 6400                       		bcc.s	loc_1B13C
0001B714 0640 0018                  		addi.w	#$18,d0
0001B718 6500                       		bcs.s	loc_1B140
0001B71A 6000                       		bra.s	loc_1B144
0001B71C                            ; ===========================================================================
0001B71C                            
0001B71C                            loc_1B13C:
0001B71C B044                       		cmp.w	d4,d0
0001B71E 6200                       		bhi.s	loc_1B144
0001B720                            
0001B720                            loc_1B140:
0001B720 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B724                            ; ===========================================================================
0001B724                            
0001B724                            loc_1B144:
0001B724 6000 FDC8                  		bra.w	Touch_Enemy
0001B728                            ; ===========================================================================
0001B728                            
0001B728                            Touch_D7orE1:				; XREF: Touch_Special
0001B728 5229 0021                  		addq.b	#1,$21(a1)
0001B72C 4E75                       		rts	
0001B72E                            ; End of function Touch_Special
0001B72E                            
0001B72E                            ; ---------------------------------------------------------------------------
0001B72E                            ; Subroutine to	show the special stage layout
0001B72E                            ; ---------------------------------------------------------------------------
0001B72E                            
0001B72E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B72E                            
0001B72E                            
0001B72E                            SS_ShowLayout:				; XREF: SpecialStage
0001B72E 6100 0000                  		bsr.w	SS_AniWallsRings
0001B732 6100 0000                  		bsr.w	SS_AniItems
0001B736 3F05                       		move.w	d5,-(sp)
0001B738 43F8 8000                  		lea	($FFFF8000).w,a1
0001B73C 1038 F780                  		move.b	($FFFFF780).w,d0
0001B740 0200 00FC                  		andi.b	#$FC,d0
0001B744 4EB9 0000 2C22             		jsr	(CalcSine).l
0001B74A 3800                       		move.w	d0,d4
0001B74C 3A01                       		move.w	d1,d5
0001B74E C9FC 0018                  		muls.w	#$18,d4
0001B752 CBFC 0018                  		muls.w	#$18,d5
0001B756 7400                       		moveq	#0,d2
0001B758 3438 F700                  		move.w	($FFFFF700).w,d2
0001B75C 84FC 0018                  		divu.w	#$18,d2
0001B760 4842                       		swap	d2
0001B762 4442                       		neg.w	d2
0001B764 0642 FF4C                  		addi.w	#-$B4,d2
0001B768 7600                       		moveq	#0,d3
0001B76A 3638 F704                  		move.w	($FFFFF704).w,d3
0001B76E 86FC 0018                  		divu.w	#$18,d3
0001B772 4843                       		swap	d3
0001B774 4443                       		neg.w	d3
0001B776 0643 FF4C                  		addi.w	#-$B4,d3
0001B77A 3E3C 000F                  		move.w	#$F,d7
0001B77E                            
0001B77E                            loc_1B19E:
0001B77E 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B782 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B786 4440                       		neg.w	d0
0001B788 C3C2                       		muls.w	d2,d1
0001B78A C1C3                       		muls.w	d3,d0
0001B78C 2C00                       		move.l	d0,d6
0001B78E DC81                       		add.l	d1,d6
0001B790 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B794 C1C2                       		muls.w	d2,d0
0001B796 C3C3                       		muls.w	d3,d1
0001B798 D280                       		add.l	d0,d1
0001B79A 2406                       		move.l	d6,d2
0001B79C 3C3C 000F                  		move.w	#$F,d6
0001B7A0                            
0001B7A0                            loc_1B1C0:
0001B7A0 2002                       		move.l	d2,d0
0001B7A2 E080                       		asr.l	#8,d0
0001B7A4 32C0                       		move.w	d0,(a1)+
0001B7A6 2001                       		move.l	d1,d0
0001B7A8 E080                       		asr.l	#8,d0
0001B7AA 32C0                       		move.w	d0,(a1)+
0001B7AC D485                       		add.l	d5,d2
0001B7AE D284                       		add.l	d4,d1
0001B7B0 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B7B4                            
0001B7B4 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B7B8 0643 0018                  		addi.w	#$18,d3
0001B7BC 51CF FFC0                  		dbf	d7,loc_1B19E
0001B7C0                            
0001B7C0 3A1F                       		move.w	(sp)+,d5
0001B7C2 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B7C8 7000                       		moveq	#0,d0
0001B7CA 3038 F704                  		move.w	($FFFFF704).w,d0
0001B7CE 80FC 0018                  		divu.w	#$18,d0
0001B7D2 C0FC 0080                  		mulu.w	#$80,d0
0001B7D6 D1C0                       		adda.l	d0,a0
0001B7D8 7000                       		moveq	#0,d0
0001B7DA 3038 F700                  		move.w	($FFFFF700).w,d0
0001B7DE 80FC 0018                  		divu.w	#$18,d0
0001B7E2 D0C0                       		adda.w	d0,a0
0001B7E4 49F8 8000                  		lea	($FFFF8000).w,a4
0001B7E8 3E3C 000F                  		move.w	#$F,d7
0001B7EC                            
0001B7EC                            loc_1B20C:
0001B7EC 3C3C 000F                  		move.w	#$F,d6
0001B7F0                            
0001B7F0                            loc_1B210:
0001B7F0 7000                       		moveq	#0,d0
0001B7F2 1018                       		move.b	(a0)+,d0
0001B7F4 6700                       		beq.s	loc_1B268
0001B7F6 0C00 004E                  		cmpi.b	#$4E,d0
0001B7FA 6200                       		bhi.s	loc_1B268
0001B7FC 3614                       		move.w	(a4),d3
0001B7FE 0643 0120                  		addi.w	#$120,d3
0001B802 0C43 0070                  		cmpi.w	#$70,d3
0001B806 6500                       		bcs.s	loc_1B268
0001B808 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B80C 6400                       		bcc.s	loc_1B268
0001B80E 342C 0002                  		move.w	2(a4),d2
0001B812 0642 00F0                  		addi.w	#$F0,d2
0001B816 0C42 0070                  		cmpi.w	#$70,d2
0001B81A 6500                       		bcs.s	loc_1B268
0001B81C 0C42 0170                  		cmpi.w	#$170,d2
0001B820 6400                       		bcc.s	loc_1B268
0001B822 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B828 E748                       		lsl.w	#3,d0
0001B82A 4BF5 0000                  		lea	(a5,d0.w),a5
0001B82E 225D                       		movea.l	(a5)+,a1
0001B830 321D                       		move.w	(a5)+,d1
0001B832 D241                       		add.w	d1,d1
0001B834 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B838 365D                       		movea.w	(a5)+,a3
0001B83A 7200                       		moveq	#0,d1
0001B83C 1219                       		move.b	(a1)+,d1
0001B83E 5301                       		subq.b	#1,d1
0001B840 6B00                       		bmi.s	loc_1B268
0001B842 4EB9 0000 DCEE             		jsr	sub_D762
0001B848                            
0001B848                            loc_1B268:
0001B848 584C                       		addq.w	#4,a4
0001B84A 51CE FFA4                  		dbf	d6,loc_1B210
0001B84E                            
0001B84E 41E8 0070                  		lea	$70(a0),a0
0001B852 51CF FF98                  		dbf	d7,loc_1B20C
0001B856                            
0001B856 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B85A 0C05 0050                  		cmpi.b	#$50,d5
0001B85E 6700                       		beq.s	loc_1B288
0001B860 24BC 0000 0000             		move.l	#0,(a2)
0001B866 4E75                       		rts	
0001B868                            ; ===========================================================================
0001B868                            
0001B868                            loc_1B288:
0001B868 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B86E 4E75                       		rts	
0001B870                            ; End of function SS_ShowLayout
0001B870                            
0001B870                            ; ---------------------------------------------------------------------------
0001B870                            ; Subroutine to	animate	walls and rings	in the special stage
0001B870                            ; ---------------------------------------------------------------------------
0001B870                            
0001B870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B870                            
0001B870                            
0001B870                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B870 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B876 7000                       		moveq	#0,d0
0001B878 1038 F780                  		move.b	($FFFFF780).w,d0
0001B87C E408                       		lsr.b	#2,d0
0001B87E 0240 000F                  		andi.w	#$F,d0
0001B882 7223                       		moveq	#$23,d1
0001B884                            
0001B884                            loc_1B2A4:
0001B884 3280                       		move.w	d0,(a1)
0001B886 5049                       		addq.w	#8,a1
0001B888 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B88C                            
0001B88C 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B892 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B896 6A00                       		bpl.s	loc_1B2C8
0001B898 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B89E 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B8A2 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B8A8                            
0001B8A8                            loc_1B2C8:
0001B8A8 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B8AE 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B8B2 6A00                       		bpl.s	loc_1B2E4
0001B8B4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B8BA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B8BE 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B8C4                            
0001B8C4                            loc_1B2E4:
0001B8C4 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B8C8 1340 0138                  		move.b	d0,$138(a1)
0001B8CC 1340 0160                  		move.b	d0,$160(a1)
0001B8D0 1340 0148                  		move.b	d0,$148(a1)
0001B8D4 1340 0150                  		move.b	d0,$150(a1)
0001B8D8 1340 01D8                  		move.b	d0,$1D8(a1)
0001B8DC 1340 01E0                  		move.b	d0,$1E0(a1)
0001B8E0 1340 01E8                  		move.b	d0,$1E8(a1)
0001B8E4 1340 01F0                  		move.b	d0,$1F0(a1)
0001B8E8 1340 01F8                  		move.b	d0,$1F8(a1)
0001B8EC 1340 0200                  		move.b	d0,$200(a1)
0001B8F0 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B8F4 6A00                       		bpl.s	loc_1B326
0001B8F6 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B8FC 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B900 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B906                            
0001B906                            loc_1B326:
0001B906 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B90A 1340 0168                  		move.b	d0,$168(a1)
0001B90E 1340 0170                  		move.b	d0,$170(a1)
0001B912 1340 0178                  		move.b	d0,$178(a1)
0001B916 1340 0180                  		move.b	d0,$180(a1)
0001B91A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B91E 6A00                       		bpl.s	loc_1B350
0001B920 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B926 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B92A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B930                            
0001B930                            loc_1B350:
0001B930 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B936 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B93C 7000                       		moveq	#0,d0
0001B93E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B942 D040                       		add.w	d0,d0
0001B944 41F0 0000                  		lea	(a0,d0.w),a0
0001B948 3290                       		move.w	(a0),(a1)
0001B94A 3368 0002 0008             		move.w	2(a0),8(a1)
0001B950 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B956 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B95C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B962 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B968 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B96E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B974 D0FC 0020                  		adda.w	#$20,a0
0001B978 D2FC 0048                  		adda.w	#$48,a1
0001B97C 3290                       		move.w	(a0),(a1)
0001B97E 3368 0002 0008             		move.w	2(a0),8(a1)
0001B984 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B98A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B990 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B996 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B99C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9A2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9A8 D0FC 0020                  		adda.w	#$20,a0
0001B9AC D2FC 0048                  		adda.w	#$48,a1
0001B9B0 3290                       		move.w	(a0),(a1)
0001B9B2 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9B8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9BE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9C4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9CA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9D0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9D6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9DC D0FC 0020                  		adda.w	#$20,a0
0001B9E0 D2FC 0048                  		adda.w	#$48,a1
0001B9E4 3290                       		move.w	(a0),(a1)
0001B9E6 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9EC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9F2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9F8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9FE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA04 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA0A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA10 D0FC 0020                  		adda.w	#$20,a0
0001BA14 D2FC 0048                  		adda.w	#$48,a1
0001BA18 4E75                       		rts	
0001BA1A                            ; End of function SS_AniWallsRings
0001BA1A                            
0001BA1A                            ; ===========================================================================
0001BA1A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA2A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA3A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA4A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA5A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BA6A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BA7A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BA8A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BA9A                            ; ---------------------------------------------------------------------------
0001BA9A                            ; Subroutine to	remove items when you collect them in the special stage
0001BA9A                            ; ---------------------------------------------------------------------------
0001BA9A                            
0001BA9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA9A                            
0001BA9A                            
0001BA9A                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BA9A 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BAA0 303C 001F                  		move.w	#$1F,d0
0001BAA4                            
0001BAA4                            loc_1B4C4:
0001BAA4 4A12                       		tst.b	(a2)
0001BAA6 6700                       		beq.s	locret_1B4CE
0001BAA8 504A                       		addq.w	#8,a2
0001BAAA 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BAAE                            
0001BAAE                            locret_1B4CE:
0001BAAE 4E75                       		rts	
0001BAB0                            ; End of function SS_RemoveCollectedItem
0001BAB0                            
0001BAB0                            ; ---------------------------------------------------------------------------
0001BAB0                            ; Subroutine to	animate	special	stage items when you touch them
0001BAB0                            ; ---------------------------------------------------------------------------
0001BAB0                            
0001BAB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAB0                            
0001BAB0                            
0001BAB0                            SS_AniItems:				; XREF: SS_ShowLayout
0001BAB0 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BAB6 3E3C 001F                  		move.w	#$1F,d7
0001BABA                            
0001BABA                            loc_1B4DA:
0001BABA 7000                       		moveq	#0,d0
0001BABC 1010                       		move.b	(a0),d0
0001BABE 6700                       		beq.s	loc_1B4E8
0001BAC0 E548                       		lsl.w	#2,d0
0001BAC2 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BAC6 4E91                       		jsr	(a1)
0001BAC8                            
0001BAC8                            loc_1B4E8:
0001BAC8 5048                       		addq.w	#8,a0
0001BACA                            
0001BACA                            loc_1B4EA:
0001BACA 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BACE                            
0001BACE 4E75                       		rts	
0001BAD0                            ; End of function SS_AniItems
0001BAD0                            
0001BAD0                            ; ===========================================================================
0001BAD0 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BAD4 0000 0000                  		dc.l SS_AniBumper
0001BAD8 0000 0000                  		dc.l SS_Ani1Up
0001BADC 0000 0000                  		dc.l SS_AniReverse
0001BAE0 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BAE4 0000 0000                  		dc.l SS_AniGlassBlock
0001BAE8                            ; ===========================================================================
0001BAE8                            
0001BAE8                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BAE8 5328 0002                  		subq.b	#1,2(a0)
0001BAEC 6A00                       		bpl.s	locret_1B530
0001BAEE 117C 0005 0002             		move.b	#5,2(a0)
0001BAF4 7000                       		moveq	#0,d0
0001BAF6 1028 0003                  		move.b	3(a0),d0
0001BAFA 5228 0003                  		addq.b	#1,3(a0)
0001BAFE 2268 0004                  		movea.l	4(a0),a1
0001BB02 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BB06 1280                       		move.b	d0,(a1)
0001BB08 6600                       		bne.s	locret_1B530
0001BB0A 4290                       		clr.l	(a0)
0001BB0C 42A8 0004                  		clr.l	4(a0)
0001BB10                            
0001BB10                            locret_1B530:
0001BB10 4E75                       		rts	
0001BB12                            ; ===========================================================================
0001BB12 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BB18                            ; ===========================================================================
0001BB18                            
0001BB18                            SS_AniBumper:				; XREF: SS_AniIndex
0001BB18 5328 0002                  		subq.b	#1,2(a0)
0001BB1C 6A00                       		bpl.s	locret_1B566
0001BB1E 117C 0007 0002             		move.b	#7,2(a0)
0001BB24 7000                       		moveq	#0,d0
0001BB26 1028 0003                  		move.b	3(a0),d0
0001BB2A 5228 0003                  		addq.b	#1,3(a0)
0001BB2E 2268 0004                  		movea.l	4(a0),a1
0001BB32 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BB36 6600                       		bne.s	loc_1B564
0001BB38 4290                       		clr.l	(a0)
0001BB3A 42A8 0004                  		clr.l	4(a0)
0001BB3E 12BC 0025                  		move.b	#$25,(a1)
0001BB42 4E75                       		rts	
0001BB44                            ; ===========================================================================
0001BB44                            
0001BB44                            loc_1B564:
0001BB44 1280                       		move.b	d0,(a1)
0001BB46                            
0001BB46                            locret_1B566:
0001BB46 4E75                       		rts	
0001BB48                            ; ===========================================================================
0001BB48 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BB4E                            ; ===========================================================================
0001BB4E                            
0001BB4E                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BB4E 5328 0002                  		subq.b	#1,2(a0)
0001BB52 6A00                       		bpl.s	locret_1B596
0001BB54 117C 0005 0002             		move.b	#5,2(a0)
0001BB5A 7000                       		moveq	#0,d0
0001BB5C 1028 0003                  		move.b	3(a0),d0
0001BB60 5228 0003                  		addq.b	#1,3(a0)
0001BB64 2268 0004                  		movea.l	4(a0),a1
0001BB68 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BB6C 1280                       		move.b	d0,(a1)
0001BB6E 6600                       		bne.s	locret_1B596
0001BB70 4290                       		clr.l	(a0)
0001BB72 42A8 0004                  		clr.l	4(a0)
0001BB76                            
0001BB76                            locret_1B596:
0001BB76 4E75                       		rts	
0001BB78                            ; ===========================================================================
0001BB78 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BB7E                            ; ===========================================================================
0001BB7E                            
0001BB7E                            SS_AniReverse:				; XREF: SS_AniIndex
0001BB7E 5328 0002                  		subq.b	#1,2(a0)
0001BB82 6A00                       		bpl.s	locret_1B5CC
0001BB84 117C 0007 0002             		move.b	#7,2(a0)
0001BB8A 7000                       		moveq	#0,d0
0001BB8C 1028 0003                  		move.b	3(a0),d0
0001BB90 5228 0003                  		addq.b	#1,3(a0)
0001BB94 2268 0004                  		movea.l	4(a0),a1
0001BB98 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BB9C 6600                       		bne.s	loc_1B5CA
0001BB9E 4290                       		clr.l	(a0)
0001BBA0 42A8 0004                  		clr.l	4(a0)
0001BBA4 12BC 002B                  		move.b	#$2B,(a1)
0001BBA8 4E75                       		rts	
0001BBAA                            ; ===========================================================================
0001BBAA                            
0001BBAA                            loc_1B5CA:
0001BBAA 1280                       		move.b	d0,(a1)
0001BBAC                            
0001BBAC                            locret_1B5CC:
0001BBAC 4E75                       		rts	
0001BBAE                            ; ===========================================================================
0001BBAE 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BBB4                            ; ===========================================================================
0001BBB4                            
0001BBB4                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BBB4 5328 0002                  		subq.b	#1,2(a0)
0001BBB8 6A00                       		bpl.s	locret_1B60C
0001BBBA 117C 0005 0002             		move.b	#5,2(a0)
0001BBC0 7000                       		moveq	#0,d0
0001BBC2 1028 0003                  		move.b	3(a0),d0
0001BBC6 5228 0003                  		addq.b	#1,3(a0)
0001BBCA 2268 0004                  		movea.l	4(a0),a1
0001BBCE 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BBD2 1280                       		move.b	d0,(a1)
0001BBD4 6600                       		bne.s	locret_1B60C
0001BBD6 4290                       		clr.l	(a0)
0001BBD8 42A8 0004                  		clr.l	4(a0)
0001BBDC 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BBE2 303C 00A8                  		move.w	#$A8,d0
0001BBE6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BBEC                            
0001BBEC                            locret_1B60C:
0001BBEC 4E75                       		rts	
0001BBEE                            ; ===========================================================================
0001BBEE 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BBF4                            ; ===========================================================================
0001BBF4                            
0001BBF4                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BBF4 5328 0002                  		subq.b	#1,2(a0)
0001BBF8 6A00                       		bpl.s	locret_1B640
0001BBFA 117C 0001 0002             		move.b	#1,2(a0)
0001BC00 7000                       		moveq	#0,d0
0001BC02 1028 0003                  		move.b	3(a0),d0
0001BC06 5228 0003                  		addq.b	#1,3(a0)
0001BC0A 2268 0004                  		movea.l	4(a0),a1
0001BC0E 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BC12 1280                       		move.b	d0,(a1)
0001BC14 6600                       		bne.s	locret_1B640
0001BC16 12A8 0004                  		move.b	4(a0),(a1)
0001BC1A 4290                       		clr.l	(a0)
0001BC1C 42A8 0004                  		clr.l	4(a0)
0001BC20                            
0001BC20                            locret_1B640:
0001BC20 4E75                       		rts	
0001BC22                            ; ===========================================================================
0001BC22 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BC2C                            ; ---------------------------------------------------------------------------
0001BC2C                            ; Special stage	layout pointers
0001BC2C                            ; ---------------------------------------------------------------------------
0001BC2C                            SS_LayoutIndex:
0001BC2C                            	include "_inc\Special stage layout pointers.asm"
0001BC2C                            ; ---------------------------------------------------------------------------
0001BC2C                            ; Special stage	layout pointers
0001BC2C                            ; ---------------------------------------------------------------------------
0001BC2C 0000 0000                  	dc.l SS_1
0001BC30 0000 0000                  	dc.l SS_2
0001BC34 0000 0000                  	dc.l SS_3
0001BC38 0000 0000                  	dc.l SS_4
0001BC3C 0000 0000                  	dc.l SS_5
0001BC40 0000 0000                  	dc.l SS_6
0001BC44                            	even
0001BC44                            	even
0001BC44                            
0001BC44                            ; ---------------------------------------------------------------------------
0001BC44                            ; Special stage	start locations
0001BC44                            ; ---------------------------------------------------------------------------
0001BC44                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BC5C                            		even
0001BC5C                            
0001BC5C                            ; ---------------------------------------------------------------------------
0001BC5C                            ; Subroutine to	load special stage layout
0001BC5C                            ; ---------------------------------------------------------------------------
0001BC5C                            
0001BC5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC5C                            
0001BC5C                            
0001BC5C                            SS_Load:				; XREF: SpecialStage
0001BC5C 7000                       		moveq	#0,d0
0001BC5E 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BC62 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BC66 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BC6C 6500                       		bcs.s	SS_ChkEmldNum
0001BC6E 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BC74                            
0001BC74                            SS_ChkEmldNum:
0001BC74 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BC7A 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BC7C 7200                       		moveq	#0,d1
0001BC7E 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BC82 5301                       		subq.b	#1,d1
0001BC84 6500                       		bcs.s	SS_LoadData
0001BC86 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BC8A                            
0001BC8A                            SS_ChkEmldLoop:	
0001BC8A B033 1000                  		cmp.b	(a3,d1.w),d0
0001BC8E 6600                       		bne.s	SS_ChkEmldRepeat
0001BC90 60CA                       		bra.s	SS_Load
0001BC92                            ; ===========================================================================
0001BC92                            
0001BC92                            SS_ChkEmldRepeat:
0001BC92 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BC96                            
0001BC96                            SS_LoadData:
0001BC96 E548                       		lsl.w	#2,d0
0001BC98 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BC9C 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BCA0 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BCA4 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BCA8 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BCAE 303C 0000                  		move.w	#0,d0
0001BCB2 4EB9 0000 193E             		jsr	(EniDec).l
0001BCB8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BCBE 303C 0FFF                  		move.w	#$FFF,d0
0001BCC2                            
0001BCC2                            SS_ClrRAM3:
0001BCC2 4299                       		clr.l	(a1)+
0001BCC4 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BCC8                            
0001BCC8 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BCCE 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BCD4 723F                       		moveq	#$3F,d1
0001BCD6                            
0001BCD6                            loc_1B6F6:
0001BCD6 743F                       		moveq	#$3F,d2
0001BCD8                            
0001BCD8                            loc_1B6F8:
0001BCD8 12D8                       		move.b	(a0)+,(a1)+
0001BCDA 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BCDE                            
0001BCDE 43E9 0040                  		lea	$40(a1),a1
0001BCE2 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BCE6                            
0001BCE6 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BCEC 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BCF2 724D                       		moveq	#$4D,d1
0001BCF4                            
0001BCF4                            loc_1B714:
0001BCF4 22D8                       		move.l	(a0)+,(a1)+
0001BCF6 32FC 0000                  		move.w	#0,(a1)+
0001BCFA 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BD00 32D8                       		move.w	(a0)+,(a1)+
0001BD02 51C9 FFF0                  		dbf	d1,loc_1B714
0001BD06                            
0001BD06 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BD0C 323C 003F                  		move.w	#$3F,d1
0001BD10                            
0001BD10                            loc_1B730:
0001BD10                            
0001BD10 4299                       		clr.l	(a1)+
0001BD12 51C9 FFFC                  		dbf	d1,loc_1B730
0001BD16                            
0001BD16 4E75                       		rts	
0001BD18                            ; End of function SS_Load
0001BD18                            
0001BD18                            ; ===========================================================================
0001BD18                            ; ---------------------------------------------------------------------------
0001BD18                            ; Special stage	mappings and VRAM pointers
0001BD18                            ; ---------------------------------------------------------------------------
0001BD18                            SS_MapIndex:
0001BD18                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BD18                            ; ---------------------------------------------------------------------------
0001BD18                            ; Special stage	mappings and VRAM pointers
0001BD18                            ; ---------------------------------------------------------------------------
0001BD18 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BD1C 0142                       	dc.w $142		; VRAM setting
0001BD1E 0000 0000                  	dc.l Map_SSWalls
0001BD22 0142                       	dc.w $142
0001BD24 0000 0000                  	dc.l Map_SSWalls
0001BD28 0142                       	dc.w $142
0001BD2A 0000 0000                  	dc.l Map_SSWalls
0001BD2E 0142                       	dc.w $142
0001BD30 0000 0000                  	dc.l Map_SSWalls
0001BD34 0142                       	dc.w $142
0001BD36 0000 0000                  	dc.l Map_SSWalls
0001BD3A 0142                       	dc.w $142
0001BD3C 0000 0000                  	dc.l Map_SSWalls
0001BD40 0142                       	dc.w $142
0001BD42 0000 0000                  	dc.l Map_SSWalls
0001BD46 0142                       	dc.w $142
0001BD48 0000 0000                  	dc.l Map_SSWalls
0001BD4C 0142                       	dc.w $142
0001BD4E 0000 0000                  	dc.l Map_SSWalls
0001BD52 2142                       	dc.w $2142
0001BD54 0000 0000                  	dc.l Map_SSWalls
0001BD58 2142                       	dc.w $2142
0001BD5A 0000 0000                  	dc.l Map_SSWalls
0001BD5E 2142                       	dc.w $2142
0001BD60 0000 0000                  	dc.l Map_SSWalls
0001BD64 2142                       	dc.w $2142
0001BD66 0000 0000                  	dc.l Map_SSWalls
0001BD6A 2142                       	dc.w $2142
0001BD6C 0000 0000                  	dc.l Map_SSWalls
0001BD70 2142                       	dc.w $2142
0001BD72 0000 0000                  	dc.l Map_SSWalls
0001BD76 2142                       	dc.w $2142
0001BD78 0000 0000                  	dc.l Map_SSWalls
0001BD7C 2142                       	dc.w $2142
0001BD7E 0000 0000                  	dc.l Map_SSWalls
0001BD82 2142                       	dc.w $2142
0001BD84 0000 0000                  	dc.l Map_SSWalls
0001BD88 4142                       	dc.w $4142
0001BD8A 0000 0000                  	dc.l Map_SSWalls
0001BD8E 4142                       	dc.w $4142
0001BD90 0000 0000                  	dc.l Map_SSWalls
0001BD94 4142                       	dc.w $4142
0001BD96 0000 0000                  	dc.l Map_SSWalls
0001BD9A 4142                       	dc.w $4142
0001BD9C 0000 0000                  	dc.l Map_SSWalls
0001BDA0 4142                       	dc.w $4142
0001BDA2 0000 0000                  	dc.l Map_SSWalls
0001BDA6 4142                       	dc.w $4142
0001BDA8 0000 0000                  	dc.l Map_SSWalls
0001BDAC 4142                       	dc.w $4142
0001BDAE 0000 0000                  	dc.l Map_SSWalls
0001BDB2 4142                       	dc.w $4142
0001BDB4 0000 0000                  	dc.l Map_SSWalls
0001BDB8 4142                       	dc.w $4142
0001BDBA 0000 0000                  	dc.l Map_SSWalls
0001BDBE 6142                       	dc.w $6142
0001BDC0 0000 0000                  	dc.l Map_SSWalls
0001BDC4 6142                       	dc.w $6142
0001BDC6 0000 0000                  	dc.l Map_SSWalls
0001BDCA 6142                       	dc.w $6142
0001BDCC 0000 0000                  	dc.l Map_SSWalls
0001BDD0 6142                       	dc.w $6142
0001BDD2 0000 0000                  	dc.l Map_SSWalls
0001BDD6 6142                       	dc.w $6142
0001BDD8 0000 0000                  	dc.l Map_SSWalls
0001BDDC 6142                       	dc.w $6142
0001BDDE 0000 0000                  	dc.l Map_SSWalls
0001BDE2 6142                       	dc.w $6142
0001BDE4 0000 0000                  	dc.l Map_SSWalls
0001BDE8 6142                       	dc.w $6142
0001BDEA 0000 0000                  	dc.l Map_SSWalls
0001BDEE 6142                       	dc.w $6142
0001BDF0 0000 F084                  	dc.l Map_obj47
0001BDF4 023B                       	dc.w $23B
0001BDF6 0000 0000                  	dc.l Map_SS_R
0001BDFA 0570                       	dc.w $570
0001BDFC 0000 0000                  	dc.l Map_SS_R
0001BE00 0251                       	dc.w $251
0001BE02 0000 0000                  	dc.l Map_SS_R
0001BE06 0370                       	dc.w $370
0001BE08 0000 0000                  	dc.l Map_SS_Up
0001BE0C 0263                       	dc.w $263
0001BE0E 0000 0000                  	dc.l Map_SS_Down
0001BE12 0263                       	dc.w $263
0001BE14 0000 0000                  	dc.l Map_SS_R
0001BE18 22F0                       	dc.w $22F0
0001BE1A 0000 0000                  	dc.l Map_SS_Glass
0001BE1E 0470                       	dc.w $470
0001BE20 0000 0000                  	dc.l Map_SS_Glass
0001BE24 05F0                       	dc.w $5F0
0001BE26 0000 0000                  	dc.l Map_SS_Glass
0001BE2A 65F0                       	dc.w $65F0
0001BE2C 0000 0000                  	dc.l Map_SS_Glass
0001BE30 25F0                       	dc.w $25F0
0001BE32 0000 0000                  	dc.l Map_SS_Glass
0001BE36 45F0                       	dc.w $45F0
0001BE38 0000 0000                  	dc.l Map_SS_R
0001BE3C 02F0                       	dc.w $2F0
0001BE3E 0100 F084                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BE42 023B                       	dc.w $23B
0001BE44 0200 F084                  	dc.l Map_obj47+$2000000
0001BE48 023B                       	dc.w $23B
0001BE4A 0000 0000                  	dc.l Map_SS_R
0001BE4E 0797                       	dc.w $797
0001BE50 0000 0000                  	dc.l Map_SS_R
0001BE54 07A0                       	dc.w $7A0
0001BE56 0000 0000                  	dc.l Map_SS_R
0001BE5A 07A9                       	dc.w $7A9
0001BE5C 0000 0000                  	dc.l Map_SS_R
0001BE60 0797                       	dc.w $797
0001BE62 0000 0000                  	dc.l Map_SS_R
0001BE66 07A0                       	dc.w $7A0
0001BE68 0000 0000                  	dc.l Map_SS_R
0001BE6C 07A9                       	dc.w $7A9
0001BE6E 0000 A404                  	dc.l Map_obj25
0001BE72 27B2                       	dc.w $27B2
0001BE74 0000 0000                  	dc.l Map_SS_Chaos3
0001BE78 0770                       	dc.w $770
0001BE7A 0000 0000                  	dc.l Map_SS_Chaos3
0001BE7E 2770                       	dc.w $2770
0001BE80 0000 0000                  	dc.l Map_SS_Chaos3
0001BE84 4770                       	dc.w $4770
0001BE86 0000 0000                  	dc.l Map_SS_Chaos3
0001BE8A 6770                       	dc.w $6770
0001BE8C 0000 0000                  	dc.l Map_SS_Chaos1
0001BE90 0770                       	dc.w $770
0001BE92 0000 0000                  	dc.l Map_SS_Chaos2
0001BE96 0770                       	dc.w $770
0001BE98 0000 0000                  	dc.l Map_SS_R
0001BE9C 04F0                       	dc.w $4F0
0001BE9E 0400 A404                  	dc.l Map_obj25+$4000000
0001BEA2 27B2                       	dc.w $27B2
0001BEA4 0500 A404                  	dc.l Map_obj25+$5000000
0001BEA8 27B2                       	dc.w $27B2
0001BEAA 0600 A404                  	dc.l Map_obj25+$6000000
0001BEAE 27B2                       	dc.w $27B2
0001BEB0 0700 A404                  	dc.l Map_obj25+$7000000
0001BEB4 27B2                       	dc.w $27B2
0001BEB6 0000 0000                  	dc.l Map_SS_Glass
0001BEBA 23F0                       	dc.w $23F0
0001BEBC 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BEC0 23F0                       	dc.w $23F0
0001BEC2 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BEC6 23F0                       	dc.w $23F0
0001BEC8 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BECC 23F0                       	dc.w $23F0
0001BECE 0000 0000                  	dc.l Map_SS_R+$2000000
0001BED2 04F0                       	dc.w $4F0
0001BED4 0000 0000                  	dc.l Map_SS_Glass
0001BED8 05F0                       	dc.w $5F0
0001BEDA 0000 0000                  	dc.l Map_SS_Glass
0001BEDE 65F0                       	dc.w $65F0
0001BEE0 0000 0000                  	dc.l Map_SS_Glass
0001BEE4 25F0                       	dc.w $25F0
0001BEE6 0000 0000                  	dc.l Map_SS_Glass
0001BEEA 45F0                       	dc.w $45F0
0001BEEA 45F0                       	dc.w $45F0
0001BEEC                            
0001BEEC                            ; ---------------------------------------------------------------------------
0001BEEC                            ; Sprite mappings - special stage "R" block
0001BEEC                            ; ---------------------------------------------------------------------------
0001BEEC                            Map_SS_R:
0001BEEC                            	include "_maps\SSRblock.asm"
0001BEEC                            ; ---------------------------------------------------------------------------
0001BEEC                            ; Sprite mappings - special stage "R" block
0001BEEC                            ; ---------------------------------------------------------------------------
0001BEEC 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BEF0 0000                       		dc.w byte_1B91E-Map_SS_R
0001BEF2 01                         byte_1B912:	dc.b 1
0001BEF3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BEF8 01                         byte_1B918:	dc.b 1
0001BEF9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BEFE 00                         byte_1B91E:	dc.b 0
0001BF00 00                         		even
0001BF00 00                         		even
0001BF00                            
0001BF00                            ; ---------------------------------------------------------------------------
0001BF00                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF00                            ; ---------------------------------------------------------------------------
0001BF00                            Map_SS_Glass:
0001BF00                            	include "_maps\SSglassblock.asm"
0001BF00                            ; ---------------------------------------------------------------------------
0001BF00                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF00                            ; ---------------------------------------------------------------------------
0001BF00 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BF04 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BF08 01                         byte_1B928:	dc.b 1
0001BF09 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF0E 01                         byte_1B92E:	dc.b 1
0001BF0F F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BF14 01                         byte_1B934:	dc.b 1
0001BF15 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BF1A 01                         byte_1B93A:	dc.b 1
0001BF1B F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BF20                            		even
0001BF20                            		even
0001BF20                            
0001BF20                            ; ---------------------------------------------------------------------------
0001BF20                            ; Sprite mappings - special stage "UP" block
0001BF20                            ; ---------------------------------------------------------------------------
0001BF20                            Map_SS_Up:
0001BF20                            	include "_maps\SSUPblock.asm"
0001BF20                            ; ---------------------------------------------------------------------------
0001BF20                            ; Sprite mappings - special stage "UP" block
0001BF20                            ; ---------------------------------------------------------------------------
0001BF20 0000                       		dc.w byte_1B944-Map_SS_Up
0001BF22 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BF24 01                         byte_1B944:	dc.b 1
0001BF25 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF2A 01                         byte_1B94A:	dc.b 1
0001BF2B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF30                            		even
0001BF30                            		even
0001BF30                            
0001BF30                            ; ---------------------------------------------------------------------------
0001BF30                            ; Sprite mappings - special stage "DOWN" block
0001BF30                            ; ---------------------------------------------------------------------------
0001BF30                            Map_SS_Down:
0001BF30                            	include "_maps\SSDOWNblock.asm"
0001BF30                            ; ---------------------------------------------------------------------------
0001BF30                            ; Sprite mappings - special stage "DOWN" block
0001BF30                            ; ---------------------------------------------------------------------------
0001BF30 0000                       		dc.w byte_1B954-Map_SS_Down
0001BF32 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BF34 01                         byte_1B954:	dc.b 1
0001BF35 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF3A 01                         byte_1B95A:	dc.b 1
0001BF3B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF40                            		even
0001BF40                            		even
0001BF40                            
0001BF40                            ; ---------------------------------------------------------------------------
0001BF40                            ; Sprite mappings - special stage chaos	emeralds
0001BF40                            ; ---------------------------------------------------------------------------
0001BF40 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BF42 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BF44 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BF46 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BF48 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BF4A 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BF4C 01                         byte_1B96C:	dc.b 1
0001BF4D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BF52 01                         byte_1B972:	dc.b 1
0001BF53 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BF58 01                         byte_1B978:	dc.b 1
0001BF59 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BF5E 01                         byte_1B97E:	dc.b 1
0001BF5F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BF64                            		even
0001BF64                            ; ===========================================================================
0001BF64                            ; ---------------------------------------------------------------------------
0001BF64                            ; Object 09 - Sonic (special stage)
0001BF64                            ; ---------------------------------------------------------------------------
0001BF64                            
0001BF64                            Obj09:					; XREF: Obj_Index
0001BF64 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BF68 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BF6A 6100 0000                  		bsr.w	SS_FixCamera
0001BF6E 6000 0000                  		bra.w	DebugMode
0001BF72                            ; ===========================================================================
0001BF72                            
0001BF72                            Obj09_Normal:
0001BF72 7000                       		moveq	#0,d0
0001BF74 1028 0024                  		move.b	$24(a0),d0
0001BF78 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BF7C 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BF80                            ; ===========================================================================
0001BF80 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BF82 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BF84 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BF86 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BF88                            ; ===========================================================================
0001BF88                            
0001BF88                            Obj09_Main:				; XREF: Obj09_Index
0001BF88 5428 0024                  		addq.b	#2,$24(a0)
0001BF8C 117C 000E 0016             		move.b	#$E,$16(a0)
0001BF92 117C 0007 0017             		move.b	#7,$17(a0)
0001BF98 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BFA0 317C 0780 0002             		move.w	#$780,2(a0)
0001BFA6 117C 0004 0001             		move.b	#4,1(a0)
0001BFAC 117C 0000 0018             		move.b	#0,$18(a0)
0001BFB2 117C 0002 001C             		move.b	#2,$1C(a0)
0001BFB8 08E8 0002 0022             		bset	#2,$22(a0)
0001BFBE 08E8 0001 0022             		bset	#1,$22(a0)
0001BFC4                            
0001BFC4                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BFC4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BFC8 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BFCA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BFD0 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BFD2 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BFD8                            
0001BFD8                            Obj09_NoDebug:
0001BFD8 117C 0000 0030             		move.b	#0,$30(a0)
0001BFDE 7000                       		moveq	#0,d0
0001BFE0 1028 0022                  		move.b	$22(a0),d0
0001BFE4 0240 0002                  		andi.w	#2,d0
0001BFE8 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BFEC 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BFF0 4EBA 8210                  		jsr	LoadSonicDynPLC
0001BFF4 4EF9 0000 DB90             		jmp	DisplaySprite
0001BFFA                            ; ===========================================================================
0001BFFA 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BFFC 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BFFE                            ; ===========================================================================
0001BFFE                            
0001BFFE                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BFFE 6100 0000                  		bsr.w	Obj09_Jump
0001C002 6100 0000                  		bsr.w	Obj09_Move
0001C006 6100 0000                  		bsr.w	Obj09_Fall
0001C00A 6000                       		bra.s	Obj09_Display
0001C00C                            ; ===========================================================================
0001C00C                            
0001C00C                            Obj09_InAir:				; XREF: Obj09_Modes
0001C00C 6100 0000                  		bsr.w	nullsub_2
0001C010 6100 0000                  		bsr.w	Obj09_Move
0001C014 6100 0000                  		bsr.w	Obj09_Fall
0001C018                            
0001C018                            Obj09_Display:				; XREF: Obj09_OnWall
0001C018 6100 0000                  		bsr.w	Obj09_ChkItems
0001C01C 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C020 4EB9 0000 DB6A             		jsr	SpeedToPos
0001C026 6100 0000                  		bsr.w	SS_FixCamera
0001C02A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C02E D078 F782                  		add.w	($FFFFF782).w,d0
0001C032 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C036 4EB9 0001 3F86             		jsr	Sonic_Animate
0001C03C 4E75                       		rts	
0001C03E                            
0001C03E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C03E                            
0001C03E                            
0001C03E                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C03E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C044 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C046 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C04A                            
0001C04A                            Obj09_ChkRight:
0001C04A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C050 6700                       		beq.s	loc_1BA78	; if not, branch
0001C052 6100 0000                  		bsr.w	Obj09_MoveRight
0001C056                            
0001C056                            loc_1BA78:
0001C056 1038 F602                  		move.b	($FFFFF602).w,d0
0001C05A 0200 000C                  		andi.b	#$C,d0
0001C05E 6600                       		bne.s	loc_1BAA8
0001C060 3028 0014                  		move.w	$14(a0),d0
0001C064 6700                       		beq.s	loc_1BAA8
0001C066 6B00                       		bmi.s	loc_1BA9A
0001C068 0440 000C                  		subi.w	#$C,d0
0001C06C 6400                       		bcc.s	loc_1BA94
0001C06E 303C 0000                  		move.w	#0,d0
0001C072                            
0001C072                            loc_1BA94:
0001C072 3140 0014                  		move.w	d0,$14(a0)
0001C076 6000                       		bra.s	loc_1BAA8
0001C078                            ; ===========================================================================
0001C078                            
0001C078                            loc_1BA9A:
0001C078 0640 000C                  		addi.w	#$C,d0
0001C07C 6400                       		bcc.s	loc_1BAA4
0001C07E 303C 0000                  		move.w	#0,d0
0001C082                            
0001C082                            loc_1BAA4:
0001C082 3140 0014                  		move.w	d0,$14(a0)
0001C086                            
0001C086                            loc_1BAA8:
0001C086 1038 F780                  		move.b	($FFFFF780).w,d0
0001C08A 0600 0020                  		addi.b	#$20,d0
0001C08E 0200 00C0                  		andi.b	#$C0,d0
0001C092 4400                       		neg.b	d0
0001C094 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C09A C3E8 0014                  		muls.w	$14(a0),d1
0001C09E D3A8 0008                  		add.l	d1,8(a0)
0001C0A2 C1E8 0014                  		muls.w	$14(a0),d0
0001C0A6 D1A8 000C                  		add.l	d0,$C(a0)
0001C0AA 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C0AE 2428 000C                  		move.l	$C(a0),d2
0001C0B2 2628 0008                  		move.l	8(a0),d3
0001C0B6 6100 0000                  		bsr.w	sub_1BCE8
0001C0BA 6700                       		beq.s	loc_1BAF2
0001C0BC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0C0 93A8 0008                  		sub.l	d1,8(a0)
0001C0C4 91A8 000C                  		sub.l	d0,$C(a0)
0001C0C8 317C 0000 0014             		move.w	#0,$14(a0)
0001C0CE 4E75                       		rts	
0001C0D0                            ; ===========================================================================
0001C0D0                            
0001C0D0                            loc_1BAF2:
0001C0D0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0D4 4E75                       		rts	
0001C0D6                            ; End of function Obj09_Move
0001C0D6                            
0001C0D6                            
0001C0D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0D6                            
0001C0D6                            
0001C0D6                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C0D6 08E8 0000 0022             		bset	#0,$22(a0)
0001C0DC 3028 0014                  		move.w	$14(a0),d0
0001C0E0 6700                       		beq.s	loc_1BB06
0001C0E2 6A00                       		bpl.s	loc_1BB1A
0001C0E4                            
0001C0E4                            loc_1BB06:
0001C0E4 0440 000C                  		subi.w	#$C,d0
0001C0E8 0C40 F800                  		cmpi.w	#-$800,d0
0001C0EC 6E00                       		bgt.s	loc_1BB14
0001C0EE 303C F800                  		move.w	#-$800,d0
0001C0F2                            
0001C0F2                            loc_1BB14:
0001C0F2 3140 0014                  		move.w	d0,$14(a0)
0001C0F6 4E75                       		rts	
0001C0F8                            ; ===========================================================================
0001C0F8                            
0001C0F8                            loc_1BB1A:
0001C0F8 0440 0040                  		subi.w	#$40,d0
0001C0FC 6400                       		bcc.s	loc_1BB22
0001C0FE 4E71                       		nop	
0001C100                            
0001C100                            loc_1BB22:
0001C100 3140 0014                  		move.w	d0,$14(a0)
0001C104 4E75                       		rts	
0001C106                            ; End of function Obj09_MoveLeft
0001C106                            
0001C106                            
0001C106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C106                            
0001C106                            
0001C106                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C106 08A8 0000 0022             		bclr	#0,$22(a0)
0001C10C 3028 0014                  		move.w	$14(a0),d0
0001C110 6B00                       		bmi.s	loc_1BB48
0001C112 0640 000C                  		addi.w	#$C,d0
0001C116 0C40 0800                  		cmpi.w	#$800,d0
0001C11A 6D00                       		blt.s	loc_1BB42
0001C11C 303C 0800                  		move.w	#$800,d0
0001C120                            
0001C120                            loc_1BB42:
0001C120 3140 0014                  		move.w	d0,$14(a0)
0001C124 6000                       		bra.s	locret_1BB54
0001C126                            ; ===========================================================================
0001C126                            
0001C126                            loc_1BB48:
0001C126 0640 0040                  		addi.w	#$40,d0
0001C12A 6400                       		bcc.s	loc_1BB50
0001C12C 4E71                       		nop	
0001C12E                            
0001C12E                            loc_1BB50:
0001C12E 3140 0014                  		move.w	d0,$14(a0)
0001C132                            
0001C132                            locret_1BB54:
0001C132 4E75                       		rts	
0001C134                            ; End of function Obj09_MoveRight
0001C134                            
0001C134                            
0001C134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C134                            
0001C134                            
0001C134                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C134 1038 F603                  		move.b	($FFFFF603).w,d0
0001C138 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C13C 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C13E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C142 0200 00FC                  		andi.b	#$FC,d0
0001C146 4400                       		neg.b	d0
0001C148 0400 0040                  		subi.b	#$40,d0
0001C14C 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C152 C3FC 0680                  		muls.w	#$680,d1
0001C156 E081                       		asr.l	#8,d1
0001C158 3141 0010                  		move.w	d1,$10(a0)
0001C15C C1FC 0680                  		muls.w	#$680,d0
0001C160 E080                       		asr.l	#8,d0
0001C162 3140 0012                  		move.w	d0,$12(a0)
0001C166 08E8 0001 0022             		bset	#1,$22(a0)
0001C16C 303C 00A0                  		move.w	#$A0,d0
0001C170 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C176                            
0001C176                            Obj09_NoJump:
0001C176 4E75                       		rts	
0001C178                            ; End of function Obj09_Jump
0001C178                            
0001C178                            
0001C178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C178                            
0001C178                            
0001C178                            nullsub_2:				; XREF: Obj09_InAir
0001C178 4E75                       		rts	
0001C17A                            ; End of function nullsub_2
0001C17A                            
0001C17A                            ; ===========================================================================
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            ; unused subroutine to limit Sonic's upward vertical speed
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A 323C FC00                  		move.w	#-$400,d1
0001C17E B268 0012                  		cmp.w	$12(a0),d1
0001C182 6F00                       		ble.s	locret_1BBB4
0001C184 1038 F602                  		move.b	($FFFFF602).w,d0
0001C188 0200 0070                  		andi.b	#$70,d0
0001C18C 6600                       		bne.s	locret_1BBB4
0001C18E 3141 0012                  		move.w	d1,$12(a0)
0001C192                            
0001C192                            locret_1BBB4:
0001C192 4E75                       		rts	
0001C194                            ; ---------------------------------------------------------------------------
0001C194                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C194                            ; ---------------------------------------------------------------------------
0001C194                            
0001C194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C194                            
0001C194                            
0001C194                            SS_FixCamera:				; XREF: Obj09
0001C194 3428 000C                  		move.w	$C(a0),d2
0001C198 3628 0008                  		move.w	8(a0),d3
0001C19C 3038 F700                  		move.w	($FFFFF700).w,d0
0001C1A0 0443 00A0                  		subi.w	#$A0,d3
0001C1A4 6500                       		bcs.s	loc_1BBCE
0001C1A6 9043                       		sub.w	d3,d0
0001C1A8 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C1AC                            
0001C1AC                            loc_1BBCE:
0001C1AC 3038 F704                  		move.w	($FFFFF704).w,d0
0001C1B0 0442 0070                  		subi.w	#$70,d2
0001C1B4 6500                       		bcs.s	locret_1BBDE
0001C1B6 9042                       		sub.w	d2,d0
0001C1B8 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C1BC                            
0001C1BC                            locret_1BBDE:
0001C1BC 4E75                       		rts	
0001C1BE                            ; End of function SS_FixCamera
0001C1BE                            
0001C1BE                            ; ===========================================================================
0001C1BE                            
0001C1BE                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C1BE 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C1C4 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C1CA 6600                       		bne.s	loc_1BBF4
0001C1CC 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C1D2                            
0001C1D2                            loc_1BBF4:
0001C1D2 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C1D8 6D00                       		blt.s	loc_1BC12
0001C1DA 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C1E0 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C1E6 5428 0024                  		addq.b	#2,$24(a0)
0001C1EA 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C1F0                            
0001C1F0                            loc_1BC12:
0001C1F0 3038 F780                  		move.w	($FFFFF780).w,d0
0001C1F4 D078 F782                  		add.w	($FFFFF782).w,d0
0001C1F8 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C1FC 4EB9 0001 3F86             		jsr	Sonic_Animate
0001C202 4EB9 0001 4202             		jsr	LoadSonicDynPLC
0001C208 6100 FF8A                  		bsr.w	SS_FixCamera
0001C20C 4EF9 0000 DB90             		jmp	DisplaySprite
0001C212                            ; ===========================================================================
0001C212                            
0001C212                            Obj09_Exit2:				; XREF: Obj09_Index
0001C212 5368 0038                  		subq.w	#1,$38(a0)
0001C216 6600                       		bne.s	loc_1BC40
0001C218 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C21E                            
0001C21E                            loc_1BC40:
0001C21E 4EB9 0001 3F86             		jsr	Sonic_Animate
0001C224 4EB9 0001 4202             		jsr	LoadSonicDynPLC
0001C22A 6100 FF68                  		bsr.w	SS_FixCamera
0001C22E 4EF9 0000 DB90             		jmp	DisplaySprite
0001C234                            
0001C234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C234                            
0001C234                            
0001C234                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C234 2428 000C                  		move.l	$C(a0),d2
0001C238 2628 0008                  		move.l	8(a0),d3
0001C23C 1038 F780                  		move.b	($FFFFF780).w,d0
0001C240 0200 00FC                  		andi.b	#$FC,d0
0001C244 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C24A 3828 0010                  		move.w	$10(a0),d4
0001C24E 48C4                       		ext.l	d4
0001C250 E184                       		asl.l	#8,d4
0001C252 C1FC 002A                  		muls.w	#$2A,d0
0001C256 D084                       		add.l	d4,d0
0001C258 3828 0012                  		move.w	$12(a0),d4
0001C25C 48C4                       		ext.l	d4
0001C25E E184                       		asl.l	#8,d4
0001C260 C3FC 002A                  		muls.w	#$2A,d1
0001C264 D284                       		add.l	d4,d1
0001C266 D680                       		add.l	d0,d3
0001C268 6100 0000                  		bsr.w	sub_1BCE8
0001C26C 6700                       		beq.s	loc_1BCB0
0001C26E 9680                       		sub.l	d0,d3
0001C270 7000                       		moveq	#0,d0
0001C272 3140 0010                  		move.w	d0,$10(a0)
0001C276 08A8 0001 0022             		bclr	#1,$22(a0)
0001C27C D481                       		add.l	d1,d2
0001C27E 6100 0000                  		bsr.w	sub_1BCE8
0001C282 6700                       		beq.s	loc_1BCC6
0001C284 9481                       		sub.l	d1,d2
0001C286 7200                       		moveq	#0,d1
0001C288 3141 0012                  		move.w	d1,$12(a0)
0001C28C 4E75                       		rts	
0001C28E                            ; ===========================================================================
0001C28E                            
0001C28E                            loc_1BCB0:
0001C28E D481                       		add.l	d1,d2
0001C290 6100 0000                  		bsr.w	sub_1BCE8
0001C294 6700                       		beq.s	loc_1BCD4
0001C296 9481                       		sub.l	d1,d2
0001C298 7200                       		moveq	#0,d1
0001C29A 3141 0012                  		move.w	d1,$12(a0)
0001C29E 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2A4                            
0001C2A4                            loc_1BCC6:
0001C2A4 E080                       		asr.l	#8,d0
0001C2A6 E081                       		asr.l	#8,d1
0001C2A8 3140 0010                  		move.w	d0,$10(a0)
0001C2AC 3141 0012                  		move.w	d1,$12(a0)
0001C2B0 4E75                       		rts	
0001C2B2                            ; ===========================================================================
0001C2B2                            
0001C2B2                            loc_1BCD4:
0001C2B2 E080                       		asr.l	#8,d0
0001C2B4 E081                       		asr.l	#8,d1
0001C2B6 3140 0010                  		move.w	d0,$10(a0)
0001C2BA 3141 0012                  		move.w	d1,$12(a0)
0001C2BE 08E8 0001 0022             		bset	#1,$22(a0)
0001C2C4 4E75                       		rts	
0001C2C6                            ; End of function Obj09_Fall
0001C2C6                            
0001C2C6                            
0001C2C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2C6                            
0001C2C6                            
0001C2C6                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C2C6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C2CC 7800                       		moveq	#0,d4
0001C2CE 4842                       		swap	d2
0001C2D0 3802                       		move.w	d2,d4
0001C2D2 4842                       		swap	d2
0001C2D4 0644 0044                  		addi.w	#$44,d4
0001C2D8 88FC 0018                  		divu.w	#$18,d4
0001C2DC C8FC 0080                  		mulu.w	#$80,d4
0001C2E0 D3C4                       		adda.l	d4,a1
0001C2E2 7800                       		moveq	#0,d4
0001C2E4 4843                       		swap	d3
0001C2E6 3803                       		move.w	d3,d4
0001C2E8 4843                       		swap	d3
0001C2EA 0644 0014                  		addi.w	#$14,d4
0001C2EE 88FC 0018                  		divu.w	#$18,d4
0001C2F2 D2C4                       		adda.w	d4,a1
0001C2F4 7A00                       		moveq	#0,d5
0001C2F6 1819                       		move.b	(a1)+,d4
0001C2F8 6100                       		bsr.s	sub_1BD30
0001C2FA 1819                       		move.b	(a1)+,d4
0001C2FC 6100                       		bsr.s	sub_1BD30
0001C2FE D2FC 007E                  		adda.w	#$7E,a1
0001C302 1819                       		move.b	(a1)+,d4
0001C304 6100                       		bsr.s	sub_1BD30
0001C306 1819                       		move.b	(a1)+,d4
0001C308 6100                       		bsr.s	sub_1BD30
0001C30A 4A05                       		tst.b	d5
0001C30C 4E75                       		rts	
0001C30E                            ; End of function sub_1BCE8
0001C30E                            
0001C30E                            
0001C30E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C30E                            
0001C30E                            
0001C30E                            sub_1BD30:				; XREF: sub_1BCE8
0001C30E 6700                       		beq.s	locret_1BD44
0001C310 0C04 0028                  		cmpi.b	#$28,d4
0001C314 6700                       		beq.s	locret_1BD44
0001C316 0C04 003A                  		cmpi.b	#$3A,d4
0001C31A 6500                       		bcs.s	loc_1BD46
0001C31C 0C04 004B                  		cmpi.b	#$4B,d4
0001C320 6400                       		bcc.s	loc_1BD46
0001C322                            
0001C322                            locret_1BD44:
0001C322 4E75                       		rts	
0001C324                            ; ===========================================================================
0001C324                            
0001C324                            loc_1BD46:
0001C324 1144 0030                  		move.b	d4,$30(a0)
0001C328 2149 0032                  		move.l	a1,$32(a0)
0001C32C 7AFF                       		moveq	#-1,d5
0001C32E 4E75                       		rts	
0001C330                            ; End of function sub_1BD30
0001C330                            
0001C330                            
0001C330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C330                            
0001C330                            
0001C330                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C330 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C336 7800                       		moveq	#0,d4
0001C338 3828 000C                  		move.w	$C(a0),d4
0001C33C 0644 0050                  		addi.w	#$50,d4
0001C340 88FC 0018                  		divu.w	#$18,d4
0001C344 C8FC 0080                  		mulu.w	#$80,d4
0001C348 D3C4                       		adda.l	d4,a1
0001C34A 7800                       		moveq	#0,d4
0001C34C 3828 0008                  		move.w	8(a0),d4
0001C350 0644 0020                  		addi.w	#$20,d4
0001C354 88FC 0018                  		divu.w	#$18,d4
0001C358 D2C4                       		adda.w	d4,a1
0001C35A 1811                       		move.b	(a1),d4
0001C35C 6600                       		bne.s	Obj09_ChkCont
0001C35E 4A28 003A                  		tst.b	$3A(a0)
0001C362 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C366 7800                       		moveq	#0,d4
0001C368 4E75                       		rts	
0001C36A                            ; ===========================================================================
0001C36A                            
0001C36A                            Obj09_ChkCont:
0001C36A 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C36E 6600                       		bne.s	Obj09_Chk1Up
0001C370 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C374 6600                       		bne.s	Obj09_GetCont
0001C376 14BC 0001                  		move.b	#1,(a2)
0001C37A 2549 0004                  		move.l	a1,4(a2)
0001C37E                            
0001C37E                            Obj09_GetCont:
0001C37E 4EB9 0000 A0EC             		jsr	CollectRing
0001C384 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C38A 6500                       		bcs.s	Obj09_NoCont
0001C38C 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C392 6600                       		bne.s	Obj09_NoCont
0001C394 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C398 303C 00BF                  		move.w	#$BF,d0
0001C39C 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C3A2                            
0001C3A2                            Obj09_NoCont:
0001C3A2 7800                       		moveq	#0,d4
0001C3A4 4E75                       		rts	
0001C3A6                            ; ===========================================================================
0001C3A6                            
0001C3A6                            Obj09_Chk1Up:
0001C3A6 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C3AA 6600                       		bne.s	Obj09_ChkEmer
0001C3AC 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C3B0 6600                       		bne.s	Obj09_Get1Up
0001C3B2 14BC 0003                  		move.b	#3,(a2)
0001C3B6 2549 0004                  		move.l	a1,4(a2)
0001C3BA                            
0001C3BA                            Obj09_Get1Up:
0001C3BA 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C3BE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C3C2 303C 0088                  		move.w	#$88,d0
0001C3C6 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C3CC 7800                       		moveq	#0,d4
0001C3CE 4E75                       		rts	
0001C3D0                            ; ===========================================================================
0001C3D0                            
0001C3D0                            Obj09_ChkEmer:
0001C3D0 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C3D4 6500                       		bcs.s	Obj09_ChkGhost
0001C3D6 0C04 0040                  		cmpi.b	#$40,d4
0001C3DA 6200                       		bhi.s	Obj09_ChkGhost
0001C3DC 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C3E0 6600                       		bne.s	Obj09_GetEmer
0001C3E2 14BC 0005                  		move.b	#5,(a2)
0001C3E6 2549 0004                  		move.l	a1,4(a2)
0001C3EA                            
0001C3EA                            Obj09_GetEmer:
0001C3EA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C3F0 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C3F2 0404 003B                  		subi.b	#$3B,d4
0001C3F6 7000                       		moveq	#0,d0
0001C3F8 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C3FC 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C400 1584 0000                  		move.b	d4,(a2,d0.w)
0001C404 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C408                            
0001C408                            Obj09_NoEmer:
0001C408 303C 0093                  		move.w	#$93,d0
0001C40C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C412 7800                       		moveq	#0,d4
0001C414 4E75                       		rts	
0001C416                            ; ===========================================================================
0001C416                            
0001C416                            Obj09_ChkGhost:
0001C416 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C41A 6600                       		bne.s	Obj09_ChkGhostTag
0001C41C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C422                            
0001C422                            Obj09_ChkGhostTag:
0001C422 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C426 6600                       		bne.s	Obj09_NoGhost
0001C428 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C42E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C430 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C436                            
0001C436                            Obj09_NoGhost:
0001C436 78FF                       		moveq	#-1,d4
0001C438 4E75                       		rts	
0001C43A                            ; ===========================================================================
0001C43A                            
0001C43A                            Obj09_MakeGhostSolid:
0001C43A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C440 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C442 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C448 723F                       		moveq	#$3F,d1
0001C44A                            
0001C44A                            Obj09_GhostLoop2:
0001C44A 743F                       		moveq	#$3F,d2
0001C44C                            
0001C44C                            Obj09_GhostLoop:
0001C44C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C450 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C452 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C456                            
0001C456                            Obj09_NoReplace:
0001C456 5249                       		addq.w	#1,a1
0001C458 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C45C 43E9 0040                  		lea	$40(a1),a1
0001C460 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C464                            
0001C464                            Obj09_GhostNotSolid:
0001C464 4228 003A                  		clr.b	$3A(a0)
0001C468 7800                       		moveq	#0,d4
0001C46A 4E75                       		rts	
0001C46C                            ; End of function Obj09_ChkItems
0001C46C                            
0001C46C                            
0001C46C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C46C                            
0001C46C                            
0001C46C                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C46C 1028 0030                  		move.b	$30(a0),d0
0001C470 6600                       		bne.s	Obj09_ChkBumper
0001C472 5328 0036                  		subq.b	#1,$36(a0)
0001C476 6A00                       		bpl.s	loc_1BEA0
0001C478 117C 0000 0036             		move.b	#0,$36(a0)
0001C47E                            
0001C47E                            loc_1BEA0:
0001C47E 5328 0037                  		subq.b	#1,$37(a0)
0001C482 6A00                       		bpl.s	locret_1BEAC
0001C484 117C 0000 0037             		move.b	#0,$37(a0)
0001C48A                            
0001C48A                            locret_1BEAC:
0001C48A 4E75                       		rts	
0001C48C                            ; ===========================================================================
0001C48C                            
0001C48C                            Obj09_ChkBumper:
0001C48C 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C490 6600                       		bne.s	Obj09_GOAL
0001C492 2228 0032                  		move.l	$32(a0),d1
0001C496 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C49C 3401                       		move.w	d1,d2
0001C49E 0241 007F                  		andi.w	#$7F,d1
0001C4A2 C2FC 0018                  		mulu.w	#$18,d1
0001C4A6 0441 0014                  		subi.w	#$14,d1
0001C4AA EE4A                       		lsr.w	#7,d2
0001C4AC 0242 007F                  		andi.w	#$7F,d2
0001C4B0 C4FC 0018                  		mulu.w	#$18,d2
0001C4B4 0442 0044                  		subi.w	#$44,d2
0001C4B8 9268 0008                  		sub.w	8(a0),d1
0001C4BC 9468 000C                  		sub.w	$C(a0),d2
0001C4C0 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0001C4C6 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C4CC C3FC F900                  		muls.w	#-$700,d1
0001C4D0 E081                       		asr.l	#8,d1
0001C4D2 3141 0010                  		move.w	d1,$10(a0)
0001C4D6 C1FC F900                  		muls.w	#-$700,d0
0001C4DA E080                       		asr.l	#8,d0
0001C4DC 3140 0012                  		move.w	d0,$12(a0)
0001C4E0 08E8 0001 0022             		bset	#1,$22(a0)
0001C4E6 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C4EA 6600                       		bne.s	Obj09_BumpSnd
0001C4EC 14BC 0002                  		move.b	#2,(a2)
0001C4F0 2028 0032                  		move.l	$32(a0),d0
0001C4F4 5380                       		subq.l	#1,d0
0001C4F6 2540 0004                  		move.l	d0,4(a2)
0001C4FA                            
0001C4FA                            Obj09_BumpSnd:
0001C4FA 303C 00B4                  		move.w	#$B4,d0
0001C4FE 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C504                            ; ===========================================================================
0001C504                            
0001C504                            Obj09_GOAL:
0001C504 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C508 6600                       		bne.s	Obj09_UPblock
0001C50A 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C50E 303C 00A8                  		move.w	#$A8,d0		; change item
0001C512 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C518 4E75                       		rts	
0001C51A                            ; ===========================================================================
0001C51A                            
0001C51A                            Obj09_UPblock:
0001C51A 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C51E 6600                       		bne.s	Obj09_DOWNblock
0001C520 4A28 0036                  		tst.b	$36(a0)
0001C524 6600 0000                  		bne.w	Obj09_NoGlass
0001C528 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C52E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C534 6700                       		beq.s	Obj09_UPsnd
0001C536 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C53A 2268 0032                  		movea.l	$32(a0),a1
0001C53E 5389                       		subq.l	#1,a1
0001C540 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C544                            
0001C544                            Obj09_UPsnd:
0001C544 303C 00A9                  		move.w	#$A9,d0
0001C548 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C54E                            ; ===========================================================================
0001C54E                            
0001C54E                            Obj09_DOWNblock:
0001C54E 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C552 6600                       		bne.s	Obj09_Rblock
0001C554 4A28 0036                  		tst.b	$36(a0)
0001C558 6600 0000                  		bne.w	Obj09_NoGlass
0001C55C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C562 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C568 6600                       		bne.s	Obj09_DOWNsnd
0001C56A E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C56E 2268 0032                  		movea.l	$32(a0),a1
0001C572 5389                       		subq.l	#1,a1
0001C574 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C578                            
0001C578                            Obj09_DOWNsnd:
0001C578 303C 00A9                  		move.w	#$A9,d0
0001C57C 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C582                            ; ===========================================================================
0001C582                            
0001C582                            Obj09_Rblock:
0001C582 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C586 6600                       		bne.s	Obj09_ChkGlass
0001C588 4A28 0037                  		tst.b	$37(a0)
0001C58C 6600 0000                  		bne.w	Obj09_NoGlass
0001C590 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C596 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C59A 6600                       		bne.s	Obj09_RevStage
0001C59C 14BC 0004                  		move.b	#4,(a2)
0001C5A0 2028 0032                  		move.l	$32(a0),d0
0001C5A4 5380                       		subq.l	#1,d0
0001C5A6 2540 0004                  		move.l	d0,4(a2)
0001C5AA                            
0001C5AA                            Obj09_RevStage:
0001C5AA 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C5AE 303C 00A9                  		move.w	#$A9,d0
0001C5B2 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C5B8                            ; ===========================================================================
0001C5B8                            
0001C5B8                            Obj09_ChkGlass:
0001C5B8 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C5BC 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C5BE 0C00 002E                  		cmpi.b	#$2E,d0
0001C5C2 6700                       		beq.s	Obj09_Glass
0001C5C4 0C00 002F                  		cmpi.b	#$2F,d0
0001C5C8 6700                       		beq.s	Obj09_Glass
0001C5CA 0C00 0030                  		cmpi.b	#$30,d0
0001C5CE 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C5D0                            
0001C5D0                            Obj09_Glass:
0001C5D0 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C5D4 6600                       		bne.s	Obj09_GlassSnd
0001C5D6 14BC 0006                  		move.b	#6,(a2)
0001C5DA 2268 0032                  		movea.l	$32(a0),a1
0001C5DE 5389                       		subq.l	#1,a1
0001C5E0 2549 0004                  		move.l	a1,4(a2)
0001C5E4 1011                       		move.b	(a1),d0
0001C5E6 5200                       		addq.b	#1,d0		; change glass type when touched
0001C5E8 0C00 0030                  		cmpi.b	#$30,d0
0001C5EC 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C5EE 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C5F0                            
0001C5F0                            Obj09_GlassUpdate:
0001C5F0 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C5F4                            
0001C5F4                            Obj09_GlassSnd:
0001C5F4 303C 00BA                  		move.w	#$BA,d0
0001C5F8 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C5FE                            ; ===========================================================================
0001C5FE                            
0001C5FE                            Obj09_NoGlass:
0001C5FE 4E75                       		rts	
0001C600                            ; End of function Obj09_ChkItems2
0001C600                            
0001C600                            ; ===========================================================================
0001C600                            ; ---------------------------------------------------------------------------
0001C600                            ; Object 10 - blank
0001C600                            ; ---------------------------------------------------------------------------
0001C600                            
0001C600                            Obj10:					; XREF: Obj_Index
0001C600 4E75                       		rts	
0001C602                            ; ---------------------------------------------------------------------------
0001C602                            ; Subroutine to	animate	level graphics
0001C602                            ; ---------------------------------------------------------------------------
0001C602                            
0001C602                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C602                            
0001C602                            
0001C602                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C602 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C606 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C608 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C60E 6100 0000                  		bsr.w	AniArt_GiantRing
0001C612 7000                       		moveq	#0,d0
0001C614 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C618 D040                       		add.w	d0,d0
0001C61A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C61E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C622                            ; ===========================================================================
0001C622                            
0001C622                            AniArt_Pause:
0001C622 4E75                       		rts	
0001C624                            ; End of function AniArt_Load
0001C624                            
0001C624                            ; ===========================================================================
0001C624 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C628 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C62C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C630 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C632                            ; ===========================================================================
0001C632                            ; ---------------------------------------------------------------------------
0001C632                            ; Animated pattern routine - Green Hill
0001C632                            ; ---------------------------------------------------------------------------
0001C632                            
0001C632                            AniArt_GHZ:				; XREF: AniArt_Index
0001C632 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C636 6A00                       		bpl.s	loc_1C08A
0001C638 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C63E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C644 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C648 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C64C 0240 0001                  		andi.w	#1,d0
0001C650 6700                       		beq.s	loc_1C078
0001C652 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C656                            
0001C656                            loc_1C078:
0001C656 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C660 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C664 6000 0000                  		bra.w	LoadTiles
0001C668                            ; ===========================================================================
0001C668                            
0001C668                            loc_1C08A:
0001C668 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C66C 6A00                       		bpl.s	loc_1C0C0
0001C66E 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C674 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C67A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C67E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C682 0240 0001                  		andi.w	#1,d0
0001C686 6700                       		beq.s	loc_1C0AE
0001C688 43E9 0200                  		lea	$200(a1),a1
0001C68C                            
0001C68C                            loc_1C0AE:
0001C68C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C696 323C 000F                  		move.w	#$F,d1
0001C69A 6000 0000                  		bra.w	LoadTiles
0001C69E                            ; ===========================================================================
0001C69E                            
0001C69E                            loc_1C0C0:
0001C69E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C6A2 6A00                       		bpl.s	locret_1C10C
0001C6A4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C6AA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C6AE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C6B2 0240 0003                  		andi.w	#3,d0
0001C6B6 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C6BA 0800 0000                  		btst	#0,d0
0001C6BE 6600                       		bne.s	loc_1C0E8
0001C6C0 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C6C6                            
0001C6C6                            loc_1C0E8:
0001C6C6 EF48                       		lsl.w	#7,d0
0001C6C8 3200                       		move.w	d0,d1
0001C6CA D040                       		add.w	d0,d0
0001C6CC D041                       		add.w	d1,d0
0001C6CE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C6D8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C6DE 43F1 0000                  		lea	(a1,d0.w),a1
0001C6E2 323C 000B                  		move.w	#$B,d1
0001C6E6 6100 0000                  		bsr.w	LoadTiles
0001C6EA                            
0001C6EA                            locret_1C10C:
0001C6EA 4E75                       		rts	
0001C6EC                            ; ===========================================================================
0001C6EC 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C6F0                            ; ===========================================================================
0001C6F0                            ; ---------------------------------------------------------------------------
0001C6F0                            ; Animated pattern routine - Marble
0001C6F0                            ; ---------------------------------------------------------------------------
0001C6F0                            
0001C6F0                            AniArt_MZ:				; XREF: AniArt_Index
0001C6F0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C6F4 6A00                       		bpl.s	loc_1C150
0001C6F6 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C6FC 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C702 7000                       		moveq	#0,d0
0001C704 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C708 5200                       		addq.b	#1,d0
0001C70A 0C00 0003                  		cmpi.b	#3,d0
0001C70E 6600                       		bne.s	loc_1C134
0001C710 7000                       		moveq	#0,d0
0001C712                            
0001C712                            loc_1C134:
0001C712 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C716 C0FC 0100                  		mulu.w	#$100,d0
0001C71A D2C0                       		adda.w	d0,a1
0001C71C 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C726 323C 0007                  		move.w	#7,d1
0001C72A 6100 0000                  		bsr.w	LoadTiles
0001C72E                            
0001C72E                            loc_1C150:
0001C72E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C732 6A00                       		bpl.s	loc_1C1AE
0001C734 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C73A 7000                       		moveq	#0,d0
0001C73C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C740 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C746 EE58                       		ror.w	#7,d0
0001C748 D8C0                       		adda.w	d0,a4
0001C74A 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C754 7600                       		moveq	#0,d3
0001C756 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C75A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C75E 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C762 343C 0003                  		move.w	#3,d2
0001C766                            
0001C766                            loc_1C188:
0001C766 3003                       		move.w	d3,d0
0001C768 D040                       		add.w	d0,d0
0001C76A 0240 001E                  		andi.w	#$1E,d0
0001C76E 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C774 3033 0000                  		move.w	(a3,d0.w),d0
0001C778 47F3 0000                  		lea	(a3,d0.w),a3
0001C77C 224C                       		movea.l	a4,a1
0001C77E 323C 001F                  		move.w	#$1F,d1
0001C782 4E93                       		jsr	(a3)
0001C784 5843                       		addq.w	#4,d3
0001C786 51CA FFDE                  		dbf	d2,loc_1C188
0001C78A 4E75                       		rts	
0001C78C                            ; ===========================================================================
0001C78C                            
0001C78C                            loc_1C1AE:
0001C78C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C790 6A00 0000                  		bpl.w	locret_1C1EA
0001C794 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C79A 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C7A0 7000                       		moveq	#0,d0
0001C7A2 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C7A6 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C7AA 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C7B0 C0FC 00C0                  		mulu.w	#$C0,d0
0001C7B4 D2C0                       		adda.w	d0,a1
0001C7B6 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C7C0 323C 0005                  		move.w	#5,d1
0001C7C4 6000 0000                  		bra.w	LoadTiles
0001C7C8                            ; ===========================================================================
0001C7C8                            
0001C7C8                            locret_1C1EA:
0001C7C8 4E75                       		rts	
0001C7CA                            ; ===========================================================================
0001C7CA                            ; ---------------------------------------------------------------------------
0001C7CA                            ; Animated pattern routine - Scrap Brain
0001C7CA                            ; ---------------------------------------------------------------------------
0001C7CA                            
0001C7CA                            AniArt_SBZ:				; XREF: AniArt_Index
0001C7CA 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C7CE 6700                       		beq.s	loc_1C1F8
0001C7D0 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C7D4 6000                       		bra.s	loc_1C250
0001C7D6                            ; ===========================================================================
0001C7D6                            
0001C7D6                            loc_1C1F8:
0001C7D6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C7DA 6A00                       		bpl.s	loc_1C250
0001C7DC 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C7E2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C7E8 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C7F2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C7F6 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C7FA 0240 0007                  		andi.w	#7,d0
0001C7FE 6700                       		beq.s	loc_1C234
0001C800 5340                       		subq.w	#1,d0
0001C802 C0FC 0180                  		mulu.w	#$180,d0
0001C806 43F1 0000                  		lea	(a1,d0.w),a1
0001C80A 323C 000B                  		move.w	#$B,d1
0001C80E 6000 0000                  		bra.w	LoadTiles
0001C812                            ; ===========================================================================
0001C812                            
0001C812                            loc_1C234:
0001C812 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C818                            
0001C818                            loc_1C23A:
0001C818 323C 0005                  		move.w	#5,d1
0001C81C 6100 0000                  		bsr.w	LoadTiles
0001C820 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C826 323C 0005                  		move.w	#5,d1
0001C82A 6000 0000                  		bra.w	LoadTiles
0001C82E                            ; ===========================================================================
0001C82E                            
0001C82E                            loc_1C250:
0001C82E 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C832 6700                       		beq.s	loc_1C25C
0001C834 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C838 6000                       		bra.s	locret_1C2A0
0001C83A                            ; ===========================================================================
0001C83A                            
0001C83A                            loc_1C25C:
0001C83A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C83E 6A00                       		bpl.s	locret_1C2A0
0001C840 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C846 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C84C 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C856 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C85A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C85E 0240 0007                  		andi.w	#7,d0
0001C862 6700                       		beq.s	loc_1C298
0001C864 5340                       		subq.w	#1,d0
0001C866 C0FC 0180                  		mulu.w	#$180,d0
0001C86A 43F1 0000                  		lea	(a1,d0.w),a1
0001C86E 323C 000B                  		move.w	#$B,d1
0001C872 6000 0000                  		bra.w	LoadTiles
0001C876                            ; ===========================================================================
0001C876                            
0001C876                            loc_1C298:
0001C876 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C87C 609A                       		bra.s	loc_1C23A
0001C87E                            ; ===========================================================================
0001C87E                            
0001C87E                            locret_1C2A0:
0001C87E 4E75                       		rts	
0001C880                            ; ===========================================================================
0001C880                            ; ---------------------------------------------------------------------------
0001C880                            ; Animated pattern routine - ending sequence
0001C880                            ; ---------------------------------------------------------------------------
0001C880                            
0001C880                            AniArt_Ending:				; XREF: AniArt_Index
0001C880 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C884 6A00                       		bpl.s	loc_1C2F4
0001C886 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C88C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C892 45F8 9400                  		lea	($FFFF9400).w,a2
0001C896 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C89A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C89E 0240 0001                  		andi.w	#1,d0
0001C8A2 6700                       		beq.s	loc_1C2CE
0001C8A4 43E9 0200                  		lea	$200(a1),a1
0001C8A8 45EA 0200                  		lea	$200(a2),a2
0001C8AC                            
0001C8AC                            loc_1C2CE:
0001C8AC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C8B6 323C 000F                  		move.w	#$F,d1
0001C8BA 6100 0000                  		bsr.w	LoadTiles
0001C8BE 224A                       		movea.l	a2,a1
0001C8C0 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C8CA 323C 000F                  		move.w	#$F,d1
0001C8CE 6000 0000                  		bra.w	LoadTiles
0001C8D2                            ; ===========================================================================
0001C8D2                            
0001C8D2                            loc_1C2F4:
0001C8D2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C8D6 6A00                       		bpl.s	loc_1C33C
0001C8D8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C8DE 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C8E2 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C8E6 0240 0007                  		andi.w	#7,d0
0001C8EA 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C8EE EF48                       		lsl.w	#7,d0
0001C8F0 3200                       		move.w	d0,d1
0001C8F2 D040                       		add.w	d0,d0
0001C8F4 D041                       		add.w	d1,d0
0001C8F6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C900 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C906 43F1 0000                  		lea	(a1,d0.w),a1
0001C90A 323C 000B                  		move.w	#$B,d1
0001C90E 6000 0000                  		bra.w	LoadTiles
0001C912                            ; ===========================================================================
0001C912 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C91A                            ; ===========================================================================
0001C91A                            
0001C91A                            loc_1C33C:
0001C91A 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C91E 6A00                       		bpl.s	loc_1C37A
0001C920 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C926 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C92A 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C92E 0240 0003                  		andi.w	#3,d0
0001C932 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C936 E148                       		lsl.w	#8,d0
0001C938 D040                       		add.w	d0,d0
0001C93A 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C944 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C948 43F1 0000                  		lea	(a1,d0.w),a1
0001C94C 323C 000F                  		move.w	#$F,d1
0001C950 6000 0000                  		bra.w	LoadTiles
0001C954                            ; ===========================================================================
0001C954 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C958                            ; ===========================================================================
0001C958                            
0001C958                            loc_1C37A:
0001C958 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C95C 6A00                       		bpl.s	locret_1C3B4
0001C95E 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C964 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C968 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C96C 0240 0003                  		andi.w	#3,d0
0001C970 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C974 E148                       		lsl.w	#8,d0
0001C976 D040                       		add.w	d0,d0
0001C978 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C982 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C986 43F1 0000                  		lea	(a1,d0.w),a1
0001C98A 323C 000F                  		move.w	#$F,d1
0001C98E 6000 0000                  		bra.w	LoadTiles
0001C992                            ; ===========================================================================
0001C992                            
0001C992                            locret_1C3B4:
0001C992 4E75                       		rts	
0001C994                            ; ===========================================================================
0001C994                            
0001C994                            AniArt_none:				; XREF: AniArt_Index
0001C994 4E75                       		rts	
0001C996                            
0001C996                            ; ---------------------------------------------------------------------------
0001C996                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C996                            ; ---------------------------------------------------------------------------
0001C996                            
0001C996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C996                            
0001C996                            
0001C996                            LoadTiles:
0001C996 2C99                       		move.l	(a1)+,(a6)
0001C998 2C99                       		move.l	(a1)+,(a6)
0001C99A 2C99                       		move.l	(a1)+,(a6)
0001C99C 2C99                       		move.l	(a1)+,(a6)
0001C99E 2C99                       		move.l	(a1)+,(a6)
0001C9A0 2C99                       		move.l	(a1)+,(a6)
0001C9A2 2C99                       		move.l	(a1)+,(a6)
0001C9A4 2C99                       		move.l	(a1)+,(a6)
0001C9A6 51C9 FFEE                  		dbf	d1,LoadTiles
0001C9AA 4E75                       		rts	
0001C9AC                            ; End of function LoadTiles
0001C9AC                            
0001C9AC                            ; ===========================================================================
0001C9AC                            ; ---------------------------------------------------------------------------
0001C9AC                            ; Animated pattern routine - more Marble Zone
0001C9AC                            ; ---------------------------------------------------------------------------
0001C9AC 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C9B0 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C9B4 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C9B8 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C9BC 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C9C0 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C9C4 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C9C8 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C9CC                            ; ===========================================================================
0001C9CC                            
0001C9CC                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C9CC 2C91                       		move.l	(a1),(a6)
0001C9CE 43E9 0010                  		lea	$10(a1),a1
0001C9D2 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C9D6 4E75                       		rts	
0001C9D8                            ; ===========================================================================
0001C9D8                            
0001C9D8                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C9D8 2029 0002                  		move.l	2(a1),d0
0001C9DC 1029 0001                  		move.b	1(a1),d0
0001C9E0 E098                       		ror.l	#8,d0
0001C9E2 2C80                       		move.l	d0,(a6)
0001C9E4 43E9 0010                  		lea	$10(a1),a1
0001C9E8 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C9EC 4E75                       		rts	
0001C9EE                            ; ===========================================================================
0001C9EE                            
0001C9EE                            loc_1C410:				; XREF: AniArt_MZextra
0001C9EE 2CA9 0002                  		move.l	2(a1),(a6)
0001C9F2 43E9 0010                  		lea	$10(a1),a1
0001C9F6 51C9 FFF6                  		dbf	d1,loc_1C410
0001C9FA 4E75                       		rts	
0001C9FC                            ; ===========================================================================
0001C9FC                            
0001C9FC                            loc_1C41E:				; XREF: AniArt_MZextra
0001C9FC 2029 0004                  		move.l	4(a1),d0
0001CA00 1029 0003                  		move.b	3(a1),d0
0001CA04 E098                       		ror.l	#8,d0
0001CA06 2C80                       		move.l	d0,(a6)
0001CA08 43E9 0010                  		lea	$10(a1),a1
0001CA0C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CA10 4E75                       		rts	
0001CA12                            ; ===========================================================================
0001CA12                            
0001CA12                            loc_1C434:				; XREF: AniArt_MZextra
0001CA12 2CA9 0004                  		move.l	4(a1),(a6)
0001CA16 43E9 0010                  		lea	$10(a1),a1
0001CA1A 51C9 FFF6                  		dbf	d1,loc_1C434
0001CA1E 4E75                       		rts	
0001CA20                            ; ===========================================================================
0001CA20                            
0001CA20                            loc_1C442:				; XREF: AniArt_MZextra
0001CA20 2029 0006                  		move.l	6(a1),d0
0001CA24 1029 0005                  		move.b	5(a1),d0
0001CA28 E098                       		ror.l	#8,d0
0001CA2A 2C80                       		move.l	d0,(a6)
0001CA2C 43E9 0010                  		lea	$10(a1),a1
0001CA30 51C9 FFEE                  		dbf	d1,loc_1C442
0001CA34 4E75                       		rts	
0001CA36                            ; ===========================================================================
0001CA36                            
0001CA36                            loc_1C458:				; XREF: AniArt_MZextra
0001CA36 2CA9 0006                  		move.l	6(a1),(a6)
0001CA3A 43E9 0010                  		lea	$10(a1),a1
0001CA3E 51C9 FFF6                  		dbf	d1,loc_1C458
0001CA42 4E75                       		rts	
0001CA44                            ; ===========================================================================
0001CA44                            
0001CA44                            loc_1C466:				; XREF: AniArt_MZextra
0001CA44 2029 0008                  		move.l	8(a1),d0
0001CA48 1029 0007                  		move.b	7(a1),d0
0001CA4C E098                       		ror.l	#8,d0
0001CA4E 2C80                       		move.l	d0,(a6)
0001CA50 43E9 0010                  		lea	$10(a1),a1
0001CA54 51C9 FFEE                  		dbf	d1,loc_1C466
0001CA58 4E75                       		rts	
0001CA5A                            ; ===========================================================================
0001CA5A                            
0001CA5A                            loc_1C47C:				; XREF: AniArt_MZextra
0001CA5A 2CA9 0008                  		move.l	8(a1),(a6)
0001CA5E 43E9 0010                  		lea	$10(a1),a1
0001CA62 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CA66 4E75                       		rts	
0001CA68                            ; ===========================================================================
0001CA68                            
0001CA68                            loc_1C48A:				; XREF: AniArt_MZextra
0001CA68 2029 000A                  		move.l	$A(a1),d0
0001CA6C 1029 0009                  		move.b	9(a1),d0
0001CA70 E098                       		ror.l	#8,d0
0001CA72 2C80                       		move.l	d0,(a6)
0001CA74 43E9 0010                  		lea	$10(a1),a1
0001CA78 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CA7C 4E75                       		rts	
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CA7E 2CA9 000A                  		move.l	$A(a1),(a6)
0001CA82 43E9 0010                  		lea	$10(a1),a1
0001CA86 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CA8A 4E75                       		rts	
0001CA8C                            ; ===========================================================================
0001CA8C                            
0001CA8C                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CA8C 2029 000C                  		move.l	$C(a1),d0
0001CA90 1029 000B                  		move.b	$B(a1),d0
0001CA94 E098                       		ror.l	#8,d0
0001CA96 2C80                       		move.l	d0,(a6)
0001CA98 43E9 0010                  		lea	$10(a1),a1
0001CA9C 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CAA0 4E75                       		rts	
0001CAA2                            ; ===========================================================================
0001CAA2                            
0001CAA2                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CAA2 2CA9 000C                  		move.l	$C(a1),(a6)
0001CAA6 43E9 0010                  		lea	$10(a1),a1
0001CAAA 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CAAE 4E75                       		rts	
0001CAB0                            ; ===========================================================================
0001CAB0                            
0001CAB0                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CAB0 2029 000C                  		move.l	$C(a1),d0
0001CAB4 E198                       		rol.l	#8,d0
0001CAB6 1011                       		move.b	0(a1),d0
0001CAB8 2C80                       		move.l	d0,(a6)
0001CABA 43E9 0010                  		lea	$10(a1),a1
0001CABE 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CAC2 4E75                       		rts	
0001CAC4                            ; ===========================================================================
0001CAC4                            
0001CAC4                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CAC4 3CA9 000E                  		move.w	$E(a1),(a6)
0001CAC8 3C91                       		move.w	0(a1),(a6)
0001CACA 43E9 0010                  		lea	$10(a1),a1
0001CACE 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CAD2 4E75                       		rts	
0001CAD4                            ; ===========================================================================
0001CAD4                            
0001CAD4                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CAD4 2011                       		move.l	0(a1),d0
0001CAD6 1029 000F                  		move.b	$F(a1),d0
0001CADA E098                       		ror.l	#8,d0
0001CADC 2C80                       		move.l	d0,(a6)
0001CADE 43E9 0010                  		lea	$10(a1),a1
0001CAE2 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CAE6 4E75                       		rts	
0001CAE8                            
0001CAE8                            ; ---------------------------------------------------------------------------
0001CAE8                            ; Animated pattern routine - giant ring
0001CAE8                            ; ---------------------------------------------------------------------------
0001CAE8                            
0001CAE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAE8                            
0001CAE8                            
0001CAE8                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CAE8 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CAEC 6600                       		bne.s	loc_1C518
0001CAEE 4E75                       		rts	
0001CAF0                            ; ===========================================================================
0001CAF0                            
0001CAF0                            loc_1C518:
0001CAF0 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CAF6 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CAFC 7000                       		moveq	#0,d0
0001CAFE 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CB02 43F1 0000                  		lea	(a1,d0.w),a1
0001CB06 0640 8000                  		addi.w	#$8000,d0
0001CB0A E588                       		lsl.l	#2,d0
0001CB0C E448                       		lsr.w	#2,d0
0001CB0E 0040 4000                  		ori.w	#$4000,d0
0001CB12 4840                       		swap	d0
0001CB14 2D40 0004                  		move.l	d0,4(a6)
0001CB18 323C 000D                  		move.w	#$D,d1
0001CB1C 6000 FE78                  		bra.w	LoadTiles
0001CB20                            ; End of function AniArt_GiantRing
0001CB20                            
0001CB20                            ; ===========================================================================
0001CB20                            ; ---------------------------------------------------------------------------
0001CB20                            ; Object 21 - SCORE, TIME, RINGS
0001CB20                            ; ---------------------------------------------------------------------------
0001CB20                            
0001CB20                            Obj21:					; XREF: Obj_Index
0001CB20 7000                       		moveq	#0,d0
0001CB22 1028 0024                  		move.b	$24(a0),d0
0001CB26 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CB2A 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CB2E                            ; ===========================================================================
0001CB2E 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CB30 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CB32                            ; ===========================================================================
0001CB32                            
0001CB32                            Obj21_Main:				; XREF: Obj21_Main
0001CB32 5428 0024                  		addq.b	#2,$24(a0)
0001CB36 317C 0090 0008             		move.w	#$90,8(a0)
0001CB3C 317C 0108 000A             		move.w	#$108,$A(a0)
0001CB42 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CB4A 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CB50 117C 0000 0001             		move.b	#0,1(a0)
0001CB56 117C 0000 0018             		move.b	#0,$18(a0)
0001CB5C                            
0001CB5C                            Obj21_Flash:				; XREF: Obj21_Main
0001CB5C 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CB60 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CB62 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CB66 4EF9 0000 DB90             		jmp	DisplaySprite
0001CB6C                            ; ===========================================================================
0001CB6C                            
0001CB6C                            Obj21_Flash2:
0001CB6C 7000                       		moveq	#0,d0
0001CB6E 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CB74 6600                       		bne.s	Obj21_Display
0001CB76 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CB78 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CB7E 6600                       		bne.s	Obj21_Display	; if not, branch
0001CB80 5440                       		addq.w	#2,d0		; make time counter flash red
0001CB82                            
0001CB82                            Obj21_Display:
0001CB82 1140 001A                  		move.b	d0,$1A(a0)
0001CB86 4EF9 0000 DB90             		jmp	DisplaySprite
0001CB8C                            ; ===========================================================================
0001CB8C                            ; ---------------------------------------------------------------------------
0001CB8C                            ; Sprite mappings - SCORE, TIME, RINGS
0001CB8C                            ; ---------------------------------------------------------------------------
0001CB8C                            Map_obj21:
0001CB8C                            	include "_maps\obj21.asm"
0001CB8C                            ; ---------------------------------------------------------------------------
0001CB8C                            ; Sprite mappings - SCORE, TIME, RINGS
0001CB8C                            ; ---------------------------------------------------------------------------
0001CB8C 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CB90 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CB94 0A                         byte_1C5BC:	dc.b $A
0001CB95 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CB9A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CB9F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBA4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBA9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBAE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CBB3 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CBB8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CBBD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CBC2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CBC7 00                         		dc.b 0
0001CBC8 0A                         byte_1C5F0:	dc.b $A
0001CBC9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBCE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBD3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBD8 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBDD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBE2 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CBE7 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CBEC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CBF1 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CBF6 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CBFB 00                         		dc.b 0
0001CBFC 0A                         byte_1C624:	dc.b $A
0001CBFD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC02 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC07 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC0C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC11 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC16 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CC1B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CC20 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC25 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC2A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC2F 00                         		dc.b 0
0001CC30 0A                         byte_1C658:	dc.b $A
0001CC31 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC36 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC3B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC40 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC45 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC4A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC4F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC54 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC59 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC5E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC64 00                         		even
0001CC64 00                         		even
0001CC64                            
0001CC64                            ; ---------------------------------------------------------------------------
0001CC64                            ; Add points subroutine
0001CC64                            ; ---------------------------------------------------------------------------
0001CC64                            
0001CC64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC64                            
0001CC64                            
0001CC64                            AddPoints:
0001CC64 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CC6A 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CC6E 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CC72 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CC74 223C 000F 423F             		move.l	#999999,d1
0001CC7A B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CC7C 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CC80 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CC82 2481                       		move.l	d1,(a2)
0001CC84                            
0001CC84                            loc_1C6AC:
0001CC84 2013                       		move.l	(a3),d0
0001CC86 B092                       		cmp.l	(a2),d0
0001CC88 6500 0000                  		bcs.w	locret_1C6B6
0001CC8C 2480                       		move.l	d0,(a2)
0001CC8E                            
0001CC8E                            locret_1C6B6:
0001CC8E 4E75                       		rts	
0001CC90                            ; End of function AddPoints
0001CC90                            
0001CC90                            ; ---------------------------------------------------------------------------
0001CC90                            ; Subroutine to	update the HUD
0001CC90                            ; ---------------------------------------------------------------------------
0001CC90                            
0001CC90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC90                            
0001CC90                            
0001CC90                            HudUpdate:
0001CC90 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CC94 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CC98 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CC9C 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CC9E 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CCA2 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CCA8 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CCAC 6100 0000                  		bsr.w	Hud_Score
0001CCB0                            
0001CCB0                            Hud_ChkRings:
0001CCB0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CCB4 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CCB6 6A00                       		bpl.s	loc_1C6E4
0001CCB8 6100 0000                  		bsr.w	Hud_LoadZero
0001CCBC                            
0001CCBC                            loc_1C6E4:
0001CCBC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CCC0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CCC6 7200                       		moveq	#0,d1
0001CCC8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CCCC 6100 0000                  		bsr.w	Hud_Rings
0001CCD0                            
0001CCD0                            Hud_ChkTime:
0001CCD0 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CCD4 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CCD6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CCDA 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CCDC 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CCE0 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CCE6 6700                       		beq.s	TimeOver	; if yes, branch
0001CCE8 5221                       		addq.b	#1,-(a1)
0001CCEA 0C11 003C                  		cmpi.b	#60,(a1)
0001CCEE 6500                       		bcs.s	Hud_ChkLives
0001CCF0 12BC 0000                  		move.b	#0,(a1)
0001CCF4 5221                       		addq.b	#1,-(a1)
0001CCF6 0C11 003C                  		cmpi.b	#60,(a1)
0001CCFA 6500                       		bcs.s	loc_1C734
0001CCFC 12BC 0000                  		move.b	#0,(a1)
0001CD00 5221                       		addq.b	#1,-(a1)
0001CD02 0C11 0009                  		cmpi.b	#9,(a1)
0001CD06 6500                       		bcs.s	loc_1C734
0001CD08 12BC 0009                  		move.b	#9,(a1)
0001CD0C                            
0001CD0C                            loc_1C734:
0001CD0C 203C 5E40 0003             		move.l	#$5E400003,d0
0001CD12 7200                       		moveq	#0,d1
0001CD14 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CD18 6100 0000                  		bsr.w	Hud_Mins
0001CD1C 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CD22 7200                       		moveq	#0,d1
0001CD24 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CD28 6100 0000                  		bsr.w	Hud_Secs
0001CD2C                            
0001CD2C                            Hud_ChkLives:
0001CD2C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CD30 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CD32 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CD36 6100 0000                  		bsr.w	Hud_Lives
0001CD3A                            
0001CD3A                            Hud_ChkBonus:
0001CD3A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CD3E 6700                       		beq.s	Hud_End		; if not, branch
0001CD40 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CD44 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CD4E 7200                       		moveq	#0,d1
0001CD50 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CD54 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD58 7200                       		moveq	#0,d1
0001CD5A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CD5E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD62                            
0001CD62                            Hud_End:
0001CD62 4E75                       		rts	
0001CD64                            ; ===========================================================================
0001CD64                            
0001CD64                            TimeOver:				; XREF: Hud_ChkTime
0001CD64 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CD68 41F8 D000                  		lea	($FFFFD000).w,a0
0001CD6C 2448                       		movea.l	a0,a2
0001CD6E 6100 E908                  		bsr.w	KillSonic
0001CD72 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CD78 4E75                       		rts	
0001CD7A                            ; ===========================================================================
0001CD7A                            
0001CD7A                            HudDebug:				; XREF: HudUpdate
0001CD7A 6100 0000                  		bsr.w	HudDb_XY
0001CD7E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CD82 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CD84 6A00                       		bpl.s	HudDb_Rings
0001CD86 6100 0000                  		bsr.w	Hud_LoadZero
0001CD8A                            
0001CD8A                            HudDb_Rings:
0001CD8A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CD8E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CD94 7200                       		moveq	#0,d1
0001CD96 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CD9A 6100 0000                  		bsr.w	Hud_Rings
0001CD9E                            
0001CD9E                            HudDb_ObjCount:
0001CD9E 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CDA4 7200                       		moveq	#0,d1
0001CDA6 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CDAA 6100 0000                  		bsr.w	Hud_Secs
0001CDAE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CDB2 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CDB4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CDB8 6100 0000                  		bsr.w	Hud_Lives
0001CDBC                            
0001CDBC                            HudDb_ChkBonus:
0001CDBC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CDC0 6700                       		beq.s	HudDb_End	; if not, branch
0001CDC2 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CDC6 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CDD0 7200                       		moveq	#0,d1
0001CDD2 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CDD6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CDDA 7200                       		moveq	#0,d1
0001CDDC 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CDE0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CDE4                            
0001CDE4                            HudDb_End:
0001CDE4 4E75                       		rts	
0001CDE6                            ; End of function HudUpdate
0001CDE6                            
0001CDE6                            ; ---------------------------------------------------------------------------
0001CDE6                            ; Subroutine to	load "0" on the	HUD
0001CDE6                            ; ---------------------------------------------------------------------------
0001CDE6                            
0001CDE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDE6                            
0001CDE6                            
0001CDE6                            Hud_LoadZero:				; XREF: HudUpdate
0001CDE6 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CDF0 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CDF4 343C 0002                  		move.w	#2,d2
0001CDF8 6000                       		bra.s	loc_1C83E
0001CDFA                            ; End of function Hud_LoadZero
0001CDFA                            
0001CDFA                            ; ---------------------------------------------------------------------------
0001CDFA                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CDFA                            ; ---------------------------------------------------------------------------
0001CDFA                            
0001CDFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDFA                            
0001CDFA                            
0001CDFA                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CDFA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE00 6100 0000                  		bsr.w	Hud_Lives
0001CE04 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CE0E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CE12 343C 000E                  		move.w	#$E,d2
0001CE16                            
0001CE16                            loc_1C83E:				; XREF: Hud_LoadZero
0001CE16 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE1A                            
0001CE1A                            loc_1C842:
0001CE1A 323C 000F                  		move.w	#$F,d1
0001CE1E 101A                       		move.b	(a2)+,d0
0001CE20 6B00                       		bmi.s	loc_1C85E
0001CE22 4880                       		ext.w	d0
0001CE24 EB48                       		lsl.w	#5,d0
0001CE26 47F1 0000                  		lea	(a1,d0.w),a3
0001CE2A                            
0001CE2A                            loc_1C852:
0001CE2A 2C9B                       		move.l	(a3)+,(a6)
0001CE2C 51C9 FFFC                  		dbf	d1,loc_1C852
0001CE30                            
0001CE30                            loc_1C858:
0001CE30 51CA FFE8                  		dbf	d2,loc_1C842
0001CE34                            
0001CE34 4E75                       		rts	
0001CE36                            ; ===========================================================================
0001CE36                            
0001CE36                            loc_1C85E:
0001CE36 2CBC 0000 0000             		move.l	#0,(a6)
0001CE3C 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CE40                            
0001CE40 60EE                       		bra.s	loc_1C858
0001CE42                            ; End of function Hud_Base
0001CE42                            
0001CE42                            ; ===========================================================================
0001CE42 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CE4E FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CE52                            ; ---------------------------------------------------------------------------
0001CE52                            ; Subroutine to	load debug mode	numbers	patterns
0001CE52                            ; ---------------------------------------------------------------------------
0001CE52                            
0001CE52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE52                            
0001CE52                            
0001CE52                            HudDb_XY:				; XREF: HudDebug
0001CE52 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CE5C 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CE60 4841                       		swap	d1
0001CE62 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CE66 6100                       		bsr.s	HudDb_XY2
0001CE68 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CE6C 4841                       		swap	d1
0001CE6E 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CE72                            ; End of function HudDb_XY
0001CE72                            
0001CE72                            
0001CE72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE72                            
0001CE72                            
0001CE72                            HudDb_XY2:
0001CE72 7C07                       		moveq	#7,d6
0001CE74 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CE7A                            
0001CE7A                            HudDb_XYLoop:
0001CE7A E959                       		rol.w	#4,d1
0001CE7C 3401                       		move.w	d1,d2
0001CE7E 0242 000F                  		andi.w	#$F,d2
0001CE82 0C42 000A                  		cmpi.w	#$A,d2
0001CE86 6500                       		bcs.s	loc_1C8B2
0001CE88 5E42                       		addq.w	#7,d2
0001CE8A                            
0001CE8A                            loc_1C8B2:
0001CE8A EB4A                       		lsl.w	#5,d2
0001CE8C 47F1 2000                  		lea	(a1,d2.w),a3
0001CE90 2C9B                       		move.l	(a3)+,(a6)
0001CE92 2C9B                       		move.l	(a3)+,(a6)
0001CE94 2C9B                       		move.l	(a3)+,(a6)
0001CE96 2C9B                       		move.l	(a3)+,(a6)
0001CE98 2C9B                       		move.l	(a3)+,(a6)
0001CE9A 2C9B                       		move.l	(a3)+,(a6)
0001CE9C 2C9B                       		move.l	(a3)+,(a6)
0001CE9E 2C9B                       		move.l	(a3)+,(a6)
0001CEA0 4841                       		swap	d1
0001CEA2 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CEA6                            
0001CEA6 4E75                       		rts	
0001CEA8                            ; End of function HudDb_XY2
0001CEA8                            
0001CEA8                            ; ---------------------------------------------------------------------------
0001CEA8                            ; Subroutine to	load rings numbers patterns
0001CEA8                            ; ---------------------------------------------------------------------------
0001CEA8                            
0001CEA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEA8                            
0001CEA8                            
0001CEA8                            Hud_Rings:				; XREF: HudUpdate
0001CEA8 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CEAE 7C02                       		moveq	#2,d6
0001CEB0 6000                       		bra.s	Hud_LoadArt
0001CEB2                            ; End of function Hud_Rings
0001CEB2                            
0001CEB2                            ; ---------------------------------------------------------------------------
0001CEB2                            ; Subroutine to	load score numbers patterns
0001CEB2                            ; ---------------------------------------------------------------------------
0001CEB2                            
0001CEB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEB2                            
0001CEB2                            
0001CEB2                            Hud_Score:				; XREF: HudUpdate
0001CEB2 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CEB8 7C05                       		moveq	#5,d6
0001CEBA                            
0001CEBA                            Hud_LoadArt:
0001CEBA 7800                       		moveq	#0,d4
0001CEBC 43FA 0000                  		lea	Art_Hud(pc),a1
0001CEC0                            
0001CEC0                            Hud_ScoreLoop:
0001CEC0 7400                       		moveq	#0,d2
0001CEC2 261A                       		move.l	(a2)+,d3
0001CEC4                            
0001CEC4                            loc_1C8EC:
0001CEC4 9283                       		sub.l	d3,d1
0001CEC6 6500                       		bcs.s	loc_1C8F4
0001CEC8 5242                       		addq.w	#1,d2
0001CECA 60F8                       		bra.s	loc_1C8EC
0001CECC                            ; ===========================================================================
0001CECC                            
0001CECC                            loc_1C8F4:
0001CECC D283                       		add.l	d3,d1
0001CECE 4A42                       		tst.w	d2
0001CED0 6700                       		beq.s	loc_1C8FE
0001CED2 383C 0001                  		move.w	#1,d4
0001CED6                            
0001CED6                            loc_1C8FE:
0001CED6 4A44                       		tst.w	d4
0001CED8 6700                       		beq.s	loc_1C92C
0001CEDA ED4A                       		lsl.w	#6,d2
0001CEDC 2D40 0004                  		move.l	d0,4(a6)
0001CEE0 47F1 2000                  		lea	(a1,d2.w),a3
0001CEE4 2C9B                       		move.l	(a3)+,(a6)
0001CEE6 2C9B                       		move.l	(a3)+,(a6)
0001CEE8 2C9B                       		move.l	(a3)+,(a6)
0001CEEA 2C9B                       		move.l	(a3)+,(a6)
0001CEEC 2C9B                       		move.l	(a3)+,(a6)
0001CEEE 2C9B                       		move.l	(a3)+,(a6)
0001CEF0 2C9B                       		move.l	(a3)+,(a6)
0001CEF2 2C9B                       		move.l	(a3)+,(a6)
0001CEF4 2C9B                       		move.l	(a3)+,(a6)
0001CEF6 2C9B                       		move.l	(a3)+,(a6)
0001CEF8 2C9B                       		move.l	(a3)+,(a6)
0001CEFA 2C9B                       		move.l	(a3)+,(a6)
0001CEFC 2C9B                       		move.l	(a3)+,(a6)
0001CEFE 2C9B                       		move.l	(a3)+,(a6)
0001CF00 2C9B                       		move.l	(a3)+,(a6)
0001CF02 2C9B                       		move.l	(a3)+,(a6)
0001CF04                            
0001CF04                            loc_1C92C:
0001CF04 0680 0040 0000             		addi.l	#$400000,d0
0001CF0A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CF0E                            
0001CF0E 4E75                       		rts	
0001CF10                            ; End of function Hud_Score
0001CF10                            
0001CF10                            ; ---------------------------------------------------------------------------
0001CF10                            ; Subroutine to	load countdown numbers on the continue screen
0001CF10                            ; ---------------------------------------------------------------------------
0001CF10                            
0001CF10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF10                            
0001CF10                            
0001CF10                            ContScrCounter:				; XREF: ContinueScreen
0001CF10 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CF1A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF20 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CF26 7C01                       		moveq	#1,d6
0001CF28 7800                       		moveq	#0,d4
0001CF2A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CF2E                            
0001CF2E                            ContScr_Loop:
0001CF2E 7400                       		moveq	#0,d2
0001CF30 261A                       		move.l	(a2)+,d3
0001CF32                            
0001CF32                            loc_1C95A:
0001CF32 9283                       		sub.l	d3,d1
0001CF34 6500                       		bcs.s	loc_1C962
0001CF36 5242                       		addq.w	#1,d2
0001CF38 60F8                       		bra.s	loc_1C95A
0001CF3A                            ; ===========================================================================
0001CF3A                            
0001CF3A                            loc_1C962:
0001CF3A D283                       		add.l	d3,d1
0001CF3C ED4A                       		lsl.w	#6,d2
0001CF3E 47F1 2000                  		lea	(a1,d2.w),a3
0001CF42 2C9B                       		move.l	(a3)+,(a6)
0001CF44 2C9B                       		move.l	(a3)+,(a6)
0001CF46 2C9B                       		move.l	(a3)+,(a6)
0001CF48 2C9B                       		move.l	(a3)+,(a6)
0001CF4A 2C9B                       		move.l	(a3)+,(a6)
0001CF4C 2C9B                       		move.l	(a3)+,(a6)
0001CF4E 2C9B                       		move.l	(a3)+,(a6)
0001CF50 2C9B                       		move.l	(a3)+,(a6)
0001CF52 2C9B                       		move.l	(a3)+,(a6)
0001CF54 2C9B                       		move.l	(a3)+,(a6)
0001CF56 2C9B                       		move.l	(a3)+,(a6)
0001CF58 2C9B                       		move.l	(a3)+,(a6)
0001CF5A 2C9B                       		move.l	(a3)+,(a6)
0001CF5C 2C9B                       		move.l	(a3)+,(a6)
0001CF5E 2C9B                       		move.l	(a3)+,(a6)
0001CF60 2C9B                       		move.l	(a3)+,(a6)
0001CF62 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CF66                            
0001CF66 4E75                       		rts	
0001CF68                            ; End of function ContScrCounter
0001CF68                            
0001CF68                            ; ===========================================================================
0001CF68                            ; ---------------------------------------------------------------------------
0001CF68                            ; HUD counter sizes
0001CF68                            ; ---------------------------------------------------------------------------
0001CF68 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CF6C 0000 2710                  Hud_10000:	dc.l 10000
0001CF70 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CF74 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CF78 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CF7C 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CF80                            
0001CF80                            ; ---------------------------------------------------------------------------
0001CF80                            ; Subroutine to	load time numbers patterns
0001CF80                            ; ---------------------------------------------------------------------------
0001CF80                            
0001CF80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF80                            
0001CF80                            
0001CF80                            Hud_Mins:				; XREF: Hud_ChkTime
0001CF80 45F9 0001 CF7C             		lea	(Hud_1).l,a2
0001CF86 7C00                       		moveq	#0,d6
0001CF88 6000                       		bra.s	loc_1C9BA
0001CF8A                            ; End of function Hud_Mins
0001CF8A                            
0001CF8A                            
0001CF8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF8A                            
0001CF8A                            
0001CF8A                            Hud_Secs:				; XREF: Hud_ChkTime
0001CF8A 45F9 0001 CF78             		lea	(Hud_10).l,a2
0001CF90 7C01                       		moveq	#1,d6
0001CF92                            
0001CF92                            loc_1C9BA:
0001CF92 7800                       		moveq	#0,d4
0001CF94 43FA 0000                  		lea	Art_Hud(pc),a1
0001CF98                            
0001CF98                            Hud_TimeLoop:
0001CF98 7400                       		moveq	#0,d2
0001CF9A 261A                       		move.l	(a2)+,d3
0001CF9C                            
0001CF9C                            loc_1C9C4:
0001CF9C 9283                       		sub.l	d3,d1
0001CF9E 6500                       		bcs.s	loc_1C9CC
0001CFA0 5242                       		addq.w	#1,d2
0001CFA2 60F8                       		bra.s	loc_1C9C4
0001CFA4                            ; ===========================================================================
0001CFA4                            
0001CFA4                            loc_1C9CC:
0001CFA4 D283                       		add.l	d3,d1
0001CFA6 4A42                       		tst.w	d2
0001CFA8 6700                       		beq.s	loc_1C9D6
0001CFAA 383C 0001                  		move.w	#1,d4
0001CFAE                            
0001CFAE                            loc_1C9D6:
0001CFAE ED4A                       		lsl.w	#6,d2
0001CFB0 2D40 0004                  		move.l	d0,4(a6)
0001CFB4 47F1 2000                  		lea	(a1,d2.w),a3
0001CFB8 2C9B                       		move.l	(a3)+,(a6)
0001CFBA 2C9B                       		move.l	(a3)+,(a6)
0001CFBC 2C9B                       		move.l	(a3)+,(a6)
0001CFBE 2C9B                       		move.l	(a3)+,(a6)
0001CFC0 2C9B                       		move.l	(a3)+,(a6)
0001CFC2 2C9B                       		move.l	(a3)+,(a6)
0001CFC4 2C9B                       		move.l	(a3)+,(a6)
0001CFC6 2C9B                       		move.l	(a3)+,(a6)
0001CFC8 2C9B                       		move.l	(a3)+,(a6)
0001CFCA 2C9B                       		move.l	(a3)+,(a6)
0001CFCC 2C9B                       		move.l	(a3)+,(a6)
0001CFCE 2C9B                       		move.l	(a3)+,(a6)
0001CFD0 2C9B                       		move.l	(a3)+,(a6)
0001CFD2 2C9B                       		move.l	(a3)+,(a6)
0001CFD4 2C9B                       		move.l	(a3)+,(a6)
0001CFD6 2C9B                       		move.l	(a3)+,(a6)
0001CFD8 0680 0040 0000             		addi.l	#$400000,d0
0001CFDE 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CFE2                            
0001CFE2 4E75                       		rts	
0001CFE4                            ; End of function Hud_Secs
0001CFE4                            
0001CFE4                            ; ---------------------------------------------------------------------------
0001CFE4                            ; Subroutine to	load time/ring bonus numbers patterns
0001CFE4                            ; ---------------------------------------------------------------------------
0001CFE4                            
0001CFE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFE4                            
0001CFE4                            
0001CFE4                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CFE4 45F9 0001 CF70             		lea	(Hud_1000).l,a2
0001CFEA 7C03                       		moveq	#3,d6
0001CFEC 7800                       		moveq	#0,d4
0001CFEE 43FA 0000                  		lea	Art_Hud(pc),a1
0001CFF2                            
0001CFF2                            Hud_BonusLoop:
0001CFF2 7400                       		moveq	#0,d2
0001CFF4 261A                       		move.l	(a2)+,d3
0001CFF6                            
0001CFF6                            loc_1CA1E:
0001CFF6 9283                       		sub.l	d3,d1
0001CFF8 6500                       		bcs.s	loc_1CA26
0001CFFA 5242                       		addq.w	#1,d2
0001CFFC 60F8                       		bra.s	loc_1CA1E
0001CFFE                            ; ===========================================================================
0001CFFE                            
0001CFFE                            loc_1CA26:
0001CFFE D283                       		add.l	d3,d1
0001D000 4A42                       		tst.w	d2
0001D002 6700                       		beq.s	loc_1CA30
0001D004 383C 0001                  		move.w	#1,d4
0001D008                            
0001D008                            loc_1CA30:
0001D008 4A44                       		tst.w	d4
0001D00A 6700                       		beq.s	Hud_ClrBonus
0001D00C ED4A                       		lsl.w	#6,d2
0001D00E 47F1 2000                  		lea	(a1,d2.w),a3
0001D012 2C9B                       		move.l	(a3)+,(a6)
0001D014 2C9B                       		move.l	(a3)+,(a6)
0001D016 2C9B                       		move.l	(a3)+,(a6)
0001D018 2C9B                       		move.l	(a3)+,(a6)
0001D01A 2C9B                       		move.l	(a3)+,(a6)
0001D01C 2C9B                       		move.l	(a3)+,(a6)
0001D01E 2C9B                       		move.l	(a3)+,(a6)
0001D020 2C9B                       		move.l	(a3)+,(a6)
0001D022 2C9B                       		move.l	(a3)+,(a6)
0001D024 2C9B                       		move.l	(a3)+,(a6)
0001D026 2C9B                       		move.l	(a3)+,(a6)
0001D028 2C9B                       		move.l	(a3)+,(a6)
0001D02A 2C9B                       		move.l	(a3)+,(a6)
0001D02C 2C9B                       		move.l	(a3)+,(a6)
0001D02E 2C9B                       		move.l	(a3)+,(a6)
0001D030 2C9B                       		move.l	(a3)+,(a6)
0001D032                            
0001D032                            loc_1CA5A:
0001D032 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D036                            
0001D036 4E75                       		rts	
0001D038                            ; ===========================================================================
0001D038                            
0001D038                            Hud_ClrBonus:
0001D038 7A0F                       		moveq	#$F,d5
0001D03A                            
0001D03A                            Hud_ClrBonusLoop:
0001D03A 2CBC 0000 0000             		move.l	#0,(a6)
0001D040 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D044                            
0001D044 60EC                       		bra.s	loc_1CA5A
0001D046                            ; End of function Hud_TimeRingBonus
0001D046                            
0001D046                            ; ---------------------------------------------------------------------------
0001D046                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D046                            ; ---------------------------------------------------------------------------
0001D046                            
0001D046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D046                            
0001D046                            
0001D046                            Hud_Lives:				; XREF: Hud_ChkLives
0001D046 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D04C 7200                       		moveq	#0,d1
0001D04E 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D052 45F9 0001 CF78             		lea	(Hud_10).l,a2
0001D058 7C01                       		moveq	#1,d6
0001D05A 7800                       		moveq	#0,d4
0001D05C 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D060                            
0001D060                            Hud_LivesLoop:
0001D060 2D40 0004                  		move.l	d0,4(a6)
0001D064 7400                       		moveq	#0,d2
0001D066 261A                       		move.l	(a2)+,d3
0001D068                            
0001D068                            loc_1CA90:
0001D068 9283                       		sub.l	d3,d1
0001D06A 6500                       		bcs.s	loc_1CA98
0001D06C 5242                       		addq.w	#1,d2
0001D06E 60F8                       		bra.s	loc_1CA90
0001D070                            ; ===========================================================================
0001D070                            
0001D070                            loc_1CA98:
0001D070 D283                       		add.l	d3,d1
0001D072 4A42                       		tst.w	d2
0001D074 6700                       		beq.s	loc_1CAA2
0001D076 383C 0001                  		move.w	#1,d4
0001D07A                            
0001D07A                            loc_1CAA2:
0001D07A 4A44                       		tst.w	d4
0001D07C 6700                       		beq.s	Hud_ClrLives
0001D07E                            
0001D07E                            loc_1CAA6:
0001D07E EB4A                       		lsl.w	#5,d2
0001D080 47F1 2000                  		lea	(a1,d2.w),a3
0001D084 2C9B                       		move.l	(a3)+,(a6)
0001D086 2C9B                       		move.l	(a3)+,(a6)
0001D088 2C9B                       		move.l	(a3)+,(a6)
0001D08A 2C9B                       		move.l	(a3)+,(a6)
0001D08C 2C9B                       		move.l	(a3)+,(a6)
0001D08E 2C9B                       		move.l	(a3)+,(a6)
0001D090 2C9B                       		move.l	(a3)+,(a6)
0001D092 2C9B                       		move.l	(a3)+,(a6)
0001D094                            
0001D094                            loc_1CABC:
0001D094 0680 0040 0000             		addi.l	#$400000,d0
0001D09A 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D09E                            
0001D09E 4E75                       		rts	
0001D0A0                            ; ===========================================================================
0001D0A0                            
0001D0A0                            Hud_ClrLives:
0001D0A0 4A46                       		tst.w	d6
0001D0A2 67DA                       		beq.s	loc_1CAA6
0001D0A4 7A07                       		moveq	#7,d5
0001D0A6                            
0001D0A6                            Hud_ClrLivesLoop:
0001D0A6 2CBC 0000 0000             		move.l	#0,(a6)
0001D0AC 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D0B0 60E2                       		bra.s	loc_1CABC
0001D0B2                            ; End of function Hud_Lives
0001D0B2                            
0001D0B2                            ; ===========================================================================
0001D0B2                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D3B2                            		even
0001D3B2                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D4F2                            		even
0001D4F2                            ; ===========================================================================
0001D4F2                            ; ---------------------------------------------------------------------------
0001D4F2                            ; When debug mode is currently in use
0001D4F2                            ; ---------------------------------------------------------------------------
0001D4F2                            
0001D4F2                            DebugMode:				; XREF: Obj01; Obj09
0001D4F2 7000                       		moveq	#0,d0
0001D4F4 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D4F8 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D4FC 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D500                            ; ===========================================================================
0001D500 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D502 0000                       		dc.w Debug_Skip-Debug_Index
0001D504                            ; ===========================================================================
0001D504                            
0001D504                            Debug_Main:				; XREF: Debug_Index
0001D504 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D508 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D50E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D514 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D51A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D520 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D526 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D52C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D532 117C 0000 001A             		move.b	#0,$1A(a0)
0001D538 117C 0000 001C             		move.b	#0,$1C(a0)
0001D53E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D544 6600                       		bne.s	Debug_Zone	; if not, branch
0001D546 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D54C 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D552 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D554 6000                       		bra.s	Debug_UseList
0001D556                            ; ===========================================================================
0001D556                            
0001D556                            Debug_Zone:
0001D556 7000                       		moveq	#0,d0
0001D558 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D55C                            
0001D55C                            Debug_UseList:
0001D55C 45F9 0000 0000             		lea	(DebugList).l,a2
0001D562 D040                       		add.w	d0,d0
0001D564 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D568 3C1A                       		move.w	(a2)+,d6
0001D56A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D56E 6200                       		bhi.s	loc_1CF9E
0001D570 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D576                            
0001D576                            loc_1CF9E:
0001D576 6100 0000                  		bsr.w	Debug_ShowItem
0001D57A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D580 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D586                            
0001D586                            Debug_Skip:				; XREF: Debug_Index
0001D586 7006                       		moveq	#6,d0
0001D588 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D58E 6700                       		beq.s	loc_1CFBE
0001D590 7000                       		moveq	#0,d0
0001D592 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D596                            
0001D596                            loc_1CFBE:
0001D596 45F9 0000 0000             		lea	(DebugList).l,a2
0001D59C D040                       		add.w	d0,d0
0001D59E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5A2 3C1A                       		move.w	(a2)+,d6
0001D5A4 6100 0000                  		bsr.w	Debug_Control
0001D5A8 4EF9 0000 DB90             		jmp	DisplaySprite
0001D5AE                            
0001D5AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5AE                            
0001D5AE                            
0001D5AE                            Debug_Control:
0001D5AE 7800                       		moveq	#0,d4
0001D5B0 323C 0001                  		move.w	#1,d1
0001D5B4 1838 F605                  		move.b	($FFFFF605).w,d4
0001D5B8 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D5BC 6600                       		bne.s	loc_1D018	; if yes, branch
0001D5BE 1038 F604                  		move.b	($FFFFF604).w,d0
0001D5C2 0240 000F                  		andi.w	#$F,d0
0001D5C6 6600                       		bne.s	loc_1D000
0001D5C8 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5CE 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D5D4 6000 0000                  		bra.w	Debug_BackItem
0001D5D8                            ; ===========================================================================
0001D5D8                            
0001D5D8                            loc_1D000:
0001D5D8 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D5DC 6600                       		bne.s	loc_1D01C
0001D5DE 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D5E4 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D5E8 6600                       		bne.s	loc_1D018
0001D5EA 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D5F0                            
0001D5F0                            loc_1D018:
0001D5F0 1838 F604                  		move.b	($FFFFF604).w,d4
0001D5F4                            
0001D5F4                            loc_1D01C:
0001D5F4 7200                       		moveq	#0,d1
0001D5F6 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D5FA 5241                       		addq.w	#1,d1
0001D5FC 4841                       		swap	d1
0001D5FE E881                       		asr.l	#4,d1
0001D600 2428 000C                  		move.l	$C(a0),d2
0001D604 2628 0008                  		move.l	8(a0),d3
0001D608 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D60C 6700                       		beq.s	loc_1D03C	; if not, branch
0001D60E 9481                       		sub.l	d1,d2
0001D610 6400                       		bcc.s	loc_1D03C
0001D612 7400                       		moveq	#0,d2
0001D614                            
0001D614                            loc_1D03C:
0001D614 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D618 6700                       		beq.s	loc_1D052	; if not, branch
0001D61A D481                       		add.l	d1,d2
0001D61C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D622 6500                       		bcs.s	loc_1D052
0001D624 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D62A                            
0001D62A                            loc_1D052:
0001D62A 0804 0002                  		btst	#2,d4
0001D62E 6700                       		beq.s	loc_1D05E
0001D630 9681                       		sub.l	d1,d3
0001D632 6400                       		bcc.s	loc_1D05E
0001D634 7600                       		moveq	#0,d3
0001D636                            
0001D636                            loc_1D05E:
0001D636 0804 0003                  		btst	#3,d4
0001D63A 6700                       		beq.s	loc_1D066
0001D63C D681                       		add.l	d1,d3
0001D63E                            
0001D63E                            loc_1D066:
0001D63E 2142 000C                  		move.l	d2,$C(a0)
0001D642 2143 0008                  		move.l	d3,8(a0)
0001D646                            
0001D646                            Debug_BackItem:
0001D646 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D64C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D64E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D654 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D656 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D65A 6400                       		bcc.s	Debug_NoLoop
0001D65C DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D660 6000                       		bra.s	Debug_NoLoop
0001D662                            ; ===========================================================================
0001D662                            
0001D662                            Debug_NextItem:
0001D662 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D668 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D66A 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D66E BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D672 6200                       		bhi.s	Debug_NoLoop
0001D674 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D67A                            
0001D67A                            Debug_NoLoop:
0001D67A 6000 0000                  		bra.w	Debug_ShowItem
0001D67E                            ; ===========================================================================
0001D67E                            
0001D67E                            Debug_MakeItem:
0001D67E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D684 6700                       		beq.s	Debug_Exit	; if not, branch
0001D686 4EB9 0000 E016             		jsr	SingleObjLoad
0001D68C 6600                       		bne.s	Debug_Exit
0001D68E 3368 0008 0008             		move.w	8(a0),8(a1)
0001D694 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D69A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D69E 1368 0001 0001             		move.b	1(a0),1(a1)
0001D6A4 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D6AA 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D6B0 7000                       		moveq	#0,d0
0001D6B2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D6B6 E748                       		lsl.w	#3,d0
0001D6B8 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D6BE 4E75                       		rts	
0001D6C0                            ; ===========================================================================
0001D6C0                            
0001D6C0                            Debug_Exit:
0001D6C0 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D6C6 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D6C8 7000                       		moveq	#0,d0
0001D6CA 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D6CE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D6D6 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D6DC 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D6E0 3140 000A                  		move.w	d0,$A(a0)
0001D6E4 3140 000E                  		move.w	d0,$E(a0)
0001D6E8 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D6EE 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D6F4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D6FA 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D6FC 4278 F780                  		clr.w	($FFFFF780).w
0001D700 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D706 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D70E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D714 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D71A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D720 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D726                            
0001D726                            Debug_DoNothing:
0001D726 4E75                       		rts	
0001D728                            ; End of function Debug_Control
0001D728                            
0001D728                            
0001D728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D728                            
0001D728                            
0001D728                            Debug_ShowItem:				; XREF: Debug_Main
0001D728 7000                       		moveq	#0,d0
0001D72A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D72E E748                       		lsl.w	#3,d0
0001D730 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D736 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D73C 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D742 4E75                       		rts	
0001D744                            ; End of function Debug_ShowItem
0001D744                            
0001D744                            ; ===========================================================================
0001D744                            ; ---------------------------------------------------------------------------
0001D744                            ; Debug	list pointers
0001D744                            ; ---------------------------------------------------------------------------
0001D744                            DebugList:
0001D744                            	include "_inc\Debug list pointers.asm"
0001D744                            ; ---------------------------------------------------------------------------
0001D744                            ; Debug	list pointers
0001D744                            ; ---------------------------------------------------------------------------
0001D744 0000                       	dc.w Debug_GHZ-DebugList
0001D746 0000                       	dc.w Debug_LZ-DebugList
0001D748 0000                       	dc.w Debug_MZ-DebugList
0001D74A 0000                       	dc.w Debug_SLZ-DebugList
0001D74C 0000                       	dc.w Debug_SYZ-DebugList
0001D74E 0000                       	dc.w Debug_SBZ-DebugList
0001D750 0000                       	dc.w Debug_Ending-DebugList
0001D750 0000                       	dc.w Debug_Ending-DebugList
0001D752                            
0001D752                            ; ---------------------------------------------------------------------------
0001D752                            ; Debug	list - Green Hill
0001D752                            ; ---------------------------------------------------------------------------
0001D752                            Debug_GHZ:
0001D752                            	include "_inc\Debug list - GHZ.asm"
0001D752                            ; ---------------------------------------------------------------------------
0001D752                            ; Debug	list - Green Hill
0001D752                            ; ---------------------------------------------------------------------------
0001D752 0010                       	dc.w $10			; number of items in list
0001D754 2500 A404                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D758 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D75C 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D760 0000 0680                  	dc.b 0,	0, 6, $80
0001D764 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001D768 0000 0400                  	dc.b 0,	0, 4, 0
0001D76C 2200 9EB8                  	dc.l Map_obj22+$22000000
0001D770 0000 0444                  	dc.b 0,	0, 4, $44
0001D774 2B00 B0B4                  	dc.l Map_obj2B+$2B000000
0001D778 0000 047B                  	dc.b 0,	0, 4, $7B
0001D77C 3600 D578                  	dc.l Map_obj36+$36000000
0001D780 0000 051B                  	dc.b 0,	0, 5, $1B
0001D784 1800 8586                  	dc.l Map_obj18+$18000000
0001D788 0000 4000                  	dc.b 0,	0, $40,	0
0001D78C 3B00 D69E                  	dc.l Map_obj3B+$3B000000
0001D790 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D794 4000 FD2A                  	dc.l Map_obj40+$40000000
0001D798 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D79C 4100 E2A4                  	dc.l Map_obj41+$41000000
0001D7A0 0000 0523                  	dc.b 0,	0, 5, $23
0001D7A4 4200 E4CA                  	dc.l Map_obj42+$42000000
0001D7A8 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D7AC 4400 E7D8                  	dc.l Map_obj44+$44000000
0001D7B0 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D7B4 1900 85F4                  	dc.l Map_obj48+$19000000
0001D7B8 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D7BC 7901 76BA                  	dc.l Map_obj79+$79000000
0001D7C0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D7C4 4B00 A444                  	dc.l Map_obj4B+$4B000000
0001D7C8 0000 2400                  	dc.b 0,	0, $24,	0
0001D7CC 7D01 780A                  	dc.l Map_obj7D+$7D000000
0001D7D0 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D7D4                            	even
0001D7D4                            	even
0001D7D4                            
0001D7D4                            ; ---------------------------------------------------------------------------
0001D7D4                            ; Debug	list - Labyrinth
0001D7D4                            ; ---------------------------------------------------------------------------
0001D7D4                            Debug_LZ:
0001D7D4                            	include "_inc\Debug list - LZ.asm"
0001D7D4                            ; ---------------------------------------------------------------------------
0001D7D4                            ; Debug	list - Labyrinth
0001D7D4                            ; ---------------------------------------------------------------------------
0001D7D4 0019                       	dc.w $19
0001D7D6 2500 A404                  	dc.l Map_obj25+$25000000
0001D7DA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D7DE 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D7E2 0000 0680                  	dc.b 0,	0, 6, $80
0001D7E6 4100 E2A4                  	dc.l Map_obj41+$41000000
0001D7EA 0000 0523                  	dc.b 0,	0, 5, $23
0001D7EE 2C00 B15A                  	dc.l Map_obj2C+$2C000000
0001D7F2 0800 2486                  	dc.b 8,	0, $24,	$86
0001D7F6 2D00 B346                  	dc.l Map_obj2D+$2D000000
0001D7FA 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D7FE 1601 24FE                  	dc.l Map_obj16+$16000000
0001D802 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D806 1601 24FE                  	dc.l Map_obj16+$16000000
0001D80A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D80E 3300 C7C4                  	dc.l Map_obj33+$33000000
0001D812 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D816 3200 C384                  	dc.l Map_obj32+$32000000
0001D81A 0000 0513                  	dc.b 0,	0, 5, $13
0001D81E 3600 D578                  	dc.l Map_obj36+$36000000
0001D822 0000 051B                  	dc.b 0,	0, 5, $1B
0001D826 5201 0620                  	dc.l Map_obj52a+$52000000
0001D82A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D82E 6101 2726                  	dc.l Map_obj61+$61000000
0001D832 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D836 6101 2726                  	dc.l Map_obj61+$61000000
0001D83A 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D83E 6101 2726                  	dc.l Map_obj61+$61000000
0001D842 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D846 6201 287A                  	dc.l Map_obj62+$62000000
0001D84A 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D84E 6101 2726                  	dc.l Map_obj61+$61000000
0001D852 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D856 6101 2726                  	dc.l Map_obj61+$61000000
0001D85A 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D85E 6301 2BDC                  	dc.l Map_obj63+$63000000
0001D862 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D866 6001 2448                  	dc.l Map_obj60+$60000000
0001D86A 0000 0467                  	dc.b 0,	0, 4, $67
0001D86E 6401 2F22                  	dc.l Map_obj64+$64000000
0001D872 8413 8348                  	dc.b $84, $13, $83, $48
0001D876 6501 30AA                  	dc.l Map_obj65+$65000000
0001D87A 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D87E 6501 30AA                  	dc.l Map_obj65+$65000000
0001D882 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D886 0B01 1898                  	dc.l Map_obj0B+$B000000
0001D88A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D88E 0C01 1968                  	dc.l Map_obj0C+$C000000
0001D892 0200 4328                  	dc.b 2,	0, $43,	$28
0001D896 7901 76BA                  	dc.l Map_obj79+$79000000
0001D89A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D89E                            	even
0001D89E                            	even
0001D89E                            
0001D89E                            ; ---------------------------------------------------------------------------
0001D89E                            ; Debug	list - Marble
0001D89E                            ; ---------------------------------------------------------------------------
0001D89E                            Debug_MZ:
0001D89E                            	include "_inc\Debug list - MZ.asm"
0001D89E                            ; ---------------------------------------------------------------------------
0001D89E                            ; Debug	list - Marble
0001D89E                            ; ---------------------------------------------------------------------------
0001D89E 0012                       	dc.w $12
0001D8A0 2500 A404                  	dc.l Map_obj25+$25000000
0001D8A4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D8A8 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D8AC 0000 0680                  	dc.b 0,	0, 6, $80
0001D8B0 2200 9EB8                  	dc.l Map_obj22+$22000000
0001D8B4 0000 0444                  	dc.b 0,	0, 4, $44
0001D8B8 3600 D578                  	dc.l Map_obj36+$36000000
0001D8BC 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8C0 4100 E2A4                  	dc.l Map_obj41+$41000000
0001D8C4 0000 0523                  	dc.b 0,	0, 5, $23
0001D8C8 1300 B854                  	dc.l Map_obj14+$13000000
0001D8CC 0000 0345                  	dc.b 0,	0, 3, $45
0001D8D0 4600 EE8A                  	dc.l Map_obj46+$46000000
0001D8D4 0000 4000                  	dc.b 0,	0, $40,	0
0001D8D8 4C00 F7D6                  	dc.l Map_obj4C+$4C000000
0001D8DC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D8E0 4E00 FABA                  	dc.l Map_obj4E+$4E000000
0001D8E4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D8E8 3300 C7C4                  	dc.l Map_obj33+$33000000
0001D8EC 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D8F0 5000 FEB8                  	dc.l Map_obj50+$50000000
0001D8F4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D8F8 5101 0354                  	dc.l Map_obj51+$51000000
0001D8FC 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D900 5201 05CA                  	dc.l Map_obj52+$52000000
0001D904 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D908 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D90C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D910 5400 F79C                  	dc.l Map_obj54+$54000000
0001D914 0000 8680                  	dc.b 0,	0, $86,	$80
0001D918 5501 07BE                  	dc.l Map_obj55+$55000000
0001D91C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D920 7801 7334                  	dc.l Map_obj78+$78000000
0001D924 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D928 7901 76BA                  	dc.l Map_obj79+$79000000
0001D92C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D930                            	even
0001D930                            	even
0001D930                            
0001D930                            ; ---------------------------------------------------------------------------
0001D930                            ; Debug	list - Star Light
0001D930                            ; ---------------------------------------------------------------------------
0001D930                            Debug_SLZ:
0001D930                            	include "_inc\Debug list - SLZ.asm"
0001D930                            ; ---------------------------------------------------------------------------
0001D930                            ; Debug	list - Star Light
0001D930                            ; ---------------------------------------------------------------------------
0001D930 000F                       	dc.w $F
0001D932 2500 A404                  	dc.l Map_obj25+$25000000
0001D936 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D93A 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D93E 0000 0680                  	dc.b 0,	0, 6, $80
0001D942 5901 12C0                  	dc.l Map_obj59+$59000000
0001D946 0000 4000                  	dc.b 0,	0, $40,	0
0001D94A 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D94E 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D952 1800 85E4                  	dc.l Map_obj18b+$18000000
0001D956 0000 4000                  	dc.b 0,	0, $40,	0
0001D95A 5A01 13FA                  	dc.l Map_obj5A+$5A000000
0001D95E 0000 4000                  	dc.b 0,	0, $40,	0
0001D962 5B01 15B2                  	dc.l Map_obj5B+$5B000000
0001D966 0000 4000                  	dc.b 0,	0, $40,	0
0001D96A 5D01 1B82                  	dc.l Map_obj5D+$5D000000
0001D96E 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D972 5E01 1F14                  	dc.l Map_obj5E+$5E000000
0001D976 0000 0374                  	dc.b 0,	0, 3, $74
0001D97A 4100 E2A4                  	dc.l Map_obj41+$41000000
0001D97E 0000 0523                  	dc.b 0,	0, 5, $23
0001D982 1300 B854                  	dc.l Map_obj14+$13000000
0001D986 0000 0480                  	dc.b 0,	0, 4, $80
0001D98A 1C00 8C9C                  	dc.l Map_obj1C+$1C000000
0001D98E 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D992 5F01 2192                  	dc.l Map_obj5F+$5F000000
0001D996 0000 0400                  	dc.b 0,	0, 4, 0
0001D99A 6001 2448                  	dc.l Map_obj60+$60000000
0001D99E 0000 2429                  	dc.b 0,	0, $24,	$29
0001D9A2 7901 76BA                  	dc.l Map_obj79+$79000000
0001D9A6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9AA                            	even
0001D9AA                            	even
0001D9AA                            
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            ; Debug	list - Spring Yard
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            Debug_SYZ:
0001D9AA                            	include "_inc\Debug list - SYZ.asm"
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            ; Debug	list - Spring Yard
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA 000F                       	dc.w $F
0001D9AC 2500 A404                  	dc.l Map_obj25+$25000000
0001D9B0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9B4 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D9B8 0000 0680                  	dc.b 0,	0, 6, $80
0001D9BC 3600 D578                  	dc.l Map_obj36+$36000000
0001D9C0 0000 051B                  	dc.b 0,	0, 5, $1B
0001D9C4 4100 E2A4                  	dc.l Map_obj41+$41000000
0001D9C8 0000 0523                  	dc.b 0,	0, 5, $23
0001D9CC 4300 E72A                  	dc.l Map_obj43+$43000000
0001D9D0 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D9D4 1200 EF08                  	dc.l Map_obj12+$12000000
0001D9D8 0000 0000                  	dc.b 0,	0, 0, 0
0001D9DC 4700 F084                  	dc.l Map_obj47+$47000000
0001D9E0 0000 0380                  	dc.b 0,	0, 3, $80
0001D9E4 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001D9E8 0000 0400                  	dc.b 0,	0, 4, 0
0001D9EC 2200 9EB8                  	dc.l Map_obj22+$22000000
0001D9F0 0000 0444                  	dc.b 0,	0, 4, $44
0001D9F4 5000 FEB8                  	dc.l Map_obj50+$50000000
0001D9F8 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D9FC 1800 85D2                  	dc.l Map_obj18a+$18000000
0001DA00 0000 4000                  	dc.b 0,	0, $40,	0
0001DA04 5601 0C80                  	dc.l Map_obj56+$56000000
0001DA08 0000 4000                  	dc.b 0,	0, $40,	0
0001DA0C 3200 C384                  	dc.l Map_obj32+$32000000
0001DA10 0000 0513                  	dc.b 0,	0, 5, $13
0001DA14 7801 7334                  	dc.l Map_obj78+$78000000
0001DA18 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA1C 7901 76BA                  	dc.l Map_obj79+$79000000
0001DA20 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA24                            	even
0001DA24                            	even
0001DA24                            
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24                            ; Debug	list - Scrap Brain
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24                            Debug_SBZ:
0001DA24                            	include "_inc\Debug list - SBZ.asm"
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24                            ; Debug	list - Scrap Brain
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24 001D                       	dc.w $1D
0001DA26 2500 A404                  	dc.l Map_obj25+$25000000
0001DA2A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA2E 2600 AA0A                  	dc.l Map_obj26+$26000000
0001DA32 0000 0680                  	dc.b 0,	0, 6, $80
0001DA36 5F01 2192                  	dc.l Map_obj5F+$5F000000
0001DA3A 0000 0400                  	dc.b 0,	0, 4, 0
0001DA3E 6001 2448                  	dc.l Map_obj60+$60000000
0001DA42 0000 0429                  	dc.b 0,	0, 4, $29
0001DA46 7801 7334                  	dc.l Map_obj78+$78000000
0001DA4A 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DA4E 1501 101C                  	dc.l Map_obj15b+$15000000
0001DA52 0702 4391                  	dc.b 7,	2, $43,	$91
0001DA56 6701 5C58                  	dc.l Map_obj67+$67000000
0001DA5A E000 C344                  	dc.b $E0, 0, $C3, $44
0001DA5E 5201 05CA                  	dc.l Map_obj52+$52000000
0001DA62 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DA66 3200 C384                  	dc.l Map_obj32+$32000000
0001DA6A 0000 0513                  	dc.b 0,	0, 5, $13
0001DA6E 6901 5EB2                  	dc.l Map_obj69+$69000000
0001DA72 0300 4492                  	dc.b 3,	0, $44,	$92
0001DA76 6901 5F0C                  	dc.l Map_obj69a+$69000000
0001DA7A 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DA7E 6A01 616A                  	dc.l Map_obj6A+$6A000000
0001DA82 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DA86 5300 8B8C                  	dc.l Map_obj53+$53000000
0001DA8A 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DA8E 5201 05CA                  	dc.l Map_obj52+$52000000
0001DA92 3903 4460                  	dc.b $39, 3, $44, $60
0001DA96 6B01 653A                  	dc.l Map_obj6B+$6B000000
0001DA9A 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DA9E 2A00 8E32                  	dc.l Map_obj2A+$2A000000
0001DAA2 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DAA6 6B01 653A                  	dc.l Map_obj6B+$6B000000
0001DAAA 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DAAE 6A01 616A                  	dc.l Map_obj6A+$6A000000
0001DAB2 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DAB6 6B01 653A                  	dc.l Map_obj6B+$6B000000
0001DABA 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DABE 6A01 616A                  	dc.l Map_obj6A+$6A000000
0001DAC2 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DAC6 6B01 653A                  	dc.l Map_obj6B+$6B000000
0001DACA 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DACE 6C01 66FC                  	dc.l Map_obj6C+$6C000000
0001DAD2 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DAD6 6D00 EB7A                  	dc.l Map_obj6D+$6D000000
0001DADA 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DADE 6D00 EB7A                  	dc.l Map_obj6D+$6D000000
0001DAE2 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DAE6 6E01 67B2                  	dc.l Map_obj6E+$6E000000
0001DAEA 0400 047E                  	dc.b 4,	0, 4, $7E
0001DAEE 7001 6BF8                  	dc.l Map_obj70+$70000000
0001DAF2 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DAF6 7101 1A28                  	dc.l Map_obj71+$71000000
0001DAFA 1100 8680                  	dc.b $11, 0, $86, $80
0001DAFE 1E00 92F0                  	dc.l Map_obj1E+$1E000000
0001DB02 0400 2302                  	dc.b 4,	0, $23,	2
0001DB06 7901 76BA                  	dc.l Map_obj79+$79000000
0001DB0A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB0E                            	even
0001DB0E                            	even
0001DB0E                            
0001DB0E                            ; ---------------------------------------------------------------------------
0001DB0E                            ; Debug	list - ending sequence / special stage
0001DB0E                            ; ---------------------------------------------------------------------------
0001DB0E                            Debug_Ending:
0001DB0E                            	include "_inc\Debug list - Ending and SS.asm"
0001DB0E                            ; ---------------------------------------------------------------------------
0001DB0E                            ; Debug	list - ending sequence / special stage
0001DB0E                            ; ---------------------------------------------------------------------------
0001DB0E 000D                       	dc.w $D
0001DB10 2500 A404                  	dc.l Map_obj25+$25000000
0001DB14 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB18 4700 F084                  	dc.l Map_obj47+$47000000
0001DB1C 0000 0380                  	dc.b 0,	0, 3, $80
0001DB20 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB24 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DB28 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB2C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DB30 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB34 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DB38 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB3C 0D00 0553                  	dc.b $D, 0, 5, $53
0001DB40 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB44 0E00 0553                  	dc.b $E, 0, 5, $53
0001DB48 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB4C 0F00 0573                  	dc.b $F, 0, 5, $73
0001DB50 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB54 1000 0573                  	dc.b $10, 0, 5,	$73
0001DB58 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB5C 1100 0585                  	dc.b $11, 0, 5,	$85
0001DB60 2800 9922                  	dc.l Map_obj28b+$28000000
0001DB64 1200 0593                  	dc.b $12, 0, 5,	$93
0001DB68 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB6C 1300 0565                  	dc.b $13, 0, 5,	$65
0001DB70 2800 9922                  	dc.l Map_obj28b+$28000000
0001DB74 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DB78                            	even
0001DB78                            	even
0001DB78                            
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78                            ; Main level load blocks
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78                            MainLoadBlocks:
0001DB78                            	include "_inc\Main level load blocks.asm"
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78                            ; Main level load blocks
0001DB78                            ;
0001DB78                            ; ===FORMAT===
0001DB78                            ; level	patterns + (1st	PLC num	* 10^6)
0001DB78                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DB78                            ; 256x256 mappings
0001DB78                            ; blank, music (unused), pal index (unused), pal index
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DB7C 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DB80 0000 0000                  	dc.l Blk256_GHZ
0001DB84 0081 0404                  	dc.b 0,	$81, 4,	4
0001DB88 0000 0000                  	dc.l Nem_LZ+$6000000
0001DB8C 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DB90 0000 0000                  	dc.l Blk256_LZ
0001DB94 0082 0505                  	dc.b 0,	$82, 5,	5
0001DB98 0000 0000                  	dc.l Nem_MZ+$8000000
0001DB9C 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DBA0 0000 0000                  	dc.l Blk256_MZ
0001DBA4 0083 0606                  	dc.b 0,	$83, 6,	6
0001DBA8 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DBAC 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DBB0 0000 0000                  	dc.l Blk256_SLZ
0001DBB4 0084 0707                  	dc.b 0,	$84, 7,	7
0001DBB8 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DBBC 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DBC0 0000 0000                  	dc.l Blk256_SYZ
0001DBC4 0085 0808                  	dc.b 0,	$85, 8,	8
0001DBC8 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DBCC 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DBD0 0000 0000                  	dc.l Blk256_SBZ
0001DBD4 0086 0909                  	dc.b 0,	$86, 9,	9
0001DBD8 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DBDC 0000 0000                  	dc.l Blk16_GHZ
0001DBE0 0000 0000                  	dc.l Blk256_GHZ
0001DBE4 0086 1313                  	dc.b 0,	$86, $13, $13
0001DBE8                            	even
0001DBE8                            	even
0001DBE8                            
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            ; Pattern load cues
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            ArtLoadCues:
0001DBE8                            	include "_inc\Pattern load cues.asm"
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            ; Pattern load cues - index
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DBEC 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DBF0 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DBF4 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DBF8 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DBFC 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DC00 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DC04 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DC08 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DC0C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DC10 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DC14 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DC18 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DC1C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DC20 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DC24 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DC28                            ; ---------------------------------------------------------------------------
0001DC28                            ; Pattern load cues - standard block 1
0001DC28                            ; ---------------------------------------------------------------------------
0001DC28 0004                       PLC_Main:	dc.w 4
0001DC2A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DC2E F400                       		dc.w $F400
0001DC30 0000 0000                  		dc.l Nem_Hud		; HUD
0001DC34 D940                       		dc.w $D940
0001DC36 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DC3A FA80                       		dc.w $FA80
0001DC3C 0000 0000                  		dc.l Nem_Ring		; rings
0001DC40 F640                       		dc.w $F640
0001DC42 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DC46 F2E0                       		dc.w $F2E0
0001DC48                            ; ---------------------------------------------------------------------------
0001DC48                            ; Pattern load cues - standard block 2
0001DC48                            ; ---------------------------------------------------------------------------
0001DC48 0002                       PLC_Main2:	dc.w 2
0001DC4A 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DC4E D000                       		dc.w $D000
0001DC50 0000 0000                  		dc.l Nem_Shield		; shield
0001DC54 A820                       		dc.w $A820
0001DC56 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DC5A AB80                       		dc.w $AB80
0001DC5C                            ; ---------------------------------------------------------------------------
0001DC5C                            ; Pattern load cues - explosion
0001DC5C                            ; ---------------------------------------------------------------------------
0001DC5C 0000                       PLC_Explode:	dc.w 0
0001DC5E 0000 0000                  		dc.l Nem_Explode	; explosion
0001DC62 B400                       		dc.w $B400
0001DC64                            ; ---------------------------------------------------------------------------
0001DC64                            ; Pattern load cues - game/time	over
0001DC64                            ; ---------------------------------------------------------------------------
0001DC64 0000                       PLC_GameOver:	dc.w 0
0001DC66 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DC6A ABC0                       		dc.w $ABC0
0001DC6C                            ; ---------------------------------------------------------------------------
0001DC6C                            ; Pattern load cues - Green Hill
0001DC6C                            ; ---------------------------------------------------------------------------
0001DC6C 000B                       PLC_GHZ:	dc.w $B
0001DC6E 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DC72 0000                       		dc.w 0
0001DC74 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DC78 39A0                       		dc.w $39A0
0001DC7A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DC7E 6B00                       		dc.w $6B00
0001DC80 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DC84 7A00                       		dc.w $7A00
0001DC86 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DC8A 8000                       		dc.w $8000
0001DC8C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DC90 8880                       		dc.w $8880
0001DC92 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DC96 8F60                       		dc.w $8F60
0001DC98 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DC9C 9360                       		dc.w $9360
0001DC9E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DCA2 9E00                       		dc.w $9E00
0001DCA4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCA8 A360                       		dc.w $A360
0001DCAA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCAE A460                       		dc.w $A460
0001DCB0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCB4 A660                       		dc.w $A660
0001DCB6 0005                       PLC_GHZ2:	dc.w 5
0001DCB8 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DCBC 7000                       		dc.w $7000
0001DCBE 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DCC2 71C0                       		dc.w $71C0
0001DCC4 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DCC8 7300                       		dc.w $7300
0001DCCA 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DCCE 7540                       		dc.w $7540
0001DCD0 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DCD4 A1E0                       		dc.w $A1E0
0001DCD6 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DCDA 6980                       		dc.w $6980
0001DCDC                            ; ---------------------------------------------------------------------------
0001DCDC                            ; Pattern load cues - Labyrinth
0001DCDC                            ; ---------------------------------------------------------------------------
0001DCDC 000B                       PLC_LZ:		dc.w $B
0001DCDE 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DCE2 0000                       		dc.w 0
0001DCE4 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DCE8 3C00                       		dc.w $3C00
0001DCEA 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DCEE 3E00                       		dc.w $3E00
0001DCF0 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DCF4 4B20                       		dc.w $4B20
0001DCF6 0000 0000                  		dc.l Nem_Water		; water	surface
0001DCFA 6000                       		dc.w $6000
0001DCFC 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DD00 6200                       		dc.w $6200
0001DD02 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DD06 6500                       		dc.w $6500
0001DD08 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DD0C 6900                       		dc.w $6900
0001DD0E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DD12 7780                       		dc.w $7780
0001DD14 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DD18 7880                       		dc.w $7880
0001DD1A 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DD1E 7980                       		dc.w $7980
0001DD20 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DD24 94C0                       		dc.w $94C0
0001DD26 000C                       PLC_LZ2:	dc.w $C
0001DD28 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DD2C 7BC0                       		dc.w $7BC0
0001DD2E 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DD32 7CC0                       		dc.w $7CC0
0001DD34 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DD38 7EC0                       		dc.w $7EC0
0001DD3A 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DD3E 5D20                       		dc.w $5D20
0001DD40 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DD44 8800                       		dc.w $8800
0001DD46 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DD4A 89E0                       		dc.w $89E0
0001DD4C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD50 8CE0                       		dc.w $8CE0
0001DD52 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DD56 90C0                       		dc.w $90C0
0001DD58 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD5C A1E0                       		dc.w $A1E0
0001DD5E 0000 0000                  		dc.l Nem_Cork		; cork block
0001DD62 A000                       		dc.w $A000
0001DD64 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD68 A360                       		dc.w $A360
0001DD6A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DD6E A460                       		dc.w $A460
0001DD70 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DD74 A660                       		dc.w $A660
0001DD76                            ; ---------------------------------------------------------------------------
0001DD76                            ; Pattern load cues - Marble
0001DD76                            ; ---------------------------------------------------------------------------
0001DD76 0009                       PLC_MZ:		dc.w 9
0001DD78 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DD7C 0000                       		dc.w 0
0001DD7E 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DD82 6000                       		dc.w $6000
0001DD84 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DD88 68A0                       		dc.w $68A0
0001DD8A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DD8E 7000                       		dc.w $7000
0001DD90 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DD94 71C0                       		dc.w $71C0
0001DD96 0000 0000                  		dc.l Nem_Lava		; lava
0001DD9A 7500                       		dc.w $7500
0001DD9C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DDA0 8880                       		dc.w $8880
0001DDA2 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DDA6 8F60                       		dc.w $8F60
0001DDA8 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DDAC 9700                       		dc.w $9700
0001DDAE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DDB2 9FE0                       		dc.w $9FE0
0001DDB4 0004                       PLC_MZ2:	dc.w 4
0001DDB6 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DDBA A260                       		dc.w $A260
0001DDBC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDC0 A360                       		dc.w $A360
0001DDC2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDC6 A460                       		dc.w $A460
0001DDC8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDCC A660                       		dc.w $A660
0001DDCE 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DDD2 5700                       		dc.w $5700
0001DDD4                            ; ---------------------------------------------------------------------------
0001DDD4                            ; Pattern load cues - Star Light
0001DDD4                            ; ---------------------------------------------------------------------------
0001DDD4 0008                       PLC_SLZ:	dc.w 8
0001DDD6 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DDDA 0000                       		dc.w 0
0001DDDC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DDE0 8000                       		dc.w $8000
0001DDE2 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DDE6 8520                       		dc.w $8520
0001DDE8 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DDEC 9000                       		dc.w $9000
0001DDEE 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DDF2 9C00                       		dc.w $9C00
0001DDF4 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DDF8 A260                       		dc.w $A260
0001DDFA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDFE A360                       		dc.w $A360
0001DE00 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE04 A460                       		dc.w $A460
0001DE06 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE0A A660                       		dc.w $A660
0001DE0C 0005                       PLC_SLZ2:	dc.w 5
0001DE0E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DE12 6E80                       		dc.w $6E80
0001DE14 0000 0000                  		dc.l Nem_Fan		; fan
0001DE18 7400                       		dc.w $7400
0001DE1A 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DE1E 7980                       		dc.w $7980
0001DE20 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DE24 7B80                       		dc.w $7B80
0001DE26 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DE2A 9B00                       		dc.w $9B00
0001DE2C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DE30 9E00                       		dc.w $9E00
0001DE32                            ; ---------------------------------------------------------------------------
0001DE32                            ; Pattern load cues - Spring Yard
0001DE32                            ; ---------------------------------------------------------------------------
0001DE32 0004                       PLC_SYZ:	dc.w 4
0001DE34 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DE38 0000                       		dc.w 0
0001DE3A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE3E 8000                       		dc.w $8000
0001DE40 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE44 8880                       		dc.w $8880
0001DE46 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DE4A 8F60                       		dc.w $8F60
0001DE4C 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DE50 9700                       		dc.w $9700
0001DE52 0007                       PLC_SYZ2:	dc.w 7
0001DE54 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE58 7000                       		dc.w $7000
0001DE5A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DE5E 72C0                       		dc.w $72C0
0001DE60 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DE64 7740                       		dc.w $7740
0001DE66 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DE6A 9FE0                       		dc.w $9FE0
0001DE6C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DE70 A1E0                       		dc.w $A1E0
0001DE72 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE76 A360                       		dc.w $A360
0001DE78 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE7C A460                       		dc.w $A460
0001DE7E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE82 A660                       		dc.w $A660
0001DE84                            ; ---------------------------------------------------------------------------
0001DE84                            ; Pattern load cues - Scrap Brain
0001DE84                            ; ---------------------------------------------------------------------------
0001DE84 000B                       PLC_SBZ:	dc.w $B
0001DE86 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DE8A 0000                       		dc.w 0
0001DE8C 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DE90 5800                       		dc.w $5800
0001DE92 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DE96 5D00                       		dc.w $5D00
0001DE98 0000 0000                  		dc.l Nem_Girder		; girder
0001DE9C 5E00                       		dc.w $5E00
0001DE9E 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DEA2 6040                       		dc.w $6040
0001DEA4 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DEA8 6880                       		dc.w $6880
0001DEAA 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DEAE 6900                       		dc.w $6900
0001DEB0 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DEB4 7220                       		dc.w $7220
0001DEB6 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DEBA 76A0                       		dc.w $76A0
0001DEBC 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DEC0 7B20                       		dc.w $7B20
0001DEC2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DEC6 7EA0                       		dc.w $7EA0
0001DEC8 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DECC 9860                       		dc.w $9860
0001DECE 000C                       PLC_SBZ2:	dc.w $C
0001DED0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DED4 5600                       		dc.w $5600
0001DED6 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DEDA 8000                       		dc.w $8000
0001DEDC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DEE0 8520                       		dc.w $8520
0001DEE2 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DEE6 8C00                       		dc.w $8C00
0001DEE8 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DEEC 8DE0                       		dc.w $8DE0
0001DEEE 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DEF2 8FC0                       		dc.w $8FC0
0001DEF4 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DEF8 9240                       		dc.w $9240
0001DEFA 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DEFE 7F20                       		dc.w $7F20
0001DF00 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DF04 9BE0                       		dc.w $9BE0
0001DF06 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF0A A1E0                       		dc.w $A1E0
0001DF0C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF10 A360                       		dc.w $A360
0001DF12 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF16 A460                       		dc.w $A460
0001DF18 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF1C A660                       		dc.w $A660
0001DF1E                            ; ---------------------------------------------------------------------------
0001DF1E                            ; Pattern load cues - title card
0001DF1E                            ; ---------------------------------------------------------------------------
0001DF1E 0000                       PLC_TitleCard:	dc.w 0
0001DF20 0000 0000                  		dc.l Nem_TitleCard
0001DF24 B000                       		dc.w $B000
0001DF26                            ; ---------------------------------------------------------------------------
0001DF26                            ; Pattern load cues - act 3 boss
0001DF26                            ; ---------------------------------------------------------------------------
0001DF26 0005                       PLC_Boss:	dc.w 5
0001DF28 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF2C 8000                       		dc.w $8000
0001DF2E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DF32 8D80                       		dc.w $8D80
0001DF34 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DF38 93A0                       		dc.w $93A0
0001DF3A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DF3E A300                       		dc.w $A300
0001DF40 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DF44 A300                       		dc.w $A300
0001DF46 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF4A A540                       		dc.w $A540
0001DF4C                            ; ---------------------------------------------------------------------------
0001DF4C                            ; Pattern load cues - act 1/2 signpost
0001DF4C                            ; ---------------------------------------------------------------------------
0001DF4C 0002                       PLC_Signpost:	dc.w 2
0001DF4E 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DF52 D000                       		dc.w $D000
0001DF54 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DF58 96C0                       		dc.w $96C0
0001DF5A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DF5E 8C40                       		dc.w $8C40
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60                            ; Pattern load cues - beta special stage warp effect
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60 0000                       PLC_Warp:	dc.w 0
0001DF62 0000 0000                  		dc.l Nem_Warp
0001DF66 A820                       		dc.w $A820
0001DF68                            ; ---------------------------------------------------------------------------
0001DF68                            ; Pattern load cues - special stage
0001DF68                            ; ---------------------------------------------------------------------------
0001DF68 0010                       PLC_SpeStage:	dc.w $10
0001DF6A 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DF6E 0000                       		dc.w 0
0001DF70 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DF74 0A20                       		dc.w $A20
0001DF76 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DF7A 2840                       		dc.w $2840
0001DF7C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DF80 4760                       		dc.w $4760
0001DF82 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DF86 4A20                       		dc.w $4A20
0001DF88 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DF8C 4C60                       		dc.w $4C60
0001DF8E 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DF92 5E00                       		dc.w $5E00
0001DF94 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DF98 6E00                       		dc.w $6E00
0001DF9A 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DF9E 7E00                       		dc.w $7E00
0001DFA0 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DFA4 8E00                       		dc.w $8E00
0001DFA6 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DFAA 9E00                       		dc.w $9E00
0001DFAC 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DFB0 AE00                       		dc.w $AE00
0001DFB2 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DFB6 BE00                       		dc.w $BE00
0001DFB8 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DFBC EE00                       		dc.w $EE00
0001DFBE 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DFC2 F2E0                       		dc.w $F2E0
0001DFC4 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DFC8 F400                       		dc.w $F400
0001DFCA 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DFCE F520                       		dc.w $F520
0001DFD0 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DFD4 F2E0                       		dc.w $F2E0
0001DFD6 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DFDA F400                       		dc.w $F400
0001DFDC 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DFE0 F520                       		dc.w $F520
0001DFE2                            ; ---------------------------------------------------------------------------
0001DFE2                            ; Pattern load cues - GHZ animals
0001DFE2                            ; ---------------------------------------------------------------------------
0001DFE2 0001                       PLC_GHZAnimals:	dc.w 1
0001DFE4 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DFE8 B000                       		dc.w $B000
0001DFEA 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DFEE B240                       		dc.w $B240
0001DFF0                            ; ---------------------------------------------------------------------------
0001DFF0                            ; Pattern load cues - LZ animals
0001DFF0                            ; ---------------------------------------------------------------------------
0001DFF0 0001                       PLC_LZAnimals:	dc.w 1
0001DFF2 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DFF6 B000                       		dc.w $B000
0001DFF8 0000 0000                  		dc.l Nem_Seal		; seal
0001DFFC B240                       		dc.w $B240
0001DFFE                            ; ---------------------------------------------------------------------------
0001DFFE                            ; Pattern load cues - MZ animals
0001DFFE                            ; ---------------------------------------------------------------------------
0001DFFE 0001                       PLC_MZAnimals:	dc.w 1
0001E000 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E004 B000                       		dc.w $B000
0001E006 0000 0000                  		dc.l Nem_Seal		; seal
0001E00A B240                       		dc.w $B240
0001E00C                            ; ---------------------------------------------------------------------------
0001E00C                            ; Pattern load cues - SLZ animals
0001E00C                            ; ---------------------------------------------------------------------------
0001E00C 0001                       PLC_SLZAnimals:	dc.w 1
0001E00E 0000 0000                  		dc.l Nem_Pig		; pig
0001E012 B000                       		dc.w $B000
0001E014 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E018 B240                       		dc.w $B240
0001E01A                            ; ---------------------------------------------------------------------------
0001E01A                            ; Pattern load cues - SYZ animals
0001E01A                            ; ---------------------------------------------------------------------------
0001E01A 0001                       PLC_SYZAnimals:	dc.w 1
0001E01C 0000 0000                  		dc.l Nem_Pig		; pig
0001E020 B000                       		dc.w $B000
0001E022 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E026 B240                       		dc.w $B240
0001E028                            ; ---------------------------------------------------------------------------
0001E028                            ; Pattern load cues - SBZ animals
0001E028                            ; ---------------------------------------------------------------------------
0001E028 0001                       PLC_SBZAnimals:	dc.w 1
0001E02A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E02E B000                       		dc.w $B000
0001E030 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E034 B240                       		dc.w $B240
0001E036                            ; ---------------------------------------------------------------------------
0001E036                            ; Pattern load cues - special stage results screen
0001E036                            ; ---------------------------------------------------------------------------
0001E036 0001                       PLC_SpeStResult:dc.w 1
0001E038 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E03C A820                       		dc.w $A820
0001E03E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E042 AA20                       		dc.w $AA20
0001E044                            ; ---------------------------------------------------------------------------
0001E044                            ; Pattern load cues - ending sequence
0001E044                            ; ---------------------------------------------------------------------------
0001E044 000E                       PLC_Ending:	dc.w $E
0001E046 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E04A 0000                       		dc.w 0
0001E04C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E050 39A0                       		dc.w $39A0
0001E052 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E056 6B00                       		dc.w $6B00
0001E058 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E05C 7400                       		dc.w $7400
0001E05E 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E062 78A0                       		dc.w $78A0
0001E064 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E068 7C20                       		dc.w $7C20
0001E06A 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E06E A480                       		dc.w $A480
0001E070 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E074 AA60                       		dc.w $AA60
0001E076 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E07A ACA0                       		dc.w $ACA0
0001E07C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E080 AE60                       		dc.w $AE60
0001E082 0000 0000                  		dc.l Nem_Seal		; seal
0001E086 B0A0                       		dc.w $B0A0
0001E088 0000 0000                  		dc.l Nem_Pig		; pig
0001E08C B260                       		dc.w $B260
0001E08E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E092 B4A0                       		dc.w $B4A0
0001E094 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E098 B660                       		dc.w $B660
0001E09A 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E09E B8A0                       		dc.w $B8A0
0001E0A0                            ; ---------------------------------------------------------------------------
0001E0A0                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E0A0                            ; ---------------------------------------------------------------------------
0001E0A0 0002                       PLC_TryAgain:	dc.w 2
0001E0A2 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E0A6 78A0                       		dc.w $78A0
0001E0A8 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E0AC 7C20                       		dc.w $7C20
0001E0AE 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E0B2 B400                       		dc.w $B400
0001E0B4                            ; ---------------------------------------------------------------------------
0001E0B4                            ; Pattern load cues - Eggman on SBZ 2
0001E0B4                            ; ---------------------------------------------------------------------------
0001E0B4 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E0B6 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E0BA A300                       		dc.w $A300
0001E0BC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E0C0 8000                       		dc.w $8000
0001E0C2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E0C6 9400                       		dc.w $9400
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8                            ; Pattern load cues - final boss
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8 0004                       PLC_FZBoss:	dc.w 4
0001E0CA 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E0CE 7400                       		dc.w $7400
0001E0D0 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E0D4 6000                       		dc.w $6000
0001E0D6 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E0DA 8000                       		dc.w $8000
0001E0DC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E0E0 8E00                       		dc.w $8E00
0001E0E2 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E0E6 A540                       		dc.w $A540
0001E0E8                            		even
0001E0E8                            		even
0001E0E8                            
0001E0E8                            		incbin	misc\padding.bin
0001E1D6                            		even
0001E1D6                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E638                            		even
0001E638                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E730                            		even
0001E730                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E844                            		even
0001E844                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F850                            		even
0001F850                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022AA6 00                         		even
00022AA6                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022ADA                            		even
00022ADA                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022B98                            		even
00022B98                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00023040                            		even
00023040                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
0002309E                            		even
0002309E                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00023CA4                            		even
00023CA4                            ; ---------------------------------------------------------------------------
00023CA4                            ; Sprite mappings - Sonic
00023CA4                            ; ---------------------------------------------------------------------------
00023CA4                            Map_Sonic:
00023CA4                            	include "_maps\Sonic.asm"
00023CA4                            Map_0dcc:
00023CA4 0000                       Map_0dcc_0: 	dc.w Map_0dcc_B6-Map_0dcc
00023CA6 0000                       Map_0dcc_2: 	dc.w Map_0dcc_B7-Map_0dcc
00023CA8 0000                       Map_0dcc_4: 	dc.w Map_0dcc_C2-Map_0dcc
00023CAA 0000                       Map_0dcc_6: 	dc.w Map_0dcc_D2-Map_0dcc
00023CAC 0000                       Map_0dcc_8: 	dc.w Map_0dcc_E2-Map_0dcc
00023CAE 0000                       Map_0dcc_A: 	dc.w Map_0dcc_F2-Map_0dcc
00023CB0 0000                       Map_0dcc_C: 	dc.w Map_0dcc_102-Map_0dcc
00023CB2 0000                       Map_0dcc_E: 	dc.w Map_0dcc_117-Map_0dcc
00023CB4 0000                       Map_0dcc_10: 	dc.w Map_0dcc_122-Map_0dcc
00023CB6 0000                       Map_0dcc_12: 	dc.w Map_0dcc_12D-Map_0dcc
00023CB8 0000                       Map_0dcc_14: 	dc.w Map_0dcc_142-Map_0dcc
00023CBA 0000                       Map_0dcc_16: 	dc.w Map_0dcc_14D-Map_0dcc
00023CBC 0000                       Map_0dcc_18: 	dc.w Map_0dcc_15D-Map_0dcc
00023CBE 0000                       Map_0dcc_1A: 	dc.w Map_0dcc_177-Map_0dcc
00023CC0 0000                       Map_0dcc_1C: 	dc.w Map_0dcc_196-Map_0dcc
00023CC2 0000                       Map_0dcc_1E: 	dc.w Map_0dcc_1AB-Map_0dcc
00023CC4 0000                       Map_0dcc_20: 	dc.w Map_0dcc_1C5-Map_0dcc
00023CC6 0000                       Map_0dcc_22: 	dc.w Map_0dcc_1DA-Map_0dcc
00023CC8 0000                       Map_0dcc_24: 	dc.w Map_0dcc_1F4-Map_0dcc
00023CCA 0000                       Map_0dcc_26: 	dc.w Map_0dcc_209-Map_0dcc
00023CCC 0000                       Map_0dcc_28: 	dc.w Map_0dcc_214-Map_0dcc
00023CCE 0000                       Map_0dcc_2A: 	dc.w Map_0dcc_21F-Map_0dcc
00023CD0 0000                       Map_0dcc_2C: 	dc.w Map_0dcc_234-Map_0dcc
00023CD2 0000                       Map_0dcc_2E: 	dc.w Map_0dcc_23F-Map_0dcc
00023CD4 0000                       Map_0dcc_30: 	dc.w Map_0dcc_24F-Map_0dcc
00023CD6 0000                       Map_0dcc_32: 	dc.w Map_0dcc_26E-Map_0dcc
00023CD8 0000                       Map_0dcc_34: 	dc.w Map_0dcc_28D-Map_0dcc
00023CDA 0000                       Map_0dcc_36: 	dc.w Map_0dcc_2A2-Map_0dcc
00023CDC 0000                       Map_0dcc_38: 	dc.w Map_0dcc_2BC-Map_0dcc
00023CDE 0000                       Map_0dcc_3A: 	dc.w Map_0dcc_2D1-Map_0dcc
00023CE0 0000                       Map_0dcc_3C: 	dc.w Map_0dcc_2EB-Map_0dcc
00023CE2 0000                       Map_0dcc_3E: 	dc.w Map_0dcc_2F6-Map_0dcc
00023CE4 0000                       Map_0dcc_40: 	dc.w Map_0dcc_301-Map_0dcc
00023CE6 0000                       Map_0dcc_42: 	dc.w Map_0dcc_30C-Map_0dcc
00023CE8 0000                       Map_0dcc_44: 	dc.w Map_0dcc_317-Map_0dcc
00023CEA 0000                       Map_0dcc_46: 	dc.w Map_0dcc_32C-Map_0dcc
00023CEC 0000                       Map_0dcc_48: 	dc.w Map_0dcc_33C-Map_0dcc
00023CEE 0000                       Map_0dcc_4A: 	dc.w Map_0dcc_351-Map_0dcc
00023CF0 0000                       Map_0dcc_4C: 	dc.w Map_0dcc_361-Map_0dcc
00023CF2 0000                       Map_0dcc_4E: 	dc.w Map_0dcc_36C-Map_0dcc
00023CF4 0000                       Map_0dcc_50: 	dc.w Map_0dcc_377-Map_0dcc
00023CF6 0000                       Map_0dcc_52: 	dc.w Map_0dcc_382-Map_0dcc
00023CF8 0000                       Map_0dcc_54: 	dc.w Map_0dcc_38D-Map_0dcc
00023CFA 0000                       Map_0dcc_56: 	dc.w Map_0dcc_3A2-Map_0dcc
00023CFC 0000                       Map_0dcc_58: 	dc.w Map_0dcc_3AD-Map_0dcc
00023CFE 0000                       Map_0dcc_5A: 	dc.w Map_0dcc_3C2-Map_0dcc
00023D00 0000                       Map_0dcc_5C: 	dc.w Map_0dcc_3CD-Map_0dcc
00023D02 0000                       Map_0dcc_5E: 	dc.w Map_0dcc_3D3-Map_0dcc
00023D04 0000                       Map_0dcc_60: 	dc.w Map_0dcc_3D9-Map_0dcc
00023D06 0000                       Map_0dcc_62: 	dc.w Map_0dcc_3DF-Map_0dcc
00023D08 0000                       Map_0dcc_64: 	dc.w Map_0dcc_3E5-Map_0dcc
00023D0A 0000                       Map_0dcc_66: 	dc.w Map_0dcc_3EB-Map_0dcc
00023D0C 0000                       Map_0dcc_68: 	dc.w Map_0dcc_3F6-Map_0dcc
00023D0E 0000                       Map_0dcc_6A: 	dc.w Map_0dcc_3FC-Map_0dcc
00023D10 0000                       Map_0dcc_6C: 	dc.w Map_0dcc_407-Map_0dcc
00023D12 0000                       Map_0dcc_6E: 	dc.w Map_0dcc_40D-Map_0dcc
00023D14 0000                       Map_0dcc_70: 	dc.w Map_0dcc_418-Map_0dcc
00023D16 0000                       Map_0dcc_72: 	dc.w Map_0dcc_42D-Map_0dcc
00023D18 0000                       Map_0dcc_74: 	dc.w Map_0dcc_44C-Map_0dcc
00023D1A 0000                       Map_0dcc_76: 	dc.w Map_0dcc_45C-Map_0dcc
00023D1C 0000                       Map_0dcc_78: 	dc.w Map_0dcc_46C-Map_0dcc
00023D1E 0000                       Map_0dcc_7A: 	dc.w Map_0dcc_47C-Map_0dcc
00023D20 0000                       Map_0dcc_7C: 	dc.w Map_0dcc_487-Map_0dcc
00023D22 0000                       Map_0dcc_7E: 	dc.w Map_0dcc_497-Map_0dcc
00023D24 0000                       Map_0dcc_80: 	dc.w Map_0dcc_4A7-Map_0dcc
00023D26 0000                       Map_0dcc_82: 	dc.w Map_0dcc_4B7-Map_0dcc
00023D28 0000                       Map_0dcc_84: 	dc.w Map_0dcc_4CC-Map_0dcc
00023D2A 0000                       Map_0dcc_86: 	dc.w Map_0dcc_4E1-Map_0dcc
00023D2C 0000                       Map_0dcc_88: 	dc.w Map_0dcc_4FB-Map_0dcc
00023D2E 0000                       Map_0dcc_8A: 	dc.w Map_0dcc_515-Map_0dcc
00023D30 0000                       Map_0dcc_8C: 	dc.w Map_0dcc_520-Map_0dcc
00023D32 0000                       Map_0dcc_8E: 	dc.w Map_0dcc_530-Map_0dcc
00023D34 0000                       Map_0dcc_90: 	dc.w Map_0dcc_53B-Map_0dcc
00023D36 0000                       Map_0dcc_92: 	dc.w Map_0dcc_54B-Map_0dcc
00023D38 0000                       Map_0dcc_94: 	dc.w Map_0dcc_556-Map_0dcc
00023D3A 0000                       Map_0dcc_96: 	dc.w Map_0dcc_566-Map_0dcc
00023D3C 0000                       Map_0dcc_98: 	dc.w Map_0dcc_576-Map_0dcc
00023D3E 0000                       Map_0dcc_9A: 	dc.w Map_0dcc_590-Map_0dcc
00023D40 0000                       Map_0dcc_9C: 	dc.w Map_0dcc_5AA-Map_0dcc
00023D42 0000                       Map_0dcc_9E: 	dc.w Map_0dcc_5B5-Map_0dcc
00023D44 0000                       Map_0dcc_A0: 	dc.w Map_0dcc_5C5-Map_0dcc
00023D46 0000                       Map_0dcc_A2: 	dc.w Map_0dcc_5CB-Map_0dcc
00023D48 0000                       Map_0dcc_A4: 	dc.w Map_0dcc_5D1-Map_0dcc
00023D4A 0000                       Map_0dcc_A6: 	dc.w Map_0dcc_5D7-Map_0dcc
00023D4C 0000                       Map_0dcc_A8: 	dc.w Map_0dcc_5E7-Map_0dcc
00023D4E 0000                       Map_0dcc_AA: 	dc.w Map_0dcc_5F7-Map_0dcc
00023D50 0000                       Map_0dcc_AC: 	dc.w Map_0dcc_607-Map_0dcc
00023D52 0000                       Map_0dcc_AE: 	dc.w Map_0dcc_617-Map_0dcc
00023D54 0000                       Map_0dcc_B0: 	dc.w Map_0dcc_622-Map_0dcc
00023D56 0000                       Map_0dcc_B2: 	dc.w Map_0dcc_62D-Map_0dcc
00023D58 0000                       Map_0dcc_B4: 	dc.w Map_0dcc_63D-Map_0dcc
00023D5A 00                         Map_0dcc_B6: 	dc.b $0
00023D5B 02                         Map_0dcc_B7: 	dc.b $2
00023D5C ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00023D61 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00023D66 03                         Map_0dcc_C2: 	dc.b $3
00023D67 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023D6C FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023D71 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023D76 03                         Map_0dcc_D2: 	dc.b $3
00023D77 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023D7C FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023D81 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023D86 03                         Map_0dcc_E2: 	dc.b $3
00023D87 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023D8C FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023D91 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023D96 03                         Map_0dcc_F2: 	dc.b $3
00023D97 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023D9C 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00023DA1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DA6 04                         Map_0dcc_102: 	dc.b $4
00023DA7 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00023DAC FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00023DB1 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00023DB6 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00023DBB 02                         Map_0dcc_117: 	dc.b $2
00023DBC EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00023DC1 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00023DC6 02                         Map_0dcc_122: 	dc.b $2
00023DC7 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00023DCC FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00023DD1 04                         Map_0dcc_12D: 	dc.b $4
00023DD2 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00023DD7 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00023DDC FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00023DE1 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00023DE6 02                         Map_0dcc_142: 	dc.b $2
00023DE7 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00023DEC EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00023DF1 03                         Map_0dcc_14D: 	dc.b $3
00023DF2 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00023DF7 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00023DFC 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00023E01 05                         Map_0dcc_15D: 	dc.b $5
00023E02 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023E07 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00023E0C FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00023E11 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00023E16 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00023E1B 06                         Map_0dcc_177: 	dc.b $6
00023E1C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023E21 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023E26 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00023E2B 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00023E30 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00023E35 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00023E3A 04                         Map_0dcc_196: 	dc.b $4
00023E3B ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023E40 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023E45 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00023E4A 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00023E4F 05                         Map_0dcc_1AB: 	dc.b $5
00023E50 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023E55 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00023E5A FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00023E5F 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00023E64 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00023E69 04                         Map_0dcc_1C5: 	dc.b $4
00023E6A EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023E6F EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023E74 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00023E79 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00023E7E 05                         Map_0dcc_1DA: 	dc.b $5
00023E7F ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023E84 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023E89 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00023E8E FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00023E93 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00023E98 04                         Map_0dcc_1F4: 	dc.b $4
00023E99 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00023E9E EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00023EA3 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00023EA8 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00023EAD 02                         Map_0dcc_209: 	dc.b $2
00023EAE F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00023EB3 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00023EB8 02                         Map_0dcc_214: 	dc.b $2
00023EB9 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00023EBE F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00023EC3 04                         Map_0dcc_21F: 	dc.b $4
00023EC4 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00023EC9 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00023ECE FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00023ED3 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00023ED8 02                         Map_0dcc_234: 	dc.b $2
00023ED9 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00023EDE F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00023EE3 03                         Map_0dcc_23F: 	dc.b $3
00023EE4 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00023EE9 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00023EEE F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00023EF3 06                         Map_0dcc_24F: 	dc.b $6
00023EF4 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023EF9 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00023EFE F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00023F03 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00023F08 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00023F0D FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00023F12 06                         Map_0dcc_26E: 	dc.b $6
00023F13 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023F18 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00023F1D EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00023F22 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00023F27 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00023F2C 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00023F31 04                         Map_0dcc_28D: 	dc.b $4
00023F32 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023F37 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00023F3C EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00023F41 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023F46 05                         Map_0dcc_2A2: 	dc.b $5
00023F47 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023F4C ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00023F51 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00023F56 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00023F5B 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00023F60 04                         Map_0dcc_2BC: 	dc.b $4
00023F61 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023F66 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00023F6B EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00023F70 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00023F75 05                         Map_0dcc_2D1: 	dc.b $5
00023F76 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023F7B EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00023F80 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00023F85 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023F8A 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00023F8F 02                         Map_0dcc_2EB: 	dc.b $2
00023F90 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023F95 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023F9A 02                         Map_0dcc_2F6: 	dc.b $2
00023F9B EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FA0 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FA5 02                         Map_0dcc_301: 	dc.b $2
00023FA6 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FAB FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FB0 02                         Map_0dcc_30C: 	dc.b $2
00023FB1 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FB6 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FBB 04                         Map_0dcc_317: 	dc.b $4
00023FBC EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FC1 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023FC6 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023FCB FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023FD0 03                         Map_0dcc_32C: 	dc.b $3
00023FD1 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FD6 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023FDB FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023FE0 04                         Map_0dcc_33C: 	dc.b $4
00023FE1 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FE6 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023FEB FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023FF0 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023FF5 03                         Map_0dcc_351: 	dc.b $3
00023FF6 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FFB EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024000 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024005 02                         Map_0dcc_361: 	dc.b $2
00024006 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002400B F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024010 02                         Map_0dcc_36C: 	dc.b $2
00024011 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024016 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002401B 02                         Map_0dcc_377: 	dc.b $2
0002401C F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024021 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024026 02                         Map_0dcc_382: 	dc.b $2
00024027 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002402C F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024031 04                         Map_0dcc_38D: 	dc.b $4
00024032 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024037 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002403C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024041 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024046 02                         Map_0dcc_3A2: 	dc.b $2
00024047 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002404C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024051 04                         Map_0dcc_3AD: 	dc.b $4
00024052 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024057 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002405C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024061 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024066 02                         Map_0dcc_3C2: 	dc.b $2
00024067 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002406C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024071 01                         Map_0dcc_3CD: 	dc.b $1
00024072 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024077 01                         Map_0dcc_3D3: 	dc.b $1
00024078 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002407D 01                         Map_0dcc_3D9: 	dc.b $1
0002407E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024083 01                         Map_0dcc_3DF: 	dc.b $1
00024084 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024089 01                         Map_0dcc_3E5: 	dc.b $1
0002408A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002408F 02                         Map_0dcc_3EB: 	dc.b $2
00024090 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00024095 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002409A 01                         Map_0dcc_3F6: 	dc.b $1
0002409B F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240A0 02                         Map_0dcc_3FC: 	dc.b $2
000240A1 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000240A6 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000240AB 01                         Map_0dcc_407: 	dc.b $1
000240AC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240B1 02                         Map_0dcc_40D: 	dc.b $2
000240B2 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000240B7 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000240BC 04                         Map_0dcc_418: 	dc.b $4
000240BD ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000240C2 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000240C7 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000240CC 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000240D1 06                         Map_0dcc_42D: 	dc.b $6
000240D2 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000240D7 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000240DC 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000240E1 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000240E6 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000240EB F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000240F0 03                         Map_0dcc_44C: 	dc.b $3
000240F1 EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
000240F6 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
000240FB F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00024100 03                         Map_0dcc_45C: 	dc.b $3
00024101 EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00024106 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
0002410B 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00024110 03                         Map_0dcc_46C: 	dc.b $3
00024111 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00024116 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
0002411B 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00024120 02                         Map_0dcc_47C: 	dc.b $2
00024121 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00024126 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
0002412B 03                         Map_0dcc_487: 	dc.b $3
0002412C F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00024131 FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00024136 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002413B 03                         Map_0dcc_497: 	dc.b $3
0002413C F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00024141 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00024146 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
0002414B 03                         Map_0dcc_4A7: 	dc.b $3
0002414C E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00024151 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00024156 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
0002415B 04                         Map_0dcc_4B7: 	dc.b $4
0002415C F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00024161 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00024166 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002416B F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00024170 04                         Map_0dcc_4CC: 	dc.b $4
00024171 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00024176 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002417B F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00024180 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00024185 05                         Map_0dcc_4E1: 	dc.b $5
00024186 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002418B F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00024190 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00024195 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002419A 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002419F 05                         Map_0dcc_4FB: 	dc.b $5
000241A0 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000241A5 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000241AA 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000241AF 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000241B4 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000241B9 02                         Map_0dcc_515: 	dc.b $2
000241BA ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000241BF 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000241C4 03                         Map_0dcc_520: 	dc.b $3
000241C5 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000241CA 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000241CF 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000241D4 02                         Map_0dcc_530: 	dc.b $2
000241D5 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000241DA 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000241DF 03                         Map_0dcc_53B: 	dc.b $3
000241E0 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000241E5 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000241EA 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000241EF 02                         Map_0dcc_54B: 	dc.b $2
000241F0 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000241F5 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000241FA 03                         Map_0dcc_556: 	dc.b $3
000241FB EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024200 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00024205 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
0002420A 03                         Map_0dcc_566: 	dc.b $3
0002420B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024210 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00024215 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
0002421A 05                         Map_0dcc_576: 	dc.b $5
0002421B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024220 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00024225 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002422A 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002422F 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00024234 05                         Map_0dcc_590: 	dc.b $5
00024235 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002423A E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002423F F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00024244 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00024249 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002424E 02                         Map_0dcc_5AA: 	dc.b $2
0002424F EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00024254 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00024259 03                         Map_0dcc_5B5: 	dc.b $3
0002425A EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002425F F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00024264 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00024269 01                         Map_0dcc_5C5: 	dc.b $1
0002426A F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002426F 01                         Map_0dcc_5CB: 	dc.b $1
00024270 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00024275 01                         Map_0dcc_5D1: 	dc.b $1
00024276 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002427B 03                         Map_0dcc_5D7: 	dc.b $3
0002427C F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00024281 FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00024286 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
0002428B 03                         Map_0dcc_5E7: 	dc.b $3
0002428C F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
00024291 FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00024296 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002429B 03                         Map_0dcc_5F7: 	dc.b $3
0002429C F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000242A1 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000242A6 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000242AB 03                         Map_0dcc_607: 	dc.b $3
000242AC EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000242B1 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000242B6 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000242BB 02                         Map_0dcc_617: 	dc.b $2
000242BC F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000242C1 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000242C6 02                         Map_0dcc_622: 	dc.b $2
000242C7 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000242CC EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000242D1 03                         Map_0dcc_62D: 	dc.b $3
000242D2 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000242D7 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000242DC 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000242E1 02                         Map_0dcc_63D: 	dc.b $2
000242E2 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000242E7 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000242EC                            	even
000242EC                            	even
000242EC                            
000242EC                            ; ---------------------------------------------------------------------------
000242EC                            ; Uncompressed graphics	loading	array for Sonic
000242EC                            ; ---------------------------------------------------------------------------
000242EC                            SonicDynPLC:
000242EC                            	include "_inc\Sonic dynamic pattern load cues.asm"
000242EC                            DPLC_cc21:
000242EC 0000                       DPLC_cc21_0: 	dc.w DPLC_cc21_B6-DPLC_cc21
000242EE 0000                       DPLC_cc21_2: 	dc.w DPLC_cc21_B7-DPLC_cc21
000242F0 0000                       DPLC_cc21_4: 	dc.w DPLC_cc21_BC-DPLC_cc21
000242F2 0000                       DPLC_cc21_6: 	dc.w DPLC_cc21_C3-DPLC_cc21
000242F4 0000                       DPLC_cc21_8: 	dc.w DPLC_cc21_CA-DPLC_cc21
000242F6 0000                       DPLC_cc21_A: 	dc.w DPLC_cc21_D1-DPLC_cc21
000242F8 0000                       DPLC_cc21_C: 	dc.w DPLC_cc21_D8-DPLC_cc21
000242FA 0000                       DPLC_cc21_E: 	dc.w DPLC_cc21_E1-DPLC_cc21
000242FC 0000                       DPLC_cc21_10: 	dc.w DPLC_cc21_E6-DPLC_cc21
000242FE 0000                       DPLC_cc21_12: 	dc.w DPLC_cc21_EB-DPLC_cc21
00024300 0000                       DPLC_cc21_14: 	dc.w DPLC_cc21_F4-DPLC_cc21
00024302 0000                       DPLC_cc21_16: 	dc.w DPLC_cc21_F9-DPLC_cc21
00024304 0000                       DPLC_cc21_18: 	dc.w DPLC_cc21_100-DPLC_cc21
00024306 0000                       DPLC_cc21_1A: 	dc.w DPLC_cc21_10B-DPLC_cc21
00024308 0000                       DPLC_cc21_1C: 	dc.w DPLC_cc21_118-DPLC_cc21
0002430A 0000                       DPLC_cc21_1E: 	dc.w DPLC_cc21_121-DPLC_cc21
0002430C 0000                       DPLC_cc21_20: 	dc.w DPLC_cc21_12C-DPLC_cc21
0002430E 0000                       DPLC_cc21_22: 	dc.w DPLC_cc21_135-DPLC_cc21
00024310 0000                       DPLC_cc21_24: 	dc.w DPLC_cc21_140-DPLC_cc21
00024312 0000                       DPLC_cc21_26: 	dc.w DPLC_cc21_149-DPLC_cc21
00024314 0000                       DPLC_cc21_28: 	dc.w DPLC_cc21_14E-DPLC_cc21
00024316 0000                       DPLC_cc21_2A: 	dc.w DPLC_cc21_153-DPLC_cc21
00024318 0000                       DPLC_cc21_2C: 	dc.w DPLC_cc21_15C-DPLC_cc21
0002431A 0000                       DPLC_cc21_2E: 	dc.w DPLC_cc21_161-DPLC_cc21
0002431C 0000                       DPLC_cc21_30: 	dc.w DPLC_cc21_168-DPLC_cc21
0002431E 0000                       DPLC_cc21_32: 	dc.w DPLC_cc21_175-DPLC_cc21
00024320 0000                       DPLC_cc21_34: 	dc.w DPLC_cc21_182-DPLC_cc21
00024322 0000                       DPLC_cc21_36: 	dc.w DPLC_cc21_18B-DPLC_cc21
00024324 0000                       DPLC_cc21_38: 	dc.w DPLC_cc21_196-DPLC_cc21
00024326 0000                       DPLC_cc21_3A: 	dc.w DPLC_cc21_19F-DPLC_cc21
00024328 0000                       DPLC_cc21_3C: 	dc.w DPLC_cc21_1AA-DPLC_cc21
0002432A 0000                       DPLC_cc21_3E: 	dc.w DPLC_cc21_1AF-DPLC_cc21
0002432C 0000                       DPLC_cc21_40: 	dc.w DPLC_cc21_1B4-DPLC_cc21
0002432E 0000                       DPLC_cc21_42: 	dc.w DPLC_cc21_1B9-DPLC_cc21
00024330 0000                       DPLC_cc21_44: 	dc.w DPLC_cc21_1BE-DPLC_cc21
00024332 0000                       DPLC_cc21_46: 	dc.w DPLC_cc21_1C7-DPLC_cc21
00024334 0000                       DPLC_cc21_48: 	dc.w DPLC_cc21_1CE-DPLC_cc21
00024336 0000                       DPLC_cc21_4A: 	dc.w DPLC_cc21_1D7-DPLC_cc21
00024338 0000                       DPLC_cc21_4C: 	dc.w DPLC_cc21_1DE-DPLC_cc21
0002433A 0000                       DPLC_cc21_4E: 	dc.w DPLC_cc21_1E3-DPLC_cc21
0002433C 0000                       DPLC_cc21_50: 	dc.w DPLC_cc21_1E8-DPLC_cc21
0002433E 0000                       DPLC_cc21_52: 	dc.w DPLC_cc21_1ED-DPLC_cc21
00024340 0000                       DPLC_cc21_54: 	dc.w DPLC_cc21_1F2-DPLC_cc21
00024342 0000                       DPLC_cc21_56: 	dc.w DPLC_cc21_1FB-DPLC_cc21
00024344 0000                       DPLC_cc21_58: 	dc.w DPLC_cc21_200-DPLC_cc21
00024346 0000                       DPLC_cc21_5A: 	dc.w DPLC_cc21_209-DPLC_cc21
00024348 0000                       DPLC_cc21_5C: 	dc.w DPLC_cc21_20E-DPLC_cc21
0002434A 0000                       DPLC_cc21_5E: 	dc.w DPLC_cc21_211-DPLC_cc21
0002434C 0000                       DPLC_cc21_60: 	dc.w DPLC_cc21_214-DPLC_cc21
0002434E 0000                       DPLC_cc21_62: 	dc.w DPLC_cc21_217-DPLC_cc21
00024350 0000                       DPLC_cc21_64: 	dc.w DPLC_cc21_21A-DPLC_cc21
00024352 0000                       DPLC_cc21_66: 	dc.w DPLC_cc21_21D-DPLC_cc21
00024354 0000                       DPLC_cc21_68: 	dc.w DPLC_cc21_222-DPLC_cc21
00024356 0000                       DPLC_cc21_6A: 	dc.w DPLC_cc21_225-DPLC_cc21
00024358 0000                       DPLC_cc21_6C: 	dc.w DPLC_cc21_22A-DPLC_cc21
0002435A 0000                       DPLC_cc21_6E: 	dc.w DPLC_cc21_22D-DPLC_cc21
0002435C 0000                       DPLC_cc21_70: 	dc.w DPLC_cc21_232-DPLC_cc21
0002435E 0000                       DPLC_cc21_72: 	dc.w DPLC_cc21_23B-DPLC_cc21
00024360 0000                       DPLC_cc21_74: 	dc.w DPLC_cc21_240-DPLC_cc21
00024362 0000                       DPLC_cc21_76: 	dc.w DPLC_cc21_247-DPLC_cc21
00024364 0000                       DPLC_cc21_78: 	dc.w DPLC_cc21_24E-DPLC_cc21
00024366 0000                       DPLC_cc21_7A: 	dc.w DPLC_cc21_255-DPLC_cc21
00024368 0000                       DPLC_cc21_7C: 	dc.w DPLC_cc21_258-DPLC_cc21
0002436A 0000                       DPLC_cc21_7E: 	dc.w DPLC_cc21_25F-DPLC_cc21
0002436C 0000                       DPLC_cc21_80: 	dc.w DPLC_cc21_266-DPLC_cc21
0002436E 0000                       DPLC_cc21_82: 	dc.w DPLC_cc21_26D-DPLC_cc21
00024370 0000                       DPLC_cc21_84: 	dc.w DPLC_cc21_276-DPLC_cc21
00024372 0000                       DPLC_cc21_86: 	dc.w DPLC_cc21_27F-DPLC_cc21
00024374 0000                       DPLC_cc21_88: 	dc.w DPLC_cc21_28A-DPLC_cc21
00024376 0000                       DPLC_cc21_8A: 	dc.w DPLC_cc21_295-DPLC_cc21
00024378 0000                       DPLC_cc21_8C: 	dc.w DPLC_cc21_29A-DPLC_cc21
0002437A 0000                       DPLC_cc21_8E: 	dc.w DPLC_cc21_2A1-DPLC_cc21
0002437C 0000                       DPLC_cc21_90: 	dc.w DPLC_cc21_2A6-DPLC_cc21
0002437E 0000                       DPLC_cc21_92: 	dc.w DPLC_cc21_2AD-DPLC_cc21
00024380 0000                       DPLC_cc21_94: 	dc.w DPLC_cc21_2B2-DPLC_cc21
00024382 0000                       DPLC_cc21_96: 	dc.w DPLC_cc21_2B9-DPLC_cc21
00024384 0000                       DPLC_cc21_98: 	dc.w DPLC_cc21_2C0-DPLC_cc21
00024386 0000                       DPLC_cc21_9A: 	dc.w DPLC_cc21_2CB-DPLC_cc21
00024388 0000                       DPLC_cc21_9C: 	dc.w DPLC_cc21_2D6-DPLC_cc21
0002438A 0000                       DPLC_cc21_9E: 	dc.w DPLC_cc21_2DB-DPLC_cc21
0002438C 0000                       DPLC_cc21_A0: 	dc.w DPLC_cc21_2E2-DPLC_cc21
0002438E 0000                       DPLC_cc21_A2: 	dc.w DPLC_cc21_2E5-DPLC_cc21
00024390 0000                       DPLC_cc21_A4: 	dc.w DPLC_cc21_2E8-DPLC_cc21
00024392 0000                       DPLC_cc21_A6: 	dc.w DPLC_cc21_2EB-DPLC_cc21
00024394 0000                       DPLC_cc21_A8: 	dc.w DPLC_cc21_2F2-DPLC_cc21
00024396 0000                       DPLC_cc21_AA: 	dc.w DPLC_cc21_2F9-DPLC_cc21
00024398 0000                       DPLC_cc21_AC: 	dc.w DPLC_cc21_300-DPLC_cc21
0002439A 0000                       DPLC_cc21_AE: 	dc.w DPLC_cc21_307-DPLC_cc21
0002439C 0000                       DPLC_cc21_B0: 	dc.w DPLC_cc21_30C-DPLC_cc21
0002439E 0000                       DPLC_cc21_B2: 	dc.w DPLC_cc21_311-DPLC_cc21
000243A0 0000                       DPLC_cc21_B4: 	dc.w DPLC_cc21_316-DPLC_cc21
000243A2 00                         DPLC_cc21_B6: 	dc.b $0
000243A3 02                         DPLC_cc21_B7: 	dc.b $2
000243A4 F000                       	dc.b $F0, $0
000243A6 1010                       	dc.b $10, $10
000243A8 03                         DPLC_cc21_BC: 	dc.b $3
000243A9 5012                       	dc.b $50, $12
000243AB 5018                       	dc.b $50, $18
000243AD 201E                       	dc.b $20, $1E
000243AF 03                         DPLC_cc21_C3: 	dc.b $3
000243B0 5021                       	dc.b $50, $21
000243B2 5018                       	dc.b $50, $18
000243B4 201E                       	dc.b $20, $1E
000243B6 03                         DPLC_cc21_CA: 	dc.b $3
000243B7 5021                       	dc.b $50, $21
000243B9 5018                       	dc.b $50, $18
000243BB 2027                       	dc.b $20, $27
000243BD 03                         DPLC_cc21_D1: 	dc.b $3
000243BE 802A                       	dc.b $80, $2A
000243C0 2033                       	dc.b $20, $33
000243C2 2036                       	dc.b $20, $36
000243C4 04                         DPLC_cc21_D8: 	dc.b $4
000243C5 7039                       	dc.b $70, $39
000243C7 5041                       	dc.b $50, $41
000243C9 5047                       	dc.b $50, $47
000243CB 104D                       	dc.b $10, $4D
000243CD 02                         DPLC_cc21_E1: 	dc.b $2
000243CE 7039                       	dc.b $70, $39
000243D0 B04F                       	dc.b $B0, $4F
000243D2 02                         DPLC_cc21_E6: 	dc.b $2
000243D3 505B                       	dc.b $50, $5B
000243D5 8061                       	dc.b $80, $61
000243D7 04                         DPLC_cc21_EB: 	dc.b $4
000243D8 505B                       	dc.b $50, $5B
000243DA 506A                       	dc.b $50, $6A
000243DC 5070                       	dc.b $50, $70
000243DE 1076                       	dc.b $10, $76
000243E0 02                         DPLC_cc21_F4: 	dc.b $2
000243E1 F51B                       	dc.b $F5, $1B
000243E3 152B                       	dc.b $15, $2B
000243E5 03                         DPLC_cc21_F9: 	dc.b $3
000243E6 7039                       	dc.b $70, $39
000243E8 3079                       	dc.b $30, $79
000243EA 507D                       	dc.b $50, $7D
000243EC 05                         DPLC_cc21_100: 	dc.b $5
000243ED 5083                       	dc.b $50, $83
000243EF 5089                       	dc.b $50, $89
000243F1 208F                       	dc.b $20, $8F
000243F3 5092                       	dc.b $50, $92
000243F5 0098                       	dc.b $0, $98
000243F7 06                         DPLC_cc21_10B: 	dc.b $6
000243F8 5083                       	dc.b $50, $83
000243FA 1099                       	dc.b $10, $99
000243FC 309B                       	dc.b $30, $9B
000243FE 509F                       	dc.b $50, $9F
00024400 30A5                       	dc.b $30, $A5
00024402 00A9                       	dc.b $0, $A9
00024404 04                         DPLC_cc21_118: 	dc.b $4
00024405 50AA                       	dc.b $50, $AA
00024407 10B0                       	dc.b $10, $B0
00024409 70B2                       	dc.b $70, $B2
0002440B 20BA                       	dc.b $20, $BA
0002440D 05                         DPLC_cc21_121: 	dc.b $5
0002440E 50BD                       	dc.b $50, $BD
00024410 30C3                       	dc.b $30, $C3
00024412 70C7                       	dc.b $70, $C7
00024414 20CF                       	dc.b $20, $CF
00024416 10D2                       	dc.b $10, $D2
00024418 04                         DPLC_cc21_12C: 	dc.b $4
00024419 50BD                       	dc.b $50, $BD
0002441B 10D4                       	dc.b $10, $D4
0002441D 70D6                       	dc.b $70, $D6
0002441F 20DE                       	dc.b $20, $DE
00024421 05                         DPLC_cc21_135: 	dc.b $5
00024422 5083                       	dc.b $50, $83
00024424 1099                       	dc.b $10, $99
00024426 008F                       	dc.b $0, $8F
00024428 70E1                       	dc.b $70, $E1
0002442A 20E9                       	dc.b $20, $E9
0002442C 04                         DPLC_cc21_140: 	dc.b $4
0002442D 70EC                       	dc.b $70, $EC
0002442F 50F4                       	dc.b $50, $F4
00024431 10FA                       	dc.b $10, $FA
00024433 50FC                       	dc.b $50, $FC
00024435 02                         DPLC_cc21_149: 	dc.b $2
00024436 70EC                       	dc.b $70, $EC
00024438 B102                       	dc.b $B1, $2
0002443A 02                         DPLC_cc21_14E: 	dc.b $2
0002443B 510E                       	dc.b $51, $E
0002443D 8114                       	dc.b $81, $14
0002443F 04                         DPLC_cc21_153: 	dc.b $4
00024440 510E                       	dc.b $51, $E
00024442 511D                       	dc.b $51, $1D
00024444 1123                       	dc.b $11, $23
00024446 5125                       	dc.b $51, $25
00024448 02                         DPLC_cc21_15C: 	dc.b $2
00024449 510E                       	dc.b $51, $E
0002444B B12B                       	dc.b $B1, $2B
0002444D 03                         DPLC_cc21_161: 	dc.b $3
0002444E 70EC                       	dc.b $70, $EC
00024450 0102                       	dc.b $1, $2
00024452 8137                       	dc.b $81, $37
00024454 06                         DPLC_cc21_168: 	dc.b $6
00024455 5140                       	dc.b $51, $40
00024457 1146                       	dc.b $11, $46
00024459 1148                       	dc.b $11, $48
0002445B 814A                       	dc.b $81, $4A
0002445D 0153                       	dc.b $1, $53
0002445F 0154                       	dc.b $1, $54
00024461 06                         DPLC_cc21_175: 	dc.b $6
00024462 5140                       	dc.b $51, $40
00024464 2155                       	dc.b $21, $55
00024466 1158                       	dc.b $11, $58
00024468 115A                       	dc.b $11, $5A
0002446A 815C                       	dc.b $81, $5C
0002446C 0153                       	dc.b $1, $53
0002446E 04                         DPLC_cc21_182: 	dc.b $4
0002446F 5165                       	dc.b $51, $65
00024471 116B                       	dc.b $11, $6B
00024473 816D                       	dc.b $81, $6D
00024475 1176                       	dc.b $11, $76
00024477 05                         DPLC_cc21_18B: 	dc.b $5
00024478 5178                       	dc.b $51, $78
0002447A 217E                       	dc.b $21, $7E
0002447C 1181                       	dc.b $11, $81
0002447E 7183                       	dc.b $71, $83
00024480 218B                       	dc.b $21, $8B
00024482 04                         DPLC_cc21_196: 	dc.b $4
00024483 5178                       	dc.b $51, $78
00024485 118E                       	dc.b $11, $8E
00024487 8190                       	dc.b $81, $90
00024489 1199                       	dc.b $11, $99
0002448B 05                         DPLC_cc21_19F: 	dc.b $5
0002448C 5140                       	dc.b $51, $40
0002448E 819B                       	dc.b $81, $9B
00024490 115A                       	dc.b $11, $5A
00024492 11A4                       	dc.b $11, $A4
00024494 0153                       	dc.b $1, $53
00024496 02                         DPLC_cc21_1AA: 	dc.b $2
00024497 51A6                       	dc.b $51, $A6
00024499 B1AC                       	dc.b $B1, $AC
0002449B 02                         DPLC_cc21_1AF: 	dc.b $2
0002449C 505B                       	dc.b $50, $5B
0002449E B1B8                       	dc.b $B1, $B8
000244A0 02                         DPLC_cc21_1B4: 	dc.b $2
000244A1 51A6                       	dc.b $51, $A6
000244A3 B1C4                       	dc.b $B1, $C4
000244A5 02                         DPLC_cc21_1B9: 	dc.b $2
000244A6 505B                       	dc.b $50, $5B
000244A8 B1D0                       	dc.b $B1, $D0
000244AA 04                         DPLC_cc21_1BE: 	dc.b $4
000244AB 51DC                       	dc.b $51, $DC
000244AD 11E2                       	dc.b $11, $E2
000244AF B1E4                       	dc.b $B1, $E4
000244B1 01F0                       	dc.b $1, $F0
000244B3 03                         DPLC_cc21_1C7: 	dc.b $3
000244B4 51F1                       	dc.b $51, $F1
000244B6 11F7                       	dc.b $11, $F7
000244B8 B1F9                       	dc.b $B1, $F9
000244BA 04                         DPLC_cc21_1CE: 	dc.b $4
000244BB 51DC                       	dc.b $51, $DC
000244BD 1205                       	dc.b $12, $5
000244BF B207                       	dc.b $B2, $7
000244C1 01F0                       	dc.b $1, $F0
000244C3 03                         DPLC_cc21_1D7: 	dc.b $3
000244C4 51F1                       	dc.b $51, $F1
000244C6 11F7                       	dc.b $11, $F7
000244C8 B213                       	dc.b $B2, $13
000244CA 02                         DPLC_cc21_1DE: 	dc.b $2
000244CB 521F                       	dc.b $52, $1F
000244CD B225                       	dc.b $B2, $25
000244CF 02                         DPLC_cc21_1E3: 	dc.b $2
000244D0 510E                       	dc.b $51, $E
000244D2 B231                       	dc.b $B2, $31
000244D4 02                         DPLC_cc21_1E8: 	dc.b $2
000244D5 521F                       	dc.b $52, $1F
000244D7 B23D                       	dc.b $B2, $3D
000244D9 02                         DPLC_cc21_1ED: 	dc.b $2
000244DA 510E                       	dc.b $51, $E
000244DC B249                       	dc.b $B2, $49
000244DE 04                         DPLC_cc21_1F2: 	dc.b $4
000244DF 5255                       	dc.b $52, $55
000244E1 125B                       	dc.b $12, $5B
000244E3 B25D                       	dc.b $B2, $5D
000244E5 0269                       	dc.b $2, $69
000244E7 02                         DPLC_cc21_1FB: 	dc.b $2
000244E8 726A                       	dc.b $72, $6A
000244EA B272                       	dc.b $B2, $72
000244EC 04                         DPLC_cc21_200: 	dc.b $4
000244ED 5255                       	dc.b $52, $55
000244EF 127E                       	dc.b $12, $7E
000244F1 B280                       	dc.b $B2, $80
000244F3 0269                       	dc.b $2, $69
000244F5 02                         DPLC_cc21_209: 	dc.b $2
000244F6 726A                       	dc.b $72, $6A
000244F8 B28C                       	dc.b $B2, $8C
000244FA 01                         DPLC_cc21_20E: 	dc.b $1
000244FB F298                       	dc.b $F2, $98
000244FD 01                         DPLC_cc21_211: 	dc.b $1
000244FE F2A8                       	dc.b $F2, $A8
00024500 01                         DPLC_cc21_214: 	dc.b $1
00024501 F2B8                       	dc.b $F2, $B8
00024503 01                         DPLC_cc21_217: 	dc.b $1
00024504 F2C8                       	dc.b $F2, $C8
00024506 01                         DPLC_cc21_21A: 	dc.b $1
00024507 F2D8                       	dc.b $F2, $D8
00024509 02                         DPLC_cc21_21D: 	dc.b $2
0002450A B2E8                       	dc.b $B2, $E8
0002450C 22F4                       	dc.b $22, $F4
0002450E 01                         DPLC_cc21_222: 	dc.b $1
0002450F F2F7                       	dc.b $F2, $F7
00024511 02                         DPLC_cc21_225: 	dc.b $2
00024512 B307                       	dc.b $B3, $7
00024514 2313                       	dc.b $23, $13
00024516 01                         DPLC_cc21_22A: 	dc.b $1
00024517 F316                       	dc.b $F3, $16
00024519 02                         DPLC_cc21_22D: 	dc.b $2
0002451A 5326                       	dc.b $53, $26
0002451C B32C                       	dc.b $B3, $2C
0002451E 04                         DPLC_cc21_232: 	dc.b $4
0002451F 5338                       	dc.b $53, $38
00024521 733E                       	dc.b $73, $3E
00024523 1346                       	dc.b $13, $46
00024525 0348                       	dc.b $3, $48
00024527 02                         DPLC_cc21_23B: 	dc.b $2
00024528 D349                       	dc.b $D3, $49
0002452A 3517                       	dc.b $35, $17
0002452C 03                         DPLC_cc21_240: 	dc.b $3
0002452D 2357                       	dc.b $23, $57
0002452F 235A                       	dc.b $23, $5A
00024531 F35D                       	dc.b $F3, $5D
00024533 03                         DPLC_cc21_247: 	dc.b $3
00024534 B36D                       	dc.b $B3, $6D
00024536 7379                       	dc.b $73, $79
00024538 0078                       	dc.b $0, $78
0002453A 03                         DPLC_cc21_24E: 	dc.b $3
0002453B 7381                       	dc.b $73, $81
0002453D 3389                       	dc.b $33, $89
0002453F 238D                       	dc.b $23, $8D
00024541 01                         DPLC_cc21_255: 	dc.b $1
00024542 8390                       	dc.b $83, $90
00024544 03                         DPLC_cc21_258: 	dc.b $3
00024545 7399                       	dc.b $73, $99
00024547 03A1                       	dc.b $3, $A1
00024549 33A2                       	dc.b $33, $A2
0002454B 03                         DPLC_cc21_25F: 	dc.b $3
0002454C 73A6                       	dc.b $73, $A6
0002454E 33AE                       	dc.b $33, $AE
00024550 23B2                       	dc.b $23, $B2
00024552 03                         DPLC_cc21_266: 	dc.b $3
00024553 B3B5                       	dc.b $B3, $B5
00024555 13C1                       	dc.b $13, $C1
00024557 03C3                       	dc.b $3, $C3
00024559 04                         DPLC_cc21_26D: 	dc.b $4
0002455A B3C4                       	dc.b $B3, $C4
0002455C 33D0                       	dc.b $33, $D0
0002455E 03D4                       	dc.b $3, $D4
00024560 03D5                       	dc.b $3, $D5
00024562 04                         DPLC_cc21_276: 	dc.b $4
00024563 B3D6                       	dc.b $B3, $D6
00024565 33E2                       	dc.b $33, $E2
00024567 03E6                       	dc.b $3, $E6
00024569 03E7                       	dc.b $3, $E7
0002456B 05                         DPLC_cc21_27F: 	dc.b $5
0002456C 83E8                       	dc.b $83, $E8
0002456E 13F1                       	dc.b $13, $F1
00024570 53F3                       	dc.b $53, $F3
00024572 13F9                       	dc.b $13, $F9
00024574 03FB                       	dc.b $3, $FB
00024576 05                         DPLC_cc21_28A: 	dc.b $5
00024577 83FC                       	dc.b $83, $FC
00024579 1405                       	dc.b $14, $5
0002457B 53F3                       	dc.b $53, $F3
0002457D 13F9                       	dc.b $13, $F9
0002457F 03FB                       	dc.b $3, $FB
00024581 02                         DPLC_cc21_295: 	dc.b $2
00024582 8407                       	dc.b $84, $7
00024584 7410                       	dc.b $74, $10
00024586 03                         DPLC_cc21_29A: 	dc.b $3
00024587 8418                       	dc.b $84, $18
00024589 2421                       	dc.b $24, $21
0002458B 1424                       	dc.b $14, $24
0002458D 02                         DPLC_cc21_2A1: 	dc.b $2
0002458E 8426                       	dc.b $84, $26
00024590 742F                       	dc.b $74, $2F
00024592 03                         DPLC_cc21_2A6: 	dc.b $3
00024593 8418                       	dc.b $84, $18
00024595 2437                       	dc.b $24, $37
00024597 143A                       	dc.b $14, $3A
00024599 02                         DPLC_cc21_2AD: 	dc.b $2
0002459A 543C                       	dc.b $54, $3C
0002459C B442                       	dc.b $B4, $42
0002459E 03                         DPLC_cc21_2B2: 	dc.b $3
0002459F 844E                       	dc.b $84, $4E
000245A1 3457                       	dc.b $34, $57
000245A3 045B                       	dc.b $4, $5B
000245A5 03                         DPLC_cc21_2B9: 	dc.b $3
000245A6 745C                       	dc.b $74, $5C
000245A8 1464                       	dc.b $14, $64
000245AA B466                       	dc.b $B4, $66
000245AC 05                         DPLC_cc21_2C0: 	dc.b $5
000245AD 7472                       	dc.b $74, $72
000245AF 147A                       	dc.b $14, $7A
000245B1 547C                       	dc.b $54, $7C
000245B3 3482                       	dc.b $34, $82
000245B5 0486                       	dc.b $4, $86
000245B7 05                         DPLC_cc21_2CB: 	dc.b $5
000245B8 7487                       	dc.b $74, $87
000245BA 147A                       	dc.b $14, $7A
000245BC 548F                       	dc.b $54, $8F
000245BE 3482                       	dc.b $34, $82
000245C0 0486                       	dc.b $4, $86
000245C2 02                         DPLC_cc21_2D6: 	dc.b $2
000245C3 2495                       	dc.b $24, $95
000245C5 F498                       	dc.b $F4, $98
000245C7 03                         DPLC_cc21_2DB: 	dc.b $3
000245C8 24A8                       	dc.b $24, $A8
000245CA B4AB                       	dc.b $B4, $AB
000245CC 24B7                       	dc.b $24, $B7
000245CE 01                         DPLC_cc21_2E2: 	dc.b $1
000245CF B4BA                       	dc.b $B4, $BA
000245D1 01                         DPLC_cc21_2E5: 	dc.b $1
000245D2 54C6                       	dc.b $54, $C6
000245D4 01                         DPLC_cc21_2E8: 	dc.b $1
000245D5 14CC                       	dc.b $14, $CC
000245D7 03                         DPLC_cc21_2EB: 	dc.b $3
000245D8 7381                       	dc.b $73, $81
000245DA 3389                       	dc.b $33, $89
000245DC 238D                       	dc.b $23, $8D
000245DE 03                         DPLC_cc21_2F2: 	dc.b $3
000245DF 7399                       	dc.b $73, $99
000245E1 03A1                       	dc.b $3, $A1
000245E3 33A2                       	dc.b $33, $A2
000245E5 03                         DPLC_cc21_2F9: 	dc.b $3
000245E6 B4CE                       	dc.b $B4, $CE
000245E8 14DA                       	dc.b $14, $DA
000245EA 34DC                       	dc.b $34, $DC
000245EC 03                         DPLC_cc21_300: 	dc.b $3
000245ED 54E0                       	dc.b $54, $E0
000245EF B4E6                       	dc.b $B4, $E6
000245F1 1074                       	dc.b $10, $74
000245F3 02                         DPLC_cc21_307: 	dc.b $2
000245F4 F4F2                       	dc.b $F4, $F2
000245F6 2502                       	dc.b $25, $2
000245F8 02                         DPLC_cc21_30C: 	dc.b $2
000245F9 F505                       	dc.b $F5, $5
000245FB 1515                       	dc.b $15, $15
000245FD 02                         DPLC_cc21_311: 	dc.b $2
000245FE F52D                       	dc.b $F5, $2D
00024600 253D                       	dc.b $25, $3D
00024602 02                         DPLC_cc21_316: 	dc.b $2
00024603 F540                       	dc.b $F5, $40
00024605 2550                       	dc.b $25, $50
00024608 00                         	even
00024608 00                         	even
00024608                            
00024608                            ; ---------------------------------------------------------------------------
00024608                            ; Uncompressed graphics	- Sonic
00024608                            ; ---------------------------------------------------------------------------
00024608                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002F068                            		even
0002F068                            ; ---------------------------------------------------------------------------
0002F068                            ; Compressed graphics - various
0002F068                            ; ---------------------------------------------------------------------------
0002F068                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002F16C                            		even
0002F16C                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002F1A6                            		even
0002F1A6                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002F33C                            		even
0002F33C                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002F484                            		even
0002F484                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F58E                            		even
0002F58E                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F5E0                            		even
0002F5E0                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002F828                            		even
0002F828                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002F9AE                            		even
0002F9AE                            ; ---------------------------------------------------------------------------
0002F9AE                            ; Sprite mappings - walls of the special stage
0002F9AE                            ; ---------------------------------------------------------------------------
0002F9AE                            Map_SSWalls:
0002F9AE                            	include "_maps\SSwalls.asm"
0002F9AE                            ; ---------------------------------------------------------------------------
0002F9AE                            ; Sprite mappings - walls of the special stage
0002F9AE                            ; ---------------------------------------------------------------------------
0002F9AE 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002F9B2 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002F9B6 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002F9BA 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002F9BE 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002F9C2 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002F9C6 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002F9CA 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002F9CE 01                         byte_2C584:	dc.b 1
0002F9CF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002F9D4 01                         byte_2C58A:	dc.b 1
0002F9D5 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002F9DA 01                         byte_2C590:	dc.b 1
0002F9DB F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002F9E0 01                         byte_2C596:	dc.b 1
0002F9E1 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002F9E6 01                         byte_2C59C:	dc.b 1
0002F9E7 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002F9EC 01                         byte_2C5A2:	dc.b 1
0002F9ED F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002F9F2 01                         byte_2C5A8:	dc.b 1
0002F9F3 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002F9F8 01                         byte_2C5AE:	dc.b 1
0002F9F9 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002F9FE 01                         byte_2C5B4:	dc.b 1
0002F9FF F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002FA04 01                         byte_2C5BA:	dc.b 1
0002FA05 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002FA0A 01                         byte_2C5C0:	dc.b 1
0002FA0B F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002FA10 01                         byte_2C5C6:	dc.b 1
0002FA11 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002FA16 01                         byte_2C5CC:	dc.b 1
0002FA17 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002FA1C 01                         byte_2C5D2:	dc.b 1
0002FA1D F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002FA22 01                         byte_2C5D8:	dc.b 1
0002FA23 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002FA28 01                         byte_2C5DE:	dc.b 1
0002FA29 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002FA2E                            		even
0002FA2E                            		even
0002FA2E                            ; ---------------------------------------------------------------------------
0002FA2E                            ; Compressed graphics - special stage
0002FA2E                            ; ---------------------------------------------------------------------------
0002FA2E                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00030366                            		even
00030366                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003049A                            		even
0003049A                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003112A                            		even
0003112A                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003142A                            		even
0003142A                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003191E                            		even
0003191E                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00031A0C                            		even
00031A0C                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00031ADC                            		even
00031ADC                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00031BD2                            		even
00031BD2                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00031C30                            		even
00031C30                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00031CC2                            		even
00031CC2                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00031D84                            		even
00031D84                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00031E52                            		even
00031E52                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00031F1E                            		even
00031F1E                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00031FE6                            		even
00031FE6                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000320B0                            		even
000320B0                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00032180                            		even
00032180                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00032374                            		even
00032374                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000324DC                            		even
000324DC                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003258C                            		even
0003258C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00032666                            		even
00032666                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000326EA                            		even
000326EA                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00032868                            		even
00032868                            ; ---------------------------------------------------------------------------
00032868                            ; Compressed graphics - GHZ stuff
00032868                            ; ---------------------------------------------------------------------------
00032868                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000328B2                            		even
000328B2                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000329CC                            		even
000329CC                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00032AB8                            		even
00032AB8                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00032B00                            		even
00032B00                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00032C9E                            		even
00032C9E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00032D1A                            		even
00032D1A                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00032F2E                            		even
00032F2E                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003305A                            		even
0003305A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00033188                            		even
00033188                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00033226                            		even
00033226                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00033286                            		even
00033286                            ; ---------------------------------------------------------------------------
00033286                            ; Compressed graphics - LZ stuff
00033286                            ; ---------------------------------------------------------------------------
00033286                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000333AA                            		even
000333AA                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00033B9E                            		even
00033B9E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00033D1E                            		even
00033D1E                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00033E88                            		even
00033E88                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000344DE                            		even
000344DE                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00034594                            		even
00034594                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00034636                            		even
00034636                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00034792                            		even
00034792                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000347F6                            		even
000347F6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00034948                            		even
00034948                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00034E2A                            		even
00034E2A                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00034F9A                            		even
00034F9A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00035252                            		even
00035252                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003538A                            		even
0003538A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000354B4                            		even
000354B4                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000355C4                            		even
000355C4                            ; ---------------------------------------------------------------------------
000355C4                            ; Compressed graphics - MZ stuff
000355C4                            ; ---------------------------------------------------------------------------
000355C4                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00035852                            		even
00035852                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00035910                            		even
00035910                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000359C8                            		even
000359C8                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00035A1C                            		even
00035A1C                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00035CFA                            		even
00035CFA                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00036610                            		even
00036610                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00036774                            		even
00036774                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000367FC                            		even
000367FC                            ; ---------------------------------------------------------------------------
000367FC                            ; Compressed graphics - SLZ stuff
000367FC                            ; ---------------------------------------------------------------------------
000367FC                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00036A38                            		even
00036A38                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00036B7E                            		even
00036B7E                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00036DC2                            		even
00036DC2                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00036E24                            		even
00036E24                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00036F06                            		even
00036F06                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000370E8                            		even
000370E8                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000371F4                            		even
000371F4                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00037298                            		even
00037298                            ; ---------------------------------------------------------------------------
00037298                            ; Compressed graphics - SYZ stuff
00037298                            ; ---------------------------------------------------------------------------
00037298                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00037402                            		even
00037402                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00037464                            		even
00037464                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00037546                            		even
00037546                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000377D4                            		even
000377D4                            ; ---------------------------------------------------------------------------
000377D4                            ; Compressed graphics - SBZ stuff
000377D4                            ; ---------------------------------------------------------------------------
000377D4                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00037828                            		even
00037828                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00037AC4                            		even
00037AC4                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00037CC8                            		even
00037CC8                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00037E66                            		even
00037E66                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00038196                            		even
00038196                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00038374                            		even
00038374                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
000383CC                            		even
000383CC                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003854C                            		even
0003854C                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003864A                            		even
0003864A                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000387D6                            		even
000387D6                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00038826                            		even
00038826                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003887E                            		even
0003887E                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003897A                            		even
0003897A                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00038A90                            		even
00038A90                            ; ---------------------------------------------------------------------------
00038A90                            ; Compressed graphics - enemies
00038A90                            ; ---------------------------------------------------------------------------
00038A90                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00038E50                            		even
00038E50                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003933E                            		even
0003933E                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00039700 00                         		even
00039700                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
000398E8                            		even
000398E8                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00039FD2                            		even
00039FD2                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003A23A                            		even
0003A23A                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003A4C4                            		even
0003A4C4                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003A9E8                            		even
0003A9E8                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003ABDE                            		even
0003ABDE                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003B1FC                            		even
0003B1FC                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003B5E4                            		even
0003B5E4                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003B8E0                            		even
0003B8E0                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003BB28                            		even
0003BB28                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003BDC0                            		even
0003BDC0                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003BF9E                            		even
0003BF9E                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003C12C                            		even
0003C12C                            ; ---------------------------------------------------------------------------
0003C12C                            ; Compressed graphics - various
0003C12C                            ; ---------------------------------------------------------------------------
0003C12C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003C73A                            		even
0003C73A                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003C830                            		even
0003C830                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003C936                            		even
0003C936                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003CA2A                            		even
0003CA2A                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003CF6E                            		even
0003CF6E                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003D5D4                            		even
0003D5D4                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003D684                            		even
0003D684                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003D816                            		even
0003D816                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003D918                            		even
0003D918                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003D9F4                            		even
0003D9F4                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003DE70                            		even
0003DE70                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003DF30                            		even
0003DF30                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003E0A4                            		even
0003E0A4                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003E3A6                            		even
0003E3A6                            ; ---------------------------------------------------------------------------
0003E3A6                            ; Compressed graphics - continue screen
0003E3A6                            ; ---------------------------------------------------------------------------
0003E3A6                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003E656                            		even
0003E656                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003E890                            		even
0003E890                            ; ---------------------------------------------------------------------------
0003E890                            ; Compressed graphics - animals
0003E890                            ; ---------------------------------------------------------------------------
0003E890                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003E9E8                            		even
0003E9E8                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003EB44                            		even
0003EB44                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003ECC0                            		even
0003ECC0                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003EDDC                            		even
0003EDDC                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003EF12                            		even
0003EF12                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003F04C                            		even
0003F04C                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003F1A8                            		even
0003F1A8                            ; ---------------------------------------------------------------------------
0003F1A8                            ; Compressed graphics - primary patterns and block mappings
0003F1A8                            ; ---------------------------------------------------------------------------
0003F1A8                            Blk16_GHZ:	incbin	map16\ghz.bin
0003FABC                            		even
0003FABC                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000413CA                            		even
000413CA                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0004274A                            		even
0004274A                            Blk256_GHZ:	incbin	map256\ghz.bin
00044A48                            		even
00044A48                            Blk16_LZ:	incbin	map16\lz.bin
00044D12                            		even
00044D12                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004679E                            		even
0004679E                            Blk256_LZ:	incbin	map256\lz.bin
00048F82                            		even
00048F82                            Blk16_MZ:	incbin	map16\mz.bin
000496DE                            		even
000496DE                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004BF66                            		even
0004BF66                            Blk256_MZ:	incbin	map256\mz.bin
0004D6EA                            		even
0004D6EA                            Blk16_SLZ:	incbin	map16\slz.bin
0004D9D0                            		even
0004D9D0                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004EAF2                            		even
0004EAF2                            Blk256_SLZ:	incbin	map256\slz.bin
0004ECAC                            		even
0004ECAC                            Blk16_SYZ:	incbin	map16\syz.bin
0004F540                            		even
0004F540                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00052BAE                            		even
00052BAE                            Blk256_SYZ:	incbin	map256\syz.bin
00054F30                            		even
00054F30                            Blk16_SBZ:	incbin	map16\sbz.bin
00055DCA                            		even
00055DCA                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00058576                            		even
00058576                            Blk256_SBZ:	incbin	map256\sbz.bin
0005AFC6                            		even
0005AFC6                            ; ---------------------------------------------------------------------------
0005AFC6                            ; Compressed graphics - bosses and ending sequence
0005AFC6                            ; ---------------------------------------------------------------------------
0005AFC6                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005B7E0 00                         		even
0005B7E0                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005BACA                            		even
0005BACA                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005C34E                            		even
0005C34E                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005D0A4 00                         		even
0005D0A4                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005D80C                            		even
0005D80C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005DD8C                            		even
0005DD8C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005DEAC                            		even
0005DEAC                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005E0AA                            		even
0005E0AA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005F288                            		even
0005F288                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0005FBCC                            		even
0005FBCC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0005FFA2                            		even
0005FFA2                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00060532                            		even
00060532                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000607BA                            		even
000607BA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00060DB8                            		even
00060DB8                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00061040                            		even
00061040                            		incbin	misc\padding2.bin
00061144                            		even
00061144                            ; ---------------------------------------------------------------------------
00061144                            ; Collision data
00061144                            ; ---------------------------------------------------------------------------
00061144                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00061244                            		even
00061244                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00062244                            		even
00062244                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00063244                            		even
00063244                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000633FC 00                         		even
000633FC                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000634C4                            		even
000634C4                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00063654                            		even
00063654                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00063848                            		even
00063848                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00063A3C                            		even
00063A3C                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00063C94                            		even
00063C94                            ; ---------------------------------------------------------------------------
00063C94                            ; Special layouts
00063C94                            ; ---------------------------------------------------------------------------
00063C94                            SS_1:		incbin	sslayout\1.bin
00063F0E                            		even
00063F0E                            SS_2:		incbin	sslayout\2.bin
00064320                            		even
00064320                            SS_3:		incbin	sslayout\3.bin
0006467C                            		even
0006467C                            SS_4:		incbin	sslayout\4.bin
00064B56                            		even
00064B56                            SS_5:		incbin	sslayout\5.bin
00065028                            		even
00065028                            SS_6:		incbin	sslayout\6.bin
00065338                            		even
00065338                            ; ---------------------------------------------------------------------------
00065338                            ; Animated uncompressed graphics
00065338                            ; ---------------------------------------------------------------------------
00065338                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00065538                            		even
00065538                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00065938                            		even
00065938                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00065DB8                            		even
00065DB8                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000660B8                            		even
000660B8                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
000666B8                            		even
000666B8                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
000669B8                            		even
000669B8                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00067438                            		even
00067438                            
00067438                            ; ---------------------------------------------------------------------------
00067438                            ; Level	layout index
00067438                            ; ---------------------------------------------------------------------------
00067438 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006743E 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00067444 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006744A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00067450 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00067456 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006745C 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00067462 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00067468 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006746E 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00067474 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006747A 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00067480 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00067486 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006748C 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00067492 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00067498 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006749E 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000674A4 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000674AA 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000674B0 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000674B6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000674BC 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000674C2 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000674C8 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000674CE 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000674D4 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000674DA 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000674E0                            
000674E0                            Level_GHZ1:	incbin	levels\ghz1.bin
000675D2                            		even
000675D2 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000675D6                            Level_GHZ2:	incbin	levels\ghz2.bin
0006769E                            		even
0006769E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000676A2                            Level_GHZ3:	incbin	levels\ghz3.bin
000677C4                            		even
000677C4                            Level_GHZbg:	incbin	levels\ghzbg.bin
000677E6                            		even
000677E6 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000677EA 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000677EE                            
000677EE                            Level_LZ1:	incbin	levels\lz1.bin
000678F0                            		even
000678F0                            Level_LZbg:	incbin	levels\lzbg.bin
000679F2                            		even
000679F2 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000679F6                            Level_LZ2:	incbin	levels\lz2.bin
00067A90                            		even
00067A90 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00067A94                            Level_LZ3:	incbin	levels\lz3.bin
00067BAE                            		even
00067BAE 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00067BB2                            Level_SBZ3:	incbin	levels\sbz3.bin
00067C6C                            		even
00067C6C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00067C70                            
00067C70                            Level_MZ1:	incbin	levels\mz1.bin
00067D0E                            		even
00067D0E                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00067D88                            		even
00067D88                            Level_MZ2:	incbin	levels\mz2.bin
00067E2C                            		even
00067E2C                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00067EBE                            		even
00067EBE 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00067EC2                            Level_MZ3:	incbin	levels\mz3.bin
00067FA4                            		even
00067FA4                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00068048 00                         		even
00068048 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006804C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00068050                            
00068050                            Level_SLZ1:	incbin	levels\slz1.bin
00068162                            		even
00068162                            Level_SLZbg:	incbin	levels\slzbg.bin
0006817C                            		even
0006817C                            Level_SLZ2:	incbin	levels\slz2.bin
0006826C                            		even
0006826C                            Level_SLZ3:	incbin	levels\slz3.bin
00068386                            		even
00068386 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006838A                            
0006838A                            Level_SYZ1:	incbin	levels\syz1.bin
00068446 00                         		even
00068446                            Level_SYZbg:	incbin	levels\syzbg.bin
00068480                            		even
00068480 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00068484                            Level_SYZ2:	incbin	levels\syz2.bin
00068588                            		even
00068588 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006858C                            Level_SYZ3:	incbin	levels\syz3.bin
000686E6 00                         		even
000686E6 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000686EA 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000686EE                            
000686EE                            Level_SBZ1:	incbin	levels\sbz1.bin
00068810                            		even
00068810                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006884E                            		even
0006884E                            Level_SBZ2:	incbin	levels\sbz2.bin
00068990                            		even
00068990                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00068AFA                            		even
00068AFA 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00068AFE 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00068B02                            Level_End:	incbin	levels\ending.bin
00068B32 00                         		even
00068B32 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00068B36                            
00068B36                            ; ---------------------------------------------------------------------------
00068B36                            ; Animated uncompressed giant ring graphics
00068B36                            ; ---------------------------------------------------------------------------
00068B36                            Art_BigRing:	incbin	artunc\bigring.bin
00069776                            		even
00069776                            
00069776                            		incbin	misc\padding3.bin
00069812                            		even
00069812                            
00069812                            ; ---------------------------------------------------------------------------
00069812                            ; Sprite locations index
00069812                            ; ---------------------------------------------------------------------------
00069812 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069816 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006981A 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006981E 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069822 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069826 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006982A 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006982E 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069832 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069836 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006983A 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006983E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069842 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069846 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006984A 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006984E 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069852 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069856 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006985A 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006985E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069862 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069866 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006986A 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006986E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069872 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069876 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006987A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006987E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069882 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00069886 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006988A 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006988E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00069892 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00069896 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006989A 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006989E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000698A2 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000698A8                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006A0CA                            		even
0006A0CA                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006A17E                            		even
0006A17E                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006ABC2                            		even
0006ABC2                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006AF6A                            		even
0006AF6A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006B2A0                            		even
0006B2A0                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006B7EC                            		even
0006B7EC                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006BC84                            		even
0006BC84                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006BCB6                            		even
0006BCB6                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006BCE8                            		even
0006BCE8                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006BD1A                            		even
0006BD1A                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006BD4C                            		even
0006BD4C                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006BD96                            		even
0006BD96                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006BDD4                            		even
0006BDD4                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006C140                            		even
0006C140                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006C5EA                            		even
0006C5EA                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006CB60                            		even
0006CB60                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006D0A0                            		even
0006D0A0                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006D508                            		even
0006D508                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006DAEA                            		even
0006DAEA                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006E156                            		even
0006E156                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006E6C0                            		even
0006E6C0                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006ECC6                            		even
0006ECC6                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006F404                            		even
0006F404                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0006FAE2                            		even
0006FAE2                            ObjPos_FZ:	incbin	objpos\fz.bin
0006FAF4                            		even
0006FAF4                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0006FB26                            		even
0006FB26                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0006FB58                            		even
0006FB58                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0006FB8A                            		even
0006FB8A                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0006FBBC                            		even
0006FBBC                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0006FBEE                            		even
0006FBEE                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0006FC26                            		even
0006FC26                            ObjPos_End:	incbin	objpos\ending.bin
0006FD82                            		even
0006FD82 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0006FD88                            ; ---------------------------------------------------------------------------
0006FD88                            		incbin	misc\padding4.bin
000703B2                            		even
000703B2                            
000703B2 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000703B6 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000703BA 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000703BE 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000703C2 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000703C6 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000703CA                            ; ---------------------------------------------------------------------------
000703CA                            ; PSG instruments used in music
000703CA                            ; ---------------------------------------------------------------------------
000703CA 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000703D6 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000703E2 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000703EE                            PSG1:		incbin	sound\psg1.bin
00070405                            PSG2:		incbin	sound\psg2.bin
0007040C                            PSG3:		incbin	sound\psg3.bin
0007041D                            PSG4:		incbin	sound\psg4.bin
00070428                            PSG6:		incbin	sound\psg6.bin
00070437                            PSG5:		incbin	sound\psg5.bin
00070461                            PSG7:		incbin	sound\psg7.bin
0007047D                            PSG8:		incbin	sound\psg8.bin
000704A5                            PSG9:		incbin	sound\psg9.bin
000704B6                            
000704B6 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000704BE                            ; ---------------------------------------------------------------------------
000704BE                            ; Music	Pointers
000704BE                            ; ---------------------------------------------------------------------------
000704BE 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000704C6 0000 0000 0000 0000        		dc.l Music83, Music84
000704CE 0000 0000 0000 0000        		dc.l Music85, Music86
000704D6 0000 0000 0000 0000        		dc.l Music87, Music88
000704DE 0000 0000 0000 0000        		dc.l Music89, Music8A
000704E6 0000 0000 0000 0000        		dc.l Music8B, Music8C
000704EE 0000 0000 0000 0000        		dc.l Music8D, Music8E
000704F6 0000 0000 0000 0000        		dc.l Music8F, Music90
000704FE 0000 0000 0000 0000        		dc.l Music91, Music92
00070506 0000 0000 0000 0000        		dc.l Music93, Music94
0007050E 0000 0000 0000 0000        		dc.l Music95, Music96
00070516 0000 0000 0000 0000        		dc.l Music97, Music98
0007051E 0000 0000 0000 0000        		dc.l Music99, Music9A
00070526 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007052E 0000 0000 0000 0000        		dc.l Music9D, Music9E
00070536 0000 0000                  		dc.l Music9F
0007053A                            ; ---------------------------------------------------------------------------
0007053A                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007053A                            ; ---------------------------------------------------------------------------
0007053A 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007054A 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007055A 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007056A 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007057A 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007058A 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007059A 9090 9090                  		dc.b $90, $90, $90, $90
0007059E                            
0007059E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007059E                            
0007059E                            
0007059E                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007059E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000705A6 4E71                       		nop	
000705A8 4E71                       		nop	
000705AA 4E71                       		nop	
000705AC                            
000705AC                            loc_71B5A:
000705AC 0839 0000 00A1 1100        		btst	#0,($A11100).l
000705B4 66F6                       		bne.s	loc_71B5A
000705B6                            
000705B6 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
000705BE 6700                       		beq.s	loc_71B82
000705C0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000705C8 4E71                       		nop	
000705CA 4E71                       		nop	
000705CC 4E71                       		nop	
000705CE 4E71                       		nop	
000705D0 4E71                       		nop	
000705D2 60CA                       		bra.s	sub_71B4C
000705D4                            ; ===========================================================================
000705D4                            
000705D4                            loc_71B82:
000705D4 4DF9 00FF F000             		lea	($FFF000).l,a6
000705DA 422E 000E                  		clr.b	$E(a6)
000705DE 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000705E2 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000705E6 532E 0001                  		subq.b	#1,1(a6)
000705EA 6600                       		bne.s	loc_71B9E
000705EC 4EBA 0000                  		jsr	sub_7260C(pc)
000705F0                            
000705F0                            loc_71B9E:
000705F0 102E 0004                  		move.b	4(a6),d0
000705F4 6700                       		beq.s	loc_71BA8
000705F6 4EBA 0000                  		jsr	sub_72504(pc)
000705FA                            
000705FA                            loc_71BA8:
000705FA 4A2E 0024                  		tst.b	$24(a6)
000705FE 6700                       		beq.s	loc_71BB2
00070600 4EBA 0000                  		jsr	sub_7267C(pc)
00070604                            
00070604                            loc_71BB2:
00070604 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00070608 6700                       		beq.s	loc_71BBC	; if not, branch
0007060A 4EBA 0000                  		jsr	Sound_Play(pc)
0007060E                            
0007060E                            loc_71BBC:
0007060E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00070614 6700                       		beq.s	loc_71BC8
00070616 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007061A                            
0007061A                            loc_71BC8:
0007061A 4BEE 0040                  		lea	$40(a6),a5
0007061E 4A15                       		tst.b	(a5)
00070620 6A00                       		bpl.s	loc_71BD4
00070622 4EBA 0000                  		jsr	sub_71C4E(pc)
00070626                            
00070626                            loc_71BD4:
00070626 422E 0008                  		clr.b	8(a6)
0007062A 7E05                       		moveq	#5,d7
0007062C                            
0007062C                            loc_71BDA:
0007062C DAFC 0030                  		adda.w	#$30,a5
00070630 4A15                       		tst.b	(a5)
00070632 6A00                       		bpl.s	loc_71BE6
00070634 4EBA 0000                  		jsr	sub_71CCA(pc)
00070638                            
00070638                            loc_71BE6:
00070638 51CF FFF2                  		dbf	d7,loc_71BDA
0007063C                            
0007063C 7E02                       		moveq	#2,d7
0007063E                            
0007063E                            loc_71BEC:
0007063E DAFC 0030                  		adda.w	#$30,a5
00070642 4A15                       		tst.b	(a5)
00070644 6A00                       		bpl.s	loc_71BF8
00070646 4EBA 0000                  		jsr	sub_72850(pc)
0007064A                            
0007064A                            loc_71BF8:
0007064A 51CF FFF2                  		dbf	d7,loc_71BEC
0007064E                            
0007064E 1D7C 0080 000E             		move.b	#$80,$E(a6)
00070654 7E02                       		moveq	#2,d7
00070656                            
00070656                            loc_71C04:
00070656 DAFC 0030                  		adda.w	#$30,a5
0007065A 4A15                       		tst.b	(a5)
0007065C 6A00                       		bpl.s	loc_71C10
0007065E 4EBA 0000                  		jsr	sub_71CCA(pc)
00070662                            
00070662                            loc_71C10:
00070662 51CF FFF2                  		dbf	d7,loc_71C04
00070666                            
00070666 7E02                       		moveq	#2,d7
00070668                            
00070668                            loc_71C16:
00070668 DAFC 0030                  		adda.w	#$30,a5
0007066C 4A15                       		tst.b	(a5)
0007066E 6A00                       		bpl.s	loc_71C22
00070670 4EBA 0000                  		jsr	sub_72850(pc)
00070674                            
00070674                            loc_71C22:
00070674 51CF FFF2                  		dbf	d7,loc_71C16
00070678 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007067E DAFC 0030                  		adda.w	#$30,a5
00070682 4A15                       		tst.b	(a5)
00070684 6A00                       		bpl.s	loc_71C38
00070686 4EBA 0000                  		jsr	sub_71CCA(pc)
0007068A                            
0007068A                            loc_71C38:
0007068A DAFC 0030                  		adda.w	#$30,a5
0007068E 4A15                       		tst.b	(a5)
00070690 6A00                       		bpl.s	loc_71C44
00070692 4EBA 0000                  		jsr	sub_72850(pc)
00070696                            
00070696                            loc_71C44:
00070696 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007069E 4E75                       		rts	
000706A0                            ; End of function sub_71B4C
000706A0                            
000706A0                            
000706A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000706A0                            
000706A0                            
000706A0                            sub_71C4E:				; XREF: sub_71B4C
000706A0 532D 000E                  		subq.b	#1,$E(a5)
000706A4 6600                       		bne.s	locret_71CAA
000706A6 1D7C 0080 0008             		move.b	#$80,8(a6)
000706AC 286D 0004                  		movea.l	4(a5),a4
000706B0                            
000706B0                            loc_71C5E:
000706B0 7A00                       		moveq	#0,d5
000706B2 1A1C                       		move.b	(a4)+,d5
000706B4 0C05 00E0                  		cmpi.b	#-$20,d5
000706B8 6500                       		bcs.s	loc_71C6E
000706BA 4EBA 0000                  		jsr	sub_72A5A(pc)
000706BE 60F0                       		bra.s	loc_71C5E
000706C0                            ; ===========================================================================
000706C0                            
000706C0                            loc_71C6E:
000706C0 4A05                       		tst.b	d5
000706C2 6A00                       		bpl.s	loc_71C84
000706C4 1B45 0010                  		move.b	d5,$10(a5)
000706C8 1A1C                       		move.b	(a4)+,d5
000706CA 6A00                       		bpl.s	loc_71C84
000706CC 534C                       		subq.w	#1,a4
000706CE 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000706D4 6000                       		bra.s	loc_71C88
000706D6                            ; ===========================================================================
000706D6                            
000706D6                            loc_71C84:
000706D6 4EBA 0000                  		jsr	sub_71D40(pc)
000706DA                            
000706DA                            loc_71C88:
000706DA 2B4C 0004                  		move.l	a4,4(a5)
000706DE 0815 0002                  		btst	#2,(a5)
000706E2 6600                       		bne.s	locret_71CAA
000706E4 7000                       		moveq	#0,d0
000706E6 102D 0010                  		move.b	$10(a5),d0
000706EA 0C00 0080                  		cmpi.b	#$80,d0
000706EE 6700                       		beq.s	locret_71CAA
000706F0 0800 0003                  		btst	#3,d0
000706F4 6600                       		bne.s	loc_71CAC
000706F6 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000706FC                            
000706FC                            locret_71CAA:
000706FC 4E75                       		rts	
000706FE                            ; ===========================================================================
000706FE                            
000706FE                            loc_71CAC:
000706FE 0400 0088                  		subi.b	#$88,d0
00070702 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00070706 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007070C 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00070714 4E75                       		rts	
00070716                            ; End of function sub_71C4E
00070716                            
00070716                            ; ===========================================================================
00070716 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007071C                            
0007071C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007071C                            
0007071C                            
0007071C                            sub_71CCA:				; XREF: sub_71B4C
0007071C 532D 000E                  		subq.b	#1,$E(a5)
00070720 6600                       		bne.s	loc_71CE0
00070722 0895 0004                  		bclr	#4,(a5)
00070726 4EBA 0000                  		jsr	sub_71CEC(pc)
0007072A 4EBA 0000                  		jsr	sub_71E18(pc)
0007072E 6000 0000                  		bra.w	loc_726E2
00070732                            ; ===========================================================================
00070732                            
00070732                            loc_71CE0:
00070732 4EBA 0000                  		jsr	sub_71D9E(pc)
00070736 4EBA 0000                  		jsr	sub_71DC6(pc)
0007073A 6000 0000                  		bra.w	loc_71E24
0007073E                            ; End of function sub_71CCA
0007073E                            
0007073E                            
0007073E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007073E                            
0007073E                            
0007073E                            sub_71CEC:				; XREF: sub_71CCA
0007073E 286D 0004                  		movea.l	4(a5),a4
00070742 0895 0001                  		bclr	#1,(a5)
00070746                            
00070746                            loc_71CF4:
00070746 7A00                       		moveq	#0,d5
00070748 1A1C                       		move.b	(a4)+,d5
0007074A 0C05 00E0                  		cmpi.b	#-$20,d5
0007074E 6500                       		bcs.s	loc_71D04
00070750 4EBA 0000                  		jsr	sub_72A5A(pc)
00070754 60F0                       		bra.s	loc_71CF4
00070756                            ; ===========================================================================
00070756                            
00070756                            loc_71D04:
00070756 4EBA 0000                  		jsr	sub_726FE(pc)
0007075A 4A05                       		tst.b	d5
0007075C 6A00                       		bpl.s	loc_71D1A
0007075E 4EBA 0000                  		jsr	sub_71D22(pc)
00070762 1A1C                       		move.b	(a4)+,d5
00070764 6A00                       		bpl.s	loc_71D1A
00070766 534C                       		subq.w	#1,a4
00070768 6000 0000                  		bra.w	sub_71D60
0007076C                            ; ===========================================================================
0007076C                            
0007076C                            loc_71D1A:
0007076C 4EBA 0000                  		jsr	sub_71D40(pc)
00070770 6000 0000                  		bra.w	sub_71D60
00070774                            ; End of function sub_71CEC
00070774                            
00070774                            
00070774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070774                            
00070774                            
00070774                            sub_71D22:				; XREF: sub_71CEC
00070774 0405 0080                  		subi.b	#$80,d5
00070778 6700                       		beq.s	loc_71D58
0007077A DA2D 0008                  		add.b	8(a5),d5
0007077E 0245 007F                  		andi.w	#$7F,d5
00070782 E34D                       		lsl.w	#1,d5
00070784 41FA 0000                  		lea	word_72790(pc),a0
00070788 3C30 5000                  		move.w	(a0,d5.w),d6
0007078C 3B46 0010                  		move.w	d6,$10(a5)
00070790 4E75                       		rts	
00070792                            ; End of function sub_71D22
00070792                            
00070792                            
00070792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070792                            
00070792                            
00070792                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00070792 1005                       		move.b	d5,d0
00070794 122D 0002                  		move.b	2(a5),d1
00070798                            
00070798                            loc_71D46:
00070798 5301                       		subq.b	#1,d1
0007079A 6700                       		beq.s	loc_71D4E
0007079C D005                       		add.b	d5,d0
0007079E 60F8                       		bra.s	loc_71D46
000707A0                            ; ===========================================================================
000707A0                            
000707A0                            loc_71D4E:
000707A0 1B40 000F                  		move.b	d0,$F(a5)
000707A4 1B40 000E                  		move.b	d0,$E(a5)
000707A8 4E75                       		rts	
000707AA                            ; End of function sub_71D40
000707AA                            
000707AA                            ; ===========================================================================
000707AA                            
000707AA                            loc_71D58:				; XREF: sub_71D22
000707AA 08D5 0001                  		bset	#1,(a5)
000707AE 426D 0010                  		clr.w	$10(a5)
000707B2                            
000707B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000707B2                            
000707B2                            
000707B2                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000707B2 2B4C 0004                  		move.l	a4,4(a5)
000707B6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000707BC 0815 0004                  		btst	#4,(a5)
000707C0 6600                       		bne.s	locret_71D9C
000707C2 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000707C8 422D 000C                  		clr.b	$C(a5)
000707CC 0815 0003                  		btst	#3,(a5)
000707D0 6700                       		beq.s	locret_71D9C
000707D2 206D 0014                  		movea.l	$14(a5),a0
000707D6 1B58 0018                  		move.b	(a0)+,$18(a5)
000707DA 1B58 0019                  		move.b	(a0)+,$19(a5)
000707DE 1B58 001A                  		move.b	(a0)+,$1A(a5)
000707E2 1018                       		move.b	(a0)+,d0
000707E4 E208                       		lsr.b	#1,d0
000707E6 1B40 001B                  		move.b	d0,$1B(a5)
000707EA 426D 001C                  		clr.w	$1C(a5)
000707EE                            
000707EE                            locret_71D9C:
000707EE 4E75                       		rts	
000707F0                            ; End of function sub_71D60
000707F0                            
000707F0                            
000707F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000707F0                            
000707F0                            
000707F0                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000707F0 4A2D 0012                  		tst.b	$12(a5)
000707F4 6700                       		beq.s	locret_71DC4
000707F6 532D 0012                  		subq.b	#1,$12(a5)
000707FA 6600                       		bne.s	locret_71DC4
000707FC 08D5 0001                  		bset	#1,(a5)
00070800 4A2D 0001                  		tst.b	1(a5)
00070804 6B00 0000                  		bmi.w	loc_71DBE
00070808 4EBA 0000                  		jsr	sub_726FE(pc)
0007080C 584F                       		addq.w	#4,sp
0007080E 4E75                       		rts	
00070810                            ; ===========================================================================
00070810                            
00070810                            loc_71DBE:
00070810 4EBA 0000                  		jsr	sub_729A0(pc)
00070814 584F                       		addq.w	#4,sp
00070816                            
00070816                            locret_71DC4:
00070816 4E75                       		rts	
00070818                            ; End of function sub_71D9E
00070818                            
00070818                            
00070818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070818                            
00070818                            
00070818                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00070818 584F                       		addq.w	#4,sp
0007081A 0815 0003                  		btst	#3,(a5)
0007081E 6700                       		beq.s	locret_71E16
00070820 4A2D 0018                  		tst.b	$18(a5)
00070824 6700                       		beq.s	loc_71DDA
00070826 532D 0018                  		subq.b	#1,$18(a5)
0007082A 4E75                       		rts	
0007082C                            ; ===========================================================================
0007082C                            
0007082C                            loc_71DDA:
0007082C 532D 0019                  		subq.b	#1,$19(a5)
00070830 6700                       		beq.s	loc_71DE2
00070832 4E75                       		rts	
00070834                            ; ===========================================================================
00070834                            
00070834                            loc_71DE2:
00070834 206D 0014                  		movea.l	$14(a5),a0
00070838 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007083E 4A2D 001B                  		tst.b	$1B(a5)
00070842 6600                       		bne.s	loc_71DFE
00070844 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007084A 442D 001A                  		neg.b	$1A(a5)
0007084E 4E75                       		rts	
00070850                            ; ===========================================================================
00070850                            
00070850                            loc_71DFE:
00070850 532D 001B                  		subq.b	#1,$1B(a5)
00070854 1C2D 001A                  		move.b	$1A(a5),d6
00070858 4886                       		ext.w	d6
0007085A DC6D 001C                  		add.w	$1C(a5),d6
0007085E 3B46 001C                  		move.w	d6,$1C(a5)
00070862 DC6D 0010                  		add.w	$10(a5),d6
00070866 594F                       		subq.w	#4,sp
00070868                            
00070868                            locret_71E16:
00070868 4E75                       		rts	
0007086A                            ; End of function sub_71DC6
0007086A                            
0007086A                            
0007086A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007086A                            
0007086A                            
0007086A                            sub_71E18:				; XREF: sub_71CCA
0007086A 0815 0001                  		btst	#1,(a5)
0007086E 6600                       		bne.s	locret_71E48
00070870 3C2D 0010                  		move.w	$10(a5),d6
00070874 6700                       		beq.s	loc_71E4A
00070876                            
00070876                            loc_71E24:				; XREF: sub_71CCA
00070876 102D 001E                  		move.b	$1E(a5),d0
0007087A 4880                       		ext.w	d0
0007087C DC40                       		add.w	d0,d6
0007087E 0815 0002                  		btst	#2,(a5)
00070882 6600                       		bne.s	locret_71E48
00070884 3206                       		move.w	d6,d1
00070886 E049                       		lsr.w	#8,d1
00070888 103C 00A4                  		move.b	#-$5C,d0
0007088C 4EBA 0000                  		jsr	sub_72722(pc)
00070890 1206                       		move.b	d6,d1
00070892 103C 00A0                  		move.b	#-$60,d0
00070896 4EBA 0000                  		jsr	sub_72722(pc)
0007089A                            
0007089A                            locret_71E48:
0007089A 4E75                       		rts	
0007089C                            ; ===========================================================================
0007089C                            
0007089C                            loc_71E4A:
0007089C 08D5 0001                  		bset	#1,(a5)
000708A0 4E75                       		rts	
000708A2                            ; End of function sub_71E18
000708A2                            
000708A2                            ; ===========================================================================
000708A2                            
000708A2                            loc_71E50:				; XREF: sub_71B4C
000708A2 6B00                       		bmi.s	loc_71E94
000708A4 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000708AA 6700 0000                  		beq.w	loc_71EFE
000708AE 1D7C 0002 0003             		move.b	#2,3(a6)
000708B4 7602                       		moveq	#2,d3
000708B6 103C 00B4                  		move.b	#-$4C,d0
000708BA 7200                       		moveq	#0,d1
000708BC                            
000708BC                            loc_71E6A:
000708BC 4EBA 0000                  		jsr	sub_7272E(pc)
000708C0 4EBA 0000                  		jsr	sub_72764(pc)
000708C4 5200                       		addq.b	#1,d0
000708C6 51CB FFF4                  		dbf	d3,loc_71E6A
000708CA                            
000708CA 7602                       		moveq	#2,d3
000708CC 7028                       		moveq	#$28,d0
000708CE                            
000708CE                            loc_71E7C:
000708CE 1203                       		move.b	d3,d1
000708D0 4EBA 0000                  		jsr	sub_7272E(pc)
000708D4 5801                       		addq.b	#4,d1
000708D6 4EBA 0000                  		jsr	sub_7272E(pc)
000708DA 51CB FFF2                  		dbf	d3,loc_71E7C
000708DE                            
000708DE 4EBA 0000                  		jsr	sub_729B6(pc)
000708E2 6000 FDB2                  		bra.w	loc_71C44
000708E6                            ; ===========================================================================
000708E6                            
000708E6                            loc_71E94:				; XREF: loc_71E50
000708E6 422E 0003                  		clr.b	3(a6)
000708EA 7630                       		moveq	#$30,d3
000708EC 4BEE 0040                  		lea	$40(a6),a5
000708F0 7806                       		moveq	#6,d4
000708F2                            
000708F2                            loc_71EA0:
000708F2 0815 0007                  		btst	#7,(a5)
000708F6 6700                       		beq.s	loc_71EB8
000708F8 0815 0002                  		btst	#2,(a5)
000708FC 6600                       		bne.s	loc_71EB8
000708FE 103C 00B4                  		move.b	#-$4C,d0
00070902 122D 000A                  		move.b	$A(a5),d1
00070906 4EBA 0000                  		jsr	sub_72722(pc)
0007090A                            
0007090A                            loc_71EB8:
0007090A DAC3                       		adda.w	d3,a5
0007090C 51CC FFE4                  		dbf	d4,loc_71EA0
00070910                            
00070910 4BEE 0220                  		lea	$220(a6),a5
00070914 7802                       		moveq	#2,d4
00070916                            
00070916                            loc_71EC4:
00070916 0815 0007                  		btst	#7,(a5)
0007091A 6700                       		beq.s	loc_71EDC
0007091C 0815 0002                  		btst	#2,(a5)
00070920 6600                       		bne.s	loc_71EDC
00070922 103C 00B4                  		move.b	#-$4C,d0
00070926 122D 000A                  		move.b	$A(a5),d1
0007092A 4EBA 0000                  		jsr	sub_72722(pc)
0007092E                            
0007092E                            loc_71EDC:
0007092E DAC3                       		adda.w	d3,a5
00070930 51CC FFE4                  		dbf	d4,loc_71EC4
00070934                            
00070934 4BEE 0340                  		lea	$340(a6),a5
00070938 0815 0007                  		btst	#7,(a5)
0007093C 6700                       		beq.s	loc_71EFE
0007093E 0815 0002                  		btst	#2,(a5)
00070942 6600                       		bne.s	loc_71EFE
00070944 103C 00B4                  		move.b	#-$4C,d0
00070948 122D 000A                  		move.b	$A(a5),d1
0007094C 4EBA 0000                  		jsr	sub_72722(pc)
00070950                            
00070950                            loc_71EFE:
00070950 6000 FD44                  		bra.w	loc_71C44
00070954                            
00070954                            ; ---------------------------------------------------------------------------
00070954                            ; Subroutine to	play a sound or	music track
00070954                            ; ---------------------------------------------------------------------------
00070954                            
00070954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070954                            
00070954                            
00070954                            Sound_Play:				; XREF: sub_71B4C
00070954 2079 0007 03B2             		movea.l	(Go_SoundTypes).l,a0
0007095A 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007095E 1616                       		move.b	0(a6),d3
00070960 7802                       		moveq	#2,d4
00070962                            
00070962                            loc_71F12:
00070962 1011                       		move.b	(a1),d0		; move track number to d0
00070964 1200                       		move.b	d0,d1
00070966 4219                       		clr.b	(a1)+
00070968 0400 0081                  		subi.b	#$81,d0
0007096C 6500                       		bcs.s	loc_71F3E
0007096E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00070974 6700                       		beq.s	loc_71F2C
00070976 1D41 000A                  		move.b	d1,$A(a6)
0007097A 6000                       		bra.s	loc_71F3E
0007097C                            ; ===========================================================================
0007097C                            
0007097C                            loc_71F2C:
0007097C 0240 007F                  		andi.w	#$7F,d0
00070980 1430 0000                  		move.b	(a0,d0.w),d2
00070984 B403                       		cmp.b	d3,d2
00070986 6500                       		bcs.s	loc_71F3E
00070988 1602                       		move.b	d2,d3
0007098A 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007098E                            
0007098E                            loc_71F3E:
0007098E 51CC FFD2                  		dbf	d4,loc_71F12
00070992                            
00070992 4A03                       		tst.b	d3
00070994 6B00                       		bmi.s	locret_71F4A
00070996 1C83                       		move.b	d3,0(a6)
00070998                            
00070998                            locret_71F4A:
00070998 4E75                       		rts	
0007099A                            ; End of function Sound_Play
0007099A                            
0007099A                            
0007099A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007099A                            
0007099A                            
0007099A                            Sound_ChkValue:				; XREF: sub_71B4C
0007099A 7E00                       		moveq	#0,d7
0007099C 1E2E 0009                  		move.b	9(a6),d7
000709A0 6700 0000                  		beq.w	Sound_E4
000709A4 6A00                       		bpl.s	locret_71F8C
000709A6 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000709AC 0C07 009F                  		cmpi.b	#$9F,d7
000709B0 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000709B4 0C07 00A0                  		cmpi.b	#$A0,d7
000709B8 6500 0000                  		bcs.w	locret_71F8C
000709BC 0C07 00CF                  		cmpi.b	#$CF,d7
000709C0 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000709C4 0C07 00D0                  		cmpi.b	#$D0,d7
000709C8 6500 0000                  		bcs.w	locret_71F8C
000709CC 0C07 00E0                  		cmpi.b	#$E0,d7
000709D0 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000709D4 0C07 00E5                  		cmpi.b	#$E5,d7
000709D8 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000709DA                            
000709DA                            locret_71F8C:
000709DA 4E75                       		rts	
000709DC                            ; ===========================================================================
000709DC                            
000709DC                            Sound_E0toE5				; XREF: Sound_ChkValue
000709DC 0407 00E0                  		subi.b	#$E0,d7
000709E0 E54F                       		lsl.w	#2,d7
000709E2 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000709E6                            ; ===========================================================================
000709E6                            
000709E6                            Sound_ExIndex:
000709E6 6000 0000                  		bra.w	Sound_E0
000709EA                            ; ===========================================================================
000709EA 6000 0000                  		bra.w	Sound_E1
000709EE                            ; ===========================================================================
000709EE 6000 0000                  		bra.w	Sound_E2
000709F2                            ; ===========================================================================
000709F2 6000 0000                  		bra.w	Sound_E3
000709F6                            ; ===========================================================================
000709F6 6000 0000                  		bra.w	Sound_E4
000709FA                            ; ===========================================================================
000709FA 6000 0000                  		bra.w	Sound_E5
000709FE                            ; ===========================================================================
000709FE                            ; ---------------------------------------------------------------------------
000709FE                            ; Play "Say-gaa" PCM sound
000709FE                            ; ---------------------------------------------------------------------------
000709FE                            
000709FE                            Sound_E1:				  
000709FE 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00070A04 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00070A0A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00070A12                            PlayPCM_Loop:	  
00070A12 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00070A18 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00070A1C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00070A20 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00070A22 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00070A24 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00070A28 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00070A2E 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00070A32 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00070A38 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00070A3A 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00070A3C                            return_PlayPCM: 
00070A3C 584F                       		addq.w	#4,sp 
00070A3E 4E75                       		rts
00070A40                            		
00070A40                            ; ---------------------------------------------------------------------------
00070A40                            ; Play you are an idiot pcm sound
00070A40                            ; ---------------------------------------------------------------------------
00070A40                            
00070A40                            Sound_E5:  
00070A40 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00070A46 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00070A4C 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00070A54                            PlayPCM_LoopE5:	  
00070A54                            
00070A54 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00070A5A                            		
00070A5A 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00070A5E                            		
00070A5E 1038 FE24                  		move.b	($FFFFFE24).w,d0
00070A62 0200 000F                  		andi.b	#$F,d0
00070A66 6700                       		beq.s	SfxE5SwapPalette
00070A68                            		
00070A68 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00070A6C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00070A70 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00070A72 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00070A74 60DE                       		bra.s	PlayPCM_LoopE5
00070A76                            		
00070A76                            SfxE5SwapPalette:
00070A76                            		
00070A76                            		
00070A76                            		
00070A76 4BF9 00C0 0004             		lea	($C00004).l,a5
00070A7C 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00070A82                            		
00070A82                            		
00070A82 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00070A88 6700                       		beq.s	@not_black
00070A8A 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00070A90 6000                       		bra.s	@merge
00070A92                            	@not_black:
00070A92 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00070A98                            	@merge:
00070A98 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00070A9C 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00070AA0 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00070AA6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00070AAA                            		
00070AAA 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00070AAE 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00070AB2 60A0                       		bra.s	PlayPCM_LoopE5
00070AB4                            		
00070AB4                            ; ===========================================================================
00070AB4                            ; ---------------------------------------------------------------------------
00070AB4                            ; Play music track $81-$9F
00070AB4                            ; ---------------------------------------------------------------------------
00070AB4                            
00070AB4                            Sound_81to9F:				; XREF: Sound_ChkValue
00070AB4 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00070AB8 6600                       		bne.s	loc_72024	; if not, branch
00070ABA 4A2E 0027                  		tst.b	$27(a6)
00070ABE 6600 0000                  		bne.w	loc_721B6
00070AC2 4BEE 0040                  		lea	$40(a6),a5
00070AC6 7009                       		moveq	#9,d0
00070AC8                            
00070AC8                            loc_71FE6:
00070AC8 0895 0002                  		bclr	#2,(a5)
00070ACC DAFC 0030                  		adda.w	#$30,a5
00070AD0 51C8 FFF6                  		dbf	d0,loc_71FE6
00070AD4                            
00070AD4 4BEE 0220                  		lea	$220(a6),a5
00070AD8 7005                       		moveq	#5,d0
00070ADA                            
00070ADA                            loc_71FF8:
00070ADA 0895 0007                  		bclr	#7,(a5)
00070ADE DAFC 0030                  		adda.w	#$30,a5
00070AE2 51C8 FFF6                  		dbf	d0,loc_71FF8
00070AE6 4216                       		clr.b	0(a6)
00070AE8 204E                       		movea.l	a6,a0
00070AEA 43EE 03A0                  		lea	$3A0(a6),a1
00070AEE 303C 0087                  		move.w	#$87,d0
00070AF2                            
00070AF2                            loc_72012:
00070AF2 22D8                       		move.l	(a0)+,(a1)+
00070AF4 51C8 FFFC                  		dbf	d0,loc_72012
00070AF8                            
00070AF8 1D7C 0080 0027             		move.b	#$80,$27(a6)
00070AFE 4216                       		clr.b	0(a6)
00070B00 6000                       		bra.s	loc_7202C
00070B02                            ; ===========================================================================
00070B02                            
00070B02                            loc_72024:
00070B02 422E 0027                  		clr.b	$27(a6)
00070B06 422E 0026                  		clr.b	$26(a6)
00070B0A                            
00070B0A                            loc_7202C:
00070B0A 4EBA 0000                  		jsr	sub_725CA(pc)
00070B0E 2879 0007 03C2             		movea.l	(off_719A0).l,a4
00070B14 0407 0081                  		subi.b	#$81,d7
00070B18 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00070B1E 2879 0007 03BA             		movea.l	(Go_MusicIndex).l,a4
00070B24 E54F                       		lsl.w	#2,d7
00070B26 2874 7000                  		movea.l	(a4,d7.w),a4
00070B2A 7000                       		moveq	#0,d0
00070B2C 3014                       		move.w	(a4),d0
00070B2E D08C                       		add.l	a4,d0
00070B30 2D40 0018                  		move.l	d0,$18(a6)
00070B34 102C 0005                  		move.b	5(a4),d0
00070B38 1D40 0028                  		move.b	d0,$28(a6)
00070B3C 4A2E 002A                  		tst.b	$2A(a6)
00070B40 6700                       		beq.s	loc_72068
00070B42 102E 0029                  		move.b	$29(a6),d0
00070B46                            
00070B46                            loc_72068:
00070B46 1D40 0002                  		move.b	d0,2(a6)
00070B4A 1D40 0001                  		move.b	d0,1(a6)
00070B4E 7200                       		moveq	#0,d1
00070B50 264C                       		movea.l	a4,a3
00070B52 5C4C                       		addq.w	#6,a4
00070B54 7E00                       		moveq	#0,d7
00070B56 1E2B 0002                  		move.b	2(a3),d7
00070B5A 6700 0000                  		beq.w	loc_72114
00070B5E 5307                       		subq.b	#1,d7
00070B60 123C 00C0                  		move.b	#-$40,d1
00070B64 182B 0004                  		move.b	4(a3),d4
00070B68 7C30                       		moveq	#$30,d6
00070B6A 1A3C 0001                  		move.b	#1,d5
00070B6E 43EE 0040                  		lea	$40(a6),a1
00070B72 45FA 0000                  		lea	byte_721BA(pc),a2
00070B76                            
00070B76                            loc_72098:
00070B76 08D1 0007                  		bset	#7,(a1)
00070B7A 135A 0001                  		move.b	(a2)+,1(a1)
00070B7E 1344 0002                  		move.b	d4,2(a1)
00070B82 1346 000D                  		move.b	d6,$D(a1)
00070B86 1341 000A                  		move.b	d1,$A(a1)
00070B8A 1345 000E                  		move.b	d5,$E(a1)
00070B8E 7000                       		moveq	#0,d0
00070B90 301C                       		move.w	(a4)+,d0
00070B92 D08B                       		add.l	a3,d0
00070B94 2340 0004                  		move.l	d0,4(a1)
00070B98 335C 0008                  		move.w	(a4)+,8(a1)
00070B9C D2C6                       		adda.w	d6,a1
00070B9E 51CF FFD6                  		dbf	d7,loc_72098
00070BA2 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00070BA8 6600                       		bne.s	loc_720D8
00070BAA 702B                       		moveq	#$2B,d0
00070BAC 7200                       		moveq	#0,d1
00070BAE 4EBA 0000                  		jsr	sub_7272E(pc)
00070BB2 6000 0000                  		bra.w	loc_72114
00070BB6                            ; ===========================================================================
00070BB6                            
00070BB6                            loc_720D8:
00070BB6 7028                       		moveq	#$28,d0
00070BB8 7206                       		moveq	#6,d1
00070BBA 4EBA 0000                  		jsr	sub_7272E(pc)
00070BBE 103C 0042                  		move.b	#$42,d0
00070BC2 727F                       		moveq	#$7F,d1
00070BC4 4EBA 0000                  		jsr	sub_72764(pc)
00070BC8 103C 004A                  		move.b	#$4A,d0
00070BCC 727F                       		moveq	#$7F,d1
00070BCE 4EBA 0000                  		jsr	sub_72764(pc)
00070BD2 103C 0046                  		move.b	#$46,d0
00070BD6 727F                       		moveq	#$7F,d1
00070BD8 4EBA 0000                  		jsr	sub_72764(pc)
00070BDC 103C 004E                  		move.b	#$4E,d0
00070BE0 727F                       		moveq	#$7F,d1
00070BE2 4EBA 0000                  		jsr	sub_72764(pc)
00070BE6 103C 00B6                  		move.b	#-$4A,d0
00070BEA 123C 00C0                  		move.b	#-$40,d1
00070BEE 4EBA 0000                  		jsr	sub_72764(pc)
00070BF2                            
00070BF2                            loc_72114:
00070BF2 7E00                       		moveq	#0,d7
00070BF4 1E2B 0003                  		move.b	3(a3),d7
00070BF8 6700                       		beq.s	loc_72154
00070BFA 5307                       		subq.b	#1,d7
00070BFC 43EE 0190                  		lea	$190(a6),a1
00070C00 45FA 0000                  		lea	byte_721C2(pc),a2
00070C04                            
00070C04                            loc_72126:
00070C04 08D1 0007                  		bset	#7,(a1)
00070C08 135A 0001                  		move.b	(a2)+,1(a1)
00070C0C 1344 0002                  		move.b	d4,2(a1)
00070C10 1346 000D                  		move.b	d6,$D(a1)
00070C14 1345 000E                  		move.b	d5,$E(a1)
00070C18 7000                       		moveq	#0,d0
00070C1A 301C                       		move.w	(a4)+,d0
00070C1C D08B                       		add.l	a3,d0
00070C1E 2340 0004                  		move.l	d0,4(a1)
00070C22 335C 0008                  		move.w	(a4)+,8(a1)
00070C26 101C                       		move.b	(a4)+,d0
00070C28 135C 000B                  		move.b	(a4)+,$B(a1)
00070C2C D2C6                       		adda.w	d6,a1
00070C2E 51CF FFD4                  		dbf	d7,loc_72126
00070C32                            
00070C32                            loc_72154:
00070C32 43EE 0220                  		lea	$220(a6),a1
00070C36 7E05                       		moveq	#5,d7
00070C38                            
00070C38                            loc_7215A:
00070C38 4A11                       		tst.b	(a1)
00070C3A 6A00 0000                  		bpl.w	loc_7217C
00070C3E 7000                       		moveq	#0,d0
00070C40 1029 0001                  		move.b	1(a1),d0
00070C44 6B00                       		bmi.s	loc_7216E
00070C46 5500                       		subq.b	#2,d0
00070C48 E508                       		lsl.b	#2,d0
00070C4A 6000                       		bra.s	loc_72170
00070C4C                            ; ===========================================================================
00070C4C                            
00070C4C                            loc_7216E:
00070C4C E608                       		lsr.b	#3,d0
00070C4E                            
00070C4E                            loc_72170:
00070C4E 41FA 0000                  		lea	dword_722CC(pc),a0
00070C52 2070 0000                  		movea.l	(a0,d0.w),a0
00070C56 08D0 0002                  		bset	#2,(a0)
00070C5A                            
00070C5A                            loc_7217C:
00070C5A D2C6                       		adda.w	d6,a1
00070C5C 51CF FFDA                  		dbf	d7,loc_7215A
00070C60                            
00070C60 4A6E 0340                  		tst.w	$340(a6)
00070C64 6A00                       		bpl.s	loc_7218E
00070C66 08EE 0002 0100             		bset	#2,$100(a6)
00070C6C                            
00070C6C                            loc_7218E:
00070C6C 4A6E 0370                  		tst.w	$370(a6)
00070C70 6A00                       		bpl.s	loc_7219A
00070C72 08EE 0002 01F0             		bset	#2,$1F0(a6)
00070C78                            
00070C78                            loc_7219A:
00070C78 4BEE 0070                  		lea	$70(a6),a5
00070C7C 7805                       		moveq	#5,d4
00070C7E                            
00070C7E                            loc_721A0:
00070C7E 4EBA 0000                  		jsr	sub_726FE(pc)
00070C82 DAC6                       		adda.w	d6,a5
00070C84 51CC FFF8                  		dbf	d4,loc_721A0
00070C88 7802                       		moveq	#2,d4
00070C8A                            
00070C8A                            loc_721AC:
00070C8A 4EBA 0000                  		jsr	sub_729A0(pc)
00070C8E DAC6                       		adda.w	d6,a5
00070C90 51CC FFF8                  		dbf	d4,loc_721AC
00070C94                            
00070C94                            loc_721B6:
00070C94 584F                       		addq.w	#4,sp
00070C96 4E75                       		rts	
00070C98                            ; ===========================================================================
00070C98 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00070CA0                            		even
00070CA0 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00070CA4                            		even
00070CA4                            ; ===========================================================================
00070CA4                            ; ---------------------------------------------------------------------------
00070CA4                            ; Play normal sound effect
00070CA4                            ; ---------------------------------------------------------------------------
00070CA4                            
00070CA4                            Sound_A0toCF:				; XREF: Sound_ChkValue
00070CA4 4A2E 0027                  		tst.b	$27(a6)
00070CA8 6600 0000                  		bne.w	loc_722C6
00070CAC 4A2E 0004                  		tst.b	4(a6)
00070CB0 6600 0000                  		bne.w	loc_722C6
00070CB4 4A2E 0024                  		tst.b	$24(a6)
00070CB8 6600 0000                  		bne.w	loc_722C6
00070CBC 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00070CC0 6600                       		bne.s	Sound_notB5	; if not, branch
00070CC2 4A2E 002B                  		tst.b	$2B(a6)
00070CC6 6600                       		bne.s	loc_721EE
00070CC8 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00070CCC                            
00070CCC                            loc_721EE:
00070CCC 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00070CD2                            
00070CD2                            Sound_notB5:
00070CD2 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00070CD6 6600                       		bne.s	Sound_notA7	; if not, branch
00070CD8 4A2E 002C                  		tst.b	$2C(a6)
00070CDC 6600 0000                  		bne.w	locret_722C4
00070CE0 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00070CE6                            
00070CE6                            Sound_notA7:
00070CE6 2079 0007 03BE             		movea.l	(Go_SoundIndex).l,a0
00070CEC 0407 00A0                  		subi.b	#$A0,d7
00070CF0 E54F                       		lsl.w	#2,d7
00070CF2 2670 7000                  		movea.l	(a0,d7.w),a3
00070CF6 224B                       		movea.l	a3,a1
00070CF8 7200                       		moveq	#0,d1
00070CFA 3219                       		move.w	(a1)+,d1
00070CFC D28B                       		add.l	a3,d1
00070CFE 1A19                       		move.b	(a1)+,d5
00070D00 1E19                       		move.b	(a1)+,d7
00070D02 5307                       		subq.b	#1,d7
00070D04 7C30                       		moveq	#$30,d6
00070D06                            
00070D06                            loc_72228:
00070D06 7600                       		moveq	#0,d3
00070D08 1629 0001                  		move.b	1(a1),d3
00070D0C 1803                       		move.b	d3,d4
00070D0E 6B00                       		bmi.s	loc_72244
00070D10 5543                       		subq.w	#2,d3
00070D12 E54B                       		lsl.w	#2,d3
00070D14 4BFA 0000                  		lea	dword_722CC(pc),a5
00070D18 2A75 3000                  		movea.l	(a5,d3.w),a5
00070D1C 08D5 0002                  		bset	#2,(a5)
00070D20 6000                       		bra.s	loc_7226E
00070D22                            ; ===========================================================================
00070D22                            
00070D22                            loc_72244:
00070D22 E64B                       		lsr.w	#3,d3
00070D24 4BFA 0000                  		lea	dword_722CC(pc),a5
00070D28 2A75 3000                  		movea.l	(a5,d3.w),a5
00070D2C 08D5 0002                  		bset	#2,(a5)
00070D30 0C04 00C0                  		cmpi.b	#$C0,d4
00070D34 6600                       		bne.s	loc_7226E
00070D36 1004                       		move.b	d4,d0
00070D38 0000 001F                  		ori.b	#$1F,d0
00070D3C 13C0 00C0 0011             		move.b	d0,($C00011).l
00070D42 0840 0005                  		bchg	#5,d0
00070D46 13C0 00C0 0011             		move.b	d0,($C00011).l
00070D4C                            
00070D4C                            loc_7226E:
00070D4C 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00070D50 244D                       		movea.l	a5,a2
00070D52 700B                       		moveq	#$B,d0
00070D54                            
00070D54                            loc_72276:
00070D54 429A                       		clr.l	(a2)+
00070D56 51C8 FFFC                  		dbf	d0,loc_72276
00070D5A                            
00070D5A 3A99                       		move.w	(a1)+,(a5)
00070D5C 1B45 0002                  		move.b	d5,2(a5)
00070D60 7000                       		moveq	#0,d0
00070D62 3019                       		move.w	(a1)+,d0
00070D64 D08B                       		add.l	a3,d0
00070D66 2B40 0004                  		move.l	d0,4(a5)
00070D6A 3B59 0008                  		move.w	(a1)+,8(a5)
00070D6E 1B7C 0001 000E             		move.b	#1,$E(a5)
00070D74 1B46 000D                  		move.b	d6,$D(a5)
00070D78 4A04                       		tst.b	d4
00070D7A 6B00                       		bmi.s	loc_722A8
00070D7C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00070D82 2B41 0020                  		move.l	d1,$20(a5)
00070D86                            
00070D86                            loc_722A8:
00070D86 51CF FF7E                  		dbf	d7,loc_72228
00070D8A                            
00070D8A 4A2E 0250                  		tst.b	$250(a6)
00070D8E 6A00                       		bpl.s	loc_722B8
00070D90 08EE 0002 0340             		bset	#2,$340(a6)
00070D96                            
00070D96                            loc_722B8:
00070D96 4A2E 0310                  		tst.b	$310(a6)
00070D9A 6A00                       		bpl.s	locret_722C4
00070D9C 08EE 0002 0370             		bset	#2,$370(a6)
00070DA2                            
00070DA2                            locret_722C4:
00070DA2 4E75                       		rts	
00070DA4                            ; ===========================================================================
00070DA4                            
00070DA4                            loc_722C6:
00070DA4 4216                       		clr.b	0(a6)
00070DA6 4E75                       		rts	
00070DA8                            ; ===========================================================================
00070DA8 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00070DAC 0000 0000                  		dc.l 0
00070DB0 00FF F100                  		dc.l $FFF100
00070DB4 00FF F130                  		dc.l $FFF130
00070DB8 00FF F190                  		dc.l $FFF190
00070DBC 00FF F1C0                  		dc.l $FFF1C0
00070DC0 00FF F1F0                  		dc.l $FFF1F0
00070DC4 00FF F1F0                  		dc.l $FFF1F0
00070DC8 00FF F220                  dword_722EC:	dc.l $FFF220
00070DCC 0000 0000                  		dc.l 0
00070DD0 00FF F250                  		dc.l $FFF250
00070DD4 00FF F280                  		dc.l $FFF280
00070DD8 00FF F2B0                  		dc.l $FFF2B0
00070DDC 00FF F2E0                  		dc.l $FFF2E0
00070DE0 00FF F310                  		dc.l $FFF310
00070DE4 00FF F310                  		dc.l $FFF310
00070DE8                            ; ===========================================================================
00070DE8                            ; ---------------------------------------------------------------------------
00070DE8                            ; Play GHZ waterfall sound
00070DE8                            ; ---------------------------------------------------------------------------
00070DE8                            
00070DE8                            Sound_D0toDF:				; XREF: Sound_ChkValue
00070DE8 4A2E 0027                  		tst.b	$27(a6)
00070DEC 6600 0000                  		bne.w	locret_723C6
00070DF0 4A2E 0004                  		tst.b	4(a6)
00070DF4 6600 0000                  		bne.w	locret_723C6
00070DF8 4A2E 0024                  		tst.b	$24(a6)
00070DFC 6600 0000                  		bne.w	locret_723C6
00070E00 2079 0007 03B6             		movea.l	(Go_SoundD0).l,a0
00070E06 0407 00D0                  		subi.b	#$D0,d7
00070E0A E54F                       		lsl.w	#2,d7
00070E0C 2670 7000                  		movea.l	(a0,d7.w),a3
00070E10 224B                       		movea.l	a3,a1
00070E12 7000                       		moveq	#0,d0
00070E14 3019                       		move.w	(a1)+,d0
00070E16 D08B                       		add.l	a3,d0
00070E18 2D40 0020                  		move.l	d0,$20(a6)
00070E1C 1A19                       		move.b	(a1)+,d5
00070E1E 1E19                       		move.b	(a1)+,d7
00070E20 5307                       		subq.b	#1,d7
00070E22 7C30                       		moveq	#$30,d6
00070E24                            
00070E24                            loc_72348:
00070E24 1829 0001                  		move.b	1(a1),d4
00070E28 6B00                       		bmi.s	loc_7235A
00070E2A 08EE 0002 0100             		bset	#2,$100(a6)
00070E30 4BEE 0340                  		lea	$340(a6),a5
00070E34 6000                       		bra.s	loc_72364
00070E36                            ; ===========================================================================
00070E36                            
00070E36                            loc_7235A:
00070E36 08EE 0002 01F0             		bset	#2,$1F0(a6)
00070E3C 4BEE 0370                  		lea	$370(a6),a5
00070E40                            
00070E40                            loc_72364:
00070E40 244D                       		movea.l	a5,a2
00070E42 700B                       		moveq	#$B,d0
00070E44                            
00070E44                            loc_72368:
00070E44 429A                       		clr.l	(a2)+
00070E46 51C8 FFFC                  		dbf	d0,loc_72368
00070E4A                            
00070E4A 3A99                       		move.w	(a1)+,(a5)
00070E4C 1B45 0002                  		move.b	d5,2(a5)
00070E50 7000                       		moveq	#0,d0
00070E52 3019                       		move.w	(a1)+,d0
00070E54 D08B                       		add.l	a3,d0
00070E56 2B40 0004                  		move.l	d0,4(a5)
00070E5A 3B59 0008                  		move.w	(a1)+,8(a5)
00070E5E 1B7C 0001 000E             		move.b	#1,$E(a5)
00070E64 1B46 000D                  		move.b	d6,$D(a5)
00070E68 4A04                       		tst.b	d4
00070E6A 6B00                       		bmi.s	loc_72396
00070E6C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00070E72                            
00070E72                            loc_72396:
00070E72 51CF FFB0                  		dbf	d7,loc_72348
00070E76                            
00070E76 4A2E 0250                  		tst.b	$250(a6)
00070E7A 6A00                       		bpl.s	loc_723A6
00070E7C 08EE 0002 0340             		bset	#2,$340(a6)
00070E82                            
00070E82                            loc_723A6:
00070E82 4A2E 0310                  		tst.b	$310(a6)
00070E86 6A00                       		bpl.s	locret_723C6
00070E88 08EE 0002 0370             		bset	#2,$370(a6)
00070E8E 0004 001F                  		ori.b	#$1F,d4
00070E92 13C4 00C0 0011             		move.b	d4,($C00011).l
00070E98 0844 0005                  		bchg	#5,d4
00070E9C 13C4 00C0 0011             		move.b	d4,($C00011).l
00070EA2                            
00070EA2                            locret_723C6:
00070EA2 4E75                       		rts	
00070EA4                            ; End of function Sound_ChkValue
00070EA4                            
00070EA4                            ; ===========================================================================
00070EA4 00FF F100                  		dc.l $FFF100
00070EA8 00FF F1F0                  		dc.l $FFF1F0
00070EAC 00FF F250                  		dc.l $FFF250
00070EB0 00FF F310                  		dc.l $FFF310
00070EB4 00FF F340                  		dc.l $FFF340
00070EB8 00FF F370                  		dc.l $FFF370
00070EBC                            
00070EBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070EBC                            
00070EBC                            
00070EBC                            Snd_FadeOut1:				; XREF: Sound_E0
00070EBC 4216                       		clr.b	0(a6)
00070EBE 4BEE 0220                  		lea	$220(a6),a5
00070EC2 7E05                       		moveq	#5,d7
00070EC4                            
00070EC4                            loc_723EA:
00070EC4 4A15                       		tst.b	(a5)
00070EC6 6A00 0000                  		bpl.w	loc_72472
00070ECA 0895 0007                  		bclr	#7,(a5)
00070ECE 7600                       		moveq	#0,d3
00070ED0 162D 0001                  		move.b	1(a5),d3
00070ED4 6B00                       		bmi.s	loc_7243C
00070ED6 4EBA 0000                  		jsr	sub_726FE(pc)
00070EDA 0C03 0004                  		cmpi.b	#4,d3
00070EDE 6600                       		bne.s	loc_72416
00070EE0 4A2E 0340                  		tst.b	$340(a6)
00070EE4 6A00                       		bpl.s	loc_72416
00070EE6 4BEE 0340                  		lea	$340(a6),a5
00070EEA 226E 0020                  		movea.l	$20(a6),a1
00070EEE 6000                       		bra.s	loc_72428
00070EF0                            ; ===========================================================================
00070EF0                            
00070EF0                            loc_72416:
00070EF0 5503                       		subq.b	#2,d3
00070EF2 E50B                       		lsl.b	#2,d3
00070EF4 41FA FEB2                  		lea	dword_722CC(pc),a0
00070EF8 264D                       		movea.l	a5,a3
00070EFA 2A70 3000                  		movea.l	(a0,d3.w),a5
00070EFE 226E 0018                  		movea.l	$18(a6),a1
00070F02                            
00070F02                            loc_72428:
00070F02 0895 0002                  		bclr	#2,(a5)
00070F06 08D5 0001                  		bset	#1,(a5)
00070F0A 102D 000B                  		move.b	$B(a5),d0
00070F0E 4EBA 0000                  		jsr	sub_72C4E(pc)
00070F12 2A4B                       		movea.l	a3,a5
00070F14 6000                       		bra.s	loc_72472
00070F16                            ; ===========================================================================
00070F16                            
00070F16                            loc_7243C:
00070F16 4EBA 0000                  		jsr	sub_729A0(pc)
00070F1A 41EE 0370                  		lea	$370(a6),a0
00070F1E 0C03 00E0                  		cmpi.b	#$E0,d3
00070F22 6700                       		beq.s	loc_7245A
00070F24 0C03 00C0                  		cmpi.b	#$C0,d3
00070F28 6700                       		beq.s	loc_7245A
00070F2A E60B                       		lsr.b	#3,d3
00070F2C 41FA FE7A                  		lea	dword_722CC(pc),a0
00070F30 2070 3000                  		movea.l	(a0,d3.w),a0
00070F34                            
00070F34                            loc_7245A:
00070F34 0890 0002                  		bclr	#2,(a0)
00070F38 08D0 0001                  		bset	#1,(a0)
00070F3C 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00070F42 6600                       		bne.s	loc_72472
00070F44 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00070F4C                            
00070F4C                            loc_72472:
00070F4C DAFC 0030                  		adda.w	#$30,a5
00070F50 51CF FF72                  		dbf	d7,loc_723EA
00070F54                            
00070F54 4E75                       		rts	
00070F56                            ; End of function Snd_FadeOut1
00070F56                            
00070F56                            
00070F56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070F56                            
00070F56                            
00070F56                            Snd_FadeOut2:				; XREF: Sound_E0
00070F56 4BEE 0340                  		lea	$340(a6),a5
00070F5A 4A15                       		tst.b	(a5)
00070F5C 6A00                       		bpl.s	loc_724AE
00070F5E 0895 0007                  		bclr	#7,(a5)
00070F62 0815 0002                  		btst	#2,(a5)
00070F66 6600                       		bne.s	loc_724AE
00070F68 4EBA 0000                  		jsr	loc_7270A(pc)
00070F6C 4BEE 0100                  		lea	$100(a6),a5
00070F70 0895 0002                  		bclr	#2,(a5)
00070F74 08D5 0001                  		bset	#1,(a5)
00070F78 4A15                       		tst.b	(a5)
00070F7A 6A00                       		bpl.s	loc_724AE
00070F7C 226E 0018                  		movea.l	$18(a6),a1
00070F80 102D 000B                  		move.b	$B(a5),d0
00070F84 4EBA 0000                  		jsr	sub_72C4E(pc)
00070F88                            
00070F88                            loc_724AE:
00070F88 4BEE 0370                  		lea	$370(a6),a5
00070F8C 4A15                       		tst.b	(a5)
00070F8E 6A00                       		bpl.s	locret_724E4
00070F90 0895 0007                  		bclr	#7,(a5)
00070F94 0815 0002                  		btst	#2,(a5)
00070F98 6600                       		bne.s	locret_724E4
00070F9A 4EBA 0000                  		jsr	loc_729A6(pc)
00070F9E 4BEE 01F0                  		lea	$1F0(a6),a5
00070FA2 0895 0002                  		bclr	#2,(a5)
00070FA6 08D5 0001                  		bset	#1,(a5)
00070FAA 4A15                       		tst.b	(a5)
00070FAC 6A00                       		bpl.s	locret_724E4
00070FAE 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00070FB4 6600                       		bne.s	locret_724E4
00070FB6 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00070FBE                            
00070FBE                            locret_724E4:
00070FBE 4E75                       		rts	
00070FC0                            ; End of function Snd_FadeOut2
00070FC0                            
00070FC0                            ; ===========================================================================
00070FC0                            ; ---------------------------------------------------------------------------
00070FC0                            ; Fade out music
00070FC0                            ; ---------------------------------------------------------------------------
00070FC0                            
00070FC0                            Sound_E0:				; XREF: Sound_ExIndex
00070FC0 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00070FC4 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00070FC8 1D7C 0003 0006             		move.b	#3,6(a6)
00070FCE 1D7C 0028 0004             		move.b	#$28,4(a6)
00070FD4 422E 0040                  		clr.b	$40(a6)
00070FD8 422E 002A                  		clr.b	$2A(a6)
00070FDC 4E75                       		rts	
00070FDE                            
00070FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070FDE                            
00070FDE                            
00070FDE                            sub_72504:				; XREF: sub_71B4C
00070FDE 102E 0006                  		move.b	6(a6),d0
00070FE2 6700                       		beq.s	loc_72510
00070FE4 532E 0006                  		subq.b	#1,6(a6)
00070FE8 4E75                       		rts	
00070FEA                            ; ===========================================================================
00070FEA                            
00070FEA                            loc_72510:
00070FEA 532E 0004                  		subq.b	#1,4(a6)
00070FEE 6700 0000                  		beq.w	Sound_E4
00070FF2 1D7C 0003 0006             		move.b	#3,6(a6)
00070FF8 4BEE 0070                  		lea	$70(a6),a5
00070FFC 7E05                       		moveq	#5,d7
00070FFE                            
00070FFE                            loc_72524:
00070FFE 4A15                       		tst.b	(a5)
00071000 6A00                       		bpl.s	loc_72538
00071002 522D 0009                  		addq.b	#1,9(a5)
00071006 6A00                       		bpl.s	loc_72534
00071008 0895 0007                  		bclr	#7,(a5)
0007100C 6000                       		bra.s	loc_72538
0007100E                            ; ===========================================================================
0007100E                            
0007100E                            loc_72534:
0007100E 4EBA 0000                  		jsr	sub_72CB4(pc)
00071012                            
00071012                            loc_72538:
00071012 DAFC 0030                  		adda.w	#$30,a5
00071016 51CF FFE6                  		dbf	d7,loc_72524
0007101A                            
0007101A 7E02                       		moveq	#2,d7
0007101C                            
0007101C                            loc_72542:
0007101C 4A15                       		tst.b	(a5)
0007101E 6A00                       		bpl.s	loc_72560
00071020 522D 0009                  		addq.b	#1,9(a5)
00071024 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007102A 6500                       		bcs.s	loc_72558
0007102C 0895 0007                  		bclr	#7,(a5)
00071030 6000                       		bra.s	loc_72560
00071032                            ; ===========================================================================
00071032                            
00071032                            loc_72558:
00071032 1C2D 0009                  		move.b	9(a5),d6
00071036 4EBA 0000                  		jsr	sub_7296A(pc)
0007103A                            
0007103A                            loc_72560:
0007103A DAFC 0030                  		adda.w	#$30,a5
0007103E 51CF FFDC                  		dbf	d7,loc_72542
00071042                            
00071042 4E75                       		rts	
00071044                            ; End of function sub_72504
00071044                            
00071044                            
00071044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071044                            
00071044                            
00071044                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00071044 7602                       		moveq	#2,d3
00071046 7028                       		moveq	#$28,d0
00071048                            
00071048                            loc_7256E:
00071048 1203                       		move.b	d3,d1
0007104A 4EBA 0000                  		jsr	sub_7272E(pc)
0007104E 5801                       		addq.b	#4,d1
00071050 4EBA 0000                  		jsr	sub_7272E(pc)
00071054 51CB FFF2                  		dbf	d3,loc_7256E
00071058                            
00071058 7040                       		moveq	#$40,d0
0007105A 727F                       		moveq	#$7F,d1
0007105C 7802                       		moveq	#2,d4
0007105E                            
0007105E                            loc_72584:
0007105E 7603                       		moveq	#3,d3
00071060                            
00071060                            loc_72586:
00071060 4EBA 0000                  		jsr	sub_7272E(pc)
00071064 4EBA 0000                  		jsr	sub_72764(pc)
00071068 5840                       		addq.w	#4,d0
0007106A 51CB FFF4                  		dbf	d3,loc_72586
0007106E                            
0007106E 0400 000F                  		subi.b	#$F,d0
00071072 51CC FFEA                  		dbf	d4,loc_72584
00071076                            
00071076 4E75                       		rts	
00071078                            ; End of function sub_7256A
00071078                            
00071078                            ; ===========================================================================
00071078                            ; ---------------------------------------------------------------------------
00071078                            ; Stop music
00071078                            ; ---------------------------------------------------------------------------
00071078                            
00071078                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00071078 702B                       		moveq	#$2B,d0
0007107A 123C 0080                  		move.b	#$80,d1
0007107E 4EBA 0000                  		jsr	sub_7272E(pc)
00071082 7027                       		moveq	#$27,d0
00071084 7200                       		moveq	#0,d1
00071086 4EBA 0000                  		jsr	sub_7272E(pc)
0007108A 204E                       		movea.l	a6,a0
0007108C 303C 00E3                  		move.w	#$E3,d0
00071090                            
00071090                            loc_725B6:
00071090 4298                       		clr.l	(a0)+
00071092 51C8 FFFC                  		dbf	d0,loc_725B6
00071096                            
00071096 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007109C 4EBA FFA6                  		jsr	sub_7256A(pc)
000710A0 6000 0000                  		bra.w	sub_729B6
000710A4                            
000710A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000710A4                            
000710A4                            
000710A4                            sub_725CA:				; XREF: Sound_ChkValue
000710A4 204E                       		movea.l	a6,a0
000710A6 1216                       		move.b	0(a6),d1
000710A8 142E 0027                  		move.b	$27(a6),d2
000710AC 162E 002A                  		move.b	$2A(a6),d3
000710B0 182E 0026                  		move.b	$26(a6),d4
000710B4 3A2E 000A                  		move.w	$A(a6),d5
000710B8 303C 0087                  		move.w	#$87,d0
000710BC                            
000710BC                            loc_725E4:
000710BC 4298                       		clr.l	(a0)+
000710BE 51C8 FFFC                  		dbf	d0,loc_725E4
000710C2                            
000710C2 1C81                       		move.b	d1,0(a6)
000710C4 1D42 0027                  		move.b	d2,$27(a6)
000710C8 1D43 002A                  		move.b	d3,$2A(a6)
000710CC 1D44 0026                  		move.b	d4,$26(a6)
000710D0 3D45 000A                  		move.w	d5,$A(a6)
000710D4 1D7C 0080 0009             		move.b	#$80,9(a6)
000710DA 4EBA FF68                  		jsr	sub_7256A(pc)
000710DE 6000 0000                  		bra.w	sub_729B6
000710E2                            ; End of function sub_725CA
000710E2                            
000710E2                            
000710E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000710E2                            
000710E2                            
000710E2                            sub_7260C:				; XREF: sub_71B4C
000710E2 1D6E 0002 0001             		move.b	2(a6),1(a6)
000710E8 41EE 004E                  		lea	$4E(a6),a0
000710EC 7030                       		moveq	#$30,d0
000710EE 7209                       		moveq	#9,d1
000710F0                            
000710F0                            loc_7261A:
000710F0 5210                       		addq.b	#1,(a0)
000710F2 D0C0                       		adda.w	d0,a0
000710F4 51C9 FFFA                  		dbf	d1,loc_7261A
000710F8                            
000710F8 4E75                       		rts	
000710FA                            ; End of function sub_7260C
000710FA                            
000710FA                            ; ===========================================================================
000710FA                            ; ---------------------------------------------------------------------------
000710FA                            ; Speed	up music
000710FA                            ; ---------------------------------------------------------------------------
000710FA                            
000710FA                            Sound_E2:				; XREF: Sound_ExIndex
000710FA 4A2E 0027                  		tst.b	$27(a6)
000710FE 6600                       		bne.s	loc_7263E
00071100 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00071106 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007110C 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00071112 4E75                       		rts	
00071114                            ; ===========================================================================
00071114                            
00071114                            loc_7263E:
00071114 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007111A 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00071120 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00071126 4E75                       		rts	
00071128                            ; ===========================================================================
00071128                            ; ---------------------------------------------------------------------------
00071128                            ; Change music back to normal speed
00071128                            ; ---------------------------------------------------------------------------
00071128                            
00071128                            Sound_E3:				; XREF: Sound_ExIndex
00071128 4A2E 0027                  		tst.b	$27(a6)
0007112C 6600                       		bne.s	loc_7266A
0007112E 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00071134 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007113A 422E 002A                  		clr.b	$2A(a6)
0007113E 4E75                       		rts	
00071140                            ; ===========================================================================
00071140                            
00071140                            loc_7266A:
00071140 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00071146 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007114C 422E 03CA                  		clr.b	$3CA(a6)
00071150 4E75                       		rts	
00071152                            
00071152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071152                            
00071152                            
00071152                            sub_7267C:				; XREF: sub_71B4C
00071152 4A2E 0025                  		tst.b	$25(a6)
00071156 6700                       		beq.s	loc_72688
00071158 532E 0025                  		subq.b	#1,$25(a6)
0007115C 4E75                       		rts	
0007115E                            ; ===========================================================================
0007115E                            
0007115E                            loc_72688:
0007115E 4A2E 0026                  		tst.b	$26(a6)
00071162 6700                       		beq.s	loc_726D6
00071164 532E 0026                  		subq.b	#1,$26(a6)
00071168 1D7C 0002 0025             		move.b	#2,$25(a6)
0007116E 4BEE 0070                  		lea	$70(a6),a5
00071172 7E05                       		moveq	#5,d7
00071174                            
00071174                            loc_7269E:
00071174 4A15                       		tst.b	(a5)
00071176 6A00                       		bpl.s	loc_726AA
00071178 532D 0009                  		subq.b	#1,9(a5)
0007117C 4EBA 0000                  		jsr	sub_72CB4(pc)
00071180                            
00071180                            loc_726AA:
00071180 DAFC 0030                  		adda.w	#$30,a5
00071184 51CF FFEE                  		dbf	d7,loc_7269E
00071188 7E02                       		moveq	#2,d7
0007118A                            
0007118A                            loc_726B4:
0007118A 4A15                       		tst.b	(a5)
0007118C 6A00                       		bpl.s	loc_726CC
0007118E 532D 0009                  		subq.b	#1,9(a5)
00071192 1C2D 0009                  		move.b	9(a5),d6
00071196 0C06 0010                  		cmpi.b	#$10,d6
0007119A 6500                       		bcs.s	loc_726C8
0007119C 7C0F                       		moveq	#$F,d6
0007119E                            
0007119E                            loc_726C8:
0007119E 4EBA 0000                  		jsr	sub_7296A(pc)
000711A2                            
000711A2                            loc_726CC:
000711A2 DAFC 0030                  		adda.w	#$30,a5
000711A6 51CF FFE2                  		dbf	d7,loc_726B4
000711AA 4E75                       		rts	
000711AC                            ; ===========================================================================
000711AC                            
000711AC                            loc_726D6:
000711AC 08AE 0002 0040             		bclr	#2,$40(a6)
000711B2 422E 0024                  		clr.b	$24(a6)
000711B6 4E75                       		rts	
000711B8                            ; End of function sub_7267C
000711B8                            
000711B8                            ; ===========================================================================
000711B8                            
000711B8                            loc_726E2:				; XREF: sub_71CCA
000711B8 0815 0001                  		btst	#1,(a5)
000711BC 6600                       		bne.s	locret_726FC
000711BE 0815 0002                  		btst	#2,(a5)
000711C2 6600                       		bne.s	locret_726FC
000711C4 7028                       		moveq	#$28,d0
000711C6 122D 0001                  		move.b	1(a5),d1
000711CA 0001 00F0                  		ori.b	#-$10,d1
000711CE 6000 0000                  		bra.w	sub_7272E
000711D2                            ; ===========================================================================
000711D2                            
000711D2                            locret_726FC:
000711D2 4E75                       		rts	
000711D4                            
000711D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000711D4                            
000711D4                            
000711D4                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000711D4 0815 0004                  		btst	#4,(a5)
000711D8 6600                       		bne.s	locret_72714
000711DA 0815 0002                  		btst	#2,(a5)
000711DE 6600                       		bne.s	locret_72714
000711E0                            
000711E0                            loc_7270A:				; XREF: Snd_FadeOut2
000711E0 7028                       		moveq	#$28,d0
000711E2 122D 0001                  		move.b	1(a5),d1
000711E6 6000 0000                  		bra.w	sub_7272E
000711EA                            ; ===========================================================================
000711EA                            
000711EA                            locret_72714:
000711EA 4E75                       		rts	
000711EC                            ; End of function sub_726FE
000711EC                            
000711EC                            ; ===========================================================================
000711EC                            
000711EC                            loc_72716:				; XREF: sub_72A5A
000711EC 0815 0002                  		btst	#2,(a5)
000711F0 6600                       		bne.s	locret_72720
000711F2 6000 0000                  		bra.w	sub_72722
000711F6                            ; ===========================================================================
000711F6                            
000711F6                            locret_72720:
000711F6 4E75                       		rts	
000711F8                            
000711F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000711F8                            
000711F8                            
000711F8                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000711F8 082D 0002 0001             		btst	#2,1(a5)
000711FE 6600                       		bne.s	loc_7275A
00071200 D02D 0001                  		add.b	1(a5),d0
00071204                            ; End of function sub_72722
00071204                            
00071204                            
00071204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071204                            
00071204                            
00071204                            sub_7272E:				; XREF: loc_71E6A
00071204 1439 00A0 4000             		move.b	($A04000).l,d2
0007120A 0802 0007                  		btst	#7,d2
0007120E 66F4                       		bne.s	sub_7272E
00071210 13C0 00A0 4000             		move.b	d0,($A04000).l
00071216 4E71                       		nop	
00071218 4E71                       		nop	
0007121A 4E71                       		nop	
0007121C                            
0007121C                            loc_72746:
0007121C 1439 00A0 4000             		move.b	($A04000).l,d2
00071222 0802 0007                  		btst	#7,d2
00071226 66F4                       		bne.s	loc_72746
00071228                            
00071228 13C1 00A0 4001             		move.b	d1,($A04001).l
0007122E 4E75                       		rts	
00071230                            ; End of function sub_7272E
00071230                            
00071230                            ; ===========================================================================
00071230                            
00071230                            loc_7275A:				; XREF: sub_72722
00071230 142D 0001                  		move.b	1(a5),d2
00071234 0882 0002                  		bclr	#2,d2
00071238 D002                       		add.b	d2,d0
0007123A                            
0007123A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007123A                            
0007123A                            
0007123A                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007123A 1439 00A0 4000             		move.b	($A04000).l,d2
00071240 0802 0007                  		btst	#7,d2
00071244 66F4                       		bne.s	sub_72764
00071246 13C0 00A0 4002             		move.b	d0,($A04002).l
0007124C 4E71                       		nop	
0007124E 4E71                       		nop	
00071250 4E71                       		nop	
00071252                            
00071252                            loc_7277C:
00071252 1439 00A0 4000             		move.b	($A04000).l,d2
00071258 0802 0007                  		btst	#7,d2
0007125C 66F4                       		bne.s	loc_7277C
0007125E                            
0007125E 13C1 00A0 4003             		move.b	d1,($A04003).l
00071264 4E75                       		rts	
00071266                            ; End of function sub_72764
00071266                            
00071266                            ; ===========================================================================
00071266 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00071278 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007128A 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007129A 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000712AA 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000712BA 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000712CA 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000712DA 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000712EA 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000712FA 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007130A 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007131A 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00071326                            
00071326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071326                            
00071326                            
00071326                            sub_72850:				; XREF: sub_71B4C
00071326 532D 000E                  		subq.b	#1,$E(a5)
0007132A 6600                       		bne.s	loc_72866
0007132C 0895 0004                  		bclr	#4,(a5)
00071330 4EBA 0000                  		jsr	sub_72878(pc)
00071334 4EBA 0000                  		jsr	sub_728DC(pc)
00071338 6000 0000                  		bra.w	loc_7292E
0007133C                            ; ===========================================================================
0007133C                            
0007133C                            loc_72866:
0007133C 4EBA F4B2                  		jsr	sub_71D9E(pc)
00071340 4EBA 0000                  		jsr	sub_72926(pc)
00071344 4EBA F4D2                  		jsr	sub_71DC6(pc)
00071348 4EBA 0000                  		jsr	sub_728E2(pc)
0007134C 4E75                       		rts	
0007134E                            ; End of function sub_72850
0007134E                            
0007134E                            
0007134E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007134E                            
0007134E                            
0007134E                            sub_72878:				; XREF: sub_72850
0007134E 0895 0001                  		bclr	#1,(a5)
00071352 286D 0004                  		movea.l	4(a5),a4
00071356                            
00071356                            loc_72880:
00071356 7A00                       		moveq	#0,d5
00071358 1A1C                       		move.b	(a4)+,d5
0007135A 0C05 00E0                  		cmpi.b	#$E0,d5
0007135E 6500                       		bcs.s	loc_72890
00071360 4EBA 0000                  		jsr	sub_72A5A(pc)
00071364 60F0                       		bra.s	loc_72880
00071366                            ; ===========================================================================
00071366                            
00071366                            loc_72890:
00071366 4A05                       		tst.b	d5
00071368 6A00                       		bpl.s	loc_728A4
0007136A 4EBA 0000                  		jsr	sub_728AC(pc)
0007136E 1A1C                       		move.b	(a4)+,d5
00071370 4A05                       		tst.b	d5
00071372 6A00                       		bpl.s	loc_728A4
00071374 534C                       		subq.w	#1,a4
00071376 6000 F43A                  		bra.w	sub_71D60
0007137A                            ; ===========================================================================
0007137A                            
0007137A                            loc_728A4:
0007137A 4EBA F416                  		jsr	sub_71D40(pc)
0007137E 6000 F432                  		bra.w	sub_71D60
00071382                            ; End of function sub_72878
00071382                            
00071382                            
00071382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071382                            
00071382                            
00071382                            sub_728AC:				; XREF: sub_72878
00071382 0405 0081                  		subi.b	#$81,d5
00071386 6500                       		bcs.s	loc_728CA
00071388 DA2D 0008                  		add.b	8(a5),d5
0007138C 0245 007F                  		andi.w	#$7F,d5
00071390 E34D                       		lsl.w	#1,d5
00071392 41FA 0000                  		lea	word_729CE(pc),a0
00071396 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007139C 6000 F414                  		bra.w	sub_71D60
000713A0                            ; ===========================================================================
000713A0                            
000713A0                            loc_728CA:
000713A0 08D5 0001                  		bset	#1,(a5)
000713A4 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000713AA 4EBA F406                  		jsr	sub_71D60(pc)
000713AE 6000 0000                  		bra.w	sub_729A0
000713B2                            ; End of function sub_728AC
000713B2                            
000713B2                            
000713B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000713B2                            
000713B2                            
000713B2                            sub_728DC:				; XREF: sub_72850
000713B2 3C2D 0010                  		move.w	$10(a5),d6
000713B6 6B00                       		bmi.s	loc_72920
000713B8                            ; End of function sub_728DC
000713B8                            
000713B8                            
000713B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000713B8                            
000713B8                            
000713B8                            sub_728E2:				; XREF: sub_72850
000713B8 102D 001E                  		move.b	$1E(a5),d0
000713BC 4880                       		ext.w	d0
000713BE DC40                       		add.w	d0,d6
000713C0 0815 0002                  		btst	#2,(a5)
000713C4 6600                       		bne.s	locret_7291E
000713C6 0815 0001                  		btst	#1,(a5)
000713CA 6600                       		bne.s	locret_7291E
000713CC 102D 0001                  		move.b	1(a5),d0
000713D0 0C00 00E0                  		cmpi.b	#$E0,d0
000713D4 6600                       		bne.s	loc_72904
000713D6 103C 00C0                  		move.b	#$C0,d0
000713DA                            
000713DA                            loc_72904:
000713DA 3206                       		move.w	d6,d1
000713DC 0201 000F                  		andi.b	#$F,d1
000713E0 8001                       		or.b	d1,d0
000713E2 E84E                       		lsr.w	#4,d6
000713E4 0206 003F                  		andi.b	#$3F,d6
000713E8 13C0 00C0 0011             		move.b	d0,($C00011).l
000713EE 13C6 00C0 0011             		move.b	d6,($C00011).l
000713F4                            
000713F4                            locret_7291E:
000713F4 4E75                       		rts	
000713F6                            ; End of function sub_728E2
000713F6                            
000713F6                            ; ===========================================================================
000713F6                            
000713F6                            loc_72920:				; XREF: sub_728DC
000713F6 08D5 0001                  		bset	#1,(a5)
000713FA 4E75                       		rts	
000713FC                            
000713FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000713FC                            
000713FC                            
000713FC                            sub_72926:				; XREF: sub_72850
000713FC 4A2D 000B                  		tst.b	$B(a5)
00071400 6700 0000                  		beq.w	locret_7298A
00071404                            
00071404                            loc_7292E:				; XREF: sub_72850
00071404 1C2D 0009                  		move.b	9(a5),d6
00071408 7000                       		moveq	#0,d0
0007140A 102D 000B                  		move.b	$B(a5),d0
0007140E 6700                       		beq.s	sub_7296A
00071410 2079 0007 03C6             		movea.l	(Go_PSGIndex).l,a0
00071416 5340                       		subq.w	#1,d0
00071418 E548                       		lsl.w	#2,d0
0007141A 2070 0000                  		movea.l	(a0,d0.w),a0
0007141E 102D 000C                  		move.b	$C(a5),d0
00071422 1030 0000                  		move.b	(a0,d0.w),d0
00071426 522D 000C                  		addq.b	#1,$C(a5)
0007142A 0800 0007                  		btst	#7,d0
0007142E 6700                       		beq.s	loc_72960
00071430 0C00 0080                  		cmpi.b	#$80,d0
00071434 6700                       		beq.s	loc_7299A
00071436                            
00071436                            loc_72960:
00071436 DC40                       		add.w	d0,d6
00071438 0C06 0010                  		cmpi.b	#$10,d6
0007143C 6500                       		bcs.s	sub_7296A
0007143E 7C0F                       		moveq	#$F,d6
00071440                            ; End of function sub_72926
00071440                            
00071440                            
00071440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071440                            
00071440                            
00071440                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00071440 0815 0001                  		btst	#1,(a5)
00071444 6600                       		bne.s	locret_7298A
00071446 0815 0002                  		btst	#2,(a5)
0007144A 6600                       		bne.s	locret_7298A
0007144C 0815 0004                  		btst	#4,(a5)
00071450 6600                       		bne.s	loc_7298C
00071452                            
00071452                            loc_7297C:
00071452 8C2D 0001                  		or.b	1(a5),d6
00071456 0606 0010                  		addi.b	#$10,d6
0007145A 13C6 00C0 0011             		move.b	d6,($C00011).l
00071460                            
00071460                            locret_7298A:
00071460 4E75                       		rts	
00071462                            ; ===========================================================================
00071462                            
00071462                            loc_7298C:
00071462 4A2D 0013                  		tst.b	$13(a5)
00071466 67EA                       		beq.s	loc_7297C
00071468 4A2D 0012                  		tst.b	$12(a5)
0007146C 66E4                       		bne.s	loc_7297C
0007146E 4E75                       		rts	
00071470                            ; End of function sub_7296A
00071470                            
00071470                            ; ===========================================================================
00071470                            
00071470                            loc_7299A:				; XREF: sub_72926
00071470 532D 000C                  		subq.b	#1,$C(a5)
00071474 4E75                       		rts	
00071476                            
00071476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071476                            
00071476                            
00071476                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00071476 0815 0002                  		btst	#2,(a5)
0007147A 6600                       		bne.s	locret_729B4
0007147C                            
0007147C                            loc_729A6:				; XREF: Snd_FadeOut2
0007147C 102D 0001                  		move.b	1(a5),d0
00071480 0000 001F                  		ori.b	#$1F,d0
00071484 13C0 00C0 0011             		move.b	d0,($C00011).l
0007148A                            
0007148A                            locret_729B4:
0007148A 4E75                       		rts	
0007148C                            ; End of function sub_729A0
0007148C                            
0007148C                            
0007148C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007148C                            
0007148C                            
0007148C                            sub_729B6:				; XREF: loc_71E7C
0007148C 41F9 00C0 0011             		lea	($C00011).l,a0
00071492 10BC 009F                  		move.b	#$9F,(a0)
00071496 10BC 00BF                  		move.b	#$BF,(a0)
0007149A 10BC 00DF                  		move.b	#$DF,(a0)
0007149E 10BC 00FF                  		move.b	#$FF,(a0)
000714A2 4E75                       		rts	
000714A4                            ; End of function sub_729B6
000714A4                            
000714A4                            ; ===========================================================================
000714A4 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000714B6 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000714C8 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000714DC 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000714F0 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00071504 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00071518 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007152C 0011 0000                  		dc.w $11, 0
00071530                            
00071530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071530                            
00071530                            
00071530                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00071530 0445 00E0                  		subi.w	#$E0,d5
00071534 E54D                       		lsl.w	#2,d5
00071536 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007153A                            ; End of function sub_72A5A
0007153A                            
0007153A                            ; ===========================================================================
0007153A                            
0007153A                            loc_72A64:
0007153A 6000 0000                  		bra.w	loc_72ACC
0007153E                            ; ===========================================================================
0007153E 6000 0000                  		bra.w	loc_72AEC
00071542                            ; ===========================================================================
00071542 6000 0000                  		bra.w	loc_72AF2
00071546                            ; ===========================================================================
00071546 6000 0000                  		bra.w	loc_72AF8
0007154A                            ; ===========================================================================
0007154A 6000 0000                  		bra.w	loc_72B14
0007154E                            ; ===========================================================================
0007154E 6000 0000                  		bra.w	loc_72B9E
00071552                            ; ===========================================================================
00071552 6000 0000                  		bra.w	loc_72BA4
00071556                            ; ===========================================================================
00071556 6000 0000                  		bra.w	loc_72BAE
0007155A                            ; ===========================================================================
0007155A 6000 0000                  		bra.w	loc_72BB4
0007155E                            ; ===========================================================================
0007155E 6000 0000                  		bra.w	loc_72BBE
00071562                            ; ===========================================================================
00071562 6000 0000                  		bra.w	loc_72BC6
00071566                            ; ===========================================================================
00071566 6000 0000                  		bra.w	loc_72BD0
0007156A                            ; ===========================================================================
0007156A 6000 0000                  		bra.w	loc_72BE6
0007156E                            ; ===========================================================================
0007156E 6000 0000                  		bra.w	loc_72BEE
00071572                            ; ===========================================================================
00071572 6000 0000                  		bra.w	loc_72BF4
00071576                            ; ===========================================================================
00071576 6000 0000                  		bra.w	loc_72C26
0007157A                            ; ===========================================================================
0007157A 6000 0000                  		bra.w	loc_72D30
0007157E                            ; ===========================================================================
0007157E 6000 0000                  		bra.w	loc_72D52
00071582                            ; ===========================================================================
00071582 6000 0000                  		bra.w	loc_72D58
00071586                            ; ===========================================================================
00071586 6000 0000                  		bra.w	loc_72E06
0007158A                            ; ===========================================================================
0007158A 6000 0000                  		bra.w	loc_72E20
0007158E                            ; ===========================================================================
0007158E 6000 0000                  		bra.w	loc_72E26
00071592                            ; ===========================================================================
00071592 6000 0000                  		bra.w	loc_72E2C
00071596                            ; ===========================================================================
00071596 6000 0000                  		bra.w	loc_72E38
0007159A                            ; ===========================================================================
0007159A 6000 0000                  		bra.w	loc_72E52
0007159E                            ; ===========================================================================
0007159E 6000 0000                  		bra.w	loc_72E64
000715A2                            ; ===========================================================================
000715A2                            
000715A2                            loc_72ACC:				; XREF: loc_72A64
000715A2 121C                       		move.b	(a4)+,d1
000715A4 4A2D 0001                  		tst.b	1(a5)
000715A8 6B00                       		bmi.s	locret_72AEA
000715AA 102D 000A                  		move.b	$A(a5),d0
000715AE 0200 0037                  		andi.b	#$37,d0
000715B2 8200                       		or.b	d0,d1
000715B4 1B41 000A                  		move.b	d1,$A(a5)
000715B8 103C 00B4                  		move.b	#$B4,d0
000715BC 6000 FC2E                  		bra.w	loc_72716
000715C0                            ; ===========================================================================
000715C0                            
000715C0                            locret_72AEA:
000715C0 4E75                       		rts	
000715C2                            ; ===========================================================================
000715C2                            
000715C2                            loc_72AEC:				; XREF: loc_72A64
000715C2 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000715C6 4E75                       		rts	
000715C8                            ; ===========================================================================
000715C8                            
000715C8                            loc_72AF2:				; XREF: loc_72A64
000715C8 1D5C 0007                  		move.b	(a4)+,7(a6)
000715CC 4E75                       		rts	
000715CE                            ; ===========================================================================
000715CE                            
000715CE                            loc_72AF8:				; XREF: loc_72A64
000715CE 7000                       		moveq	#0,d0
000715D0 102D 000D                  		move.b	$D(a5),d0
000715D4 2875 0000                  		movea.l	(a5,d0.w),a4
000715D8 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000715E0 544C                       		addq.w	#2,a4
000715E2 5800                       		addq.b	#4,d0
000715E4 1B40 000D                  		move.b	d0,$D(a5)
000715E8 4E75                       		rts	
000715EA                            ; ===========================================================================
000715EA                            
000715EA                            loc_72B14:				; XREF: loc_72A64
000715EA 204E                       		movea.l	a6,a0
000715EC 43EE 03A0                  		lea	$3A0(a6),a1
000715F0 303C 0087                  		move.w	#$87,d0
000715F4                            
000715F4                            loc_72B1E:
000715F4 20D9                       		move.l	(a1)+,(a0)+
000715F6 51C8 FFFC                  		dbf	d0,loc_72B1E
000715FA                            
000715FA 08EE 0002 0040             		bset	#2,$40(a6)
00071600 264D                       		movea.l	a5,a3
00071602 1C3C 0028                  		move.b	#$28,d6
00071606 9C2E 0026                  		sub.b	$26(a6),d6
0007160A 7E05                       		moveq	#5,d7
0007160C 4BEE 0070                  		lea	$70(a6),a5
00071610                            
00071610                            loc_72B3A:
00071610 0815 0007                  		btst	#7,(a5)
00071614 6700                       		beq.s	loc_72B5C
00071616 08D5 0001                  		bset	#1,(a5)
0007161A DD2D 0009                  		add.b	d6,9(a5)
0007161E 0815 0002                  		btst	#2,(a5)
00071622 6600                       		bne.s	loc_72B5C
00071624 7000                       		moveq	#0,d0
00071626 102D 000B                  		move.b	$B(a5),d0
0007162A 226E 0018                  		movea.l	$18(a6),a1
0007162E 4EBA 0000                  		jsr	sub_72C4E(pc)
00071632                            
00071632                            loc_72B5C:
00071632 DAFC 0030                  		adda.w	#$30,a5
00071636 51CF FFD8                  		dbf	d7,loc_72B3A
0007163A                            
0007163A 7E02                       		moveq	#2,d7
0007163C                            
0007163C                            loc_72B66:
0007163C 0815 0007                  		btst	#7,(a5)
00071640 6700                       		beq.s	loc_72B78
00071642 08D5 0001                  		bset	#1,(a5)
00071646 4EBA FE2E                  		jsr	sub_729A0(pc)
0007164A DD2D 0009                  		add.b	d6,9(a5)
0007164E                            
0007164E                            loc_72B78:
0007164E DAFC 0030                  		adda.w	#$30,a5
00071652 51CF FFE8                  		dbf	d7,loc_72B66
00071656 2A4B                       		movea.l	a3,a5
00071658 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007165E 1D7C 0028 0026             		move.b	#$28,$26(a6)
00071664 422E 0027                  		clr.b	$27(a6)
00071668 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00071670 504F                       		addq.w	#8,sp
00071672 4E75                       		rts	
00071674                            ; ===========================================================================
00071674                            
00071674                            loc_72B9E:				; XREF: loc_72A64
00071674 1B5C 0002                  		move.b	(a4)+,2(a5)
00071678 4E75                       		rts	
0007167A                            ; ===========================================================================
0007167A                            
0007167A                            loc_72BA4:				; XREF: loc_72A64
0007167A 101C                       		move.b	(a4)+,d0
0007167C D12D 0009                  		add.b	d0,9(a5)
00071680 6000 0000                  		bra.w	sub_72CB4
00071684                            ; ===========================================================================
00071684                            
00071684                            loc_72BAE:				; XREF: loc_72A64
00071684 08D5 0004                  		bset	#4,(a5)
00071688 4E75                       		rts	
0007168A                            ; ===========================================================================
0007168A                            
0007168A                            loc_72BB4:				; XREF: loc_72A64
0007168A 1B54 0012                  		move.b	(a4),$12(a5)
0007168E 1B5C 0013                  		move.b	(a4)+,$13(a5)
00071692 4E75                       		rts	
00071694                            ; ===========================================================================
00071694                            
00071694                            loc_72BBE:				; XREF: loc_72A64
00071694 101C                       		move.b	(a4)+,d0
00071696 D12D 0008                  		add.b	d0,8(a5)
0007169A 4E75                       		rts	
0007169C                            ; ===========================================================================
0007169C                            
0007169C                            loc_72BC6:				; XREF: loc_72A64
0007169C 1D54 0002                  		move.b	(a4),2(a6)
000716A0 1D5C 0001                  		move.b	(a4)+,1(a6)
000716A4 4E75                       		rts	
000716A6                            ; ===========================================================================
000716A6                            
000716A6                            loc_72BD0:				; XREF: loc_72A64
000716A6 41EE 0040                  		lea	$40(a6),a0
000716AA 101C                       		move.b	(a4)+,d0
000716AC 7230                       		moveq	#$30,d1
000716AE 7409                       		moveq	#9,d2
000716B0                            
000716B0                            loc_72BDA:
000716B0 1140 0002                  		move.b	d0,2(a0)
000716B4 D0C1                       		adda.w	d1,a0
000716B6 51CA FFF8                  		dbf	d2,loc_72BDA
000716BA                            
000716BA 4E75                       		rts	
000716BC                            ; ===========================================================================
000716BC                            
000716BC                            loc_72BE6:				; XREF: loc_72A64
000716BC 101C                       		move.b	(a4)+,d0
000716BE D12D 0009                  		add.b	d0,9(a5)
000716C2 4E75                       		rts	
000716C4                            ; ===========================================================================
000716C4                            
000716C4                            loc_72BEE:				; XREF: loc_72A64
000716C4 422E 002C                  		clr.b	$2C(a6)
000716C8 4E75                       		rts	
000716CA                            ; ===========================================================================
000716CA                            
000716CA                            loc_72BF4:				; XREF: loc_72A64
000716CA 0895 0007                  		bclr	#7,(a5)
000716CE 0895 0004                  		bclr	#4,(a5)
000716D2 4EBA FB00                  		jsr	sub_726FE(pc)
000716D6 4A2E 0250                  		tst.b	$250(a6)
000716DA 6B00                       		bmi.s	loc_72C22
000716DC 264D                       		movea.l	a5,a3
000716DE 4BEE 0100                  		lea	$100(a6),a5
000716E2 226E 0018                  		movea.l	$18(a6),a1
000716E6 0895 0002                  		bclr	#2,(a5)
000716EA 08D5 0001                  		bset	#1,(a5)
000716EE 102D 000B                  		move.b	$B(a5),d0
000716F2 4EBA 0000                  		jsr	sub_72C4E(pc)
000716F6 2A4B                       		movea.l	a3,a5
000716F8                            
000716F8                            loc_72C22:
000716F8 504F                       		addq.w	#8,sp
000716FA 4E75                       		rts	
000716FC                            ; ===========================================================================
000716FC                            
000716FC                            loc_72C26:				; XREF: loc_72A64
000716FC 7000                       		moveq	#0,d0
000716FE 101C                       		move.b	(a4)+,d0
00071700 1B40 000B                  		move.b	d0,$B(a5)
00071704 0815 0002                  		btst	#2,(a5)
00071708 6600 0000                  		bne.w	locret_72CAA
0007170C 226E 0018                  		movea.l	$18(a6),a1
00071710 4A2E 000E                  		tst.b	$E(a6)
00071714 6700                       		beq.s	sub_72C4E
00071716 226D 0020                  		movea.l	$20(a5),a1
0007171A 4A2E 000E                  		tst.b	$E(a6)
0007171E 6B00                       		bmi.s	sub_72C4E
00071720 226E 0020                  		movea.l	$20(a6),a1
00071724                            
00071724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071724                            
00071724                            
00071724                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00071724 5340                       		subq.w	#1,d0
00071726 6B00                       		bmi.s	loc_72C5C
00071728 323C 0019                  		move.w	#$19,d1
0007172C                            
0007172C                            loc_72C56:
0007172C D2C1                       		adda.w	d1,a1
0007172E 51C8 FFFC                  		dbf	d0,loc_72C56
00071732                            
00071732                            loc_72C5C:
00071732 1219                       		move.b	(a1)+,d1
00071734 1B41 001F                  		move.b	d1,$1F(a5)
00071738 1801                       		move.b	d1,d4
0007173A 103C 00B0                  		move.b	#$B0,d0
0007173E 4EBA FAB8                  		jsr	sub_72722(pc)
00071742 45FA 0000                  		lea	byte_72D18(pc),a2
00071746 7613                       		moveq	#$13,d3
00071748                            
00071748                            loc_72C72:
00071748 101A                       		move.b	(a2)+,d0
0007174A 1219                       		move.b	(a1)+,d1
0007174C 4EBA FAAA                  		jsr	sub_72722(pc)
00071750 51CB FFF6                  		dbf	d3,loc_72C72
00071754 7A03                       		moveq	#3,d5
00071756 0244 0007                  		andi.w	#7,d4
0007175A 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007175E 162D 0009                  		move.b	9(a5),d3
00071762                            
00071762                            loc_72C8C:
00071762 101A                       		move.b	(a2)+,d0
00071764 1219                       		move.b	(a1)+,d1
00071766 E20C                       		lsr.b	#1,d4
00071768 6400                       		bcc.s	loc_72C96
0007176A D203                       		add.b	d3,d1
0007176C                            
0007176C                            loc_72C96:
0007176C 4EBA FA8A                  		jsr	sub_72722(pc)
00071770 51CD FFF0                  		dbf	d5,loc_72C8C
00071774 103C 00B4                  		move.b	#$B4,d0
00071778 122D 000A                  		move.b	$A(a5),d1
0007177C 4EBA FA7A                  		jsr	sub_72722(pc)
00071780                            
00071780                            locret_72CAA:
00071780 4E75                       		rts	
00071782                            ; End of function sub_72C4E
00071782                            
00071782                            ; ===========================================================================
00071782 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007178A                            
0007178A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007178A                            
0007178A                            
0007178A                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007178A 0815 0002                  		btst	#2,(a5)
0007178E 6600                       		bne.s	locret_72D16
00071790 7000                       		moveq	#0,d0
00071792 102D 000B                  		move.b	$B(a5),d0
00071796 226E 0018                  		movea.l	$18(a6),a1
0007179A 4A2E 000E                  		tst.b	$E(a6)
0007179E 6700                       		beq.s	loc_72CD8
000717A0 226E 0020                  		movea.l	$20(a6),a1
000717A4 4A2E 000E                  		tst.b	$E(a6)
000717A8 6B00                       		bmi.s	loc_72CD8
000717AA 226E 0020                  		movea.l	$20(a6),a1
000717AE                            
000717AE                            loc_72CD8:
000717AE 5340                       		subq.w	#1,d0
000717B0 6B00                       		bmi.s	loc_72CE6
000717B2 323C 0019                  		move.w	#$19,d1
000717B6                            
000717B6                            loc_72CE0:
000717B6 D2C1                       		adda.w	d1,a1
000717B8 51C8 FFFC                  		dbf	d0,loc_72CE0
000717BC                            
000717BC                            loc_72CE6:
000717BC D2FC 0015                  		adda.w	#$15,a1
000717C0 45FA 0000                  		lea	byte_72D2C(pc),a2
000717C4 102D 001F                  		move.b	$1F(a5),d0
000717C8 0240 0007                  		andi.w	#7,d0
000717CC 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000717D0 162D 0009                  		move.b	9(a5),d3
000717D4 6B00                       		bmi.s	locret_72D16
000717D6 7A03                       		moveq	#3,d5
000717D8                            
000717D8                            loc_72D02:
000717D8 101A                       		move.b	(a2)+,d0
000717DA 1219                       		move.b	(a1)+,d1
000717DC E20C                       		lsr.b	#1,d4
000717DE 6400                       		bcc.s	loc_72D12
000717E0 D203                       		add.b	d3,d1
000717E2 6500                       		bcs.s	loc_72D12
000717E4 4EBA FA12                  		jsr	sub_72722(pc)
000717E8                            
000717E8                            loc_72D12:
000717E8 51CD FFEE                  		dbf	d5,loc_72D02
000717EC                            
000717EC                            locret_72D16:
000717EC 4E75                       		rts	
000717EE                            ; End of function sub_72CB4
000717EE                            
000717EE                            ; ===========================================================================
000717EE 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000717F8 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00071802 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00071806                            ; ===========================================================================
00071806                            
00071806                            loc_72D30:				; XREF: loc_72A64
00071806 08D5 0003                  		bset	#3,(a5)
0007180A 2B4C 0014                  		move.l	a4,$14(a5)
0007180E 1B5C 0018                  		move.b	(a4)+,$18(a5)
00071812 1B5C 0019                  		move.b	(a4)+,$19(a5)
00071816 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007181A 101C                       		move.b	(a4)+,d0
0007181C E208                       		lsr.b	#1,d0
0007181E 1B40 001B                  		move.b	d0,$1B(a5)
00071822 426D 001C                  		clr.w	$1C(a5)
00071826 4E75                       		rts	
00071828                            ; ===========================================================================
00071828                            
00071828                            loc_72D52:				; XREF: loc_72A64
00071828 08D5 0003                  		bset	#3,(a5)
0007182C 4E75                       		rts	
0007182E                            ; ===========================================================================
0007182E                            
0007182E                            loc_72D58:				; XREF: loc_72A64
0007182E 0895 0007                  		bclr	#7,(a5)
00071832 0895 0004                  		bclr	#4,(a5)
00071836 4A2D 0001                  		tst.b	1(a5)
0007183A 6B00                       		bmi.s	loc_72D74
0007183C 4A2E 0008                  		tst.b	8(a6)
00071840 6B00 0000                  		bmi.w	loc_72E02
00071844 4EBA F98E                  		jsr	sub_726FE(pc)
00071848 6000                       		bra.s	loc_72D78
0007184A                            ; ===========================================================================
0007184A                            
0007184A                            loc_72D74:
0007184A 4EBA FC2A                  		jsr	sub_729A0(pc)
0007184E                            
0007184E                            loc_72D78:
0007184E 4A2E 000E                  		tst.b	$E(a6)
00071852 6A00 0000                  		bpl.w	loc_72E02
00071856 4216                       		clr.b	0(a6)
00071858 7000                       		moveq	#0,d0
0007185A 102D 0001                  		move.b	1(a5),d0
0007185E 6B00                       		bmi.s	loc_72DCC
00071860 41FA F546                  		lea	dword_722CC(pc),a0
00071864 264D                       		movea.l	a5,a3
00071866 0C00 0004                  		cmpi.b	#4,d0
0007186A 6600                       		bne.s	loc_72DA8
0007186C 4A2E 0340                  		tst.b	$340(a6)
00071870 6A00                       		bpl.s	loc_72DA8
00071872 4BEE 0340                  		lea	$340(a6),a5
00071876 226E 0020                  		movea.l	$20(a6),a1
0007187A 6000                       		bra.s	loc_72DB8
0007187C                            ; ===========================================================================
0007187C                            
0007187C                            loc_72DA8:
0007187C 5500                       		subq.b	#2,d0
0007187E E508                       		lsl.b	#2,d0
00071880 2A70 0000                  		movea.l	(a0,d0.w),a5
00071884 4A15                       		tst.b	(a5)
00071886 6A00                       		bpl.s	loc_72DC8
00071888 226E 0018                  		movea.l	$18(a6),a1
0007188C                            
0007188C                            loc_72DB8:
0007188C 0895 0002                  		bclr	#2,(a5)
00071890 08D5 0001                  		bset	#1,(a5)
00071894 102D 000B                  		move.b	$B(a5),d0
00071898 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007189C                            
0007189C                            loc_72DC8:
0007189C 2A4B                       		movea.l	a3,a5
0007189E 6000                       		bra.s	loc_72E02
000718A0                            ; ===========================================================================
000718A0                            
000718A0                            loc_72DCC:
000718A0 41EE 0370                  		lea	$370(a6),a0
000718A4 4A10                       		tst.b	(a0)
000718A6 6A00                       		bpl.s	loc_72DE0
000718A8 0C00 00E0                  		cmpi.b	#$E0,d0
000718AC 6700                       		beq.s	loc_72DEA
000718AE 0C00 00C0                  		cmpi.b	#$C0,d0
000718B2 6700                       		beq.s	loc_72DEA
000718B4                            
000718B4                            loc_72DE0:
000718B4 41FA F4F2                  		lea	dword_722CC(pc),a0
000718B8 E608                       		lsr.b	#3,d0
000718BA 2070 0000                  		movea.l	(a0,d0.w),a0
000718BE                            
000718BE                            loc_72DEA:
000718BE 0890 0002                  		bclr	#2,(a0)
000718C2 08D0 0001                  		bset	#1,(a0)
000718C6 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000718CC 6600                       		bne.s	loc_72E02
000718CE 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000718D6                            
000718D6                            loc_72E02:
000718D6 504F                       		addq.w	#8,sp
000718D8 4E75                       		rts	
000718DA                            ; ===========================================================================
000718DA                            
000718DA                            loc_72E06:				; XREF: loc_72A64
000718DA 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000718E0 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000718E4 0815 0002                  		btst	#2,(a5)
000718E8 6600                       		bne.s	locret_72E1E
000718EA 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000718F2                            
000718F2                            locret_72E1E:
000718F2 4E75                       		rts	
000718F4                            ; ===========================================================================
000718F4                            
000718F4                            loc_72E20:				; XREF: loc_72A64
000718F4 0895 0003                  		bclr	#3,(a5)
000718F8 4E75                       		rts	
000718FA                            ; ===========================================================================
000718FA                            
000718FA                            loc_72E26:				; XREF: loc_72A64
000718FA 1B5C 000B                  		move.b	(a4)+,$B(a5)
000718FE 4E75                       		rts	
00071900                            ; ===========================================================================
00071900                            
00071900                            loc_72E2C:				; XREF: loc_72A64
00071900 101C                       		move.b	(a4)+,d0
00071902 E148                       		lsl.w	#8,d0
00071904 101C                       		move.b	(a4)+,d0
00071906 D8C0                       		adda.w	d0,a4
00071908 534C                       		subq.w	#1,a4
0007190A 4E75                       		rts	
0007190C                            ; ===========================================================================
0007190C                            
0007190C                            loc_72E38:				; XREF: loc_72A64
0007190C 7000                       		moveq	#0,d0
0007190E 101C                       		move.b	(a4)+,d0
00071910 121C                       		move.b	(a4)+,d1
00071912 4A35 0024                  		tst.b	$24(a5,d0.w)
00071916 6600                       		bne.s	loc_72E48
00071918 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007191C                            
0007191C                            loc_72E48:
0007191C 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00071920 66DE                       		bne.s	loc_72E2C
00071922 544C                       		addq.w	#2,a4
00071924 4E75                       		rts	
00071926                            ; ===========================================================================
00071926                            
00071926                            loc_72E52:				; XREF: loc_72A64
00071926 7000                       		moveq	#0,d0
00071928 102D 000D                  		move.b	$D(a5),d0
0007192C 5900                       		subq.b	#4,d0
0007192E 2B8C 0000                  		move.l	a4,(a5,d0.w)
00071932 1B40 000D                  		move.b	d0,$D(a5)
00071936 60C8                       		bra.s	loc_72E2C
00071938                            ; ===========================================================================
00071938                            
00071938                            loc_72E64:				; XREF: loc_72A64
00071938 103C 0088                  		move.b	#$88,d0
0007193C 123C 000F                  		move.b	#$F,d1
00071940 4EBA F8C2                  		jsr	sub_7272E(pc)
00071944 103C 008C                  		move.b	#$8C,d0
00071948 123C 000F                  		move.b	#$F,d1
0007194C 6000 F8B6                  		bra.w	sub_7272E
00071950                            ; ===========================================================================
00071950                            Kos_Z80:	incbin	sound\z80_1.bin
00071A00 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00071A02 21                         		dc.b $21
00071A03 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00071A05                            		incbin	sound\z80_2.bin
000730B0                            		even
000730B0                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
000798B0                            		even
000798B0                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008314E                            		even
0008314E                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000836DC                            		even
000836DC                            Music84:	include	sound\music84.asm ; Star Light Act 1
000836DC                            music84_Header:
000836DC =00000001                  smpsHeaderStartSong = 1
000836DC 0000                       	smpsHeaderVoice     music84_Voices
000836DE 0603                       	smpsHeaderChan      $06, $03
000836E0 0205                       	smpsHeaderTempo     $02, $05
000836E2                            
000836E6 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000836EA 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000836EE 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000836F2 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000836F6 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000836FA 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00083700 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00083706 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008370C                            
0008370C                            ; FM1 Data
0008370C                            music84_FM1:
0008370C E0C0                       	smpsPan             panCenter, $00
00083710 E107                       	smpsAlterNote       $07
00083712 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00083716 E106                       	smpsAlterNote       $06
00083718 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008371C E10B                       	smpsAlterNote       $0B
0008371E 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00083724 E10C                       	smpsAlterNote       $0C
00083726 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083729 E10B                       	smpsAlterNote       $0B
0008372B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008372E E109                       	smpsAlterNote       $09
00083730 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00083735 E108                       	smpsAlterNote       $08
00083737 8001                       	dc.b	nRst, $01
00083739 E10B                       	smpsAlterNote       $0B
0008373B 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00083741 E107                       	smpsAlterNote       $07
00083743 9B03                       	dc.b	nD2, $03
00083745                            
00083745                            music84_Jump04:
00083745 E107                       	smpsAlterNote       $07
00083747 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008374B E10B                       	smpsAlterNote       $0B
0008374D A202 8001                  	dc.b	nA2, $02, nRst, $01
00083751 E107                       	smpsAlterNote       $07
00083753 9B03                       	dc.b	nD2, $03
00083755 E11A                       	smpsAlterNote       $1A
00083757 A301                       	dc.b	nBb2, $01
00083759 E1F2                       	smpsAlterNote       $F2
0008375B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008375E E1FF                       	smpsAlterNote       $FF
00083760 E701                       	dc.b	smpsNoAttack, $01
00083762 E111                       	smpsAlterNote       $11
00083764 E701                       	dc.b	smpsNoAttack, $01
00083766 E106                       	smpsAlterNote       $06
00083768 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008376B E107                       	smpsAlterNote       $07
0008376D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083771 E108                       	smpsAlterNote       $08
00083773 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008377B E109                       	smpsAlterNote       $09
0008377D A003                       	dc.b	nG2, $03
0008377F E10C                       	smpsAlterNote       $0C
00083781 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083785 E1FD                       	smpsAlterNote       $FD
00083787 A401                       	dc.b	nB2, $01
00083789 E109                       	smpsAlterNote       $09
0008378B E701                       	dc.b	smpsNoAttack, $01
0008378D E106                       	smpsAlterNote       $06
0008378F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083792 E109                       	smpsAlterNote       $09
00083794 A007                       	dc.b	nG2, $07
00083796 E108                       	smpsAlterNote       $08
00083798 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008379C E107                       	smpsAlterNote       $07
0008379E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000837A4 E10B                       	smpsAlterNote       $0B
000837A6 A203 8001                  	dc.b	nA2, $03, nRst, $01
000837AA E107                       	smpsAlterNote       $07
000837AC 9B03                       	dc.b	nD2, $03
000837AE E11A                       	smpsAlterNote       $1A
000837B0 A301                       	dc.b	nBb2, $01
000837B2 E1F9                       	smpsAlterNote       $F9
000837B4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000837B7 E107                       	smpsAlterNote       $07
000837B9 E701                       	dc.b	smpsNoAttack, $01
000837BB E111                       	smpsAlterNote       $11
000837BD E701                       	dc.b	smpsNoAttack, $01
000837BF E106                       	smpsAlterNote       $06
000837C1 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000837C6 E107                       	smpsAlterNote       $07
000837C8 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000837D0 E1EC                       	smpsAlterNote       $EC
000837D2 A101                       	dc.b	nAb2, $01
000837D4 E108                       	smpsAlterNote       $08
000837D6 E701                       	dc.b	smpsNoAttack, $01
000837D8 E116                       	smpsAlterNote       $16
000837DA E701                       	dc.b	smpsNoAttack, $01
000837DC E1F5                       	smpsAlterNote       $F5
000837DE E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000837E1 E10B                       	smpsAlterNote       $0B
000837E3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000837E7 E107                       	smpsAlterNote       $07
000837E9 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000837EF E109                       	smpsAlterNote       $09
000837F1 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000837F5 E10B                       	smpsAlterNote       $0B
000837F7 9603                       	dc.b	nA1, $03
000837F9 E107                       	smpsAlterNote       $07
000837FB 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00083801 E10B                       	smpsAlterNote       $0B
00083803 A203 8001                  	dc.b	nA2, $03, nRst, $01
00083807 E107                       	smpsAlterNote       $07
00083809 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008380D E11A                       	smpsAlterNote       $1A
0008380F A301                       	dc.b	nBb2, $01
00083811 E1F9                       	smpsAlterNote       $F9
00083813 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083816 E107                       	smpsAlterNote       $07
00083818 E701                       	dc.b	smpsNoAttack, $01
0008381A E1FB                       	smpsAlterNote       $FB
0008381C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008381F E106                       	smpsAlterNote       $06
00083821 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083825 E107                       	smpsAlterNote       $07
00083827 9B03                       	dc.b	nD2, $03
00083829 E108                       	smpsAlterNote       $08
0008382B 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00083831 E109                       	smpsAlterNote       $09
00083833 A002 8001                  	dc.b	nG2, $02, nRst, $01
00083837 E10C                       	smpsAlterNote       $0C
00083839 A303                       	dc.b	nBb2, $03
0008383B E1F0                       	smpsAlterNote       $F0
0008383D A401                       	dc.b	nB2, $01
0008383F E1FD                       	smpsAlterNote       $FD
00083841 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00083846 E106                       	smpsAlterNote       $06
00083848 8001                       	dc.b	nRst, $01
0008384A E109                       	smpsAlterNote       $09
0008384C A006 8001                  	dc.b	nG2, $06, nRst, $01
00083850 E108                       	smpsAlterNote       $08
00083852 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00083856 E107                       	smpsAlterNote       $07
00083858 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008385E E10B                       	smpsAlterNote       $0B
00083860 A203                       	dc.b	nA2, $03
00083862 E107                       	smpsAlterNote       $07
00083864 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083868 E1F2                       	smpsAlterNote       $F2
0008386A A401                       	dc.b	nB2, $01
0008386C E1FF                       	smpsAlterNote       $FF
0008386E E701                       	dc.b	smpsNoAttack, $01
00083870 E107                       	smpsAlterNote       $07
00083872 E701                       	dc.b	smpsNoAttack, $01
00083874 E1FB                       	smpsAlterNote       $FB
00083876 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083879 E106                       	smpsAlterNote       $06
0008387B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008387F E107                       	smpsAlterNote       $07
00083881 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008388B E117                       	smpsAlterNote       $17
0008388D A001                       	dc.b	nG2, $01
0008388F E1FA                       	smpsAlterNote       $FA
00083891 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00083894 E108                       	smpsAlterNote       $08
00083896 E701                       	dc.b	smpsNoAttack, $01
00083898 E1E7                       	smpsAlterNote       $E7
0008389A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008389D E103                       	smpsAlterNote       $03
0008389F E701                       	dc.b	smpsNoAttack, $01
000838A1 E10B                       	smpsAlterNote       $0B
000838A3 E702                       	dc.b	smpsNoAttack, $02
000838A5 E107                       	smpsAlterNote       $07
000838A7 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000838AF E106                       	smpsAlterNote       $06
000838B1 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000838B7 E10C                       	smpsAlterNote       $0C
000838B9 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000838BF E109                       	smpsAlterNote       $09
000838C1 9E03                       	dc.b	nF2, $03
000838C3 E10C                       	smpsAlterNote       $0C
000838C5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000838C9 E1EA                       	smpsAlterNote       $EA
000838CB A201                       	dc.b	nA2, $01
000838CD E106                       	smpsAlterNote       $06
000838CF E701                       	dc.b	smpsNoAttack, $01
000838D1 E1E2                       	smpsAlterNote       $E2
000838D3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000838D6 E1F0                       	smpsAlterNote       $F0
000838D8 E701                       	dc.b	smpsNoAttack, $01
000838DA E10C                       	smpsAlterNote       $0C
000838DC E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000838E8 E116                       	smpsAlterNote       $16
000838EA 9C01                       	dc.b	nEb2, $01
000838EC E105                       	smpsAlterNote       $05
000838EE E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000838F1 E1F1                       	smpsAlterNote       $F1
000838F3 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000838F6 E1FF                       	smpsAlterNote       $FF
000838F8 E701                       	dc.b	smpsNoAttack, $01
000838FA E109                       	smpsAlterNote       $09
000838FC E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083900 E10C                       	smpsAlterNote       $0C
00083902 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008390E 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00083914 E109                       	smpsAlterNote       $09
00083916 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008391A E10C                       	smpsAlterNote       $0C
0008391C 9703                       	dc.b	nBb1, $03
0008391E E11A                       	smpsAlterNote       $1A
00083920 A101                       	dc.b	nAb2, $01
00083922 E1FB                       	smpsAlterNote       $FB
00083924 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083927 E10A                       	smpsAlterNote       $0A
00083929 E701                       	dc.b	smpsNoAttack, $01
0008392B E1E8                       	smpsAlterNote       $E8
0008392D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083930 E106                       	smpsAlterNote       $06
00083932 E701                       	dc.b	smpsNoAttack, $01
00083934 E10C                       	smpsAlterNote       $0C
00083936 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00083942 E1F9                       	smpsAlterNote       $F9
00083944 9D01                       	dc.b	nE2, $01
00083946 E108                       	smpsAlterNote       $08
00083948 E701                       	dc.b	smpsNoAttack, $01
0008394A E1F6                       	smpsAlterNote       $F6
0008394C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008394F E109                       	smpsAlterNote       $09
00083951 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00083955 E10C                       	smpsAlterNote       $0C
00083957 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00083963 E108                       	smpsAlterNote       $08
00083965 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008396B E106                       	smpsAlterNote       $06
0008396D A403 8001                  	dc.b	nB2, $03, nRst, $01
00083971 E108                       	smpsAlterNote       $08
00083973 9D03                       	dc.b	nE2, $03
00083975 E1EB                       	smpsAlterNote       $EB
00083977 A801                       	dc.b	nEb3, $01
00083979 E109                       	smpsAlterNote       $09
0008397B E701                       	dc.b	smpsNoAttack, $01
0008397D E1FA                       	smpsAlterNote       $FA
0008397F E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00083982 E108                       	smpsAlterNote       $08
00083984 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00083990 E1E9                       	smpsAlterNote       $E9
00083992 A301                       	dc.b	nBb2, $01
00083994 E107                       	smpsAlterNote       $07
00083996 E701                       	dc.b	smpsNoAttack, $01
00083998 E1F0                       	smpsAlterNote       $F0
0008399A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008399D E1F7                       	smpsAlterNote       $F7
0008399F E701                       	dc.b	smpsNoAttack, $01
000839A1 E107                       	smpsAlterNote       $07
000839A3 E701                       	dc.b	smpsNoAttack, $01
000839A5 E106                       	smpsAlterNote       $06
000839A7 E701                       	dc.b	smpsNoAttack, $01
000839A9 E108                       	smpsAlterNote       $08
000839AB 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000839B1 E106                       	smpsAlterNote       $06
000839B3 A403 8001                  	dc.b	nB2, $03, nRst, $01
000839B7 E108                       	smpsAlterNote       $08
000839B9 9D03                       	dc.b	nE2, $03
000839BB E10B                       	smpsAlterNote       $0B
000839BD 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000839C5 E108                       	smpsAlterNote       $08
000839C7 9D03                       	dc.b	nE2, $03
000839C9 E10B                       	smpsAlterNote       $0B
000839CB 9603 8001                  	dc.b	nA1, $03, nRst, $01
000839CF E113                       	smpsAlterNote       $13
000839D1 A001                       	dc.b	nG2, $01
000839D3 E118                       	smpsAlterNote       $18
000839D5 E701                       	dc.b	smpsNoAttack, $01
000839D7 E1E9                       	smpsAlterNote       $E9
000839D9 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000839DC E1F3                       	smpsAlterNote       $F3
000839DE E701                       	dc.b	smpsNoAttack, $01
000839E0 E1FD                       	smpsAlterNote       $FD
000839E2 E701                       	dc.b	smpsNoAttack, $01
000839E4 E102                       	smpsAlterNote       $02
000839E6 E701                       	dc.b	smpsNoAttack, $01
000839E8 E107                       	smpsAlterNote       $07
000839EA 8001                       	dc.b	nRst, $01
000839EC E10B                       	smpsAlterNote       $0B
000839EE 9603                       	dc.b	nA1, $03
000839F0 E10C                       	smpsAlterNote       $0C
000839F2 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000839F8 E10B                       	smpsAlterNote       $0B
000839FA 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00083A06 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00083A0C E107                       	smpsAlterNote       $07
00083A0E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083A14 E10B                       	smpsAlterNote       $0B
00083A16 A203                       	dc.b	nA2, $03
00083A18 E107                       	smpsAlterNote       $07
00083A1A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083A1E E1F2                       	smpsAlterNote       $F2
00083A20 A401                       	dc.b	nB2, $01
00083A22 E1FF                       	smpsAlterNote       $FF
00083A24 E701                       	dc.b	smpsNoAttack, $01
00083A26 E107                       	smpsAlterNote       $07
00083A28 E701                       	dc.b	smpsNoAttack, $01
00083A2A E1FB                       	smpsAlterNote       $FB
00083A2C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083A2F E106                       	smpsAlterNote       $06
00083A31 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083A35 E107                       	smpsAlterNote       $07
00083A37 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083A3B E108                       	smpsAlterNote       $08
00083A3D 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00083A43 E109                       	smpsAlterNote       $09
00083A45 A003 8001                  	dc.b	nG2, $03, nRst, $01
00083A49 E10C                       	smpsAlterNote       $0C
00083A4B A302 8001                  	dc.b	nBb2, $02, nRst, $01
00083A4F E1F0                       	smpsAlterNote       $F0
00083A51 A401                       	dc.b	nB2, $01
00083A53 E109                       	smpsAlterNote       $09
00083A55 E701                       	dc.b	smpsNoAttack, $01
00083A57 E106                       	smpsAlterNote       $06
00083A59 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083A5C E109                       	smpsAlterNote       $09
00083A5E A007                       	dc.b	nG2, $07
00083A60 E108                       	smpsAlterNote       $08
00083A62 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00083A66 E107                       	smpsAlterNote       $07
00083A68 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083A6E E10B                       	smpsAlterNote       $0B
00083A70 A202 8001                  	dc.b	nA2, $02, nRst, $01
00083A74 E107                       	smpsAlterNote       $07
00083A76 9B03                       	dc.b	nD2, $03
00083A78 E11A                       	smpsAlterNote       $1A
00083A7A A301                       	dc.b	nBb2, $01
00083A7C E1F2                       	smpsAlterNote       $F2
00083A7E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083A81 E1FF                       	smpsAlterNote       $FF
00083A83 E701                       	dc.b	smpsNoAttack, $01
00083A85 E111                       	smpsAlterNote       $11
00083A87 E701                       	dc.b	smpsNoAttack, $01
00083A89 E106                       	smpsAlterNote       $06
00083A8B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083A8E E107                       	smpsAlterNote       $07
00083A90 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00083A9C E117                       	smpsAlterNote       $17
00083A9E A001                       	dc.b	nG2, $01
00083AA0 E1FA                       	smpsAlterNote       $FA
00083AA2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00083AA5 E116                       	smpsAlterNote       $16
00083AA7 E701                       	dc.b	smpsNoAttack, $01
00083AA9 E1F5                       	smpsAlterNote       $F5
00083AAB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083AAE E103                       	smpsAlterNote       $03
00083AB0 E701                       	dc.b	smpsNoAttack, $01
00083AB2 E10B                       	smpsAlterNote       $0B
00083AB4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083AB8 E107                       	smpsAlterNote       $07
00083ABA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083AC0 E109                       	smpsAlterNote       $09
00083AC2 9E03                       	dc.b	nF2, $03
00083AC4 E10B                       	smpsAlterNote       $0B
00083AC6 9603 8001                  	dc.b	nA1, $03, nRst, $01
00083ACA E107                       	smpsAlterNote       $07
00083ACC 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00083AD2 E10B                       	smpsAlterNote       $0B
00083AD4 A203 8001                  	dc.b	nA2, $03, nRst, $01
00083AD8 E107                       	smpsAlterNote       $07
00083ADA 9B03                       	dc.b	nD2, $03
00083ADC E11A                       	smpsAlterNote       $1A
00083ADE A301                       	dc.b	nBb2, $01
00083AE0 E1F9                       	smpsAlterNote       $F9
00083AE2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083AE5 E107                       	smpsAlterNote       $07
00083AE7 E701                       	dc.b	smpsNoAttack, $01
00083AE9 E111                       	smpsAlterNote       $11
00083AEB E701                       	dc.b	smpsNoAttack, $01
00083AED E106                       	smpsAlterNote       $06
00083AEF E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00083AF4 E107                       	smpsAlterNote       $07
00083AF6 9B03                       	dc.b	nD2, $03
00083AF8 E108                       	smpsAlterNote       $08
00083AFA 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00083B00 E109                       	smpsAlterNote       $09
00083B02 A003                       	dc.b	nG2, $03
00083B04 E10C                       	smpsAlterNote       $0C
00083B06 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083B0A E1FD                       	smpsAlterNote       $FD
00083B0C A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00083B11 E106                       	smpsAlterNote       $06
00083B13 8001                       	dc.b	nRst, $01
00083B15 E109                       	smpsAlterNote       $09
00083B17 A006 8001                  	dc.b	nG2, $06, nRst, $01
00083B1B E108                       	smpsAlterNote       $08
00083B1D 9C03                       	dc.b	nEb2, $03
00083B1F E107                       	smpsAlterNote       $07
00083B21 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00083B27 E10B                       	smpsAlterNote       $0B
00083B29 A203 8001                  	dc.b	nA2, $03, nRst, $01
00083B2D E107                       	smpsAlterNote       $07
00083B2F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083B33 E11A                       	smpsAlterNote       $1A
00083B35 A301                       	dc.b	nBb2, $01
00083B37 E1F9                       	smpsAlterNote       $F9
00083B39 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083B3C E107                       	smpsAlterNote       $07
00083B3E E701                       	dc.b	smpsNoAttack, $01
00083B40 E1FB                       	smpsAlterNote       $FB
00083B42 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083B45 E106                       	smpsAlterNote       $06
00083B47 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083B4B E107                       	smpsAlterNote       $07
00083B4D 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00083B55 E1EC                       	smpsAlterNote       $EC
00083B57 A101                       	dc.b	nAb2, $01
00083B59 E108                       	smpsAlterNote       $08
00083B5B E701                       	dc.b	smpsNoAttack, $01
00083B5D E1E7                       	smpsAlterNote       $E7
00083B5F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083B62 E1F5                       	smpsAlterNote       $F5
00083B64 E701                       	dc.b	smpsNoAttack, $01
00083B66 E10B                       	smpsAlterNote       $0B
00083B68 E702                       	dc.b	smpsNoAttack, $02
00083B6A E107                       	smpsAlterNote       $07
00083B6C 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00083B72 E106                       	smpsAlterNote       $06
00083B74 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00083B7A E10C                       	smpsAlterNote       $0C
00083B7C 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00083B84 E109                       	smpsAlterNote       $09
00083B86 9E03                       	dc.b	nF2, $03
00083B88 E10C                       	smpsAlterNote       $0C
00083B8A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083B8E E1EA                       	smpsAlterNote       $EA
00083B90 A201                       	dc.b	nA2, $01
00083B92 E106                       	smpsAlterNote       $06
00083B94 E701                       	dc.b	smpsNoAttack, $01
00083B96 E114                       	smpsAlterNote       $14
00083B98 E701                       	dc.b	smpsNoAttack, $01
00083B9A E1F0                       	smpsAlterNote       $F0
00083B9C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083B9F E10C                       	smpsAlterNote       $0C
00083BA1 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00083BAD 9703                       	dc.b	nBb1, $03
00083BAF E116                       	smpsAlterNote       $16
00083BB1 9C01                       	dc.b	nEb2, $01
00083BB3 E105                       	smpsAlterNote       $05
00083BB5 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00083BB8 E113                       	smpsAlterNote       $13
00083BBA E701                       	dc.b	smpsNoAttack, $01
00083BBC E1FF                       	smpsAlterNote       $FF
00083BBE E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00083BC1 E109                       	smpsAlterNote       $09
00083BC3 E703                       	dc.b	smpsNoAttack, $03
00083BC5 E10C                       	smpsAlterNote       $0C
00083BC7 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00083BD3 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00083BDB E109                       	smpsAlterNote       $09
00083BDD 9E03                       	dc.b	nF2, $03
00083BDF E10C                       	smpsAlterNote       $0C
00083BE1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083BE5 E1EC                       	smpsAlterNote       $EC
00083BE7 A201                       	dc.b	nA2, $01
00083BE9 E10A                       	smpsAlterNote       $0A
00083BEB E701                       	dc.b	smpsNoAttack, $01
00083BED E1E8                       	smpsAlterNote       $E8
00083BEF E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083BF2 E1F7                       	smpsAlterNote       $F7
00083BF4 E701                       	dc.b	smpsNoAttack, $01
00083BF6 E10C                       	smpsAlterNote       $0C
00083BF8 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00083C04 E1EA                       	smpsAlterNote       $EA
00083C06 9D01                       	dc.b	nE2, $01
00083C08 E108                       	smpsAlterNote       $08
00083C0A E701                       	dc.b	smpsNoAttack, $01
00083C0C E1F6                       	smpsAlterNote       $F6
00083C0E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00083C11 E105                       	smpsAlterNote       $05
00083C13 E701                       	dc.b	smpsNoAttack, $01
00083C15 E109                       	smpsAlterNote       $09
00083C17 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083C1B E10C                       	smpsAlterNote       $0C
00083C1D 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00083C29 E108                       	smpsAlterNote       $08
00083C2B 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00083C31 E106                       	smpsAlterNote       $06
00083C33 A403 8001                  	dc.b	nB2, $03, nRst, $01
00083C37 E108                       	smpsAlterNote       $08
00083C39 9D03                       	dc.b	nE2, $03
00083C3B E1EB                       	smpsAlterNote       $EB
00083C3D A801                       	dc.b	nEb3, $01
00083C3F E109                       	smpsAlterNote       $09
00083C41 E701                       	dc.b	smpsNoAttack, $01
00083C43 E1EB                       	smpsAlterNote       $EB
00083C45 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00083C48 E108                       	smpsAlterNote       $08
00083C4A E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00083C56 E1E9                       	smpsAlterNote       $E9
00083C58 A301                       	dc.b	nBb2, $01
00083C5A E1F8                       	smpsAlterNote       $F8
00083C5C E701                       	dc.b	smpsNoAttack, $01
00083C5E E116                       	smpsAlterNote       $16
00083C60 E701                       	dc.b	smpsNoAttack, $01
00083C62 E1F7                       	smpsAlterNote       $F7
00083C64 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083C67 E107                       	smpsAlterNote       $07
00083C69 E701                       	dc.b	smpsNoAttack, $01
00083C6B E1EE                       	smpsAlterNote       $EE
00083C6D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083C70 E106                       	smpsAlterNote       $06
00083C72 8001                       	dc.b	nRst, $01
00083C74 E108                       	smpsAlterNote       $08
00083C76 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00083C7C E106                       	smpsAlterNote       $06
00083C7E A402 8001                  	dc.b	nB2, $02, nRst, $01
00083C82 E108                       	smpsAlterNote       $08
00083C84 9D03                       	dc.b	nE2, $03
00083C86 E10B                       	smpsAlterNote       $0B
00083C88 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00083C8E E108                       	smpsAlterNote       $08
00083C90 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00083C94 E10B                       	smpsAlterNote       $0B
00083C96 9603                       	dc.b	nA1, $03
00083C98 E10E                       	smpsAlterNote       $0E
00083C9A A001                       	dc.b	nG2, $01
00083C9C E118                       	smpsAlterNote       $18
00083C9E E701                       	dc.b	smpsNoAttack, $01
00083CA0 E1E9                       	smpsAlterNote       $E9
00083CA2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00083CA5 E1EE                       	smpsAlterNote       $EE
00083CA7 E701                       	dc.b	smpsNoAttack, $01
00083CA9 E1F8                       	smpsAlterNote       $F8
00083CAB E701                       	dc.b	smpsNoAttack, $01
00083CAD E102                       	smpsAlterNote       $02
00083CAF E701                       	dc.b	smpsNoAttack, $01
00083CB1 E107                       	smpsAlterNote       $07
00083CB3 8001                       	dc.b	nRst, $01
00083CB5 E10B                       	smpsAlterNote       $0B
00083CB7 9603                       	dc.b	nA1, $03
00083CB9 E10C                       	smpsAlterNote       $0C
00083CBB 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00083CC1 E10B                       	smpsAlterNote       $0B
00083CC3 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00083CCF 8001 9603                  	dc.b	nRst, $01, nA1, $03
00083CD3 E10C                       	smpsAlterNote       $0C
00083CD5 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00083CE1 8001                       	dc.b	nRst, $01
00083CE3 E10B                       	smpsAlterNote       $0B
00083CE5 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00083CED E107                       	smpsAlterNote       $07
00083CEF 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00083CF3 E10B                       	smpsAlterNote       $0B
00083CF5 9603                       	dc.b	nA1, $03
00083CF7 E109                       	smpsAlterNote       $09
00083CF9 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00083CFD E108                       	smpsAlterNote       $08
00083CFF 9D06                       	dc.b	nE2, $06
00083D01 E107                       	smpsAlterNote       $07
00083D03 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083D07 E106                       	smpsAlterNote       $06
00083D09 9903                       	dc.b	nC2, $03
00083D0B E10C                       	smpsAlterNote       $0C
00083D0D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083D11 E10B                       	smpsAlterNote       $0B
00083D13 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00083D1F 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00083D29 E10C                       	smpsAlterNote       $0C
00083D2B 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00083D37 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00083D43 8001                       	dc.b	nRst, $01
00083D45 E10B                       	smpsAlterNote       $0B
00083D47 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00083D53 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00083D5F 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00083D6B 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00083D75 E10C                       	smpsAlterNote       $0C
00083D77 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00083D83 E10B                       	smpsAlterNote       $0B
00083D85 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00083D8D E107                       	smpsAlterNote       $07
00083D8F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00083D93 E10B                       	smpsAlterNote       $0B
00083D95 9603                       	dc.b	nA1, $03
00083D97 E109                       	smpsAlterNote       $09
00083D99 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00083D9D E108                       	smpsAlterNote       $08
00083D9F 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00083DA3 E107                       	smpsAlterNote       $07
00083DA5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083DA9 E106                       	smpsAlterNote       $06
00083DAB 9903                       	dc.b	nC2, $03
00083DAD E10C                       	smpsAlterNote       $0C
00083DAF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083DB3 E10B                       	smpsAlterNote       $0B
00083DB5 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00083DC1 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00083DCB E10C                       	smpsAlterNote       $0C
00083DCD 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00083DD9 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00083DE5 8001                       	dc.b	nRst, $01
00083DE7 E10B                       	smpsAlterNote       $0B
00083DE9 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00083DF5 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00083DFF E10C                       	smpsAlterNote       $0C
00083E01 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00083E0D 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00083E19 E10B                       	smpsAlterNote       $0B
00083E1B 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00083E27 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00083E31 E10C                       	smpsAlterNote       $0C
00083E33 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00083E3F 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00083E4B E10B                       	smpsAlterNote       $0B
00083E4D 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00083E59 8001                       	dc.b	nRst, $01
00083E5B E1EC                       	smpsAlterNote       $EC
00083E5D A101                       	dc.b	nAb2, $01
00083E5F E1FA                       	smpsAlterNote       $FA
00083E61 E701                       	dc.b	smpsNoAttack, $01
00083E63 E116                       	smpsAlterNote       $16
00083E65 E701                       	dc.b	smpsNoAttack, $01
00083E67 E1F5                       	smpsAlterNote       $F5
00083E69 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083E6C E10B                       	smpsAlterNote       $0B
00083E6E E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00083E7A 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00083E86 E107                       	smpsAlterNote       $07
00083E88 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083E8E E10B                       	smpsAlterNote       $0B
00083E90 A203                       	dc.b	nA2, $03
00083E92 E107                       	smpsAlterNote       $07
00083E94 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083E98 E1F3                       	smpsAlterNote       $F3
00083E9A A401                       	dc.b	nB2, $01
00083E9C E102                       	smpsAlterNote       $02
00083E9E E701                       	dc.b	smpsNoAttack, $01
00083EA0 E109                       	smpsAlterNote       $09
00083EA2 E701                       	dc.b	smpsNoAttack, $01
00083EA4 E102                       	smpsAlterNote       $02
00083EA6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083EA9 E106                       	smpsAlterNote       $06
00083EAB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083EAF E107                       	smpsAlterNote       $07
00083EB1 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083EB5 E108                       	smpsAlterNote       $08
00083EB7 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00083EBD E109                       	smpsAlterNote       $09
00083EBF A003 8001                  	dc.b	nG2, $03, nRst, $01
00083EC3 E1F2                       	smpsAlterNote       $F2
00083EC5 A401                       	dc.b	nB2, $01
00083EC7 E1FF                       	smpsAlterNote       $FF
00083EC9 E701                       	dc.b	smpsNoAttack, $01
00083ECB E111                       	smpsAlterNote       $11
00083ECD E701                       	dc.b	smpsNoAttack, $01
00083ECF E1FB                       	smpsAlterNote       $FB
00083ED1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083ED4 E106                       	smpsAlterNote       $06
00083ED6 E702                       	dc.b	smpsNoAttack, $02
00083ED8 E109                       	smpsAlterNote       $09
00083EDA A007                       	dc.b	nG2, $07
00083EDC E108                       	smpsAlterNote       $08
00083EDE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00083EE2 E107                       	smpsAlterNote       $07
00083EE4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083EEA E10B                       	smpsAlterNote       $0B
00083EEC A202 8001                  	dc.b	nA2, $02, nRst, $01
00083EF0 E107                       	smpsAlterNote       $07
00083EF2 9B03                       	dc.b	nD2, $03
00083EF4 E11A                       	smpsAlterNote       $1A
00083EF6 A301                       	dc.b	nBb2, $01
00083EF8 E1F2                       	smpsAlterNote       $F2
00083EFA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083EFD E1FF                       	smpsAlterNote       $FF
00083EFF E701                       	dc.b	smpsNoAttack, $01
00083F01 E111                       	smpsAlterNote       $11
00083F03 E701                       	dc.b	smpsNoAttack, $01
00083F05 E106                       	smpsAlterNote       $06
00083F07 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083F0A E107                       	smpsAlterNote       $07
00083F0C 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00083F18 E117                       	smpsAlterNote       $17
00083F1A A001                       	dc.b	nG2, $01
00083F1C E1FA                       	smpsAlterNote       $FA
00083F1E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00083F21 E116                       	smpsAlterNote       $16
00083F23 E701                       	dc.b	smpsNoAttack, $01
00083F25 E1F5                       	smpsAlterNote       $F5
00083F27 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083F2A E103                       	smpsAlterNote       $03
00083F2C E701                       	dc.b	smpsNoAttack, $01
00083F2E E10B                       	smpsAlterNote       $0B
00083F30 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083F34 E107                       	smpsAlterNote       $07
00083F36 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083F3C E109                       	smpsAlterNote       $09
00083F3E 9E03                       	dc.b	nF2, $03
00083F40 E10B                       	smpsAlterNote       $0B
00083F42 9603 8001                  	dc.b	nA1, $03, nRst, $01
00083F46 E107                       	smpsAlterNote       $07
00083F48 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00083F4E E10B                       	smpsAlterNote       $0B
00083F50 A203 8001                  	dc.b	nA2, $03, nRst, $01
00083F54 E107                       	smpsAlterNote       $07
00083F56 9B03                       	dc.b	nD2, $03
00083F58 E11A                       	smpsAlterNote       $1A
00083F5A A301                       	dc.b	nBb2, $01
00083F5C E1F9                       	smpsAlterNote       $F9
00083F5E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083F61 E1FF                       	smpsAlterNote       $FF
00083F63 E701                       	dc.b	smpsNoAttack, $01
00083F65 E111                       	smpsAlterNote       $11
00083F67 E701                       	dc.b	smpsNoAttack, $01
00083F69 E106                       	smpsAlterNote       $06
00083F6B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083F6E E107                       	smpsAlterNote       $07
00083F70 9B03                       	dc.b	nD2, $03
00083F72 E108                       	smpsAlterNote       $08
00083F74 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00083F7A E109                       	smpsAlterNote       $09
00083F7C A003                       	dc.b	nG2, $03
00083F7E E1F0                       	smpsAlterNote       $F0
00083F80 A501                       	dc.b	nC3, $01
00083F82 E106                       	smpsAlterNote       $06
00083F84 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00083F88 E109                       	smpsAlterNote       $09
00083F8A A006 8001                  	dc.b	nG2, $06, nRst, $01
00083F8E E108                       	smpsAlterNote       $08
00083F90 9C03                       	dc.b	nEb2, $03
00083F92 E107                       	smpsAlterNote       $07
00083F94 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00083F9A E10B                       	smpsAlterNote       $0B
00083F9C A203 8001                  	dc.b	nA2, $03, nRst, $01
00083FA0 E107                       	smpsAlterNote       $07
00083FA2 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083FA6 E11A                       	smpsAlterNote       $1A
00083FA8 A301                       	dc.b	nBb2, $01
00083FAA E1F9                       	smpsAlterNote       $F9
00083FAC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083FAF E107                       	smpsAlterNote       $07
00083FB1 E701                       	dc.b	smpsNoAttack, $01
00083FB3 E1FB                       	smpsAlterNote       $FB
00083FB5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083FB8 E106                       	smpsAlterNote       $06
00083FBA E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083FBE E107                       	smpsAlterNote       $07
00083FC0 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00083FC8 E1EC                       	smpsAlterNote       $EC
00083FCA A101                       	dc.b	nAb2, $01
00083FCC E108                       	smpsAlterNote       $08
00083FCE E701                       	dc.b	smpsNoAttack, $01
00083FD0 E1E7                       	smpsAlterNote       $E7
00083FD2 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083FD5 E1F5                       	smpsAlterNote       $F5
00083FD7 E701                       	dc.b	smpsNoAttack, $01
00083FD9 E10B                       	smpsAlterNote       $0B
00083FDB E702                       	dc.b	smpsNoAttack, $02
00083FDD E107                       	smpsAlterNote       $07
00083FDF 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00083FE5 E106                       	smpsAlterNote       $06
00083FE7 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00083FED E10C                       	smpsAlterNote       $0C
00083FEF 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00083FF7 E109                       	smpsAlterNote       $09
00083FF9 9E03                       	dc.b	nF2, $03
00083FFB E10C                       	smpsAlterNote       $0C
00083FFD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084001 E1EA                       	smpsAlterNote       $EA
00084003 A201                       	dc.b	nA2, $01
00084005 E106                       	smpsAlterNote       $06
00084007 E701                       	dc.b	smpsNoAttack, $01
00084009 E114                       	smpsAlterNote       $14
0008400B E701                       	dc.b	smpsNoAttack, $01
0008400D E1F0                       	smpsAlterNote       $F0
0008400F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084012 E10C                       	smpsAlterNote       $0C
00084014 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00084020 9703                       	dc.b	nBb1, $03
00084022 E116                       	smpsAlterNote       $16
00084024 9C01                       	dc.b	nEb2, $01
00084026 E105                       	smpsAlterNote       $05
00084028 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008402B E113                       	smpsAlterNote       $13
0008402D E701                       	dc.b	smpsNoAttack, $01
0008402F E1FF                       	smpsAlterNote       $FF
00084031 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084034 E109                       	smpsAlterNote       $09
00084036 E703                       	dc.b	smpsNoAttack, $03
00084038 E10C                       	smpsAlterNote       $0C
0008403A 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00084046 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008404E E109                       	smpsAlterNote       $09
00084050 9E03                       	dc.b	nF2, $03
00084052 E10C                       	smpsAlterNote       $0C
00084054 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084058 E1EA                       	smpsAlterNote       $EA
0008405A A201                       	dc.b	nA2, $01
0008405C E106                       	smpsAlterNote       $06
0008405E E701                       	dc.b	smpsNoAttack, $01
00084060 E1E2                       	smpsAlterNote       $E2
00084062 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084065 E1F0                       	smpsAlterNote       $F0
00084067 E701                       	dc.b	smpsNoAttack, $01
00084069 E10C                       	smpsAlterNote       $0C
0008406B E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00084077 E116                       	smpsAlterNote       $16
00084079 9C01                       	dc.b	nEb2, $01
0008407B E105                       	smpsAlterNote       $05
0008407D E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00084080 E1F1                       	smpsAlterNote       $F1
00084082 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084085 E1FF                       	smpsAlterNote       $FF
00084087 E701                       	dc.b	smpsNoAttack, $01
00084089 E109                       	smpsAlterNote       $09
0008408B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008408F E10C                       	smpsAlterNote       $0C
00084091 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008409D E106                       	smpsAlterNote       $06
0008409F 9903                       	dc.b	nC2, $03
000840A1 E107                       	smpsAlterNote       $07
000840A3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000840A7 E109                       	smpsAlterNote       $09
000840A9 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000840AF E107                       	smpsAlterNote       $07
000840B1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000840B5 E108                       	smpsAlterNote       $08
000840B7 9D03                       	dc.b	nE2, $03
000840B9 E10B                       	smpsAlterNote       $0B
000840BB 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000840C1 E109                       	smpsAlterNote       $09
000840C3 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000840C9 E10C                       	smpsAlterNote       $0C
000840CB 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000840D1 E106                       	smpsAlterNote       $06
000840D3 9903                       	dc.b	nC2, $03
000840D5 E11A                       	smpsAlterNote       $1A
000840D7 A301                       	dc.b	nBb2, $01
000840D9 E1F9                       	smpsAlterNote       $F9
000840DB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000840DE E1FF                       	smpsAlterNote       $FF
000840E0 E701                       	dc.b	smpsNoAttack, $01
000840E2 E111                       	smpsAlterNote       $11
000840E4 E701                       	dc.b	smpsNoAttack, $01
000840E6 E106                       	smpsAlterNote       $06
000840E8 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000840EF E109                       	smpsAlterNote       $09
000840F1 A003                       	dc.b	nG2, $03
000840F3 E106                       	smpsAlterNote       $06
000840F5 9907                       	dc.b	nC2, $07
000840F7 E107                       	smpsAlterNote       $07
000840F9 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00084101 E10B                       	smpsAlterNote       $0B
00084103 A203                       	dc.b	nA2, $03
00084105 E107                       	smpsAlterNote       $07
00084107 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008410B E1F2                       	smpsAlterNote       $F2
0008410D A401                       	dc.b	nB2, $01
0008410F E1F9                       	smpsAlterNote       $F9
00084111 E701                       	dc.b	smpsNoAttack, $01
00084113 E107                       	smpsAlterNote       $07
00084115 E701                       	dc.b	smpsNoAttack, $01
00084117 E1FB                       	smpsAlterNote       $FB
00084119 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008411C E106                       	smpsAlterNote       $06
0008411E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084122 E107                       	smpsAlterNote       $07
00084124 9B03                       	dc.b	nD2, $03
00084126 E108                       	smpsAlterNote       $08
00084128 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008412E E109                       	smpsAlterNote       $09
00084130 A003 8001                  	dc.b	nG2, $03, nRst, $01
00084134 E1F2                       	smpsAlterNote       $F2
00084136 A401                       	dc.b	nB2, $01
00084138 E1F9                       	smpsAlterNote       $F9
0008413A E701                       	dc.b	smpsNoAttack, $01
0008413C E107                       	smpsAlterNote       $07
0008413E E701                       	dc.b	smpsNoAttack, $01
00084140 E1FB                       	smpsAlterNote       $FB
00084142 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084145 E106                       	smpsAlterNote       $06
00084147 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008414B E108                       	smpsAlterNote       $08
0008414D 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00084151 E10C                       	smpsAlterNote       $0C
00084153 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00084157 E107                       	smpsAlterNote       $07
00084159 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008415F E10B                       	smpsAlterNote       $0B
00084161 A203                       	dc.b	nA2, $03
00084163 E107                       	smpsAlterNote       $07
00084165 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084169 E1F2                       	smpsAlterNote       $F2
0008416B A401                       	dc.b	nB2, $01
0008416D E1FF                       	smpsAlterNote       $FF
0008416F E701                       	dc.b	smpsNoAttack, $01
00084171 E107                       	smpsAlterNote       $07
00084173 E701                       	dc.b	smpsNoAttack, $01
00084175 E1FB                       	smpsAlterNote       $FB
00084177 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008417A E106                       	smpsAlterNote       $06
0008417C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084180 E107                       	smpsAlterNote       $07
00084182 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084186 E108                       	smpsAlterNote       $08
00084188 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008418E E109                       	smpsAlterNote       $09
00084190 A003 8001                  	dc.b	nG2, $03, nRst, $01
00084194 E1F2                       	smpsAlterNote       $F2
00084196 A401                       	dc.b	nB2, $01
00084198 E1FF                       	smpsAlterNote       $FF
0008419A E701                       	dc.b	smpsNoAttack, $01
0008419C E111                       	smpsAlterNote       $11
0008419E E701                       	dc.b	smpsNoAttack, $01
000841A0 E1FB                       	smpsAlterNote       $FB
000841A2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000841A5 E106                       	smpsAlterNote       $06
000841A7 E702                       	dc.b	smpsNoAttack, $02
000841A9 E108                       	smpsAlterNote       $08
000841AB 9C07                       	dc.b	nEb2, $07
000841AD E10C                       	smpsAlterNote       $0C
000841AF A303 8001                  	dc.b	nBb2, $03, nRst, $01
000841B3 E107                       	smpsAlterNote       $07
000841B5 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000841BB E10B                       	smpsAlterNote       $0B
000841BD A202 8001                  	dc.b	nA2, $02, nRst, $01
000841C1 E107                       	smpsAlterNote       $07
000841C3 9B03                       	dc.b	nD2, $03
000841C5 E11A                       	smpsAlterNote       $1A
000841C7 A301                       	dc.b	nBb2, $01
000841C9 E1F2                       	smpsAlterNote       $F2
000841CB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000841CE E1FF                       	smpsAlterNote       $FF
000841D0 E701                       	dc.b	smpsNoAttack, $01
000841D2 E111                       	smpsAlterNote       $11
000841D4 E701                       	dc.b	smpsNoAttack, $01
000841D6 E106                       	smpsAlterNote       $06
000841D8 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000841DB E107                       	smpsAlterNote       $07
000841DD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000841E1 E108                       	smpsAlterNote       $08
000841E3 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000841EB E109                       	smpsAlterNote       $09
000841ED A003                       	dc.b	nG2, $03
000841EF E11A                       	smpsAlterNote       $1A
000841F1 A301                       	dc.b	nBb2, $01
000841F3 E1F2                       	smpsAlterNote       $F2
000841F5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000841F8 E1FF                       	smpsAlterNote       $FF
000841FA E701                       	dc.b	smpsNoAttack, $01
000841FC E111                       	smpsAlterNote       $11
000841FE E701                       	dc.b	smpsNoAttack, $01
00084200 E106                       	smpsAlterNote       $06
00084202 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084205 E108                       	smpsAlterNote       $08
00084207 9C07                       	dc.b	nEb2, $07
00084209 E10C                       	smpsAlterNote       $0C
0008420B A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008420F E107                       	smpsAlterNote       $07
00084211 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008421D 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00084227 E108                       	smpsAlterNote       $08
00084229 9C06                       	dc.b	nEb2, $06
0008422B E10C                       	smpsAlterNote       $0C
0008422D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084231 E108                       	smpsAlterNote       $08
00084233 9C03                       	dc.b	nEb2, $03
00084235 E109                       	smpsAlterNote       $09
00084237 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008423B E10C                       	smpsAlterNote       $0C
0008423D A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00084245 E107                       	smpsAlterNote       $07
00084247 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008424B F6F4 F8                    	smpsJump            music84_Jump04
0008424E                            
0008424E                            ; FM2 Data
0008424E                            music84_FM2:
0008424E E0C0                       	smpsPan             panCenter, $00
00084252 E10B                       	smpsAlterNote       $0B
00084254 C603 8007                  	dc.b	nA5, $03, nRst, $07
00084258 E109                       	smpsAlterNote       $09
0008425A C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008425E E108                       	smpsAlterNote       $08
00084260 C103 8004                  	dc.b	nE5, $03, nRst, $04
00084266 E080                       	smpsPan             panLeft, $00
00084268 E10C                       	smpsAlterNote       $0C
0008426A E6F9                       	smpsAlterVol        $F9
0008426C C703                       	dc.b	nBb5, $03
0008426E E10B                       	smpsAlterNote       $0B
00084270 C603 8001                  	dc.b	nA5, $03, nRst, $01
00084274 E109                       	smpsAlterNote       $09
00084276 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008427C E108                       	smpsAlterNote       $08
0008427E C103 8001                  	dc.b	nE5, $03, nRst, $01
00084282 E106                       	smpsAlterNote       $06
00084284 BD03                       	dc.b	nC5, $03
00084286 E10B                       	smpsAlterNote       $0B
00084288 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008428E E0C0                       	smpsPan             panCenter, $00
00084290 E107                       	smpsAlterNote       $07
00084292 E606                       	smpsAlterVol        $06
00084294 BF03                       	dc.b	nD5, $03
00084296                            
00084296                            music84_Jump03:
00084296 E108                       	smpsAlterNote       $08
00084298 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008429C E109                       	smpsAlterNote       $09
0008429E C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000842A4 E10B                       	smpsAlterNote       $0B
000842A6 C607                       	dc.b	nA5, $07
000842A8 E107                       	smpsAlterNote       $07
000842AA BF03 8001                  	dc.b	nD5, $03, nRst, $01
000842AE E106                       	smpsAlterNote       $06
000842B0 C90D                       	dc.b	nC6, $0D
000842B2 E100                       	smpsAlterNote       $00
000842B4 E701                       	dc.b	smpsNoAttack, $01
000842B6 E1FF                       	smpsAlterNote       $FF
000842B8 E701                       	dc.b	smpsNoAttack, $01
000842BA E103                       	smpsAlterNote       $03
000842BC E701                       	dc.b	smpsNoAttack, $01
000842BE E109                       	smpsAlterNote       $09
000842C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842C4 E106                       	smpsAlterNote       $06
000842C6 E701                       	dc.b	smpsNoAttack, $01
000842C8 E100                       	smpsAlterNote       $00
000842CA E701                       	dc.b	smpsNoAttack, $01
000842CC E10C                       	smpsAlterNote       $0C
000842CE C703 8001                  	dc.b	nBb5, $03, nRst, $01
000842D2 E10B                       	smpsAlterNote       $0B
000842D4 C603                       	dc.b	nA5, $03
000842D6 E109                       	smpsAlterNote       $09
000842D8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000842DC E10B                       	smpsAlterNote       $0B
000842DE C60D                       	dc.b	nA5, $0D
000842E0 E105                       	smpsAlterNote       $05
000842E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842E6 E10B                       	smpsAlterNote       $0B
000842E8 E701                       	dc.b	smpsNoAttack, $01
000842EA E10E                       	smpsAlterNote       $0E
000842EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842F0 E108                       	smpsAlterNote       $08
000842F2 E701                       	dc.b	smpsNoAttack, $01
000842F4 E104                       	smpsAlterNote       $04
000842F6 E701                       	dc.b	smpsNoAttack, $01
000842F8 E105                       	smpsAlterNote       $05
000842FA E701                       	dc.b	smpsNoAttack, $01
000842FC E10B                       	smpsAlterNote       $0B
000842FE E701                       	dc.b	smpsNoAttack, $01
00084300 E10F                       	smpsAlterNote       $0F
00084302 E701                       	dc.b	smpsNoAttack, $01
00084304 E10B                       	smpsAlterNote       $0B
00084306 E701                       	dc.b	smpsNoAttack, $01
00084308 E108                       	smpsAlterNote       $08
0008430A E701                       	dc.b	smpsNoAttack, $01
0008430C E104                       	smpsAlterNote       $04
0008430E E701                       	dc.b	smpsNoAttack, $01
00084310 E108                       	smpsAlterNote       $08
00084312 E701                       	dc.b	smpsNoAttack, $01
00084314 E10E                       	smpsAlterNote       $0E
00084316 E701                       	dc.b	smpsNoAttack, $01
00084318 E10F                       	smpsAlterNote       $0F
0008431A E701                       	dc.b	smpsNoAttack, $01
0008431C E10B                       	smpsAlterNote       $0B
0008431E E701                       	dc.b	smpsNoAttack, $01
00084320 E105                       	smpsAlterNote       $05
00084322 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084326 E108                       	smpsAlterNote       $08
00084328 E701                       	dc.b	smpsNoAttack, $01
0008432A E10E                       	smpsAlterNote       $0E
0008432C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084330 E108                       	smpsAlterNote       $08
00084332 E701                       	dc.b	smpsNoAttack, $01
00084334 E105                       	smpsAlterNote       $05
00084336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008433A E10B                       	smpsAlterNote       $0B
0008433C E701                       	dc.b	smpsNoAttack, $01
0008433E E10F                       	smpsAlterNote       $0F
00084340 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00084344 E107                       	smpsAlterNote       $07
00084346 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008434A E108                       	smpsAlterNote       $08
0008434C C103                       	dc.b	nE5, $03
0008434E E109                       	smpsAlterNote       $09
00084350 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00084358 E10B                       	smpsAlterNote       $0B
0008435A C606 8001                  	dc.b	nA5, $06, nRst, $01
0008435E E107                       	smpsAlterNote       $07
00084360 BF03                       	dc.b	nD5, $03
00084362 E106                       	smpsAlterNote       $06
00084364 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00084368 E107                       	smpsAlterNote       $07
0008436A CB03                       	dc.b	nD6, $03
0008436C E10C                       	smpsAlterNote       $0C
0008436E C704 8001                  	dc.b	nBb5, $04, nRst, $01
00084372 E10B                       	smpsAlterNote       $0B
00084374 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084378 E109                       	smpsAlterNote       $09
0008437A C404                       	dc.b	nG5, $04
0008437C E10B                       	smpsAlterNote       $0B
0008437E C60D                       	dc.b	nA5, $0D
00084380 E108                       	smpsAlterNote       $08
00084382 E701                       	dc.b	smpsNoAttack, $01
00084384 E104                       	smpsAlterNote       $04
00084386 E701                       	dc.b	smpsNoAttack, $01
00084388 E108                       	smpsAlterNote       $08
0008438A E701                       	dc.b	smpsNoAttack, $01
0008438C E10B                       	smpsAlterNote       $0B
0008438E E701                       	dc.b	smpsNoAttack, $01
00084390 E10F                       	smpsAlterNote       $0F
00084392 E701                       	dc.b	smpsNoAttack, $01
00084394 E10B                       	smpsAlterNote       $0B
00084396 E701                       	dc.b	smpsNoAttack, $01
00084398 E105                       	smpsAlterNote       $05
0008439A E701                       	dc.b	smpsNoAttack, $01
0008439C E104                       	smpsAlterNote       $04
0008439E E701                       	dc.b	smpsNoAttack, $01
000843A0 E108                       	smpsAlterNote       $08
000843A2 E701                       	dc.b	smpsNoAttack, $01
000843A4 E10E                       	smpsAlterNote       $0E
000843A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843AA E10B                       	smpsAlterNote       $0B
000843AC E701                       	dc.b	smpsNoAttack, $01
000843AE E105                       	smpsAlterNote       $05
000843B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843B4 E10B                       	smpsAlterNote       $0B
000843B6 E701                       	dc.b	smpsNoAttack, $01
000843B8 E10E                       	smpsAlterNote       $0E
000843BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843BE E108                       	smpsAlterNote       $08
000843C0 E701                       	dc.b	smpsNoAttack, $01
000843C2 E104                       	smpsAlterNote       $04
000843C4 E701                       	dc.b	smpsNoAttack, $01
000843C6 E105                       	smpsAlterNote       $05
000843C8 E701                       	dc.b	smpsNoAttack, $01
000843CA E10B                       	smpsAlterNote       $0B
000843CC E701                       	dc.b	smpsNoAttack, $01
000843CE E10F                       	smpsAlterNote       $0F
000843D0 E701                       	dc.b	smpsNoAttack, $01
000843D2 E10B                       	smpsAlterNote       $0B
000843D4 E701                       	dc.b	smpsNoAttack, $01
000843D6 E108                       	smpsAlterNote       $08
000843D8 E701                       	dc.b	smpsNoAttack, $01
000843DA E105                       	smpsAlterNote       $05
000843DC 8001                       	dc.b	nRst, $01
000843DE E109                       	smpsAlterNote       $09
000843E0 C401                       	dc.b	nG5, $01
000843E2 E10B                       	smpsAlterNote       $0B
000843E4 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000843ED E109                       	smpsAlterNote       $09
000843EF C404 8001                  	dc.b	nG5, $04, nRst, $01
000843F3 E10B                       	smpsAlterNote       $0B
000843F5 C604 8001                  	dc.b	nA5, $04, nRst, $01
000843F9 E107                       	smpsAlterNote       $07
000843FB BF0D                       	dc.b	nD5, $0D
000843FD E101                       	smpsAlterNote       $01
000843FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084403 E104                       	smpsAlterNote       $04
00084405 E701                       	dc.b	smpsNoAttack, $01
00084407 E10A                       	smpsAlterNote       $0A
00084409 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008440D E104                       	smpsAlterNote       $04
0008440F E701                       	dc.b	smpsNoAttack, $01
00084411 E101                       	smpsAlterNote       $01
00084413 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084417 E107                       	smpsAlterNote       $07
00084419 E701                       	dc.b	smpsNoAttack, $01
0008441B E10B                       	smpsAlterNote       $0B
0008441D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084421 E108                       	smpsAlterNote       $08
00084423 C101                       	dc.b	nE5, $01
00084425 E109                       	smpsAlterNote       $09
00084427 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008442C E10B                       	smpsAlterNote       $0B
0008442E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00084436 E108                       	smpsAlterNote       $08
00084438 CD06                       	dc.b	nE6, $06
0008443A E109                       	smpsAlterNote       $09
0008443C CE07                       	dc.b	nF6, $07
0008443E E108                       	smpsAlterNote       $08
00084440 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00084444 E106                       	smpsAlterNote       $06
00084446 C903                       	dc.b	nC6, $03
00084448 E109                       	smpsAlterNote       $09
0008444A C403 8001                  	dc.b	nG5, $03, nRst, $01
0008444E E10C                       	smpsAlterNote       $0C
00084450 C70D                       	dc.b	nBb5, $0D
00084452 E106                       	smpsAlterNote       $06
00084454 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084458 E109                       	smpsAlterNote       $09
0008445A E701                       	dc.b	smpsNoAttack, $01
0008445C E10F                       	smpsAlterNote       $0F
0008445E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084462 E109                       	smpsAlterNote       $09
00084464 E701                       	dc.b	smpsNoAttack, $01
00084466 E106                       	smpsAlterNote       $06
00084468 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008446C E10C                       	smpsAlterNote       $0C
0008446E E701                       	dc.b	smpsNoAttack, $01
00084470 E110                       	smpsAlterNote       $10
00084472 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084476 E10B                       	smpsAlterNote       $0B
00084478 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008447C E105                       	smpsAlterNote       $05
0008447E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084482 E10B                       	smpsAlterNote       $0B
00084484 E701                       	dc.b	smpsNoAttack, $01
00084486 E10E                       	smpsAlterNote       $0E
00084488 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008448C E108                       	smpsAlterNote       $08
0008448E E701                       	dc.b	smpsNoAttack, $01
00084490 E104                       	smpsAlterNote       $04
00084492 E701                       	dc.b	smpsNoAttack, $01
00084494 E105                       	smpsAlterNote       $05
00084496 E701                       	dc.b	smpsNoAttack, $01
00084498 E10B                       	smpsAlterNote       $0B
0008449A E701                       	dc.b	smpsNoAttack, $01
0008449C E10F                       	smpsAlterNote       $0F
0008449E E701                       	dc.b	smpsNoAttack, $01
000844A0 E10B                       	smpsAlterNote       $0B
000844A2 E701                       	dc.b	smpsNoAttack, $01
000844A4 E108                       	smpsAlterNote       $08
000844A6 E701                       	dc.b	smpsNoAttack, $01
000844A8 E104                       	smpsAlterNote       $04
000844AA E701                       	dc.b	smpsNoAttack, $01
000844AC E108                       	smpsAlterNote       $08
000844AE E701                       	dc.b	smpsNoAttack, $01
000844B0 E10E                       	smpsAlterNote       $0E
000844B2 E701                       	dc.b	smpsNoAttack, $01
000844B4 E10F                       	smpsAlterNote       $0F
000844B6 E701                       	dc.b	smpsNoAttack, $01
000844B8 E10B                       	smpsAlterNote       $0B
000844BA E701                       	dc.b	smpsNoAttack, $01
000844BC E105                       	smpsAlterNote       $05
000844BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844C2 E108                       	smpsAlterNote       $08
000844C4 E701                       	dc.b	smpsNoAttack, $01
000844C6 E10E                       	smpsAlterNote       $0E
000844C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844CC E108                       	smpsAlterNote       $08
000844CE E701                       	dc.b	smpsNoAttack, $01
000844D0 E105                       	smpsAlterNote       $05
000844D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844D6 E10B                       	smpsAlterNote       $0B
000844D8 E701                       	dc.b	smpsNoAttack, $01
000844DA E10F                       	smpsAlterNote       $0F
000844DC E701                       	dc.b	smpsNoAttack, $01
000844DE E10E                       	smpsAlterNote       $0E
000844E0 E701                       	dc.b	smpsNoAttack, $01
000844E2 E108                       	smpsAlterNote       $08
000844E4 E701                       	dc.b	smpsNoAttack, $01
000844E6 E104                       	smpsAlterNote       $04
000844E8 E701                       	dc.b	smpsNoAttack, $01
000844EA E108                       	smpsAlterNote       $08
000844EC E701                       	dc.b	smpsNoAttack, $01
000844EE E10E                       	smpsAlterNote       $0E
000844F0 E701                       	dc.b	smpsNoAttack, $01
000844F2 E10F                       	smpsAlterNote       $0F
000844F4 E701                       	dc.b	smpsNoAttack, $01
000844F6 E10B                       	smpsAlterNote       $0B
000844F8 E701                       	dc.b	smpsNoAttack, $01
000844FA E105                       	smpsAlterNote       $05
000844FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084500 E108                       	smpsAlterNote       $08
00084502 E701                       	dc.b	smpsNoAttack, $01
00084504 E10E                       	smpsAlterNote       $0E
00084506 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008450A E108                       	smpsAlterNote       $08
0008450C E701                       	dc.b	smpsNoAttack, $01
0008450E E105                       	smpsAlterNote       $05
00084510 E701                       	dc.b	smpsNoAttack, $01
00084512 E10B                       	smpsAlterNote       $0B
00084514 C60D                       	dc.b	nA5, $0D
00084516 E108                       	smpsAlterNote       $08
00084518 E701                       	dc.b	smpsNoAttack, $01
0008451A E104                       	smpsAlterNote       $04
0008451C E701                       	dc.b	smpsNoAttack, $01
0008451E E105                       	smpsAlterNote       $05
00084520 E701                       	dc.b	smpsNoAttack, $01
00084522 E10B                       	smpsAlterNote       $0B
00084524 E701                       	dc.b	smpsNoAttack, $01
00084526 E10F                       	smpsAlterNote       $0F
00084528 E701                       	dc.b	smpsNoAttack, $01
0008452A E10B                       	smpsAlterNote       $0B
0008452C E701                       	dc.b	smpsNoAttack, $01
0008452E E108                       	smpsAlterNote       $08
00084530 E701                       	dc.b	smpsNoAttack, $01
00084532 E104                       	smpsAlterNote       $04
00084534 E701                       	dc.b	smpsNoAttack, $01
00084536 E108                       	smpsAlterNote       $08
00084538 E701                       	dc.b	smpsNoAttack, $01
0008453A E10E                       	smpsAlterNote       $0E
0008453C E701                       	dc.b	smpsNoAttack, $01
0008453E E10F                       	smpsAlterNote       $0F
00084540 E701                       	dc.b	smpsNoAttack, $01
00084544 E109                       	smpsAlterNote       $09
00084546 E6FF                       	smpsAlterVol        $FF
00084548 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00084552 E108                       	smpsAlterNote       $08
00084554 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008455A E107                       	smpsAlterNote       $07
0008455C E601                       	smpsAlterVol        $01
0008455E BF03                       	dc.b	nD5, $03
00084560 E108                       	smpsAlterNote       $08
00084562 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084566 E109                       	smpsAlterNote       $09
00084568 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008456E E10B                       	smpsAlterNote       $0B
00084570 C606 8001                  	dc.b	nA5, $06, nRst, $01
00084574 E107                       	smpsAlterNote       $07
00084576 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008457A E106                       	smpsAlterNote       $06
0008457C C90D                       	dc.b	nC6, $0D
0008457E E103                       	smpsAlterNote       $03
00084580 E701                       	dc.b	smpsNoAttack, $01
00084582 E1FF                       	smpsAlterNote       $FF
00084584 E701                       	dc.b	smpsNoAttack, $01
00084586 E103                       	smpsAlterNote       $03
00084588 E701                       	dc.b	smpsNoAttack, $01
0008458A E109                       	smpsAlterNote       $09
0008458C E701                       	dc.b	smpsNoAttack, $01
0008458E E10A                       	smpsAlterNote       $0A
00084590 E701                       	dc.b	smpsNoAttack, $01
00084592 E106                       	smpsAlterNote       $06
00084594 E701                       	dc.b	smpsNoAttack, $01
00084596 E100                       	smpsAlterNote       $00
00084598 E701                       	dc.b	smpsNoAttack, $01
0008459A E10C                       	smpsAlterNote       $0C
0008459C C703 8001                  	dc.b	nBb5, $03, nRst, $01
000845A0 E10B                       	smpsAlterNote       $0B
000845A2 C603                       	dc.b	nA5, $03
000845A4 E109                       	smpsAlterNote       $09
000845A6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000845AA E10B                       	smpsAlterNote       $0B
000845AC C60D                       	dc.b	nA5, $0D
000845AE E105                       	smpsAlterNote       $05
000845B0 E701                       	dc.b	smpsNoAttack, $01
000845B2 E104                       	smpsAlterNote       $04
000845B4 E701                       	dc.b	smpsNoAttack, $01
000845B6 E108                       	smpsAlterNote       $08
000845B8 E701                       	dc.b	smpsNoAttack, $01
000845BA E10E                       	smpsAlterNote       $0E
000845BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845C0 E10B                       	smpsAlterNote       $0B
000845C2 E701                       	dc.b	smpsNoAttack, $01
000845C4 E105                       	smpsAlterNote       $05
000845C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845CA E10B                       	smpsAlterNote       $0B
000845CC E701                       	dc.b	smpsNoAttack, $01
000845CE E10E                       	smpsAlterNote       $0E
000845D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845D4 E108                       	smpsAlterNote       $08
000845D6 E701                       	dc.b	smpsNoAttack, $01
000845D8 E104                       	smpsAlterNote       $04
000845DA E701                       	dc.b	smpsNoAttack, $01
000845DC E105                       	smpsAlterNote       $05
000845DE E701                       	dc.b	smpsNoAttack, $01
000845E0 E10B                       	smpsAlterNote       $0B
000845E2 E701                       	dc.b	smpsNoAttack, $01
000845E4 E10F                       	smpsAlterNote       $0F
000845E6 E701                       	dc.b	smpsNoAttack, $01
000845E8 E10B                       	smpsAlterNote       $0B
000845EA E701                       	dc.b	smpsNoAttack, $01
000845EC E108                       	smpsAlterNote       $08
000845EE E701                       	dc.b	smpsNoAttack, $01
000845F0 E104                       	smpsAlterNote       $04
000845F2 E701                       	dc.b	smpsNoAttack, $01
000845F4 E108                       	smpsAlterNote       $08
000845F6 E701                       	dc.b	smpsNoAttack, $01
000845F8 E10E                       	smpsAlterNote       $0E
000845FA E701                       	dc.b	smpsNoAttack, $01
000845FC E10F                       	smpsAlterNote       $0F
000845FE E701                       	dc.b	smpsNoAttack, $01
00084600 E10B                       	smpsAlterNote       $0B
00084602 E701                       	dc.b	smpsNoAttack, $01
00084604 E105                       	smpsAlterNote       $05
00084606 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008460A E108                       	smpsAlterNote       $08
0008460C E701                       	dc.b	smpsNoAttack, $01
0008460E E10E                       	smpsAlterNote       $0E
00084610 E701                       	dc.b	smpsNoAttack, $01
00084612 E10F                       	smpsAlterNote       $0F
00084614 800F                       	dc.b	nRst, $0F
00084616 E107                       	smpsAlterNote       $07
00084618 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008461C E108                       	smpsAlterNote       $08
0008461E C103                       	dc.b	nE5, $03
00084620 E109                       	smpsAlterNote       $09
00084622 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00084628 E10B                       	smpsAlterNote       $0B
0008462A C606 8001                  	dc.b	nA5, $06, nRst, $01
0008462E E107                       	smpsAlterNote       $07
00084630 BF03                       	dc.b	nD5, $03
00084632 E106                       	smpsAlterNote       $06
00084634 C90E                       	dc.b	nC6, $0E
00084636 E107                       	smpsAlterNote       $07
00084638 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008463C E10C                       	smpsAlterNote       $0C
0008463E C704                       	dc.b	nBb5, $04
00084640 E10B                       	smpsAlterNote       $0B
00084642 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084646 E109                       	smpsAlterNote       $09
00084648 C404                       	dc.b	nG5, $04
0008464A E10B                       	smpsAlterNote       $0B
0008464C C60D                       	dc.b	nA5, $0D
0008464E E108                       	smpsAlterNote       $08
00084650 E701                       	dc.b	smpsNoAttack, $01
00084652 E105                       	smpsAlterNote       $05
00084654 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084658 E10B                       	smpsAlterNote       $0B
0008465A E701                       	dc.b	smpsNoAttack, $01
0008465C E10F                       	smpsAlterNote       $0F
0008465E E701                       	dc.b	smpsNoAttack, $01
00084660 E10E                       	smpsAlterNote       $0E
00084662 E701                       	dc.b	smpsNoAttack, $01
00084664 E108                       	smpsAlterNote       $08
00084666 E701                       	dc.b	smpsNoAttack, $01
00084668 E104                       	smpsAlterNote       $04
0008466A E701                       	dc.b	smpsNoAttack, $01
0008466C E108                       	smpsAlterNote       $08
0008466E E701                       	dc.b	smpsNoAttack, $01
00084670 E10B                       	smpsAlterNote       $0B
00084672 E701                       	dc.b	smpsNoAttack, $01
00084674 E10F                       	smpsAlterNote       $0F
00084676 E701                       	dc.b	smpsNoAttack, $01
00084678 E10B                       	smpsAlterNote       $0B
0008467A E701                       	dc.b	smpsNoAttack, $01
0008467C E105                       	smpsAlterNote       $05
0008467E E701                       	dc.b	smpsNoAttack, $01
00084680 E104                       	smpsAlterNote       $04
00084682 E701                       	dc.b	smpsNoAttack, $01
00084684 E108                       	smpsAlterNote       $08
00084686 E701                       	dc.b	smpsNoAttack, $01
00084688 E10E                       	smpsAlterNote       $0E
0008468A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008468E E10B                       	smpsAlterNote       $0B
00084690 E701                       	dc.b	smpsNoAttack, $01
00084692 E105                       	smpsAlterNote       $05
00084694 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084698 E10B                       	smpsAlterNote       $0B
0008469A E701                       	dc.b	smpsNoAttack, $01
0008469C E10E                       	smpsAlterNote       $0E
0008469E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846A2 E108                       	smpsAlterNote       $08
000846A4 E701                       	dc.b	smpsNoAttack, $01
000846A6 E105                       	smpsAlterNote       $05
000846A8 8001                       	dc.b	nRst, $01
000846AA E109                       	smpsAlterNote       $09
000846AC C402                       	dc.b	nG5, $02
000846AE E10B                       	smpsAlterNote       $0B
000846B0 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000846B9 E109                       	smpsAlterNote       $09
000846BB C404                       	dc.b	nG5, $04
000846BD E10B                       	smpsAlterNote       $0B
000846BF C604 8001                  	dc.b	nA5, $04, nRst, $01
000846C3 E107                       	smpsAlterNote       $07
000846C5 BF0D                       	dc.b	nD5, $0D
000846C7 E101                       	smpsAlterNote       $01
000846C9 E701                       	dc.b	smpsNoAttack, $01
000846CB E100                       	smpsAlterNote       $00
000846CD E701                       	dc.b	smpsNoAttack, $01
000846CF E104                       	smpsAlterNote       $04
000846D1 E701                       	dc.b	smpsNoAttack, $01
000846D3 E10A                       	smpsAlterNote       $0A
000846D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846D9 E107                       	smpsAlterNote       $07
000846DB E701                       	dc.b	smpsNoAttack, $01
000846DD E101                       	smpsAlterNote       $01
000846DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846E3 E107                       	smpsAlterNote       $07
000846E5 E701                       	dc.b	smpsNoAttack, $01
000846E7 E10A                       	smpsAlterNote       $0A
000846E9 E701                       	dc.b	smpsNoAttack, $01
000846EB E10B                       	smpsAlterNote       $0B
000846ED 8001                       	dc.b	nRst, $01
000846EF E108                       	smpsAlterNote       $08
000846F1 C101                       	dc.b	nE5, $01
000846F3 E109                       	smpsAlterNote       $09
000846F5 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000846FA E10B                       	smpsAlterNote       $0B
000846FC C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00084704 E108                       	smpsAlterNote       $08
00084706 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008470A E109                       	smpsAlterNote       $09
0008470C CE06 8001                  	dc.b	nF6, $06, nRst, $01
00084710 E108                       	smpsAlterNote       $08
00084712 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00084716 E106                       	smpsAlterNote       $06
00084718 C903                       	dc.b	nC6, $03
0008471A E109                       	smpsAlterNote       $09
0008471C C403 8001                  	dc.b	nG5, $03, nRst, $01
00084720 E10C                       	smpsAlterNote       $0C
00084722 C70D                       	dc.b	nBb5, $0D
00084724 E109                       	smpsAlterNote       $09
00084726 E701                       	dc.b	smpsNoAttack, $01
00084728 E105                       	smpsAlterNote       $05
0008472A E701                       	dc.b	smpsNoAttack, $01
0008472C E109                       	smpsAlterNote       $09
0008472E E701                       	dc.b	smpsNoAttack, $01
00084730 E10F                       	smpsAlterNote       $0F
00084732 E701                       	dc.b	smpsNoAttack, $01
00084734 E110                       	smpsAlterNote       $10
00084736 E701                       	dc.b	smpsNoAttack, $01
00084738 E10C                       	smpsAlterNote       $0C
0008473A E701                       	dc.b	smpsNoAttack, $01
0008473C E106                       	smpsAlterNote       $06
0008473E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084742 E109                       	smpsAlterNote       $09
00084744 E701                       	dc.b	smpsNoAttack, $01
00084746 E10F                       	smpsAlterNote       $0F
00084748 E701                       	dc.b	smpsNoAttack, $01
0008474A E110                       	smpsAlterNote       $10
0008474C 8001                       	dc.b	nRst, $01
0008474E E10B                       	smpsAlterNote       $0B
00084750 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00084756 E105                       	smpsAlterNote       $05
00084758 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008475C E108                       	smpsAlterNote       $08
0008475E E701                       	dc.b	smpsNoAttack, $01
00084760 E10E                       	smpsAlterNote       $0E
00084762 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084766 E108                       	smpsAlterNote       $08
00084768 E701                       	dc.b	smpsNoAttack, $01
0008476A E105                       	smpsAlterNote       $05
0008476C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084770 E10B                       	smpsAlterNote       $0B
00084772 E701                       	dc.b	smpsNoAttack, $01
00084774 E10F                       	smpsAlterNote       $0F
00084776 E701                       	dc.b	smpsNoAttack, $01
00084778 E10E                       	smpsAlterNote       $0E
0008477A E701                       	dc.b	smpsNoAttack, $01
0008477C E108                       	smpsAlterNote       $08
0008477E E701                       	dc.b	smpsNoAttack, $01
00084780 E104                       	smpsAlterNote       $04
00084782 E701                       	dc.b	smpsNoAttack, $01
00084784 E108                       	smpsAlterNote       $08
00084786 E701                       	dc.b	smpsNoAttack, $01
00084788 E10B                       	smpsAlterNote       $0B
0008478A E701                       	dc.b	smpsNoAttack, $01
0008478C E10F                       	smpsAlterNote       $0F
0008478E E701                       	dc.b	smpsNoAttack, $01
00084790 E10B                       	smpsAlterNote       $0B
00084792 E701                       	dc.b	smpsNoAttack, $01
00084794 E105                       	smpsAlterNote       $05
00084796 E701                       	dc.b	smpsNoAttack, $01
00084798 E104                       	smpsAlterNote       $04
0008479A E701                       	dc.b	smpsNoAttack, $01
0008479C E108                       	smpsAlterNote       $08
0008479E E701                       	dc.b	smpsNoAttack, $01
000847A0 E10E                       	smpsAlterNote       $0E
000847A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847A6 E10B                       	smpsAlterNote       $0B
000847A8 E701                       	dc.b	smpsNoAttack, $01
000847AA E105                       	smpsAlterNote       $05
000847AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847B0 E10B                       	smpsAlterNote       $0B
000847B2 E701                       	dc.b	smpsNoAttack, $01
000847B4 E10E                       	smpsAlterNote       $0E
000847B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847BA E108                       	smpsAlterNote       $08
000847BC E701                       	dc.b	smpsNoAttack, $01
000847BE E104                       	smpsAlterNote       $04
000847C0 E701                       	dc.b	smpsNoAttack, $01
000847C2 E105                       	smpsAlterNote       $05
000847C4 E701                       	dc.b	smpsNoAttack, $01
000847C6 E10B                       	smpsAlterNote       $0B
000847C8 E701                       	dc.b	smpsNoAttack, $01
000847CA E10F                       	smpsAlterNote       $0F
000847CC E701                       	dc.b	smpsNoAttack, $01
000847CE E10B                       	smpsAlterNote       $0B
000847D0 E701                       	dc.b	smpsNoAttack, $01
000847D2 E108                       	smpsAlterNote       $08
000847D4 E701                       	dc.b	smpsNoAttack, $01
000847D6 E104                       	smpsAlterNote       $04
000847D8 E701                       	dc.b	smpsNoAttack, $01
000847DA E108                       	smpsAlterNote       $08
000847DC E701                       	dc.b	smpsNoAttack, $01
000847DE E10E                       	smpsAlterNote       $0E
000847E0 E701                       	dc.b	smpsNoAttack, $01
000847E2 E10F                       	smpsAlterNote       $0F
000847E4 E701                       	dc.b	smpsNoAttack, $01
000847E6 E10B                       	smpsAlterNote       $0B
000847E8 E701                       	dc.b	smpsNoAttack, $01
000847EA E105                       	smpsAlterNote       $05
000847EC E701                       	dc.b	smpsNoAttack, $01
000847EE E10B                       	smpsAlterNote       $0B
000847F0 C60E                       	dc.b	nA5, $0E
000847F2 E105                       	smpsAlterNote       $05
000847F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847F8 E10B                       	smpsAlterNote       $0B
000847FA E701                       	dc.b	smpsNoAttack, $01
000847FC E10E                       	smpsAlterNote       $0E
000847FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084802 E108                       	smpsAlterNote       $08
00084804 E701                       	dc.b	smpsNoAttack, $01
00084806 E104                       	smpsAlterNote       $04
00084808 E701                       	dc.b	smpsNoAttack, $01
0008480A E105                       	smpsAlterNote       $05
0008480C E701                       	dc.b	smpsNoAttack, $01
0008480E E10B                       	smpsAlterNote       $0B
00084810 E701                       	dc.b	smpsNoAttack, $01
00084812 E10F                       	smpsAlterNote       $0F
00084814 E701                       	dc.b	smpsNoAttack, $01
00084816 E10B                       	smpsAlterNote       $0B
00084818 E701                       	dc.b	smpsNoAttack, $01
0008481A E108                       	smpsAlterNote       $08
0008481C E701                       	dc.b	smpsNoAttack, $01
0008481E E104                       	smpsAlterNote       $04
00084820 E701                       	dc.b	smpsNoAttack, $01
00084822 E108                       	smpsAlterNote       $08
00084824 E701                       	dc.b	smpsNoAttack, $01
00084826 E10E                       	smpsAlterNote       $0E
00084828 E701                       	dc.b	smpsNoAttack, $01
0008482A E10F                       	smpsAlterNote       $0F
0008482C E701                       	dc.b	smpsNoAttack, $01
0008482E E10B                       	smpsAlterNote       $0B
00084830 E701                       	dc.b	smpsNoAttack, $01
00084832 E105                       	smpsAlterNote       $05
00084834 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084838 E108                       	smpsAlterNote       $08
0008483A E701                       	dc.b	smpsNoAttack, $01
0008483C E10E                       	smpsAlterNote       $0E
0008483E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084842 E108                       	smpsAlterNote       $08
00084844 E701                       	dc.b	smpsNoAttack, $01
00084846 E105                       	smpsAlterNote       $05
00084848 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008484C E10B                       	smpsAlterNote       $0B
0008484E E701                       	dc.b	smpsNoAttack, $01
00084850 E10F                       	smpsAlterNote       $0F
00084852 E701                       	dc.b	smpsNoAttack, $01
00084854 E10E                       	smpsAlterNote       $0E
00084856 E701                       	dc.b	smpsNoAttack, $01
00084858 E108                       	smpsAlterNote       $08
0008485A E701                       	dc.b	smpsNoAttack, $01
0008485C E104                       	smpsAlterNote       $04
0008485E E701                       	dc.b	smpsNoAttack, $01
00084860 E108                       	smpsAlterNote       $08
00084862 E701                       	dc.b	smpsNoAttack, $01
00084864 E10E                       	smpsAlterNote       $0E
00084866 E701                       	dc.b	smpsNoAttack, $01
00084868 E10F                       	smpsAlterNote       $0F
0008486A E701                       	dc.b	smpsNoAttack, $01
0008486C E10B                       	smpsAlterNote       $0B
0008486E E701                       	dc.b	smpsNoAttack, $01
00084870 E105                       	smpsAlterNote       $05
00084872 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084876 E108                       	smpsAlterNote       $08
00084878 E701                       	dc.b	smpsNoAttack, $01
0008487A E10E                       	smpsAlterNote       $0E
0008487C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084880 E108                       	smpsAlterNote       $08
00084882 E701                       	dc.b	smpsNoAttack, $01
00084884 E105                       	smpsAlterNote       $05
00084886 E701                       	dc.b	smpsNoAttack, $01
0008488A E10B                       	smpsAlterNote       $0B
0008488C E6FD                       	smpsAlterVol        $FD
0008488E C604 8001                  	dc.b	nA5, $04, nRst, $01
00084892 E109                       	smpsAlterNote       $09
00084894 C404                       	dc.b	nG5, $04
00084896 E10B                       	smpsAlterNote       $0B
00084898 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008489C E107                       	smpsAlterNote       $07
0008489E BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000848A4 E10B                       	smpsAlterNote       $0B
000848A6 C604                       	dc.b	nA5, $04
000848A8 E109                       	smpsAlterNote       $09
000848AA C404 8001                  	dc.b	nG5, $04, nRst, $01
000848AE E10B                       	smpsAlterNote       $0B
000848B0 C604                       	dc.b	nA5, $04
000848B2 E108                       	smpsAlterNote       $08
000848B4 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000848BC E106                       	smpsAlterNote       $06
000848BE C904 8001                  	dc.b	nC6, $04, nRst, $01
000848C2 E10C                       	smpsAlterNote       $0C
000848C4 C704                       	dc.b	nBb5, $04
000848C6 E10B                       	smpsAlterNote       $0B
000848C8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000848CC E109                       	smpsAlterNote       $09
000848CE C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000848D8 E10B                       	smpsAlterNote       $0B
000848DA C60D                       	dc.b	nA5, $0D
000848DC E108                       	smpsAlterNote       $08
000848DE E701                       	dc.b	smpsNoAttack, $01
000848E0 E104                       	smpsAlterNote       $04
000848E2 E701                       	dc.b	smpsNoAttack, $01
000848E4 E108                       	smpsAlterNote       $08
000848E6 E701                       	dc.b	smpsNoAttack, $01
000848E8 E10E                       	smpsAlterNote       $0E
000848EA E701                       	dc.b	smpsNoAttack, $01
000848EC E10F                       	smpsAlterNote       $0F
000848EE E701                       	dc.b	smpsNoAttack, $01
000848F0 E10B                       	smpsAlterNote       $0B
000848F2 E701                       	dc.b	smpsNoAttack, $01
000848F4 E105                       	smpsAlterNote       $05
000848F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848FA E108                       	smpsAlterNote       $08
000848FC E701                       	dc.b	smpsNoAttack, $01
000848FE E10E                       	smpsAlterNote       $0E
00084900 E701                       	dc.b	smpsNoAttack, $01
00084902 E10F                       	smpsAlterNote       $0F
00084904 8001                       	dc.b	nRst, $01
00084906 E109                       	smpsAlterNote       $09
00084908 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008490E E108                       	smpsAlterNote       $08
00084910 C10D                       	dc.b	nE5, $0D
00084912 E102                       	smpsAlterNote       $02
00084914 E701                       	dc.b	smpsNoAttack, $01
00084916 E101                       	smpsAlterNote       $01
00084918 E701                       	dc.b	smpsNoAttack, $01
0008491A E105                       	smpsAlterNote       $05
0008491C E701                       	dc.b	smpsNoAttack, $01
0008491E E10B                       	smpsAlterNote       $0B
00084920 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084924 E108                       	smpsAlterNote       $08
00084926 E701                       	dc.b	smpsNoAttack, $01
00084928 E102                       	smpsAlterNote       $02
0008492A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008492E E108                       	smpsAlterNote       $08
00084930 E701                       	dc.b	smpsNoAttack, $01
00084932 E10B                       	smpsAlterNote       $0B
00084934 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084938 E105                       	smpsAlterNote       $05
0008493A E701                       	dc.b	smpsNoAttack, $01
0008493C E101                       	smpsAlterNote       $01
0008493E E701                       	dc.b	smpsNoAttack, $01
00084940 E102                       	smpsAlterNote       $02
00084942 E701                       	dc.b	smpsNoAttack, $01
00084944 E108                       	smpsAlterNote       $08
00084946 E701                       	dc.b	smpsNoAttack, $01
00084948 E10C                       	smpsAlterNote       $0C
0008494A E701                       	dc.b	smpsNoAttack, $01
0008494C E108                       	smpsAlterNote       $08
0008494E E701                       	dc.b	smpsNoAttack, $01
00084950 E105                       	smpsAlterNote       $05
00084952 E701                       	dc.b	smpsNoAttack, $01
00084954 E101                       	smpsAlterNote       $01
00084956 E701                       	dc.b	smpsNoAttack, $01
00084958 E105                       	smpsAlterNote       $05
0008495A E701                       	dc.b	smpsNoAttack, $01
0008495C E10B                       	smpsAlterNote       $0B
0008495E E701                       	dc.b	smpsNoAttack, $01
00084960 E10C                       	smpsAlterNote       $0C
00084962 E701                       	dc.b	smpsNoAttack, $01
00084964 E108                       	smpsAlterNote       $08
00084966 E701                       	dc.b	smpsNoAttack, $01
00084968 E102                       	smpsAlterNote       $02
0008496A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008496E E105                       	smpsAlterNote       $05
00084970 E701                       	dc.b	smpsNoAttack, $01
00084972 E10B                       	smpsAlterNote       $0B
00084974 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084978 E105                       	smpsAlterNote       $05
0008497A E701                       	dc.b	smpsNoAttack, $01
0008497C E102                       	smpsAlterNote       $02
0008497E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084982 E108                       	smpsAlterNote       $08
00084984 E701                       	dc.b	smpsNoAttack, $01
00084986 E10C                       	smpsAlterNote       $0C
00084988 E701                       	dc.b	smpsNoAttack, $01
0008498A E10B                       	smpsAlterNote       $0B
0008498C E701                       	dc.b	smpsNoAttack, $01
0008498E E105                       	smpsAlterNote       $05
00084990 E701                       	dc.b	smpsNoAttack, $01
00084992 E101                       	smpsAlterNote       $01
00084994 E701                       	dc.b	smpsNoAttack, $01
00084996 E105                       	smpsAlterNote       $05
00084998 E701                       	dc.b	smpsNoAttack, $01
0008499A E108                       	smpsAlterNote       $08
0008499C E701                       	dc.b	smpsNoAttack, $01
0008499E E10C                       	smpsAlterNote       $0C
000849A0 E701                       	dc.b	smpsNoAttack, $01
000849A2 E108                       	smpsAlterNote       $08
000849A4 E701                       	dc.b	smpsNoAttack, $01
000849A6 E102                       	smpsAlterNote       $02
000849A8 E701                       	dc.b	smpsNoAttack, $01
000849AA E101                       	smpsAlterNote       $01
000849AC E701                       	dc.b	smpsNoAttack, $01
000849AE E105                       	smpsAlterNote       $05
000849B0 E701                       	dc.b	smpsNoAttack, $01
000849B2 E10B                       	smpsAlterNote       $0B
000849B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849B8 E108                       	smpsAlterNote       $08
000849BA E701                       	dc.b	smpsNoAttack, $01
000849BC E102                       	smpsAlterNote       $02
000849BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849C2 E108                       	smpsAlterNote       $08
000849C4 E701                       	dc.b	smpsNoAttack, $01
000849C6 E10B                       	smpsAlterNote       $0B
000849C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849CC E105                       	smpsAlterNote       $05
000849CE E701                       	dc.b	smpsNoAttack, $01
000849D0 E101                       	smpsAlterNote       $01
000849D2 E701                       	dc.b	smpsNoAttack, $01
000849D4 E102                       	smpsAlterNote       $02
000849D6 E701                       	dc.b	smpsNoAttack, $01
000849D8 E108                       	smpsAlterNote       $08
000849DA E701                       	dc.b	smpsNoAttack, $01
000849DC E10C                       	smpsAlterNote       $0C
000849DE E701                       	dc.b	smpsNoAttack, $01
000849E0 E108                       	smpsAlterNote       $08
000849E2 E701                       	dc.b	smpsNoAttack, $01
000849E4 E105                       	smpsAlterNote       $05
000849E6 E701                       	dc.b	smpsNoAttack, $01
000849E8 E101                       	smpsAlterNote       $01
000849EA E701                       	dc.b	smpsNoAttack, $01
000849EC E105                       	smpsAlterNote       $05
000849EE E701                       	dc.b	smpsNoAttack, $01
000849F0 E10B                       	smpsAlterNote       $0B
000849F2 E701                       	dc.b	smpsNoAttack, $01
000849F4 E10C                       	smpsAlterNote       $0C
000849F6 E701                       	dc.b	smpsNoAttack, $01
000849F8 E108                       	smpsAlterNote       $08
000849FA E701                       	dc.b	smpsNoAttack, $01
000849FC E102                       	smpsAlterNote       $02
000849FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A02 E105                       	smpsAlterNote       $05
00084A04 E701                       	dc.b	smpsNoAttack, $01
00084A06 E10B                       	smpsAlterNote       $0B
00084A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A0C E105                       	smpsAlterNote       $05
00084A0E E701                       	dc.b	smpsNoAttack, $01
00084A10 E101                       	smpsAlterNote       $01
00084A12 E701                       	dc.b	smpsNoAttack, $01
00084A14 E102                       	smpsAlterNote       $02
00084A16 E701                       	dc.b	smpsNoAttack, $01
00084A18 E108                       	smpsAlterNote       $08
00084A1A E701                       	dc.b	smpsNoAttack, $01
00084A1C E10C                       	smpsAlterNote       $0C
00084A1E E701                       	dc.b	smpsNoAttack, $01
00084A20 E108                       	smpsAlterNote       $08
00084A22 E701                       	dc.b	smpsNoAttack, $01
00084A24 E105                       	smpsAlterNote       $05
00084A26 E701                       	dc.b	smpsNoAttack, $01
00084A28 E101                       	smpsAlterNote       $01
00084A2A E701                       	dc.b	smpsNoAttack, $01
00084A2C E105                       	smpsAlterNote       $05
00084A2E E701                       	dc.b	smpsNoAttack, $01
00084A30 E10B                       	smpsAlterNote       $0B
00084A32 E701                       	dc.b	smpsNoAttack, $01
00084A34 E10C                       	smpsAlterNote       $0C
00084A36 E701                       	dc.b	smpsNoAttack, $01
00084A38 E108                       	smpsAlterNote       $08
00084A3A E701                       	dc.b	smpsNoAttack, $01
00084A3C E102                       	smpsAlterNote       $02
00084A3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A42 E105                       	smpsAlterNote       $05
00084A44 E701                       	dc.b	smpsNoAttack, $01
00084A46 E10B                       	smpsAlterNote       $0B
00084A48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A4C E105                       	smpsAlterNote       $05
00084A4E E701                       	dc.b	smpsNoAttack, $01
00084A50 E102                       	smpsAlterNote       $02
00084A52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A56 E108                       	smpsAlterNote       $08
00084A58 E701                       	dc.b	smpsNoAttack, $01
00084A5A E10C                       	smpsAlterNote       $0C
00084A5C E701                       	dc.b	smpsNoAttack, $01
00084A5E E10B                       	smpsAlterNote       $0B
00084A60 E701                       	dc.b	smpsNoAttack, $01
00084A62 E105                       	smpsAlterNote       $05
00084A64 E701                       	dc.b	smpsNoAttack, $01
00084A66 E101                       	smpsAlterNote       $01
00084A68 E701                       	dc.b	smpsNoAttack, $01
00084A6A E105                       	smpsAlterNote       $05
00084A6C E701                       	dc.b	smpsNoAttack, $01
00084A6E E108                       	smpsAlterNote       $08
00084A70 E701                       	dc.b	smpsNoAttack, $01
00084A72 E10C                       	smpsAlterNote       $0C
00084A74 E701                       	dc.b	smpsNoAttack, $01
00084A78 E10B                       	smpsAlterNote       $0B
00084A7A C604 8001                  	dc.b	nA5, $04, nRst, $01
00084A7E E109                       	smpsAlterNote       $09
00084A80 C404                       	dc.b	nG5, $04
00084A82 E10B                       	smpsAlterNote       $0B
00084A84 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084A88 E107                       	smpsAlterNote       $07
00084A8A BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00084A90 E10B                       	smpsAlterNote       $0B
00084A92 C604                       	dc.b	nA5, $04
00084A94 E109                       	smpsAlterNote       $09
00084A96 C404 8001                  	dc.b	nG5, $04, nRst, $01
00084A9A E10B                       	smpsAlterNote       $0B
00084A9C C604                       	dc.b	nA5, $04
00084A9E E108                       	smpsAlterNote       $08
00084AA0 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00084AA6 E106                       	smpsAlterNote       $06
00084AA8 C904 8001                  	dc.b	nC6, $04, nRst, $01
00084AAC E10C                       	smpsAlterNote       $0C
00084AAE C704                       	dc.b	nBb5, $04
00084AB0 E10B                       	smpsAlterNote       $0B
00084AB2 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084AB6 E109                       	smpsAlterNote       $09
00084AB8 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00084AC2 E10B                       	smpsAlterNote       $0B
00084AC4 C60D                       	dc.b	nA5, $0D
00084AC6 E108                       	smpsAlterNote       $08
00084AC8 E701                       	dc.b	smpsNoAttack, $01
00084ACA E104                       	smpsAlterNote       $04
00084ACC E701                       	dc.b	smpsNoAttack, $01
00084ACE E108                       	smpsAlterNote       $08
00084AD0 E701                       	dc.b	smpsNoAttack, $01
00084AD2 E10B                       	smpsAlterNote       $0B
00084AD4 E701                       	dc.b	smpsNoAttack, $01
00084AD6 E10F                       	smpsAlterNote       $0F
00084AD8 E701                       	dc.b	smpsNoAttack, $01
00084ADA E10B                       	smpsAlterNote       $0B
00084ADC E701                       	dc.b	smpsNoAttack, $01
00084ADE E105                       	smpsAlterNote       $05
00084AE0 E701                       	dc.b	smpsNoAttack, $01
00084AE2 E104                       	smpsAlterNote       $04
00084AE4 E701                       	dc.b	smpsNoAttack, $01
00084AE6 E108                       	smpsAlterNote       $08
00084AE8 E701                       	dc.b	smpsNoAttack, $01
00084AEA E10E                       	smpsAlterNote       $0E
00084AEC E701                       	dc.b	smpsNoAttack, $01
00084AEE E10F                       	smpsAlterNote       $0F
00084AF0 8001                       	dc.b	nRst, $01
00084AF2 E109                       	smpsAlterNote       $09
00084AF4 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00084AFA E108                       	smpsAlterNote       $08
00084AFC C10D                       	dc.b	nE5, $0D
00084AFE E105                       	smpsAlterNote       $05
00084B00 E701                       	dc.b	smpsNoAttack, $01
00084B02 E101                       	smpsAlterNote       $01
00084B04 E701                       	dc.b	smpsNoAttack, $01
00084B06 E105                       	smpsAlterNote       $05
00084B08 E701                       	dc.b	smpsNoAttack, $01
00084B0A E10B                       	smpsAlterNote       $0B
00084B0C E701                       	dc.b	smpsNoAttack, $01
00084B0E E10C                       	smpsAlterNote       $0C
00084B10 E701                       	dc.b	smpsNoAttack, $01
00084B12 E108                       	smpsAlterNote       $08
00084B14 E701                       	dc.b	smpsNoAttack, $01
00084B16 E102                       	smpsAlterNote       $02
00084B18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B1C E105                       	smpsAlterNote       $05
00084B1E E701                       	dc.b	smpsNoAttack, $01
00084B20 E10B                       	smpsAlterNote       $0B
00084B22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B26 E105                       	smpsAlterNote       $05
00084B28 E701                       	dc.b	smpsNoAttack, $01
00084B2A E102                       	smpsAlterNote       $02
00084B2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B30 E108                       	smpsAlterNote       $08
00084B32 E701                       	dc.b	smpsNoAttack, $01
00084B34 E10C                       	smpsAlterNote       $0C
00084B36 E701                       	dc.b	smpsNoAttack, $01
00084B38 E10B                       	smpsAlterNote       $0B
00084B3A E701                       	dc.b	smpsNoAttack, $01
00084B3C E105                       	smpsAlterNote       $05
00084B3E E701                       	dc.b	smpsNoAttack, $01
00084B40 E101                       	smpsAlterNote       $01
00084B42 E701                       	dc.b	smpsNoAttack, $01
00084B44 E105                       	smpsAlterNote       $05
00084B46 E701                       	dc.b	smpsNoAttack, $01
00084B48 E108                       	smpsAlterNote       $08
00084B4A E701                       	dc.b	smpsNoAttack, $01
00084B4C E10C                       	smpsAlterNote       $0C
00084B4E E701                       	dc.b	smpsNoAttack, $01
00084B50 E108                       	smpsAlterNote       $08
00084B52 E701                       	dc.b	smpsNoAttack, $01
00084B54 E102                       	smpsAlterNote       $02
00084B56 E701                       	dc.b	smpsNoAttack, $01
00084B58 E101                       	smpsAlterNote       $01
00084B5A E701                       	dc.b	smpsNoAttack, $01
00084B5C E105                       	smpsAlterNote       $05
00084B5E E701                       	dc.b	smpsNoAttack, $01
00084B60 E10B                       	smpsAlterNote       $0B
00084B62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B66 E108                       	smpsAlterNote       $08
00084B68 E701                       	dc.b	smpsNoAttack, $01
00084B6A E102                       	smpsAlterNote       $02
00084B6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B70 E108                       	smpsAlterNote       $08
00084B72 E701                       	dc.b	smpsNoAttack, $01
00084B74 E10B                       	smpsAlterNote       $0B
00084B76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B7A E105                       	smpsAlterNote       $05
00084B7C E701                       	dc.b	smpsNoAttack, $01
00084B7E E101                       	smpsAlterNote       $01
00084B80 E701                       	dc.b	smpsNoAttack, $01
00084B82 E102                       	smpsAlterNote       $02
00084B84 E701                       	dc.b	smpsNoAttack, $01
00084B86 E108                       	smpsAlterNote       $08
00084B88 E701                       	dc.b	smpsNoAttack, $01
00084B8A E10C                       	smpsAlterNote       $0C
00084B8C E701                       	dc.b	smpsNoAttack, $01
00084B8E E108                       	smpsAlterNote       $08
00084B90 E701                       	dc.b	smpsNoAttack, $01
00084B92 E105                       	smpsAlterNote       $05
00084B94 E701                       	dc.b	smpsNoAttack, $01
00084B96 E101                       	smpsAlterNote       $01
00084B98 E701                       	dc.b	smpsNoAttack, $01
00084B9A E105                       	smpsAlterNote       $05
00084B9C E701                       	dc.b	smpsNoAttack, $01
00084B9E E10B                       	smpsAlterNote       $0B
00084BA0 E701                       	dc.b	smpsNoAttack, $01
00084BA2 E10C                       	smpsAlterNote       $0C
00084BA4 E701                       	dc.b	smpsNoAttack, $01
00084BA6 E108                       	smpsAlterNote       $08
00084BA8 E701                       	dc.b	smpsNoAttack, $01
00084BAA E102                       	smpsAlterNote       $02
00084BAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BB0 E108                       	smpsAlterNote       $08
00084BB2 E701                       	dc.b	smpsNoAttack, $01
00084BB4 E10B                       	smpsAlterNote       $0B
00084BB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BBA E105                       	smpsAlterNote       $05
00084BBC E701                       	dc.b	smpsNoAttack, $01
00084BBE E101                       	smpsAlterNote       $01
00084BC0 E701                       	dc.b	smpsNoAttack, $01
00084BC2 E102                       	smpsAlterNote       $02
00084BC4 E701                       	dc.b	smpsNoAttack, $01
00084BC6 E108                       	smpsAlterNote       $08
00084BC8 E701                       	dc.b	smpsNoAttack, $01
00084BCA E10C                       	smpsAlterNote       $0C
00084BCC E701                       	dc.b	smpsNoAttack, $01
00084BCE E108                       	smpsAlterNote       $08
00084BD0 E701                       	dc.b	smpsNoAttack, $01
00084BD2 E105                       	smpsAlterNote       $05
00084BD4 E701                       	dc.b	smpsNoAttack, $01
00084BD6 E101                       	smpsAlterNote       $01
00084BD8 E701                       	dc.b	smpsNoAttack, $01
00084BDA E105                       	smpsAlterNote       $05
00084BDC E701                       	dc.b	smpsNoAttack, $01
00084BDE E10B                       	smpsAlterNote       $0B
00084BE0 E701                       	dc.b	smpsNoAttack, $01
00084BE2 E10C                       	smpsAlterNote       $0C
00084BE4 E701                       	dc.b	smpsNoAttack, $01
00084BE6 E108                       	smpsAlterNote       $08
00084BE8 E701                       	dc.b	smpsNoAttack, $01
00084BEA E102                       	smpsAlterNote       $02
00084BEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BF0 E105                       	smpsAlterNote       $05
00084BF2 E701                       	dc.b	smpsNoAttack, $01
00084BF4 E10B                       	smpsAlterNote       $0B
00084BF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BFA E105                       	smpsAlterNote       $05
00084BFC E701                       	dc.b	smpsNoAttack, $01
00084BFE E102                       	smpsAlterNote       $02
00084C00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C04 E108                       	smpsAlterNote       $08
00084C06 E701                       	dc.b	smpsNoAttack, $01
00084C08 E10C                       	smpsAlterNote       $0C
00084C0A E701                       	dc.b	smpsNoAttack, $01
00084C0C E10B                       	smpsAlterNote       $0B
00084C0E E701                       	dc.b	smpsNoAttack, $01
00084C10 E105                       	smpsAlterNote       $05
00084C12 E701                       	dc.b	smpsNoAttack, $01
00084C14 E101                       	smpsAlterNote       $01
00084C16 E701                       	dc.b	smpsNoAttack, $01
00084C18 E105                       	smpsAlterNote       $05
00084C1A E701                       	dc.b	smpsNoAttack, $01
00084C1C E108                       	smpsAlterNote       $08
00084C1E E701                       	dc.b	smpsNoAttack, $01
00084C20 E10C                       	smpsAlterNote       $0C
00084C22 E701                       	dc.b	smpsNoAttack, $01
00084C24 E108                       	smpsAlterNote       $08
00084C26 E701                       	dc.b	smpsNoAttack, $01
00084C28 E102                       	smpsAlterNote       $02
00084C2A E701                       	dc.b	smpsNoAttack, $01
00084C2C E101                       	smpsAlterNote       $01
00084C2E E701                       	dc.b	smpsNoAttack, $01
00084C30 E105                       	smpsAlterNote       $05
00084C32 E701                       	dc.b	smpsNoAttack, $01
00084C34 E10B                       	smpsAlterNote       $0B
00084C36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C3A E108                       	smpsAlterNote       $08
00084C3C E701                       	dc.b	smpsNoAttack, $01
00084C3E E102                       	smpsAlterNote       $02
00084C40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C44 E108                       	smpsAlterNote       $08
00084C46 E701                       	dc.b	smpsNoAttack, $01
00084C48 E10B                       	smpsAlterNote       $0B
00084C4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C4E E105                       	smpsAlterNote       $05
00084C50 E701                       	dc.b	smpsNoAttack, $01
00084C52 E102                       	smpsAlterNote       $02
00084C54 8001                       	dc.b	nRst, $01
00084C56 E107                       	smpsAlterNote       $07
00084C58 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00084C5C E108                       	smpsAlterNote       $08
00084C5E C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00084C62 E102                       	smpsAlterNote       $02
00084C64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C68 E108                       	smpsAlterNote       $08
00084C6A E701                       	dc.b	smpsNoAttack, $01
00084C6C E10B                       	smpsAlterNote       $0B
00084C6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C72 E105                       	smpsAlterNote       $05
00084C74 E701                       	dc.b	smpsNoAttack, $01
00084C76 E101                       	smpsAlterNote       $01
00084C78 E701                       	dc.b	smpsNoAttack, $01
00084C7A E102                       	smpsAlterNote       $02
00084C7C E701                       	dc.b	smpsNoAttack, $01
00084C7E E108                       	smpsAlterNote       $08
00084C80 E701                       	dc.b	smpsNoAttack, $01
00084C82 E10C                       	smpsAlterNote       $0C
00084C84 E701                       	dc.b	smpsNoAttack, $01
00084C86 E108                       	smpsAlterNote       $08
00084C88 E701                       	dc.b	smpsNoAttack, $01
00084C8A E105                       	smpsAlterNote       $05
00084C8C E701                       	dc.b	smpsNoAttack, $01
00084C8E E101                       	smpsAlterNote       $01
00084C90 E701                       	dc.b	smpsNoAttack, $01
00084C92 E105                       	smpsAlterNote       $05
00084C94 E701                       	dc.b	smpsNoAttack, $01
00084C96 E10B                       	smpsAlterNote       $0B
00084C98 E701                       	dc.b	smpsNoAttack, $01
00084C9A E10C                       	smpsAlterNote       $0C
00084C9C E701                       	dc.b	smpsNoAttack, $01
00084C9E E108                       	smpsAlterNote       $08
00084CA0 E701                       	dc.b	smpsNoAttack, $01
00084CA2 E102                       	smpsAlterNote       $02
00084CA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CA8 E105                       	smpsAlterNote       $05
00084CAA E701                       	dc.b	smpsNoAttack, $01
00084CAC E10B                       	smpsAlterNote       $0B
00084CAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CB2 E105                       	smpsAlterNote       $05
00084CB4 E701                       	dc.b	smpsNoAttack, $01
00084CB6 E102                       	smpsAlterNote       $02
00084CB8 E701                       	dc.b	smpsNoAttack, $01
00084CBA E109                       	smpsAlterNote       $09
00084CBC C40A C207                  	dc.b	nG5, $0A, nF5, $07
00084CC0 E108                       	smpsAlterNote       $08
00084CC2 C10D                       	dc.b	nE5, $0D
00084CC4 E105                       	smpsAlterNote       $05
00084CC6 E701                       	dc.b	smpsNoAttack, $01
00084CC8 E101                       	smpsAlterNote       $01
00084CCA E701                       	dc.b	smpsNoAttack, $01
00084CCC E102                       	smpsAlterNote       $02
00084CCE E701                       	dc.b	smpsNoAttack, $01
00084CD0 E108                       	smpsAlterNote       $08
00084CD2 E701                       	dc.b	smpsNoAttack, $01
00084CD4 E10C                       	smpsAlterNote       $0C
00084CD6 E701                       	dc.b	smpsNoAttack, $01
00084CD8 E108                       	smpsAlterNote       $08
00084CDA E701                       	dc.b	smpsNoAttack, $01
00084CDC E105                       	smpsAlterNote       $05
00084CDE E701                       	dc.b	smpsNoAttack, $01
00084CE0 E101                       	smpsAlterNote       $01
00084CE2 E701                       	dc.b	smpsNoAttack, $01
00084CE4 E105                       	smpsAlterNote       $05
00084CE6 E701                       	dc.b	smpsNoAttack, $01
00084CE8 E10B                       	smpsAlterNote       $0B
00084CEA E701                       	dc.b	smpsNoAttack, $01
00084CEC E10C                       	smpsAlterNote       $0C
00084CEE E701                       	dc.b	smpsNoAttack, $01
00084CF0 E108                       	smpsAlterNote       $08
00084CF2 E701                       	dc.b	smpsNoAttack, $01
00084CF4 E102                       	smpsAlterNote       $02
00084CF6 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00084CFE E10B                       	smpsAlterNote       $0B
00084D00 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00084D04 E10C                       	smpsAlterNote       $0C
00084D06 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00084D0A E10B                       	smpsAlterNote       $0B
00084D0C BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00084D12 E107                       	smpsAlterNote       $07
00084D14 BF03                       	dc.b	nD5, $03
00084D16 E108                       	smpsAlterNote       $08
00084D18 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084D1C E109                       	smpsAlterNote       $09
00084D1E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00084D24 E10B                       	smpsAlterNote       $0B
00084D26 C606 8001                  	dc.b	nA5, $06, nRst, $01
00084D2A E107                       	smpsAlterNote       $07
00084D2C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00084D30 E106                       	smpsAlterNote       $06
00084D32 C90D                       	dc.b	nC6, $0D
00084D34 E103                       	smpsAlterNote       $03
00084D36 E701                       	dc.b	smpsNoAttack, $01
00084D38 E1FF                       	smpsAlterNote       $FF
00084D3A E701                       	dc.b	smpsNoAttack, $01
00084D3C E103                       	smpsAlterNote       $03
00084D3E E701                       	dc.b	smpsNoAttack, $01
00084D40 E109                       	smpsAlterNote       $09
00084D42 E701                       	dc.b	smpsNoAttack, $01
00084D44 E10A                       	smpsAlterNote       $0A
00084D46 E701                       	dc.b	smpsNoAttack, $01
00084D48 E106                       	smpsAlterNote       $06
00084D4A E701                       	dc.b	smpsNoAttack, $01
00084D4C E100                       	smpsAlterNote       $00
00084D4E E701                       	dc.b	smpsNoAttack, $01
00084D50 E10C                       	smpsAlterNote       $0C
00084D52 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00084D56 E10B                       	smpsAlterNote       $0B
00084D58 C603                       	dc.b	nA5, $03
00084D5A E109                       	smpsAlterNote       $09
00084D5C C403 8001                  	dc.b	nG5, $03, nRst, $01
00084D60 E10B                       	smpsAlterNote       $0B
00084D62 C60D                       	dc.b	nA5, $0D
00084D64 E105                       	smpsAlterNote       $05
00084D66 E701                       	dc.b	smpsNoAttack, $01
00084D68 E104                       	smpsAlterNote       $04
00084D6A E701                       	dc.b	smpsNoAttack, $01
00084D6C E108                       	smpsAlterNote       $08
00084D6E E701                       	dc.b	smpsNoAttack, $01
00084D70 E10E                       	smpsAlterNote       $0E
00084D72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D76 E10B                       	smpsAlterNote       $0B
00084D78 E701                       	dc.b	smpsNoAttack, $01
00084D7A E105                       	smpsAlterNote       $05
00084D7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D80 E10B                       	smpsAlterNote       $0B
00084D82 E701                       	dc.b	smpsNoAttack, $01
00084D84 E10E                       	smpsAlterNote       $0E
00084D86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D8A E108                       	smpsAlterNote       $08
00084D8C E701                       	dc.b	smpsNoAttack, $01
00084D8E E104                       	smpsAlterNote       $04
00084D90 E701                       	dc.b	smpsNoAttack, $01
00084D92 E105                       	smpsAlterNote       $05
00084D94 E701                       	dc.b	smpsNoAttack, $01
00084D96 E10B                       	smpsAlterNote       $0B
00084D98 E701                       	dc.b	smpsNoAttack, $01
00084D9A E10F                       	smpsAlterNote       $0F
00084D9C E701                       	dc.b	smpsNoAttack, $01
00084D9E E10B                       	smpsAlterNote       $0B
00084DA0 E701                       	dc.b	smpsNoAttack, $01
00084DA2 E108                       	smpsAlterNote       $08
00084DA4 E701                       	dc.b	smpsNoAttack, $01
00084DA6 E104                       	smpsAlterNote       $04
00084DA8 E701                       	dc.b	smpsNoAttack, $01
00084DAA E108                       	smpsAlterNote       $08
00084DAC E701                       	dc.b	smpsNoAttack, $01
00084DAE E10E                       	smpsAlterNote       $0E
00084DB0 E701                       	dc.b	smpsNoAttack, $01
00084DB2 E10F                       	smpsAlterNote       $0F
00084DB4 E701                       	dc.b	smpsNoAttack, $01
00084DB6 E10B                       	smpsAlterNote       $0B
00084DB8 E701                       	dc.b	smpsNoAttack, $01
00084DBA E105                       	smpsAlterNote       $05
00084DBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DC0 E108                       	smpsAlterNote       $08
00084DC2 E701                       	dc.b	smpsNoAttack, $01
00084DC4 E10E                       	smpsAlterNote       $0E
00084DC6 E701                       	dc.b	smpsNoAttack, $01
00084DC8 E10F                       	smpsAlterNote       $0F
00084DCA 800F                       	dc.b	nRst, $0F
00084DCC E107                       	smpsAlterNote       $07
00084DCE BF02 8001                  	dc.b	nD5, $02, nRst, $01
00084DD2 E108                       	smpsAlterNote       $08
00084DD4 C103                       	dc.b	nE5, $03
00084DD6 E109                       	smpsAlterNote       $09
00084DD8 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00084DDE E10B                       	smpsAlterNote       $0B
00084DE0 C607                       	dc.b	nA5, $07
00084DE2 E107                       	smpsAlterNote       $07
00084DE4 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00084DE8 E106                       	smpsAlterNote       $06
00084DEA C90D                       	dc.b	nC6, $0D
00084DEC E107                       	smpsAlterNote       $07
00084DEE CB03 8001                  	dc.b	nD6, $03, nRst, $01
00084DF2 E10C                       	smpsAlterNote       $0C
00084DF4 C704                       	dc.b	nBb5, $04
00084DF6 E10B                       	smpsAlterNote       $0B
00084DF8 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084DFC E109                       	smpsAlterNote       $09
00084DFE C404                       	dc.b	nG5, $04
00084E00 E10B                       	smpsAlterNote       $0B
00084E02 C60D                       	dc.b	nA5, $0D
00084E04 E108                       	smpsAlterNote       $08
00084E06 E701                       	dc.b	smpsNoAttack, $01
00084E08 E105                       	smpsAlterNote       $05
00084E0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E0E E10B                       	smpsAlterNote       $0B
00084E10 E701                       	dc.b	smpsNoAttack, $01
00084E12 E10F                       	smpsAlterNote       $0F
00084E14 E701                       	dc.b	smpsNoAttack, $01
00084E16 E10E                       	smpsAlterNote       $0E
00084E18 E701                       	dc.b	smpsNoAttack, $01
00084E1A E108                       	smpsAlterNote       $08
00084E1C E701                       	dc.b	smpsNoAttack, $01
00084E1E E104                       	smpsAlterNote       $04
00084E20 E701                       	dc.b	smpsNoAttack, $01
00084E22 E108                       	smpsAlterNote       $08
00084E24 E701                       	dc.b	smpsNoAttack, $01
00084E26 E10B                       	smpsAlterNote       $0B
00084E28 E701                       	dc.b	smpsNoAttack, $01
00084E2A E10F                       	smpsAlterNote       $0F
00084E2C E701                       	dc.b	smpsNoAttack, $01
00084E2E E10B                       	smpsAlterNote       $0B
00084E30 E701                       	dc.b	smpsNoAttack, $01
00084E32 E105                       	smpsAlterNote       $05
00084E34 E701                       	dc.b	smpsNoAttack, $01
00084E36 E104                       	smpsAlterNote       $04
00084E38 E701                       	dc.b	smpsNoAttack, $01
00084E3A E108                       	smpsAlterNote       $08
00084E3C E701                       	dc.b	smpsNoAttack, $01
00084E3E E10E                       	smpsAlterNote       $0E
00084E40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E44 E10B                       	smpsAlterNote       $0B
00084E46 E701                       	dc.b	smpsNoAttack, $01
00084E48 E105                       	smpsAlterNote       $05
00084E4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E4E E10B                       	smpsAlterNote       $0B
00084E50 E701                       	dc.b	smpsNoAttack, $01
00084E52 E10E                       	smpsAlterNote       $0E
00084E54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E58 E108                       	smpsAlterNote       $08
00084E5A E701                       	dc.b	smpsNoAttack, $01
00084E5C E105                       	smpsAlterNote       $05
00084E5E 8001                       	dc.b	nRst, $01
00084E60 E109                       	smpsAlterNote       $09
00084E62 C401 8001                  	dc.b	nG5, $01, nRst, $01
00084E66 E10B                       	smpsAlterNote       $0B
00084E68 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00084E70 E109                       	smpsAlterNote       $09
00084E72 C404                       	dc.b	nG5, $04
00084E74 E10B                       	smpsAlterNote       $0B
00084E76 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084E7A E107                       	smpsAlterNote       $07
00084E7C BF0D                       	dc.b	nD5, $0D
00084E7E E101                       	smpsAlterNote       $01
00084E80 E701                       	dc.b	smpsNoAttack, $01
00084E82 E100                       	smpsAlterNote       $00
00084E84 E701                       	dc.b	smpsNoAttack, $01
00084E86 E104                       	smpsAlterNote       $04
00084E88 E701                       	dc.b	smpsNoAttack, $01
00084E8A E10A                       	smpsAlterNote       $0A
00084E8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E90 E107                       	smpsAlterNote       $07
00084E92 E701                       	dc.b	smpsNoAttack, $01
00084E94 E101                       	smpsAlterNote       $01
00084E96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E9A E107                       	smpsAlterNote       $07
00084E9C E701                       	dc.b	smpsNoAttack, $01
00084E9E E10A                       	smpsAlterNote       $0A
00084EA0 E701                       	dc.b	smpsNoAttack, $01
00084EA2 E10B                       	smpsAlterNote       $0B
00084EA4 8001                       	dc.b	nRst, $01
00084EA6 E108                       	smpsAlterNote       $08
00084EA8 8001                       	dc.b	nRst, $01
00084EAA E109                       	smpsAlterNote       $09
00084EAC 8001 C401                  	dc.b	nRst, $01, nG5, $01
00084EB0 E10B                       	smpsAlterNote       $0B
00084EB2 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00084EBA E108                       	smpsAlterNote       $08
00084EBC CD06 8001                  	dc.b	nE6, $06, nRst, $01
00084EC0 E109                       	smpsAlterNote       $09
00084EC2 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00084EC6 E108                       	smpsAlterNote       $08
00084EC8 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00084ECC E106                       	smpsAlterNote       $06
00084ECE C903                       	dc.b	nC6, $03
00084ED0 E109                       	smpsAlterNote       $09
00084ED2 C403 8001                  	dc.b	nG5, $03, nRst, $01
00084ED6 E10C                       	smpsAlterNote       $0C
00084ED8 C70D                       	dc.b	nBb5, $0D
00084EDA E109                       	smpsAlterNote       $09
00084EDC E701                       	dc.b	smpsNoAttack, $01
00084EDE E105                       	smpsAlterNote       $05
00084EE0 E701                       	dc.b	smpsNoAttack, $01
00084EE2 E109                       	smpsAlterNote       $09
00084EE4 E701                       	dc.b	smpsNoAttack, $01
00084EE6 E10F                       	smpsAlterNote       $0F
00084EE8 E701                       	dc.b	smpsNoAttack, $01
00084EEA E110                       	smpsAlterNote       $10
00084EEC E701                       	dc.b	smpsNoAttack, $01
00084EEE E10C                       	smpsAlterNote       $0C
00084EF0 E701                       	dc.b	smpsNoAttack, $01
00084EF2 E106                       	smpsAlterNote       $06
00084EF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084EF8 E109                       	smpsAlterNote       $09
00084EFA E701                       	dc.b	smpsNoAttack, $01
00084EFC E10F                       	smpsAlterNote       $0F
00084EFE E701                       	dc.b	smpsNoAttack, $01
00084F00 E110                       	smpsAlterNote       $10
00084F02 8001                       	dc.b	nRst, $01
00084F04 E10B                       	smpsAlterNote       $0B
00084F06 C606 8001                  	dc.b	nA5, $06, nRst, $01
00084F0A E109                       	smpsAlterNote       $09
00084F0C C40D                       	dc.b	nG5, $0D
00084F0E E103                       	smpsAlterNote       $03
00084F10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F14 E106                       	smpsAlterNote       $06
00084F16 E701                       	dc.b	smpsNoAttack, $01
00084F18 E10C                       	smpsAlterNote       $0C
00084F1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F1E E106                       	smpsAlterNote       $06
00084F20 E701                       	dc.b	smpsNoAttack, $01
00084F22 E103                       	smpsAlterNote       $03
00084F24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F28 E109                       	smpsAlterNote       $09
00084F2A E701                       	dc.b	smpsNoAttack, $01
00084F2C E10D                       	smpsAlterNote       $0D
00084F2E E701                       	dc.b	smpsNoAttack, $01
00084F30 E10C                       	smpsAlterNote       $0C
00084F32 E701                       	dc.b	smpsNoAttack, $01
00084F34 E106                       	smpsAlterNote       $06
00084F36 E701                       	dc.b	smpsNoAttack, $01
00084F38 E102                       	smpsAlterNote       $02
00084F3A E701                       	dc.b	smpsNoAttack, $01
00084F3C E103                       	smpsAlterNote       $03
00084F3E 8001                       	dc.b	nRst, $01
00084F40 E10B                       	smpsAlterNote       $0B
00084F42 C60D                       	dc.b	nA5, $0D
00084F44 E108                       	smpsAlterNote       $08
00084F46 E701                       	dc.b	smpsNoAttack, $01
00084F48 E104                       	smpsAlterNote       $04
00084F4A E701                       	dc.b	smpsNoAttack, $01
00084F4C E108                       	smpsAlterNote       $08
00084F4E E701                       	dc.b	smpsNoAttack, $01
00084F50 E10B                       	smpsAlterNote       $0B
00084F52 E701                       	dc.b	smpsNoAttack, $01
00084F54 E10F                       	smpsAlterNote       $0F
00084F56 E701                       	dc.b	smpsNoAttack, $01
00084F58 E10B                       	smpsAlterNote       $0B
00084F5A E701                       	dc.b	smpsNoAttack, $01
00084F5C E105                       	smpsAlterNote       $05
00084F5E E701                       	dc.b	smpsNoAttack, $01
00084F60 E104                       	smpsAlterNote       $04
00084F62 E701                       	dc.b	smpsNoAttack, $01
00084F64 E108                       	smpsAlterNote       $08
00084F66 E701                       	dc.b	smpsNoAttack, $01
00084F68 E10E                       	smpsAlterNote       $0E
00084F6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F6E E10B                       	smpsAlterNote       $0B
00084F70 E701                       	dc.b	smpsNoAttack, $01
00084F72 E105                       	smpsAlterNote       $05
00084F74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F78 E10C                       	smpsAlterNote       $0C
00084F7A C70E                       	dc.b	nBb5, $0E
00084F7C E106                       	smpsAlterNote       $06
00084F7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F82 E10C                       	smpsAlterNote       $0C
00084F84 E701                       	dc.b	smpsNoAttack, $01
00084F86 E10F                       	smpsAlterNote       $0F
00084F88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F8C E109                       	smpsAlterNote       $09
00084F8E E701                       	dc.b	smpsNoAttack, $01
00084F90 E105                       	smpsAlterNote       $05
00084F92 E701                       	dc.b	smpsNoAttack, $01
00084F94 E106                       	smpsAlterNote       $06
00084F96 E701                       	dc.b	smpsNoAttack, $01
00084F98 E10C                       	smpsAlterNote       $0C
00084F9A E701                       	dc.b	smpsNoAttack, $01
00084F9C E110                       	smpsAlterNote       $10
00084F9E E701                       	dc.b	smpsNoAttack, $01
00084FA0 E10C                       	smpsAlterNote       $0C
00084FA2 E701                       	dc.b	smpsNoAttack, $01
00084FA4 E109                       	smpsAlterNote       $09
00084FA6 E701                       	dc.b	smpsNoAttack, $01
00084FA8 E105                       	smpsAlterNote       $05
00084FAA E701                       	dc.b	smpsNoAttack, $01
00084FAC E106                       	smpsAlterNote       $06
00084FAE 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00084FB2 E107                       	smpsAlterNote       $07
00084FB4 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00084FB9 E108                       	smpsAlterNote       $08
00084FBB CD0D                       	dc.b	nE6, $0D
00084FBD E107                       	smpsAlterNote       $07
00084FBF CB0D                       	dc.b	nD6, $0D
00084FC1 E104                       	smpsAlterNote       $04
00084FC3 E701                       	dc.b	smpsNoAttack, $01
00084FC5 E100                       	smpsAlterNote       $00
00084FC7 E701                       	dc.b	smpsNoAttack, $01
00084FC9 E101                       	smpsAlterNote       $01
00084FCB E701                       	dc.b	smpsNoAttack, $01
00084FCD E107                       	smpsAlterNote       $07
00084FCF E701                       	dc.b	smpsNoAttack, $01
00084FD1 E10B                       	smpsAlterNote       $0B
00084FD3 E701                       	dc.b	smpsNoAttack, $01
00084FD5 E107                       	smpsAlterNote       $07
00084FD7 E701                       	dc.b	smpsNoAttack, $01
00084FD9 E104                       	smpsAlterNote       $04
00084FDB E701                       	dc.b	smpsNoAttack, $01
00084FDD E100                       	smpsAlterNote       $00
00084FDF E701                       	dc.b	smpsNoAttack, $01
00084FE1 E104                       	smpsAlterNote       $04
00084FE3 E701                       	dc.b	smpsNoAttack, $01
00084FE5 E10A                       	smpsAlterNote       $0A
00084FE7 E701                       	dc.b	smpsNoAttack, $01
00084FE9 E10B                       	smpsAlterNote       $0B
00084FEB E701                       	dc.b	smpsNoAttack, $01
00084FED E108                       	smpsAlterNote       $08
00084FEF CC0D                       	dc.b	nEb6, $0D
00084FF1 E105                       	smpsAlterNote       $05
00084FF3 E701                       	dc.b	smpsNoAttack, $01
00084FF5 E101                       	smpsAlterNote       $01
00084FF7 E701                       	dc.b	smpsNoAttack, $01
00084FF9 E102                       	smpsAlterNote       $02
00084FFB E701                       	dc.b	smpsNoAttack, $01
00084FFD E108                       	smpsAlterNote       $08
00084FFF E701                       	dc.b	smpsNoAttack, $01
00085001 E106                       	smpsAlterNote       $06
00085003 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008500F 8001                       	dc.b	nRst, $01
00085011 E107                       	smpsAlterNote       $07
00085013 CB0D                       	dc.b	nD6, $0D
00085015 E104                       	smpsAlterNote       $04
00085017 E701                       	dc.b	smpsNoAttack, $01
00085019 E100                       	smpsAlterNote       $00
0008501B E701                       	dc.b	smpsNoAttack, $01
0008501D E104                       	smpsAlterNote       $04
0008501F E701                       	dc.b	smpsNoAttack, $01
00085021 E107                       	smpsAlterNote       $07
00085023 E701                       	dc.b	smpsNoAttack, $01
00085025 E10B                       	smpsAlterNote       $0B
00085027 E701                       	dc.b	smpsNoAttack, $01
00085029 E107                       	smpsAlterNote       $07
0008502B E701                       	dc.b	smpsNoAttack, $01
0008502D E101                       	smpsAlterNote       $01
0008502F E701                       	dc.b	smpsNoAttack, $01
00085031 E100                       	smpsAlterNote       $00
00085033 E701                       	dc.b	smpsNoAttack, $01
00085035 E104                       	smpsAlterNote       $04
00085037 E701                       	dc.b	smpsNoAttack, $01
00085039 E10A                       	smpsAlterNote       $0A
0008503B E701                       	dc.b	smpsNoAttack, $01
0008503D E10B                       	smpsAlterNote       $0B
0008503F 8001                       	dc.b	nRst, $01
00085041 E109                       	smpsAlterNote       $09
00085043 CE0A                       	dc.b	nF6, $0A
00085045 E108                       	smpsAlterNote       $08
00085047 CC07                       	dc.b	nEb6, $07
00085049 E106                       	smpsAlterNote       $06
0008504B C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00085057 E107                       	smpsAlterNote       $07
00085059 CB0D                       	dc.b	nD6, $0D
0008505B E101                       	smpsAlterNote       $01
0008505D E701                       	dc.b	smpsNoAttack, $01
0008505F E100                       	smpsAlterNote       $00
00085061 E701                       	dc.b	smpsNoAttack, $01
00085063 E104                       	smpsAlterNote       $04
00085065 E701                       	dc.b	smpsNoAttack, $01
00085067 E10A                       	smpsAlterNote       $0A
00085069 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008506D E107                       	smpsAlterNote       $07
0008506F E701                       	dc.b	smpsNoAttack, $01
00085071 E101                       	smpsAlterNote       $01
00085073 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085077 E107                       	smpsAlterNote       $07
00085079 E701                       	dc.b	smpsNoAttack, $01
0008507B E10A                       	smpsAlterNote       $0A
0008507D E701                       	dc.b	smpsNoAttack, $01
0008507F E10B                       	smpsAlterNote       $0B
00085081 8001                       	dc.b	nRst, $01
00085083 E108                       	smpsAlterNote       $08
00085085 CC0D                       	dc.b	nEb6, $0D
00085087 E102                       	smpsAlterNote       $02
00085089 E701                       	dc.b	smpsNoAttack, $01
0008508B E101                       	smpsAlterNote       $01
0008508D E701                       	dc.b	smpsNoAttack, $01
0008508F E105                       	smpsAlterNote       $05
00085091 E701                       	dc.b	smpsNoAttack, $01
00085093 E108                       	smpsAlterNote       $08
00085095 8001                       	dc.b	nRst, $01
00085097 E106                       	smpsAlterNote       $06
00085099 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000850A5 8001                       	dc.b	nRst, $01
000850A7 E107                       	smpsAlterNote       $07
000850A9 CB0D                       	dc.b	nD6, $0D
000850AB E101                       	smpsAlterNote       $01
000850AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850B1 E104                       	smpsAlterNote       $04
000850B3 E701                       	dc.b	smpsNoAttack, $01
000850B5 E10A                       	smpsAlterNote       $0A
000850B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850BB E104                       	smpsAlterNote       $04
000850BD E701                       	dc.b	smpsNoAttack, $01
000850BF E101                       	smpsAlterNote       $01
000850C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850C5 E107                       	smpsAlterNote       $07
000850C7 E701                       	dc.b	smpsNoAttack, $01
000850C9 E10B                       	smpsAlterNote       $0B
000850CB E701                       	dc.b	smpsNoAttack, $01
000850CD E10A                       	smpsAlterNote       $0A
000850CF E701                       	dc.b	smpsNoAttack, $01
000850D1 E104                       	smpsAlterNote       $04
000850D3 E701                       	dc.b	smpsNoAttack, $01
000850D5 E100                       	smpsAlterNote       $00
000850D7 E701                       	dc.b	smpsNoAttack, $01
000850D9 E101                       	smpsAlterNote       $01
000850DB 801C                       	dc.b	nRst, $1C
000850DF E107                       	smpsAlterNote       $07
000850E1 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000850E5 E603                       	smpsAlterVol        $03
000850E7 F6F1 AD                    	smpsJump            music84_Jump03
000850EA                            
000850EA                            ; FM3 Data
000850EA                            music84_FM3:
000850EA E0C0                       	smpsPan             panCenter, $00
000850EE E109                       	smpsAlterNote       $09
000850F0 C203 8007                  	dc.b	nF5, $03, nRst, $07
000850F4 E108                       	smpsAlterNote       $08
000850F6 C103 800B                  	dc.b	nE5, $03, nRst, $0B
000850FA E10B                       	smpsAlterNote       $0B
000850FC BA03 8006                  	dc.b	nA4, $03, nRst, $06
00085102 E040                       	smpsPan             panRight, $00
00085104 E110                       	smpsAlterNote       $10
00085106 E6F9                       	smpsAlterVol        $F9
00085108 C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008510C E10F                       	smpsAlterNote       $0F
0008510E C603                       	dc.b	nA5, $03
00085110 E10D                       	smpsAlterNote       $0D
00085112 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00085118 E10C                       	smpsAlterNote       $0C
0008511A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008511E E10A                       	smpsAlterNote       $0A
00085120 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00085124 E10F                       	smpsAlterNote       $0F
00085126 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008512A E0C0                       	smpsPan             panCenter, $00
0008512E E109                       	smpsAlterNote       $09
00085130 E609                       	smpsAlterVol        $09
00085132 B603                       	dc.b	nF4, $03
00085134                            
00085134                            music84_Jump02:
00085134 E70A                       	dc.b	smpsNoAttack, $0A
00085136 E103                       	smpsAlterNote       $03
00085138 E701                       	dc.b	smpsNoAttack, $01
0008513A E102                       	smpsAlterNote       $02
0008513C E701                       	dc.b	smpsNoAttack, $01
0008513E E106                       	smpsAlterNote       $06
00085140 E701                       	dc.b	smpsNoAttack, $01
00085142 E10C                       	smpsAlterNote       $0C
00085144 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085148 E109                       	smpsAlterNote       $09
0008514A E701                       	dc.b	smpsNoAttack, $01
0008514C E103                       	smpsAlterNote       $03
0008514E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085152 E109                       	smpsAlterNote       $09
00085154 E701                       	dc.b	smpsNoAttack, $01
00085156 E10C                       	smpsAlterNote       $0C
00085158 E701                       	dc.b	smpsNoAttack, $01
0008515A E10D                       	smpsAlterNote       $0D
0008515C 8001                       	dc.b	nRst, $01
0008515E E109                       	smpsAlterNote       $09
00085160 B80D                       	dc.b	nG4, $0D
00085162 E103                       	smpsAlterNote       $03
00085164 E701                       	dc.b	smpsNoAttack, $01
00085166 E102                       	smpsAlterNote       $02
00085168 E701                       	dc.b	smpsNoAttack, $01
0008516A E106                       	smpsAlterNote       $06
0008516C E701                       	dc.b	smpsNoAttack, $01
0008516E E10C                       	smpsAlterNote       $0C
00085170 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085174 E109                       	smpsAlterNote       $09
00085176 E701                       	dc.b	smpsNoAttack, $01
00085178 E103                       	smpsAlterNote       $03
0008517A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008517E E109                       	smpsAlterNote       $09
00085180 E701                       	dc.b	smpsNoAttack, $01
00085182 E10C                       	smpsAlterNote       $0C
00085184 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085188 E106                       	smpsAlterNote       $06
0008518A E701                       	dc.b	smpsNoAttack, $01
0008518C E102                       	smpsAlterNote       $02
0008518E E701                       	dc.b	smpsNoAttack, $01
00085190 E103                       	smpsAlterNote       $03
00085192 E701                       	dc.b	smpsNoAttack, $01
00085194 E109                       	smpsAlterNote       $09
00085196 E701                       	dc.b	smpsNoAttack, $01
00085198 E10D                       	smpsAlterNote       $0D
0008519A E701                       	dc.b	smpsNoAttack, $01
0008519C E109                       	smpsAlterNote       $09
0008519E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000851A2 E10B                       	smpsAlterNote       $0B
000851A4 BA0D                       	dc.b	nA4, $0D
000851A6 E105                       	smpsAlterNote       $05
000851A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851AC E108                       	smpsAlterNote       $08
000851AE E701                       	dc.b	smpsNoAttack, $01
000851B0 E10E                       	smpsAlterNote       $0E
000851B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851B6 E108                       	smpsAlterNote       $08
000851B8 E701                       	dc.b	smpsNoAttack, $01
000851BA E104                       	smpsAlterNote       $04
000851BC E701                       	dc.b	smpsNoAttack, $01
000851BE E105                       	smpsAlterNote       $05
000851C0 E701                       	dc.b	smpsNoAttack, $01
000851C2 E10B                       	smpsAlterNote       $0B
000851C4 E701                       	dc.b	smpsNoAttack, $01
000851C6 E10F                       	smpsAlterNote       $0F
000851C8 E701                       	dc.b	smpsNoAttack, $01
000851CA E10B                       	smpsAlterNote       $0B
000851CC E701                       	dc.b	smpsNoAttack, $01
000851CE E108                       	smpsAlterNote       $08
000851D0 E701                       	dc.b	smpsNoAttack, $01
000851D2 E104                       	smpsAlterNote       $04
000851D4 E701                       	dc.b	smpsNoAttack, $01
000851D6 E108                       	smpsAlterNote       $08
000851D8 E701                       	dc.b	smpsNoAttack, $01
000851DA E10E                       	smpsAlterNote       $0E
000851DC E701                       	dc.b	smpsNoAttack, $01
000851DE E10F                       	smpsAlterNote       $0F
000851E0 E701                       	dc.b	smpsNoAttack, $01
000851E2 E10B                       	smpsAlterNote       $0B
000851E4 E701                       	dc.b	smpsNoAttack, $01
000851E6 E105                       	smpsAlterNote       $05
000851E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851EC E108                       	smpsAlterNote       $08
000851EE E701                       	dc.b	smpsNoAttack, $01
000851F0 E10E                       	smpsAlterNote       $0E
000851F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851F6 E108                       	smpsAlterNote       $08
000851F8 E701                       	dc.b	smpsNoAttack, $01
000851FA E105                       	smpsAlterNote       $05
000851FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085200 E10B                       	smpsAlterNote       $0B
00085202 E701                       	dc.b	smpsNoAttack, $01
00085204 E10F                       	smpsAlterNote       $0F
00085206 E701                       	dc.b	smpsNoAttack, $01
00085208 E10E                       	smpsAlterNote       $0E
0008520A E701                       	dc.b	smpsNoAttack, $01
0008520C E108                       	smpsAlterNote       $08
0008520E E701                       	dc.b	smpsNoAttack, $01
00085210 E104                       	smpsAlterNote       $04
00085212 E701                       	dc.b	smpsNoAttack, $01
00085214 E105                       	smpsAlterNote       $05
00085216 8001                       	dc.b	nRst, $01
00085218 E108                       	smpsAlterNote       $08
0008521A B50A                       	dc.b	nE4, $0A
0008521C E109                       	smpsAlterNote       $09
0008521E B60D                       	dc.b	nF4, $0D
00085220 E106                       	smpsAlterNote       $06
00085222 E701                       	dc.b	smpsNoAttack, $01
00085224 E103                       	smpsAlterNote       $03
00085226 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008522A E109                       	smpsAlterNote       $09
0008522C E701                       	dc.b	smpsNoAttack, $01
0008522E E10D                       	smpsAlterNote       $0D
00085230 E701                       	dc.b	smpsNoAttack, $01
00085232 E10C                       	smpsAlterNote       $0C
00085234 E701                       	dc.b	smpsNoAttack, $01
00085236 E106                       	smpsAlterNote       $06
00085238 E701                       	dc.b	smpsNoAttack, $01
0008523A E102                       	smpsAlterNote       $02
0008523C E701                       	dc.b	smpsNoAttack, $01
0008523E E106                       	smpsAlterNote       $06
00085240 E701                       	dc.b	smpsNoAttack, $01
00085242 E109                       	smpsAlterNote       $09
00085244 E701                       	dc.b	smpsNoAttack, $01
00085246 E10D                       	smpsAlterNote       $0D
00085248 E701                       	dc.b	smpsNoAttack, $01
0008524A E109                       	smpsAlterNote       $09
0008524C B80D                       	dc.b	nG4, $0D
0008524E E106                       	smpsAlterNote       $06
00085250 E701                       	dc.b	smpsNoAttack, $01
00085252 E103                       	smpsAlterNote       $03
00085254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085258 E109                       	smpsAlterNote       $09
0008525A E701                       	dc.b	smpsNoAttack, $01
0008525C E10D                       	smpsAlterNote       $0D
0008525E E701                       	dc.b	smpsNoAttack, $01
00085260 E10C                       	smpsAlterNote       $0C
00085262 E701                       	dc.b	smpsNoAttack, $01
00085264 E106                       	smpsAlterNote       $06
00085266 E701                       	dc.b	smpsNoAttack, $01
00085268 E102                       	smpsAlterNote       $02
0008526A E701                       	dc.b	smpsNoAttack, $01
0008526C E106                       	smpsAlterNote       $06
0008526E E701                       	dc.b	smpsNoAttack, $01
00085270 E109                       	smpsAlterNote       $09
00085272 E701                       	dc.b	smpsNoAttack, $01
00085274 E10D                       	smpsAlterNote       $0D
00085276 E701                       	dc.b	smpsNoAttack, $01
00085278 E109                       	smpsAlterNote       $09
0008527A E701                       	dc.b	smpsNoAttack, $01
0008527C E103                       	smpsAlterNote       $03
0008527E E701                       	dc.b	smpsNoAttack, $01
00085280 E102                       	smpsAlterNote       $02
00085282 E701                       	dc.b	smpsNoAttack, $01
00085284 E106                       	smpsAlterNote       $06
00085286 E701                       	dc.b	smpsNoAttack, $01
00085288 E10C                       	smpsAlterNote       $0C
0008528A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008528E E109                       	smpsAlterNote       $09
00085290 E701                       	dc.b	smpsNoAttack, $01
00085292 E10B                       	smpsAlterNote       $0B
00085294 BA0D                       	dc.b	nA4, $0D
00085296 E108                       	smpsAlterNote       $08
00085298 E701                       	dc.b	smpsNoAttack, $01
0008529A E104                       	smpsAlterNote       $04
0008529C E701                       	dc.b	smpsNoAttack, $01
0008529E E108                       	smpsAlterNote       $08
000852A0 E701                       	dc.b	smpsNoAttack, $01
000852A2 E10B                       	smpsAlterNote       $0B
000852A4 E701                       	dc.b	smpsNoAttack, $01
000852A6 E10F                       	smpsAlterNote       $0F
000852A8 E701                       	dc.b	smpsNoAttack, $01
000852AA E10B                       	smpsAlterNote       $0B
000852AC E701                       	dc.b	smpsNoAttack, $01
000852AE E105                       	smpsAlterNote       $05
000852B0 E701                       	dc.b	smpsNoAttack, $01
000852B2 E104                       	smpsAlterNote       $04
000852B4 E701                       	dc.b	smpsNoAttack, $01
000852B6 E108                       	smpsAlterNote       $08
000852B8 E701                       	dc.b	smpsNoAttack, $01
000852BA E10E                       	smpsAlterNote       $0E
000852BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852C0 E10B                       	smpsAlterNote       $0B
000852C2 E701                       	dc.b	smpsNoAttack, $01
000852C4 E105                       	smpsAlterNote       $05
000852C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852CA E10B                       	smpsAlterNote       $0B
000852CC E701                       	dc.b	smpsNoAttack, $01
000852CE E10E                       	smpsAlterNote       $0E
000852D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852D4 E108                       	smpsAlterNote       $08
000852D6 E701                       	dc.b	smpsNoAttack, $01
000852D8 E104                       	smpsAlterNote       $04
000852DA E701                       	dc.b	smpsNoAttack, $01
000852DC E105                       	smpsAlterNote       $05
000852DE E701                       	dc.b	smpsNoAttack, $01
000852E0 E10B                       	smpsAlterNote       $0B
000852E2 E701                       	dc.b	smpsNoAttack, $01
000852E4 E10F                       	smpsAlterNote       $0F
000852E6 E701                       	dc.b	smpsNoAttack, $01
000852E8 E10B                       	smpsAlterNote       $0B
000852EA E701                       	dc.b	smpsNoAttack, $01
000852EC E108                       	smpsAlterNote       $08
000852EE E701                       	dc.b	smpsNoAttack, $01
000852F0 E105                       	smpsAlterNote       $05
000852F2 8001                       	dc.b	nRst, $01
000852F4 E109                       	smpsAlterNote       $09
000852F6 B609 8001                  	dc.b	nF4, $09, nRst, $01
000852FA E108                       	smpsAlterNote       $08
000852FC B506 8001                  	dc.b	nE4, $06, nRst, $01
00085300 E107                       	smpsAlterNote       $07
00085302 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00085306 E108                       	smpsAlterNote       $08
00085308 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008530C E109                       	smpsAlterNote       $09
0008530E B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00085314 E10B                       	smpsAlterNote       $0B
00085316 BA0D                       	dc.b	nA4, $0D
00085318 E108                       	smpsAlterNote       $08
0008531A E701                       	dc.b	smpsNoAttack, $01
0008531C E104                       	smpsAlterNote       $04
0008531E E701                       	dc.b	smpsNoAttack, $01
00085320 E108                       	smpsAlterNote       $08
00085322 E701                       	dc.b	smpsNoAttack, $01
00085324 E10E                       	smpsAlterNote       $0E
00085326 E701                       	dc.b	smpsNoAttack, $01
00085328 E10F                       	smpsAlterNote       $0F
0008532A E701                       	dc.b	smpsNoAttack, $01
0008532C E10B                       	smpsAlterNote       $0B
0008532E E701                       	dc.b	smpsNoAttack, $01
00085330 E105                       	smpsAlterNote       $05
00085332 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085336 E108                       	smpsAlterNote       $08
00085338 E701                       	dc.b	smpsNoAttack, $01
0008533A E10E                       	smpsAlterNote       $0E
0008533C E701                       	dc.b	smpsNoAttack, $01
0008533E E10F                       	smpsAlterNote       $0F
00085340 8001                       	dc.b	nRst, $01
00085342 E109                       	smpsAlterNote       $09
00085344 C20D                       	dc.b	nF5, $0D
00085346 E103                       	smpsAlterNote       $03
00085348 E701                       	dc.b	smpsNoAttack, $01
0008534A E102                       	smpsAlterNote       $02
0008534C E701                       	dc.b	smpsNoAttack, $01
0008534E E106                       	smpsAlterNote       $06
00085350 E701                       	dc.b	smpsNoAttack, $01
00085352 E10C                       	smpsAlterNote       $0C
00085354 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085358 E109                       	smpsAlterNote       $09
0008535A E701                       	dc.b	smpsNoAttack, $01
0008535C E103                       	smpsAlterNote       $03
0008535E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085362 E109                       	smpsAlterNote       $09
00085364 E701                       	dc.b	smpsNoAttack, $01
00085366 E10C                       	smpsAlterNote       $0C
00085368 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008536C E106                       	smpsAlterNote       $06
0008536E E701                       	dc.b	smpsNoAttack, $01
00085370 E102                       	smpsAlterNote       $02
00085372 E701                       	dc.b	smpsNoAttack, $01
00085374 E103                       	smpsAlterNote       $03
00085376 E701                       	dc.b	smpsNoAttack, $01
00085378 E109                       	smpsAlterNote       $09
0008537A E701                       	dc.b	smpsNoAttack, $01
0008537C E10D                       	smpsAlterNote       $0D
0008537E E701                       	dc.b	smpsNoAttack, $01
00085380 E109                       	smpsAlterNote       $09
00085382 E701                       	dc.b	smpsNoAttack, $01
00085384 E106                       	smpsAlterNote       $06
00085386 E701                       	dc.b	smpsNoAttack, $01
00085388 E102                       	smpsAlterNote       $02
0008538A E701                       	dc.b	smpsNoAttack, $01
0008538C E106                       	smpsAlterNote       $06
0008538E E701                       	dc.b	smpsNoAttack, $01
00085390 E10C                       	smpsAlterNote       $0C
00085392 E701                       	dc.b	smpsNoAttack, $01
00085394 E10D                       	smpsAlterNote       $0D
00085396 E701                       	dc.b	smpsNoAttack, $01
00085398 E109                       	smpsAlterNote       $09
0008539A E701                       	dc.b	smpsNoAttack, $01
0008539C E103                       	smpsAlterNote       $03
0008539E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853A2 E106                       	smpsAlterNote       $06
000853A4 E701                       	dc.b	smpsNoAttack, $01
000853A6 E10C                       	smpsAlterNote       $0C
000853A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853AC E106                       	smpsAlterNote       $06
000853AE E701                       	dc.b	smpsNoAttack, $01
000853B0 E103                       	smpsAlterNote       $03
000853B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853B6 E109                       	smpsAlterNote       $09
000853B8 E701                       	dc.b	smpsNoAttack, $01
000853BA E10D                       	smpsAlterNote       $0D
000853BC E701                       	dc.b	smpsNoAttack, $01
000853BE E10C                       	smpsAlterNote       $0C
000853C0 E701                       	dc.b	smpsNoAttack, $01
000853C2 E106                       	smpsAlterNote       $06
000853C4 E701                       	dc.b	smpsNoAttack, $01
000853C6 E102                       	smpsAlterNote       $02
000853C8 E701                       	dc.b	smpsNoAttack, $01
000853CA E106                       	smpsAlterNote       $06
000853CC E701                       	dc.b	smpsNoAttack, $01
000853CE E109                       	smpsAlterNote       $09
000853D0 E701                       	dc.b	smpsNoAttack, $01
000853D2 E10D                       	smpsAlterNote       $0D
000853D4 E701                       	dc.b	smpsNoAttack, $01
000853D6 E109                       	smpsAlterNote       $09
000853D8 E701                       	dc.b	smpsNoAttack, $01
000853DA E103                       	smpsAlterNote       $03
000853DC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000853E0 E109                       	smpsAlterNote       $09
000853E2 C206                       	dc.b	nF5, $06
000853E4 E108                       	smpsAlterNote       $08
000853E6 C10E                       	dc.b	nE5, $0E
000853E8 E102                       	smpsAlterNote       $02
000853EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853EE E108                       	smpsAlterNote       $08
000853F0 E701                       	dc.b	smpsNoAttack, $01
000853F2 E10B                       	smpsAlterNote       $0B
000853F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853F8 E105                       	smpsAlterNote       $05
000853FA E701                       	dc.b	smpsNoAttack, $01
000853FC E101                       	smpsAlterNote       $01
000853FE E701                       	dc.b	smpsNoAttack, $01
00085400 E102                       	smpsAlterNote       $02
00085402 E701                       	dc.b	smpsNoAttack, $01
00085404 E108                       	smpsAlterNote       $08
00085406 E701                       	dc.b	smpsNoAttack, $01
00085408 E10C                       	smpsAlterNote       $0C
0008540A E701                       	dc.b	smpsNoAttack, $01
0008540C E107                       	smpsAlterNote       $07
0008540E BF0E                       	dc.b	nD5, $0E
00085410 E101                       	smpsAlterNote       $01
00085412 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085416 E107                       	smpsAlterNote       $07
00085418 E701                       	dc.b	smpsNoAttack, $01
0008541A E10A                       	smpsAlterNote       $0A
0008541C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085420 E104                       	smpsAlterNote       $04
00085422 E701                       	dc.b	smpsNoAttack, $01
00085424 E100                       	smpsAlterNote       $00
00085426 E701                       	dc.b	smpsNoAttack, $01
00085428 E104                       	smpsAlterNote       $04
0008542A E701                       	dc.b	smpsNoAttack, $01
0008542C E107                       	smpsAlterNote       $07
0008542E E701                       	dc.b	smpsNoAttack, $01
00085430 E10B                       	smpsAlterNote       $0B
00085432 E701                       	dc.b	smpsNoAttack, $01
00085434 E107                       	smpsAlterNote       $07
00085436 E701                       	dc.b	smpsNoAttack, $01
00085438 E101                       	smpsAlterNote       $01
0008543A E701                       	dc.b	smpsNoAttack, $01
0008543C E100                       	smpsAlterNote       $00
0008543E E701                       	dc.b	smpsNoAttack, $01
00085440 E104                       	smpsAlterNote       $04
00085442 E701                       	dc.b	smpsNoAttack, $01
00085444 E10A                       	smpsAlterNote       $0A
00085446 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008544A E107                       	smpsAlterNote       $07
0008544C E701                       	dc.b	smpsNoAttack, $01
0008544E E101                       	smpsAlterNote       $01
00085450 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085454 E107                       	smpsAlterNote       $07
00085456 E701                       	dc.b	smpsNoAttack, $01
00085458 E10A                       	smpsAlterNote       $0A
0008545A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008545E E104                       	smpsAlterNote       $04
00085460 E701                       	dc.b	smpsNoAttack, $01
00085462 E100                       	smpsAlterNote       $00
00085464 E701                       	dc.b	smpsNoAttack, $01
00085466 E101                       	smpsAlterNote       $01
00085468 E701                       	dc.b	smpsNoAttack, $01
0008546A E107                       	smpsAlterNote       $07
0008546C E701                       	dc.b	smpsNoAttack, $01
0008546E E10B                       	smpsAlterNote       $0B
00085470 E701                       	dc.b	smpsNoAttack, $01
00085472 E107                       	smpsAlterNote       $07
00085474 E701                       	dc.b	smpsNoAttack, $01
00085476 E104                       	smpsAlterNote       $04
00085478 E701                       	dc.b	smpsNoAttack, $01
0008547A E100                       	smpsAlterNote       $00
0008547C E701                       	dc.b	smpsNoAttack, $01
0008547E E104                       	smpsAlterNote       $04
00085480 E701                       	dc.b	smpsNoAttack, $01
00085482 E10A                       	smpsAlterNote       $0A
00085484 E701                       	dc.b	smpsNoAttack, $01
00085486 E10B                       	smpsAlterNote       $0B
00085488 E701                       	dc.b	smpsNoAttack, $01
0008548A E107                       	smpsAlterNote       $07
0008548C E701                       	dc.b	smpsNoAttack, $01
0008548E E101                       	smpsAlterNote       $01
00085490 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085494 E104                       	smpsAlterNote       $04
00085496 E701                       	dc.b	smpsNoAttack, $01
00085498 E10A                       	smpsAlterNote       $0A
0008549A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008549E E104                       	smpsAlterNote       $04
000854A0 E701                       	dc.b	smpsNoAttack, $01
000854A2 E101                       	smpsAlterNote       $01
000854A4 E701                       	dc.b	smpsNoAttack, $01
000854A8 E107                       	smpsAlterNote       $07
000854AA E6FF                       	smpsAlterVol        $FF
000854AC BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000854B8 8004                       	dc.b	nRst, $04
000854BC E109                       	smpsAlterNote       $09
000854BE E602                       	smpsAlterVol        $02
000854C0 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000854C6 E108                       	smpsAlterNote       $08
000854C8 B502 8001                  	dc.b	nE4, $02, nRst, $01
000854CC E109                       	smpsAlterNote       $09
000854CE B60D                       	dc.b	nF4, $0D
000854D0 E106                       	smpsAlterNote       $06
000854D2 E701                       	dc.b	smpsNoAttack, $01
000854D4 E102                       	smpsAlterNote       $02
000854D6 E701                       	dc.b	smpsNoAttack, $01
000854D8 E106                       	smpsAlterNote       $06
000854DA E701                       	dc.b	smpsNoAttack, $01
000854DC E109                       	smpsAlterNote       $09
000854DE E701                       	dc.b	smpsNoAttack, $01
000854E0 E10D                       	smpsAlterNote       $0D
000854E2 E701                       	dc.b	smpsNoAttack, $01
000854E4 E109                       	smpsAlterNote       $09
000854E6 E701                       	dc.b	smpsNoAttack, $01
000854E8 E103                       	smpsAlterNote       $03
000854EA E701                       	dc.b	smpsNoAttack, $01
000854EC E102                       	smpsAlterNote       $02
000854EE E701                       	dc.b	smpsNoAttack, $01
000854F0 E106                       	smpsAlterNote       $06
000854F2 E701                       	dc.b	smpsNoAttack, $01
000854F4 E10C                       	smpsAlterNote       $0C
000854F6 E701                       	dc.b	smpsNoAttack, $01
000854F8 E10D                       	smpsAlterNote       $0D
000854FA 8001                       	dc.b	nRst, $01
000854FC E109                       	smpsAlterNote       $09
000854FE B80D                       	dc.b	nG4, $0D
00085500 E106                       	smpsAlterNote       $06
00085502 E701                       	dc.b	smpsNoAttack, $01
00085504 E102                       	smpsAlterNote       $02
00085506 E701                       	dc.b	smpsNoAttack, $01
00085508 E106                       	smpsAlterNote       $06
0008550A E701                       	dc.b	smpsNoAttack, $01
0008550C E10C                       	smpsAlterNote       $0C
0008550E E701                       	dc.b	smpsNoAttack, $01
00085510 E10D                       	smpsAlterNote       $0D
00085512 E701                       	dc.b	smpsNoAttack, $01
00085514 E109                       	smpsAlterNote       $09
00085516 E701                       	dc.b	smpsNoAttack, $01
00085518 E103                       	smpsAlterNote       $03
0008551A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008551E E106                       	smpsAlterNote       $06
00085520 E701                       	dc.b	smpsNoAttack, $01
00085522 E10C                       	smpsAlterNote       $0C
00085524 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085528 E106                       	smpsAlterNote       $06
0008552A E701                       	dc.b	smpsNoAttack, $01
0008552C E103                       	smpsAlterNote       $03
0008552E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085532 E109                       	smpsAlterNote       $09
00085534 E701                       	dc.b	smpsNoAttack, $01
00085536 E10D                       	smpsAlterNote       $0D
00085538 E701                       	dc.b	smpsNoAttack, $01
0008553A E10C                       	smpsAlterNote       $0C
0008553C E701                       	dc.b	smpsNoAttack, $01
0008553E E109                       	smpsAlterNote       $09
00085540 8001                       	dc.b	nRst, $01
00085542 E10B                       	smpsAlterNote       $0B
00085544 BA03                       	dc.b	nA4, $03
00085546 E10C                       	smpsAlterNote       $0C
00085548 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008554C E10B                       	smpsAlterNote       $0B
0008554E BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00085554 E10C                       	smpsAlterNote       $0C
00085556 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008555A E10B                       	smpsAlterNote       $0B
0008555C C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00085562 E10C                       	smpsAlterNote       $0C
00085564 D303                       	dc.b	nBb6, $03
00085566 E10B                       	smpsAlterNote       $0B
00085568 D20D                       	dc.b	nA6, $0D
0008556A E108                       	smpsAlterNote       $08
0008556C E701                       	dc.b	smpsNoAttack, $01
0008556E E104                       	smpsAlterNote       $04
00085570 E701                       	dc.b	smpsNoAttack, $01
00085572 E105                       	smpsAlterNote       $05
00085574 E701                       	dc.b	smpsNoAttack, $01
00085576 E10B                       	smpsAlterNote       $0B
00085578 E701                       	dc.b	smpsNoAttack, $01
0008557A E10F                       	smpsAlterNote       $0F
0008557C E701                       	dc.b	smpsNoAttack, $01
0008557E E10B                       	smpsAlterNote       $0B
00085580 E701                       	dc.b	smpsNoAttack, $01
00085582 E108                       	smpsAlterNote       $08
00085584 E701                       	dc.b	smpsNoAttack, $01
00085586 E104                       	smpsAlterNote       $04
00085588 E701                       	dc.b	smpsNoAttack, $01
0008558A E108                       	smpsAlterNote       $08
0008558C E701                       	dc.b	smpsNoAttack, $01
0008558E E10E                       	smpsAlterNote       $0E
00085590 E701                       	dc.b	smpsNoAttack, $01
00085592 E10F                       	smpsAlterNote       $0F
00085594 E701                       	dc.b	smpsNoAttack, $01
00085596 E10B                       	smpsAlterNote       $0B
00085598 E701                       	dc.b	smpsNoAttack, $01
0008559A E105                       	smpsAlterNote       $05
0008559C E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000855A2 E109                       	smpsAlterNote       $09
000855A4 CE07                       	dc.b	nF6, $07
000855A6 E108                       	smpsAlterNote       $08
000855A8 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000855AC E109                       	smpsAlterNote       $09
000855AE CE03 8001                  	dc.b	nF6, $03, nRst, $01
000855B2 E108                       	smpsAlterNote       $08
000855B4 CC0D                       	dc.b	nEb6, $0D
000855B6 E102                       	smpsAlterNote       $02
000855B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855BC E108                       	smpsAlterNote       $08
000855BE E701                       	dc.b	smpsNoAttack, $01
000855C0 E10B                       	smpsAlterNote       $0B
000855C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855C6 E105                       	smpsAlterNote       $05
000855C8 E701                       	dc.b	smpsNoAttack, $01
000855CA E101                       	smpsAlterNote       $01
000855CC E701                       	dc.b	smpsNoAttack, $01
000855CE E102                       	smpsAlterNote       $02
000855D0 E701                       	dc.b	smpsNoAttack, $01
000855D2 E108                       	smpsAlterNote       $08
000855D4 E701                       	dc.b	smpsNoAttack, $01
000855D6 E10C                       	smpsAlterNote       $0C
000855D8 E701                       	dc.b	smpsNoAttack, $01
000855DA E108                       	smpsAlterNote       $08
000855DC E701                       	dc.b	smpsNoAttack, $01
000855DE E105                       	smpsAlterNote       $05
000855E0 E701                       	dc.b	smpsNoAttack, $01
000855E2 E101                       	smpsAlterNote       $01
000855E4 E701                       	dc.b	smpsNoAttack, $01
000855E6 E105                       	smpsAlterNote       $05
000855E8 E701                       	dc.b	smpsNoAttack, $01
000855EA E10B                       	smpsAlterNote       $0B
000855EC E701                       	dc.b	smpsNoAttack, $01
000855EE E10C                       	smpsAlterNote       $0C
000855F0 E701                       	dc.b	smpsNoAttack, $01
000855F2 E108                       	smpsAlterNote       $08
000855F4 E701                       	dc.b	smpsNoAttack, $01
000855F6 E107                       	smpsAlterNote       $07
000855F8 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00085602 E10B                       	smpsAlterNote       $0B
00085604 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008560E E109                       	smpsAlterNote       $09
00085610 C203                       	dc.b	nF5, $03
00085612 E108                       	smpsAlterNote       $08
00085614 C103 8001                  	dc.b	nE5, $03, nRst, $01
00085618 E109                       	smpsAlterNote       $09
0008561A C20D                       	dc.b	nF5, $0D
0008561C E108                       	smpsAlterNote       $08
0008561E C10E                       	dc.b	nE5, $0E
00085620 E107                       	smpsAlterNote       $07
00085622 BF0D                       	dc.b	nD5, $0D
00085624 E104                       	smpsAlterNote       $04
00085626 E701                       	dc.b	smpsNoAttack, $01
00085628 E100                       	smpsAlterNote       $00
0008562A E701                       	dc.b	smpsNoAttack, $01
0008562C E104                       	smpsAlterNote       $04
0008562E E701                       	dc.b	smpsNoAttack, $01
00085630 E107                       	smpsAlterNote       $07
00085632 E701                       	dc.b	smpsNoAttack, $01
00085634 E10B                       	smpsAlterNote       $0B
00085636 E701                       	dc.b	smpsNoAttack, $01
00085638 E107                       	smpsAlterNote       $07
0008563A E701                       	dc.b	smpsNoAttack, $01
0008563C E101                       	smpsAlterNote       $01
0008563E E701                       	dc.b	smpsNoAttack, $01
00085640 E100                       	smpsAlterNote       $00
00085642 E701                       	dc.b	smpsNoAttack, $01
00085644 E104                       	smpsAlterNote       $04
00085646 E701                       	dc.b	smpsNoAttack, $01
00085648 E10A                       	smpsAlterNote       $0A
0008564A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008564E E107                       	smpsAlterNote       $07
00085650 E701                       	dc.b	smpsNoAttack, $01
00085652 E101                       	smpsAlterNote       $01
00085654 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085658 E107                       	smpsAlterNote       $07
0008565A E701                       	dc.b	smpsNoAttack, $01
0008565C E10A                       	smpsAlterNote       $0A
0008565E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085662 E104                       	smpsAlterNote       $04
00085664 E701                       	dc.b	smpsNoAttack, $01
00085666 E100                       	smpsAlterNote       $00
00085668 E701                       	dc.b	smpsNoAttack, $01
0008566A E101                       	smpsAlterNote       $01
0008566C E701                       	dc.b	smpsNoAttack, $01
0008566E E107                       	smpsAlterNote       $07
00085670 E701                       	dc.b	smpsNoAttack, $01
00085672 E10B                       	smpsAlterNote       $0B
00085674 E701                       	dc.b	smpsNoAttack, $01
00085676 E107                       	smpsAlterNote       $07
00085678 E701                       	dc.b	smpsNoAttack, $01
0008567A E104                       	smpsAlterNote       $04
0008567C E701                       	dc.b	smpsNoAttack, $01
0008567E E100                       	smpsAlterNote       $00
00085680 E701                       	dc.b	smpsNoAttack, $01
00085682 E104                       	smpsAlterNote       $04
00085684 E701                       	dc.b	smpsNoAttack, $01
00085686 E10A                       	smpsAlterNote       $0A
00085688 E701                       	dc.b	smpsNoAttack, $01
0008568A E10B                       	smpsAlterNote       $0B
0008568C E701                       	dc.b	smpsNoAttack, $01
0008568E E107                       	smpsAlterNote       $07
00085690 E701                       	dc.b	smpsNoAttack, $01
00085692 E101                       	smpsAlterNote       $01
00085694 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085698 E104                       	smpsAlterNote       $04
0008569A E701                       	dc.b	smpsNoAttack, $01
0008569C E10A                       	smpsAlterNote       $0A
0008569E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856A2 E104                       	smpsAlterNote       $04
000856A4 E701                       	dc.b	smpsNoAttack, $01
000856A6 E101                       	smpsAlterNote       $01
000856A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856AC E107                       	smpsAlterNote       $07
000856AE E701                       	dc.b	smpsNoAttack, $01
000856B0 E10B                       	smpsAlterNote       $0B
000856B2 E701                       	dc.b	smpsNoAttack, $01
000856B4 E10A                       	smpsAlterNote       $0A
000856B6 E701                       	dc.b	smpsNoAttack, $01
000856B8 E104                       	smpsAlterNote       $04
000856BA E701                       	dc.b	smpsNoAttack, $01
000856BC E100                       	smpsAlterNote       $00
000856BE E701                       	dc.b	smpsNoAttack, $01
000856C0 E104                       	smpsAlterNote       $04
000856C2 E701                       	dc.b	smpsNoAttack, $01
000856C4 E107                       	smpsAlterNote       $07
000856C6 E701                       	dc.b	smpsNoAttack, $01
000856C8 E10B                       	smpsAlterNote       $0B
000856CA E701                       	dc.b	smpsNoAttack, $01
000856CC E107                       	smpsAlterNote       $07
000856CE E701                       	dc.b	smpsNoAttack, $01
000856D0 E101                       	smpsAlterNote       $01
000856D2 E701                       	dc.b	smpsNoAttack, $01
000856D4 E100                       	smpsAlterNote       $00
000856D6 E701                       	dc.b	smpsNoAttack, $01
000856D8 E104                       	smpsAlterNote       $04
000856DA E701                       	dc.b	smpsNoAttack, $01
000856DC E10A                       	smpsAlterNote       $0A
000856DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856E2 E107                       	smpsAlterNote       $07
000856E4 E701                       	dc.b	smpsNoAttack, $01
000856E6 E101                       	smpsAlterNote       $01
000856E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856EC E107                       	smpsAlterNote       $07
000856EE E701                       	dc.b	smpsNoAttack, $01
000856F0 E10A                       	smpsAlterNote       $0A
000856F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856F6 E104                       	smpsAlterNote       $04
000856F8 E701                       	dc.b	smpsNoAttack, $01
000856FA E100                       	smpsAlterNote       $00
000856FC E701                       	dc.b	smpsNoAttack, $01
000856FE E101                       	smpsAlterNote       $01
00085700 E701                       	dc.b	smpsNoAttack, $01
00085702 E107                       	smpsAlterNote       $07
00085704 E701                       	dc.b	smpsNoAttack, $01
00085706 E10B                       	smpsAlterNote       $0B
00085708 E701                       	dc.b	smpsNoAttack, $01
0008570A E107                       	smpsAlterNote       $07
0008570C E701                       	dc.b	smpsNoAttack, $01
0008570E E104                       	smpsAlterNote       $04
00085710 E701                       	dc.b	smpsNoAttack, $01
00085712 E100                       	smpsAlterNote       $00
00085714 E701                       	dc.b	smpsNoAttack, $01
00085716 E101                       	smpsAlterNote       $01
00085718 8001                       	dc.b	nRst, $01
0008571A E109                       	smpsAlterNote       $09
0008571C C20D                       	dc.b	nF5, $0D
0008571E E106                       	smpsAlterNote       $06
00085720 E701                       	dc.b	smpsNoAttack, $01
00085722 E102                       	smpsAlterNote       $02
00085724 E701                       	dc.b	smpsNoAttack, $01
00085726 E106                       	smpsAlterNote       $06
00085728 E701                       	dc.b	smpsNoAttack, $01
0008572A E10C                       	smpsAlterNote       $0C
0008572C E701                       	dc.b	smpsNoAttack, $01
0008572E E10D                       	smpsAlterNote       $0D
00085730 E701                       	dc.b	smpsNoAttack, $01
00085732 E109                       	smpsAlterNote       $09
00085734 E701                       	dc.b	smpsNoAttack, $01
00085736 E103                       	smpsAlterNote       $03
00085738 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008573C E106                       	smpsAlterNote       $06
0008573E E701                       	dc.b	smpsNoAttack, $01
00085740 E10C                       	smpsAlterNote       $0C
00085742 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085746 E106                       	smpsAlterNote       $06
00085748 E701                       	dc.b	smpsNoAttack, $01
0008574A E103                       	smpsAlterNote       $03
0008574C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085750 E109                       	smpsAlterNote       $09
00085752 E701                       	dc.b	smpsNoAttack, $01
00085754 E10D                       	smpsAlterNote       $0D
00085756 E701                       	dc.b	smpsNoAttack, $01
00085758 E10C                       	smpsAlterNote       $0C
0008575A E701                       	dc.b	smpsNoAttack, $01
0008575C E109                       	smpsAlterNote       $09
0008575E 8001                       	dc.b	nRst, $01
00085760 E108                       	smpsAlterNote       $08
00085762 C10D                       	dc.b	nE5, $0D
00085764 E109                       	smpsAlterNote       $09
00085766 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008576A E108                       	smpsAlterNote       $08
0008576C C10D                       	dc.b	nE5, $0D
0008576E E102                       	smpsAlterNote       $02
00085770 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085774 E105                       	smpsAlterNote       $05
00085776 E701                       	dc.b	smpsNoAttack, $01
00085778 E108                       	smpsAlterNote       $08
0008577A 8001                       	dc.b	nRst, $01
0008577C E107                       	smpsAlterNote       $07
0008577E BF0D                       	dc.b	nD5, $0D
00085780 E108                       	smpsAlterNote       $08
00085782 C107                       	dc.b	nE5, $07
00085784 E109                       	smpsAlterNote       $09
00085786 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008578C E10B                       	smpsAlterNote       $0B
0008578E C603                       	dc.b	nA5, $03
00085790 E10C                       	smpsAlterNote       $0C
00085792 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00085798 E10B                       	smpsAlterNote       $0B
0008579A C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000857A0 E109                       	smpsAlterNote       $09
000857A2 D003                       	dc.b	nG6, $03
000857A4 E108                       	smpsAlterNote       $08
000857A6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000857AA E10B                       	smpsAlterNote       $0B
000857AC C601 8001                  	dc.b	nA5, $01, nRst, $01
000857B0 E108                       	smpsAlterNote       $08
000857B2 C102                       	dc.b	nE5, $02
000857B6 E10C                       	smpsAlterNote       $0C
000857B8 E6FB                       	smpsAlterVol        $FB
000857BA A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000857C6 8001                       	dc.b	nRst, $01
000857C8 E10B                       	smpsAlterNote       $0B
000857CA A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000857D2 E107                       	smpsAlterNote       $07
000857D4 A706 8001                  	dc.b	nD3, $06, nRst, $01
000857D8 E10B                       	smpsAlterNote       $0B
000857DA A203                       	dc.b	nA2, $03
000857DC E109                       	smpsAlterNote       $09
000857DE AA03 8001                  	dc.b	nF3, $03, nRst, $01
000857E2 E108                       	smpsAlterNote       $08
000857E4 A906                       	dc.b	nE3, $06
000857E6 E107                       	smpsAlterNote       $07
000857E8 A703 8001                  	dc.b	nD3, $03, nRst, $01
000857EC E106                       	smpsAlterNote       $06
000857EE A503                       	dc.b	nC3, $03
000857F0 E10C                       	smpsAlterNote       $0C
000857F2 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000857F6 E10B                       	smpsAlterNote       $0B
000857F8 A203 8004                  	dc.b	nA2, $03, nRst, $04
000857FC E11B                       	smpsAlterNote       $1B
000857FE C401                       	dc.b	nG5, $01
00085800 E1F4                       	smpsAlterNote       $F4
00085802 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00085805 E106                       	smpsAlterNote       $06
00085807 E701                       	dc.b	smpsNoAttack, $01
00085809 E10F                       	smpsAlterNote       $0F
0008580B E701                       	dc.b	smpsNoAttack, $01
0008580D E1E4                       	smpsAlterNote       $E4
0008580F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00085812 E1F6                       	smpsAlterNote       $F6
00085814 E701                       	dc.b	smpsNoAttack, $01
00085816 E108                       	smpsAlterNote       $08
00085818 E701                       	dc.b	smpsNoAttack, $01
0008581A E10B                       	smpsAlterNote       $0B
0008581C E706                       	dc.b	smpsNoAttack, $06
0008581E E105                       	smpsAlterNote       $05
00085820 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085824 E108                       	smpsAlterNote       $08
00085826 E701                       	dc.b	smpsNoAttack, $01
00085828 E10E                       	smpsAlterNote       $0E
0008582A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008582E E108                       	smpsAlterNote       $08
00085830 E701                       	dc.b	smpsNoAttack, $01
00085832 E105                       	smpsAlterNote       $05
00085834 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085838 E10B                       	smpsAlterNote       $0B
0008583A E701                       	dc.b	smpsNoAttack, $01
0008583C E10F                       	smpsAlterNote       $0F
0008583E E701                       	dc.b	smpsNoAttack, $01
00085840 E10E                       	smpsAlterNote       $0E
00085842 E701                       	dc.b	smpsNoAttack, $01
00085844 E108                       	smpsAlterNote       $08
00085846 E701                       	dc.b	smpsNoAttack, $01
00085848 E104                       	smpsAlterNote       $04
0008584A E701                       	dc.b	smpsNoAttack, $01
0008584C E108                       	smpsAlterNote       $08
0008584E E701                       	dc.b	smpsNoAttack, $01
00085850 E10B                       	smpsAlterNote       $0B
00085852 E701                       	dc.b	smpsNoAttack, $01
00085854 E10F                       	smpsAlterNote       $0F
00085856 E701                       	dc.b	smpsNoAttack, $01
00085858 E10B                       	smpsAlterNote       $0B
0008585A E701                       	dc.b	smpsNoAttack, $01
0008585C E105                       	smpsAlterNote       $05
0008585E E701                       	dc.b	smpsNoAttack, $01
00085860 E104                       	smpsAlterNote       $04
00085862 E701                       	dc.b	smpsNoAttack, $01
00085864 E108                       	smpsAlterNote       $08
00085866 E701                       	dc.b	smpsNoAttack, $01
00085868 E10E                       	smpsAlterNote       $0E
0008586A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008586E E10B                       	smpsAlterNote       $0B
00085870 E701                       	dc.b	smpsNoAttack, $01
00085872 E105                       	smpsAlterNote       $05
00085874 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085878 E10B                       	smpsAlterNote       $0B
0008587A E701                       	dc.b	smpsNoAttack, $01
0008587C E10E                       	smpsAlterNote       $0E
0008587E E701                       	dc.b	smpsNoAttack, $01
00085880 E10F                       	smpsAlterNote       $0F
00085882 8001                       	dc.b	nRst, $01
00085884 E109                       	smpsAlterNote       $09
00085886 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008588C E108                       	smpsAlterNote       $08
0008588E C101 8001                  	dc.b	nE5, $01, nRst, $01
00085892 E109                       	smpsAlterNote       $09
00085894 C202                       	dc.b	nF5, $02
00085896 E108                       	smpsAlterNote       $08
00085898 C102                       	dc.b	nE5, $02
0008589A E107                       	smpsAlterNote       $07
0008589C BF02 8001                  	dc.b	nD5, $02, nRst, $01
000858A0 E108                       	smpsAlterNote       $08
000858A2 C101 8001                  	dc.b	nE5, $01, nRst, $01
000858A6 E107                       	smpsAlterNote       $07
000858A8 BF02                       	dc.b	nD5, $02
000858AA E106                       	smpsAlterNote       $06
000858AC BD02 8001                  	dc.b	nC5, $02, nRst, $01
000858B0 E107                       	smpsAlterNote       $07
000858B2 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000858B6 E106                       	smpsAlterNote       $06
000858B8 BD02                       	dc.b	nC5, $02
000858BA E10C                       	smpsAlterNote       $0C
000858BC BB02                       	dc.b	nBb4, $02
000858BE E106                       	smpsAlterNote       $06
000858C0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000858C4 E10C                       	smpsAlterNote       $0C
000858C6 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000858CA E10B                       	smpsAlterNote       $0B
000858CC BA02                       	dc.b	nA4, $02
000858CE E10C                       	smpsAlterNote       $0C
000858D0 BB02                       	dc.b	nBb4, $02
000858D2 E10B                       	smpsAlterNote       $0B
000858D4 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000858DE E108                       	smpsAlterNote       $08
000858E0 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000858E8 E107                       	smpsAlterNote       $07
000858EA BE02                       	dc.b	nCs5, $02
000858EC E10B                       	smpsAlterNote       $0B
000858EE BA02                       	dc.b	nA4, $02
000858F0 E109                       	smpsAlterNote       $09
000858F2 B802 8001                  	dc.b	nG4, $02, nRst, $01
000858F6 E108                       	smpsAlterNote       $08
000858F8 B501 8001                  	dc.b	nE4, $01, nRst, $01
000858FC E10B                       	smpsAlterNote       $0B
000858FE AE02                       	dc.b	nA3, $02
00085900 E10C                       	smpsAlterNote       $0C
00085902 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008590E E10B                       	smpsAlterNote       $0B
00085910 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00085918 E107                       	smpsAlterNote       $07
0008591A A706 8001                  	dc.b	nD3, $06, nRst, $01
0008591E E10B                       	smpsAlterNote       $0B
00085920 A203                       	dc.b	nA2, $03
00085922 E109                       	smpsAlterNote       $09
00085924 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00085928 E108                       	smpsAlterNote       $08
0008592A A906 8001                  	dc.b	nE3, $06, nRst, $01
0008592E E107                       	smpsAlterNote       $07
00085930 A702 8001                  	dc.b	nD3, $02, nRst, $01
00085934 E106                       	smpsAlterNote       $06
00085936 A503                       	dc.b	nC3, $03
00085938 E10C                       	smpsAlterNote       $0C
0008593A A303 8001                  	dc.b	nBb2, $03, nRst, $01
00085940 E107                       	smpsAlterNote       $07
00085942 B20D                       	dc.b	nCs4, $0D
00085944 E104                       	smpsAlterNote       $04
00085946 E701                       	dc.b	smpsNoAttack, $01
00085948 E100                       	smpsAlterNote       $00
0008594A E701                       	dc.b	smpsNoAttack, $01
0008594C E104                       	smpsAlterNote       $04
0008594E E701                       	dc.b	smpsNoAttack, $01
00085950 E10A                       	smpsAlterNote       $0A
00085952 E701                       	dc.b	smpsNoAttack, $01
00085954 E10B                       	smpsAlterNote       $0B
00085956 E701                       	dc.b	smpsNoAttack, $01
00085958 E107                       	smpsAlterNote       $07
0008595A E701                       	dc.b	smpsNoAttack, $01
0008595C E101                       	smpsAlterNote       $01
0008595E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085962 E104                       	smpsAlterNote       $04
00085964 E701                       	dc.b	smpsNoAttack, $01
00085966 E10A                       	smpsAlterNote       $0A
00085968 E701                       	dc.b	smpsNoAttack, $01
0008596A E10B                       	smpsAlterNote       $0B
0008596C 8001                       	dc.b	nRst, $01
0008596E E107                       	smpsAlterNote       $07
00085970 B30D                       	dc.b	nD4, $0D
00085972 E104                       	smpsAlterNote       $04
00085974 E701                       	dc.b	smpsNoAttack, $01
00085976 E100                       	smpsAlterNote       $00
00085978 E701                       	dc.b	smpsNoAttack, $01
0008597A E104                       	smpsAlterNote       $04
0008597C E701                       	dc.b	smpsNoAttack, $01
0008597E E10A                       	smpsAlterNote       $0A
00085980 E701                       	dc.b	smpsNoAttack, $01
00085982 E10B                       	smpsAlterNote       $0B
00085984 E701                       	dc.b	smpsNoAttack, $01
00085986 E107                       	smpsAlterNote       $07
00085988 E701                       	dc.b	smpsNoAttack, $01
0008598A E101                       	smpsAlterNote       $01
0008598C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085990 E104                       	smpsAlterNote       $04
00085992 E701                       	dc.b	smpsNoAttack, $01
00085994 E10A                       	smpsAlterNote       $0A
00085996 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008599A E104                       	smpsAlterNote       $04
0008599C E701                       	dc.b	smpsNoAttack, $01
0008599E E101                       	smpsAlterNote       $01
000859A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859A4 E107                       	smpsAlterNote       $07
000859A6 E701                       	dc.b	smpsNoAttack, $01
000859A8 E10B                       	smpsAlterNote       $0B
000859AA E701                       	dc.b	smpsNoAttack, $01
000859AC E10A                       	smpsAlterNote       $0A
000859AE E701                       	dc.b	smpsNoAttack, $01
000859B0 E107                       	smpsAlterNote       $07
000859B2 8001                       	dc.b	nRst, $01
000859B4 E108                       	smpsAlterNote       $08
000859B6 B50D                       	dc.b	nE4, $0D
000859B8 E102                       	smpsAlterNote       $02
000859BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859BE E105                       	smpsAlterNote       $05
000859C0 E701                       	dc.b	smpsNoAttack, $01
000859C2 E10B                       	smpsAlterNote       $0B
000859C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859C8 E105                       	smpsAlterNote       $05
000859CA E701                       	dc.b	smpsNoAttack, $01
000859CC E102                       	smpsAlterNote       $02
000859CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859D2 E108                       	smpsAlterNote       $08
000859D4 E701                       	dc.b	smpsNoAttack, $01
000859D6 E10C                       	smpsAlterNote       $0C
000859D8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000859DC E107                       	smpsAlterNote       $07
000859DE B30D                       	dc.b	nD4, $0D
000859E0 E101                       	smpsAlterNote       $01
000859E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859E6 E104                       	smpsAlterNote       $04
000859E8 E701                       	dc.b	smpsNoAttack, $01
000859EA E10A                       	smpsAlterNote       $0A
000859EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859F0 E104                       	smpsAlterNote       $04
000859F2 E701                       	dc.b	smpsNoAttack, $01
000859F4 E101                       	smpsAlterNote       $01
000859F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859FA E107                       	smpsAlterNote       $07
000859FC E701                       	dc.b	smpsNoAttack, $01
000859FE E10B                       	smpsAlterNote       $0B
00085A00 E701                       	dc.b	smpsNoAttack, $01
00085A02 E10A                       	smpsAlterNote       $0A
00085A04 E701                       	dc.b	smpsNoAttack, $01
00085A06 E104                       	smpsAlterNote       $04
00085A08 E701                       	dc.b	smpsNoAttack, $01
00085A0A E100                       	smpsAlterNote       $00
00085A0C E701                       	dc.b	smpsNoAttack, $01
00085A0E E104                       	smpsAlterNote       $04
00085A10 E701                       	dc.b	smpsNoAttack, $01
00085A12 E107                       	smpsAlterNote       $07
00085A14 E701                       	dc.b	smpsNoAttack, $01
00085A16 E10B                       	smpsAlterNote       $0B
00085A18 E701                       	dc.b	smpsNoAttack, $01
00085A1A E107                       	smpsAlterNote       $07
00085A1C E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00085A20 E101                       	smpsAlterNote       $01
00085A22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A26 E107                       	smpsAlterNote       $07
00085A28 E701                       	dc.b	smpsNoAttack, $01
00085A2A E10A                       	smpsAlterNote       $0A
00085A2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A30 E104                       	smpsAlterNote       $04
00085A32 E701                       	dc.b	smpsNoAttack, $01
00085A34 E100                       	smpsAlterNote       $00
00085A36 E701                       	dc.b	smpsNoAttack, $01
00085A38 E101                       	smpsAlterNote       $01
00085A3A E701                       	dc.b	smpsNoAttack, $01
00085A3C E107                       	smpsAlterNote       $07
00085A3E E701                       	dc.b	smpsNoAttack, $01
00085A40 E10B                       	smpsAlterNote       $0B
00085A42 E701                       	dc.b	smpsNoAttack, $01
00085A44 E107                       	smpsAlterNote       $07
00085A46 B30E                       	dc.b	nD4, $0E
00085A48 E101                       	smpsAlterNote       $01
00085A4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A4E E107                       	smpsAlterNote       $07
00085A50 E701                       	dc.b	smpsNoAttack, $01
00085A52 E10A                       	smpsAlterNote       $0A
00085A54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A58 E104                       	smpsAlterNote       $04
00085A5A E701                       	dc.b	smpsNoAttack, $01
00085A5C E100                       	smpsAlterNote       $00
00085A5E E701                       	dc.b	smpsNoAttack, $01
00085A60 E101                       	smpsAlterNote       $01
00085A62 E701                       	dc.b	smpsNoAttack, $01
00085A64 E107                       	smpsAlterNote       $07
00085A66 E701                       	dc.b	smpsNoAttack, $01
00085A68 E10B                       	smpsAlterNote       $0B
00085A6A E701                       	dc.b	smpsNoAttack, $01
00085A6C E107                       	smpsAlterNote       $07
00085A6E E701                       	dc.b	smpsNoAttack, $01
00085A70 E104                       	smpsAlterNote       $04
00085A72 E701                       	dc.b	smpsNoAttack, $01
00085A74 E100                       	smpsAlterNote       $00
00085A76 E701                       	dc.b	smpsNoAttack, $01
00085A78 E104                       	smpsAlterNote       $04
00085A7A E701                       	dc.b	smpsNoAttack, $01
00085A7C E10A                       	smpsAlterNote       $0A
00085A7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A82 E107                       	smpsAlterNote       $07
00085A84 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00085A88 E104                       	smpsAlterNote       $04
00085A8A E701                       	dc.b	smpsNoAttack, $01
00085A8C E100                       	smpsAlterNote       $00
00085A8E E701                       	dc.b	smpsNoAttack, $01
00085A90 E101                       	smpsAlterNote       $01
00085A92 E701                       	dc.b	smpsNoAttack, $01
00085A94 E107                       	smpsAlterNote       $07
00085A96 E701                       	dc.b	smpsNoAttack, $01
00085A98 E10B                       	smpsAlterNote       $0B
00085A9A E701                       	dc.b	smpsNoAttack, $01
00085A9C E107                       	smpsAlterNote       $07
00085A9E E701                       	dc.b	smpsNoAttack, $01
00085AA0 E104                       	smpsAlterNote       $04
00085AA2 E701                       	dc.b	smpsNoAttack, $01
00085AA4 E100                       	smpsAlterNote       $00
00085AA6 E701                       	dc.b	smpsNoAttack, $01
00085AA8 E104                       	smpsAlterNote       $04
00085AAA E701                       	dc.b	smpsNoAttack, $01
00085AAC E10A                       	smpsAlterNote       $0A
00085AAE E701                       	dc.b	smpsNoAttack, $01
00085AB0 E10B                       	smpsAlterNote       $0B
00085AB2 E701                       	dc.b	smpsNoAttack, $01
00085AB6 E6FF                       	smpsAlterVol        $FF
00085AB8 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00085AC4 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00085ACC E109                       	smpsAlterNote       $09
00085ACE E601                       	smpsAlterVol        $01
00085AD0 B60D                       	dc.b	nF4, $0D
00085AD2 E106                       	smpsAlterNote       $06
00085AD4 E701                       	dc.b	smpsNoAttack, $01
00085AD6 E102                       	smpsAlterNote       $02
00085AD8 E701                       	dc.b	smpsNoAttack, $01
00085ADA E106                       	smpsAlterNote       $06
00085ADC E701                       	dc.b	smpsNoAttack, $01
00085ADE E109                       	smpsAlterNote       $09
00085AE0 E701                       	dc.b	smpsNoAttack, $01
00085AE2 E10D                       	smpsAlterNote       $0D
00085AE4 E701                       	dc.b	smpsNoAttack, $01
00085AE6 E109                       	smpsAlterNote       $09
00085AE8 E701                       	dc.b	smpsNoAttack, $01
00085AEA E103                       	smpsAlterNote       $03
00085AEC E701                       	dc.b	smpsNoAttack, $01
00085AEE E102                       	smpsAlterNote       $02
00085AF0 E701                       	dc.b	smpsNoAttack, $01
00085AF2 E106                       	smpsAlterNote       $06
00085AF4 E701                       	dc.b	smpsNoAttack, $01
00085AF6 E10C                       	smpsAlterNote       $0C
00085AF8 E701                       	dc.b	smpsNoAttack, $01
00085AFA E10D                       	smpsAlterNote       $0D
00085AFC 8001                       	dc.b	nRst, $01
00085AFE E109                       	smpsAlterNote       $09
00085B00 B80D                       	dc.b	nG4, $0D
00085B02 E106                       	smpsAlterNote       $06
00085B04 E701                       	dc.b	smpsNoAttack, $01
00085B06 E102                       	smpsAlterNote       $02
00085B08 E701                       	dc.b	smpsNoAttack, $01
00085B0A E106                       	smpsAlterNote       $06
00085B0C E701                       	dc.b	smpsNoAttack, $01
00085B0E E109                       	smpsAlterNote       $09
00085B10 E701                       	dc.b	smpsNoAttack, $01
00085B12 E10D                       	smpsAlterNote       $0D
00085B14 E701                       	dc.b	smpsNoAttack, $01
00085B16 E109                       	smpsAlterNote       $09
00085B18 E701                       	dc.b	smpsNoAttack, $01
00085B1A E103                       	smpsAlterNote       $03
00085B1C E701                       	dc.b	smpsNoAttack, $01
00085B1E E102                       	smpsAlterNote       $02
00085B20 E701                       	dc.b	smpsNoAttack, $01
00085B22 E106                       	smpsAlterNote       $06
00085B24 E701                       	dc.b	smpsNoAttack, $01
00085B26 E10C                       	smpsAlterNote       $0C
00085B28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B2C E106                       	smpsAlterNote       $06
00085B2E E701                       	dc.b	smpsNoAttack, $01
00085B30 E103                       	smpsAlterNote       $03
00085B32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B36 E109                       	smpsAlterNote       $09
00085B38 E701                       	dc.b	smpsNoAttack, $01
00085B3A E10D                       	smpsAlterNote       $0D
00085B3C E701                       	dc.b	smpsNoAttack, $01
00085B3E E10C                       	smpsAlterNote       $0C
00085B40 E701                       	dc.b	smpsNoAttack, $01
00085B42 E109                       	smpsAlterNote       $09
00085B44 8001                       	dc.b	nRst, $01
00085B46 E10B                       	smpsAlterNote       $0B
00085B48 BA0D                       	dc.b	nA4, $0D
00085B4A E105                       	smpsAlterNote       $05
00085B4C E701                       	dc.b	smpsNoAttack, $01
00085B4E E104                       	smpsAlterNote       $04
00085B50 E701                       	dc.b	smpsNoAttack, $01
00085B52 E108                       	smpsAlterNote       $08
00085B54 E701                       	dc.b	smpsNoAttack, $01
00085B56 E10E                       	smpsAlterNote       $0E
00085B58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B5C E10B                       	smpsAlterNote       $0B
00085B5E E701                       	dc.b	smpsNoAttack, $01
00085B60 E105                       	smpsAlterNote       $05
00085B62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B66 E10B                       	smpsAlterNote       $0B
00085B68 E701                       	dc.b	smpsNoAttack, $01
00085B6A E10E                       	smpsAlterNote       $0E
00085B6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B70 E108                       	smpsAlterNote       $08
00085B72 E701                       	dc.b	smpsNoAttack, $01
00085B74 E104                       	smpsAlterNote       $04
00085B76 E701                       	dc.b	smpsNoAttack, $01
00085B78 E105                       	smpsAlterNote       $05
00085B7A E701                       	dc.b	smpsNoAttack, $01
00085B7C E10B                       	smpsAlterNote       $0B
00085B7E E701                       	dc.b	smpsNoAttack, $01
00085B80 E10F                       	smpsAlterNote       $0F
00085B82 E701                       	dc.b	smpsNoAttack, $01
00085B84 E10B                       	smpsAlterNote       $0B
00085B86 E701                       	dc.b	smpsNoAttack, $01
00085B88 E108                       	smpsAlterNote       $08
00085B8A E701                       	dc.b	smpsNoAttack, $01
00085B8C E104                       	smpsAlterNote       $04
00085B8E E701                       	dc.b	smpsNoAttack, $01
00085B90 E108                       	smpsAlterNote       $08
00085B92 E701                       	dc.b	smpsNoAttack, $01
00085B94 E10E                       	smpsAlterNote       $0E
00085B96 E701                       	dc.b	smpsNoAttack, $01
00085B98 E10F                       	smpsAlterNote       $0F
00085B9A E701                       	dc.b	smpsNoAttack, $01
00085B9C E10B                       	smpsAlterNote       $0B
00085B9E E701                       	dc.b	smpsNoAttack, $01
00085BA0 E105                       	smpsAlterNote       $05
00085BA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BA6 E108                       	smpsAlterNote       $08
00085BA8 E701                       	dc.b	smpsNoAttack, $01
00085BAA E10E                       	smpsAlterNote       $0E
00085BAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BB0 E108                       	smpsAlterNote       $08
00085BB2 E701                       	dc.b	smpsNoAttack, $01
00085BB4 E105                       	smpsAlterNote       $05
00085BB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BBA E108                       	smpsAlterNote       $08
00085BBC B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00085BC0 E109                       	smpsAlterNote       $09
00085BC2 B60D                       	dc.b	nF4, $0D
00085BC4 E103                       	smpsAlterNote       $03
00085BC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BCA E106                       	smpsAlterNote       $06
00085BCC E701                       	dc.b	smpsNoAttack, $01
00085BCE E10C                       	smpsAlterNote       $0C
00085BD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BD4 E106                       	smpsAlterNote       $06
00085BD6 E701                       	dc.b	smpsNoAttack, $01
00085BD8 E103                       	smpsAlterNote       $03
00085BDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BDE E109                       	smpsAlterNote       $09
00085BE0 E701                       	dc.b	smpsNoAttack, $01
00085BE2 E10D                       	smpsAlterNote       $0D
00085BE4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085BE8 E109                       	smpsAlterNote       $09
00085BEA B80D                       	dc.b	nG4, $0D
00085BEC E103                       	smpsAlterNote       $03
00085BEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BF2 E109                       	smpsAlterNote       $09
00085BF4 E701                       	dc.b	smpsNoAttack, $01
00085BF6 E10C                       	smpsAlterNote       $0C
00085BF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BFC E106                       	smpsAlterNote       $06
00085BFE E701                       	dc.b	smpsNoAttack, $01
00085C00 E102                       	smpsAlterNote       $02
00085C02 E701                       	dc.b	smpsNoAttack, $01
00085C04 E103                       	smpsAlterNote       $03
00085C06 E701                       	dc.b	smpsNoAttack, $01
00085C08 E109                       	smpsAlterNote       $09
00085C0A E701                       	dc.b	smpsNoAttack, $01
00085C0C E10D                       	smpsAlterNote       $0D
00085C0E E701                       	dc.b	smpsNoAttack, $01
00085C10 E109                       	smpsAlterNote       $09
00085C12 E701                       	dc.b	smpsNoAttack, $01
00085C14 E106                       	smpsAlterNote       $06
00085C16 E701                       	dc.b	smpsNoAttack, $01
00085C18 E102                       	smpsAlterNote       $02
00085C1A E701                       	dc.b	smpsNoAttack, $01
00085C1C E106                       	smpsAlterNote       $06
00085C1E E701                       	dc.b	smpsNoAttack, $01
00085C20 E10C                       	smpsAlterNote       $0C
00085C22 E701                       	dc.b	smpsNoAttack, $01
00085C24 E10D                       	smpsAlterNote       $0D
00085C26 E701                       	dc.b	smpsNoAttack, $01
00085C28 E109                       	smpsAlterNote       $09
00085C2A E701                       	dc.b	smpsNoAttack, $01
00085C2C E10B                       	smpsAlterNote       $0B
00085C2E BA0D                       	dc.b	nA4, $0D
00085C30 E108                       	smpsAlterNote       $08
00085C32 E701                       	dc.b	smpsNoAttack, $01
00085C34 E105                       	smpsAlterNote       $05
00085C36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C3A E10B                       	smpsAlterNote       $0B
00085C3C E701                       	dc.b	smpsNoAttack, $01
00085C3E E10F                       	smpsAlterNote       $0F
00085C40 E701                       	dc.b	smpsNoAttack, $01
00085C42 E10E                       	smpsAlterNote       $0E
00085C44 E701                       	dc.b	smpsNoAttack, $01
00085C46 E108                       	smpsAlterNote       $08
00085C48 E701                       	dc.b	smpsNoAttack, $01
00085C4A E104                       	smpsAlterNote       $04
00085C4C E701                       	dc.b	smpsNoAttack, $01
00085C4E E108                       	smpsAlterNote       $08
00085C50 E701                       	dc.b	smpsNoAttack, $01
00085C52 E10B                       	smpsAlterNote       $0B
00085C54 E701                       	dc.b	smpsNoAttack, $01
00085C56 E10F                       	smpsAlterNote       $0F
00085C58 E701                       	dc.b	smpsNoAttack, $01
00085C5A E10B                       	smpsAlterNote       $0B
00085C5C E701                       	dc.b	smpsNoAttack, $01
00085C5E E105                       	smpsAlterNote       $05
00085C60 E701                       	dc.b	smpsNoAttack, $01
00085C62 E104                       	smpsAlterNote       $04
00085C64 E701                       	dc.b	smpsNoAttack, $01
00085C66 E108                       	smpsAlterNote       $08
00085C68 E701                       	dc.b	smpsNoAttack, $01
00085C6A E10E                       	smpsAlterNote       $0E
00085C6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C70 E10B                       	smpsAlterNote       $0B
00085C72 E701                       	dc.b	smpsNoAttack, $01
00085C74 E105                       	smpsAlterNote       $05
00085C76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C7A E10B                       	smpsAlterNote       $0B
00085C7C E701                       	dc.b	smpsNoAttack, $01
00085C7E E10E                       	smpsAlterNote       $0E
00085C80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C84 E108                       	smpsAlterNote       $08
00085C86 E701                       	dc.b	smpsNoAttack, $01
00085C88 E105                       	smpsAlterNote       $05
00085C8A 8001                       	dc.b	nRst, $01
00085C8C E109                       	smpsAlterNote       $09
00085C8E B60A                       	dc.b	nF4, $0A
00085C90 E108                       	smpsAlterNote       $08
00085C92 B507                       	dc.b	nE4, $07
00085C94 E107                       	smpsAlterNote       $07
00085C96 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00085C9A E108                       	smpsAlterNote       $08
00085C9C B503                       	dc.b	nE4, $03
00085C9E E109                       	smpsAlterNote       $09
00085CA0 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00085CA8 E10B                       	smpsAlterNote       $0B
00085CAA BA0D                       	dc.b	nA4, $0D
00085CAC E108                       	smpsAlterNote       $08
00085CAE E701                       	dc.b	smpsNoAttack, $01
00085CB0 E104                       	smpsAlterNote       $04
00085CB2 E701                       	dc.b	smpsNoAttack, $01
00085CB4 E108                       	smpsAlterNote       $08
00085CB6 E701                       	dc.b	smpsNoAttack, $01
00085CB8 E10B                       	smpsAlterNote       $0B
00085CBA E701                       	dc.b	smpsNoAttack, $01
00085CBC E10F                       	smpsAlterNote       $0F
00085CBE E701                       	dc.b	smpsNoAttack, $01
00085CC0 E10B                       	smpsAlterNote       $0B
00085CC2 E701                       	dc.b	smpsNoAttack, $01
00085CC4 E105                       	smpsAlterNote       $05
00085CC6 E701                       	dc.b	smpsNoAttack, $01
00085CC8 E104                       	smpsAlterNote       $04
00085CCA E701                       	dc.b	smpsNoAttack, $01
00085CCC E108                       	smpsAlterNote       $08
00085CCE E701                       	dc.b	smpsNoAttack, $01
00085CD0 E10E                       	smpsAlterNote       $0E
00085CD2 E701                       	dc.b	smpsNoAttack, $01
00085CD4 E10F                       	smpsAlterNote       $0F
00085CD6 8001                       	dc.b	nRst, $01
00085CD8 E109                       	smpsAlterNote       $09
00085CDA C20D                       	dc.b	nF5, $0D
00085CDC E106                       	smpsAlterNote       $06
00085CDE E701                       	dc.b	smpsNoAttack, $01
00085CE0 E102                       	smpsAlterNote       $02
00085CE2 E701                       	dc.b	smpsNoAttack, $01
00085CE4 E106                       	smpsAlterNote       $06
00085CE6 E701                       	dc.b	smpsNoAttack, $01
00085CE8 E109                       	smpsAlterNote       $09
00085CEA E701                       	dc.b	smpsNoAttack, $01
00085CEC E10D                       	smpsAlterNote       $0D
00085CEE E701                       	dc.b	smpsNoAttack, $01
00085CF0 E109                       	smpsAlterNote       $09
00085CF2 E701                       	dc.b	smpsNoAttack, $01
00085CF4 E103                       	smpsAlterNote       $03
00085CF6 E701                       	dc.b	smpsNoAttack, $01
00085CF8 E102                       	smpsAlterNote       $02
00085CFA E701                       	dc.b	smpsNoAttack, $01
00085CFC E106                       	smpsAlterNote       $06
00085CFE E701                       	dc.b	smpsNoAttack, $01
00085D00 E10C                       	smpsAlterNote       $0C
00085D02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D06 E109                       	smpsAlterNote       $09
00085D08 E701                       	dc.b	smpsNoAttack, $01
00085D0A E103                       	smpsAlterNote       $03
00085D0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D10 E109                       	smpsAlterNote       $09
00085D12 E701                       	dc.b	smpsNoAttack, $01
00085D14 E10C                       	smpsAlterNote       $0C
00085D16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D1A E106                       	smpsAlterNote       $06
00085D1C E701                       	dc.b	smpsNoAttack, $01
00085D1E E102                       	smpsAlterNote       $02
00085D20 E701                       	dc.b	smpsNoAttack, $01
00085D22 E103                       	smpsAlterNote       $03
00085D24 E701                       	dc.b	smpsNoAttack, $01
00085D26 E109                       	smpsAlterNote       $09
00085D28 E701                       	dc.b	smpsNoAttack, $01
00085D2A E10D                       	smpsAlterNote       $0D
00085D2C E701                       	dc.b	smpsNoAttack, $01
00085D2E E109                       	smpsAlterNote       $09
00085D30 E701                       	dc.b	smpsNoAttack, $01
00085D32 E106                       	smpsAlterNote       $06
00085D34 E701                       	dc.b	smpsNoAttack, $01
00085D36 E102                       	smpsAlterNote       $02
00085D38 E701                       	dc.b	smpsNoAttack, $01
00085D3A E106                       	smpsAlterNote       $06
00085D3C E701                       	dc.b	smpsNoAttack, $01
00085D3E E10C                       	smpsAlterNote       $0C
00085D40 E701                       	dc.b	smpsNoAttack, $01
00085D42 E10D                       	smpsAlterNote       $0D
00085D44 E701                       	dc.b	smpsNoAttack, $01
00085D46 E109                       	smpsAlterNote       $09
00085D48 E701                       	dc.b	smpsNoAttack, $01
00085D4A E103                       	smpsAlterNote       $03
00085D4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D50 E106                       	smpsAlterNote       $06
00085D52 E701                       	dc.b	smpsNoAttack, $01
00085D54 E10C                       	smpsAlterNote       $0C
00085D56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D5A E106                       	smpsAlterNote       $06
00085D5C E701                       	dc.b	smpsNoAttack, $01
00085D5E E103                       	smpsAlterNote       $03
00085D60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D64 E109                       	smpsAlterNote       $09
00085D66 E701                       	dc.b	smpsNoAttack, $01
00085D68 E10D                       	smpsAlterNote       $0D
00085D6A E701                       	dc.b	smpsNoAttack, $01
00085D6C E10C                       	smpsAlterNote       $0C
00085D6E E701                       	dc.b	smpsNoAttack, $01
00085D70 E106                       	smpsAlterNote       $06
00085D72 E701                       	dc.b	smpsNoAttack, $01
00085D74 E103                       	smpsAlterNote       $03
00085D76 8001                       	dc.b	nRst, $01
00085D78 E109                       	smpsAlterNote       $09
00085D7A C206 8001                  	dc.b	nF5, $06, nRst, $01
00085D80 E10C                       	smpsAlterNote       $0C
00085D82 E601                       	smpsAlterVol        $01
00085D84 BB0D                       	dc.b	nBb4, $0D
00085D86 E106                       	smpsAlterNote       $06
00085D88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D8C E109                       	smpsAlterNote       $09
00085D8E E701                       	dc.b	smpsNoAttack, $01
00085D90 E10F                       	smpsAlterNote       $0F
00085D92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D96 E109                       	smpsAlterNote       $09
00085D98 E701                       	dc.b	smpsNoAttack, $01
00085D9A E106                       	smpsAlterNote       $06
00085D9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DA0 E10C                       	smpsAlterNote       $0C
00085DA2 E701                       	dc.b	smpsNoAttack, $01
00085DA4 E110                       	smpsAlterNote       $10
00085DA6 E701                       	dc.b	smpsNoAttack, $01
00085DA8 E10F                       	smpsAlterNote       $0F
00085DAA E701                       	dc.b	smpsNoAttack, $01
00085DAC E109                       	smpsAlterNote       $09
00085DAE E701                       	dc.b	smpsNoAttack, $01
00085DB0 E105                       	smpsAlterNote       $05
00085DB2 E701                       	dc.b	smpsNoAttack, $01
00085DB4 E106                       	smpsAlterNote       $06
00085DB6 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00085DBA E103                       	smpsAlterNote       $03
00085DBC E701                       	dc.b	smpsNoAttack, $01
00085DBE E1FF                       	smpsAlterNote       $FF
00085DC0 E701                       	dc.b	smpsNoAttack, $01
00085DC2 E103                       	smpsAlterNote       $03
00085DC4 E701                       	dc.b	smpsNoAttack, $01
00085DC6 E106                       	smpsAlterNote       $06
00085DC8 E701                       	dc.b	smpsNoAttack, $01
00085DCA E10A                       	smpsAlterNote       $0A
00085DCC E701                       	dc.b	smpsNoAttack, $01
00085DCE E106                       	smpsAlterNote       $06
00085DD0 E701                       	dc.b	smpsNoAttack, $01
00085DD2 E100                       	smpsAlterNote       $00
00085DD4 E701                       	dc.b	smpsNoAttack, $01
00085DD6 E1FF                       	smpsAlterNote       $FF
00085DD8 E701                       	dc.b	smpsNoAttack, $01
00085DDA E103                       	smpsAlterNote       $03
00085DDC E701                       	dc.b	smpsNoAttack, $01
00085DDE E109                       	smpsAlterNote       $09
00085DE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DE4 E106                       	smpsAlterNote       $06
00085DE6 E701                       	dc.b	smpsNoAttack, $01
00085DE8 E100                       	smpsAlterNote       $00
00085DEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DEE E107                       	smpsAlterNote       $07
00085DF0 BF0E                       	dc.b	nD5, $0E
00085DF2 E101                       	smpsAlterNote       $01
00085DF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DF8 E107                       	smpsAlterNote       $07
00085DFA E701                       	dc.b	smpsNoAttack, $01
00085DFC E10A                       	smpsAlterNote       $0A
00085DFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E02 E104                       	smpsAlterNote       $04
00085E04 E701                       	dc.b	smpsNoAttack, $01
00085E06 E100                       	smpsAlterNote       $00
00085E08 E701                       	dc.b	smpsNoAttack, $01
00085E0A E101                       	smpsAlterNote       $01
00085E0C E701                       	dc.b	smpsNoAttack, $01
00085E0E E107                       	smpsAlterNote       $07
00085E10 E701                       	dc.b	smpsNoAttack, $01
00085E12 E10B                       	smpsAlterNote       $0B
00085E14 E701                       	dc.b	smpsNoAttack, $01
00085E16 E107                       	smpsAlterNote       $07
00085E18 E701                       	dc.b	smpsNoAttack, $01
00085E1A E104                       	smpsAlterNote       $04
00085E1C E701                       	dc.b	smpsNoAttack, $01
00085E1E E100                       	smpsAlterNote       $00
00085E20 E701                       	dc.b	smpsNoAttack, $01
00085E22 E101                       	smpsAlterNote       $01
00085E24 8001                       	dc.b	nRst, $01
00085E26 E108                       	smpsAlterNote       $08
00085E28 C10C                       	dc.b	nE5, $0C
00085E2A E109                       	smpsAlterNote       $09
00085E2C C201 8001                  	dc.b	nF5, $01, nRst, $01
00085E30 E10A                       	smpsAlterNote       $0A
00085E32 8001                       	dc.b	nRst, $01
00085E34 E109                       	smpsAlterNote       $09
00085E36 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00085E3A E106                       	smpsAlterNote       $06
00085E3C E701                       	dc.b	smpsNoAttack, $01
00085E3E E102                       	smpsAlterNote       $02
00085E40 E701                       	dc.b	smpsNoAttack, $01
00085E42 E103                       	smpsAlterNote       $03
00085E44 E701                       	dc.b	smpsNoAttack, $01
00085E46 E109                       	smpsAlterNote       $09
00085E48 E701                       	dc.b	smpsNoAttack, $01
00085E4A E10D                       	smpsAlterNote       $0D
00085E4C E701                       	dc.b	smpsNoAttack, $01
00085E4E E109                       	smpsAlterNote       $09
00085E50 E701                       	dc.b	smpsNoAttack, $01
00085E52 E106                       	smpsAlterNote       $06
00085E54 E701                       	dc.b	smpsNoAttack, $01
00085E56 E102                       	smpsAlterNote       $02
00085E58 E701                       	dc.b	smpsNoAttack, $01
00085E5A E106                       	smpsAlterNote       $06
00085E5C E701                       	dc.b	smpsNoAttack, $01
00085E5E E10C                       	smpsAlterNote       $0C
00085E60 E701                       	dc.b	smpsNoAttack, $01
00085E62 E10D                       	smpsAlterNote       $0D
00085E64 E701                       	dc.b	smpsNoAttack, $01
00085E66 E109                       	smpsAlterNote       $09
00085E68 C40D                       	dc.b	nG5, $0D
00085E6A E106                       	smpsAlterNote       $06
00085E6C E701                       	dc.b	smpsNoAttack, $01
00085E6E E102                       	smpsAlterNote       $02
00085E70 E701                       	dc.b	smpsNoAttack, $01
00085E72 E103                       	smpsAlterNote       $03
00085E74 E701                       	dc.b	smpsNoAttack, $01
00085E76 E109                       	smpsAlterNote       $09
00085E78 E701                       	dc.b	smpsNoAttack, $01
00085E7A E108                       	smpsAlterNote       $08
00085E7C C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00085E88 E109                       	smpsAlterNote       $09
00085E8A C20D                       	dc.b	nF5, $0D
00085E8C E106                       	smpsAlterNote       $06
00085E8E E701                       	dc.b	smpsNoAttack, $01
00085E90 E102                       	smpsAlterNote       $02
00085E92 E701                       	dc.b	smpsNoAttack, $01
00085E94 E106                       	smpsAlterNote       $06
00085E96 E701                       	dc.b	smpsNoAttack, $01
00085E98 E109                       	smpsAlterNote       $09
00085E9A E701                       	dc.b	smpsNoAttack, $01
00085E9C E10D                       	smpsAlterNote       $0D
00085E9E E701                       	dc.b	smpsNoAttack, $01
00085EA0 E109                       	smpsAlterNote       $09
00085EA2 E701                       	dc.b	smpsNoAttack, $01
00085EA4 E103                       	smpsAlterNote       $03
00085EA6 E701                       	dc.b	smpsNoAttack, $01
00085EA8 E102                       	smpsAlterNote       $02
00085EAA E701                       	dc.b	smpsNoAttack, $01
00085EAC E106                       	smpsAlterNote       $06
00085EAE E701                       	dc.b	smpsNoAttack, $01
00085EB0 E10C                       	smpsAlterNote       $0C
00085EB2 E701                       	dc.b	smpsNoAttack, $01
00085EB4 E10D                       	smpsAlterNote       $0D
00085EB6 8001                       	dc.b	nRst, $01
00085EB8 E112                       	smpsAlterNote       $12
00085EBA C401                       	dc.b	nG5, $01
00085EBC E1EB                       	smpsAlterNote       $EB
00085EBE E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00085EC1 E1FD                       	smpsAlterNote       $FD
00085EC3 E701                       	dc.b	smpsNoAttack, $01
00085EC5 E10F                       	smpsAlterNote       $0F
00085EC7 E701                       	dc.b	smpsNoAttack, $01
00085EC9 E118                       	smpsAlterNote       $18
00085ECB E701                       	dc.b	smpsNoAttack, $01
00085ECD E1ED                       	smpsAlterNote       $ED
00085ECF E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00085ED2 E1FF                       	smpsAlterNote       $FF
00085ED4 E701                       	dc.b	smpsNoAttack, $01
00085ED6 E10B                       	smpsAlterNote       $0B
00085ED8 E703                       	dc.b	smpsNoAttack, $03
00085EDA E109                       	smpsAlterNote       $09
00085EDC C407                       	dc.b	nG5, $07
00085EDE E108                       	smpsAlterNote       $08
00085EE0 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00085EEC E109                       	smpsAlterNote       $09
00085EEE C20D                       	dc.b	nF5, $0D
00085EF0 E103                       	smpsAlterNote       $03
00085EF2 E701                       	dc.b	smpsNoAttack, $01
00085EF4 E102                       	smpsAlterNote       $02
00085EF6 E701                       	dc.b	smpsNoAttack, $01
00085EF8 E106                       	smpsAlterNote       $06
00085EFA E701                       	dc.b	smpsNoAttack, $01
00085EFC E10C                       	smpsAlterNote       $0C
00085EFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F02 E109                       	smpsAlterNote       $09
00085F04 E701                       	dc.b	smpsNoAttack, $01
00085F06 E103                       	smpsAlterNote       $03
00085F08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F0C E109                       	smpsAlterNote       $09
00085F0E E701                       	dc.b	smpsNoAttack, $01
00085F10 E10C                       	smpsAlterNote       $0C
00085F12 E701                       	dc.b	smpsNoAttack, $01
00085F14 E10D                       	smpsAlterNote       $0D
00085F16 8001                       	dc.b	nRst, $01
00085F18 E10B                       	smpsAlterNote       $0B
00085F1A C609 8001                  	dc.b	nA5, $09, nRst, $01
00085F1E E109                       	smpsAlterNote       $09
00085F20 B806 8001                  	dc.b	nG4, $06, nRst, $01
00085F24 E108                       	smpsAlterNote       $08
00085F26 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00085F32 8001                       	dc.b	nRst, $01
00085F34 E109                       	smpsAlterNote       $09
00085F36 C20D                       	dc.b	nF5, $0D
00085F38 E103                       	smpsAlterNote       $03
00085F3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F3E E106                       	smpsAlterNote       $06
00085F40 E701                       	dc.b	smpsNoAttack, $01
00085F42 E10C                       	smpsAlterNote       $0C
00085F44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F48 E106                       	smpsAlterNote       $06
00085F4A E701                       	dc.b	smpsNoAttack, $01
00085F4C E103                       	smpsAlterNote       $03
00085F4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F52 E109                       	smpsAlterNote       $09
00085F54 E701                       	dc.b	smpsNoAttack, $01
00085F56 E10D                       	smpsAlterNote       $0D
00085F58 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085F5E E108                       	smpsAlterNote       $08
00085F60 E6FF                       	smpsAlterVol        $FF
00085F62 A806                       	dc.b	nEb3, $06
00085F64 E10C                       	smpsAlterNote       $0C
00085F66 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00085F6A E108                       	smpsAlterNote       $08
00085F6C A803                       	dc.b	nEb3, $03
00085F6E E109                       	smpsAlterNote       $09
00085F70 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00085F74 E10C                       	smpsAlterNote       $0C
00085F76 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00085F80 E109                       	smpsAlterNote       $09
00085F82 E602                       	smpsAlterVol        $02
00085F84 B604                       	dc.b	nF4, $04
00085F86 E602                       	smpsAlterVol        $02
00085F88 F6F1 AA                    	smpsJump            music84_Jump02
00085F8B                            
00085F8B                            ; FM4 Data
00085F8B                            music84_FM4:
00085F8D E040                       	smpsPan             panRight, $00
00085F8F 8003                       	dc.b	nRst, $03
00085F91 E10F                       	smpsAlterNote       $0F
00085F93 C603 8008                  	dc.b	nA5, $03, nRst, $08
00085F97 E10D                       	smpsAlterNote       $0D
00085F99 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00085F9D E10C                       	smpsAlterNote       $0C
00085F9F C103 8004                  	dc.b	nE5, $03, nRst, $04
00085FA5 E6FE                       	smpsAlterVol        $FE
00085FA7 E110                       	smpsAlterNote       $10
00085FA9 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00085FAD E10F                       	smpsAlterNote       $0F
00085FAF C602 8001                  	dc.b	nA5, $02, nRst, $01
00085FB3 E10D                       	smpsAlterNote       $0D
00085FB5 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00085FBE E10C                       	smpsAlterNote       $0C
00085FC0 C103                       	dc.b	nE5, $03
00085FC2 E10A                       	smpsAlterNote       $0A
00085FC4 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00085FCA 03                         	dc.b	$03
00085FCB                            
00085FCB                            music84_Jump01:
00085FCB E10B                       	smpsAlterNote       $0B
00085FCD BF03 8001                  	dc.b	nD5, $03, nRst, $01
00085FD1 E10C                       	smpsAlterNote       $0C
00085FD3 C102 8001                  	dc.b	nE5, $02, nRst, $01
00085FD7 E10D                       	smpsAlterNote       $0D
00085FD9 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00085FE3 E10B                       	smpsAlterNote       $0B
00085FE5 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00085FE9 E107                       	smpsAlterNote       $07
00085FEB E701                       	dc.b	smpsNoAttack, $01
00085FED E103                       	smpsAlterNote       $03
00085FEF E701                       	dc.b	smpsNoAttack, $01
00085FF1 E104                       	smpsAlterNote       $04
00085FF3 E701                       	dc.b	smpsNoAttack, $01
00085FF5 E10A                       	smpsAlterNote       $0A
00085FF7 E701                       	dc.b	smpsNoAttack, $01
00085FF9 E10E                       	smpsAlterNote       $0E
00085FFB E701                       	dc.b	smpsNoAttack, $01
00085FFD E10A                       	smpsAlterNote       $0A
00085FFF E701                       	dc.b	smpsNoAttack, $01
00086001 E107                       	smpsAlterNote       $07
00086003 E701                       	dc.b	smpsNoAttack, $01
00086005 E104                       	smpsAlterNote       $04
00086007 8001                       	dc.b	nRst, $01
00086009 E110                       	smpsAlterNote       $10
0008600B C703                       	dc.b	nBb5, $03
0008600D E10F                       	smpsAlterNote       $0F
0008600F C603 8001                  	dc.b	nA5, $03, nRst, $01
00086013 E10D                       	smpsAlterNote       $0D
00086015 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008601B E10C                       	smpsAlterNote       $0C
0008601D E701                       	dc.b	smpsNoAttack, $01
0008601F E108                       	smpsAlterNote       $08
00086021 E701                       	dc.b	smpsNoAttack, $01
00086023 E10C                       	smpsAlterNote       $0C
00086025 E701                       	dc.b	smpsNoAttack, $01
00086027 E10F                       	smpsAlterNote       $0F
00086029 E701                       	dc.b	smpsNoAttack, $01
0008602B E113                       	smpsAlterNote       $13
0008602D E701                       	dc.b	smpsNoAttack, $01
0008602F E10F                       	smpsAlterNote       $0F
00086031 E701                       	dc.b	smpsNoAttack, $01
00086033 E109                       	smpsAlterNote       $09
00086035 E701                       	dc.b	smpsNoAttack, $01
00086037 E108                       	smpsAlterNote       $08
00086039 E701                       	dc.b	smpsNoAttack, $01
0008603B E10C                       	smpsAlterNote       $0C
0008603D E701                       	dc.b	smpsNoAttack, $01
0008603F E112                       	smpsAlterNote       $12
00086041 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086045 E10C                       	smpsAlterNote       $0C
00086047 E701                       	dc.b	smpsNoAttack, $01
00086049 E109                       	smpsAlterNote       $09
0008604B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008604F E10F                       	smpsAlterNote       $0F
00086051 E701                       	dc.b	smpsNoAttack, $01
00086053 E113                       	smpsAlterNote       $13
00086055 E701                       	dc.b	smpsNoAttack, $01
00086057 E112                       	smpsAlterNote       $12
00086059 E701                       	dc.b	smpsNoAttack, $01
0008605B E10C                       	smpsAlterNote       $0C
0008605D E701                       	dc.b	smpsNoAttack, $01
0008605F E108                       	smpsAlterNote       $08
00086061 E701                       	dc.b	smpsNoAttack, $01
00086063 E10C                       	smpsAlterNote       $0C
00086065 E701                       	dc.b	smpsNoAttack, $01
00086067 E10F                       	smpsAlterNote       $0F
00086069 E701                       	dc.b	smpsNoAttack, $01
0008606B E113                       	smpsAlterNote       $13
0008606D E701                       	dc.b	smpsNoAttack, $01
0008606F E10F                       	smpsAlterNote       $0F
00086071 E701                       	dc.b	smpsNoAttack, $01
00086073 E109                       	smpsAlterNote       $09
00086075 E701                       	dc.b	smpsNoAttack, $01
00086077 E108                       	smpsAlterNote       $08
00086079 E701                       	dc.b	smpsNoAttack, $01
0008607B E10C                       	smpsAlterNote       $0C
0008607D E701                       	dc.b	smpsNoAttack, $01
0008607F E112                       	smpsAlterNote       $12
00086081 E701                       	dc.b	smpsNoAttack, $01
00086083 E113                       	smpsAlterNote       $13
00086085 800F                       	dc.b	nRst, $0F
00086087 E10B                       	smpsAlterNote       $0B
00086089 BF03                       	dc.b	nD5, $03
0008608B E10C                       	smpsAlterNote       $0C
0008608D C103 8001                  	dc.b	nE5, $03, nRst, $01
00086091 E10D                       	smpsAlterNote       $0D
00086093 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008609B E10B                       	smpsAlterNote       $0B
0008609D BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
000860A7 E110                       	smpsAlterNote       $10
000860A9 C704                       	dc.b	nBb5, $04
000860AB E10F                       	smpsAlterNote       $0F
000860AD C604 8001                  	dc.b	nA5, $04, nRst, $01
000860B1 E10D                       	smpsAlterNote       $0D
000860B3 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000860B9 E109                       	smpsAlterNote       $09
000860BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860BF E10F                       	smpsAlterNote       $0F
000860C1 E701                       	dc.b	smpsNoAttack, $01
000860C3 E112                       	smpsAlterNote       $12
000860C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860C9 E10C                       	smpsAlterNote       $0C
000860CB E701                       	dc.b	smpsNoAttack, $01
000860CD E108                       	smpsAlterNote       $08
000860CF E701                       	dc.b	smpsNoAttack, $01
000860D1 E109                       	smpsAlterNote       $09
000860D3 E701                       	dc.b	smpsNoAttack, $01
000860D5 E10F                       	smpsAlterNote       $0F
000860D7 E701                       	dc.b	smpsNoAttack, $01
000860D9 E113                       	smpsAlterNote       $13
000860DB E701                       	dc.b	smpsNoAttack, $01
000860DD E10F                       	smpsAlterNote       $0F
000860DF E701                       	dc.b	smpsNoAttack, $01
000860E1 E10C                       	smpsAlterNote       $0C
000860E3 E701                       	dc.b	smpsNoAttack, $01
000860E5 E108                       	smpsAlterNote       $08
000860E7 E701                       	dc.b	smpsNoAttack, $01
000860E9 E10C                       	smpsAlterNote       $0C
000860EB E701                       	dc.b	smpsNoAttack, $01
000860ED E112                       	smpsAlterNote       $12
000860EF E701                       	dc.b	smpsNoAttack, $01
000860F1 E113                       	smpsAlterNote       $13
000860F3 E701                       	dc.b	smpsNoAttack, $01
000860F5 E10F                       	smpsAlterNote       $0F
000860F7 E701                       	dc.b	smpsNoAttack, $01
000860F9 E109                       	smpsAlterNote       $09
000860FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860FF E10C                       	smpsAlterNote       $0C
00086101 E701                       	dc.b	smpsNoAttack, $01
00086103 E112                       	smpsAlterNote       $12
00086105 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086109 E10C                       	smpsAlterNote       $0C
0008610B E701                       	dc.b	smpsNoAttack, $01
0008610D E109                       	smpsAlterNote       $09
0008610F E701                       	dc.b	smpsNoAttack, $01
00086111 E10D                       	smpsAlterNote       $0D
00086113 C401 8001                  	dc.b	nG5, $01, nRst, $01
00086117 E10F                       	smpsAlterNote       $0F
00086119 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00086123 E10D                       	smpsAlterNote       $0D
00086125 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008612B E10B                       	smpsAlterNote       $0B
0008612D BF0D                       	dc.b	nD5, $0D
0008612F E108                       	smpsAlterNote       $08
00086131 E701                       	dc.b	smpsNoAttack, $01
00086133 E104                       	smpsAlterNote       $04
00086135 E701                       	dc.b	smpsNoAttack, $01
00086137 E108                       	smpsAlterNote       $08
00086139 E701                       	dc.b	smpsNoAttack, $01
0008613B E10B                       	smpsAlterNote       $0B
0008613D E701                       	dc.b	smpsNoAttack, $01
0008613F E10F                       	smpsAlterNote       $0F
00086141 E701                       	dc.b	smpsNoAttack, $01
00086143 E10B                       	smpsAlterNote       $0B
00086145 E701                       	dc.b	smpsNoAttack, $01
00086147 E105                       	smpsAlterNote       $05
00086149 E701                       	dc.b	smpsNoAttack, $01
0008614B E104                       	smpsAlterNote       $04
0008614D E701                       	dc.b	smpsNoAttack, $01
0008614F E108                       	smpsAlterNote       $08
00086151 E701                       	dc.b	smpsNoAttack, $01
00086153 E10E                       	smpsAlterNote       $0E
00086155 E701                       	dc.b	smpsNoAttack, $01
00086157 E10F                       	smpsAlterNote       $0F
00086159 8001                       	dc.b	nRst, $01
0008615B E10C                       	smpsAlterNote       $0C
0008615D C101                       	dc.b	nE5, $01
0008615F E10D                       	smpsAlterNote       $0D
00086161 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00086167 E10F                       	smpsAlterNote       $0F
00086169 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008616D E10C                       	smpsAlterNote       $0C
0008616F CD06 8001                  	dc.b	nE6, $06, nRst, $01
00086173 E10D                       	smpsAlterNote       $0D
00086175 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00086179 E10C                       	smpsAlterNote       $0C
0008617B CD03                       	dc.b	nE6, $03
0008617D E10A                       	smpsAlterNote       $0A
0008617F C903 8001                  	dc.b	nC6, $03, nRst, $01
00086183 E10D                       	smpsAlterNote       $0D
00086185 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008618D E109                       	smpsAlterNote       $09
0008618F E701                       	dc.b	smpsNoAttack, $01
00086191 E10D                       	smpsAlterNote       $0D
00086193 E701                       	dc.b	smpsNoAttack, $01
00086195 E110                       	smpsAlterNote       $10
00086197 E701                       	dc.b	smpsNoAttack, $01
00086199 E114                       	smpsAlterNote       $14
0008619B E701                       	dc.b	smpsNoAttack, $01
0008619D E110                       	smpsAlterNote       $10
0008619F E701                       	dc.b	smpsNoAttack, $01
000861A1 E10A                       	smpsAlterNote       $0A
000861A3 E701                       	dc.b	smpsNoAttack, $01
000861A5 E109                       	smpsAlterNote       $09
000861A7 E701                       	dc.b	smpsNoAttack, $01
000861A9 E10D                       	smpsAlterNote       $0D
000861AB E701                       	dc.b	smpsNoAttack, $01
000861AD E113                       	smpsAlterNote       $13
000861AF E701                       	dc.b	smpsNoAttack, $01
000861B1 E114                       	smpsAlterNote       $14
000861B3 8001                       	dc.b	nRst, $01
000861B5 E10F                       	smpsAlterNote       $0F
000861B7 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000861BD E10C                       	smpsAlterNote       $0C
000861BF E701                       	dc.b	smpsNoAttack, $01
000861C1 E108                       	smpsAlterNote       $08
000861C3 E701                       	dc.b	smpsNoAttack, $01
000861C5 E10C                       	smpsAlterNote       $0C
000861C7 E701                       	dc.b	smpsNoAttack, $01
000861C9 E112                       	smpsAlterNote       $12
000861CB E701                       	dc.b	smpsNoAttack, $01
000861CD E113                       	smpsAlterNote       $13
000861CF E701                       	dc.b	smpsNoAttack, $01
000861D1 E10F                       	smpsAlterNote       $0F
000861D3 E701                       	dc.b	smpsNoAttack, $01
000861D5 E109                       	smpsAlterNote       $09
000861D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861DB E10C                       	smpsAlterNote       $0C
000861DD E701                       	dc.b	smpsNoAttack, $01
000861DF E112                       	smpsAlterNote       $12
000861E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861E5 E10C                       	smpsAlterNote       $0C
000861E7 E701                       	dc.b	smpsNoAttack, $01
000861E9 E109                       	smpsAlterNote       $09
000861EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861EF E10F                       	smpsAlterNote       $0F
000861F1 E701                       	dc.b	smpsNoAttack, $01
000861F3 E113                       	smpsAlterNote       $13
000861F5 E701                       	dc.b	smpsNoAttack, $01
000861F7 E112                       	smpsAlterNote       $12
000861F9 E701                       	dc.b	smpsNoAttack, $01
000861FB E10C                       	smpsAlterNote       $0C
000861FD E701                       	dc.b	smpsNoAttack, $01
000861FF E108                       	smpsAlterNote       $08
00086201 E701                       	dc.b	smpsNoAttack, $01
00086203 E10C                       	smpsAlterNote       $0C
00086205 E701                       	dc.b	smpsNoAttack, $01
00086207 E10F                       	smpsAlterNote       $0F
00086209 E701                       	dc.b	smpsNoAttack, $01
0008620B E113                       	smpsAlterNote       $13
0008620D E701                       	dc.b	smpsNoAttack, $01
0008620F E10F                       	smpsAlterNote       $0F
00086211 E701                       	dc.b	smpsNoAttack, $01
00086213 E109                       	smpsAlterNote       $09
00086215 E701                       	dc.b	smpsNoAttack, $01
00086217 E108                       	smpsAlterNote       $08
00086219 E701                       	dc.b	smpsNoAttack, $01
0008621B E10C                       	smpsAlterNote       $0C
0008621D E701                       	dc.b	smpsNoAttack, $01
0008621F E112                       	smpsAlterNote       $12
00086221 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086225 E10F                       	smpsAlterNote       $0F
00086227 E701                       	dc.b	smpsNoAttack, $01
00086229 E109                       	smpsAlterNote       $09
0008622B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008622F E10F                       	smpsAlterNote       $0F
00086231 E701                       	dc.b	smpsNoAttack, $01
00086233 E113                       	smpsAlterNote       $13
00086235 E701                       	dc.b	smpsNoAttack, $01
00086237 E112                       	smpsAlterNote       $12
00086239 E701                       	dc.b	smpsNoAttack, $01
0008623B E10C                       	smpsAlterNote       $0C
0008623D E701                       	dc.b	smpsNoAttack, $01
0008623F E108                       	smpsAlterNote       $08
00086241 E701                       	dc.b	smpsNoAttack, $01
00086243 E10C                       	smpsAlterNote       $0C
00086245 E701                       	dc.b	smpsNoAttack, $01
00086247 E10F                       	smpsAlterNote       $0F
00086249 E701                       	dc.b	smpsNoAttack, $01
0008624B E113                       	smpsAlterNote       $13
0008624D E701                       	dc.b	smpsNoAttack, $01
0008624F E10F                       	smpsAlterNote       $0F
00086251 E701                       	dc.b	smpsNoAttack, $01
00086253 E109                       	smpsAlterNote       $09
00086255 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086259 E10F                       	smpsAlterNote       $0F
0008625B C60D                       	dc.b	nA5, $0D
0008625D E109                       	smpsAlterNote       $09
0008625F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086263 E10C                       	smpsAlterNote       $0C
00086265 E701                       	dc.b	smpsNoAttack, $01
00086267 E112                       	smpsAlterNote       $12
00086269 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008626D E10C                       	smpsAlterNote       $0C
0008626F E701                       	dc.b	smpsNoAttack, $01
00086271 E109                       	smpsAlterNote       $09
00086273 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086277 E10F                       	smpsAlterNote       $0F
00086279 E701                       	dc.b	smpsNoAttack, $01
0008627B E113                       	smpsAlterNote       $13
0008627D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086283 E10D                       	smpsAlterNote       $0D
00086285 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008628D E10C                       	smpsAlterNote       $0C
0008628F C103 800E                  	dc.b	nE5, $03, nRst, $0E
00086295 E6FF                       	smpsAlterVol        $FF
00086297 E10B                       	smpsAlterNote       $0B
00086299 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008629D E10C                       	smpsAlterNote       $0C
0008629F C103                       	dc.b	nE5, $03
000862A1 E10D                       	smpsAlterNote       $0D
000862A3 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000862AD E10B                       	smpsAlterNote       $0B
000862AF BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000862B3 E107                       	smpsAlterNote       $07
000862B5 E701                       	dc.b	smpsNoAttack, $01
000862B7 E104                       	smpsAlterNote       $04
000862B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862BD E10A                       	smpsAlterNote       $0A
000862BF E701                       	dc.b	smpsNoAttack, $01
000862C1 E10D                       	smpsAlterNote       $0D
000862C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862C7 E107                       	smpsAlterNote       $07
000862C9 E701                       	dc.b	smpsNoAttack, $01
000862CB E104                       	smpsAlterNote       $04
000862CD 8001                       	dc.b	nRst, $01
000862CF E110                       	smpsAlterNote       $10
000862D1 C703                       	dc.b	nBb5, $03
000862D3 E10F                       	smpsAlterNote       $0F
000862D5 C603 8001                  	dc.b	nA5, $03, nRst, $01
000862D9 E10D                       	smpsAlterNote       $0D
000862DB C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000862DF E10C                       	smpsAlterNote       $0C
000862E1 E701                       	dc.b	smpsNoAttack, $01
000862E3 E108                       	smpsAlterNote       $08
000862E5 E701                       	dc.b	smpsNoAttack, $01
000862E7 E109                       	smpsAlterNote       $09
000862E9 E701                       	dc.b	smpsNoAttack, $01
000862EB E10F                       	smpsAlterNote       $0F
000862ED E701                       	dc.b	smpsNoAttack, $01
000862EF E113                       	smpsAlterNote       $13
000862F1 E701                       	dc.b	smpsNoAttack, $01
000862F3 E10F                       	smpsAlterNote       $0F
000862F5 E701                       	dc.b	smpsNoAttack, $01
000862F7 E10C                       	smpsAlterNote       $0C
000862F9 E701                       	dc.b	smpsNoAttack, $01
000862FB E108                       	smpsAlterNote       $08
000862FD E701                       	dc.b	smpsNoAttack, $01
000862FF E10C                       	smpsAlterNote       $0C
00086301 E701                       	dc.b	smpsNoAttack, $01
00086303 E112                       	smpsAlterNote       $12
00086305 E701                       	dc.b	smpsNoAttack, $01
00086307 E113                       	smpsAlterNote       $13
00086309 E701                       	dc.b	smpsNoAttack, $01
0008630B E10F                       	smpsAlterNote       $0F
0008630D E701                       	dc.b	smpsNoAttack, $01
0008630F E109                       	smpsAlterNote       $09
00086311 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086315 E10C                       	smpsAlterNote       $0C
00086317 E701                       	dc.b	smpsNoAttack, $01
00086319 E112                       	smpsAlterNote       $12
0008631B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008631F E10C                       	smpsAlterNote       $0C
00086321 E701                       	dc.b	smpsNoAttack, $01
00086323 E109                       	smpsAlterNote       $09
00086325 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086329 E10F                       	smpsAlterNote       $0F
0008632B E701                       	dc.b	smpsNoAttack, $01
0008632D E113                       	smpsAlterNote       $13
0008632F E701                       	dc.b	smpsNoAttack, $01
00086331 E112                       	smpsAlterNote       $12
00086333 E701                       	dc.b	smpsNoAttack, $01
00086335 E10C                       	smpsAlterNote       $0C
00086337 E701                       	dc.b	smpsNoAttack, $01
00086339 E108                       	smpsAlterNote       $08
0008633B E701                       	dc.b	smpsNoAttack, $01
0008633D E10C                       	smpsAlterNote       $0C
0008633F E701                       	dc.b	smpsNoAttack, $01
00086341 E10F                       	smpsAlterNote       $0F
00086343 E701                       	dc.b	smpsNoAttack, $01
00086345 E113                       	smpsAlterNote       $13
00086347 E701                       	dc.b	smpsNoAttack, $01
00086349 E10F                       	smpsAlterNote       $0F
0008634B BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008634F E110                       	smpsAlterNote       $10
00086351 BB03                       	dc.b	nBb4, $03
00086353 E10F                       	smpsAlterNote       $0F
00086355 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00086359 E10B                       	smpsAlterNote       $0B
0008635B BF03                       	dc.b	nD5, $03
0008635D E10C                       	smpsAlterNote       $0C
0008635F C103 8001                  	dc.b	nE5, $03, nRst, $01
00086363 E10D                       	smpsAlterNote       $0D
00086365 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008636F E10B                       	smpsAlterNote       $0B
00086371 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008637D E110                       	smpsAlterNote       $10
0008637F C704 8001                  	dc.b	nBb5, $04, nRst, $01
00086383 E10F                       	smpsAlterNote       $0F
00086385 C604                       	dc.b	nA5, $04
00086387 E10D                       	smpsAlterNote       $0D
00086389 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008638F E109                       	smpsAlterNote       $09
00086391 E701                       	dc.b	smpsNoAttack, $01
00086393 E108                       	smpsAlterNote       $08
00086395 E701                       	dc.b	smpsNoAttack, $01
00086397 E10C                       	smpsAlterNote       $0C
00086399 E701                       	dc.b	smpsNoAttack, $01
0008639B E112                       	smpsAlterNote       $12
0008639D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863A1 E10F                       	smpsAlterNote       $0F
000863A3 E701                       	dc.b	smpsNoAttack, $01
000863A5 E109                       	smpsAlterNote       $09
000863A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863AB E10F                       	smpsAlterNote       $0F
000863AD E701                       	dc.b	smpsNoAttack, $01
000863AF E112                       	smpsAlterNote       $12
000863B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863B5 E10C                       	smpsAlterNote       $0C
000863B7 E701                       	dc.b	smpsNoAttack, $01
000863B9 E108                       	smpsAlterNote       $08
000863BB E701                       	dc.b	smpsNoAttack, $01
000863BD E109                       	smpsAlterNote       $09
000863BF E701                       	dc.b	smpsNoAttack, $01
000863C1 E10F                       	smpsAlterNote       $0F
000863C3 E701                       	dc.b	smpsNoAttack, $01
000863C5 E113                       	smpsAlterNote       $13
000863C7 E701                       	dc.b	smpsNoAttack, $01
000863C9 E10F                       	smpsAlterNote       $0F
000863CB E701                       	dc.b	smpsNoAttack, $01
000863CD E10C                       	smpsAlterNote       $0C
000863CF E701                       	dc.b	smpsNoAttack, $01
000863D1 E108                       	smpsAlterNote       $08
000863D3 E701                       	dc.b	smpsNoAttack, $01
000863D5 E10C                       	smpsAlterNote       $0C
000863D7 E701                       	dc.b	smpsNoAttack, $01
000863D9 E112                       	smpsAlterNote       $12
000863DB E701                       	dc.b	smpsNoAttack, $01
000863DD E113                       	smpsAlterNote       $13
000863DF E701                       	dc.b	smpsNoAttack, $01
000863E1 E10F                       	smpsAlterNote       $0F
000863E3 E701                       	dc.b	smpsNoAttack, $01
000863E5 E109                       	smpsAlterNote       $09
000863E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863EB E10C                       	smpsAlterNote       $0C
000863ED E701                       	dc.b	smpsNoAttack, $01
000863EF E112                       	smpsAlterNote       $12
000863F1 E701                       	dc.b	smpsNoAttack, $01
000863F3 E113                       	smpsAlterNote       $13
000863F5 8001                       	dc.b	nRst, $01
000863F7 E10F                       	smpsAlterNote       $0F
000863F9 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00086405 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008640D E10D                       	smpsAlterNote       $0D
0008640F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00086415 E10B                       	smpsAlterNote       $0B
00086417 BF0D                       	dc.b	nD5, $0D
00086419 E108                       	smpsAlterNote       $08
0008641B E701                       	dc.b	smpsNoAttack, $01
0008641D E104                       	smpsAlterNote       $04
0008641F E701                       	dc.b	smpsNoAttack, $01
00086421 E105                       	smpsAlterNote       $05
00086423 E701                       	dc.b	smpsNoAttack, $01
00086425 E10B                       	smpsAlterNote       $0B
00086427 E701                       	dc.b	smpsNoAttack, $01
00086429 E10F                       	smpsAlterNote       $0F
0008642B E701                       	dc.b	smpsNoAttack, $01
0008642D E10B                       	smpsAlterNote       $0B
0008642F E701                       	dc.b	smpsNoAttack, $01
00086431 E108                       	smpsAlterNote       $08
00086433 E701                       	dc.b	smpsNoAttack, $01
00086435 E104                       	smpsAlterNote       $04
00086437 E701                       	dc.b	smpsNoAttack, $01
00086439 E108                       	smpsAlterNote       $08
0008643B E701                       	dc.b	smpsNoAttack, $01
0008643D E10E                       	smpsAlterNote       $0E
0008643F E701                       	dc.b	smpsNoAttack, $01
00086441 E10F                       	smpsAlterNote       $0F
00086443 E701                       	dc.b	smpsNoAttack, $01
00086445 E10C                       	smpsAlterNote       $0C
00086447 C101                       	dc.b	nE5, $01
00086449 E10D                       	smpsAlterNote       $0D
0008644B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00086453 E10F                       	smpsAlterNote       $0F
00086455 C607                       	dc.b	nA5, $07
00086457 E10C                       	smpsAlterNote       $0C
00086459 CD07                       	dc.b	nE6, $07
0008645B E10D                       	smpsAlterNote       $0D
0008645D CE06 8001                  	dc.b	nF6, $06, nRst, $01
00086461 E10C                       	smpsAlterNote       $0C
00086463 CD03                       	dc.b	nE6, $03
00086465 E10A                       	smpsAlterNote       $0A
00086467 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008646B E10D                       	smpsAlterNote       $0D
0008646D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00086473 E10A                       	smpsAlterNote       $0A
00086475 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086479 E110                       	smpsAlterNote       $10
0008647B E701                       	dc.b	smpsNoAttack, $01
0008647D E114                       	smpsAlterNote       $14
0008647F E701                       	dc.b	smpsNoAttack, $01
00086481 E113                       	smpsAlterNote       $13
00086483 E701                       	dc.b	smpsNoAttack, $01
00086485 E10D                       	smpsAlterNote       $0D
00086487 E701                       	dc.b	smpsNoAttack, $01
00086489 E109                       	smpsAlterNote       $09
0008648B E701                       	dc.b	smpsNoAttack, $01
0008648D E10D                       	smpsAlterNote       $0D
0008648F E701                       	dc.b	smpsNoAttack, $01
00086491 E110                       	smpsAlterNote       $10
00086493 E701                       	dc.b	smpsNoAttack, $01
00086495 E114                       	smpsAlterNote       $14
00086497 E701                       	dc.b	smpsNoAttack, $01
00086499 E10F                       	smpsAlterNote       $0F
0008649B C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008649F E10C                       	smpsAlterNote       $0C
000864A1 E701                       	dc.b	smpsNoAttack, $01
000864A3 E108                       	smpsAlterNote       $08
000864A5 E701                       	dc.b	smpsNoAttack, $01
000864A7 E10C                       	smpsAlterNote       $0C
000864A9 E701                       	dc.b	smpsNoAttack, $01
000864AB E10F                       	smpsAlterNote       $0F
000864AD E701                       	dc.b	smpsNoAttack, $01
000864AF E113                       	smpsAlterNote       $13
000864B1 E701                       	dc.b	smpsNoAttack, $01
000864B3 E10F                       	smpsAlterNote       $0F
000864B5 E701                       	dc.b	smpsNoAttack, $01
000864B7 E109                       	smpsAlterNote       $09
000864B9 E701                       	dc.b	smpsNoAttack, $01
000864BB E108                       	smpsAlterNote       $08
000864BD E701                       	dc.b	smpsNoAttack, $01
000864BF E10C                       	smpsAlterNote       $0C
000864C1 E701                       	dc.b	smpsNoAttack, $01
000864C3 E112                       	smpsAlterNote       $12
000864C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864C9 E10F                       	smpsAlterNote       $0F
000864CB E701                       	dc.b	smpsNoAttack, $01
000864CD E109                       	smpsAlterNote       $09
000864CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864D3 E10F                       	smpsAlterNote       $0F
000864D5 E701                       	dc.b	smpsNoAttack, $01
000864D7 E112                       	smpsAlterNote       $12
000864D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864DD E10C                       	smpsAlterNote       $0C
000864DF E701                       	dc.b	smpsNoAttack, $01
000864E1 E108                       	smpsAlterNote       $08
000864E3 E701                       	dc.b	smpsNoAttack, $01
000864E5 E109                       	smpsAlterNote       $09
000864E7 E701                       	dc.b	smpsNoAttack, $01
000864E9 E10F                       	smpsAlterNote       $0F
000864EB E701                       	dc.b	smpsNoAttack, $01
000864ED E113                       	smpsAlterNote       $13
000864EF E701                       	dc.b	smpsNoAttack, $01
000864F1 E10F                       	smpsAlterNote       $0F
000864F3 E701                       	dc.b	smpsNoAttack, $01
000864F5 E10C                       	smpsAlterNote       $0C
000864F7 E701                       	dc.b	smpsNoAttack, $01
000864F9 E108                       	smpsAlterNote       $08
000864FB E701                       	dc.b	smpsNoAttack, $01
000864FD E10C                       	smpsAlterNote       $0C
000864FF E701                       	dc.b	smpsNoAttack, $01
00086501 E112                       	smpsAlterNote       $12
00086503 E701                       	dc.b	smpsNoAttack, $01
00086505 E113                       	smpsAlterNote       $13
00086507 E701                       	dc.b	smpsNoAttack, $01
00086509 E10F                       	smpsAlterNote       $0F
0008650B E701                       	dc.b	smpsNoAttack, $01
0008650D E109                       	smpsAlterNote       $09
0008650F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086513 E10C                       	smpsAlterNote       $0C
00086515 E701                       	dc.b	smpsNoAttack, $01
00086517 E112                       	smpsAlterNote       $12
00086519 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008651D E10C                       	smpsAlterNote       $0C
0008651F E701                       	dc.b	smpsNoAttack, $01
00086521 E109                       	smpsAlterNote       $09
00086523 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086527 E10F                       	smpsAlterNote       $0F
00086529 E701                       	dc.b	smpsNoAttack, $01
0008652B E113                       	smpsAlterNote       $13
0008652D E701                       	dc.b	smpsNoAttack, $01
0008652F E112                       	smpsAlterNote       $12
00086531 E701                       	dc.b	smpsNoAttack, $01
00086533 E10C                       	smpsAlterNote       $0C
00086535 E701                       	dc.b	smpsNoAttack, $01
00086537 E109                       	smpsAlterNote       $09
00086539 8001                       	dc.b	nRst, $01
0008653B E10F                       	smpsAlterNote       $0F
0008653D C60D                       	dc.b	nA5, $0D
0008653F E10C                       	smpsAlterNote       $0C
00086541 E701                       	dc.b	smpsNoAttack, $01
00086543 E108                       	smpsAlterNote       $08
00086545 E701                       	dc.b	smpsNoAttack, $01
00086547 E10C                       	smpsAlterNote       $0C
00086549 E701                       	dc.b	smpsNoAttack, $01
0008654B E112                       	smpsAlterNote       $12
0008654D E701                       	dc.b	smpsNoAttack, $01
0008654F E113                       	smpsAlterNote       $13
00086551 E701                       	dc.b	smpsNoAttack, $01
00086553 E10F                       	smpsAlterNote       $0F
00086555 E701                       	dc.b	smpsNoAttack, $01
00086557 E109                       	smpsAlterNote       $09
00086559 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008655D E10C                       	smpsAlterNote       $0C
0008655F E701                       	dc.b	smpsNoAttack, $01
00086561 E112                       	smpsAlterNote       $12
00086563 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086567 E10C                       	smpsAlterNote       $0C
00086569 E701                       	dc.b	smpsNoAttack, $01
0008656B E109                       	smpsAlterNote       $09
0008656D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086571 E10F                       	smpsAlterNote       $0F
00086573 E701                       	dc.b	smpsNoAttack, $01
00086575 E113                       	smpsAlterNote       $13
00086577 E701                       	dc.b	smpsNoAttack, $01
00086579 E112                       	smpsAlterNote       $12
0008657B E701                       	dc.b	smpsNoAttack, $01
0008657D E10C                       	smpsAlterNote       $0C
0008657F E701                       	dc.b	smpsNoAttack, $01
00086581 E108                       	smpsAlterNote       $08
00086583 E701                       	dc.b	smpsNoAttack, $01
00086585 E10C                       	smpsAlterNote       $0C
00086587 E701                       	dc.b	smpsNoAttack, $01
00086589 E10F                       	smpsAlterNote       $0F
0008658B E701                       	dc.b	smpsNoAttack, $01
0008658D E113                       	smpsAlterNote       $13
0008658F E701                       	dc.b	smpsNoAttack, $01
00086591 E10F                       	smpsAlterNote       $0F
00086593 E701                       	dc.b	smpsNoAttack, $01
00086595 E109                       	smpsAlterNote       $09
00086597 E701                       	dc.b	smpsNoAttack, $01
00086599 E108                       	smpsAlterNote       $08
0008659B E701                       	dc.b	smpsNoAttack, $01
0008659D E10C                       	smpsAlterNote       $0C
0008659F E701                       	dc.b	smpsNoAttack, $01
000865A1 E112                       	smpsAlterNote       $12
000865A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865A7 E10F                       	smpsAlterNote       $0F
000865A9 E701                       	dc.b	smpsNoAttack, $01
000865AB E109                       	smpsAlterNote       $09
000865AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865B1 E10F                       	smpsAlterNote       $0F
000865B3 E701                       	dc.b	smpsNoAttack, $01
000865B5 E112                       	smpsAlterNote       $12
000865B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865BB E10C                       	smpsAlterNote       $0C
000865BD E701                       	dc.b	smpsNoAttack, $01
000865BF E108                       	smpsAlterNote       $08
000865C1 E701                       	dc.b	smpsNoAttack, $01
000865C3 E10C                       	smpsAlterNote       $0C
000865C5 E701                       	dc.b	smpsNoAttack, $01
000865C7 E10F                       	smpsAlterNote       $0F
000865C9 E701                       	dc.b	smpsNoAttack, $01
000865CB E113                       	smpsAlterNote       $13
000865CD E701                       	dc.b	smpsNoAttack, $01
000865CF E10F                       	smpsAlterNote       $0F
000865D1 E701                       	dc.b	smpsNoAttack, $01
000865D3 E109                       	smpsAlterNote       $09
000865D5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000865DB E601                       	smpsAlterVol        $01
000865DD E10F                       	smpsAlterNote       $0F
000865DF C604                       	dc.b	nA5, $04
000865E1 E10D                       	smpsAlterNote       $0D
000865E3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000865E9 E10B                       	smpsAlterNote       $0B
000865EB BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000865F3 E10F                       	smpsAlterNote       $0F
000865F5 C604 8001                  	dc.b	nA5, $04, nRst, $01
000865F9 E10D                       	smpsAlterNote       $0D
000865FB C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00086601 E10C                       	smpsAlterNote       $0C
00086603 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00086609 E10A                       	smpsAlterNote       $0A
0008660B C904 8001                  	dc.b	nC6, $04, nRst, $01
0008660F E110                       	smpsAlterNote       $10
00086611 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00086615 E10F                       	smpsAlterNote       $0F
00086617 C604                       	dc.b	nA5, $04
00086619 E10D                       	smpsAlterNote       $0D
0008661B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00086627 E109                       	smpsAlterNote       $09
00086629 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008662D E10F                       	smpsAlterNote       $0F
0008662F E701                       	dc.b	smpsNoAttack, $01
00086631 E112                       	smpsAlterNote       $12
00086633 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086637 E10C                       	smpsAlterNote       $0C
00086639 E701                       	dc.b	smpsNoAttack, $01
0008663B E108                       	smpsAlterNote       $08
0008663D E701                       	dc.b	smpsNoAttack, $01
0008663F E10C                       	smpsAlterNote       $0C
00086641 E701                       	dc.b	smpsNoAttack, $01
00086643 E10F                       	smpsAlterNote       $0F
00086645 E701                       	dc.b	smpsNoAttack, $01
00086647 E113                       	smpsAlterNote       $13
00086649 E701                       	dc.b	smpsNoAttack, $01
0008664B E10D                       	smpsAlterNote       $0D
0008664D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00086653 E10C                       	smpsAlterNote       $0C
00086655 C10D                       	dc.b	nE5, $0D
00086657 E109                       	smpsAlterNote       $09
00086659 E701                       	dc.b	smpsNoAttack, $01
0008665B E105                       	smpsAlterNote       $05
0008665D E701                       	dc.b	smpsNoAttack, $01
0008665F E106                       	smpsAlterNote       $06
00086661 E701                       	dc.b	smpsNoAttack, $01
00086663 E10C                       	smpsAlterNote       $0C
00086665 E701                       	dc.b	smpsNoAttack, $01
00086667 E110                       	smpsAlterNote       $10
00086669 E701                       	dc.b	smpsNoAttack, $01
0008666B E10C                       	smpsAlterNote       $0C
0008666D E701                       	dc.b	smpsNoAttack, $01
0008666F E109                       	smpsAlterNote       $09
00086671 E701                       	dc.b	smpsNoAttack, $01
00086673 E105                       	smpsAlterNote       $05
00086675 E701                       	dc.b	smpsNoAttack, $01
00086677 E109                       	smpsAlterNote       $09
00086679 E701                       	dc.b	smpsNoAttack, $01
0008667B E10F                       	smpsAlterNote       $0F
0008667D E701                       	dc.b	smpsNoAttack, $01
0008667F E110                       	smpsAlterNote       $10
00086681 E701                       	dc.b	smpsNoAttack, $01
00086683 E10C                       	smpsAlterNote       $0C
00086685 E701                       	dc.b	smpsNoAttack, $01
00086687 E106                       	smpsAlterNote       $06
00086689 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008668D E109                       	smpsAlterNote       $09
0008668F E701                       	dc.b	smpsNoAttack, $01
00086691 E10F                       	smpsAlterNote       $0F
00086693 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086697 E109                       	smpsAlterNote       $09
00086699 E701                       	dc.b	smpsNoAttack, $01
0008669B E106                       	smpsAlterNote       $06
0008669D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866A1 E10C                       	smpsAlterNote       $0C
000866A3 E701                       	dc.b	smpsNoAttack, $01
000866A5 E110                       	smpsAlterNote       $10
000866A7 E701                       	dc.b	smpsNoAttack, $01
000866A9 E10F                       	smpsAlterNote       $0F
000866AB E701                       	dc.b	smpsNoAttack, $01
000866AD E109                       	smpsAlterNote       $09
000866AF E701                       	dc.b	smpsNoAttack, $01
000866B1 E105                       	smpsAlterNote       $05
000866B3 E701                       	dc.b	smpsNoAttack, $01
000866B5 E109                       	smpsAlterNote       $09
000866B7 E701                       	dc.b	smpsNoAttack, $01
000866B9 E10C                       	smpsAlterNote       $0C
000866BB E701                       	dc.b	smpsNoAttack, $01
000866BD E110                       	smpsAlterNote       $10
000866BF E701                       	dc.b	smpsNoAttack, $01
000866C1 E10C                       	smpsAlterNote       $0C
000866C3 E701                       	dc.b	smpsNoAttack, $01
000866C5 E106                       	smpsAlterNote       $06
000866C7 E701                       	dc.b	smpsNoAttack, $01
000866C9 E105                       	smpsAlterNote       $05
000866CB E701                       	dc.b	smpsNoAttack, $01
000866CD E109                       	smpsAlterNote       $09
000866CF E701                       	dc.b	smpsNoAttack, $01
000866D1 E10F                       	smpsAlterNote       $0F
000866D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866D7 E10C                       	smpsAlterNote       $0C
000866D9 E701                       	dc.b	smpsNoAttack, $01
000866DB E106                       	smpsAlterNote       $06
000866DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866E1 E10C                       	smpsAlterNote       $0C
000866E3 E701                       	dc.b	smpsNoAttack, $01
000866E5 E10F                       	smpsAlterNote       $0F
000866E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866EB E109                       	smpsAlterNote       $09
000866ED E701                       	dc.b	smpsNoAttack, $01
000866EF E105                       	smpsAlterNote       $05
000866F1 E701                       	dc.b	smpsNoAttack, $01
000866F3 E106                       	smpsAlterNote       $06
000866F5 E701                       	dc.b	smpsNoAttack, $01
000866F7 E10C                       	smpsAlterNote       $0C
000866F9 E701                       	dc.b	smpsNoAttack, $01
000866FB E110                       	smpsAlterNote       $10
000866FD E701                       	dc.b	smpsNoAttack, $01
000866FF E10C                       	smpsAlterNote       $0C
00086701 E701                       	dc.b	smpsNoAttack, $01
00086703 E109                       	smpsAlterNote       $09
00086705 E701                       	dc.b	smpsNoAttack, $01
00086707 E105                       	smpsAlterNote       $05
00086709 E701                       	dc.b	smpsNoAttack, $01
0008670B E109                       	smpsAlterNote       $09
0008670D E701                       	dc.b	smpsNoAttack, $01
0008670F E10F                       	smpsAlterNote       $0F
00086711 E701                       	dc.b	smpsNoAttack, $01
00086713 E110                       	smpsAlterNote       $10
00086715 E701                       	dc.b	smpsNoAttack, $01
00086717 E10C                       	smpsAlterNote       $0C
00086719 E701                       	dc.b	smpsNoAttack, $01
0008671B E106                       	smpsAlterNote       $06
0008671D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086721 E109                       	smpsAlterNote       $09
00086723 E701                       	dc.b	smpsNoAttack, $01
00086725 E10F                       	smpsAlterNote       $0F
00086727 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008672B E109                       	smpsAlterNote       $09
0008672D E701                       	dc.b	smpsNoAttack, $01
0008672F E106                       	smpsAlterNote       $06
00086731 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086735 E10C                       	smpsAlterNote       $0C
00086737 E701                       	dc.b	smpsNoAttack, $01
00086739 E110                       	smpsAlterNote       $10
0008673B E701                       	dc.b	smpsNoAttack, $01
0008673D E10F                       	smpsAlterNote       $0F
0008673F E701                       	dc.b	smpsNoAttack, $01
00086741 E109                       	smpsAlterNote       $09
00086743 E701                       	dc.b	smpsNoAttack, $01
00086745 E105                       	smpsAlterNote       $05
00086747 E701                       	dc.b	smpsNoAttack, $01
00086749 E109                       	smpsAlterNote       $09
0008674B E701                       	dc.b	smpsNoAttack, $01
0008674D E10C                       	smpsAlterNote       $0C
0008674F E701                       	dc.b	smpsNoAttack, $01
00086751 E110                       	smpsAlterNote       $10
00086753 E701                       	dc.b	smpsNoAttack, $01
00086755 E10C                       	smpsAlterNote       $0C
00086757 E701                       	dc.b	smpsNoAttack, $01
00086759 E106                       	smpsAlterNote       $06
0008675B E701                       	dc.b	smpsNoAttack, $01
0008675D E105                       	smpsAlterNote       $05
0008675F E701                       	dc.b	smpsNoAttack, $01
00086761 E109                       	smpsAlterNote       $09
00086763 E701                       	dc.b	smpsNoAttack, $01
00086765 E10F                       	smpsAlterNote       $0F
00086767 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008676B E109                       	smpsAlterNote       $09
0008676D E701                       	dc.b	smpsNoAttack, $01
0008676F E106                       	smpsAlterNote       $06
00086771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086775 E10C                       	smpsAlterNote       $0C
00086777 E701                       	dc.b	smpsNoAttack, $01
00086779 E110                       	smpsAlterNote       $10
0008677B E701                       	dc.b	smpsNoAttack, $01
0008677D E10F                       	smpsAlterNote       $0F
0008677F E701                       	dc.b	smpsNoAttack, $01
00086781 E109                       	smpsAlterNote       $09
00086783 E701                       	dc.b	smpsNoAttack, $01
00086785 E105                       	smpsAlterNote       $05
00086787 E701                       	dc.b	smpsNoAttack, $01
00086789 E109                       	smpsAlterNote       $09
0008678B E701                       	dc.b	smpsNoAttack, $01
0008678D E10C                       	smpsAlterNote       $0C
0008678F E701                       	dc.b	smpsNoAttack, $01
00086791 E110                       	smpsAlterNote       $10
00086793 E701                       	dc.b	smpsNoAttack, $01
00086795 E10C                       	smpsAlterNote       $0C
00086797 E701                       	dc.b	smpsNoAttack, $01
00086799 E106                       	smpsAlterNote       $06
0008679B E701                       	dc.b	smpsNoAttack, $01
0008679D E105                       	smpsAlterNote       $05
0008679F E701                       	dc.b	smpsNoAttack, $01
000867A1 E109                       	smpsAlterNote       $09
000867A3 E701                       	dc.b	smpsNoAttack, $01
000867A5 E10F                       	smpsAlterNote       $0F
000867A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867AB E10C                       	smpsAlterNote       $0C
000867AD E701                       	dc.b	smpsNoAttack, $01
000867AF E106                       	smpsAlterNote       $06
000867B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867B5 E10C                       	smpsAlterNote       $0C
000867B7 E701                       	dc.b	smpsNoAttack, $01
000867B9 E10F                       	smpsAlterNote       $0F
000867BB E701                       	dc.b	smpsNoAttack, $01
000867BD E110                       	smpsAlterNote       $10
000867BF 8001                       	dc.b	nRst, $01
000867C1 E10F                       	smpsAlterNote       $0F
000867C3 C604                       	dc.b	nA5, $04
000867C5 E10D                       	smpsAlterNote       $0D
000867C7 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000867CD E10B                       	smpsAlterNote       $0B
000867CF BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000867D5 E10F                       	smpsAlterNote       $0F
000867D7 C604 8001                  	dc.b	nA5, $04, nRst, $01
000867DB E10D                       	smpsAlterNote       $0D
000867DD C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000867E3 E10C                       	smpsAlterNote       $0C
000867E5 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000867EB E10A                       	smpsAlterNote       $0A
000867ED C904                       	dc.b	nC6, $04
000867EF E110                       	smpsAlterNote       $10
000867F1 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000867F5 E10F                       	smpsAlterNote       $0F
000867F7 C604                       	dc.b	nA5, $04
000867F9 E10D                       	smpsAlterNote       $0D
000867FB C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00086807 E109                       	smpsAlterNote       $09
00086809 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008680D E10F                       	smpsAlterNote       $0F
0008680F E701                       	dc.b	smpsNoAttack, $01
00086811 E112                       	smpsAlterNote       $12
00086813 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086817 E10C                       	smpsAlterNote       $0C
00086819 E701                       	dc.b	smpsNoAttack, $01
0008681B E108                       	smpsAlterNote       $08
0008681D E701                       	dc.b	smpsNoAttack, $01
0008681F E109                       	smpsAlterNote       $09
00086821 E701                       	dc.b	smpsNoAttack, $01
00086823 E10F                       	smpsAlterNote       $0F
00086825 E701                       	dc.b	smpsNoAttack, $01
00086827 E113                       	smpsAlterNote       $13
00086829 E701                       	dc.b	smpsNoAttack, $01
0008682B E10D                       	smpsAlterNote       $0D
0008682D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00086833 E10C                       	smpsAlterNote       $0C
00086835 C10D                       	dc.b	nE5, $0D
00086837 E109                       	smpsAlterNote       $09
00086839 E701                       	dc.b	smpsNoAttack, $01
0008683B E106                       	smpsAlterNote       $06
0008683D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086841 E10C                       	smpsAlterNote       $0C
00086843 E701                       	dc.b	smpsNoAttack, $01
00086845 E110                       	smpsAlterNote       $10
00086847 E701                       	dc.b	smpsNoAttack, $01
00086849 E10F                       	smpsAlterNote       $0F
0008684B E701                       	dc.b	smpsNoAttack, $01
0008684D E109                       	smpsAlterNote       $09
0008684F E701                       	dc.b	smpsNoAttack, $01
00086851 E105                       	smpsAlterNote       $05
00086853 E701                       	dc.b	smpsNoAttack, $01
00086855 E109                       	smpsAlterNote       $09
00086857 E701                       	dc.b	smpsNoAttack, $01
00086859 E10C                       	smpsAlterNote       $0C
0008685B E701                       	dc.b	smpsNoAttack, $01
0008685D E110                       	smpsAlterNote       $10
0008685F E701                       	dc.b	smpsNoAttack, $01
00086861 E10C                       	smpsAlterNote       $0C
00086863 E701                       	dc.b	smpsNoAttack, $01
00086865 E106                       	smpsAlterNote       $06
00086867 E701                       	dc.b	smpsNoAttack, $01
00086869 E105                       	smpsAlterNote       $05
0008686B E701                       	dc.b	smpsNoAttack, $01
0008686D E109                       	smpsAlterNote       $09
0008686F E701                       	dc.b	smpsNoAttack, $01
00086871 E10F                       	smpsAlterNote       $0F
00086873 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086877 E10C                       	smpsAlterNote       $0C
00086879 E701                       	dc.b	smpsNoAttack, $01
0008687B E106                       	smpsAlterNote       $06
0008687D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086881 E10C                       	smpsAlterNote       $0C
00086883 E701                       	dc.b	smpsNoAttack, $01
00086885 E10F                       	smpsAlterNote       $0F
00086887 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008688B E109                       	smpsAlterNote       $09
0008688D E701                       	dc.b	smpsNoAttack, $01
0008688F E105                       	smpsAlterNote       $05
00086891 E701                       	dc.b	smpsNoAttack, $01
00086893 E106                       	smpsAlterNote       $06
00086895 E701                       	dc.b	smpsNoAttack, $01
00086897 E10C                       	smpsAlterNote       $0C
00086899 E701                       	dc.b	smpsNoAttack, $01
0008689B E110                       	smpsAlterNote       $10
0008689D E701                       	dc.b	smpsNoAttack, $01
0008689F E10C                       	smpsAlterNote       $0C
000868A1 E701                       	dc.b	smpsNoAttack, $01
000868A3 E109                       	smpsAlterNote       $09
000868A5 E701                       	dc.b	smpsNoAttack, $01
000868A7 E105                       	smpsAlterNote       $05
000868A9 E701                       	dc.b	smpsNoAttack, $01
000868AB E109                       	smpsAlterNote       $09
000868AD E701                       	dc.b	smpsNoAttack, $01
000868AF E10F                       	smpsAlterNote       $0F
000868B1 E701                       	dc.b	smpsNoAttack, $01
000868B3 E110                       	smpsAlterNote       $10
000868B5 E701                       	dc.b	smpsNoAttack, $01
000868B7 E10C                       	smpsAlterNote       $0C
000868B9 E701                       	dc.b	smpsNoAttack, $01
000868BB E106                       	smpsAlterNote       $06
000868BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868C1 E109                       	smpsAlterNote       $09
000868C3 E701                       	dc.b	smpsNoAttack, $01
000868C5 E10F                       	smpsAlterNote       $0F
000868C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868CB E109                       	smpsAlterNote       $09
000868CD E701                       	dc.b	smpsNoAttack, $01
000868CF E106                       	smpsAlterNote       $06
000868D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868D5 E10C                       	smpsAlterNote       $0C
000868D7 E701                       	dc.b	smpsNoAttack, $01
000868D9 E110                       	smpsAlterNote       $10
000868DB E701                       	dc.b	smpsNoAttack, $01
000868DD E10F                       	smpsAlterNote       $0F
000868DF E701                       	dc.b	smpsNoAttack, $01
000868E1 E109                       	smpsAlterNote       $09
000868E3 E701                       	dc.b	smpsNoAttack, $01
000868E5 E105                       	smpsAlterNote       $05
000868E7 E701                       	dc.b	smpsNoAttack, $01
000868E9 E109                       	smpsAlterNote       $09
000868EB E701                       	dc.b	smpsNoAttack, $01
000868ED E10F                       	smpsAlterNote       $0F
000868EF E701                       	dc.b	smpsNoAttack, $01
000868F1 E110                       	smpsAlterNote       $10
000868F3 E701                       	dc.b	smpsNoAttack, $01
000868F5 E10C                       	smpsAlterNote       $0C
000868F7 E701                       	dc.b	smpsNoAttack, $01
000868F9 E106                       	smpsAlterNote       $06
000868FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868FF E109                       	smpsAlterNote       $09
00086901 E701                       	dc.b	smpsNoAttack, $01
00086903 E10F                       	smpsAlterNote       $0F
00086905 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086909 E109                       	smpsAlterNote       $09
0008690B E701                       	dc.b	smpsNoAttack, $01
0008690D E106                       	smpsAlterNote       $06
0008690F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086913 E10C                       	smpsAlterNote       $0C
00086915 E701                       	dc.b	smpsNoAttack, $01
00086917 E110                       	smpsAlterNote       $10
00086919 E701                       	dc.b	smpsNoAttack, $01
0008691B E10F                       	smpsAlterNote       $0F
0008691D E701                       	dc.b	smpsNoAttack, $01
0008691F E109                       	smpsAlterNote       $09
00086921 E701                       	dc.b	smpsNoAttack, $01
00086923 E105                       	smpsAlterNote       $05
00086925 E701                       	dc.b	smpsNoAttack, $01
00086927 E109                       	smpsAlterNote       $09
00086929 E701                       	dc.b	smpsNoAttack, $01
0008692B E10C                       	smpsAlterNote       $0C
0008692D E701                       	dc.b	smpsNoAttack, $01
0008692F E110                       	smpsAlterNote       $10
00086931 E701                       	dc.b	smpsNoAttack, $01
00086933 E10C                       	smpsAlterNote       $0C
00086935 E701                       	dc.b	smpsNoAttack, $01
00086937 E106                       	smpsAlterNote       $06
00086939 E701                       	dc.b	smpsNoAttack, $01
0008693B E105                       	smpsAlterNote       $05
0008693D E701                       	dc.b	smpsNoAttack, $01
0008693F E109                       	smpsAlterNote       $09
00086941 E701                       	dc.b	smpsNoAttack, $01
00086943 E10F                       	smpsAlterNote       $0F
00086945 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086949 E10C                       	smpsAlterNote       $0C
0008694B E701                       	dc.b	smpsNoAttack, $01
0008694D E106                       	smpsAlterNote       $06
0008694F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086953 E10C                       	smpsAlterNote       $0C
00086955 E701                       	dc.b	smpsNoAttack, $01
00086957 E10F                       	smpsAlterNote       $0F
00086959 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008695D E109                       	smpsAlterNote       $09
0008695F E701                       	dc.b	smpsNoAttack, $01
00086961 E105                       	smpsAlterNote       $05
00086963 E701                       	dc.b	smpsNoAttack, $01
00086965 E106                       	smpsAlterNote       $06
00086967 E701                       	dc.b	smpsNoAttack, $01
00086969 E10C                       	smpsAlterNote       $0C
0008696B E701                       	dc.b	smpsNoAttack, $01
0008696D E110                       	smpsAlterNote       $10
0008696F E701                       	dc.b	smpsNoAttack, $01
00086971 E10C                       	smpsAlterNote       $0C
00086973 E701                       	dc.b	smpsNoAttack, $01
00086975 E109                       	smpsAlterNote       $09
00086977 E701                       	dc.b	smpsNoAttack, $01
00086979 E105                       	smpsAlterNote       $05
0008697B E701                       	dc.b	smpsNoAttack, $01
0008697D E109                       	smpsAlterNote       $09
0008697F E701                       	dc.b	smpsNoAttack, $01
00086981 E10F                       	smpsAlterNote       $0F
00086983 E701                       	dc.b	smpsNoAttack, $01
00086985 E110                       	smpsAlterNote       $10
00086987 E701                       	dc.b	smpsNoAttack, $01
00086989 E10C                       	smpsAlterNote       $0C
0008698B E701                       	dc.b	smpsNoAttack, $01
0008698D E106                       	smpsAlterNote       $06
0008698F E701                       	dc.b	smpsNoAttack, $01
00086991 E10B                       	smpsAlterNote       $0B
00086993 BF02                       	dc.b	nD5, $02
00086995 E10C                       	smpsAlterNote       $0C
00086997 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008699D E109                       	smpsAlterNote       $09
0008699F E701                       	dc.b	smpsNoAttack, $01
000869A1 E105                       	smpsAlterNote       $05
000869A3 E701                       	dc.b	smpsNoAttack, $01
000869A5 E109                       	smpsAlterNote       $09
000869A7 E701                       	dc.b	smpsNoAttack, $01
000869A9 E10F                       	smpsAlterNote       $0F
000869AB E701                       	dc.b	smpsNoAttack, $01
000869AD E110                       	smpsAlterNote       $10
000869AF E701                       	dc.b	smpsNoAttack, $01
000869B1 E10C                       	smpsAlterNote       $0C
000869B3 E701                       	dc.b	smpsNoAttack, $01
000869B5 E106                       	smpsAlterNote       $06
000869B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869BB E109                       	smpsAlterNote       $09
000869BD E701                       	dc.b	smpsNoAttack, $01
000869BF E10F                       	smpsAlterNote       $0F
000869C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869C5 E109                       	smpsAlterNote       $09
000869C7 E701                       	dc.b	smpsNoAttack, $01
000869C9 E106                       	smpsAlterNote       $06
000869CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869CF E10C                       	smpsAlterNote       $0C
000869D1 E701                       	dc.b	smpsNoAttack, $01
000869D3 E110                       	smpsAlterNote       $10
000869D5 E701                       	dc.b	smpsNoAttack, $01
000869D7 E10F                       	smpsAlterNote       $0F
000869D9 E701                       	dc.b	smpsNoAttack, $01
000869DB E109                       	smpsAlterNote       $09
000869DD E701                       	dc.b	smpsNoAttack, $01
000869DF E105                       	smpsAlterNote       $05
000869E1 E701                       	dc.b	smpsNoAttack, $01
000869E3 E109                       	smpsAlterNote       $09
000869E5 E701                       	dc.b	smpsNoAttack, $01
000869E7 E10C                       	smpsAlterNote       $0C
000869E9 E701                       	dc.b	smpsNoAttack, $01
000869EB E110                       	smpsAlterNote       $10
000869ED E701                       	dc.b	smpsNoAttack, $01
000869EF E10C                       	smpsAlterNote       $0C
000869F1 E701                       	dc.b	smpsNoAttack, $01
000869F3 E106                       	smpsAlterNote       $06
000869F5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000869F9 E10D                       	smpsAlterNote       $0D
000869FB C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00086A03 E10C                       	smpsAlterNote       $0C
00086A05 C10D                       	dc.b	nE5, $0D
00086A07 E106                       	smpsAlterNote       $06
00086A09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A0D E109                       	smpsAlterNote       $09
00086A0F E701                       	dc.b	smpsNoAttack, $01
00086A11 E10F                       	smpsAlterNote       $0F
00086A13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A17 E109                       	smpsAlterNote       $09
00086A19 E701                       	dc.b	smpsNoAttack, $01
00086A1B E106                       	smpsAlterNote       $06
00086A1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A21 E10C                       	smpsAlterNote       $0C
00086A23 E701                       	dc.b	smpsNoAttack, $01
00086A25 E110                       	smpsAlterNote       $10
00086A27 E701                       	dc.b	smpsNoAttack, $01
00086A29 E10F                       	smpsAlterNote       $0F
00086A2B E701                       	dc.b	smpsNoAttack, $01
00086A2D E109                       	smpsAlterNote       $09
00086A2F E701                       	dc.b	smpsNoAttack, $01
00086A31 E105                       	smpsAlterNote       $05
00086A33 E701                       	dc.b	smpsNoAttack, $01
00086A35 E106                       	smpsAlterNote       $06
00086A37 800F                       	dc.b	nRst, $0F
00086A3B E6FF                       	smpsAlterVol        $FF
00086A3D E10F                       	smpsAlterNote       $0F
00086A3F BA01                       	dc.b	nA4, $01
00086A41 E110                       	smpsAlterNote       $10
00086A43 BB02                       	dc.b	nBb4, $02
00086A45 E10F                       	smpsAlterNote       $0F
00086A47 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00086A4D E10B                       	smpsAlterNote       $0B
00086A4F BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086A53 E10C                       	smpsAlterNote       $0C
00086A55 C103                       	dc.b	nE5, $03
00086A57 E10D                       	smpsAlterNote       $0D
00086A59 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00086A63 E10B                       	smpsAlterNote       $0B
00086A65 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00086A69 E104                       	smpsAlterNote       $04
00086A6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A6F E10A                       	smpsAlterNote       $0A
00086A71 E701                       	dc.b	smpsNoAttack, $01
00086A73 E10D                       	smpsAlterNote       $0D
00086A75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A79 E107                       	smpsAlterNote       $07
00086A7B E701                       	dc.b	smpsNoAttack, $01
00086A7D E104                       	smpsAlterNote       $04
00086A7F 8001                       	dc.b	nRst, $01
00086A81 E110                       	smpsAlterNote       $10
00086A83 C703                       	dc.b	nBb5, $03
00086A85 E10F                       	smpsAlterNote       $0F
00086A87 C603 8001                  	dc.b	nA5, $03, nRst, $01
00086A8B E10D                       	smpsAlterNote       $0D
00086A8D C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00086A91 E10C                       	smpsAlterNote       $0C
00086A93 E701                       	dc.b	smpsNoAttack, $01
00086A95 E108                       	smpsAlterNote       $08
00086A97 E701                       	dc.b	smpsNoAttack, $01
00086A99 E109                       	smpsAlterNote       $09
00086A9B E701                       	dc.b	smpsNoAttack, $01
00086A9D E10F                       	smpsAlterNote       $0F
00086A9F E701                       	dc.b	smpsNoAttack, $01
00086AA1 E113                       	smpsAlterNote       $13
00086AA3 E701                       	dc.b	smpsNoAttack, $01
00086AA5 E10F                       	smpsAlterNote       $0F
00086AA7 E701                       	dc.b	smpsNoAttack, $01
00086AA9 E10C                       	smpsAlterNote       $0C
00086AAB E701                       	dc.b	smpsNoAttack, $01
00086AAD E108                       	smpsAlterNote       $08
00086AAF E701                       	dc.b	smpsNoAttack, $01
00086AB1 E10C                       	smpsAlterNote       $0C
00086AB3 E701                       	dc.b	smpsNoAttack, $01
00086AB5 E112                       	smpsAlterNote       $12
00086AB7 E701                       	dc.b	smpsNoAttack, $01
00086AB9 E113                       	smpsAlterNote       $13
00086ABB E701                       	dc.b	smpsNoAttack, $01
00086ABD E10F                       	smpsAlterNote       $0F
00086ABF E701                       	dc.b	smpsNoAttack, $01
00086AC1 E109                       	smpsAlterNote       $09
00086AC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AC7 E10C                       	smpsAlterNote       $0C
00086AC9 E701                       	dc.b	smpsNoAttack, $01
00086ACB E112                       	smpsAlterNote       $12
00086ACD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AD1 E10C                       	smpsAlterNote       $0C
00086AD3 E701                       	dc.b	smpsNoAttack, $01
00086AD5 E109                       	smpsAlterNote       $09
00086AD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ADB E10F                       	smpsAlterNote       $0F
00086ADD E701                       	dc.b	smpsNoAttack, $01
00086ADF E113                       	smpsAlterNote       $13
00086AE1 E701                       	dc.b	smpsNoAttack, $01
00086AE3 E112                       	smpsAlterNote       $12
00086AE5 E701                       	dc.b	smpsNoAttack, $01
00086AE7 E10C                       	smpsAlterNote       $0C
00086AE9 E701                       	dc.b	smpsNoAttack, $01
00086AEB E108                       	smpsAlterNote       $08
00086AED E701                       	dc.b	smpsNoAttack, $01
00086AEF E10C                       	smpsAlterNote       $0C
00086AF1 E701                       	dc.b	smpsNoAttack, $01
00086AF3 E10F                       	smpsAlterNote       $0F
00086AF5 E701                       	dc.b	smpsNoAttack, $01
00086AF7 E113                       	smpsAlterNote       $13
00086AF9 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00086AFD E10B                       	smpsAlterNote       $0B
00086AFF BF03                       	dc.b	nD5, $03
00086B01 E10C                       	smpsAlterNote       $0C
00086B03 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086B07 E10D                       	smpsAlterNote       $0D
00086B09 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00086B13 E10B                       	smpsAlterNote       $0B
00086B15 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00086B21 E110                       	smpsAlterNote       $10
00086B23 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00086B27 E10F                       	smpsAlterNote       $0F
00086B29 C604                       	dc.b	nA5, $04
00086B2B E10D                       	smpsAlterNote       $0D
00086B2D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00086B33 E109                       	smpsAlterNote       $09
00086B35 E701                       	dc.b	smpsNoAttack, $01
00086B37 E108                       	smpsAlterNote       $08
00086B39 E701                       	dc.b	smpsNoAttack, $01
00086B3B E10C                       	smpsAlterNote       $0C
00086B3D E701                       	dc.b	smpsNoAttack, $01
00086B3F E112                       	smpsAlterNote       $12
00086B41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B45 E10F                       	smpsAlterNote       $0F
00086B47 E701                       	dc.b	smpsNoAttack, $01
00086B49 E109                       	smpsAlterNote       $09
00086B4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B4F E10F                       	smpsAlterNote       $0F
00086B51 E701                       	dc.b	smpsNoAttack, $01
00086B53 E112                       	smpsAlterNote       $12
00086B55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B59 E10C                       	smpsAlterNote       $0C
00086B5B E701                       	dc.b	smpsNoAttack, $01
00086B5D E108                       	smpsAlterNote       $08
00086B5F E701                       	dc.b	smpsNoAttack, $01
00086B61 E109                       	smpsAlterNote       $09
00086B63 E701                       	dc.b	smpsNoAttack, $01
00086B65 E10F                       	smpsAlterNote       $0F
00086B67 E701                       	dc.b	smpsNoAttack, $01
00086B69 E113                       	smpsAlterNote       $13
00086B6B E701                       	dc.b	smpsNoAttack, $01
00086B6D E10F                       	smpsAlterNote       $0F
00086B6F E701                       	dc.b	smpsNoAttack, $01
00086B71 E10C                       	smpsAlterNote       $0C
00086B73 E701                       	dc.b	smpsNoAttack, $01
00086B75 E108                       	smpsAlterNote       $08
00086B77 E701                       	dc.b	smpsNoAttack, $01
00086B79 E10C                       	smpsAlterNote       $0C
00086B7B E701                       	dc.b	smpsNoAttack, $01
00086B7D E112                       	smpsAlterNote       $12
00086B7F E701                       	dc.b	smpsNoAttack, $01
00086B81 E113                       	smpsAlterNote       $13
00086B83 E701                       	dc.b	smpsNoAttack, $01
00086B85 E10F                       	smpsAlterNote       $0F
00086B87 E701                       	dc.b	smpsNoAttack, $01
00086B89 E109                       	smpsAlterNote       $09
00086B8B E701                       	dc.b	smpsNoAttack, $01
00086B8D E10D                       	smpsAlterNote       $0D
00086B8F C402                       	dc.b	nG5, $02
00086B91 E10F                       	smpsAlterNote       $0F
00086B93 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00086B9D E10D                       	smpsAlterNote       $0D
00086B9F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00086BA5 E10B                       	smpsAlterNote       $0B
00086BA7 BF0D                       	dc.b	nD5, $0D
00086BA9 E108                       	smpsAlterNote       $08
00086BAB E701                       	dc.b	smpsNoAttack, $01
00086BAD E104                       	smpsAlterNote       $04
00086BAF E701                       	dc.b	smpsNoAttack, $01
00086BB1 E105                       	smpsAlterNote       $05
00086BB3 E701                       	dc.b	smpsNoAttack, $01
00086BB5 E10B                       	smpsAlterNote       $0B
00086BB7 E701                       	dc.b	smpsNoAttack, $01
00086BB9 E10F                       	smpsAlterNote       $0F
00086BBB E701                       	dc.b	smpsNoAttack, $01
00086BBD E10B                       	smpsAlterNote       $0B
00086BBF E701                       	dc.b	smpsNoAttack, $01
00086BC1 E108                       	smpsAlterNote       $08
00086BC3 E701                       	dc.b	smpsNoAttack, $01
00086BC5 E104                       	smpsAlterNote       $04
00086BC7 E701                       	dc.b	smpsNoAttack, $01
00086BC9 E108                       	smpsAlterNote       $08
00086BCB E701                       	dc.b	smpsNoAttack, $01
00086BCD E10E                       	smpsAlterNote       $0E
00086BCF E701                       	dc.b	smpsNoAttack, $01
00086BD1 E10F                       	smpsAlterNote       $0F
00086BD3 E701                       	dc.b	smpsNoAttack, $01
00086BD5 E10C                       	smpsAlterNote       $0C
00086BD7 C101                       	dc.b	nE5, $01
00086BD9 E10D                       	smpsAlterNote       $0D
00086BDB C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00086BE3 E10F                       	smpsAlterNote       $0F
00086BE5 C607                       	dc.b	nA5, $07
00086BE7 E10C                       	smpsAlterNote       $0C
00086BE9 CD07                       	dc.b	nE6, $07
00086BEB E10D                       	smpsAlterNote       $0D
00086BED CE06 8001                  	dc.b	nF6, $06, nRst, $01
00086BF1 E10C                       	smpsAlterNote       $0C
00086BF3 CD03                       	dc.b	nE6, $03
00086BF5 E10A                       	smpsAlterNote       $0A
00086BF7 C903 8001                  	dc.b	nC6, $03, nRst, $01
00086BFB E10D                       	smpsAlterNote       $0D
00086BFD C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00086C03 E10A                       	smpsAlterNote       $0A
00086C05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C09 E110                       	smpsAlterNote       $10
00086C0B E701                       	dc.b	smpsNoAttack, $01
00086C0D E114                       	smpsAlterNote       $14
00086C0F E701                       	dc.b	smpsNoAttack, $01
00086C11 E113                       	smpsAlterNote       $13
00086C13 E701                       	dc.b	smpsNoAttack, $01
00086C15 E10D                       	smpsAlterNote       $0D
00086C17 E701                       	dc.b	smpsNoAttack, $01
00086C19 E109                       	smpsAlterNote       $09
00086C1B E701                       	dc.b	smpsNoAttack, $01
00086C1D E10D                       	smpsAlterNote       $0D
00086C1F E701                       	dc.b	smpsNoAttack, $01
00086C21 E110                       	smpsAlterNote       $10
00086C23 E701                       	dc.b	smpsNoAttack, $01
00086C25 E114                       	smpsAlterNote       $14
00086C27 E701                       	dc.b	smpsNoAttack, $01
00086C29 E10F                       	smpsAlterNote       $0F
00086C2B C607                       	dc.b	nA5, $07
00086C2D E10D                       	smpsAlterNote       $0D
00086C2F C40D                       	dc.b	nG5, $0D
00086C31 E10A                       	smpsAlterNote       $0A
00086C33 E701                       	dc.b	smpsNoAttack, $01
00086C35 E106                       	smpsAlterNote       $06
00086C37 E701                       	dc.b	smpsNoAttack, $01
00086C39 E10A                       	smpsAlterNote       $0A
00086C3B E701                       	dc.b	smpsNoAttack, $01
00086C3D E10D                       	smpsAlterNote       $0D
00086C3F E701                       	dc.b	smpsNoAttack, $01
00086C41 E111                       	smpsAlterNote       $11
00086C43 E701                       	dc.b	smpsNoAttack, $01
00086C45 E10D                       	smpsAlterNote       $0D
00086C47 E701                       	dc.b	smpsNoAttack, $01
00086C49 E107                       	smpsAlterNote       $07
00086C4B E701                       	dc.b	smpsNoAttack, $01
00086C4D E106                       	smpsAlterNote       $06
00086C4F E701                       	dc.b	smpsNoAttack, $01
00086C51 E10A                       	smpsAlterNote       $0A
00086C53 E701                       	dc.b	smpsNoAttack, $01
00086C55 E110                       	smpsAlterNote       $10
00086C57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C5B E10D                       	smpsAlterNote       $0D
00086C5D E701                       	dc.b	smpsNoAttack, $01
00086C5F E107                       	smpsAlterNote       $07
00086C61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C65 E10F                       	smpsAlterNote       $0F
00086C67 C60E                       	dc.b	nA5, $0E
00086C69 E109                       	smpsAlterNote       $09
00086C6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C6F E10F                       	smpsAlterNote       $0F
00086C71 E701                       	dc.b	smpsNoAttack, $01
00086C73 E112                       	smpsAlterNote       $12
00086C75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C79 E10C                       	smpsAlterNote       $0C
00086C7B E701                       	dc.b	smpsNoAttack, $01
00086C7D E108                       	smpsAlterNote       $08
00086C7F E701                       	dc.b	smpsNoAttack, $01
00086C81 E109                       	smpsAlterNote       $09
00086C83 E701                       	dc.b	smpsNoAttack, $01
00086C85 E10F                       	smpsAlterNote       $0F
00086C87 E701                       	dc.b	smpsNoAttack, $01
00086C89 E113                       	smpsAlterNote       $13
00086C8B E701                       	dc.b	smpsNoAttack, $01
00086C8D E10F                       	smpsAlterNote       $0F
00086C8F E701                       	dc.b	smpsNoAttack, $01
00086C91 E10C                       	smpsAlterNote       $0C
00086C93 E701                       	dc.b	smpsNoAttack, $01
00086C95 E108                       	smpsAlterNote       $08
00086C97 E701                       	dc.b	smpsNoAttack, $01
00086C99 E109                       	smpsAlterNote       $09
00086C9B 8001                       	dc.b	nRst, $01
00086C9D E110                       	smpsAlterNote       $10
00086C9F C70D                       	dc.b	nBb5, $0D
00086CA1 E10D                       	smpsAlterNote       $0D
00086CA3 E701                       	dc.b	smpsNoAttack, $01
00086CA5 E109                       	smpsAlterNote       $09
00086CA7 E701                       	dc.b	smpsNoAttack, $01
00086CA9 E10D                       	smpsAlterNote       $0D
00086CAB E701                       	dc.b	smpsNoAttack, $01
00086CAD E113                       	smpsAlterNote       $13
00086CAF E701                       	dc.b	smpsNoAttack, $01
00086CB1 E114                       	smpsAlterNote       $14
00086CB3 E701                       	dc.b	smpsNoAttack, $01
00086CB5 E110                       	smpsAlterNote       $10
00086CB7 E701                       	dc.b	smpsNoAttack, $01
00086CB9 E10A                       	smpsAlterNote       $0A
00086CBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CBF E10D                       	smpsAlterNote       $0D
00086CC1 E701                       	dc.b	smpsNoAttack, $01
00086CC3 E113                       	smpsAlterNote       $13
00086CC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CC9 E10D                       	smpsAlterNote       $0D
00086CCB E701                       	dc.b	smpsNoAttack, $01
00086CCD E10A                       	smpsAlterNote       $0A
00086CCF E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00086CD9 E10B                       	smpsAlterNote       $0B
00086CDB 8001                       	dc.b	nRst, $01
00086CDD E10C                       	smpsAlterNote       $0C
00086CDF CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00086CE3 E10B                       	smpsAlterNote       $0B
00086CE5 CB0D                       	dc.b	nD6, $0D
00086CE7 E105                       	smpsAlterNote       $05
00086CE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CED E108                       	smpsAlterNote       $08
00086CEF E701                       	dc.b	smpsNoAttack, $01
00086CF1 E10E                       	smpsAlterNote       $0E
00086CF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CF7 E108                       	smpsAlterNote       $08
00086CF9 E701                       	dc.b	smpsNoAttack, $01
00086CFB E105                       	smpsAlterNote       $05
00086CFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D01 E10B                       	smpsAlterNote       $0B
00086D03 E701                       	dc.b	smpsNoAttack, $01
00086D05 E10F                       	smpsAlterNote       $0F
00086D07 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086D0B E10C                       	smpsAlterNote       $0C
00086D0D CC0D                       	dc.b	nEb6, $0D
00086D0F E106                       	smpsAlterNote       $06
00086D11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D15 E109                       	smpsAlterNote       $09
00086D17 E701                       	dc.b	smpsNoAttack, $01
00086D19 E10C                       	smpsAlterNote       $0C
00086D1B 8001                       	dc.b	nRst, $01
00086D1D E10A                       	smpsAlterNote       $0A
00086D1F C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00086D2B CB0E                       	dc.b	nD6, $0E
00086D2D E105                       	smpsAlterNote       $05
00086D2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D33 E10B                       	smpsAlterNote       $0B
00086D35 E701                       	dc.b	smpsNoAttack, $01
00086D37 E10E                       	smpsAlterNote       $0E
00086D39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D3D E108                       	smpsAlterNote       $08
00086D3F E701                       	dc.b	smpsNoAttack, $01
00086D41 E104                       	smpsAlterNote       $04
00086D43 E701                       	dc.b	smpsNoAttack, $01
00086D45 E105                       	smpsAlterNote       $05
00086D47 E701                       	dc.b	smpsNoAttack, $01
00086D49 E10B                       	smpsAlterNote       $0B
00086D4B E701                       	dc.b	smpsNoAttack, $01
00086D4D E10F                       	smpsAlterNote       $0F
00086D4F E701                       	dc.b	smpsNoAttack, $01
00086D51 E10D                       	smpsAlterNote       $0D
00086D53 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00086D57 E10C                       	smpsAlterNote       $0C
00086D59 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00086D5D E10A                       	smpsAlterNote       $0A
00086D5F C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00086D6B CB0D                       	dc.b	nD6, $0D
00086D6D E108                       	smpsAlterNote       $08
00086D6F E701                       	dc.b	smpsNoAttack, $01
00086D71 E104                       	smpsAlterNote       $04
00086D73 E701                       	dc.b	smpsNoAttack, $01
00086D75 E105                       	smpsAlterNote       $05
00086D77 E701                       	dc.b	smpsNoAttack, $01
00086D79 E10B                       	smpsAlterNote       $0B
00086D7B E701                       	dc.b	smpsNoAttack, $01
00086D7D E10F                       	smpsAlterNote       $0F
00086D7F E701                       	dc.b	smpsNoAttack, $01
00086D81 E10B                       	smpsAlterNote       $0B
00086D83 E701                       	dc.b	smpsNoAttack, $01
00086D85 E108                       	smpsAlterNote       $08
00086D87 E701                       	dc.b	smpsNoAttack, $01
00086D89 E104                       	smpsAlterNote       $04
00086D8B E701                       	dc.b	smpsNoAttack, $01
00086D8D E108                       	smpsAlterNote       $08
00086D8F E701                       	dc.b	smpsNoAttack, $01
00086D91 E10E                       	smpsAlterNote       $0E
00086D93 E701                       	dc.b	smpsNoAttack, $01
00086D95 E10F                       	smpsAlterNote       $0F
00086D97 E701                       	dc.b	smpsNoAttack, $01
00086D99 E10C                       	smpsAlterNote       $0C
00086D9B CC0D                       	dc.b	nEb6, $0D
00086D9D E109                       	smpsAlterNote       $09
00086D9F E701                       	dc.b	smpsNoAttack, $01
00086DA1 E105                       	smpsAlterNote       $05
00086DA3 E701                       	dc.b	smpsNoAttack, $01
00086DA5 E106                       	smpsAlterNote       $06
00086DA7 E701                       	dc.b	smpsNoAttack, $01
00086DA9 E10C                       	smpsAlterNote       $0C
00086DAB E701                       	dc.b	smpsNoAttack, $01
00086DAD E10A                       	smpsAlterNote       $0A
00086DAF C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00086DBB CB0D                       	dc.b	nD6, $0D
00086DBD E108                       	smpsAlterNote       $08
00086DBF E701                       	dc.b	smpsNoAttack, $01
00086DC1 E104                       	smpsAlterNote       $04
00086DC3 E701                       	dc.b	smpsNoAttack, $01
00086DC5 E108                       	smpsAlterNote       $08
00086DC7 E701                       	dc.b	smpsNoAttack, $01
00086DC9 E10B                       	smpsAlterNote       $0B
00086DCB E701                       	dc.b	smpsNoAttack, $01
00086DCD E10F                       	smpsAlterNote       $0F
00086DCF E701                       	dc.b	smpsNoAttack, $01
00086DD1 E10B                       	smpsAlterNote       $0B
00086DD3 E701                       	dc.b	smpsNoAttack, $01
00086DD5 E105                       	smpsAlterNote       $05
00086DD7 E701                       	dc.b	smpsNoAttack, $01
00086DD9 E104                       	smpsAlterNote       $04
00086DDB E701                       	dc.b	smpsNoAttack, $01
00086DDD E108                       	smpsAlterNote       $08
00086DDF E701                       	dc.b	smpsNoAttack, $01
00086DE1 E10E                       	smpsAlterNote       $0E
00086DE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DE7 E10B                       	smpsAlterNote       $0B
00086DE9 E701                       	dc.b	smpsNoAttack, $01
00086DEB E105                       	smpsAlterNote       $05
00086DED E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00086DF5 03                         	dc.b	$03
00086DF6 E601                       	smpsAlterVol        $01
00086DF8 F6F1 D1                    	smpsJump            music84_Jump01
00086DFB                            
00086DFB                            ; FM5 Data
00086DFB                            music84_FM5:
00086DFD E080                       	smpsPan             panLeft, $00
00086DFF 8003                       	dc.b	nRst, $03
00086E01 E10D                       	smpsAlterNote       $0D
00086E03 C203 8008                  	dc.b	nF5, $03, nRst, $08
00086E07 E10C                       	smpsAlterNote       $0C
00086E09 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00086E0D E10F                       	smpsAlterNote       $0F
00086E0F BA03 8006                  	dc.b	nA4, $03, nRst, $06
00086E15 E6FE                       	smpsAlterVol        $FE
00086E17 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00086E1D E10D                       	smpsAlterNote       $0D
00086E1F C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00086E25 E10C                       	smpsAlterNote       $0C
00086E27 C102 8001                  	dc.b	nE5, $02, nRst, $01
00086E2B E10A                       	smpsAlterNote       $0A
00086E2D BD01 8001                  	dc.b	nC5, $01, nRst, $01
00086E33 03                         	dc.b	$03
00086E34                            
00086E34                            music84_Jump00:
00086E34 8004                       	dc.b	nRst, $04
00086E36 E602                       	smpsAlterVol        $02
00086E38 E10D                       	smpsAlterNote       $0D
00086E3A B60D                       	dc.b	nF4, $0D
00086E3C E107                       	smpsAlterNote       $07
00086E3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E42 E10A                       	smpsAlterNote       $0A
00086E44 E701                       	dc.b	smpsNoAttack, $01
00086E46 E110                       	smpsAlterNote       $10
00086E48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E4C E10A                       	smpsAlterNote       $0A
00086E4E E701                       	dc.b	smpsNoAttack, $01
00086E50 E107                       	smpsAlterNote       $07
00086E52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E56 E10D                       	smpsAlterNote       $0D
00086E58 E701                       	dc.b	smpsNoAttack, $01
00086E5A E111                       	smpsAlterNote       $11
00086E5C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086E60 E10D                       	smpsAlterNote       $0D
00086E62 B80D                       	dc.b	nG4, $0D
00086E64 E107                       	smpsAlterNote       $07
00086E66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E6A E10A                       	smpsAlterNote       $0A
00086E6C E701                       	dc.b	smpsNoAttack, $01
00086E6E E110                       	smpsAlterNote       $10
00086E70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E74 E10A                       	smpsAlterNote       $0A
00086E76 E701                       	dc.b	smpsNoAttack, $01
00086E78 E107                       	smpsAlterNote       $07
00086E7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E7E E10D                       	smpsAlterNote       $0D
00086E80 E701                       	dc.b	smpsNoAttack, $01
00086E82 E111                       	smpsAlterNote       $11
00086E84 E701                       	dc.b	smpsNoAttack, $01
00086E86 E110                       	smpsAlterNote       $10
00086E88 E701                       	dc.b	smpsNoAttack, $01
00086E8A E10A                       	smpsAlterNote       $0A
00086E8C E701                       	dc.b	smpsNoAttack, $01
00086E8E E106                       	smpsAlterNote       $06
00086E90 E701                       	dc.b	smpsNoAttack, $01
00086E92 E10A                       	smpsAlterNote       $0A
00086E94 E701                       	dc.b	smpsNoAttack, $01
00086E96 E10D                       	smpsAlterNote       $0D
00086E98 E701                       	dc.b	smpsNoAttack, $01
00086E9A E111                       	smpsAlterNote       $11
00086E9C E701                       	dc.b	smpsNoAttack, $01
00086E9E E10D                       	smpsAlterNote       $0D
00086EA0 E701                       	dc.b	smpsNoAttack, $01
00086EA2 E10F                       	smpsAlterNote       $0F
00086EA4 BA0E                       	dc.b	nA4, $0E
00086EA6 E109                       	smpsAlterNote       $09
00086EA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EAC E10F                       	smpsAlterNote       $0F
00086EAE E701                       	dc.b	smpsNoAttack, $01
00086EB0 E112                       	smpsAlterNote       $12
00086EB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EB6 E10C                       	smpsAlterNote       $0C
00086EB8 E701                       	dc.b	smpsNoAttack, $01
00086EBA E108                       	smpsAlterNote       $08
00086EBC E701                       	dc.b	smpsNoAttack, $01
00086EBE E109                       	smpsAlterNote       $09
00086EC0 E701                       	dc.b	smpsNoAttack, $01
00086EC2 E10F                       	smpsAlterNote       $0F
00086EC4 E701                       	dc.b	smpsNoAttack, $01
00086EC6 E113                       	smpsAlterNote       $13
00086EC8 E701                       	dc.b	smpsNoAttack, $01
00086ECA E10F                       	smpsAlterNote       $0F
00086ECC E701                       	dc.b	smpsNoAttack, $01
00086ECE E109                       	smpsAlterNote       $09
00086ED0 E701                       	dc.b	smpsNoAttack, $01
00086ED2 E108                       	smpsAlterNote       $08
00086ED4 E701                       	dc.b	smpsNoAttack, $01
00086ED6 E10C                       	smpsAlterNote       $0C
00086ED8 E701                       	dc.b	smpsNoAttack, $01
00086EDA E112                       	smpsAlterNote       $12
00086EDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EE0 E10F                       	smpsAlterNote       $0F
00086EE2 E701                       	dc.b	smpsNoAttack, $01
00086EE4 E109                       	smpsAlterNote       $09
00086EE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EEA E10F                       	smpsAlterNote       $0F
00086EEC E701                       	dc.b	smpsNoAttack, $01
00086EEE E112                       	smpsAlterNote       $12
00086EF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EF4 E10C                       	smpsAlterNote       $0C
00086EF6 E701                       	dc.b	smpsNoAttack, $01
00086EF8 E108                       	smpsAlterNote       $08
00086EFA E701                       	dc.b	smpsNoAttack, $01
00086EFC E109                       	smpsAlterNote       $09
00086EFE E701                       	dc.b	smpsNoAttack, $01
00086F00 E10F                       	smpsAlterNote       $0F
00086F02 E701                       	dc.b	smpsNoAttack, $01
00086F04 E113                       	smpsAlterNote       $13
00086F06 E701                       	dc.b	smpsNoAttack, $01
00086F08 E10F                       	smpsAlterNote       $0F
00086F0A E701                       	dc.b	smpsNoAttack, $01
00086F0C E10C                       	smpsAlterNote       $0C
00086F0E E701                       	dc.b	smpsNoAttack, $01
00086F10 E108                       	smpsAlterNote       $08
00086F12 E701                       	dc.b	smpsNoAttack, $01
00086F14 E109                       	smpsAlterNote       $09
00086F16 8001                       	dc.b	nRst, $01
00086F18 E10C                       	smpsAlterNote       $0C
00086F1A B50A                       	dc.b	nE4, $0A
00086F1C E10D                       	smpsAlterNote       $0D
00086F1E B60D                       	dc.b	nF4, $0D
00086F20 E10A                       	smpsAlterNote       $0A
00086F22 E701                       	dc.b	smpsNoAttack, $01
00086F24 E106                       	smpsAlterNote       $06
00086F26 E701                       	dc.b	smpsNoAttack, $01
00086F28 E107                       	smpsAlterNote       $07
00086F2A E701                       	dc.b	smpsNoAttack, $01
00086F2C E10D                       	smpsAlterNote       $0D
00086F2E E701                       	dc.b	smpsNoAttack, $01
00086F30 E111                       	smpsAlterNote       $11
00086F32 E701                       	dc.b	smpsNoAttack, $01
00086F34 E10D                       	smpsAlterNote       $0D
00086F36 E701                       	dc.b	smpsNoAttack, $01
00086F38 E10A                       	smpsAlterNote       $0A
00086F3A E701                       	dc.b	smpsNoAttack, $01
00086F3C E106                       	smpsAlterNote       $06
00086F3E E701                       	dc.b	smpsNoAttack, $01
00086F40 E10A                       	smpsAlterNote       $0A
00086F42 E701                       	dc.b	smpsNoAttack, $01
00086F44 E110                       	smpsAlterNote       $10
00086F46 E701                       	dc.b	smpsNoAttack, $01
00086F48 E111                       	smpsAlterNote       $11
00086F4A E701                       	dc.b	smpsNoAttack, $01
00086F4C E10D                       	smpsAlterNote       $0D
00086F4E B80D                       	dc.b	nG4, $0D
00086F50 E10A                       	smpsAlterNote       $0A
00086F52 E701                       	dc.b	smpsNoAttack, $01
00086F54 E106                       	smpsAlterNote       $06
00086F56 E701                       	dc.b	smpsNoAttack, $01
00086F58 E107                       	smpsAlterNote       $07
00086F5A E701                       	dc.b	smpsNoAttack, $01
00086F5C E10D                       	smpsAlterNote       $0D
00086F5E E701                       	dc.b	smpsNoAttack, $01
00086F60 E111                       	smpsAlterNote       $11
00086F62 E701                       	dc.b	smpsNoAttack, $01
00086F64 E10D                       	smpsAlterNote       $0D
00086F66 E701                       	dc.b	smpsNoAttack, $01
00086F68 E10A                       	smpsAlterNote       $0A
00086F6A E701                       	dc.b	smpsNoAttack, $01
00086F6C E106                       	smpsAlterNote       $06
00086F6E E701                       	dc.b	smpsNoAttack, $01
00086F70 E10A                       	smpsAlterNote       $0A
00086F72 E701                       	dc.b	smpsNoAttack, $01
00086F74 E110                       	smpsAlterNote       $10
00086F76 E701                       	dc.b	smpsNoAttack, $01
00086F78 E111                       	smpsAlterNote       $11
00086F7A E701                       	dc.b	smpsNoAttack, $01
00086F7C E10D                       	smpsAlterNote       $0D
00086F7E E701                       	dc.b	smpsNoAttack, $01
00086F80 E107                       	smpsAlterNote       $07
00086F82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F86 E10A                       	smpsAlterNote       $0A
00086F88 E701                       	dc.b	smpsNoAttack, $01
00086F8A E110                       	smpsAlterNote       $10
00086F8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F90 E10D                       	smpsAlterNote       $0D
00086F92 8001                       	dc.b	nRst, $01
00086F94 E10F                       	smpsAlterNote       $0F
00086F96 BA0D                       	dc.b	nA4, $0D
00086F98 E10C                       	smpsAlterNote       $0C
00086F9A E701                       	dc.b	smpsNoAttack, $01
00086F9C E108                       	smpsAlterNote       $08
00086F9E E701                       	dc.b	smpsNoAttack, $01
00086FA0 E10C                       	smpsAlterNote       $0C
00086FA2 E701                       	dc.b	smpsNoAttack, $01
00086FA4 E112                       	smpsAlterNote       $12
00086FA6 E701                       	dc.b	smpsNoAttack, $01
00086FA8 E113                       	smpsAlterNote       $13
00086FAA E701                       	dc.b	smpsNoAttack, $01
00086FAC E10F                       	smpsAlterNote       $0F
00086FAE E701                       	dc.b	smpsNoAttack, $01
00086FB0 E109                       	smpsAlterNote       $09
00086FB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FB6 E10C                       	smpsAlterNote       $0C
00086FB8 E701                       	dc.b	smpsNoAttack, $01
00086FBA E112                       	smpsAlterNote       $12
00086FBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FC0 E10C                       	smpsAlterNote       $0C
00086FC2 E701                       	dc.b	smpsNoAttack, $01
00086FC4 E109                       	smpsAlterNote       $09
00086FC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FCA E10F                       	smpsAlterNote       $0F
00086FCC E701                       	dc.b	smpsNoAttack, $01
00086FCE E113                       	smpsAlterNote       $13
00086FD0 E701                       	dc.b	smpsNoAttack, $01
00086FD2 E112                       	smpsAlterNote       $12
00086FD4 E701                       	dc.b	smpsNoAttack, $01
00086FD6 E10C                       	smpsAlterNote       $0C
00086FD8 E701                       	dc.b	smpsNoAttack, $01
00086FDA E108                       	smpsAlterNote       $08
00086FDC E701                       	dc.b	smpsNoAttack, $01
00086FDE E10C                       	smpsAlterNote       $0C
00086FE0 E701                       	dc.b	smpsNoAttack, $01
00086FE2 E10F                       	smpsAlterNote       $0F
00086FE4 E701                       	dc.b	smpsNoAttack, $01
00086FE6 E113                       	smpsAlterNote       $13
00086FE8 E701                       	dc.b	smpsNoAttack, $01
00086FEA E10F                       	smpsAlterNote       $0F
00086FEC E701                       	dc.b	smpsNoAttack, $01
00086FEE E109                       	smpsAlterNote       $09
00086FF0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086FF4 E10D                       	smpsAlterNote       $0D
00086FF6 B609 8001                  	dc.b	nF4, $09, nRst, $01
00086FFA E10C                       	smpsAlterNote       $0C
00086FFC B506 8001                  	dc.b	nE4, $06, nRst, $01
00087000 E10B                       	smpsAlterNote       $0B
00087002 B30D                       	dc.b	nD4, $0D
00087004 E10C                       	smpsAlterNote       $0C
00087006 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008700A E10D                       	smpsAlterNote       $0D
0008700C B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00087014 E109                       	smpsAlterNote       $09
00087016 E701                       	dc.b	smpsNoAttack, $01
00087018 E108                       	smpsAlterNote       $08
0008701A E701                       	dc.b	smpsNoAttack, $01
0008701C E10C                       	smpsAlterNote       $0C
0008701E E701                       	dc.b	smpsNoAttack, $01
00087020 E112                       	smpsAlterNote       $12
00087022 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087026 E10F                       	smpsAlterNote       $0F
00087028 E701                       	dc.b	smpsNoAttack, $01
0008702A E109                       	smpsAlterNote       $09
0008702C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087030 E10F                       	smpsAlterNote       $0F
00087032 E701                       	dc.b	smpsNoAttack, $01
00087034 E112                       	smpsAlterNote       $12
00087036 E701                       	dc.b	smpsNoAttack, $01
00087038 E113                       	smpsAlterNote       $13
0008703A 8001                       	dc.b	nRst, $01
0008703C E10D                       	smpsAlterNote       $0D
0008703E C20D                       	dc.b	nF5, $0D
00087040 E107                       	smpsAlterNote       $07
00087042 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087046 E10A                       	smpsAlterNote       $0A
00087048 E701                       	dc.b	smpsNoAttack, $01
0008704A E110                       	smpsAlterNote       $10
0008704C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087050 E10A                       	smpsAlterNote       $0A
00087052 E701                       	dc.b	smpsNoAttack, $01
00087054 E107                       	smpsAlterNote       $07
00087056 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008705A E10D                       	smpsAlterNote       $0D
0008705C E701                       	dc.b	smpsNoAttack, $01
0008705E E111                       	smpsAlterNote       $11
00087060 E701                       	dc.b	smpsNoAttack, $01
00087062 E110                       	smpsAlterNote       $10
00087064 E701                       	dc.b	smpsNoAttack, $01
00087066 E10A                       	smpsAlterNote       $0A
00087068 E701                       	dc.b	smpsNoAttack, $01
0008706A E106                       	smpsAlterNote       $06
0008706C E701                       	dc.b	smpsNoAttack, $01
0008706E E10A                       	smpsAlterNote       $0A
00087070 E701                       	dc.b	smpsNoAttack, $01
00087072 E10D                       	smpsAlterNote       $0D
00087074 E701                       	dc.b	smpsNoAttack, $01
00087076 E111                       	smpsAlterNote       $11
00087078 E701                       	dc.b	smpsNoAttack, $01
0008707A E10D                       	smpsAlterNote       $0D
0008707C E701                       	dc.b	smpsNoAttack, $01
0008707E E107                       	smpsAlterNote       $07
00087080 E701                       	dc.b	smpsNoAttack, $01
00087082 E106                       	smpsAlterNote       $06
00087084 E701                       	dc.b	smpsNoAttack, $01
00087086 E10A                       	smpsAlterNote       $0A
00087088 E701                       	dc.b	smpsNoAttack, $01
0008708A E110                       	smpsAlterNote       $10
0008708C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087090 E10D                       	smpsAlterNote       $0D
00087092 E701                       	dc.b	smpsNoAttack, $01
00087094 E107                       	smpsAlterNote       $07
00087096 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008709A E10D                       	smpsAlterNote       $0D
0008709C E701                       	dc.b	smpsNoAttack, $01
0008709E E110                       	smpsAlterNote       $10
000870A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870A4 E10A                       	smpsAlterNote       $0A
000870A6 E701                       	dc.b	smpsNoAttack, $01
000870A8 E106                       	smpsAlterNote       $06
000870AA E701                       	dc.b	smpsNoAttack, $01
000870AC E107                       	smpsAlterNote       $07
000870AE E701                       	dc.b	smpsNoAttack, $01
000870B0 E10D                       	smpsAlterNote       $0D
000870B2 E701                       	dc.b	smpsNoAttack, $01
000870B4 E111                       	smpsAlterNote       $11
000870B6 E701                       	dc.b	smpsNoAttack, $01
000870B8 E10D                       	smpsAlterNote       $0D
000870BA E701                       	dc.b	smpsNoAttack, $01
000870BC E10A                       	smpsAlterNote       $0A
000870BE E701                       	dc.b	smpsNoAttack, $01
000870C0 E106                       	smpsAlterNote       $06
000870C2 E701                       	dc.b	smpsNoAttack, $01
000870C4 E10A                       	smpsAlterNote       $0A
000870C6 E701                       	dc.b	smpsNoAttack, $01
000870C8 E110                       	smpsAlterNote       $10
000870CA E701                       	dc.b	smpsNoAttack, $01
000870CC E111                       	smpsAlterNote       $11
000870CE E701                       	dc.b	smpsNoAttack, $01
000870D0 E10D                       	smpsAlterNote       $0D
000870D2 E701                       	dc.b	smpsNoAttack, $01
000870D4 E107                       	smpsAlterNote       $07
000870D6 E701                       	dc.b	smpsNoAttack, $01
000870D8 E10D                       	smpsAlterNote       $0D
000870DA C207                       	dc.b	nF5, $07
000870DC E10C                       	smpsAlterNote       $0C
000870DE C10D                       	dc.b	nE5, $0D
000870E0 E109                       	smpsAlterNote       $09
000870E2 E701                       	dc.b	smpsNoAttack, $01
000870E4 E106                       	smpsAlterNote       $06
000870E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870EA E10C                       	smpsAlterNote       $0C
000870EC E701                       	dc.b	smpsNoAttack, $01
000870EE E110                       	smpsAlterNote       $10
000870F0 E701                       	dc.b	smpsNoAttack, $01
000870F2 E10F                       	smpsAlterNote       $0F
000870F4 E701                       	dc.b	smpsNoAttack, $01
000870F6 E109                       	smpsAlterNote       $09
000870F8 E701                       	dc.b	smpsNoAttack, $01
000870FA E105                       	smpsAlterNote       $05
000870FC E701                       	dc.b	smpsNoAttack, $01
000870FE E109                       	smpsAlterNote       $09
00087100 E701                       	dc.b	smpsNoAttack, $01
00087102 E10C                       	smpsAlterNote       $0C
00087104 E701                       	dc.b	smpsNoAttack, $01
00087106 E110                       	smpsAlterNote       $10
00087108 E701                       	dc.b	smpsNoAttack, $01
0008710A E10B                       	smpsAlterNote       $0B
0008710C BF0D                       	dc.b	nD5, $0D
0008710E E108                       	smpsAlterNote       $08
00087110 E701                       	dc.b	smpsNoAttack, $01
00087112 E105                       	smpsAlterNote       $05
00087114 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087118 E10B                       	smpsAlterNote       $0B
0008711A E701                       	dc.b	smpsNoAttack, $01
0008711C E10F                       	smpsAlterNote       $0F
0008711E E701                       	dc.b	smpsNoAttack, $01
00087120 E10E                       	smpsAlterNote       $0E
00087122 E701                       	dc.b	smpsNoAttack, $01
00087124 E108                       	smpsAlterNote       $08
00087126 E701                       	dc.b	smpsNoAttack, $01
00087128 E104                       	smpsAlterNote       $04
0008712A E701                       	dc.b	smpsNoAttack, $01
0008712C E108                       	smpsAlterNote       $08
0008712E E701                       	dc.b	smpsNoAttack, $01
00087130 E10E                       	smpsAlterNote       $0E
00087132 E701                       	dc.b	smpsNoAttack, $01
00087134 E10F                       	smpsAlterNote       $0F
00087136 E701                       	dc.b	smpsNoAttack, $01
00087138 E10B                       	smpsAlterNote       $0B
0008713A E701                       	dc.b	smpsNoAttack, $01
0008713C E105                       	smpsAlterNote       $05
0008713E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087142 E108                       	smpsAlterNote       $08
00087144 E701                       	dc.b	smpsNoAttack, $01
00087146 E10E                       	smpsAlterNote       $0E
00087148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008714C E108                       	smpsAlterNote       $08
0008714E E701                       	dc.b	smpsNoAttack, $01
00087150 E105                       	smpsAlterNote       $05
00087152 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087156 E10B                       	smpsAlterNote       $0B
00087158 E701                       	dc.b	smpsNoAttack, $01
0008715A E10F                       	smpsAlterNote       $0F
0008715C E701                       	dc.b	smpsNoAttack, $01
0008715E E10E                       	smpsAlterNote       $0E
00087160 E701                       	dc.b	smpsNoAttack, $01
00087162 E108                       	smpsAlterNote       $08
00087164 E701                       	dc.b	smpsNoAttack, $01
00087166 E104                       	smpsAlterNote       $04
00087168 E701                       	dc.b	smpsNoAttack, $01
0008716A E108                       	smpsAlterNote       $08
0008716C E701                       	dc.b	smpsNoAttack, $01
0008716E E10B                       	smpsAlterNote       $0B
00087170 E701                       	dc.b	smpsNoAttack, $01
00087172 E10F                       	smpsAlterNote       $0F
00087174 E701                       	dc.b	smpsNoAttack, $01
00087176 E10B                       	smpsAlterNote       $0B
00087178 E701                       	dc.b	smpsNoAttack, $01
0008717A E105                       	smpsAlterNote       $05
0008717C E701                       	dc.b	smpsNoAttack, $01
0008717E E104                       	smpsAlterNote       $04
00087180 E701                       	dc.b	smpsNoAttack, $01
00087182 E108                       	smpsAlterNote       $08
00087184 E701                       	dc.b	smpsNoAttack, $01
00087186 E10E                       	smpsAlterNote       $0E
00087188 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008718C E10B                       	smpsAlterNote       $0B
0008718E E701                       	dc.b	smpsNoAttack, $01
00087190 E105                       	smpsAlterNote       $05
00087192 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087196 E10B                       	smpsAlterNote       $0B
00087198 E701                       	dc.b	smpsNoAttack, $01
0008719A E10E                       	smpsAlterNote       $0E
0008719C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871A0 E108                       	smpsAlterNote       $08
000871A2 E701                       	dc.b	smpsNoAttack, $01
000871A4 E105                       	smpsAlterNote       $05
000871A6 8001                       	dc.b	nRst, $01
000871AA E601                       	smpsAlterVol        $01
000871AC E10B                       	smpsAlterNote       $0B
000871AE BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000871BA 8004                       	dc.b	nRst, $04
000871BE E6FF                       	smpsAlterVol        $FF
000871C0 E10D                       	smpsAlterNote       $0D
000871C2 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
000871CA E10C                       	smpsAlterNote       $0C
000871CC E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
000871D1 E10D                       	smpsAlterNote       $0D
000871D3 B60D                       	dc.b	nF4, $0D
000871D5 E10A                       	smpsAlterNote       $0A
000871D7 E701                       	dc.b	smpsNoAttack, $01
000871D9 E106                       	smpsAlterNote       $06
000871DB E701                       	dc.b	smpsNoAttack, $01
000871DD E10A                       	smpsAlterNote       $0A
000871DF E701                       	dc.b	smpsNoAttack, $01
000871E1 E110                       	smpsAlterNote       $10
000871E3 E701                       	dc.b	smpsNoAttack, $01
000871E5 E111                       	smpsAlterNote       $11
000871E7 E701                       	dc.b	smpsNoAttack, $01
000871E9 E10D                       	smpsAlterNote       $0D
000871EB E701                       	dc.b	smpsNoAttack, $01
000871ED E107                       	smpsAlterNote       $07
000871EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871F3 E10A                       	smpsAlterNote       $0A
000871F5 E701                       	dc.b	smpsNoAttack, $01
000871F7 E110                       	smpsAlterNote       $10
000871F9 E701                       	dc.b	smpsNoAttack, $01
000871FB E111                       	smpsAlterNote       $11
000871FD 8001                       	dc.b	nRst, $01
000871FF E10D                       	smpsAlterNote       $0D
00087201 B80D                       	dc.b	nG4, $0D
00087203 E10A                       	smpsAlterNote       $0A
00087205 E701                       	dc.b	smpsNoAttack, $01
00087207 E106                       	smpsAlterNote       $06
00087209 E701                       	dc.b	smpsNoAttack, $01
0008720B E10A                       	smpsAlterNote       $0A
0008720D E701                       	dc.b	smpsNoAttack, $01
0008720F E110                       	smpsAlterNote       $10
00087211 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087215 E10D                       	smpsAlterNote       $0D
00087217 E701                       	dc.b	smpsNoAttack, $01
00087219 E107                       	smpsAlterNote       $07
0008721B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008721F E10D                       	smpsAlterNote       $0D
00087221 E701                       	dc.b	smpsNoAttack, $01
00087223 E110                       	smpsAlterNote       $10
00087225 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087229 E10A                       	smpsAlterNote       $0A
0008722B E701                       	dc.b	smpsNoAttack, $01
0008722D E106                       	smpsAlterNote       $06
0008722F E701                       	dc.b	smpsNoAttack, $01
00087231 E107                       	smpsAlterNote       $07
00087233 E701                       	dc.b	smpsNoAttack, $01
00087235 E10D                       	smpsAlterNote       $0D
00087237 E701                       	dc.b	smpsNoAttack, $01
00087239 E111                       	smpsAlterNote       $11
0008723B E701                       	dc.b	smpsNoAttack, $01
0008723D E10D                       	smpsAlterNote       $0D
0008723F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087243 E10F                       	smpsAlterNote       $0F
00087245 BA02 8001                  	dc.b	nA4, $02, nRst, $01
00087249 E110                       	smpsAlterNote       $10
0008724B BB03                       	dc.b	nBb4, $03
0008724D E10F                       	smpsAlterNote       $0F
0008724F BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00087255 E110                       	smpsAlterNote       $10
00087257 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008725B E10F                       	smpsAlterNote       $0F
0008725D C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00087263 E110                       	smpsAlterNote       $10
00087265 D302 8001                  	dc.b	nBb6, $02, nRst, $01
00087269 E10F                       	smpsAlterNote       $0F
0008726B D20D                       	dc.b	nA6, $0D
0008726D E10C                       	smpsAlterNote       $0C
0008726F E701                       	dc.b	smpsNoAttack, $01
00087271 E108                       	smpsAlterNote       $08
00087273 E701                       	dc.b	smpsNoAttack, $01
00087275 E10C                       	smpsAlterNote       $0C
00087277 E701                       	dc.b	smpsNoAttack, $01
00087279 E10F                       	smpsAlterNote       $0F
0008727B E701                       	dc.b	smpsNoAttack, $01
0008727D E113                       	smpsAlterNote       $13
0008727F E701                       	dc.b	smpsNoAttack, $01
00087281 E10F                       	smpsAlterNote       $0F
00087283 E701                       	dc.b	smpsNoAttack, $01
00087285 E109                       	smpsAlterNote       $09
00087287 E701                       	dc.b	smpsNoAttack, $01
00087289 E108                       	smpsAlterNote       $08
0008728B E701                       	dc.b	smpsNoAttack, $01
0008728D E10C                       	smpsAlterNote       $0C
0008728F E701                       	dc.b	smpsNoAttack, $01
00087291 E112                       	smpsAlterNote       $12
00087293 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087297 E10F                       	smpsAlterNote       $0F
00087299 E701                       	dc.b	smpsNoAttack, $01
0008729B E109                       	smpsAlterNote       $09
0008729D E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000872A3 E10D                       	smpsAlterNote       $0D
000872A5 CE07                       	dc.b	nF6, $07
000872A7 E10C                       	smpsAlterNote       $0C
000872A9 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000872AD E10D                       	smpsAlterNote       $0D
000872AF CE03                       	dc.b	nF6, $03
000872B1 E10C                       	smpsAlterNote       $0C
000872B3 CC0D                       	dc.b	nEb6, $0D
000872B5 E109                       	smpsAlterNote       $09
000872B7 E701                       	dc.b	smpsNoAttack, $01
000872B9 E106                       	smpsAlterNote       $06
000872BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872BF E10C                       	smpsAlterNote       $0C
000872C1 E701                       	dc.b	smpsNoAttack, $01
000872C3 E110                       	smpsAlterNote       $10
000872C5 E701                       	dc.b	smpsNoAttack, $01
000872C7 E10F                       	smpsAlterNote       $0F
000872C9 E701                       	dc.b	smpsNoAttack, $01
000872CB E109                       	smpsAlterNote       $09
000872CD E701                       	dc.b	smpsNoAttack, $01
000872CF E105                       	smpsAlterNote       $05
000872D1 E701                       	dc.b	smpsNoAttack, $01
000872D3 E109                       	smpsAlterNote       $09
000872D5 E701                       	dc.b	smpsNoAttack, $01
000872D7 E10C                       	smpsAlterNote       $0C
000872D9 E701                       	dc.b	smpsNoAttack, $01
000872DB E110                       	smpsAlterNote       $10
000872DD E701                       	dc.b	smpsNoAttack, $01
000872DF E10C                       	smpsAlterNote       $0C
000872E1 E701                       	dc.b	smpsNoAttack, $01
000872E3 E106                       	smpsAlterNote       $06
000872E5 E701                       	dc.b	smpsNoAttack, $01
000872E7 E105                       	smpsAlterNote       $05
000872E9 E701                       	dc.b	smpsNoAttack, $01
000872EB E109                       	smpsAlterNote       $09
000872ED E701                       	dc.b	smpsNoAttack, $01
000872EF E10F                       	smpsAlterNote       $0F
000872F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872F5 E10C                       	smpsAlterNote       $0C
000872F7 E701                       	dc.b	smpsNoAttack, $01
000872F9 E10B                       	smpsAlterNote       $0B
000872FB CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00087305 E10F                       	smpsAlterNote       $0F
00087307 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00087311 E10D                       	smpsAlterNote       $0D
00087313 C203                       	dc.b	nF5, $03
00087315 E10C                       	smpsAlterNote       $0C
00087317 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008731B E10D                       	smpsAlterNote       $0D
0008731D C20D                       	dc.b	nF5, $0D
0008731F E10C                       	smpsAlterNote       $0C
00087321 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00087325 E10B                       	smpsAlterNote       $0B
00087327 BF0D                       	dc.b	nD5, $0D
00087329 E108                       	smpsAlterNote       $08
0008732B E701                       	dc.b	smpsNoAttack, $01
0008732D E104                       	smpsAlterNote       $04
0008732F E701                       	dc.b	smpsNoAttack, $01
00087331 E108                       	smpsAlterNote       $08
00087333 E701                       	dc.b	smpsNoAttack, $01
00087335 E10E                       	smpsAlterNote       $0E
00087337 E701                       	dc.b	smpsNoAttack, $01
00087339 E10F                       	smpsAlterNote       $0F
0008733B E701                       	dc.b	smpsNoAttack, $01
0008733D E10B                       	smpsAlterNote       $0B
0008733F E701                       	dc.b	smpsNoAttack, $01
00087341 E105                       	smpsAlterNote       $05
00087343 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087347 E108                       	smpsAlterNote       $08
00087349 E701                       	dc.b	smpsNoAttack, $01
0008734B E10E                       	smpsAlterNote       $0E
0008734D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087351 E108                       	smpsAlterNote       $08
00087353 E701                       	dc.b	smpsNoAttack, $01
00087355 E105                       	smpsAlterNote       $05
00087357 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008735B E10B                       	smpsAlterNote       $0B
0008735D E701                       	dc.b	smpsNoAttack, $01
0008735F E10F                       	smpsAlterNote       $0F
00087361 E701                       	dc.b	smpsNoAttack, $01
00087363 E10E                       	smpsAlterNote       $0E
00087365 E701                       	dc.b	smpsNoAttack, $01
00087367 E108                       	smpsAlterNote       $08
00087369 E701                       	dc.b	smpsNoAttack, $01
0008736B E104                       	smpsAlterNote       $04
0008736D E701                       	dc.b	smpsNoAttack, $01
0008736F E108                       	smpsAlterNote       $08
00087371 E701                       	dc.b	smpsNoAttack, $01
00087373 E10B                       	smpsAlterNote       $0B
00087375 E701                       	dc.b	smpsNoAttack, $01
00087377 E10F                       	smpsAlterNote       $0F
00087379 E701                       	dc.b	smpsNoAttack, $01
0008737B E10B                       	smpsAlterNote       $0B
0008737D E701                       	dc.b	smpsNoAttack, $01
0008737F E105                       	smpsAlterNote       $05
00087381 E701                       	dc.b	smpsNoAttack, $01
00087383 E104                       	smpsAlterNote       $04
00087385 E701                       	dc.b	smpsNoAttack, $01
00087387 E108                       	smpsAlterNote       $08
00087389 E701                       	dc.b	smpsNoAttack, $01
0008738B E10E                       	smpsAlterNote       $0E
0008738D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087391 E10B                       	smpsAlterNote       $0B
00087393 E701                       	dc.b	smpsNoAttack, $01
00087395 E105                       	smpsAlterNote       $05
00087397 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008739B E10B                       	smpsAlterNote       $0B
0008739D E701                       	dc.b	smpsNoAttack, $01
0008739F E10E                       	smpsAlterNote       $0E
000873A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873A5 E108                       	smpsAlterNote       $08
000873A7 E701                       	dc.b	smpsNoAttack, $01
000873A9 E104                       	smpsAlterNote       $04
000873AB E701                       	dc.b	smpsNoAttack, $01
000873AD E105                       	smpsAlterNote       $05
000873AF E701                       	dc.b	smpsNoAttack, $01
000873B1 E10B                       	smpsAlterNote       $0B
000873B3 E701                       	dc.b	smpsNoAttack, $01
000873B5 E10F                       	smpsAlterNote       $0F
000873B7 E701                       	dc.b	smpsNoAttack, $01
000873B9 E10B                       	smpsAlterNote       $0B
000873BB E701                       	dc.b	smpsNoAttack, $01
000873BD E108                       	smpsAlterNote       $08
000873BF E701                       	dc.b	smpsNoAttack, $01
000873C1 E104                       	smpsAlterNote       $04
000873C3 E701                       	dc.b	smpsNoAttack, $01
000873C5 E108                       	smpsAlterNote       $08
000873C7 E701                       	dc.b	smpsNoAttack, $01
000873C9 E10E                       	smpsAlterNote       $0E
000873CB E701                       	dc.b	smpsNoAttack, $01
000873CD E10F                       	smpsAlterNote       $0F
000873CF E701                       	dc.b	smpsNoAttack, $01
000873D1 E10B                       	smpsAlterNote       $0B
000873D3 E701                       	dc.b	smpsNoAttack, $01
000873D5 E105                       	smpsAlterNote       $05
000873D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873DB E108                       	smpsAlterNote       $08
000873DD E701                       	dc.b	smpsNoAttack, $01
000873DF E10E                       	smpsAlterNote       $0E
000873E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873E5 E108                       	smpsAlterNote       $08
000873E7 E701                       	dc.b	smpsNoAttack, $01
000873E9 E105                       	smpsAlterNote       $05
000873EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873EF E10B                       	smpsAlterNote       $0B
000873F1 E701                       	dc.b	smpsNoAttack, $01
000873F3 E10F                       	smpsAlterNote       $0F
000873F5 E701                       	dc.b	smpsNoAttack, $01
000873F7 E10E                       	smpsAlterNote       $0E
000873F9 E701                       	dc.b	smpsNoAttack, $01
000873FB E108                       	smpsAlterNote       $08
000873FD E701                       	dc.b	smpsNoAttack, $01
000873FF E104                       	smpsAlterNote       $04
00087401 E701                       	dc.b	smpsNoAttack, $01
00087403 E108                       	smpsAlterNote       $08
00087405 E701                       	dc.b	smpsNoAttack, $01
00087407 E10B                       	smpsAlterNote       $0B
00087409 E701                       	dc.b	smpsNoAttack, $01
0008740B E10F                       	smpsAlterNote       $0F
0008740D E701                       	dc.b	smpsNoAttack, $01
0008740F E10B                       	smpsAlterNote       $0B
00087411 E701                       	dc.b	smpsNoAttack, $01
00087413 E105                       	smpsAlterNote       $05
00087415 E701                       	dc.b	smpsNoAttack, $01
00087417 E104                       	smpsAlterNote       $04
00087419 E701                       	dc.b	smpsNoAttack, $01
0008741B E105                       	smpsAlterNote       $05
0008741D 8001                       	dc.b	nRst, $01
0008741F E10D                       	smpsAlterNote       $0D
00087421 C20D                       	dc.b	nF5, $0D
00087423 E107                       	smpsAlterNote       $07
00087425 E701                       	dc.b	smpsNoAttack, $01
00087427 E106                       	smpsAlterNote       $06
00087429 E701                       	dc.b	smpsNoAttack, $01
0008742B E10A                       	smpsAlterNote       $0A
0008742D E701                       	dc.b	smpsNoAttack, $01
0008742F E110                       	smpsAlterNote       $10
00087431 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087435 E10D                       	smpsAlterNote       $0D
00087437 E701                       	dc.b	smpsNoAttack, $01
00087439 E107                       	smpsAlterNote       $07
0008743B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008743F E10D                       	smpsAlterNote       $0D
00087441 E701                       	dc.b	smpsNoAttack, $01
00087443 E110                       	smpsAlterNote       $10
00087445 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087449 E10A                       	smpsAlterNote       $0A
0008744B E701                       	dc.b	smpsNoAttack, $01
0008744D E106                       	smpsAlterNote       $06
0008744F E701                       	dc.b	smpsNoAttack, $01
00087451 E107                       	smpsAlterNote       $07
00087453 E701                       	dc.b	smpsNoAttack, $01
00087455 E10D                       	smpsAlterNote       $0D
00087457 E701                       	dc.b	smpsNoAttack, $01
00087459 E111                       	smpsAlterNote       $11
0008745B E701                       	dc.b	smpsNoAttack, $01
0008745D E10D                       	smpsAlterNote       $0D
0008745F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087463 E10C                       	smpsAlterNote       $0C
00087465 C10D                       	dc.b	nE5, $0D
00087467 E10D                       	smpsAlterNote       $0D
00087469 C20A                       	dc.b	nF5, $0A
0008746B E10C                       	smpsAlterNote       $0C
0008746D C10E                       	dc.b	nE5, $0E
0008746F E106                       	smpsAlterNote       $06
00087471 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087475 E10C                       	smpsAlterNote       $0C
00087477 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008747B E10B                       	smpsAlterNote       $0B
0008747D BF0D                       	dc.b	nD5, $0D
0008747F E10C                       	smpsAlterNote       $0C
00087481 C107                       	dc.b	nE5, $07
00087483 E10D                       	smpsAlterNote       $0D
00087485 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008748F E110                       	smpsAlterNote       $10
00087491 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00087497 E10F                       	smpsAlterNote       $0F
00087499 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
000874A1 E10D                       	smpsAlterNote       $0D
000874A3 D003                       	dc.b	nG6, $03
000874A7 E0C0                       	smpsPan             panCenter, $00
000874A9 E6FF                       	smpsAlterVol        $FF
000874AB AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
000874B7 8001                       	dc.b	nRst, $01
000874B9 E10C                       	smpsAlterNote       $0C
000874BB A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
000874C5 E604                       	smpsAlterVol        $04
000874C7 E10B                       	smpsAlterNote       $0B
000874C9 B306 8001                  	dc.b	nD4, $06, nRst, $01
000874CD E10F                       	smpsAlterNote       $0F
000874CF AE03                       	dc.b	nA3, $03
000874D1 E10D                       	smpsAlterNote       $0D
000874D3 B603 8001                  	dc.b	nF4, $03, nRst, $01
000874D7 E10C                       	smpsAlterNote       $0C
000874D9 B506 8001                  	dc.b	nE4, $06, nRst, $01
000874DD E10B                       	smpsAlterNote       $0B
000874DF B302 8001                  	dc.b	nD4, $02, nRst, $01
000874E3 E10A                       	smpsAlterNote       $0A
000874E5 B103                       	dc.b	nC4, $03
000874E7 E110                       	smpsAlterNote       $10
000874E9 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000874ED E10F                       	smpsAlterNote       $0F
000874EF AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000874F3 E080                       	smpsPan             panLeft, $00
000874F5 01                         	dc.b	$01
000874F8 E6FB                       	smpsAlterVol        $FB
000874FA E1E4                       	smpsAlterNote       $E4
000874FC C501                       	dc.b	nAb5, $01
000874FE E1F4                       	smpsAlterNote       $F4
00087500 E701                       	dc.b	smpsNoAttack, $01
00087502 E104                       	smpsAlterNote       $04
00087504 E701                       	dc.b	smpsNoAttack, $01
00087506 E114                       	smpsAlterNote       $14
00087508 E701                       	dc.b	smpsNoAttack, $01
0008750A E11C                       	smpsAlterNote       $1C
0008750C E701                       	dc.b	smpsNoAttack, $01
0008750E E1EF                       	smpsAlterNote       $EF
00087510 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00087513 E1FF                       	smpsAlterNote       $FF
00087515 E701                       	dc.b	smpsNoAttack, $01
00087517 E10F                       	smpsAlterNote       $0F
00087519 C606                       	dc.b	nA5, $06
0008751B E109                       	smpsAlterNote       $09
0008751D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087521 E10F                       	smpsAlterNote       $0F
00087523 E701                       	dc.b	smpsNoAttack, $01
00087525 E112                       	smpsAlterNote       $12
00087527 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008752B E10C                       	smpsAlterNote       $0C
0008752D E701                       	dc.b	smpsNoAttack, $01
0008752F E108                       	smpsAlterNote       $08
00087531 E701                       	dc.b	smpsNoAttack, $01
00087533 E109                       	smpsAlterNote       $09
00087535 E701                       	dc.b	smpsNoAttack, $01
00087537 E10F                       	smpsAlterNote       $0F
00087539 E701                       	dc.b	smpsNoAttack, $01
0008753B E113                       	smpsAlterNote       $13
0008753D E701                       	dc.b	smpsNoAttack, $01
0008753F E10F                       	smpsAlterNote       $0F
00087541 E701                       	dc.b	smpsNoAttack, $01
00087543 E10C                       	smpsAlterNote       $0C
00087545 E701                       	dc.b	smpsNoAttack, $01
00087547 E108                       	smpsAlterNote       $08
00087549 E701                       	dc.b	smpsNoAttack, $01
0008754B E10C                       	smpsAlterNote       $0C
0008754D E701                       	dc.b	smpsNoAttack, $01
0008754F E112                       	smpsAlterNote       $12
00087551 E701                       	dc.b	smpsNoAttack, $01
00087553 E113                       	smpsAlterNote       $13
00087555 E701                       	dc.b	smpsNoAttack, $01
00087557 E10F                       	smpsAlterNote       $0F
00087559 E701                       	dc.b	smpsNoAttack, $01
0008755B E109                       	smpsAlterNote       $09
0008755D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087561 E10C                       	smpsAlterNote       $0C
00087563 E701                       	dc.b	smpsNoAttack, $01
00087565 E112                       	smpsAlterNote       $12
00087567 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008756B E10C                       	smpsAlterNote       $0C
0008756D E701                       	dc.b	smpsNoAttack, $01
0008756F E109                       	smpsAlterNote       $09
00087571 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087575 E10F                       	smpsAlterNote       $0F
00087577 E701                       	dc.b	smpsNoAttack, $01
00087579 E113                       	smpsAlterNote       $13
0008757B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008757F E10D                       	smpsAlterNote       $0D
00087581 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00087587 E10C                       	smpsAlterNote       $0C
00087589 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008758D E10D                       	smpsAlterNote       $0D
0008758F C201 8001                  	dc.b	nF5, $01, nRst, $01
00087593 E10C                       	smpsAlterNote       $0C
00087595 C102                       	dc.b	nE5, $02
00087597 E10B                       	smpsAlterNote       $0B
00087599 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008759D E10C                       	smpsAlterNote       $0C
0008759F C101 8001                  	dc.b	nE5, $01, nRst, $01
000875A3 E10B                       	smpsAlterNote       $0B
000875A5 BF02                       	dc.b	nD5, $02
000875A7 E10A                       	smpsAlterNote       $0A
000875A9 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
000875B3 E110                       	smpsAlterNote       $10
000875B5 BB02                       	dc.b	nBb4, $02
000875B7 E10A                       	smpsAlterNote       $0A
000875B9 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000875BD E110                       	smpsAlterNote       $10
000875BF BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000875C3 E10F                       	smpsAlterNote       $0F
000875C5 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000875C9 E110                       	smpsAlterNote       $10
000875CB BB02                       	dc.b	nBb4, $02
000875CD E10F                       	smpsAlterNote       $0F
000875CF BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000875D9 E10C                       	smpsAlterNote       $0C
000875DB B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000875E3 E10B                       	smpsAlterNote       $0B
000875E5 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000875E9 E10F                       	smpsAlterNote       $0F
000875EB BA02                       	dc.b	nA4, $02
000875EF E0C0                       	smpsPan             panCenter, $00
000875F1 E601                       	smpsAlterVol        $01
000875F3 E109                       	smpsAlterNote       $09
000875F5 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00087601 E108                       	smpsAlterNote       $08
00087603 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00087609 E107                       	smpsAlterNote       $07
0008760B B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00087611 E109                       	smpsAlterNote       $09
00087613 B603 8001                  	dc.b	nF4, $03, nRst, $01
00087617 E108                       	smpsAlterNote       $08
00087619 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008761D E107                       	smpsAlterNote       $07
0008761F B302 8001                  	dc.b	nD4, $02, nRst, $01
00087623 E106                       	smpsAlterNote       $06
00087625 B103                       	dc.b	nC4, $03
00087627 E10C                       	smpsAlterNote       $0C
00087629 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008762F E080                       	smpsPan             panLeft, $00
00087631 07                         	dc.b	$07
00087632 E6FE                       	smpsAlterVol        $FE
00087634 E10B                       	smpsAlterNote       $0B
00087636 B20D                       	dc.b	nCs4, $0D
00087638 E105                       	smpsAlterNote       $05
0008763A E701                       	dc.b	smpsNoAttack, $01
0008763C E104                       	smpsAlterNote       $04
0008763E E701                       	dc.b	smpsNoAttack, $01
00087640 E108                       	smpsAlterNote       $08
00087642 E701                       	dc.b	smpsNoAttack, $01
00087644 E10E                       	smpsAlterNote       $0E
00087646 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008764A E10B                       	smpsAlterNote       $0B
0008764C E701                       	dc.b	smpsNoAttack, $01
0008764E E105                       	smpsAlterNote       $05
00087650 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087654 E10B                       	smpsAlterNote       $0B
00087656 E701                       	dc.b	smpsNoAttack, $01
00087658 E10E                       	smpsAlterNote       $0E
0008765A E701                       	dc.b	smpsNoAttack, $01
0008765C E10F                       	smpsAlterNote       $0F
0008765E 8001                       	dc.b	nRst, $01
00087660 E10B                       	smpsAlterNote       $0B
00087662 B30D                       	dc.b	nD4, $0D
00087664 E105                       	smpsAlterNote       $05
00087666 E701                       	dc.b	smpsNoAttack, $01
00087668 E104                       	smpsAlterNote       $04
0008766A E701                       	dc.b	smpsNoAttack, $01
0008766C E108                       	smpsAlterNote       $08
0008766E E701                       	dc.b	smpsNoAttack, $01
00087670 E10E                       	smpsAlterNote       $0E
00087672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087676 E10B                       	smpsAlterNote       $0B
00087678 E701                       	dc.b	smpsNoAttack, $01
0008767A E105                       	smpsAlterNote       $05
0008767C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087680 E10B                       	smpsAlterNote       $0B
00087682 E701                       	dc.b	smpsNoAttack, $01
00087684 E10E                       	smpsAlterNote       $0E
00087686 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008768A E108                       	smpsAlterNote       $08
0008768C E701                       	dc.b	smpsNoAttack, $01
0008768E E104                       	smpsAlterNote       $04
00087690 E701                       	dc.b	smpsNoAttack, $01
00087692 E105                       	smpsAlterNote       $05
00087694 E701                       	dc.b	smpsNoAttack, $01
00087696 E10B                       	smpsAlterNote       $0B
00087698 E701                       	dc.b	smpsNoAttack, $01
0008769A E10F                       	smpsAlterNote       $0F
0008769C E701                       	dc.b	smpsNoAttack, $01
0008769E E10B                       	smpsAlterNote       $0B
000876A0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000876A4 E10C                       	smpsAlterNote       $0C
000876A6 B50D                       	dc.b	nE4, $0D
000876A8 E106                       	smpsAlterNote       $06
000876AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876AE E10C                       	smpsAlterNote       $0C
000876B0 E701                       	dc.b	smpsNoAttack, $01
000876B2 E10F                       	smpsAlterNote       $0F
000876B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876B8 E109                       	smpsAlterNote       $09
000876BA E701                       	dc.b	smpsNoAttack, $01
000876BC E105                       	smpsAlterNote       $05
000876BE E701                       	dc.b	smpsNoAttack, $01
000876C0 E106                       	smpsAlterNote       $06
000876C2 E701                       	dc.b	smpsNoAttack, $01
000876C4 E10C                       	smpsAlterNote       $0C
000876C6 E701                       	dc.b	smpsNoAttack, $01
000876C8 E110                       	smpsAlterNote       $10
000876CA E701                       	dc.b	smpsNoAttack, $01
000876CC E10B                       	smpsAlterNote       $0B
000876CE B30E                       	dc.b	nD4, $0E
000876D0 E105                       	smpsAlterNote       $05
000876D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876D6 E10B                       	smpsAlterNote       $0B
000876D8 E701                       	dc.b	smpsNoAttack, $01
000876DA E10E                       	smpsAlterNote       $0E
000876DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876E0 E108                       	smpsAlterNote       $08
000876E2 E701                       	dc.b	smpsNoAttack, $01
000876E4 E104                       	smpsAlterNote       $04
000876E6 E701                       	dc.b	smpsNoAttack, $01
000876E8 E105                       	smpsAlterNote       $05
000876EA E701                       	dc.b	smpsNoAttack, $01
000876EC E10B                       	smpsAlterNote       $0B
000876EE E701                       	dc.b	smpsNoAttack, $01
000876F0 E10F                       	smpsAlterNote       $0F
000876F2 E701                       	dc.b	smpsNoAttack, $01
000876F4 E10B                       	smpsAlterNote       $0B
000876F6 E701                       	dc.b	smpsNoAttack, $01
000876F8 E108                       	smpsAlterNote       $08
000876FA E701                       	dc.b	smpsNoAttack, $01
000876FC E104                       	smpsAlterNote       $04
000876FE E701                       	dc.b	smpsNoAttack, $01
00087700 E108                       	smpsAlterNote       $08
00087702 E701                       	dc.b	smpsNoAttack, $01
00087704 E10E                       	smpsAlterNote       $0E
00087706 E701                       	dc.b	smpsNoAttack, $01
00087708 E10F                       	smpsAlterNote       $0F
0008770A E701                       	dc.b	smpsNoAttack, $01
0008770C E10B                       	smpsAlterNote       $0B
0008770E E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00087712 E108                       	smpsAlterNote       $08
00087714 E701                       	dc.b	smpsNoAttack, $01
00087716 E105                       	smpsAlterNote       $05
00087718 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008771C E10B                       	smpsAlterNote       $0B
0008771E E701                       	dc.b	smpsNoAttack, $01
00087720 E10F                       	smpsAlterNote       $0F
00087722 E701                       	dc.b	smpsNoAttack, $01
00087724 E10E                       	smpsAlterNote       $0E
00087726 E701                       	dc.b	smpsNoAttack, $01
00087728 E108                       	smpsAlterNote       $08
0008772A E701                       	dc.b	smpsNoAttack, $01
0008772C E104                       	smpsAlterNote       $04
0008772E E701                       	dc.b	smpsNoAttack, $01
00087730 E108                       	smpsAlterNote       $08
00087732 E701                       	dc.b	smpsNoAttack, $01
00087734 E10B                       	smpsAlterNote       $0B
00087736 E701                       	dc.b	smpsNoAttack, $01
00087738 E10F                       	smpsAlterNote       $0F
0008773A E701                       	dc.b	smpsNoAttack, $01
0008773C E10B                       	smpsAlterNote       $0B
0008773E B30D                       	dc.b	nD4, $0D
00087740 E108                       	smpsAlterNote       $08
00087742 E701                       	dc.b	smpsNoAttack, $01
00087744 E105                       	smpsAlterNote       $05
00087746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008774A E10B                       	smpsAlterNote       $0B
0008774C E701                       	dc.b	smpsNoAttack, $01
0008774E E10F                       	smpsAlterNote       $0F
00087750 E701                       	dc.b	smpsNoAttack, $01
00087752 E10E                       	smpsAlterNote       $0E
00087754 E701                       	dc.b	smpsNoAttack, $01
00087756 E108                       	smpsAlterNote       $08
00087758 E701                       	dc.b	smpsNoAttack, $01
0008775A E104                       	smpsAlterNote       $04
0008775C E701                       	dc.b	smpsNoAttack, $01
0008775E E108                       	smpsAlterNote       $08
00087760 E701                       	dc.b	smpsNoAttack, $01
00087762 E10B                       	smpsAlterNote       $0B
00087764 E701                       	dc.b	smpsNoAttack, $01
00087766 E10F                       	smpsAlterNote       $0F
00087768 E701                       	dc.b	smpsNoAttack, $01
0008776A E10B                       	smpsAlterNote       $0B
0008776C E701                       	dc.b	smpsNoAttack, $01
0008776E E105                       	smpsAlterNote       $05
00087770 E701                       	dc.b	smpsNoAttack, $01
00087772 E104                       	smpsAlterNote       $04
00087774 E701                       	dc.b	smpsNoAttack, $01
00087776 E108                       	smpsAlterNote       $08
00087778 E701                       	dc.b	smpsNoAttack, $01
0008777A E10E                       	smpsAlterNote       $0E
0008777C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087780 E10B                       	smpsAlterNote       $0B
00087782 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00087786 E108                       	smpsAlterNote       $08
00087788 E701                       	dc.b	smpsNoAttack, $01
0008778A E104                       	smpsAlterNote       $04
0008778C E701                       	dc.b	smpsNoAttack, $01
0008778E E108                       	smpsAlterNote       $08
00087790 E701                       	dc.b	smpsNoAttack, $01
00087792 E10B                       	smpsAlterNote       $0B
00087794 E701                       	dc.b	smpsNoAttack, $01
00087798 E0C0                       	smpsPan             panCenter, $00
0008779A E601                       	smpsAlterVol        $01
0008779C E108                       	smpsAlterNote       $08
0008779E A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000877AA 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000877B2 E080                       	smpsPan             panLeft, $00
000877B4 07                         	dc.b	$07
000877B5 E6FF                       	smpsAlterVol        $FF
000877B7 E10D                       	smpsAlterNote       $0D
000877B9 B60D                       	dc.b	nF4, $0D
000877BB E10A                       	smpsAlterNote       $0A
000877BD E701                       	dc.b	smpsNoAttack, $01
000877BF E106                       	smpsAlterNote       $06
000877C1 E701                       	dc.b	smpsNoAttack, $01
000877C3 E10A                       	smpsAlterNote       $0A
000877C5 E701                       	dc.b	smpsNoAttack, $01
000877C7 E110                       	smpsAlterNote       $10
000877C9 E701                       	dc.b	smpsNoAttack, $01
000877CB E111                       	smpsAlterNote       $11
000877CD E701                       	dc.b	smpsNoAttack, $01
000877CF E10D                       	smpsAlterNote       $0D
000877D1 E701                       	dc.b	smpsNoAttack, $01
000877D3 E107                       	smpsAlterNote       $07
000877D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877D9 E10A                       	smpsAlterNote       $0A
000877DB E701                       	dc.b	smpsNoAttack, $01
000877DD E110                       	smpsAlterNote       $10
000877DF E701                       	dc.b	smpsNoAttack, $01
000877E1 E111                       	smpsAlterNote       $11
000877E3 8001                       	dc.b	nRst, $01
000877E5 E10D                       	smpsAlterNote       $0D
000877E7 B80D                       	dc.b	nG4, $0D
000877E9 E10A                       	smpsAlterNote       $0A
000877EB E701                       	dc.b	smpsNoAttack, $01
000877ED E106                       	smpsAlterNote       $06
000877EF E701                       	dc.b	smpsNoAttack, $01
000877F1 E10A                       	smpsAlterNote       $0A
000877F3 E701                       	dc.b	smpsNoAttack, $01
000877F5 E110                       	smpsAlterNote       $10
000877F7 E701                       	dc.b	smpsNoAttack, $01
000877F9 E111                       	smpsAlterNote       $11
000877FB E701                       	dc.b	smpsNoAttack, $01
000877FD E10D                       	smpsAlterNote       $0D
000877FF E701                       	dc.b	smpsNoAttack, $01
00087801 E107                       	smpsAlterNote       $07
00087803 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087807 E10D                       	smpsAlterNote       $0D
00087809 E701                       	dc.b	smpsNoAttack, $01
0008780B E110                       	smpsAlterNote       $10
0008780D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087811 E10A                       	smpsAlterNote       $0A
00087813 E701                       	dc.b	smpsNoAttack, $01
00087815 E106                       	smpsAlterNote       $06
00087817 E701                       	dc.b	smpsNoAttack, $01
00087819 E107                       	smpsAlterNote       $07
0008781B E701                       	dc.b	smpsNoAttack, $01
0008781D E10D                       	smpsAlterNote       $0D
0008781F E701                       	dc.b	smpsNoAttack, $01
00087821 E111                       	smpsAlterNote       $11
00087823 E701                       	dc.b	smpsNoAttack, $01
00087825 E10D                       	smpsAlterNote       $0D
00087827 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008782B E10F                       	smpsAlterNote       $0F
0008782D BA0D                       	dc.b	nA4, $0D
0008782F E109                       	smpsAlterNote       $09
00087831 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087835 E10C                       	smpsAlterNote       $0C
00087837 E701                       	dc.b	smpsNoAttack, $01
00087839 E112                       	smpsAlterNote       $12
0008783B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008783F E10C                       	smpsAlterNote       $0C
00087841 E701                       	dc.b	smpsNoAttack, $01
00087843 E109                       	smpsAlterNote       $09
00087845 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087849 E10F                       	smpsAlterNote       $0F
0008784B E701                       	dc.b	smpsNoAttack, $01
0008784D E113                       	smpsAlterNote       $13
0008784F E701                       	dc.b	smpsNoAttack, $01
00087851 E112                       	smpsAlterNote       $12
00087853 E701                       	dc.b	smpsNoAttack, $01
00087855 E10C                       	smpsAlterNote       $0C
00087857 E701                       	dc.b	smpsNoAttack, $01
00087859 E108                       	smpsAlterNote       $08
0008785B E701                       	dc.b	smpsNoAttack, $01
0008785D E10C                       	smpsAlterNote       $0C
0008785F E701                       	dc.b	smpsNoAttack, $01
00087861 E10F                       	smpsAlterNote       $0F
00087863 E701                       	dc.b	smpsNoAttack, $01
00087865 E113                       	smpsAlterNote       $13
00087867 E701                       	dc.b	smpsNoAttack, $01
00087869 E10F                       	smpsAlterNote       $0F
0008786B E701                       	dc.b	smpsNoAttack, $01
0008786D E109                       	smpsAlterNote       $09
0008786F E701                       	dc.b	smpsNoAttack, $01
00087871 E108                       	smpsAlterNote       $08
00087873 E701                       	dc.b	smpsNoAttack, $01
00087875 E10C                       	smpsAlterNote       $0C
00087877 E701                       	dc.b	smpsNoAttack, $01
00087879 E112                       	smpsAlterNote       $12
0008787B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008787F E10F                       	smpsAlterNote       $0F
00087881 E701                       	dc.b	smpsNoAttack, $01
00087883 E109                       	smpsAlterNote       $09
00087885 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087889 E10F                       	smpsAlterNote       $0F
0008788B E701                       	dc.b	smpsNoAttack, $01
0008788D E112                       	smpsAlterNote       $12
0008788F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087893 E10C                       	smpsAlterNote       $0C
00087895 E701                       	dc.b	smpsNoAttack, $01
00087897 E108                       	smpsAlterNote       $08
00087899 E701                       	dc.b	smpsNoAttack, $01
0008789B E109                       	smpsAlterNote       $09
0008789D E701                       	dc.b	smpsNoAttack, $01
0008789F E10C                       	smpsAlterNote       $0C
000878A1 B50A                       	dc.b	nE4, $0A
000878A3 E10D                       	smpsAlterNote       $0D
000878A5 B60E                       	dc.b	nF4, $0E
000878A7 E107                       	smpsAlterNote       $07
000878A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878AD E10D                       	smpsAlterNote       $0D
000878AF E701                       	dc.b	smpsNoAttack, $01
000878B1 E110                       	smpsAlterNote       $10
000878B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878B7 E10A                       	smpsAlterNote       $0A
000878B9 E701                       	dc.b	smpsNoAttack, $01
000878BB E106                       	smpsAlterNote       $06
000878BD E701                       	dc.b	smpsNoAttack, $01
000878BF E107                       	smpsAlterNote       $07
000878C1 E701                       	dc.b	smpsNoAttack, $01
000878C3 E10D                       	smpsAlterNote       $0D
000878C5 E701                       	dc.b	smpsNoAttack, $01
000878C7 E111                       	smpsAlterNote       $11
000878C9 E701                       	dc.b	smpsNoAttack, $01
000878CB E10D                       	smpsAlterNote       $0D
000878CD B80D                       	dc.b	nG4, $0D
000878CF E10A                       	smpsAlterNote       $0A
000878D1 E701                       	dc.b	smpsNoAttack, $01
000878D3 E107                       	smpsAlterNote       $07
000878D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878D9 E10D                       	smpsAlterNote       $0D
000878DB E701                       	dc.b	smpsNoAttack, $01
000878DD E111                       	smpsAlterNote       $11
000878DF E701                       	dc.b	smpsNoAttack, $01
000878E1 E110                       	smpsAlterNote       $10
000878E3 E701                       	dc.b	smpsNoAttack, $01
000878E5 E10A                       	smpsAlterNote       $0A
000878E7 E701                       	dc.b	smpsNoAttack, $01
000878E9 E106                       	smpsAlterNote       $06
000878EB E701                       	dc.b	smpsNoAttack, $01
000878ED E10A                       	smpsAlterNote       $0A
000878EF E701                       	dc.b	smpsNoAttack, $01
000878F1 E10D                       	smpsAlterNote       $0D
000878F3 E701                       	dc.b	smpsNoAttack, $01
000878F5 E111                       	smpsAlterNote       $11
000878F7 E701                       	dc.b	smpsNoAttack, $01
000878F9 E10D                       	smpsAlterNote       $0D
000878FB E701                       	dc.b	smpsNoAttack, $01
000878FD E107                       	smpsAlterNote       $07
000878FF E701                       	dc.b	smpsNoAttack, $01
00087901 E106                       	smpsAlterNote       $06
00087903 E701                       	dc.b	smpsNoAttack, $01
00087905 E10A                       	smpsAlterNote       $0A
00087907 E701                       	dc.b	smpsNoAttack, $01
00087909 E110                       	smpsAlterNote       $10
0008790B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008790F E10D                       	smpsAlterNote       $0D
00087911 E701                       	dc.b	smpsNoAttack, $01
00087913 E10F                       	smpsAlterNote       $0F
00087915 BA0D                       	dc.b	nA4, $0D
00087917 E10C                       	smpsAlterNote       $0C
00087919 E701                       	dc.b	smpsNoAttack, $01
0008791B E108                       	smpsAlterNote       $08
0008791D E701                       	dc.b	smpsNoAttack, $01
0008791F E109                       	smpsAlterNote       $09
00087921 E701                       	dc.b	smpsNoAttack, $01
00087923 E10F                       	smpsAlterNote       $0F
00087925 E701                       	dc.b	smpsNoAttack, $01
00087927 E113                       	smpsAlterNote       $13
00087929 E701                       	dc.b	smpsNoAttack, $01
0008792B E10F                       	smpsAlterNote       $0F
0008792D E701                       	dc.b	smpsNoAttack, $01
0008792F E10C                       	smpsAlterNote       $0C
00087931 E701                       	dc.b	smpsNoAttack, $01
00087933 E108                       	smpsAlterNote       $08
00087935 E701                       	dc.b	smpsNoAttack, $01
00087937 E10C                       	smpsAlterNote       $0C
00087939 E701                       	dc.b	smpsNoAttack, $01
0008793B E112                       	smpsAlterNote       $12
0008793D E701                       	dc.b	smpsNoAttack, $01
0008793F E113                       	smpsAlterNote       $13
00087941 E701                       	dc.b	smpsNoAttack, $01
00087943 E10F                       	smpsAlterNote       $0F
00087945 E701                       	dc.b	smpsNoAttack, $01
00087947 E109                       	smpsAlterNote       $09
00087949 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008794D E10C                       	smpsAlterNote       $0C
0008794F E701                       	dc.b	smpsNoAttack, $01
00087951 E112                       	smpsAlterNote       $12
00087953 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087957 E10C                       	smpsAlterNote       $0C
00087959 E701                       	dc.b	smpsNoAttack, $01
0008795B E109                       	smpsAlterNote       $09
0008795D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087961 E10F                       	smpsAlterNote       $0F
00087963 E701                       	dc.b	smpsNoAttack, $01
00087965 E113                       	smpsAlterNote       $13
00087967 E701                       	dc.b	smpsNoAttack, $01
00087969 E112                       	smpsAlterNote       $12
0008796B E701                       	dc.b	smpsNoAttack, $01
0008796D E10C                       	smpsAlterNote       $0C
0008796F E701                       	dc.b	smpsNoAttack, $01
00087971 E109                       	smpsAlterNote       $09
00087973 8001                       	dc.b	nRst, $01
00087975 E10D                       	smpsAlterNote       $0D
00087977 B60A                       	dc.b	nF4, $0A
00087979 E10C                       	smpsAlterNote       $0C
0008797B B506 8001                  	dc.b	nE4, $06, nRst, $01
0008797F E10B                       	smpsAlterNote       $0B
00087981 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00087985 E10C                       	smpsAlterNote       $0C
00087987 B503                       	dc.b	nE4, $03
00087989 E10D                       	smpsAlterNote       $0D
0008798B B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00087995 E10C                       	smpsAlterNote       $0C
00087997 E701                       	dc.b	smpsNoAttack, $01
00087999 E108                       	smpsAlterNote       $08
0008799B E701                       	dc.b	smpsNoAttack, $01
0008799D E10C                       	smpsAlterNote       $0C
0008799F E701                       	dc.b	smpsNoAttack, $01
000879A1 E112                       	smpsAlterNote       $12
000879A3 E701                       	dc.b	smpsNoAttack, $01
000879A5 E113                       	smpsAlterNote       $13
000879A7 E701                       	dc.b	smpsNoAttack, $01
000879A9 E10F                       	smpsAlterNote       $0F
000879AB E701                       	dc.b	smpsNoAttack, $01
000879AD E109                       	smpsAlterNote       $09
000879AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879B3 E10C                       	smpsAlterNote       $0C
000879B5 E701                       	dc.b	smpsNoAttack, $01
000879B7 E112                       	smpsAlterNote       $12
000879B9 E701                       	dc.b	smpsNoAttack, $01
000879BB E113                       	smpsAlterNote       $13
000879BD 8001                       	dc.b	nRst, $01
000879BF E10D                       	smpsAlterNote       $0D
000879C1 C20D                       	dc.b	nF5, $0D
000879C3 E10A                       	smpsAlterNote       $0A
000879C5 E701                       	dc.b	smpsNoAttack, $01
000879C7 E106                       	smpsAlterNote       $06
000879C9 E701                       	dc.b	smpsNoAttack, $01
000879CB E10A                       	smpsAlterNote       $0A
000879CD E701                       	dc.b	smpsNoAttack, $01
000879CF E110                       	smpsAlterNote       $10
000879D1 E701                       	dc.b	smpsNoAttack, $01
000879D3 E111                       	smpsAlterNote       $11
000879D5 E701                       	dc.b	smpsNoAttack, $01
000879D7 E10D                       	smpsAlterNote       $0D
000879D9 E701                       	dc.b	smpsNoAttack, $01
000879DB E107                       	smpsAlterNote       $07
000879DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879E1 E10A                       	smpsAlterNote       $0A
000879E3 E701                       	dc.b	smpsNoAttack, $01
000879E5 E110                       	smpsAlterNote       $10
000879E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879EB E10A                       	smpsAlterNote       $0A
000879ED E701                       	dc.b	smpsNoAttack, $01
000879EF E107                       	smpsAlterNote       $07
000879F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879F5 E10D                       	smpsAlterNote       $0D
000879F7 E701                       	dc.b	smpsNoAttack, $01
000879F9 E111                       	smpsAlterNote       $11
000879FB E701                       	dc.b	smpsNoAttack, $01
000879FD E110                       	smpsAlterNote       $10
000879FF E701                       	dc.b	smpsNoAttack, $01
00087A01 E10A                       	smpsAlterNote       $0A
00087A03 E701                       	dc.b	smpsNoAttack, $01
00087A05 E106                       	smpsAlterNote       $06
00087A07 E701                       	dc.b	smpsNoAttack, $01
00087A09 E10A                       	smpsAlterNote       $0A
00087A0B E701                       	dc.b	smpsNoAttack, $01
00087A0D E10D                       	smpsAlterNote       $0D
00087A0F E701                       	dc.b	smpsNoAttack, $01
00087A11 E111                       	smpsAlterNote       $11
00087A13 E701                       	dc.b	smpsNoAttack, $01
00087A15 E10D                       	smpsAlterNote       $0D
00087A17 E701                       	dc.b	smpsNoAttack, $01
00087A19 E107                       	smpsAlterNote       $07
00087A1B E701                       	dc.b	smpsNoAttack, $01
00087A1D E106                       	smpsAlterNote       $06
00087A1F E701                       	dc.b	smpsNoAttack, $01
00087A21 E10A                       	smpsAlterNote       $0A
00087A23 E701                       	dc.b	smpsNoAttack, $01
00087A25 E110                       	smpsAlterNote       $10
00087A27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A2B E10D                       	smpsAlterNote       $0D
00087A2D E701                       	dc.b	smpsNoAttack, $01
00087A2F E107                       	smpsAlterNote       $07
00087A31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A35 E10D                       	smpsAlterNote       $0D
00087A37 E701                       	dc.b	smpsNoAttack, $01
00087A39 E110                       	smpsAlterNote       $10
00087A3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A3F E10A                       	smpsAlterNote       $0A
00087A41 E701                       	dc.b	smpsNoAttack, $01
00087A43 E106                       	smpsAlterNote       $06
00087A45 E701                       	dc.b	smpsNoAttack, $01
00087A47 E107                       	smpsAlterNote       $07
00087A49 E701                       	dc.b	smpsNoAttack, $01
00087A4B E10D                       	smpsAlterNote       $0D
00087A4D E701                       	dc.b	smpsNoAttack, $01
00087A4F E111                       	smpsAlterNote       $11
00087A51 E701                       	dc.b	smpsNoAttack, $01
00087A53 E10D                       	smpsAlterNote       $0D
00087A55 E701                       	dc.b	smpsNoAttack, $01
00087A57 E10A                       	smpsAlterNote       $0A
00087A59 E701                       	dc.b	smpsNoAttack, $01
00087A5B E107                       	smpsAlterNote       $07
00087A5D 8001                       	dc.b	nRst, $01
00087A5F E10D                       	smpsAlterNote       $0D
00087A61 C206 8001                  	dc.b	nF5, $06, nRst, $01
00087A67 E601                       	smpsAlterVol        $01
00087A69 E110                       	smpsAlterNote       $10
00087A6B BB0D                       	dc.b	nBb4, $0D
00087A6D E10A                       	smpsAlterNote       $0A
00087A6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A73 E110                       	smpsAlterNote       $10
00087A75 E701                       	dc.b	smpsNoAttack, $01
00087A77 E113                       	smpsAlterNote       $13
00087A79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A7D E10D                       	smpsAlterNote       $0D
00087A7F E701                       	dc.b	smpsNoAttack, $01
00087A81 E109                       	smpsAlterNote       $09
00087A83 E701                       	dc.b	smpsNoAttack, $01
00087A85 E10A                       	smpsAlterNote       $0A
00087A87 E701                       	dc.b	smpsNoAttack, $01
00087A89 E110                       	smpsAlterNote       $10
00087A8B E701                       	dc.b	smpsNoAttack, $01
00087A8D E114                       	smpsAlterNote       $14
00087A8F E701                       	dc.b	smpsNoAttack, $01
00087A91 E110                       	smpsAlterNote       $10
00087A93 E701                       	dc.b	smpsNoAttack, $01
00087A95 E10D                       	smpsAlterNote       $0D
00087A97 E701                       	dc.b	smpsNoAttack, $01
00087A99 E109                       	smpsAlterNote       $09
00087A9B E701                       	dc.b	smpsNoAttack, $01
00087A9D E10A                       	smpsAlterNote       $0A
00087A9F 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00087AA3 E107                       	smpsAlterNote       $07
00087AA5 E701                       	dc.b	smpsNoAttack, $01
00087AA7 E103                       	smpsAlterNote       $03
00087AA9 E701                       	dc.b	smpsNoAttack, $01
00087AAB E107                       	smpsAlterNote       $07
00087AAD E701                       	dc.b	smpsNoAttack, $01
00087AAF E10D                       	smpsAlterNote       $0D
00087AB1 E701                       	dc.b	smpsNoAttack, $01
00087AB3 E10E                       	smpsAlterNote       $0E
00087AB5 E701                       	dc.b	smpsNoAttack, $01
00087AB7 E10A                       	smpsAlterNote       $0A
00087AB9 E701                       	dc.b	smpsNoAttack, $01
00087ABB E104                       	smpsAlterNote       $04
00087ABD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AC1 E107                       	smpsAlterNote       $07
00087AC3 E701                       	dc.b	smpsNoAttack, $01
00087AC5 E10D                       	smpsAlterNote       $0D
00087AC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087ACB E107                       	smpsAlterNote       $07
00087ACD E701                       	dc.b	smpsNoAttack, $01
00087ACF E104                       	smpsAlterNote       $04
00087AD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AD5 E10B                       	smpsAlterNote       $0B
00087AD7 BF0D                       	dc.b	nD5, $0D
00087AD9 E108                       	smpsAlterNote       $08
00087ADB E701                       	dc.b	smpsNoAttack, $01
00087ADD E105                       	smpsAlterNote       $05
00087ADF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AE3 E10B                       	smpsAlterNote       $0B
00087AE5 E701                       	dc.b	smpsNoAttack, $01
00087AE7 E10F                       	smpsAlterNote       $0F
00087AE9 E701                       	dc.b	smpsNoAttack, $01
00087AEB E10E                       	smpsAlterNote       $0E
00087AED E701                       	dc.b	smpsNoAttack, $01
00087AEF E108                       	smpsAlterNote       $08
00087AF1 E701                       	dc.b	smpsNoAttack, $01
00087AF3 E104                       	smpsAlterNote       $04
00087AF5 E701                       	dc.b	smpsNoAttack, $01
00087AF7 E108                       	smpsAlterNote       $08
00087AF9 E701                       	dc.b	smpsNoAttack, $01
00087AFB E10B                       	smpsAlterNote       $0B
00087AFD E701                       	dc.b	smpsNoAttack, $01
00087AFF E10F                       	smpsAlterNote       $0F
00087B01 E701                       	dc.b	smpsNoAttack, $01
00087B03 E10B                       	smpsAlterNote       $0B
00087B05 E701                       	dc.b	smpsNoAttack, $01
00087B07 E105                       	smpsAlterNote       $05
00087B09 E701                       	dc.b	smpsNoAttack, $01
00087B0B E104                       	smpsAlterNote       $04
00087B0D E701                       	dc.b	smpsNoAttack, $01
00087B0F E105                       	smpsAlterNote       $05
00087B11 8001                       	dc.b	nRst, $01
00087B13 E10C                       	smpsAlterNote       $0C
00087B15 C10C                       	dc.b	nE5, $0C
00087B17 E10D                       	smpsAlterNote       $0D
00087B19 C201                       	dc.b	nF5, $01
00087B1B E10E                       	smpsAlterNote       $0E
00087B1D C301 8001                  	dc.b	nFs5, $01, nRst, $01
00087B21 E10D                       	smpsAlterNote       $0D
00087B23 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00087B27 E10A                       	smpsAlterNote       $0A
00087B29 E701                       	dc.b	smpsNoAttack, $01
00087B2B E106                       	smpsAlterNote       $06
00087B2D E701                       	dc.b	smpsNoAttack, $01
00087B2F E10A                       	smpsAlterNote       $0A
00087B31 E701                       	dc.b	smpsNoAttack, $01
00087B33 E10D                       	smpsAlterNote       $0D
00087B35 E701                       	dc.b	smpsNoAttack, $01
00087B37 E111                       	smpsAlterNote       $11
00087B39 E701                       	dc.b	smpsNoAttack, $01
00087B3B E10D                       	smpsAlterNote       $0D
00087B3D E701                       	dc.b	smpsNoAttack, $01
00087B3F E107                       	smpsAlterNote       $07
00087B41 E701                       	dc.b	smpsNoAttack, $01
00087B43 E106                       	smpsAlterNote       $06
00087B45 E701                       	dc.b	smpsNoAttack, $01
00087B47 E10A                       	smpsAlterNote       $0A
00087B49 E701                       	dc.b	smpsNoAttack, $01
00087B4B E110                       	smpsAlterNote       $10
00087B4D E701                       	dc.b	smpsNoAttack, $01
00087B4F E111                       	smpsAlterNote       $11
00087B51 8001                       	dc.b	nRst, $01
00087B53 E10D                       	smpsAlterNote       $0D
00087B55 C40D                       	dc.b	nG5, $0D
00087B57 E10A                       	smpsAlterNote       $0A
00087B59 E701                       	dc.b	smpsNoAttack, $01
00087B5B E106                       	smpsAlterNote       $06
00087B5D E701                       	dc.b	smpsNoAttack, $01
00087B5F E10A                       	smpsAlterNote       $0A
00087B61 E701                       	dc.b	smpsNoAttack, $01
00087B63 E10D                       	smpsAlterNote       $0D
00087B65 E701                       	dc.b	smpsNoAttack, $01
00087B67 E10C                       	smpsAlterNote       $0C
00087B69 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00087B75 8001                       	dc.b	nRst, $01
00087B77 E10D                       	smpsAlterNote       $0D
00087B79 C20D                       	dc.b	nF5, $0D
00087B7B E10A                       	smpsAlterNote       $0A
00087B7D E701                       	dc.b	smpsNoAttack, $01
00087B7F E106                       	smpsAlterNote       $06
00087B81 E701                       	dc.b	smpsNoAttack, $01
00087B83 E10A                       	smpsAlterNote       $0A
00087B85 E701                       	dc.b	smpsNoAttack, $01
00087B87 E110                       	smpsAlterNote       $10
00087B89 E701                       	dc.b	smpsNoAttack, $01
00087B8B E111                       	smpsAlterNote       $11
00087B8D E701                       	dc.b	smpsNoAttack, $01
00087B8F E10D                       	smpsAlterNote       $0D
00087B91 E701                       	dc.b	smpsNoAttack, $01
00087B93 E107                       	smpsAlterNote       $07
00087B95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B99 E10A                       	smpsAlterNote       $0A
00087B9B E701                       	dc.b	smpsNoAttack, $01
00087B9D E110                       	smpsAlterNote       $10
00087B9F E701                       	dc.b	smpsNoAttack, $01
00087BA1 E111                       	smpsAlterNote       $11
00087BA3 8001                       	dc.b	nRst, $01
00087BA5 E10F                       	smpsAlterNote       $0F
00087BA7 C60A                       	dc.b	nA5, $0A
00087BA9 E10D                       	smpsAlterNote       $0D
00087BAB C406 8001                  	dc.b	nG5, $06, nRst, $01
00087BAF E10C                       	smpsAlterNote       $0C
00087BB1 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00087BBD 8001                       	dc.b	nRst, $01
00087BBF E10D                       	smpsAlterNote       $0D
00087BC1 C20D                       	dc.b	nF5, $0D
00087BC3 E107                       	smpsAlterNote       $07
00087BC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BC9 E10A                       	smpsAlterNote       $0A
00087BCB E701                       	dc.b	smpsNoAttack, $01
00087BCD E110                       	smpsAlterNote       $10
00087BCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BD3 E10A                       	smpsAlterNote       $0A
00087BD5 E701                       	dc.b	smpsNoAttack, $01
00087BD7 E107                       	smpsAlterNote       $07
00087BD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BDD E10D                       	smpsAlterNote       $0D
00087BDF E701                       	dc.b	smpsNoAttack, $01
00087BE1 E111                       	smpsAlterNote       $11
00087BE3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087BE7 E10D                       	smpsAlterNote       $0D
00087BE9 C40D                       	dc.b	nG5, $0D
00087BEB E107                       	smpsAlterNote       $07
00087BED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BF1 E10A                       	smpsAlterNote       $0A
00087BF3 E701                       	dc.b	smpsNoAttack, $01
00087BF5 E10D                       	smpsAlterNote       $0D
00087BF7 8001                       	dc.b	nRst, $01
00087BF9 E10C                       	smpsAlterNote       $0C
00087BFB C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00087C07 E10D                       	smpsAlterNote       $0D
00087C09 C20E                       	dc.b	nF5, $0E
00087C0B E107                       	smpsAlterNote       $07
00087C0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C11 E10D                       	smpsAlterNote       $0D
00087C13 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087C19 E0C0                       	smpsPan             panCenter, $00
00087C1B E603                       	smpsAlterVol        $03
00087C1D E108                       	smpsAlterNote       $08
00087C1F B406                       	dc.b	nEb4, $06
00087C21 E10C                       	smpsAlterNote       $0C
00087C23 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00087C27 E108                       	smpsAlterNote       $08
00087C29 B403                       	dc.b	nEb4, $03
00087C2B E109                       	smpsAlterNote       $09
00087C2D B803 8001                  	dc.b	nG4, $03, nRst, $01
00087C31 E10C                       	smpsAlterNote       $0C
00087C33 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00087C3B 03                         	dc.b	$03
00087C3C E6FD                       	smpsAlterVol        $FD
00087C3E F6F1 F4                    	smpsJump            music84_Jump00
00087C41                            
00087C41                            ; PSG1 Data
00087C41                            music84_PSG1:
00087C41 E1FD                       	smpsAlterNote       $FD
00087C43 EC04                       	smpsPSGAlterVol     $04
00087C45 9203                       	dc.b	nF1, $03
00087C47 E1FE                       	smpsAlterNote       $FE
00087C49 9603                       	dc.b	nA1, $03
00087C4B EC04                       	smpsPSGAlterVol     $04
00087C4D E701                       	dc.b	smpsNoAttack, $01
00087C4F E1FF                       	smpsAlterNote       $FF
00087C51 ECFC                       	smpsPSGAlterVol     $FC
00087C53 9B03                       	dc.b	nD2, $03
00087C55 E1FD                       	smpsAlterNote       $FD
00087C57 9403                       	dc.b	nG1, $03
00087C59 EC04                       	smpsPSGAlterVol     $04
00087C5B E701                       	dc.b	smpsNoAttack, $01
00087C5D E1FE                       	smpsAlterNote       $FE
00087C5F ECFC                       	smpsPSGAlterVol     $FC
00087C61 9703                       	dc.b	nBb1, $03
00087C63 E1FF                       	smpsAlterNote       $FF
00087C65 9B03                       	dc.b	nD2, $03
00087C67 EC04                       	smpsPSGAlterVol     $04
00087C69 E701                       	dc.b	smpsNoAttack, $01
00087C6B E1FE                       	smpsAlterNote       $FE
00087C6D ECFC                       	smpsPSGAlterVol     $FC
00087C6F A002                       	dc.b	nG2, $02
00087C71 EC04                       	smpsPSGAlterVol     $04
00087C73 E701                       	dc.b	smpsNoAttack, $01
00087C75 E1FF                       	smpsAlterNote       $FF
00087C77 ECFC                       	smpsPSGAlterVol     $FC
00087C79 A203                       	dc.b	nA2, $03
00087C7B EC0B                       	smpsPSGAlterVol     $0B
00087C7D 800A                       	dc.b	nRst, $0A
00087C7F E105                       	smpsAlterNote       $05
00087C81 01                         	dc.b	$01
00087C82 E1FC                       	smpsAlterNote       $FC
00087C84 01                         	dc.b	$01
00087C85 E105                       	smpsAlterNote       $05
00087C87 01                         	dc.b	$01
00087C88 E1FD                       	smpsAlterNote       $FD
00087C8A 01                         	dc.b	$01
00087C8B E105                       	smpsAlterNote       $05
00087C8D 01                         	dc.b	$01
00087C8E E1FD                       	smpsAlterNote       $FD
00087C90 01                         	dc.b	$01
00087C91 E1FA                       	smpsAlterNote       $FA
00087C93 01                         	dc.b	$01
00087C94 E1FC                       	smpsAlterNote       $FC
00087C96 01                         	dc.b	$01
00087C97 E105                       	smpsAlterNote       $05
00087C99 01                         	dc.b	$01
00087C9A E108                       	smpsAlterNote       $08
00087C9C 0101                       	dc.b	$01, $01
00087C9E E105                       	smpsAlterNote       $05
00087CA0 01                         	dc.b	$01
00087CA1 E1FA                       	smpsAlterNote       $FA
00087CA3 0101                       	dc.b	$01, $01
00087CA5 E1FD                       	smpsAlterNote       $FD
00087CA7 01                         	dc.b	$01
00087CA8 E105                       	smpsAlterNote       $05
00087CAA 01                         	dc.b	$01
00087CAB E108                       	smpsAlterNote       $08
00087CAD 01                         	dc.b	$01
00087CAE E105                       	smpsAlterNote       $05
00087CB0 01                         	dc.b	$01
00087CB1 E1FC                       	smpsAlterNote       $FC
00087CB3 01                         	dc.b	$01
00087CB4 E105                       	smpsAlterNote       $05
00087CB6 01                         	dc.b	$01
00087CB7 E1FD                       	smpsAlterNote       $FD
00087CB9 01                         	dc.b	$01
00087CBA                            
00087CBA                            music84_Jump07:
00087CBA E105                       	smpsAlterNote       $05
00087CBC 8001                       	dc.b	nRst, $01
00087CBE E1FD                       	smpsAlterNote       $FD
00087CC0 01                         	dc.b	$01
00087CC1 E1FA                       	smpsAlterNote       $FA
00087CC3 01                         	dc.b	$01
00087CC4 E1FC                       	smpsAlterNote       $FC
00087CC6 01                         	dc.b	$01
00087CC7 E1FD                       	smpsAlterNote       $FD
00087CC9 ECF5                       	smpsPSGAlterVol     $F5
00087CCB 9206                       	dc.b	nF1, $06
00087CCD EC04                       	smpsPSGAlterVol     $04
00087CCF E701                       	dc.b	smpsNoAttack, $01
00087CD1 EC07                       	smpsPSGAlterVol     $07
00087CD3 8003                       	dc.b	nRst, $03
00087CD5 ECF5                       	smpsPSGAlterVol     $F5
00087CD7 9206                       	dc.b	nF1, $06
00087CD9 EC04                       	smpsPSGAlterVol     $04
00087CDB E701                       	dc.b	smpsNoAttack, $01
00087CDD EC07                       	smpsPSGAlterVol     $07
00087CDF 8006                       	dc.b	nRst, $06
00087CE1 E100                       	smpsAlterNote       $00
00087CE3 01                         	dc.b	$01
00087CE4 E104                       	smpsAlterNote       $04
00087CE6 01                         	dc.b	$01
00087CE7 E100                       	smpsAlterNote       $00
00087CE9 01                         	dc.b	$01
00087CEA E1FB                       	smpsAlterNote       $FB
00087CEC 01                         	dc.b	$01
00087CED E1FD                       	smpsAlterNote       $FD
00087CEF ECF5                       	smpsPSGAlterVol     $F5
00087CF1 9406                       	dc.b	nG1, $06
00087CF3 EC04                       	smpsPSGAlterVol     $04
00087CF5 E701                       	dc.b	smpsNoAttack, $01
00087CF7 EC07                       	smpsPSGAlterVol     $07
00087CF9 8003                       	dc.b	nRst, $03
00087CFB ECF5                       	smpsPSGAlterVol     $F5
00087CFD 9407                       	dc.b	nG1, $07
00087CFF EC0B                       	smpsPSGAlterVol     $0B
00087D01 8006                       	dc.b	nRst, $06
00087D03 E100                       	smpsAlterNote       $00
00087D05 01                         	dc.b	$01
00087D06 E103                       	smpsAlterNote       $03
00087D08 0101                       	dc.b	$01, $01
00087D0A E1FD                       	smpsAlterNote       $FD
00087D0C 01                         	dc.b	$01
00087D0D ECF5                       	smpsPSGAlterVol     $F5
00087D0F 9207                       	dc.b	nF1, $07
00087D11 EC0B                       	smpsPSGAlterVol     $0B
00087D13 8004                       	dc.b	nRst, $04
00087D15 ECF5                       	smpsPSGAlterVol     $F5
00087D17 9206                       	dc.b	nF1, $06
00087D19 EC04                       	smpsPSGAlterVol     $04
00087D1B E701                       	dc.b	smpsNoAttack, $01
00087D1D EC07                       	smpsPSGAlterVol     $07
00087D1F 8006                       	dc.b	nRst, $06
00087D21 E103                       	smpsAlterNote       $03
00087D23 01                         	dc.b	$01
00087D24 E104                       	smpsAlterNote       $04
00087D26 01                         	dc.b	$01
00087D27 E100                       	smpsAlterNote       $00
00087D29 01                         	dc.b	$01
00087D2A E1FA                       	smpsAlterNote       $FA
00087D2C 01                         	dc.b	$01
00087D2D E1FD                       	smpsAlterNote       $FD
00087D2F ECF5                       	smpsPSGAlterVol     $F5
00087D31 9206                       	dc.b	nF1, $06
00087D33 EC04                       	smpsPSGAlterVol     $04
00087D35 E701                       	dc.b	smpsNoAttack, $01
00087D37 EC07                       	smpsPSGAlterVol     $07
00087D39 8003                       	dc.b	nRst, $03
00087D3B ECF5                       	smpsPSGAlterVol     $F5
00087D3D 9106                       	dc.b	nE1, $06
00087D3F EC04                       	smpsPSGAlterVol     $04
00087D41 E701                       	dc.b	smpsNoAttack, $01
00087D43 EC07                       	smpsPSGAlterVol     $07
00087D45 8006                       	dc.b	nRst, $06
00087D47 E100                       	smpsAlterNote       $00
00087D49 01                         	dc.b	$01
00087D4A E104                       	smpsAlterNote       $04
00087D4C 01                         	dc.b	$01
00087D4D E100                       	smpsAlterNote       $00
00087D4F 01                         	dc.b	$01
00087D50 E1FD                       	smpsAlterNote       $FD
00087D52 01                         	dc.b	$01
00087D53 ECF5                       	smpsPSGAlterVol     $F5
00087D55 9206                       	dc.b	nF1, $06
00087D57 EC04                       	smpsPSGAlterVol     $04
00087D59 E701                       	dc.b	smpsNoAttack, $01
00087D5B EC07                       	smpsPSGAlterVol     $07
00087D5D 8003                       	dc.b	nRst, $03
00087D5F ECF5                       	smpsPSGAlterVol     $F5
00087D61 9207                       	dc.b	nF1, $07
00087D63 EC0B                       	smpsPSGAlterVol     $0B
00087D65 8007                       	dc.b	nRst, $07
00087D67 E103                       	smpsAlterNote       $03
00087D69 0101                       	dc.b	$01, $01
00087D6B E1FD                       	smpsAlterNote       $FD
00087D6D 01                         	dc.b	$01
00087D6E E1FB                       	smpsAlterNote       $FB
00087D70 01                         	dc.b	$01
00087D71 E1FD                       	smpsAlterNote       $FD
00087D73 ECF5                       	smpsPSGAlterVol     $F5
00087D75 9406                       	dc.b	nG1, $06
00087D77 EC0B                       	smpsPSGAlterVol     $0B
00087D79 8004                       	dc.b	nRst, $04
00087D7B ECF5                       	smpsPSGAlterVol     $F5
00087D7D 9406                       	dc.b	nG1, $06
00087D7F EC04                       	smpsPSGAlterVol     $04
00087D81 E701                       	dc.b	smpsNoAttack, $01
00087D83 EC07                       	smpsPSGAlterVol     $07
00087D85 8006                       	dc.b	nRst, $06
00087D87 E100                       	smpsAlterNote       $00
00087D89 01                         	dc.b	$01
00087D8A E104                       	smpsAlterNote       $04
00087D8C 01                         	dc.b	$01
00087D8D E100                       	smpsAlterNote       $00
00087D8F 01                         	dc.b	$01
00087D90 E1F9                       	smpsAlterNote       $F9
00087D92 01                         	dc.b	$01
00087D93 E1FD                       	smpsAlterNote       $FD
00087D95 ECF5                       	smpsPSGAlterVol     $F5
00087D97 9206                       	dc.b	nF1, $06
00087D99 EC04                       	smpsPSGAlterVol     $04
00087D9B E701                       	dc.b	smpsNoAttack, $01
00087D9D EC07                       	smpsPSGAlterVol     $07
00087D9F 8003                       	dc.b	nRst, $03
00087DA1 ECF5                       	smpsPSGAlterVol     $F5
00087DA3 9207                       	dc.b	nF1, $07
00087DA5 EC0B                       	smpsPSGAlterVol     $0B
00087DA7 8006                       	dc.b	nRst, $06
00087DA9 E100                       	smpsAlterNote       $00
00087DAB 01                         	dc.b	$01
00087DAC E104                       	smpsAlterNote       $04
00087DAE 01                         	dc.b	$01
00087DAF E103                       	smpsAlterNote       $03
00087DB1 01                         	dc.b	$01
00087DB2 E1FD                       	smpsAlterNote       $FD
00087DB4 01                         	dc.b	$01
00087DB5 ECF5                       	smpsPSGAlterVol     $F5
00087DB7 9207                       	dc.b	nF1, $07
00087DB9 EC0B                       	smpsPSGAlterVol     $0B
00087DBB 8004                       	dc.b	nRst, $04
00087DBD ECF5                       	smpsPSGAlterVol     $F5
00087DBF 9206                       	dc.b	nF1, $06
00087DC1 EC0B                       	smpsPSGAlterVol     $0B
00087DC3 8007                       	dc.b	nRst, $07
00087DC5 E103                       	smpsAlterNote       $03
00087DC7 0101                       	dc.b	$01, $01
00087DC9 E100                       	smpsAlterNote       $00
00087DCB 01                         	dc.b	$01
00087DCC E1FA                       	smpsAlterNote       $FA
00087DCE 01                         	dc.b	$01
00087DCF E1FD                       	smpsAlterNote       $FD
00087DD1 ECF5                       	smpsPSGAlterVol     $F5
00087DD3 9206                       	dc.b	nF1, $06
00087DD5 EC04                       	smpsPSGAlterVol     $04
00087DD7 E701                       	dc.b	smpsNoAttack, $01
00087DD9 EC07                       	smpsPSGAlterVol     $07
00087DDB 8003                       	dc.b	nRst, $03
00087DDD ECF5                       	smpsPSGAlterVol     $F5
00087DDF 9206                       	dc.b	nF1, $06
00087DE1 EC04                       	smpsPSGAlterVol     $04
00087DE3 E701                       	dc.b	smpsNoAttack, $01
00087DE5 EC07                       	smpsPSGAlterVol     $07
00087DE7 8006                       	dc.b	nRst, $06
00087DE9 E100                       	smpsAlterNote       $00
00087DEB 01                         	dc.b	$01
00087DEC E104                       	smpsAlterNote       $04
00087DEE 01                         	dc.b	$01
00087DEF E100                       	smpsAlterNote       $00
00087DF1 01                         	dc.b	$01
00087DF2 E1FD                       	smpsAlterNote       $FD
00087DF4 01                         	dc.b	$01
00087DF5 ECF5                       	smpsPSGAlterVol     $F5
00087DF7 9206                       	dc.b	nF1, $06
00087DF9 EC04                       	smpsPSGAlterVol     $04
00087DFB E701                       	dc.b	smpsNoAttack, $01
00087DFD EC07                       	smpsPSGAlterVol     $07
00087DFF 8003                       	dc.b	nRst, $03
00087E01 ECF5                       	smpsPSGAlterVol     $F5
00087E03 9207                       	dc.b	nF1, $07
00087E05 EC0B                       	smpsPSGAlterVol     $0B
00087E07 8007                       	dc.b	nRst, $07
00087E09 E103                       	smpsAlterNote       $03
00087E0B 0101                       	dc.b	$01, $01
00087E0D E1FD                       	smpsAlterNote       $FD
00087E0F 01                         	dc.b	$01
00087E10 E1FA                       	smpsAlterNote       $FA
00087E12 01                         	dc.b	$01
00087E13 E1FD                       	smpsAlterNote       $FD
00087E15 ECF5                       	smpsPSGAlterVol     $F5
00087E17 9206                       	dc.b	nF1, $06
00087E19 EC0B                       	smpsPSGAlterVol     $0B
00087E1B 8004                       	dc.b	nRst, $04
00087E1D ECF5                       	smpsPSGAlterVol     $F5
00087E1F 9206                       	dc.b	nF1, $06
00087E21 EC04                       	smpsPSGAlterVol     $04
00087E23 E701                       	dc.b	smpsNoAttack, $01
00087E25 EC07                       	smpsPSGAlterVol     $07
00087E27 8006                       	dc.b	nRst, $06
00087E29 E103                       	smpsAlterNote       $03
00087E2B 01                         	dc.b	$01
00087E2C E104                       	smpsAlterNote       $04
00087E2E 01                         	dc.b	$01
00087E2F E100                       	smpsAlterNote       $00
00087E31 01                         	dc.b	$01
00087E32 E1FA                       	smpsAlterNote       $FA
00087E34 01                         	dc.b	$01
00087E35 E1FD                       	smpsAlterNote       $FD
00087E37 ECF5                       	smpsPSGAlterVol     $F5
00087E39 9206                       	dc.b	nF1, $06
00087E3B EC04                       	smpsPSGAlterVol     $04
00087E3D E701                       	dc.b	smpsNoAttack, $01
00087E3F EC07                       	smpsPSGAlterVol     $07
00087E41 8003                       	dc.b	nRst, $03
00087E43 ECF5                       	smpsPSGAlterVol     $F5
00087E45 9206                       	dc.b	nF1, $06
00087E47 EC04                       	smpsPSGAlterVol     $04
00087E49 E701                       	dc.b	smpsNoAttack, $01
00087E4B EC07                       	smpsPSGAlterVol     $07
00087E4D 8006                       	dc.b	nRst, $06
00087E4F E100                       	smpsAlterNote       $00
00087E51 01                         	dc.b	$01
00087E52 E104                       	smpsAlterNote       $04
00087E54 01                         	dc.b	$01
00087E55 E103                       	smpsAlterNote       $03
00087E57 01                         	dc.b	$01
00087E58 E1FD                       	smpsAlterNote       $FD
00087E5A 01                         	dc.b	$01
00087E5B ECF5                       	smpsPSGAlterVol     $F5
00087E5D 9107                       	dc.b	nE1, $07
00087E5F EC0B                       	smpsPSGAlterVol     $0B
00087E61 8004                       	dc.b	nRst, $04
00087E63 ECF5                       	smpsPSGAlterVol     $F5
00087E65 9106                       	dc.b	nE1, $06
00087E67 EC0B                       	smpsPSGAlterVol     $0B
00087E69 8007                       	dc.b	nRst, $07
00087E6B E103                       	smpsAlterNote       $03
00087E6D 0101                       	dc.b	$01, $01
00087E6F E100                       	smpsAlterNote       $00
00087E71 01                         	dc.b	$01
00087E72 E1FA                       	smpsAlterNote       $FA
00087E74 01                         	dc.b	$01
00087E75 E1FD                       	smpsAlterNote       $FD
00087E77 ECF5                       	smpsPSGAlterVol     $F5
00087E79 9106                       	dc.b	nE1, $06
00087E7B EC04                       	smpsPSGAlterVol     $04
00087E7D E701                       	dc.b	smpsNoAttack, $01
00087E7F EC07                       	smpsPSGAlterVol     $07
00087E81 8003                       	dc.b	nRst, $03
00087E83 ECF5                       	smpsPSGAlterVol     $F5
00087E85 9106                       	dc.b	nE1, $06
00087E87 EC04                       	smpsPSGAlterVol     $04
00087E89 E701                       	dc.b	smpsNoAttack, $01
00087E8B EC07                       	smpsPSGAlterVol     $07
00087E8D 8006                       	dc.b	nRst, $06
00087E8F E100                       	smpsAlterNote       $00
00087E91 01                         	dc.b	$01
00087E92 E104                       	smpsAlterNote       $04
00087E94 01                         	dc.b	$01
00087E95 E100                       	smpsAlterNote       $00
00087E97 01                         	dc.b	$01
00087E98 E1FA                       	smpsAlterNote       $FA
00087E9A 01                         	dc.b	$01
00087E9B E1FD                       	smpsAlterNote       $FD
00087E9D ECF5                       	smpsPSGAlterVol     $F5
00087E9F 9106                       	dc.b	nE1, $06
00087EA1 EC04                       	smpsPSGAlterVol     $04
00087EA3 E701                       	dc.b	smpsNoAttack, $01
00087EA5 EC07                       	smpsPSGAlterVol     $07
00087EA7 8003                       	dc.b	nRst, $03
00087EA9 ECF5                       	smpsPSGAlterVol     $F5
00087EAB 9107 9106                  	dc.b	nE1, $07, nE1, $06
00087EAF EC04                       	smpsPSGAlterVol     $04
00087EB1 E701                       	dc.b	smpsNoAttack, $01
00087EB3 ECFC                       	smpsPSGAlterVol     $FC
00087EB5 9103 9103                  	dc.b	nE1, $03, nE1, $03
00087EB9 EC04                       	smpsPSGAlterVol     $04
00087EBB E701                       	dc.b	smpsNoAttack, $01
00087EBD ECFC                       	smpsPSGAlterVol     $FC
00087EBF 9106                       	dc.b	nE1, $06
00087EC1 EC04                       	smpsPSGAlterVol     $04
00087EC3 E701                       	dc.b	smpsNoAttack, $01
00087EC5 EC07                       	smpsPSGAlterVol     $07
00087EC7 8006                       	dc.b	nRst, $06
00087EC9 E100                       	smpsAlterNote       $00
00087ECB 01                         	dc.b	$01
00087ECC E104                       	smpsAlterNote       $04
00087ECE 01                         	dc.b	$01
00087ECF E100                       	smpsAlterNote       $00
00087ED1 01                         	dc.b	$01
00087ED2 E1FA                       	smpsAlterNote       $FA
00087ED4 01                         	dc.b	$01
00087ED5 E1F9                       	smpsAlterNote       $F9
00087ED7 01                         	dc.b	$01
00087ED8 E1FD                       	smpsAlterNote       $FD
00087EDA 01                         	dc.b	$01
00087EDB E103                       	smpsAlterNote       $03
00087EDD 01                         	dc.b	$01
00087EDE E104                       	smpsAlterNote       $04
00087EE0 01                         	dc.b	$01
00087EE1 E100                       	smpsAlterNote       $00
00087EE3 01                         	dc.b	$01
00087EE4 E1FA                       	smpsAlterNote       $FA
00087EE6 0101                       	dc.b	$01, $01
00087EE8 E1FD                       	smpsAlterNote       $FD
00087EEA ECF5                       	smpsPSGAlterVol     $F5
00087EEC 9206                       	dc.b	nF1, $06
00087EEE EC04                       	smpsPSGAlterVol     $04
00087EF0 E701                       	dc.b	smpsNoAttack, $01
00087EF2 EC07                       	smpsPSGAlterVol     $07
00087EF4 8003                       	dc.b	nRst, $03
00087EF6 ECF5                       	smpsPSGAlterVol     $F5
00087EF8 9206                       	dc.b	nF1, $06
00087EFA EC04                       	smpsPSGAlterVol     $04
00087EFC E701                       	dc.b	smpsNoAttack, $01
00087EFE EC07                       	smpsPSGAlterVol     $07
00087F00 8006                       	dc.b	nRst, $06
00087F02 E100                       	smpsAlterNote       $00
00087F04 01                         	dc.b	$01
00087F05 E104                       	smpsAlterNote       $04
00087F07 01                         	dc.b	$01
00087F08 E103                       	smpsAlterNote       $03
00087F0A 01                         	dc.b	$01
00087F0B E1FD                       	smpsAlterNote       $FD
00087F0D 01                         	dc.b	$01
00087F0E ECF5                       	smpsPSGAlterVol     $F5
00087F10 9407                       	dc.b	nG1, $07
00087F12 EC0B                       	smpsPSGAlterVol     $0B
00087F14 8004                       	dc.b	nRst, $04
00087F16 ECF5                       	smpsPSGAlterVol     $F5
00087F18 9406                       	dc.b	nG1, $06
00087F1A EC0B                       	smpsPSGAlterVol     $0B
00087F1C 8007                       	dc.b	nRst, $07
00087F1E E103                       	smpsAlterNote       $03
00087F20 0101                       	dc.b	$01, $01
00087F22 E1FD                       	smpsAlterNote       $FD
00087F24 01                         	dc.b	$01
00087F25 E1F9                       	smpsAlterNote       $F9
00087F27 01                         	dc.b	$01
00087F28 E1FD                       	smpsAlterNote       $FD
00087F2A ECF5                       	smpsPSGAlterVol     $F5
00087F2C 9206                       	dc.b	nF1, $06
00087F2E EC04                       	smpsPSGAlterVol     $04
00087F30 E701                       	dc.b	smpsNoAttack, $01
00087F32 EC07                       	smpsPSGAlterVol     $07
00087F34 8003                       	dc.b	nRst, $03
00087F36 ECF5                       	smpsPSGAlterVol     $F5
00087F38 9206                       	dc.b	nF1, $06
00087F3A EC04                       	smpsPSGAlterVol     $04
00087F3C E701                       	dc.b	smpsNoAttack, $01
00087F3E EC07                       	smpsPSGAlterVol     $07
00087F40 8006                       	dc.b	nRst, $06
00087F42 E100                       	smpsAlterNote       $00
00087F44 01                         	dc.b	$01
00087F45 E104                       	smpsAlterNote       $04
00087F47 01                         	dc.b	$01
00087F48 E100                       	smpsAlterNote       $00
00087F4A 01                         	dc.b	$01
00087F4B E1FA                       	smpsAlterNote       $FA
00087F4D 01                         	dc.b	$01
00087F4E E1FD                       	smpsAlterNote       $FD
00087F50 ECF5                       	smpsPSGAlterVol     $F5
00087F52 9206                       	dc.b	nF1, $06
00087F54 EC04                       	smpsPSGAlterVol     $04
00087F56 E701                       	dc.b	smpsNoAttack, $01
00087F58 EC07                       	smpsPSGAlterVol     $07
00087F5A 8003                       	dc.b	nRst, $03
00087F5C ECF5                       	smpsPSGAlterVol     $F5
00087F5E 9107                       	dc.b	nE1, $07
00087F60 EC0B                       	smpsPSGAlterVol     $0B
00087F62 8006                       	dc.b	nRst, $06
00087F64 E100                       	smpsAlterNote       $00
00087F66 01                         	dc.b	$01
00087F67 E103                       	smpsAlterNote       $03
00087F69 0101                       	dc.b	$01, $01
00087F6B E1FD                       	smpsAlterNote       $FD
00087F6D 01                         	dc.b	$01
00087F6E ECF5                       	smpsPSGAlterVol     $F5
00087F70 9207                       	dc.b	nF1, $07
00087F72 EC0B                       	smpsPSGAlterVol     $0B
00087F74 8004                       	dc.b	nRst, $04
00087F76 ECF5                       	smpsPSGAlterVol     $F5
00087F78 9206                       	dc.b	nF1, $06
00087F7A EC04                       	smpsPSGAlterVol     $04
00087F7C E701                       	dc.b	smpsNoAttack, $01
00087F7E EC07                       	smpsPSGAlterVol     $07
00087F80 8006                       	dc.b	nRst, $06
00087F82 E103                       	smpsAlterNote       $03
00087F84 01                         	dc.b	$01
00087F85 E104                       	smpsAlterNote       $04
00087F87 01                         	dc.b	$01
00087F88 E100                       	smpsAlterNote       $00
00087F8A 01                         	dc.b	$01
00087F8B E1FB                       	smpsAlterNote       $FB
00087F8D 01                         	dc.b	$01
00087F8E E1FD                       	smpsAlterNote       $FD
00087F90 ECF5                       	smpsPSGAlterVol     $F5
00087F92 9406                       	dc.b	nG1, $06
00087F94 EC04                       	smpsPSGAlterVol     $04
00087F96 E701                       	dc.b	smpsNoAttack, $01
00087F98 EC07                       	smpsPSGAlterVol     $07
00087F9A 8003                       	dc.b	nRst, $03
00087F9C ECF5                       	smpsPSGAlterVol     $F5
00087F9E 9406                       	dc.b	nG1, $06
00087FA0 EC04                       	smpsPSGAlterVol     $04
00087FA2 E701                       	dc.b	smpsNoAttack, $01
00087FA4 EC07                       	smpsPSGAlterVol     $07
00087FA6 8006                       	dc.b	nRst, $06
00087FA8 E100                       	smpsAlterNote       $00
00087FAA 01                         	dc.b	$01
00087FAB E104                       	smpsAlterNote       $04
00087FAD 01                         	dc.b	$01
00087FAE E100                       	smpsAlterNote       $00
00087FB0 01                         	dc.b	$01
00087FB1 E1FD                       	smpsAlterNote       $FD
00087FB3 01                         	dc.b	$01
00087FB4 ECF5                       	smpsPSGAlterVol     $F5
00087FB6 9206                       	dc.b	nF1, $06
00087FB8 EC04                       	smpsPSGAlterVol     $04
00087FBA E701                       	dc.b	smpsNoAttack, $01
00087FBC EC07                       	smpsPSGAlterVol     $07
00087FBE 8003                       	dc.b	nRst, $03
00087FC0 ECF5                       	smpsPSGAlterVol     $F5
00087FC2 9207                       	dc.b	nF1, $07
00087FC4 EC0B                       	smpsPSGAlterVol     $0B
00087FC6 8007                       	dc.b	nRst, $07
00087FC8 E103                       	smpsAlterNote       $03
00087FCA 0101                       	dc.b	$01, $01
00087FCC E1FD                       	smpsAlterNote       $FD
00087FCE 01                         	dc.b	$01
00087FCF E1FA                       	smpsAlterNote       $FA
00087FD1 01                         	dc.b	$01
00087FD2 E1FD                       	smpsAlterNote       $FD
00087FD4 ECF5                       	smpsPSGAlterVol     $F5
00087FD6 9206                       	dc.b	nF1, $06
00087FD8 EC0B                       	smpsPSGAlterVol     $0B
00087FDA 8004                       	dc.b	nRst, $04
00087FDC ECF5                       	smpsPSGAlterVol     $F5
00087FDE 9206                       	dc.b	nF1, $06
00087FE0 EC04                       	smpsPSGAlterVol     $04
00087FE2 E701                       	dc.b	smpsNoAttack, $01
00087FE4 EC07                       	smpsPSGAlterVol     $07
00087FE6 8006                       	dc.b	nRst, $06
00087FE8 E100                       	smpsAlterNote       $00
00087FEA 01                         	dc.b	$01
00087FEB E104                       	smpsAlterNote       $04
00087FED 01                         	dc.b	$01
00087FEE E100                       	smpsAlterNote       $00
00087FF0 01                         	dc.b	$01
00087FF1 E1FA                       	smpsAlterNote       $FA
00087FF3 01                         	dc.b	$01
00087FF4 E1FD                       	smpsAlterNote       $FD
00087FF6 ECF5                       	smpsPSGAlterVol     $F5
00087FF8 9206                       	dc.b	nF1, $06
00087FFA EC04                       	smpsPSGAlterVol     $04
00087FFC E704                       	dc.b	smpsNoAttack, $04
00087FFE ECFC                       	smpsPSGAlterVol     $FC
00088000 9207                       	dc.b	nF1, $07
00088002 EC0B                       	smpsPSGAlterVol     $0B
00088004 8006                       	dc.b	nRst, $06
00088006 E100                       	smpsAlterNote       $00
00088008 01                         	dc.b	$01
00088009 E104                       	smpsAlterNote       $04
0008800B 01                         	dc.b	$01
0008800C E103                       	smpsAlterNote       $03
0008800E 01                         	dc.b	$01
0008800F E1FD                       	smpsAlterNote       $FD
00088011 01                         	dc.b	$01
00088012 ECF5                       	smpsPSGAlterVol     $F5
00088014 9207                       	dc.b	nF1, $07
00088016 EC0B                       	smpsPSGAlterVol     $0B
00088018 8004                       	dc.b	nRst, $04
0008801A ECF5                       	smpsPSGAlterVol     $F5
0008801C 9206                       	dc.b	nF1, $06
0008801E EC0B                       	smpsPSGAlterVol     $0B
00088020 8007                       	dc.b	nRst, $07
00088022 E103                       	smpsAlterNote       $03
00088024 0101                       	dc.b	$01, $01
00088026 E100                       	smpsAlterNote       $00
00088028 01                         	dc.b	$01
00088029 E1FA                       	smpsAlterNote       $FA
0008802B 01                         	dc.b	$01
0008802C E1FD                       	smpsAlterNote       $FD
0008802E ECF5                       	smpsPSGAlterVol     $F5
00088030 9206                       	dc.b	nF1, $06
00088032 EC04                       	smpsPSGAlterVol     $04
00088034 E704                       	dc.b	smpsNoAttack, $04
00088036 ECFC                       	smpsPSGAlterVol     $FC
00088038 9206                       	dc.b	nF1, $06
0008803A EC04                       	smpsPSGAlterVol     $04
0008803C E701                       	dc.b	smpsNoAttack, $01
0008803E EC07                       	smpsPSGAlterVol     $07
00088040 8006                       	dc.b	nRst, $06
00088042 E100                       	smpsAlterNote       $00
00088044 01                         	dc.b	$01
00088045 E104                       	smpsAlterNote       $04
00088047 01                         	dc.b	$01
00088048 E100                       	smpsAlterNote       $00
0008804A 01                         	dc.b	$01
0008804B E1FD                       	smpsAlterNote       $FD
0008804D 01                         	dc.b	$01
0008804E ECF5                       	smpsPSGAlterVol     $F5
00088050 9206                       	dc.b	nF1, $06
00088052 EC04                       	smpsPSGAlterVol     $04
00088054 E701                       	dc.b	smpsNoAttack, $01
00088056 EC07                       	smpsPSGAlterVol     $07
00088058 8003                       	dc.b	nRst, $03
0008805A ECF5                       	smpsPSGAlterVol     $F5
0008805C 9207                       	dc.b	nF1, $07
0008805E EC0B                       	smpsPSGAlterVol     $0B
00088060 8007                       	dc.b	nRst, $07
00088062 E103                       	smpsAlterNote       $03
00088064 0101                       	dc.b	$01, $01
00088066 E1FD                       	smpsAlterNote       $FD
00088068 01                         	dc.b	$01
00088069 E1FA                       	smpsAlterNote       $FA
0008806B 01                         	dc.b	$01
0008806C E1FD                       	smpsAlterNote       $FD
0008806E ECF5                       	smpsPSGAlterVol     $F5
00088070 9106                       	dc.b	nE1, $06
00088072 EC0B                       	smpsPSGAlterVol     $0B
00088074 8004                       	dc.b	nRst, $04
00088076 ECF5                       	smpsPSGAlterVol     $F5
00088078 9106                       	dc.b	nE1, $06
0008807A EC04                       	smpsPSGAlterVol     $04
0008807C E701                       	dc.b	smpsNoAttack, $01
0008807E EC07                       	smpsPSGAlterVol     $07
00088080 8006                       	dc.b	nRst, $06
00088082 E100                       	smpsAlterNote       $00
00088084 01                         	dc.b	$01
00088085 E104                       	smpsAlterNote       $04
00088087 01                         	dc.b	$01
00088088 E100                       	smpsAlterNote       $00
0008808A 01                         	dc.b	$01
0008808B E1FA                       	smpsAlterNote       $FA
0008808D 01                         	dc.b	$01
0008808E E1FD                       	smpsAlterNote       $FD
00088090 ECF5                       	smpsPSGAlterVol     $F5
00088092 9106                       	dc.b	nE1, $06
00088094 EC04                       	smpsPSGAlterVol     $04
00088096 E701                       	dc.b	smpsNoAttack, $01
00088098 EC07                       	smpsPSGAlterVol     $07
0008809A 8003                       	dc.b	nRst, $03
0008809C ECF5                       	smpsPSGAlterVol     $F5
0008809E 9106                       	dc.b	nE1, $06
000880A0 EC04                       	smpsPSGAlterVol     $04
000880A2 E701                       	dc.b	smpsNoAttack, $01
000880A4 EC07                       	smpsPSGAlterVol     $07
000880A6 8006                       	dc.b	nRst, $06
000880A8 E100                       	smpsAlterNote       $00
000880AA 01                         	dc.b	$01
000880AB E104                       	smpsAlterNote       $04
000880AD 01                         	dc.b	$01
000880AE E103                       	smpsAlterNote       $03
000880B0 01                         	dc.b	$01
000880B1 E1FD                       	smpsAlterNote       $FD
000880B3 01                         	dc.b	$01
000880B4 ECF5                       	smpsPSGAlterVol     $F5
000880B6 9107                       	dc.b	nE1, $07
000880B8 EC0B                       	smpsPSGAlterVol     $0B
000880BA 8004                       	dc.b	nRst, $04
000880BC ECF5                       	smpsPSGAlterVol     $F5
000880BE 9106                       	dc.b	nE1, $06
000880C0 EC0B                       	smpsPSGAlterVol     $0B
000880C2 8007                       	dc.b	nRst, $07
000880C4 E103                       	smpsAlterNote       $03
000880C6 0101                       	dc.b	$01, $01
000880C8 E100                       	smpsAlterNote       $00
000880CA 01                         	dc.b	$01
000880CB E1FA                       	smpsAlterNote       $FA
000880CD 01                         	dc.b	$01
000880CE E1FD                       	smpsAlterNote       $FD
000880D0 ECF5                       	smpsPSGAlterVol     $F5
000880D2 9106                       	dc.b	nE1, $06
000880D4 EC04                       	smpsPSGAlterVol     $04
000880D6 E701                       	dc.b	smpsNoAttack, $01
000880D8 EC07                       	smpsPSGAlterVol     $07
000880DA 8003                       	dc.b	nRst, $03
000880DC ECF5                       	smpsPSGAlterVol     $F5
000880DE 9106                       	dc.b	nE1, $06
000880E0 EC04                       	smpsPSGAlterVol     $04
000880E2 E701                       	dc.b	smpsNoAttack, $01
000880E4 EC07                       	smpsPSGAlterVol     $07
000880E6 8003                       	dc.b	nRst, $03
000880E8 ECF5                       	smpsPSGAlterVol     $F5
000880EA 9207                       	dc.b	nF1, $07
000880EC EC0B                       	smpsPSGAlterVol     $0B
000880EE 8006                       	dc.b	nRst, $06
000880F0 E100                       	smpsAlterNote       $00
000880F2 01                         	dc.b	$01
000880F3 E104                       	smpsAlterNote       $04
000880F5 01                         	dc.b	$01
000880F6 E103                       	smpsAlterNote       $03
000880F8 01                         	dc.b	$01
000880F9 E1FD                       	smpsAlterNote       $FD
000880FB 01                         	dc.b	$01
000880FC E1F9                       	smpsAlterNote       $F9
000880FE 01                         	dc.b	$01
000880FF E1FD                       	smpsAlterNote       $FD
00088101 01                         	dc.b	$01
00088102 E100                       	smpsAlterNote       $00
00088104 01                         	dc.b	$01
00088105 E104                       	smpsAlterNote       $04
00088107 01                         	dc.b	$01
00088108 E1FD                       	smpsAlterNote       $FD
0008810A ECF5                       	smpsPSGAlterVol     $F5
0008810C 9203 9203                  	dc.b	nF1, $03, nF1, $03
00088110 EC04                       	smpsPSGAlterVol     $04
00088112 E701                       	dc.b	smpsNoAttack, $01
00088114 EC07                       	smpsPSGAlterVol     $07
00088116 8009                       	dc.b	nRst, $09
00088118 E100                       	smpsAlterNote       $00
0008811A 01                         	dc.b	$01
0008811B E104                       	smpsAlterNote       $04
0008811D 01                         	dc.b	$01
0008811E E103                       	smpsAlterNote       $03
00088120 01                         	dc.b	$01
00088121 E1FD                       	smpsAlterNote       $FD
00088123 01                         	dc.b	$01
00088124 E1F9                       	smpsAlterNote       $F9
00088126 01                         	dc.b	$01
00088127 E1FD                       	smpsAlterNote       $FD
00088129 01                         	dc.b	$01
0008812A E100                       	smpsAlterNote       $00
0008812C 01                         	dc.b	$01
0008812D E104                       	smpsAlterNote       $04
0008812F 01                         	dc.b	$01
00088130 E100                       	smpsAlterNote       $00
00088132 01                         	dc.b	$01
00088133 E1FA                       	smpsAlterNote       $FA
00088135 01                         	dc.b	$01
00088136 E1F9                       	smpsAlterNote       $F9
00088138 01                         	dc.b	$01
00088139 E1FD                       	smpsAlterNote       $FD
0008813B 01                         	dc.b	$01
0008813C E103                       	smpsAlterNote       $03
0008813E 0101                       	dc.b	$01, $01
00088140 E100                       	smpsAlterNote       $00
00088142 01                         	dc.b	$01
00088143 E1FD                       	smpsAlterNote       $FD
00088145 ECF5                       	smpsPSGAlterVol     $F5
00088147 9202                       	dc.b	nF1, $02
00088149 EC04                       	smpsPSGAlterVol     $04
0008814B E701                       	dc.b	smpsNoAttack, $01
0008814D ECFC                       	smpsPSGAlterVol     $FC
0008814F 9106                       	dc.b	nE1, $06
00088151 EC04                       	smpsPSGAlterVol     $04
00088153 E701                       	dc.b	smpsNoAttack, $01
00088155 EC07                       	smpsPSGAlterVol     $07
00088157 8006                       	dc.b	nRst, $06
00088159 E100                       	smpsAlterNote       $00
0008815B 01                         	dc.b	$01
0008815C E104                       	smpsAlterNote       $04
0008815E 01                         	dc.b	$01
0008815F E100                       	smpsAlterNote       $00
00088161 01                         	dc.b	$01
00088162 E1FD                       	smpsAlterNote       $FD
00088164 01                         	dc.b	$01
00088165 E1F9                       	smpsAlterNote       $F9
00088167 01                         	dc.b	$01
00088168 E1FD                       	smpsAlterNote       $FD
0008816A 01                         	dc.b	$01
0008816B E103                       	smpsAlterNote       $03
0008816D 01                         	dc.b	$01
0008816E E104                       	smpsAlterNote       $04
00088170 01                         	dc.b	$01
00088171 E1FD                       	smpsAlterNote       $FD
00088173 ECF5                       	smpsPSGAlterVol     $F5
00088175 9102                       	dc.b	nE1, $02
00088177 EC04                       	smpsPSGAlterVol     $04
00088179 E701                       	dc.b	smpsNoAttack, $01
0008817B ECFC                       	smpsPSGAlterVol     $FC
0008817D 920D                       	dc.b	nF1, $0D
0008817F E100                       	smpsAlterNote       $00
00088181 E701                       	dc.b	smpsNoAttack, $01
00088183 E104                       	smpsAlterNote       $04
00088185 E701                       	dc.b	smpsNoAttack, $01
00088187 E100                       	smpsAlterNote       $00
00088189 E701                       	dc.b	smpsNoAttack, $01
0008818B E1FD                       	smpsAlterNote       $FD
0008818D E701                       	dc.b	smpsNoAttack, $01
0008818F E1F9                       	smpsAlterNote       $F9
00088191 E701                       	dc.b	smpsNoAttack, $01
00088193 E1FD                       	smpsAlterNote       $FD
00088195 E701                       	dc.b	smpsNoAttack, $01
00088197 E103                       	smpsAlterNote       $03
00088199 E701                       	dc.b	smpsNoAttack, $01
0008819B E104                       	smpsAlterNote       $04
0008819D E701                       	dc.b	smpsNoAttack, $01
0008819F E100                       	smpsAlterNote       $00
000881A1 E701                       	dc.b	smpsNoAttack, $01
000881A3 E1FA                       	smpsAlterNote       $FA
000881A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881A9 E1FD                       	smpsAlterNote       $FD
000881AB E701                       	dc.b	smpsNoAttack, $01
000881AD E103                       	smpsAlterNote       $03
000881AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881B3 E1FD                       	smpsAlterNote       $FD
000881B5 E701                       	dc.b	smpsNoAttack, $01
000881B7 E1F9                       	smpsAlterNote       $F9
000881B9 E701                       	dc.b	smpsNoAttack, $01
000881BB E1FA                       	smpsAlterNote       $FA
000881BD E701                       	dc.b	smpsNoAttack, $01
000881BF E100                       	smpsAlterNote       $00
000881C1 EC04                       	smpsPSGAlterVol     $04
000881C3 E701                       	dc.b	smpsNoAttack, $01
000881C5 EC07                       	smpsPSGAlterVol     $07
000881C7 E104                       	smpsAlterNote       $04
000881C9 8001                       	dc.b	nRst, $01
000881CB E100                       	smpsAlterNote       $00
000881CD 01                         	dc.b	$01
000881CE E1FD                       	smpsAlterNote       $FD
000881D0 01                         	dc.b	$01
000881D1 E1F9                       	smpsAlterNote       $F9
000881D3 01                         	dc.b	$01
000881D4 E1FD                       	smpsAlterNote       $FD
000881D6 01                         	dc.b	$01
000881D7 E103                       	smpsAlterNote       $03
000881D9 01                         	dc.b	$01
000881DA E104                       	smpsAlterNote       $04
000881DC 01                         	dc.b	$01
000881DD E1FD                       	smpsAlterNote       $FD
000881DF ECF5                       	smpsPSGAlterVol     $F5
000881E1 9106                       	dc.b	nE1, $06
000881E3 EC04                       	smpsPSGAlterVol     $04
000881E5 E701                       	dc.b	smpsNoAttack, $01
000881E7 EC07                       	smpsPSGAlterVol     $07
000881E9 8003                       	dc.b	nRst, $03
000881EB ECF5                       	smpsPSGAlterVol     $F5
000881ED 9106                       	dc.b	nE1, $06
000881EF EC04                       	smpsPSGAlterVol     $04
000881F1 E701                       	dc.b	smpsNoAttack, $01
000881F3 EC07                       	smpsPSGAlterVol     $07
000881F5 8006                       	dc.b	nRst, $06
000881F7 E100                       	smpsAlterNote       $00
000881F9 01                         	dc.b	$01
000881FA E104                       	smpsAlterNote       $04
000881FC 01                         	dc.b	$01
000881FD E100                       	smpsAlterNote       $00
000881FF 01                         	dc.b	$01
00088200 E1FA                       	smpsAlterNote       $FA
00088202 01                         	dc.b	$01
00088203 E1FD                       	smpsAlterNote       $FD
00088205 ECF5                       	smpsPSGAlterVol     $F5
00088207 9206                       	dc.b	nF1, $06
00088209 EC04                       	smpsPSGAlterVol     $04
0008820B E701                       	dc.b	smpsNoAttack, $01
0008820D EC07                       	smpsPSGAlterVol     $07
0008820F 8003                       	dc.b	nRst, $03
00088211 ECF5                       	smpsPSGAlterVol     $F5
00088213 9207                       	dc.b	nF1, $07
00088215 EC0B                       	smpsPSGAlterVol     $0B
00088217 8006                       	dc.b	nRst, $06
00088219 E100                       	smpsAlterNote       $00
0008821B 01                         	dc.b	$01
0008821C E103                       	smpsAlterNote       $03
0008821E 0101                       	dc.b	$01, $01
00088220 E1FD                       	smpsAlterNote       $FD
00088222 01                         	dc.b	$01
00088223 ECF5                       	smpsPSGAlterVol     $F5
00088225 9107                       	dc.b	nE1, $07
00088227 EC0B                       	smpsPSGAlterVol     $0B
00088229 8004                       	dc.b	nRst, $04
0008822B ECF5                       	smpsPSGAlterVol     $F5
0008822D 9106                       	dc.b	nE1, $06
0008822F EC04                       	smpsPSGAlterVol     $04
00088231 E701                       	dc.b	smpsNoAttack, $01
00088233 EC07                       	smpsPSGAlterVol     $07
00088235 8006                       	dc.b	nRst, $06
00088237 E103                       	smpsAlterNote       $03
00088239 01                         	dc.b	$01
0008823A E104                       	smpsAlterNote       $04
0008823C 01                         	dc.b	$01
0008823D E100                       	smpsAlterNote       $00
0008823F 01                         	dc.b	$01
00088240 E1FA                       	smpsAlterNote       $FA
00088242 01                         	dc.b	$01
00088243 E1FD                       	smpsAlterNote       $FD
00088245 ECF5                       	smpsPSGAlterVol     $F5
00088247 9106                       	dc.b	nE1, $06
00088249 EC04                       	smpsPSGAlterVol     $04
0008824B E701                       	dc.b	smpsNoAttack, $01
0008824D EC07                       	smpsPSGAlterVol     $07
0008824F 8003                       	dc.b	nRst, $03
00088251 ECF5                       	smpsPSGAlterVol     $F5
00088253 9106                       	dc.b	nE1, $06
00088255 EC04                       	smpsPSGAlterVol     $04
00088257 E701                       	dc.b	smpsNoAttack, $01
00088259 EC07                       	smpsPSGAlterVol     $07
0008825B 8003                       	dc.b	nRst, $03
0008825D ECF5                       	smpsPSGAlterVol     $F5
0008825F 9207                       	dc.b	nF1, $07
00088261 EC0B                       	smpsPSGAlterVol     $0B
00088263 8006                       	dc.b	nRst, $06
00088265 E100                       	smpsAlterNote       $00
00088267 01                         	dc.b	$01
00088268 E103                       	smpsAlterNote       $03
0008826A 0101                       	dc.b	$01, $01
0008826C E1FD                       	smpsAlterNote       $FD
0008826E 01                         	dc.b	$01
0008826F E1F9                       	smpsAlterNote       $F9
00088271 01                         	dc.b	$01
00088272 E1FA                       	smpsAlterNote       $FA
00088274 01                         	dc.b	$01
00088275 E100                       	smpsAlterNote       $00
00088277 01                         	dc.b	$01
00088278 E104                       	smpsAlterNote       $04
0008827A 01                         	dc.b	$01
0008827B E1FD                       	smpsAlterNote       $FD
0008827D ECF5                       	smpsPSGAlterVol     $F5
0008827F 9203 9203                  	dc.b	nF1, $03, nF1, $03
00088283 EC04                       	smpsPSGAlterVol     $04
00088285 E701                       	dc.b	smpsNoAttack, $01
00088287 EC07                       	smpsPSGAlterVol     $07
00088289 8009                       	dc.b	nRst, $09
0008828B E100                       	smpsAlterNote       $00
0008828D 01                         	dc.b	$01
0008828E E103                       	smpsAlterNote       $03
00088290 0101                       	dc.b	$01, $01
00088292 E1FD                       	smpsAlterNote       $FD
00088294 01                         	dc.b	$01
00088295 E1F9                       	smpsAlterNote       $F9
00088297 01                         	dc.b	$01
00088298 E1FA                       	smpsAlterNote       $FA
0008829A 01                         	dc.b	$01
0008829B E100                       	smpsAlterNote       $00
0008829D 01                         	dc.b	$01
0008829E E104                       	smpsAlterNote       $04
000882A0 01                         	dc.b	$01
000882A1 E100                       	smpsAlterNote       $00
000882A3 01                         	dc.b	$01
000882A4 E1FD                       	smpsAlterNote       $FD
000882A6 01                         	dc.b	$01
000882A7 E1F9                       	smpsAlterNote       $F9
000882A9 01                         	dc.b	$01
000882AA E1FD                       	smpsAlterNote       $FD
000882AC 01                         	dc.b	$01
000882AD E103                       	smpsAlterNote       $03
000882AF 01                         	dc.b	$01
000882B0 E104                       	smpsAlterNote       $04
000882B2 01                         	dc.b	$01
000882B3 E100                       	smpsAlterNote       $00
000882B5 01                         	dc.b	$01
000882B6 E1FD                       	smpsAlterNote       $FD
000882B8 ECF5                       	smpsPSGAlterVol     $F5
000882BA 9203 9106                  	dc.b	nF1, $03, nE1, $06
000882BE EC04                       	smpsPSGAlterVol     $04
000882C0 E701                       	dc.b	smpsNoAttack, $01
000882C2 EC07                       	smpsPSGAlterVol     $07
000882C4 8006                       	dc.b	nRst, $06
000882C6 E100                       	smpsAlterNote       $00
000882C8 01                         	dc.b	$01
000882C9 E104                       	smpsAlterNote       $04
000882CB 01                         	dc.b	$01
000882CC E103                       	smpsAlterNote       $03
000882CE 01                         	dc.b	$01
000882CF E1FD                       	smpsAlterNote       $FD
000882D1 01                         	dc.b	$01
000882D2 E1F9                       	smpsAlterNote       $F9
000882D4 01                         	dc.b	$01
000882D5 E1FD                       	smpsAlterNote       $FD
000882D7 01                         	dc.b	$01
000882D8 E100                       	smpsAlterNote       $00
000882DA 01                         	dc.b	$01
000882DB E104                       	smpsAlterNote       $04
000882DD 01                         	dc.b	$01
000882DE E1FD                       	smpsAlterNote       $FD
000882E0 ECF5                       	smpsPSGAlterVol     $F5
000882E2 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000882E6 E100                       	smpsAlterNote       $00
000882E8 E701                       	dc.b	smpsNoAttack, $01
000882EA E104                       	smpsAlterNote       $04
000882EC E701                       	dc.b	smpsNoAttack, $01
000882EE E100                       	smpsAlterNote       $00
000882F0 E701                       	dc.b	smpsNoAttack, $01
000882F2 E1FD                       	smpsAlterNote       $FD
000882F4 E701                       	dc.b	smpsNoAttack, $01
000882F6 E1F9                       	smpsAlterNote       $F9
000882F8 E701                       	dc.b	smpsNoAttack, $01
000882FA E1FD                       	smpsAlterNote       $FD
000882FC E701                       	dc.b	smpsNoAttack, $01
000882FE E103                       	smpsAlterNote       $03
00088300 E701                       	dc.b	smpsNoAttack, $01
00088302 E104                       	smpsAlterNote       $04
00088304 E701                       	dc.b	smpsNoAttack, $01
00088306 E100                       	smpsAlterNote       $00
00088308 E701                       	dc.b	smpsNoAttack, $01
0008830A E1FA                       	smpsAlterNote       $FA
0008830C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088310 E1FD                       	smpsAlterNote       $FD
00088312 E701                       	dc.b	smpsNoAttack, $01
00088314 E103                       	smpsAlterNote       $03
00088316 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008831A E100                       	smpsAlterNote       $00
0008831C E701                       	dc.b	smpsNoAttack, $01
0008831E E1FA                       	smpsAlterNote       $FA
00088320 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088324 E100                       	smpsAlterNote       $00
00088326 EC04                       	smpsPSGAlterVol     $04
00088328 E701                       	dc.b	smpsNoAttack, $01
0008832A EC07                       	smpsPSGAlterVol     $07
0008832C E104                       	smpsAlterNote       $04
0008832E 8001                       	dc.b	nRst, $01
00088330 E103                       	smpsAlterNote       $03
00088332 01                         	dc.b	$01
00088333 E1FD                       	smpsAlterNote       $FD
00088335 01                         	dc.b	$01
00088336 E1F9                       	smpsAlterNote       $F9
00088338 01                         	dc.b	$01
00088339 E1FD                       	smpsAlterNote       $FD
0008833B 01                         	dc.b	$01
0008833C E100                       	smpsAlterNote       $00
0008833E 01                         	dc.b	$01
0008833F E104                       	smpsAlterNote       $04
00088341 01                         	dc.b	$01
00088342 E1FD                       	smpsAlterNote       $FD
00088344 ECF5                       	smpsPSGAlterVol     $F5
00088346 9106                       	dc.b	nE1, $06
00088348 EC04                       	smpsPSGAlterVol     $04
0008834A E701                       	dc.b	smpsNoAttack, $01
0008834C EC07                       	smpsPSGAlterVol     $07
0008834E 8003                       	dc.b	nRst, $03
00088350 ECF5                       	smpsPSGAlterVol     $F5
00088352 9106                       	dc.b	nE1, $06
00088354 EC04                       	smpsPSGAlterVol     $04
00088356 E701                       	dc.b	smpsNoAttack, $01
00088358 EC07                       	smpsPSGAlterVol     $07
0008835A 8006                       	dc.b	nRst, $06
0008835C E100                       	smpsAlterNote       $00
0008835E 01                         	dc.b	$01
0008835F E104                       	smpsAlterNote       $04
00088361 01                         	dc.b	$01
00088362 E100                       	smpsAlterNote       $00
00088364 01                         	dc.b	$01
00088365 E1FD                       	smpsAlterNote       $FD
00088367 01                         	dc.b	$01
00088368 ECF5                       	smpsPSGAlterVol     $F5
0008836A 9206                       	dc.b	nF1, $06
0008836C EC04                       	smpsPSGAlterVol     $04
0008836E E701                       	dc.b	smpsNoAttack, $01
00088370 EC07                       	smpsPSGAlterVol     $07
00088372 8003                       	dc.b	nRst, $03
00088374 ECF5                       	smpsPSGAlterVol     $F5
00088376 9207                       	dc.b	nF1, $07
00088378 EC0B                       	smpsPSGAlterVol     $0B
0008837A 8007                       	dc.b	nRst, $07
0008837C E103                       	smpsAlterNote       $03
0008837E 0101                       	dc.b	$01, $01
00088380 E1FD                       	smpsAlterNote       $FD
00088382 01                         	dc.b	$01
00088383 E1FA                       	smpsAlterNote       $FA
00088385 01                         	dc.b	$01
00088386 E1FD                       	smpsAlterNote       $FD
00088388 ECF5                       	smpsPSGAlterVol     $F5
0008838A 9106                       	dc.b	nE1, $06
0008838C EC0B                       	smpsPSGAlterVol     $0B
0008838E 8004                       	dc.b	nRst, $04
00088390 ECF5                       	smpsPSGAlterVol     $F5
00088392 9106                       	dc.b	nE1, $06
00088394 EC04                       	smpsPSGAlterVol     $04
00088396 E701                       	dc.b	smpsNoAttack, $01
00088398 EC07                       	smpsPSGAlterVol     $07
0008839A 8006                       	dc.b	nRst, $06
0008839C E100                       	smpsAlterNote       $00
0008839E 01                         	dc.b	$01
0008839F E104                       	smpsAlterNote       $04
000883A1 01                         	dc.b	$01
000883A2 E100                       	smpsAlterNote       $00
000883A4 01                         	dc.b	$01
000883A5 E1FA                       	smpsAlterNote       $FA
000883A7 01                         	dc.b	$01
000883A8 E1FD                       	smpsAlterNote       $FD
000883AA ECF5                       	smpsPSGAlterVol     $F5
000883AC 9206                       	dc.b	nF1, $06
000883AE EC04                       	smpsPSGAlterVol     $04
000883B0 E701                       	dc.b	smpsNoAttack, $01
000883B2 EC07                       	smpsPSGAlterVol     $07
000883B4 8003                       	dc.b	nRst, $03
000883B6 ECF5                       	smpsPSGAlterVol     $F5
000883B8 9206                       	dc.b	nF1, $06
000883BA EC04                       	smpsPSGAlterVol     $04
000883BC E701                       	dc.b	smpsNoAttack, $01
000883BE EC07                       	smpsPSGAlterVol     $07
000883C0 8006                       	dc.b	nRst, $06
000883C2 E100                       	smpsAlterNote       $00
000883C4 01                         	dc.b	$01
000883C5 E104                       	smpsAlterNote       $04
000883C7 01                         	dc.b	$01
000883C8 E103                       	smpsAlterNote       $03
000883CA 01                         	dc.b	$01
000883CB E1FD                       	smpsAlterNote       $FD
000883CD 01                         	dc.b	$01
000883CE ECF5                       	smpsPSGAlterVol     $F5
000883D0 9107                       	dc.b	nE1, $07
000883D2 EC0B                       	smpsPSGAlterVol     $0B
000883D4 8004                       	dc.b	nRst, $04
000883D6 ECF5                       	smpsPSGAlterVol     $F5
000883D8 9106                       	dc.b	nE1, $06
000883DA EC0B                       	smpsPSGAlterVol     $0B
000883DC 8007                       	dc.b	nRst, $07
000883DE E103                       	smpsAlterNote       $03
000883E0 0101                       	dc.b	$01, $01
000883E2 E100                       	smpsAlterNote       $00
000883E4 01                         	dc.b	$01
000883E5 E1FA                       	smpsAlterNote       $FA
000883E7 01                         	dc.b	$01
000883E8 E1FD                       	smpsAlterNote       $FD
000883EA ECF5                       	smpsPSGAlterVol     $F5
000883EC 9206                       	dc.b	nF1, $06
000883EE EC04                       	smpsPSGAlterVol     $04
000883F0 E701                       	dc.b	smpsNoAttack, $01
000883F2 EC07                       	smpsPSGAlterVol     $07
000883F4 8003                       	dc.b	nRst, $03
000883F6 ECF5                       	smpsPSGAlterVol     $F5
000883F8 9206                       	dc.b	nF1, $06
000883FA EC04                       	smpsPSGAlterVol     $04
000883FC E701                       	dc.b	smpsNoAttack, $01
000883FE EC07                       	smpsPSGAlterVol     $07
00088400 8006                       	dc.b	nRst, $06
00088402 E100                       	smpsAlterNote       $00
00088404 01                         	dc.b	$01
00088405 E104                       	smpsAlterNote       $04
00088407 01                         	dc.b	$01
00088408 E100                       	smpsAlterNote       $00
0008840A 01                         	dc.b	$01
0008840B E1FD                       	smpsAlterNote       $FD
0008840D 01                         	dc.b	$01
0008840E ECF5                       	smpsPSGAlterVol     $F5
00088410 9106                       	dc.b	nE1, $06
00088412 EC04                       	smpsPSGAlterVol     $04
00088414 E701                       	dc.b	smpsNoAttack, $01
00088416 EC07                       	smpsPSGAlterVol     $07
00088418 8003                       	dc.b	nRst, $03
0008841A ECF5                       	smpsPSGAlterVol     $F5
0008841C 9107 9106                  	dc.b	nE1, $07, nE1, $06
00088420 EC04                       	smpsPSGAlterVol     $04
00088422 E701                       	dc.b	smpsNoAttack, $01
00088424 ECFC                       	smpsPSGAlterVol     $FC
00088426 9103                       	dc.b	nE1, $03
00088428 EC04                       	smpsPSGAlterVol     $04
0008842A E701                       	dc.b	smpsNoAttack, $01
0008842C ECFC                       	smpsPSGAlterVol     $FC
0008842E 9102                       	dc.b	nE1, $02
00088430 EC04                       	smpsPSGAlterVol     $04
00088432 E701                       	dc.b	smpsNoAttack, $01
00088434 ECFC                       	smpsPSGAlterVol     $FC
00088436 9103                       	dc.b	nE1, $03
00088438 EC0B                       	smpsPSGAlterVol     $0B
0008843A 800A                       	dc.b	nRst, $0A
0008843C E100                       	smpsAlterNote       $00
0008843E 01                         	dc.b	$01
0008843F E104                       	smpsAlterNote       $04
00088441 01                         	dc.b	$01
00088442 E100                       	smpsAlterNote       $00
00088444 01                         	dc.b	$01
00088445 E1FA                       	smpsAlterNote       $FA
00088447 01                         	dc.b	$01
00088448 E1F9                       	smpsAlterNote       $F9
0008844A 01                         	dc.b	$01
0008844B E1FD                       	smpsAlterNote       $FD
0008844D 01                         	dc.b	$01
0008844E E103                       	smpsAlterNote       $03
00088450 0101                       	dc.b	$01, $01
00088452 E100                       	smpsAlterNote       $00
00088454 01                         	dc.b	$01
00088455 E1FA                       	smpsAlterNote       $FA
00088457 0101                       	dc.b	$01, $01
00088459 E1FD                       	smpsAlterNote       $FD
0008845B ECF5                       	smpsPSGAlterVol     $F5
0008845D 9206                       	dc.b	nF1, $06
0008845F EC04                       	smpsPSGAlterVol     $04
00088461 E704                       	dc.b	smpsNoAttack, $04
00088463 ECFC                       	smpsPSGAlterVol     $FC
00088465 9206                       	dc.b	nF1, $06
00088467 EC04                       	smpsPSGAlterVol     $04
00088469 E701                       	dc.b	smpsNoAttack, $01
0008846B EC07                       	smpsPSGAlterVol     $07
0008846D 8006                       	dc.b	nRst, $06
0008846F E100                       	smpsAlterNote       $00
00088471 01                         	dc.b	$01
00088472 E104                       	smpsAlterNote       $04
00088474 01                         	dc.b	$01
00088475 E103                       	smpsAlterNote       $03
00088477 01                         	dc.b	$01
00088478 E1FD                       	smpsAlterNote       $FD
0008847A 01                         	dc.b	$01
0008847B ECF5                       	smpsPSGAlterVol     $F5
0008847D 9407                       	dc.b	nG1, $07
0008847F EC0B                       	smpsPSGAlterVol     $0B
00088481 8004                       	dc.b	nRst, $04
00088483 ECF5                       	smpsPSGAlterVol     $F5
00088485 9406                       	dc.b	nG1, $06
00088487 EC0B                       	smpsPSGAlterVol     $0B
00088489 8007                       	dc.b	nRst, $07
0008848B E103                       	smpsAlterNote       $03
0008848D 0101                       	dc.b	$01, $01
0008848F E1FD                       	smpsAlterNote       $FD
00088491 01                         	dc.b	$01
00088492 E1F9                       	smpsAlterNote       $F9
00088494 01                         	dc.b	$01
00088495 E1FD                       	smpsAlterNote       $FD
00088497 ECF5                       	smpsPSGAlterVol     $F5
00088499 9206                       	dc.b	nF1, $06
0008849B EC04                       	smpsPSGAlterVol     $04
0008849D E701                       	dc.b	smpsNoAttack, $01
0008849F EC07                       	smpsPSGAlterVol     $07
000884A1 8003                       	dc.b	nRst, $03
000884A3 ECF5                       	smpsPSGAlterVol     $F5
000884A5 9206                       	dc.b	nF1, $06
000884A7 EC04                       	smpsPSGAlterVol     $04
000884A9 E701                       	dc.b	smpsNoAttack, $01
000884AB EC07                       	smpsPSGAlterVol     $07
000884AD 8006                       	dc.b	nRst, $06
000884AF E100                       	smpsAlterNote       $00
000884B1 01                         	dc.b	$01
000884B2 E104                       	smpsAlterNote       $04
000884B4 01                         	dc.b	$01
000884B5 E100                       	smpsAlterNote       $00
000884B7 01                         	dc.b	$01
000884B8 E1FA                       	smpsAlterNote       $FA
000884BA 01                         	dc.b	$01
000884BB E1FD                       	smpsAlterNote       $FD
000884BD ECF5                       	smpsPSGAlterVol     $F5
000884BF 9206                       	dc.b	nF1, $06
000884C1 EC04                       	smpsPSGAlterVol     $04
000884C3 E701                       	dc.b	smpsNoAttack, $01
000884C5 EC07                       	smpsPSGAlterVol     $07
000884C7 8003                       	dc.b	nRst, $03
000884C9 ECF5                       	smpsPSGAlterVol     $F5
000884CB 9107                       	dc.b	nE1, $07
000884CD EC0B                       	smpsPSGAlterVol     $0B
000884CF 8006                       	dc.b	nRst, $06
000884D1 E100                       	smpsAlterNote       $00
000884D3 01                         	dc.b	$01
000884D4 E103                       	smpsAlterNote       $03
000884D6 0101                       	dc.b	$01, $01
000884D8 E1FD                       	smpsAlterNote       $FD
000884DA 01                         	dc.b	$01
000884DB ECF5                       	smpsPSGAlterVol     $F5
000884DD 9207                       	dc.b	nF1, $07
000884DF EC0B                       	smpsPSGAlterVol     $0B
000884E1 8004                       	dc.b	nRst, $04
000884E3 ECF5                       	smpsPSGAlterVol     $F5
000884E5 9206                       	dc.b	nF1, $06
000884E7 EC04                       	smpsPSGAlterVol     $04
000884E9 E701                       	dc.b	smpsNoAttack, $01
000884EB EC07                       	smpsPSGAlterVol     $07
000884ED 8006                       	dc.b	nRst, $06
000884EF E103                       	smpsAlterNote       $03
000884F1 01                         	dc.b	$01
000884F2 E104                       	smpsAlterNote       $04
000884F4 01                         	dc.b	$01
000884F5 E100                       	smpsAlterNote       $00
000884F7 01                         	dc.b	$01
000884F8 E1FB                       	smpsAlterNote       $FB
000884FA 01                         	dc.b	$01
000884FB E1FD                       	smpsAlterNote       $FD
000884FD ECF5                       	smpsPSGAlterVol     $F5
000884FF 9406                       	dc.b	nG1, $06
00088501 EC04                       	smpsPSGAlterVol     $04
00088503 E701                       	dc.b	smpsNoAttack, $01
00088505 EC07                       	smpsPSGAlterVol     $07
00088507 8003                       	dc.b	nRst, $03
00088509 ECF5                       	smpsPSGAlterVol     $F5
0008850B 9406                       	dc.b	nG1, $06
0008850D EC04                       	smpsPSGAlterVol     $04
0008850F E701                       	dc.b	smpsNoAttack, $01
00088511 EC07                       	smpsPSGAlterVol     $07
00088513 8006                       	dc.b	nRst, $06
00088515 E100                       	smpsAlterNote       $00
00088517 01                         	dc.b	$01
00088518 E104                       	smpsAlterNote       $04
0008851A 01                         	dc.b	$01
0008851B E100                       	smpsAlterNote       $00
0008851D 01                         	dc.b	$01
0008851E E1FD                       	smpsAlterNote       $FD
00088520 01                         	dc.b	$01
00088521 ECF5                       	smpsPSGAlterVol     $F5
00088523 9206                       	dc.b	nF1, $06
00088525 EC04                       	smpsPSGAlterVol     $04
00088527 E701                       	dc.b	smpsNoAttack, $01
00088529 EC07                       	smpsPSGAlterVol     $07
0008852B 8003                       	dc.b	nRst, $03
0008852D ECF5                       	smpsPSGAlterVol     $F5
0008852F 9207                       	dc.b	nF1, $07
00088531 EC0B                       	smpsPSGAlterVol     $0B
00088533 8007                       	dc.b	nRst, $07
00088535 E103                       	smpsAlterNote       $03
00088537 0101                       	dc.b	$01, $01
00088539 E1FD                       	smpsAlterNote       $FD
0008853B 01                         	dc.b	$01
0008853C E1FA                       	smpsAlterNote       $FA
0008853E 01                         	dc.b	$01
0008853F E1FD                       	smpsAlterNote       $FD
00088541 ECF5                       	smpsPSGAlterVol     $F5
00088543 9206                       	dc.b	nF1, $06
00088545 EC0B                       	smpsPSGAlterVol     $0B
00088547 8004                       	dc.b	nRst, $04
00088549 ECF5                       	smpsPSGAlterVol     $F5
0008854B 9206                       	dc.b	nF1, $06
0008854D EC04                       	smpsPSGAlterVol     $04
0008854F E701                       	dc.b	smpsNoAttack, $01
00088551 EC07                       	smpsPSGAlterVol     $07
00088553 8006                       	dc.b	nRst, $06
00088555 E100                       	smpsAlterNote       $00
00088557 01                         	dc.b	$01
00088558 E104                       	smpsAlterNote       $04
0008855A 01                         	dc.b	$01
0008855B E100                       	smpsAlterNote       $00
0008855D 01                         	dc.b	$01
0008855E E1FA                       	smpsAlterNote       $FA
00088560 01                         	dc.b	$01
00088561 E1FD                       	smpsAlterNote       $FD
00088563 ECF5                       	smpsPSGAlterVol     $F5
00088565 9206                       	dc.b	nF1, $06
00088567 EC04                       	smpsPSGAlterVol     $04
00088569 E701                       	dc.b	smpsNoAttack, $01
0008856B EC07                       	smpsPSGAlterVol     $07
0008856D 8003                       	dc.b	nRst, $03
0008856F ECF5                       	smpsPSGAlterVol     $F5
00088571 9207                       	dc.b	nF1, $07
00088573 EC0B                       	smpsPSGAlterVol     $0B
00088575 8006                       	dc.b	nRst, $06
00088577 E100                       	smpsAlterNote       $00
00088579 01                         	dc.b	$01
0008857A E103                       	smpsAlterNote       $03
0008857C 0101                       	dc.b	$01, $01
0008857E E1FD                       	smpsAlterNote       $FD
00088580 01                         	dc.b	$01
00088581 ECF5                       	smpsPSGAlterVol     $F5
00088583 9207                       	dc.b	nF1, $07
00088585 EC0B                       	smpsPSGAlterVol     $0B
00088587 8004                       	dc.b	nRst, $04
00088589 ECF5                       	smpsPSGAlterVol     $F5
0008858B 9206                       	dc.b	nF1, $06
0008858D EC0B                       	smpsPSGAlterVol     $0B
0008858F 8007                       	dc.b	nRst, $07
00088591 E103                       	smpsAlterNote       $03
00088593 0101                       	dc.b	$01, $01
00088595 E100                       	smpsAlterNote       $00
00088597 01                         	dc.b	$01
00088598 E1FA                       	smpsAlterNote       $FA
0008859A 01                         	dc.b	$01
0008859B E1FD                       	smpsAlterNote       $FD
0008859D ECF5                       	smpsPSGAlterVol     $F5
0008859F 9206                       	dc.b	nF1, $06
000885A1 EC04                       	smpsPSGAlterVol     $04
000885A3 E701                       	dc.b	smpsNoAttack, $01
000885A5 EC07                       	smpsPSGAlterVol     $07
000885A7 8003                       	dc.b	nRst, $03
000885A9 ECF5                       	smpsPSGAlterVol     $F5
000885AB 9206                       	dc.b	nF1, $06
000885AD EC04                       	smpsPSGAlterVol     $04
000885AF E701                       	dc.b	smpsNoAttack, $01
000885B1 EC07                       	smpsPSGAlterVol     $07
000885B3 8006                       	dc.b	nRst, $06
000885B5 E100                       	smpsAlterNote       $00
000885B7 01                         	dc.b	$01
000885B8 E104                       	smpsAlterNote       $04
000885BA 01                         	dc.b	$01
000885BB E100                       	smpsAlterNote       $00
000885BD 01                         	dc.b	$01
000885BE E1FD                       	smpsAlterNote       $FD
000885C0 01                         	dc.b	$01
000885C1 ECF5                       	smpsPSGAlterVol     $F5
000885C3 9206                       	dc.b	nF1, $06
000885C5 EC04                       	smpsPSGAlterVol     $04
000885C7 E701                       	dc.b	smpsNoAttack, $01
000885C9 EC07                       	smpsPSGAlterVol     $07
000885CB 8003                       	dc.b	nRst, $03
000885CD ECF5                       	smpsPSGAlterVol     $F5
000885CF 9207                       	dc.b	nF1, $07
000885D1 EC0B                       	smpsPSGAlterVol     $0B
000885D3 8007                       	dc.b	nRst, $07
000885D5 E104                       	smpsAlterNote       $04
000885D7 0101                       	dc.b	$01, $01
000885D9 E1FB                       	smpsAlterNote       $FB
000885DB 01                         	dc.b	$01
000885DC E1F6                       	smpsAlterNote       $F6
000885DE 0101                       	dc.b	$01, $01
000885E0 E1FF                       	smpsAlterNote       $FF
000885E2 01                         	dc.b	$01
000885E3 E105                       	smpsAlterNote       $05
000885E5 01                         	dc.b	$01
000885E6 E104                       	smpsAlterNote       $04
000885E8 01                         	dc.b	$01
000885E9 E1FB                       	smpsAlterNote       $FB
000885EB 01                         	dc.b	$01
000885EC E1F5                       	smpsAlterNote       $F5
000885EE 01                         	dc.b	$01
000885EF E1FC                       	smpsAlterNote       $FC
000885F1 ECF5                       	smpsPSGAlterVol     $F5
000885F3 8B0E                       	dc.b	nBb0, $0E
000885F5 E102                       	smpsAlterNote       $02
000885F7 EC0B                       	smpsPSGAlterVol     $0B
000885F9 8001                       	dc.b	nRst, $01
000885FB E101                       	smpsAlterNote       $01
000885FD 01                         	dc.b	$01
000885FE E1FC                       	smpsAlterNote       $FC
00088600 01                         	dc.b	$01
00088601 E1F9                       	smpsAlterNote       $F9
00088603 0101                       	dc.b	$01, $01
00088605 E1FF                       	smpsAlterNote       $FF
00088607 01                         	dc.b	$01
00088608 E102                       	smpsAlterNote       $02
0008860A 01                         	dc.b	$01
0008860B E1FF                       	smpsAlterNote       $FF
0008860D 01                         	dc.b	$01
0008860E E1FC                       	smpsAlterNote       $FC
00088610 01                         	dc.b	$01
00088611 E1F8                       	smpsAlterNote       $F8
00088613 01                         	dc.b	$01
00088614 E1FC                       	smpsAlterNote       $FC
00088616 01                         	dc.b	$01
00088617 E101                       	smpsAlterNote       $01
00088619 01                         	dc.b	$01
0008861A E102                       	smpsAlterNote       $02
0008861C 01                         	dc.b	$01
0008861D E1FF                       	smpsAlterNote       $FF
0008861F 01                         	dc.b	$01
00088620 E1FB                       	smpsAlterNote       $FB
00088622 ECF5                       	smpsPSGAlterVol     $F5
00088624 8D0D                       	dc.b	nC1, $0D
00088626 E101                       	smpsAlterNote       $01
00088628 EC0B                       	smpsPSGAlterVol     $0B
0008862A 8001                       	dc.b	nRst, $01
0008862C E102                       	smpsAlterNote       $02
0008862E 01                         	dc.b	$01
0008862F E1FF                       	smpsAlterNote       $FF
00088631 01                         	dc.b	$01
00088632 E1F9                       	smpsAlterNote       $F9
00088634 0101                       	dc.b	$01, $01
00088636 E1FC                       	smpsAlterNote       $FC
00088638 01                         	dc.b	$01
00088639 E101                       	smpsAlterNote       $01
0008863B 0101                       	dc.b	$01, $01
0008863D E1FC                       	smpsAlterNote       $FC
0008863F 01                         	dc.b	$01
00088640 E1F9                       	smpsAlterNote       $F9
00088642 0101                       	dc.b	$01, $01
00088644 E1FF                       	smpsAlterNote       $FF
00088646 01                         	dc.b	$01
00088647 E102                       	smpsAlterNote       $02
00088649 01                         	dc.b	$01
0008864A E101                       	smpsAlterNote       $01
0008864C 01                         	dc.b	$01
0008864D E1FC                       	smpsAlterNote       $FC
0008864F ECF5                       	smpsPSGAlterVol     $F5
00088651 8F0D                       	dc.b	nD1, $0D
00088653 E1FF                       	smpsAlterNote       $FF
00088655 EC04                       	smpsPSGAlterVol     $04
00088657 E701                       	dc.b	smpsNoAttack, $01
00088659 EC07                       	smpsPSGAlterVol     $07
0008865B E103                       	smpsAlterNote       $03
0008865D 8001                       	dc.b	nRst, $01
0008865F E102                       	smpsAlterNote       $02
00088661 01                         	dc.b	$01
00088662 E1FD                       	smpsAlterNote       $FD
00088664 01                         	dc.b	$01
00088665 E1F9                       	smpsAlterNote       $F9
00088667 01                         	dc.b	$01
00088668 E1FD                       	smpsAlterNote       $FD
0008866A 01                         	dc.b	$01
0008866B E100                       	smpsAlterNote       $00
0008866D 01                         	dc.b	$01
0008866E E103                       	smpsAlterNote       $03
00088670 01                         	dc.b	$01
00088671 E100                       	smpsAlterNote       $00
00088673 01                         	dc.b	$01
00088674 E1FA                       	smpsAlterNote       $FA
00088676 01                         	dc.b	$01
00088677 E1F9                       	smpsAlterNote       $F9
00088679 01                         	dc.b	$01
0008867A E1FD                       	smpsAlterNote       $FD
0008867C 01                         	dc.b	$01
0008867D E102                       	smpsAlterNote       $02
0008867F 0101                       	dc.b	$01, $01
00088681 E100                       	smpsAlterNote       $00
00088683 01                         	dc.b	$01
00088684 E1FD                       	smpsAlterNote       $FD
00088686 ECF5                       	smpsPSGAlterVol     $F5
00088688 910D                       	dc.b	nE1, $0D
0008868A E103                       	smpsAlterNote       $03
0008868C EC0B                       	smpsPSGAlterVol     $0B
0008868E 8001 01                    	dc.b	nRst, $01, $01
00088691 E100                       	smpsAlterNote       $00
00088693 01                         	dc.b	$01
00088694 E1FA                       	smpsAlterNote       $FA
00088696 0101                       	dc.b	$01, $01
00088698 E100                       	smpsAlterNote       $00
0008869A 01                         	dc.b	$01
0008869B E103                       	smpsAlterNote       $03
0008869D 01                         	dc.b	$01
0008869E E1FD                       	smpsAlterNote       $FD
000886A0 ECF5                       	smpsPSGAlterVol     $F5
000886A2 9206                       	dc.b	nF1, $06
000886A4 EC04                       	smpsPSGAlterVol     $04
000886A6 E701                       	dc.b	smpsNoAttack, $01
000886A8 EC07                       	smpsPSGAlterVol     $07
000886AA 8003                       	dc.b	nRst, $03
000886AC ECF5                       	smpsPSGAlterVol     $F5
000886AE 9207                       	dc.b	nF1, $07
000886B0 EC0B                       	smpsPSGAlterVol     $0B
000886B2 8006                       	dc.b	nRst, $06
000886B4 E100                       	smpsAlterNote       $00
000886B6 01                         	dc.b	$01
000886B7 E103                       	smpsAlterNote       $03
000886B9 0101                       	dc.b	$01, $01
000886BB E1FD                       	smpsAlterNote       $FD
000886BD 01                         	dc.b	$01
000886BE ECF5                       	smpsPSGAlterVol     $F5
000886C0 9407                       	dc.b	nG1, $07
000886C2 EC0B                       	smpsPSGAlterVol     $0B
000886C4 8004                       	dc.b	nRst, $04
000886C6 ECF5                       	smpsPSGAlterVol     $F5
000886C8 9406                       	dc.b	nG1, $06
000886CA EC04                       	smpsPSGAlterVol     $04
000886CC E701                       	dc.b	smpsNoAttack, $01
000886CE EC07                       	smpsPSGAlterVol     $07
000886D0 8006                       	dc.b	nRst, $06
000886D2 E103                       	smpsAlterNote       $03
000886D4 01                         	dc.b	$01
000886D5 E104                       	smpsAlterNote       $04
000886D7 01                         	dc.b	$01
000886D8 E100                       	smpsAlterNote       $00
000886DA 01                         	dc.b	$01
000886DB E1F9                       	smpsAlterNote       $F9
000886DD 01                         	dc.b	$01
000886DE E1FD                       	smpsAlterNote       $FD
000886E0 ECF5                       	smpsPSGAlterVol     $F5
000886E2 9206                       	dc.b	nF1, $06
000886E4 EC04                       	smpsPSGAlterVol     $04
000886E6 E701                       	dc.b	smpsNoAttack, $01
000886E8 EC07                       	smpsPSGAlterVol     $07
000886EA 8003                       	dc.b	nRst, $03
000886EC ECF5                       	smpsPSGAlterVol     $F5
000886EE 9206                       	dc.b	nF1, $06
000886F0 EC04                       	smpsPSGAlterVol     $04
000886F2 E701                       	dc.b	smpsNoAttack, $01
000886F4 EC07                       	smpsPSGAlterVol     $07
000886F6 8006                       	dc.b	nRst, $06
000886F8 E100                       	smpsAlterNote       $00
000886FA 01                         	dc.b	$01
000886FB E104                       	smpsAlterNote       $04
000886FD 01                         	dc.b	$01
000886FE E103                       	smpsAlterNote       $03
00088700 01                         	dc.b	$01
00088701 E1FD                       	smpsAlterNote       $FD
00088703 01                         	dc.b	$01
00088704 ECF5                       	smpsPSGAlterVol     $F5
00088706 9407                       	dc.b	nG1, $07
00088708 EC0B                       	smpsPSGAlterVol     $0B
0008870A 8004                       	dc.b	nRst, $04
0008870C ECF5                       	smpsPSGAlterVol     $F5
0008870E 9406                       	dc.b	nG1, $06
00088710 EC0B                       	smpsPSGAlterVol     $0B
00088712 8007                       	dc.b	nRst, $07
00088714 E103                       	smpsAlterNote       $03
00088716 0101                       	dc.b	$01, $01
00088718 E100                       	smpsAlterNote       $00
0008871A 01                         	dc.b	$01
0008871B E1F9                       	smpsAlterNote       $F9
0008871D 01                         	dc.b	$01
0008871E E1FD                       	smpsAlterNote       $FD
00088720 ECF5                       	smpsPSGAlterVol     $F5
00088722 9206                       	dc.b	nF1, $06
00088724 EC04                       	smpsPSGAlterVol     $04
00088726 E701                       	dc.b	smpsNoAttack, $01
00088728 EC07                       	smpsPSGAlterVol     $07
0008872A 8003                       	dc.b	nRst, $03
0008872C ECF5                       	smpsPSGAlterVol     $F5
0008872E 9206                       	dc.b	nF1, $06
00088730 EC04                       	smpsPSGAlterVol     $04
00088732 E701                       	dc.b	smpsNoAttack, $01
00088734 EC07                       	smpsPSGAlterVol     $07
00088736 8006                       	dc.b	nRst, $06
00088738 E100                       	smpsAlterNote       $00
0008873A 01                         	dc.b	$01
0008873B E104                       	smpsAlterNote       $04
0008873D 01                         	dc.b	$01
0008873E E100                       	smpsAlterNote       $00
00088740 01                         	dc.b	$01
00088741 E1FB                       	smpsAlterNote       $FB
00088743 01                         	dc.b	$01
00088744 E1FD                       	smpsAlterNote       $FD
00088746 ECF5                       	smpsPSGAlterVol     $F5
00088748 9406                       	dc.b	nG1, $06
0008874A EC04                       	smpsPSGAlterVol     $04
0008874C E701                       	dc.b	smpsNoAttack, $01
0008874E EC07                       	smpsPSGAlterVol     $07
00088750 8003                       	dc.b	nRst, $03
00088752 ECF5                       	smpsPSGAlterVol     $F5
00088754 9407                       	dc.b	nG1, $07
00088756 EC0B                       	smpsPSGAlterVol     $0B
00088758 8006                       	dc.b	nRst, $06
0008875A E100                       	smpsAlterNote       $00
0008875C 01                         	dc.b	$01
0008875D E103                       	smpsAlterNote       $03
0008875F 0101                       	dc.b	$01, $01
00088761 E1FD                       	smpsAlterNote       $FD
00088763 01                         	dc.b	$01
00088764 ECF5                       	smpsPSGAlterVol     $F5
00088766 9207                       	dc.b	nF1, $07
00088768 EC0B                       	smpsPSGAlterVol     $0B
0008876A 8004                       	dc.b	nRst, $04
0008876C ECF5                       	smpsPSGAlterVol     $F5
0008876E 9206                       	dc.b	nF1, $06
00088770 EC04                       	smpsPSGAlterVol     $04
00088772 E701                       	dc.b	smpsNoAttack, $01
00088774 ECFC                       	smpsPSGAlterVol     $FC
00088776 E1FC                       	smpsAlterNote       $FC
00088778 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008877C EC04                       	smpsPSGAlterVol     $04
0008877E E701                       	dc.b	smpsNoAttack, $01
00088780 ECFC                       	smpsPSGAlterVol     $FC
00088782 9003                       	dc.b	nEb1, $03
00088784 E1FD                       	smpsAlterNote       $FD
00088786 9403                       	dc.b	nG1, $03
00088788 EC04                       	smpsPSGAlterVol     $04
0008878A E701                       	dc.b	smpsNoAttack, $01
0008878C E1FE                       	smpsAlterNote       $FE
0008878E ECFC                       	smpsPSGAlterVol     $FC
00088790 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00088794 EC04                       	smpsPSGAlterVol     $04
00088796 E701                       	dc.b	smpsNoAttack, $01
00088798 EC07                       	smpsPSGAlterVol     $07
0008879A 8009                       	dc.b	nRst, $09
0008879C E100                       	smpsAlterNote       $00
0008879E 01                         	dc.b	$01
0008879F F6F5 19                    	smpsJump            music84_Jump07
000887A2                            
000887A2                            ; PSG2 Data
000887A2                            music84_PSG2:
000887A2 E1FC                       	smpsAlterNote       $FC
000887A4 EC04                       	smpsPSGAlterVol     $04
000887A6 8F03                       	dc.b	nD1, $03
000887A8 E1FD                       	smpsAlterNote       $FD
000887AA 9203                       	dc.b	nF1, $03
000887AC EC04                       	smpsPSGAlterVol     $04
000887AE E701                       	dc.b	smpsNoAttack, $01
000887B0 E1FE                       	smpsAlterNote       $FE
000887B2 ECFC                       	smpsPSGAlterVol     $FC
000887B4 9603                       	dc.b	nA1, $03
000887B6 E1FD                       	smpsAlterNote       $FD
000887B8 9103                       	dc.b	nE1, $03
000887BA EC04                       	smpsPSGAlterVol     $04
000887BC E701                       	dc.b	smpsNoAttack, $01
000887BE ECFC                       	smpsPSGAlterVol     $FC
000887C0 9403                       	dc.b	nG1, $03
000887C2 E1FE                       	smpsAlterNote       $FE
000887C4 9703                       	dc.b	nBb1, $03
000887C6 EC04                       	smpsPSGAlterVol     $04
000887C8 E701                       	dc.b	smpsNoAttack, $01
000887CA E1FF                       	smpsAlterNote       $FF
000887CC ECFC                       	smpsPSGAlterVol     $FC
000887CE 9B02                       	dc.b	nD2, $02
000887D0 EC04                       	smpsPSGAlterVol     $04
000887D2 E701                       	dc.b	smpsNoAttack, $01
000887D4 ECFC                       	smpsPSGAlterVol     $FC
000887D6 E1FE                       	smpsAlterNote       $FE
000887D8 9A03                       	dc.b	nCs2, $03
000887DA EC0B                       	smpsPSGAlterVol     $0B
000887DC 800A                       	dc.b	nRst, $0A
000887DE E102                       	smpsAlterNote       $02
000887E0 01                         	dc.b	$01
000887E1 E10A                       	smpsAlterNote       $0A
000887E3 01                         	dc.b	$01
000887E4 E102                       	smpsAlterNote       $02
000887E6 01                         	dc.b	$01
000887E7 E1FC                       	smpsAlterNote       $FC
000887E9 01                         	dc.b	$01
000887EA E10A                       	smpsAlterNote       $0A
000887EC 01                         	dc.b	$01
000887ED E1FC                       	smpsAlterNote       $FC
000887EF 01                         	dc.b	$01
000887F0 E108                       	smpsAlterNote       $08
000887F2 01                         	dc.b	$01
000887F3 E10A                       	smpsAlterNote       $0A
000887F5 01                         	dc.b	$01
000887F6 E102                       	smpsAlterNote       $02
000887F8 01                         	dc.b	$01
000887F9 E1F7                       	smpsAlterNote       $F7
000887FB 0101                       	dc.b	$01, $01
000887FD E102                       	smpsAlterNote       $02
000887FF 01                         	dc.b	$01
00088800 E108                       	smpsAlterNote       $08
00088802 0101                       	dc.b	$01, $01
00088804 E1FC                       	smpsAlterNote       $FC
00088806 01                         	dc.b	$01
00088807 E10A                       	smpsAlterNote       $0A
00088809 01                         	dc.b	$01
0008880A E1F7                       	smpsAlterNote       $F7
0008880C 01                         	dc.b	$01
0008880D E102                       	smpsAlterNote       $02
0008880F 01                         	dc.b	$01
00088810 E10A                       	smpsAlterNote       $0A
00088812 01                         	dc.b	$01
00088813 E102                       	smpsAlterNote       $02
00088815 01                         	dc.b	$01
00088816 E1FC                       	smpsAlterNote       $FC
00088818 01                         	dc.b	$01
00088819                            
00088819                            music84_Jump06:
00088819 E10A                       	smpsAlterNote       $0A
0008881B 8001                       	dc.b	nRst, $01
0008881D E1FC                       	smpsAlterNote       $FC
0008881F 01                         	dc.b	$01
00088820 E108                       	smpsAlterNote       $08
00088822 01                         	dc.b	$01
00088823 E10A                       	smpsAlterNote       $0A
00088825 01                         	dc.b	$01
00088826 E1FC                       	smpsAlterNote       $FC
00088828 ECF5                       	smpsPSGAlterVol     $F5
0008882A 8F06                       	dc.b	nD1, $06
0008882C EC04                       	smpsPSGAlterVol     $04
0008882E E701                       	dc.b	smpsNoAttack, $01
00088830 EC07                       	smpsPSGAlterVol     $07
00088832 8003                       	dc.b	nRst, $03
00088834 ECF5                       	smpsPSGAlterVol     $F5
00088836 8F06                       	dc.b	nD1, $06
00088838 EC04                       	smpsPSGAlterVol     $04
0008883A E701                       	dc.b	smpsNoAttack, $01
0008883C EC07                       	smpsPSGAlterVol     $07
0008883E 8006                       	dc.b	nRst, $06
00088840 E1FF                       	smpsAlterNote       $FF
00088842 01                         	dc.b	$01
00088843 E102                       	smpsAlterNote       $02
00088845 01                         	dc.b	$01
00088846 E1FF                       	smpsAlterNote       $FF
00088848 01                         	dc.b	$01
00088849 E1F9                       	smpsAlterNote       $F9
0008884B 01                         	dc.b	$01
0008884C E1FC                       	smpsAlterNote       $FC
0008884E ECF5                       	smpsPSGAlterVol     $F5
00088850 9006                       	dc.b	nEb1, $06
00088852 EC04                       	smpsPSGAlterVol     $04
00088854 E701                       	dc.b	smpsNoAttack, $01
00088856 EC07                       	smpsPSGAlterVol     $07
00088858 8003                       	dc.b	nRst, $03
0008885A ECF5                       	smpsPSGAlterVol     $F5
0008885C 9007                       	dc.b	nEb1, $07
0008885E EC0B                       	smpsPSGAlterVol     $0B
00088860 8006                       	dc.b	nRst, $06
00088862 E1FF                       	smpsAlterNote       $FF
00088864 01                         	dc.b	$01
00088865 E103                       	smpsAlterNote       $03
00088867 0101                       	dc.b	$01, $01
00088869 E1FC                       	smpsAlterNote       $FC
0008886B 01                         	dc.b	$01
0008886C ECF5                       	smpsPSGAlterVol     $F5
0008886E 8F07                       	dc.b	nD1, $07
00088870 EC0B                       	smpsPSGAlterVol     $0B
00088872 8004                       	dc.b	nRst, $04
00088874 ECF5                       	smpsPSGAlterVol     $F5
00088876 8F06                       	dc.b	nD1, $06
00088878 EC04                       	smpsPSGAlterVol     $04
0008887A E701                       	dc.b	smpsNoAttack, $01
0008887C EC07                       	smpsPSGAlterVol     $07
0008887E 8006                       	dc.b	nRst, $06
00088880 E102                       	smpsAlterNote       $02
00088882 01                         	dc.b	$01
00088883 E103                       	smpsAlterNote       $03
00088885 01                         	dc.b	$01
00088886 E1FF                       	smpsAlterNote       $FF
00088888 01                         	dc.b	$01
00088889 E1F9                       	smpsAlterNote       $F9
0008888B 01                         	dc.b	$01
0008888C E1FC                       	smpsAlterNote       $FC
0008888E ECF5                       	smpsPSGAlterVol     $F5
00088890 8F06                       	dc.b	nD1, $06
00088892 EC04                       	smpsPSGAlterVol     $04
00088894 E701                       	dc.b	smpsNoAttack, $01
00088896 EC07                       	smpsPSGAlterVol     $07
00088898 8003                       	dc.b	nRst, $03
0008889A ECF5                       	smpsPSGAlterVol     $F5
0008889C 8F06                       	dc.b	nD1, $06
0008889E EC04                       	smpsPSGAlterVol     $04
000888A0 E701                       	dc.b	smpsNoAttack, $01
000888A2 EC07                       	smpsPSGAlterVol     $07
000888A4 8006                       	dc.b	nRst, $06
000888A6 E1FF                       	smpsAlterNote       $FF
000888A8 01                         	dc.b	$01
000888A9 E103                       	smpsAlterNote       $03
000888AB 01                         	dc.b	$01
000888AC E1FF                       	smpsAlterNote       $FF
000888AE 01                         	dc.b	$01
000888AF E1FC                       	smpsAlterNote       $FC
000888B1 01                         	dc.b	$01
000888B2 ECF5                       	smpsPSGAlterVol     $F5
000888B4 8F06                       	dc.b	nD1, $06
000888B6 EC04                       	smpsPSGAlterVol     $04
000888B8 E701                       	dc.b	smpsNoAttack, $01
000888BA EC07                       	smpsPSGAlterVol     $07
000888BC 8003                       	dc.b	nRst, $03
000888BE ECF5                       	smpsPSGAlterVol     $F5
000888C0 8F07                       	dc.b	nD1, $07
000888C2 EC0B                       	smpsPSGAlterVol     $0B
000888C4 8007                       	dc.b	nRst, $07
000888C6 E101                       	smpsAlterNote       $01
000888C8 0101                       	dc.b	$01, $01
000888CA E1FC                       	smpsAlterNote       $FC
000888CC 01                         	dc.b	$01
000888CD E1F9                       	smpsAlterNote       $F9
000888CF 01                         	dc.b	$01
000888D0 E1FC                       	smpsAlterNote       $FC
000888D2 ECF5                       	smpsPSGAlterVol     $F5
000888D4 9006                       	dc.b	nEb1, $06
000888D6 EC0B                       	smpsPSGAlterVol     $0B
000888D8 8004                       	dc.b	nRst, $04
000888DA ECF5                       	smpsPSGAlterVol     $F5
000888DC 9006                       	dc.b	nEb1, $06
000888DE EC04                       	smpsPSGAlterVol     $04
000888E0 E701                       	dc.b	smpsNoAttack, $01
000888E2 EC07                       	smpsPSGAlterVol     $07
000888E4 8006                       	dc.b	nRst, $06
000888E6 E100                       	smpsAlterNote       $00
000888E8 01                         	dc.b	$01
000888E9 E102                       	smpsAlterNote       $02
000888EB 01                         	dc.b	$01
000888EC E100                       	smpsAlterNote       $00
000888EE 01                         	dc.b	$01
000888EF E1FD                       	smpsAlterNote       $FD
000888F1 01                         	dc.b	$01
000888F2 E1FF                       	smpsAlterNote       $FF
000888F4 ECF5                       	smpsPSGAlterVol     $F5
000888F6 9B06                       	dc.b	nD2, $06
000888F8 EC04                       	smpsPSGAlterVol     $04
000888FA E701                       	dc.b	smpsNoAttack, $01
000888FC EC07                       	smpsPSGAlterVol     $07
000888FE 8003                       	dc.b	nRst, $03
00088900 ECF5                       	smpsPSGAlterVol     $F5
00088902 9B07                       	dc.b	nD2, $07
00088904 EC0B                       	smpsPSGAlterVol     $0B
00088906 8006                       	dc.b	nRst, $06
00088908 E102                       	smpsAlterNote       $02
0008890A 01                         	dc.b	$01
0008890B E106                       	smpsAlterNote       $06
0008890D 01                         	dc.b	$01
0008890E E105                       	smpsAlterNote       $05
00088910 01                         	dc.b	$01
00088911 E1FF                       	smpsAlterNote       $FF
00088913 01                         	dc.b	$01
00088914 ECF5                       	smpsPSGAlterVol     $F5
00088916 9B07                       	dc.b	nD2, $07
00088918 EC0B                       	smpsPSGAlterVol     $0B
0008891A 8004                       	dc.b	nRst, $04
0008891C ECF5                       	smpsPSGAlterVol     $F5
0008891E 9B06                       	dc.b	nD2, $06
00088920 EC0B                       	smpsPSGAlterVol     $0B
00088922 8007                       	dc.b	nRst, $07
00088924 E105                       	smpsAlterNote       $05
00088926 0101                       	dc.b	$01, $01
00088928 E102                       	smpsAlterNote       $02
0008892A 01                         	dc.b	$01
0008892B E1FC                       	smpsAlterNote       $FC
0008892D 01                         	dc.b	$01
0008892E E1FF                       	smpsAlterNote       $FF
00088930 ECF5                       	smpsPSGAlterVol     $F5
00088932 9B06                       	dc.b	nD2, $06
00088934 EC04                       	smpsPSGAlterVol     $04
00088936 E701                       	dc.b	smpsNoAttack, $01
00088938 EC07                       	smpsPSGAlterVol     $07
0008893A 8003                       	dc.b	nRst, $03
0008893C ECF5                       	smpsPSGAlterVol     $F5
0008893E 9B06                       	dc.b	nD2, $06
00088940 EC04                       	smpsPSGAlterVol     $04
00088942 E701                       	dc.b	smpsNoAttack, $01
00088944 EC07                       	smpsPSGAlterVol     $07
00088946 8006                       	dc.b	nRst, $06
00088948 E102                       	smpsAlterNote       $02
0008894A 01                         	dc.b	$01
0008894B E106                       	smpsAlterNote       $06
0008894D 01                         	dc.b	$01
0008894E E102                       	smpsAlterNote       $02
00088950 01                         	dc.b	$01
00088951 E1FF                       	smpsAlterNote       $FF
00088953 01                         	dc.b	$01
00088954 ECF5                       	smpsPSGAlterVol     $F5
00088956 9B06                       	dc.b	nD2, $06
00088958 EC04                       	smpsPSGAlterVol     $04
0008895A E701                       	dc.b	smpsNoAttack, $01
0008895C EC07                       	smpsPSGAlterVol     $07
0008895E 8003                       	dc.b	nRst, $03
00088960 ECF5                       	smpsPSGAlterVol     $F5
00088962 9B07                       	dc.b	nD2, $07
00088964 EC0B                       	smpsPSGAlterVol     $0B
00088966 8007                       	dc.b	nRst, $07
00088968 E105                       	smpsAlterNote       $05
0008896A 0101                       	dc.b	$01, $01
0008896C E1FF                       	smpsAlterNote       $FF
0008896E 01                         	dc.b	$01
0008896F E1FC                       	smpsAlterNote       $FC
00088971 01                         	dc.b	$01
00088972 E1FF                       	smpsAlterNote       $FF
00088974 ECF5                       	smpsPSGAlterVol     $F5
00088976 9B06                       	dc.b	nD2, $06
00088978 EC0B                       	smpsPSGAlterVol     $0B
0008897A 8004                       	dc.b	nRst, $04
0008897C ECF5                       	smpsPSGAlterVol     $F5
0008897E 9B06                       	dc.b	nD2, $06
00088980 EC04                       	smpsPSGAlterVol     $04
00088982 E701                       	dc.b	smpsNoAttack, $01
00088984 EC07                       	smpsPSGAlterVol     $07
00088986 8006                       	dc.b	nRst, $06
00088988 E105                       	smpsAlterNote       $05
0008898A 01                         	dc.b	$01
0008898B E106                       	smpsAlterNote       $06
0008898D 01                         	dc.b	$01
0008898E E102                       	smpsAlterNote       $02
00088990 01                         	dc.b	$01
00088991 E1FC                       	smpsAlterNote       $FC
00088993 01                         	dc.b	$01
00088994 E1FF                       	smpsAlterNote       $FF
00088996 ECF5                       	smpsPSGAlterVol     $F5
00088998 9B06                       	dc.b	nD2, $06
0008899A EC04                       	smpsPSGAlterVol     $04
0008899C E701                       	dc.b	smpsNoAttack, $01
0008899E EC07                       	smpsPSGAlterVol     $07
000889A0 8003                       	dc.b	nRst, $03
000889A2 ECF5                       	smpsPSGAlterVol     $F5
000889A4 9B06                       	dc.b	nD2, $06
000889A6 EC04                       	smpsPSGAlterVol     $04
000889A8 E701                       	dc.b	smpsNoAttack, $01
000889AA EC07                       	smpsPSGAlterVol     $07
000889AC 8006                       	dc.b	nRst, $06
000889AE E102                       	smpsAlterNote       $02
000889B0 01                         	dc.b	$01
000889B1 E106                       	smpsAlterNote       $06
000889B3 01                         	dc.b	$01
000889B4 E105                       	smpsAlterNote       $05
000889B6 01                         	dc.b	$01
000889B7 E1FF                       	smpsAlterNote       $FF
000889B9 01                         	dc.b	$01
000889BA ECF5                       	smpsPSGAlterVol     $F5
000889BC 9B07                       	dc.b	nD2, $07
000889BE EC0B                       	smpsPSGAlterVol     $0B
000889C0 8004                       	dc.b	nRst, $04
000889C2 ECF5                       	smpsPSGAlterVol     $F5
000889C4 9B06                       	dc.b	nD2, $06
000889C6 EC0B                       	smpsPSGAlterVol     $0B
000889C8 8007                       	dc.b	nRst, $07
000889CA E105                       	smpsAlterNote       $05
000889CC 0101                       	dc.b	$01, $01
000889CE E102                       	smpsAlterNote       $02
000889D0 01                         	dc.b	$01
000889D1 E1FC                       	smpsAlterNote       $FC
000889D3 01                         	dc.b	$01
000889D4 E1FF                       	smpsAlterNote       $FF
000889D6 ECF5                       	smpsPSGAlterVol     $F5
000889D8 9B06                       	dc.b	nD2, $06
000889DA EC04                       	smpsPSGAlterVol     $04
000889DC E701                       	dc.b	smpsNoAttack, $01
000889DE EC07                       	smpsPSGAlterVol     $07
000889E0 8003                       	dc.b	nRst, $03
000889E2 ECF5                       	smpsPSGAlterVol     $F5
000889E4 9B06                       	dc.b	nD2, $06
000889E6 EC04                       	smpsPSGAlterVol     $04
000889E8 E701                       	dc.b	smpsNoAttack, $01
000889EA EC07                       	smpsPSGAlterVol     $07
000889EC 8006                       	dc.b	nRst, $06
000889EE E102                       	smpsAlterNote       $02
000889F0 01                         	dc.b	$01
000889F1 E106                       	smpsAlterNote       $06
000889F3 01                         	dc.b	$01
000889F4 E102                       	smpsAlterNote       $02
000889F6 01                         	dc.b	$01
000889F7 E1FF                       	smpsAlterNote       $FF
000889F9 01                         	dc.b	$01
000889FA ECF5                       	smpsPSGAlterVol     $F5
000889FC 9B06                       	dc.b	nD2, $06
000889FE EC04                       	smpsPSGAlterVol     $04
00088A00 E701                       	dc.b	smpsNoAttack, $01
00088A02 EC07                       	smpsPSGAlterVol     $07
00088A04 8003                       	dc.b	nRst, $03
00088A06 ECF5                       	smpsPSGAlterVol     $F5
00088A08 9B07                       	dc.b	nD2, $07
00088A0A E1FE                       	smpsAlterNote       $FE
00088A0C 9706                       	dc.b	nBb1, $06
00088A0E EC04                       	smpsPSGAlterVol     $04
00088A10 E701                       	dc.b	smpsNoAttack, $01
00088A12 ECFC                       	smpsPSGAlterVol     $FC
00088A14 9703                       	dc.b	nBb1, $03
00088A16 EC04                       	smpsPSGAlterVol     $04
00088A18 E701                       	dc.b	smpsNoAttack, $01
00088A1A ECFC                       	smpsPSGAlterVol     $FC
00088A1C 9702                       	dc.b	nBb1, $02
00088A1E EC04                       	smpsPSGAlterVol     $04
00088A20 E701                       	dc.b	smpsNoAttack, $01
00088A22 ECFC                       	smpsPSGAlterVol     $FC
00088A24 9606                       	dc.b	nA1, $06
00088A26 EC04                       	smpsPSGAlterVol     $04
00088A28 E701                       	dc.b	smpsNoAttack, $01
00088A2A EC07                       	smpsPSGAlterVol     $07
00088A2C 8006                       	dc.b	nRst, $06
00088A2E E101                       	smpsAlterNote       $01
00088A30 01                         	dc.b	$01
00088A31 E107                       	smpsAlterNote       $07
00088A33 01                         	dc.b	$01
00088A34 E101                       	smpsAlterNote       $01
00088A36 01                         	dc.b	$01
00088A37 E1F8                       	smpsAlterNote       $F8
00088A39 01                         	dc.b	$01
00088A3A E1F7                       	smpsAlterNote       $F7
00088A3C 01                         	dc.b	$01
00088A3D E1FC                       	smpsAlterNote       $FC
00088A3F 01                         	dc.b	$01
00088A40 E106                       	smpsAlterNote       $06
00088A42 01                         	dc.b	$01
00088A43 E107                       	smpsAlterNote       $07
00088A45 01                         	dc.b	$01
00088A46 E101                       	smpsAlterNote       $01
00088A48 01                         	dc.b	$01
00088A49 E1F8                       	smpsAlterNote       $F8
00088A4B 0101                       	dc.b	$01, $01
00088A4D E1FC                       	smpsAlterNote       $FC
00088A4F ECF5                       	smpsPSGAlterVol     $F5
00088A51 8F06                       	dc.b	nD1, $06
00088A53 EC04                       	smpsPSGAlterVol     $04
00088A55 E701                       	dc.b	smpsNoAttack, $01
00088A57 EC07                       	smpsPSGAlterVol     $07
00088A59 8003                       	dc.b	nRst, $03
00088A5B ECF5                       	smpsPSGAlterVol     $F5
00088A5D 8F06                       	dc.b	nD1, $06
00088A5F EC04                       	smpsPSGAlterVol     $04
00088A61 E701                       	dc.b	smpsNoAttack, $01
00088A63 EC07                       	smpsPSGAlterVol     $07
00088A65 8006                       	dc.b	nRst, $06
00088A67 E1FF                       	smpsAlterNote       $FF
00088A69 01                         	dc.b	$01
00088A6A E102                       	smpsAlterNote       $02
00088A6C 01                         	dc.b	$01
00088A6D E101                       	smpsAlterNote       $01
00088A6F 01                         	dc.b	$01
00088A70 E1FC                       	smpsAlterNote       $FC
00088A72 01                         	dc.b	$01
00088A73 ECF5                       	smpsPSGAlterVol     $F5
00088A75 9007                       	dc.b	nEb1, $07
00088A77 EC0B                       	smpsPSGAlterVol     $0B
00088A79 8004                       	dc.b	nRst, $04
00088A7B ECF5                       	smpsPSGAlterVol     $F5
00088A7D 9006                       	dc.b	nEb1, $06
00088A7F EC0B                       	smpsPSGAlterVol     $0B
00088A81 8007                       	dc.b	nRst, $07
00088A83 E103                       	smpsAlterNote       $03
00088A85 0101                       	dc.b	$01, $01
00088A87 E1FC                       	smpsAlterNote       $FC
00088A89 01                         	dc.b	$01
00088A8A E1F9                       	smpsAlterNote       $F9
00088A8C 01                         	dc.b	$01
00088A8D E1FC                       	smpsAlterNote       $FC
00088A8F ECF5                       	smpsPSGAlterVol     $F5
00088A91 8F06                       	dc.b	nD1, $06
00088A93 EC04                       	smpsPSGAlterVol     $04
00088A95 E701                       	dc.b	smpsNoAttack, $01
00088A97 EC07                       	smpsPSGAlterVol     $07
00088A99 8003                       	dc.b	nRst, $03
00088A9B ECF5                       	smpsPSGAlterVol     $F5
00088A9D 8F06                       	dc.b	nD1, $06
00088A9F EC04                       	smpsPSGAlterVol     $04
00088AA1 E701                       	dc.b	smpsNoAttack, $01
00088AA3 EC07                       	smpsPSGAlterVol     $07
00088AA5 8006                       	dc.b	nRst, $06
00088AA7 E1FF                       	smpsAlterNote       $FF
00088AA9 01                         	dc.b	$01
00088AAA E103                       	smpsAlterNote       $03
00088AAC 01                         	dc.b	$01
00088AAD E1FF                       	smpsAlterNote       $FF
00088AAF 01                         	dc.b	$01
00088AB0 E1F9                       	smpsAlterNote       $F9
00088AB2 01                         	dc.b	$01
00088AB3 E1FC                       	smpsAlterNote       $FC
00088AB5 ECF5                       	smpsPSGAlterVol     $F5
00088AB7 8F06                       	dc.b	nD1, $06
00088AB9 EC04                       	smpsPSGAlterVol     $04
00088ABB E701                       	dc.b	smpsNoAttack, $01
00088ABD EC07                       	smpsPSGAlterVol     $07
00088ABF 8003                       	dc.b	nRst, $03
00088AC1 ECF5                       	smpsPSGAlterVol     $F5
00088AC3 8F07                       	dc.b	nD1, $07
00088AC5 EC0B                       	smpsPSGAlterVol     $0B
00088AC7 8006                       	dc.b	nRst, $06
00088AC9 E1FF                       	smpsAlterNote       $FF
00088ACB 01                         	dc.b	$01
00088ACC E102                       	smpsAlterNote       $02
00088ACE 0101                       	dc.b	$01, $01
00088AD0 E1FC                       	smpsAlterNote       $FC
00088AD2 01                         	dc.b	$01
00088AD3 ECF5                       	smpsPSGAlterVol     $F5
00088AD5 8F07                       	dc.b	nD1, $07
00088AD7 EC0B                       	smpsPSGAlterVol     $0B
00088AD9 8004                       	dc.b	nRst, $04
00088ADB ECF5                       	smpsPSGAlterVol     $F5
00088ADD 8F06                       	dc.b	nD1, $06
00088ADF EC04                       	smpsPSGAlterVol     $04
00088AE1 E701                       	dc.b	smpsNoAttack, $01
00088AE3 EC07                       	smpsPSGAlterVol     $07
00088AE5 8006                       	dc.b	nRst, $06
00088AE7 E101                       	smpsAlterNote       $01
00088AE9 01                         	dc.b	$01
00088AEA E102                       	smpsAlterNote       $02
00088AEC 01                         	dc.b	$01
00088AED E1FF                       	smpsAlterNote       $FF
00088AEF 01                         	dc.b	$01
00088AF0 E1F9                       	smpsAlterNote       $F9
00088AF2 01                         	dc.b	$01
00088AF3 E1FC                       	smpsAlterNote       $FC
00088AF5 ECF5                       	smpsPSGAlterVol     $F5
00088AF7 9006                       	dc.b	nEb1, $06
00088AF9 EC04                       	smpsPSGAlterVol     $04
00088AFB E701                       	dc.b	smpsNoAttack, $01
00088AFD EC07                       	smpsPSGAlterVol     $07
00088AFF 8003                       	dc.b	nRst, $03
00088B01 ECF5                       	smpsPSGAlterVol     $F5
00088B03 9006                       	dc.b	nEb1, $06
00088B05 EC04                       	smpsPSGAlterVol     $04
00088B07 E701                       	dc.b	smpsNoAttack, $01
00088B09 EC07                       	smpsPSGAlterVol     $07
00088B0B 8006                       	dc.b	nRst, $06
00088B0D E100                       	smpsAlterNote       $00
00088B0F 01                         	dc.b	$01
00088B10 E102                       	smpsAlterNote       $02
00088B12 01                         	dc.b	$01
00088B13 E100                       	smpsAlterNote       $00
00088B15 01                         	dc.b	$01
00088B16 E1FF                       	smpsAlterNote       $FF
00088B18 01                         	dc.b	$01
00088B19 ECF5                       	smpsPSGAlterVol     $F5
00088B1B 9B06                       	dc.b	nD2, $06
00088B1D EC04                       	smpsPSGAlterVol     $04
00088B1F E701                       	dc.b	smpsNoAttack, $01
00088B21 EC07                       	smpsPSGAlterVol     $07
00088B23 8003                       	dc.b	nRst, $03
00088B25 ECF5                       	smpsPSGAlterVol     $F5
00088B27 9B07                       	dc.b	nD2, $07
00088B29 EC0B                       	smpsPSGAlterVol     $0B
00088B2B 8007                       	dc.b	nRst, $07
00088B2D E105                       	smpsAlterNote       $05
00088B2F 0101                       	dc.b	$01, $01
00088B31 E1FF                       	smpsAlterNote       $FF
00088B33 01                         	dc.b	$01
00088B34 E1FC                       	smpsAlterNote       $FC
00088B36 01                         	dc.b	$01
00088B37 E1FF                       	smpsAlterNote       $FF
00088B39 ECF5                       	smpsPSGAlterVol     $F5
00088B3B 9B06                       	dc.b	nD2, $06
00088B3D EC0B                       	smpsPSGAlterVol     $0B
00088B3F 8004                       	dc.b	nRst, $04
00088B41 ECF5                       	smpsPSGAlterVol     $F5
00088B43 9B06                       	dc.b	nD2, $06
00088B45 EC04                       	smpsPSGAlterVol     $04
00088B47 E701                       	dc.b	smpsNoAttack, $01
00088B49 EC07                       	smpsPSGAlterVol     $07
00088B4B 8006                       	dc.b	nRst, $06
00088B4D E102                       	smpsAlterNote       $02
00088B4F 01                         	dc.b	$01
00088B50 E106                       	smpsAlterNote       $06
00088B52 01                         	dc.b	$01
00088B53 E102                       	smpsAlterNote       $02
00088B55 01                         	dc.b	$01
00088B56 E1FC                       	smpsAlterNote       $FC
00088B58 01                         	dc.b	$01
00088B59 E1FF                       	smpsAlterNote       $FF
00088B5B ECF5                       	smpsPSGAlterVol     $F5
00088B5D 9B06                       	dc.b	nD2, $06
00088B5F EC04                       	smpsPSGAlterVol     $04
00088B61 E701                       	dc.b	smpsNoAttack, $01
00088B63 EC07                       	smpsPSGAlterVol     $07
00088B65 8003                       	dc.b	nRst, $03
00088B67 ECF5                       	smpsPSGAlterVol     $F5
00088B69 9B07                       	dc.b	nD2, $07
00088B6B EC0B                       	smpsPSGAlterVol     $0B
00088B6D 8006                       	dc.b	nRst, $06
00088B6F E102                       	smpsAlterNote       $02
00088B71 01                         	dc.b	$01
00088B72 E105                       	smpsAlterNote       $05
00088B74 0101                       	dc.b	$01, $01
00088B76 E1FF                       	smpsAlterNote       $FF
00088B78 01                         	dc.b	$01
00088B79 ECF5                       	smpsPSGAlterVol     $F5
00088B7B 9B07                       	dc.b	nD2, $07
00088B7D EC0B                       	smpsPSGAlterVol     $0B
00088B7F 8004                       	dc.b	nRst, $04
00088B81 ECF5                       	smpsPSGAlterVol     $F5
00088B83 9B06                       	dc.b	nD2, $06
00088B85 EC0B                       	smpsPSGAlterVol     $0B
00088B87 8007                       	dc.b	nRst, $07
00088B89 E105                       	smpsAlterNote       $05
00088B8B 0101                       	dc.b	$01, $01
00088B8D E102                       	smpsAlterNote       $02
00088B8F 01                         	dc.b	$01
00088B90 E1FC                       	smpsAlterNote       $FC
00088B92 01                         	dc.b	$01
00088B93 E1FF                       	smpsAlterNote       $FF
00088B95 ECF5                       	smpsPSGAlterVol     $F5
00088B97 9B06                       	dc.b	nD2, $06
00088B99 EC04                       	smpsPSGAlterVol     $04
00088B9B E701                       	dc.b	smpsNoAttack, $01
00088B9D EC07                       	smpsPSGAlterVol     $07
00088B9F 8003                       	dc.b	nRst, $03
00088BA1 ECF5                       	smpsPSGAlterVol     $F5
00088BA3 9B06                       	dc.b	nD2, $06
00088BA5 EC04                       	smpsPSGAlterVol     $04
00088BA7 E701                       	dc.b	smpsNoAttack, $01
00088BA9 EC07                       	smpsPSGAlterVol     $07
00088BAB 8006                       	dc.b	nRst, $06
00088BAD E102                       	smpsAlterNote       $02
00088BAF 01                         	dc.b	$01
00088BB0 E106                       	smpsAlterNote       $06
00088BB2 01                         	dc.b	$01
00088BB3 E102                       	smpsAlterNote       $02
00088BB5 01                         	dc.b	$01
00088BB6 E1FF                       	smpsAlterNote       $FF
00088BB8 01                         	dc.b	$01
00088BB9 ECF5                       	smpsPSGAlterVol     $F5
00088BBB 9B06                       	dc.b	nD2, $06
00088BBD EC04                       	smpsPSGAlterVol     $04
00088BBF E701                       	dc.b	smpsNoAttack, $01
00088BC1 EC07                       	smpsPSGAlterVol     $07
00088BC3 8003                       	dc.b	nRst, $03
00088BC5 ECF5                       	smpsPSGAlterVol     $F5
00088BC7 9B07                       	dc.b	nD2, $07
00088BC9 EC0B                       	smpsPSGAlterVol     $0B
00088BCB 8007                       	dc.b	nRst, $07
00088BCD E105                       	smpsAlterNote       $05
00088BCF 0101                       	dc.b	$01, $01
00088BD1 E1FF                       	smpsAlterNote       $FF
00088BD3 01                         	dc.b	$01
00088BD4 E1FC                       	smpsAlterNote       $FC
00088BD6 01                         	dc.b	$01
00088BD7 E1FF                       	smpsAlterNote       $FF
00088BD9 ECF5                       	smpsPSGAlterVol     $F5
00088BDB 9B06                       	dc.b	nD2, $06
00088BDD EC0B                       	smpsPSGAlterVol     $0B
00088BDF 8004                       	dc.b	nRst, $04
00088BE1 ECF5                       	smpsPSGAlterVol     $F5
00088BE3 9B06                       	dc.b	nD2, $06
00088BE5 EC04                       	smpsPSGAlterVol     $04
00088BE7 E701                       	dc.b	smpsNoAttack, $01
00088BE9 EC07                       	smpsPSGAlterVol     $07
00088BEB 8006                       	dc.b	nRst, $06
00088BED E102                       	smpsAlterNote       $02
00088BEF 01                         	dc.b	$01
00088BF0 E106                       	smpsAlterNote       $06
00088BF2 01                         	dc.b	$01
00088BF3 E102                       	smpsAlterNote       $02
00088BF5 01                         	dc.b	$01
00088BF6 E1FC                       	smpsAlterNote       $FC
00088BF8 01                         	dc.b	$01
00088BF9 E1FF                       	smpsAlterNote       $FF
00088BFB ECF5                       	smpsPSGAlterVol     $F5
00088BFD 9B06                       	dc.b	nD2, $06
00088BFF EC04                       	smpsPSGAlterVol     $04
00088C01 E701                       	dc.b	smpsNoAttack, $01
00088C03 EC07                       	smpsPSGAlterVol     $07
00088C05 8003                       	dc.b	nRst, $03
00088C07 ECF5                       	smpsPSGAlterVol     $F5
00088C09 9B06                       	dc.b	nD2, $06
00088C0B EC04                       	smpsPSGAlterVol     $04
00088C0D E701                       	dc.b	smpsNoAttack, $01
00088C0F EC07                       	smpsPSGAlterVol     $07
00088C11 8006                       	dc.b	nRst, $06
00088C13 E102                       	smpsAlterNote       $02
00088C15 01                         	dc.b	$01
00088C16 E106                       	smpsAlterNote       $06
00088C18 01                         	dc.b	$01
00088C19 E105                       	smpsAlterNote       $05
00088C1B 01                         	dc.b	$01
00088C1C E1FF                       	smpsAlterNote       $FF
00088C1E 01                         	dc.b	$01
00088C1F ECF5                       	smpsPSGAlterVol     $F5
00088C21 9B07                       	dc.b	nD2, $07
00088C23 EC0B                       	smpsPSGAlterVol     $0B
00088C25 8004                       	dc.b	nRst, $04
00088C27 ECF5                       	smpsPSGAlterVol     $F5
00088C29 9B06                       	dc.b	nD2, $06
00088C2B EC0B                       	smpsPSGAlterVol     $0B
00088C2D 8007                       	dc.b	nRst, $07
00088C2F E105                       	smpsAlterNote       $05
00088C31 0101                       	dc.b	$01, $01
00088C33 E101                       	smpsAlterNote       $01
00088C35 01                         	dc.b	$01
00088C36 E1FB                       	smpsAlterNote       $FB
00088C38 01                         	dc.b	$01
00088C39 E1FE                       	smpsAlterNote       $FE
00088C3B ECF5                       	smpsPSGAlterVol     $F5
00088C3D 9A06                       	dc.b	nCs2, $06
00088C3F EC04                       	smpsPSGAlterVol     $04
00088C41 E701                       	dc.b	smpsNoAttack, $01
00088C43 EC07                       	smpsPSGAlterVol     $07
00088C45 8003                       	dc.b	nRst, $03
00088C47 ECF5                       	smpsPSGAlterVol     $F5
00088C49 9A06                       	dc.b	nCs2, $06
00088C4B EC04                       	smpsPSGAlterVol     $04
00088C4D E701                       	dc.b	smpsNoAttack, $01
00088C4F EC07                       	smpsPSGAlterVol     $07
00088C51 8003                       	dc.b	nRst, $03
00088C53 E1FC                       	smpsAlterNote       $FC
00088C55 ECF5                       	smpsPSGAlterVol     $F5
00088C57 8F07                       	dc.b	nD1, $07
00088C59 EC0B                       	smpsPSGAlterVol     $0B
00088C5B 8006                       	dc.b	nRst, $06
00088C5D E1FF                       	smpsAlterNote       $FF
00088C5F 01                         	dc.b	$01
00088C60 E103                       	smpsAlterNote       $03
00088C62 01                         	dc.b	$01
00088C63 E102                       	smpsAlterNote       $02
00088C65 01                         	dc.b	$01
00088C66 E1FC                       	smpsAlterNote       $FC
00088C68 01                         	dc.b	$01
00088C69 E1F8                       	smpsAlterNote       $F8
00088C6B 01                         	dc.b	$01
00088C6C E1FC                       	smpsAlterNote       $FC
00088C6E 01                         	dc.b	$01
00088C6F E1FF                       	smpsAlterNote       $FF
00088C71 01                         	dc.b	$01
00088C72 E103                       	smpsAlterNote       $03
00088C74 01                         	dc.b	$01
00088C75 E1FC                       	smpsAlterNote       $FC
00088C77 ECF5                       	smpsPSGAlterVol     $F5
00088C79 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00088C7D EC04                       	smpsPSGAlterVol     $04
00088C7F E701                       	dc.b	smpsNoAttack, $01
00088C81 EC07                       	smpsPSGAlterVol     $07
00088C83 8009                       	dc.b	nRst, $09
00088C85 E1FF                       	smpsAlterNote       $FF
00088C87 01                         	dc.b	$01
00088C88 E103                       	smpsAlterNote       $03
00088C8A 01                         	dc.b	$01
00088C8B E102                       	smpsAlterNote       $02
00088C8D 01                         	dc.b	$01
00088C8E E1FC                       	smpsAlterNote       $FC
00088C90 01                         	dc.b	$01
00088C91 E1F8                       	smpsAlterNote       $F8
00088C93 01                         	dc.b	$01
00088C94 E1FC                       	smpsAlterNote       $FC
00088C96 01                         	dc.b	$01
00088C97 E1FF                       	smpsAlterNote       $FF
00088C99 01                         	dc.b	$01
00088C9A E103                       	smpsAlterNote       $03
00088C9C 01                         	dc.b	$01
00088C9D E1FF                       	smpsAlterNote       $FF
00088C9F 01                         	dc.b	$01
00088CA0 E1F9                       	smpsAlterNote       $F9
00088CA2 01                         	dc.b	$01
00088CA3 E1F8                       	smpsAlterNote       $F8
00088CA5 01                         	dc.b	$01
00088CA6 E1FC                       	smpsAlterNote       $FC
00088CA8 01                         	dc.b	$01
00088CA9 E102                       	smpsAlterNote       $02
00088CAB 0101                       	dc.b	$01, $01
00088CAD E1FF                       	smpsAlterNote       $FF
00088CAF 01                         	dc.b	$01
00088CB0 E1FC                       	smpsAlterNote       $FC
00088CB2 ECF5                       	smpsPSGAlterVol     $F5
00088CB4 8F02                       	dc.b	nD1, $02
00088CB6 EC04                       	smpsPSGAlterVol     $04
00088CB8 E701                       	dc.b	smpsNoAttack, $01
00088CBA ECFC                       	smpsPSGAlterVol     $FC
00088CBC E1FB                       	smpsAlterNote       $FB
00088CBE 8D06                       	dc.b	nC1, $06
00088CC0 EC04                       	smpsPSGAlterVol     $04
00088CC2 E701                       	dc.b	smpsNoAttack, $01
00088CC4 EC07                       	smpsPSGAlterVol     $07
00088CC6 8006                       	dc.b	nRst, $06
00088CC8 E1FE                       	smpsAlterNote       $FE
00088CCA 01                         	dc.b	$01
00088CCB E102                       	smpsAlterNote       $02
00088CCD 01                         	dc.b	$01
00088CCE E1FE                       	smpsAlterNote       $FE
00088CD0 01                         	dc.b	$01
00088CD1 E1FB                       	smpsAlterNote       $FB
00088CD3 01                         	dc.b	$01
00088CD4 E1F7                       	smpsAlterNote       $F7
00088CD6 01                         	dc.b	$01
00088CD7 E1FB                       	smpsAlterNote       $FB
00088CD9 01                         	dc.b	$01
00088CDA E101                       	smpsAlterNote       $01
00088CDC 01                         	dc.b	$01
00088CDD E102                       	smpsAlterNote       $02
00088CDF 01                         	dc.b	$01
00088CE0 E1FB                       	smpsAlterNote       $FB
00088CE2 ECF5                       	smpsPSGAlterVol     $F5
00088CE4 8D02                       	dc.b	nC1, $02
00088CE6 EC04                       	smpsPSGAlterVol     $04
00088CE8 E701                       	dc.b	smpsNoAttack, $01
00088CEA E1FC                       	smpsAlterNote       $FC
00088CEC ECFC                       	smpsPSGAlterVol     $FC
00088CEE 8F0D                       	dc.b	nD1, $0D
00088CF0 E1FF                       	smpsAlterNote       $FF
00088CF2 E701                       	dc.b	smpsNoAttack, $01
00088CF4 E103                       	smpsAlterNote       $03
00088CF6 E701                       	dc.b	smpsNoAttack, $01
00088CF8 E1FF                       	smpsAlterNote       $FF
00088CFA E701                       	dc.b	smpsNoAttack, $01
00088CFC E1FC                       	smpsAlterNote       $FC
00088CFE E701                       	dc.b	smpsNoAttack, $01
00088D00 E1F8                       	smpsAlterNote       $F8
00088D02 E701                       	dc.b	smpsNoAttack, $01
00088D04 E1FC                       	smpsAlterNote       $FC
00088D06 E701                       	dc.b	smpsNoAttack, $01
00088D08 E102                       	smpsAlterNote       $02
00088D0A E701                       	dc.b	smpsNoAttack, $01
00088D0C E103                       	smpsAlterNote       $03
00088D0E E701                       	dc.b	smpsNoAttack, $01
00088D10 E1FF                       	smpsAlterNote       $FF
00088D12 E701                       	dc.b	smpsNoAttack, $01
00088D14 E1F9                       	smpsAlterNote       $F9
00088D16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D1A E1FC                       	smpsAlterNote       $FC
00088D1C E701                       	dc.b	smpsNoAttack, $01
00088D1E E102                       	smpsAlterNote       $02
00088D20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D24 E1FC                       	smpsAlterNote       $FC
00088D26 E701                       	dc.b	smpsNoAttack, $01
00088D28 E1F9                       	smpsAlterNote       $F9
00088D2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D2E E1FF                       	smpsAlterNote       $FF
00088D30 EC04                       	smpsPSGAlterVol     $04
00088D32 E701                       	dc.b	smpsNoAttack, $01
00088D34 EC07                       	smpsPSGAlterVol     $07
00088D36 E103                       	smpsAlterNote       $03
00088D38 8001                       	dc.b	nRst, $01
00088D3A E102                       	smpsAlterNote       $02
00088D3C 01                         	dc.b	$01
00088D3D E1FB                       	smpsAlterNote       $FB
00088D3F 01                         	dc.b	$01
00088D40 E1F7                       	smpsAlterNote       $F7
00088D42 01                         	dc.b	$01
00088D43 E1FB                       	smpsAlterNote       $FB
00088D45 01                         	dc.b	$01
00088D46 E102                       	smpsAlterNote       $02
00088D48 01                         	dc.b	$01
00088D49 E103                       	smpsAlterNote       $03
00088D4B 01                         	dc.b	$01
00088D4C E1FB                       	smpsAlterNote       $FB
00088D4E ECF5                       	smpsPSGAlterVol     $F5
00088D50 8E06                       	dc.b	nCs1, $06
00088D52 EC04                       	smpsPSGAlterVol     $04
00088D54 E701                       	dc.b	smpsNoAttack, $01
00088D56 EC07                       	smpsPSGAlterVol     $07
00088D58 8003                       	dc.b	nRst, $03
00088D5A ECF5                       	smpsPSGAlterVol     $F5
00088D5C 8E06                       	dc.b	nCs1, $06
00088D5E EC04                       	smpsPSGAlterVol     $04
00088D60 E701                       	dc.b	smpsNoAttack, $01
00088D62 EC07                       	smpsPSGAlterVol     $07
00088D64 8006                       	dc.b	nRst, $06
00088D66 E1FE                       	smpsAlterNote       $FE
00088D68 01                         	dc.b	$01
00088D69 E102                       	smpsAlterNote       $02
00088D6B 01                         	dc.b	$01
00088D6C E1FE                       	smpsAlterNote       $FE
00088D6E 01                         	dc.b	$01
00088D6F E1F9                       	smpsAlterNote       $F9
00088D71 01                         	dc.b	$01
00088D72 E1FC                       	smpsAlterNote       $FC
00088D74 ECF5                       	smpsPSGAlterVol     $F5
00088D76 8F06                       	dc.b	nD1, $06
00088D78 EC04                       	smpsPSGAlterVol     $04
00088D7A E701                       	dc.b	smpsNoAttack, $01
00088D7C EC07                       	smpsPSGAlterVol     $07
00088D7E 8003                       	dc.b	nRst, $03
00088D80 ECF5                       	smpsPSGAlterVol     $F5
00088D82 8F07                       	dc.b	nD1, $07
00088D84 EC0B                       	smpsPSGAlterVol     $0B
00088D86 8006                       	dc.b	nRst, $06
00088D88 E1FF                       	smpsAlterNote       $FF
00088D8A 01                         	dc.b	$01
00088D8B E102                       	smpsAlterNote       $02
00088D8D 0101                       	dc.b	$01, $01
00088D8F E1FB                       	smpsAlterNote       $FB
00088D91 01                         	dc.b	$01
00088D92 ECF5                       	smpsPSGAlterVol     $F5
00088D94 8E07                       	dc.b	nCs1, $07
00088D96 EC0B                       	smpsPSGAlterVol     $0B
00088D98 8004                       	dc.b	nRst, $04
00088D9A ECF5                       	smpsPSGAlterVol     $F5
00088D9C 8E06                       	dc.b	nCs1, $06
00088D9E EC04                       	smpsPSGAlterVol     $04
00088DA0 E701                       	dc.b	smpsNoAttack, $01
00088DA2 EC07                       	smpsPSGAlterVol     $07
00088DA4 8006                       	dc.b	nRst, $06
00088DA6 E101                       	smpsAlterNote       $01
00088DA8 01                         	dc.b	$01
00088DA9 E102                       	smpsAlterNote       $02
00088DAB 01                         	dc.b	$01
00088DAC E1FE                       	smpsAlterNote       $FE
00088DAE 01                         	dc.b	$01
00088DAF E1F8                       	smpsAlterNote       $F8
00088DB1 01                         	dc.b	$01
00088DB2 E1FB                       	smpsAlterNote       $FB
00088DB4 ECF5                       	smpsPSGAlterVol     $F5
00088DB6 8E06                       	dc.b	nCs1, $06
00088DB8 EC04                       	smpsPSGAlterVol     $04
00088DBA E701                       	dc.b	smpsNoAttack, $01
00088DBC EC07                       	smpsPSGAlterVol     $07
00088DBE 8003                       	dc.b	nRst, $03
00088DC0 ECF5                       	smpsPSGAlterVol     $F5
00088DC2 8E06                       	dc.b	nCs1, $06
00088DC4 EC04                       	smpsPSGAlterVol     $04
00088DC6 E701                       	dc.b	smpsNoAttack, $01
00088DC8 EC07                       	smpsPSGAlterVol     $07
00088DCA 8004                       	dc.b	nRst, $04
00088DCC E1FC                       	smpsAlterNote       $FC
00088DCE ECF5                       	smpsPSGAlterVol     $F5
00088DD0 8F06                       	dc.b	nD1, $06
00088DD2 EC0B                       	smpsPSGAlterVol     $0B
00088DD4 8006                       	dc.b	nRst, $06
00088DD6 E1FF                       	smpsAlterNote       $FF
00088DD8 01                         	dc.b	$01
00088DD9 E102                       	smpsAlterNote       $02
00088DDB 0101                       	dc.b	$01, $01
00088DDD E1FC                       	smpsAlterNote       $FC
00088DDF 01                         	dc.b	$01
00088DE0 E1F8                       	smpsAlterNote       $F8
00088DE2 01                         	dc.b	$01
00088DE3 E1F9                       	smpsAlterNote       $F9
00088DE5 01                         	dc.b	$01
00088DE6 E1FF                       	smpsAlterNote       $FF
00088DE8 01                         	dc.b	$01
00088DE9 E103                       	smpsAlterNote       $03
00088DEB 01                         	dc.b	$01
00088DEC E1FC                       	smpsAlterNote       $FC
00088DEE ECF5                       	smpsPSGAlterVol     $F5
00088DF0 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00088DF4 EC04                       	smpsPSGAlterVol     $04
00088DF6 E701                       	dc.b	smpsNoAttack, $01
00088DF8 EC07                       	smpsPSGAlterVol     $07
00088DFA 8009                       	dc.b	nRst, $09
00088DFC E1FF                       	smpsAlterNote       $FF
00088DFE 01                         	dc.b	$01
00088DFF E102                       	smpsAlterNote       $02
00088E01 0101                       	dc.b	$01, $01
00088E03 E1FC                       	smpsAlterNote       $FC
00088E05 01                         	dc.b	$01
00088E06 E1F8                       	smpsAlterNote       $F8
00088E08 01                         	dc.b	$01
00088E09 E1F9                       	smpsAlterNote       $F9
00088E0B 01                         	dc.b	$01
00088E0C E1FF                       	smpsAlterNote       $FF
00088E0E 01                         	dc.b	$01
00088E0F E103                       	smpsAlterNote       $03
00088E11 01                         	dc.b	$01
00088E12 E1FF                       	smpsAlterNote       $FF
00088E14 01                         	dc.b	$01
00088E15 E1FC                       	smpsAlterNote       $FC
00088E17 01                         	dc.b	$01
00088E18 E1F8                       	smpsAlterNote       $F8
00088E1A 01                         	dc.b	$01
00088E1B E1FC                       	smpsAlterNote       $FC
00088E1D 01                         	dc.b	$01
00088E1E E102                       	smpsAlterNote       $02
00088E20 01                         	dc.b	$01
00088E21 E103                       	smpsAlterNote       $03
00088E23 01                         	dc.b	$01
00088E24 E1FF                       	smpsAlterNote       $FF
00088E26 01                         	dc.b	$01
00088E27 E1FC                       	smpsAlterNote       $FC
00088E29 ECF5                       	smpsPSGAlterVol     $F5
00088E2B 8F03                       	dc.b	nD1, $03
00088E2D E1FB                       	smpsAlterNote       $FB
00088E2F 8D06                       	dc.b	nC1, $06
00088E31 EC04                       	smpsPSGAlterVol     $04
00088E33 E701                       	dc.b	smpsNoAttack, $01
00088E35 EC07                       	smpsPSGAlterVol     $07
00088E37 8006                       	dc.b	nRst, $06
00088E39 E1FE                       	smpsAlterNote       $FE
00088E3B 01                         	dc.b	$01
00088E3C E102                       	smpsAlterNote       $02
00088E3E 01                         	dc.b	$01
00088E3F E101                       	smpsAlterNote       $01
00088E41 01                         	dc.b	$01
00088E42 E1FB                       	smpsAlterNote       $FB
00088E44 01                         	dc.b	$01
00088E45 E1F7                       	smpsAlterNote       $F7
00088E47 01                         	dc.b	$01
00088E48 E1FB                       	smpsAlterNote       $FB
00088E4A 01                         	dc.b	$01
00088E4B E1FE                       	smpsAlterNote       $FE
00088E4D 01                         	dc.b	$01
00088E4E E102                       	smpsAlterNote       $02
00088E50 01                         	dc.b	$01
00088E51 E1FB                       	smpsAlterNote       $FB
00088E53 ECF5                       	smpsPSGAlterVol     $F5
00088E55 8D03                       	dc.b	nC1, $03
00088E57 E1FC                       	smpsAlterNote       $FC
00088E59 8F0D                       	dc.b	nD1, $0D
00088E5B E1FF                       	smpsAlterNote       $FF
00088E5D E701                       	dc.b	smpsNoAttack, $01
00088E5F E103                       	smpsAlterNote       $03
00088E61 E701                       	dc.b	smpsNoAttack, $01
00088E63 E1FF                       	smpsAlterNote       $FF
00088E65 E701                       	dc.b	smpsNoAttack, $01
00088E67 E1FC                       	smpsAlterNote       $FC
00088E69 E701                       	dc.b	smpsNoAttack, $01
00088E6B E1F8                       	smpsAlterNote       $F8
00088E6D E701                       	dc.b	smpsNoAttack, $01
00088E6F E1FC                       	smpsAlterNote       $FC
00088E71 E701                       	dc.b	smpsNoAttack, $01
00088E73 E102                       	smpsAlterNote       $02
00088E75 E701                       	dc.b	smpsNoAttack, $01
00088E77 E103                       	smpsAlterNote       $03
00088E79 E701                       	dc.b	smpsNoAttack, $01
00088E7B E1FF                       	smpsAlterNote       $FF
00088E7D E701                       	dc.b	smpsNoAttack, $01
00088E7F E1F9                       	smpsAlterNote       $F9
00088E81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E85 E1FC                       	smpsAlterNote       $FC
00088E87 E701                       	dc.b	smpsNoAttack, $01
00088E89 E102                       	smpsAlterNote       $02
00088E8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E8F E1FF                       	smpsAlterNote       $FF
00088E91 E701                       	dc.b	smpsNoAttack, $01
00088E93 E1F9                       	smpsAlterNote       $F9
00088E95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E99 E1FF                       	smpsAlterNote       $FF
00088E9B EC04                       	smpsPSGAlterVol     $04
00088E9D E701                       	dc.b	smpsNoAttack, $01
00088E9F EC07                       	smpsPSGAlterVol     $07
00088EA1 E103                       	smpsAlterNote       $03
00088EA3 8001                       	dc.b	nRst, $01
00088EA5 E102                       	smpsAlterNote       $02
00088EA7 01                         	dc.b	$01
00088EA8 E1FB                       	smpsAlterNote       $FB
00088EAA 01                         	dc.b	$01
00088EAB E1F7                       	smpsAlterNote       $F7
00088EAD 01                         	dc.b	$01
00088EAE E1FB                       	smpsAlterNote       $FB
00088EB0 01                         	dc.b	$01
00088EB1 E1FF                       	smpsAlterNote       $FF
00088EB3 01                         	dc.b	$01
00088EB4 E103                       	smpsAlterNote       $03
00088EB6 01                         	dc.b	$01
00088EB7 E1FB                       	smpsAlterNote       $FB
00088EB9 ECF5                       	smpsPSGAlterVol     $F5
00088EBB 8E06                       	dc.b	nCs1, $06
00088EBD EC04                       	smpsPSGAlterVol     $04
00088EBF E701                       	dc.b	smpsNoAttack, $01
00088EC1 EC07                       	smpsPSGAlterVol     $07
00088EC3 8003                       	dc.b	nRst, $03
00088EC5 ECF5                       	smpsPSGAlterVol     $F5
00088EC7 8E06                       	dc.b	nCs1, $06
00088EC9 EC04                       	smpsPSGAlterVol     $04
00088ECB E701                       	dc.b	smpsNoAttack, $01
00088ECD EC07                       	smpsPSGAlterVol     $07
00088ECF 8006                       	dc.b	nRst, $06
00088ED1 E1FE                       	smpsAlterNote       $FE
00088ED3 01                         	dc.b	$01
00088ED4 E102                       	smpsAlterNote       $02
00088ED6 01                         	dc.b	$01
00088ED7 E1FE                       	smpsAlterNote       $FE
00088ED9 01                         	dc.b	$01
00088EDA E1FC                       	smpsAlterNote       $FC
00088EDC 01                         	dc.b	$01
00088EDD ECF5                       	smpsPSGAlterVol     $F5
00088EDF 8F06                       	dc.b	nD1, $06
00088EE1 EC04                       	smpsPSGAlterVol     $04
00088EE3 E701                       	dc.b	smpsNoAttack, $01
00088EE5 EC07                       	smpsPSGAlterVol     $07
00088EE7 8003                       	dc.b	nRst, $03
00088EE9 ECF5                       	smpsPSGAlterVol     $F5
00088EEB 8F07                       	dc.b	nD1, $07
00088EED EC0B                       	smpsPSGAlterVol     $0B
00088EEF 8007                       	dc.b	nRst, $07
00088EF1 E102                       	smpsAlterNote       $02
00088EF3 0101                       	dc.b	$01, $01
00088EF5 E1FB                       	smpsAlterNote       $FB
00088EF7 01                         	dc.b	$01
00088EF8 E1F8                       	smpsAlterNote       $F8
00088EFA 01                         	dc.b	$01
00088EFB E1FB                       	smpsAlterNote       $FB
00088EFD ECF5                       	smpsPSGAlterVol     $F5
00088EFF 8E06                       	dc.b	nCs1, $06
00088F01 EC0B                       	smpsPSGAlterVol     $0B
00088F03 8004                       	dc.b	nRst, $04
00088F05 ECF5                       	smpsPSGAlterVol     $F5
00088F07 8E06                       	dc.b	nCs1, $06
00088F09 EC04                       	smpsPSGAlterVol     $04
00088F0B E701                       	dc.b	smpsNoAttack, $01
00088F0D EC07                       	smpsPSGAlterVol     $07
00088F0F 8006                       	dc.b	nRst, $06
00088F11 E1FE                       	smpsAlterNote       $FE
00088F13 01                         	dc.b	$01
00088F14 E102                       	smpsAlterNote       $02
00088F16 01                         	dc.b	$01
00088F17 E1FE                       	smpsAlterNote       $FE
00088F19 01                         	dc.b	$01
00088F1A E1F9                       	smpsAlterNote       $F9
00088F1C 01                         	dc.b	$01
00088F1D E1FC                       	smpsAlterNote       $FC
00088F1F ECF5                       	smpsPSGAlterVol     $F5
00088F21 8F06                       	dc.b	nD1, $06
00088F23 EC04                       	smpsPSGAlterVol     $04
00088F25 E701                       	dc.b	smpsNoAttack, $01
00088F27 EC07                       	smpsPSGAlterVol     $07
00088F29 8003                       	dc.b	nRst, $03
00088F2B ECF5                       	smpsPSGAlterVol     $F5
00088F2D 8F06                       	dc.b	nD1, $06
00088F2F EC04                       	smpsPSGAlterVol     $04
00088F31 E701                       	dc.b	smpsNoAttack, $01
00088F33 EC07                       	smpsPSGAlterVol     $07
00088F35 8006                       	dc.b	nRst, $06
00088F37 E1FF                       	smpsAlterNote       $FF
00088F39 01                         	dc.b	$01
00088F3A E103                       	smpsAlterNote       $03
00088F3C 01                         	dc.b	$01
00088F3D E102                       	smpsAlterNote       $02
00088F3F 01                         	dc.b	$01
00088F40 E1FB                       	smpsAlterNote       $FB
00088F42 01                         	dc.b	$01
00088F43 ECF5                       	smpsPSGAlterVol     $F5
00088F45 8E07                       	dc.b	nCs1, $07
00088F47 EC0B                       	smpsPSGAlterVol     $0B
00088F49 8004                       	dc.b	nRst, $04
00088F4B ECF5                       	smpsPSGAlterVol     $F5
00088F4D 8E06                       	dc.b	nCs1, $06
00088F4F EC0B                       	smpsPSGAlterVol     $0B
00088F51 8007                       	dc.b	nRst, $07
00088F53 E101                       	smpsAlterNote       $01
00088F55 0101                       	dc.b	$01, $01
00088F57 E1FE                       	smpsAlterNote       $FE
00088F59 01                         	dc.b	$01
00088F5A E1F9                       	smpsAlterNote       $F9
00088F5C 01                         	dc.b	$01
00088F5D E1FC                       	smpsAlterNote       $FC
00088F5F ECF5                       	smpsPSGAlterVol     $F5
00088F61 8F06                       	dc.b	nD1, $06
00088F63 EC04                       	smpsPSGAlterVol     $04
00088F65 E701                       	dc.b	smpsNoAttack, $01
00088F67 EC07                       	smpsPSGAlterVol     $07
00088F69 8003                       	dc.b	nRst, $03
00088F6B ECF5                       	smpsPSGAlterVol     $F5
00088F6D 8F06                       	dc.b	nD1, $06
00088F6F EC04                       	smpsPSGAlterVol     $04
00088F71 E701                       	dc.b	smpsNoAttack, $01
00088F73 EC07                       	smpsPSGAlterVol     $07
00088F75 8006                       	dc.b	nRst, $06
00088F77 E1FF                       	smpsAlterNote       $FF
00088F79 01                         	dc.b	$01
00088F7A E103                       	smpsAlterNote       $03
00088F7C 01                         	dc.b	$01
00088F7D E1FF                       	smpsAlterNote       $FF
00088F7F 01                         	dc.b	$01
00088F80 E1FB                       	smpsAlterNote       $FB
00088F82 01                         	dc.b	$01
00088F83 ECF5                       	smpsPSGAlterVol     $F5
00088F85 8E06                       	dc.b	nCs1, $06
00088F87 EC04                       	smpsPSGAlterVol     $04
00088F89 E701                       	dc.b	smpsNoAttack, $01
00088F8B EC07                       	smpsPSGAlterVol     $07
00088F8D 8003                       	dc.b	nRst, $03
00088F8F ECF5                       	smpsPSGAlterVol     $F5
00088F91 8E07                       	dc.b	nCs1, $07
00088F93 E1FF                       	smpsAlterNote       $FF
00088F95 9B06                       	dc.b	nD2, $06
00088F97 EC04                       	smpsPSGAlterVol     $04
00088F99 E701                       	dc.b	smpsNoAttack, $01
00088F9B ECFC                       	smpsPSGAlterVol     $FC
00088F9D 9B03                       	dc.b	nD2, $03
00088F9F EC04                       	smpsPSGAlterVol     $04
00088FA1 E701                       	dc.b	smpsNoAttack, $01
00088FA3 ECFC                       	smpsPSGAlterVol     $FC
00088FA5 9B02                       	dc.b	nD2, $02
00088FA7 EC04                       	smpsPSGAlterVol     $04
00088FA9 E701                       	dc.b	smpsNoAttack, $01
00088FAB ECFC                       	smpsPSGAlterVol     $FC
00088FAD E1FE                       	smpsAlterNote       $FE
00088FAF 9A03                       	dc.b	nCs2, $03
00088FB1 EC0B                       	smpsPSGAlterVol     $0B
00088FB3 800A                       	dc.b	nRst, $0A
00088FB5 E102                       	smpsAlterNote       $02
00088FB7 01                         	dc.b	$01
00088FB8 E10A                       	smpsAlterNote       $0A
00088FBA 01                         	dc.b	$01
00088FBB E102                       	smpsAlterNote       $02
00088FBD 01                         	dc.b	$01
00088FBE E1F7                       	smpsAlterNote       $F7
00088FC0 01                         	dc.b	$01
00088FC1 E10A                       	smpsAlterNote       $0A
00088FC3 01                         	dc.b	$01
00088FC4 E1FC                       	smpsAlterNote       $FC
00088FC6 01                         	dc.b	$01
00088FC7 E108                       	smpsAlterNote       $08
00088FC9 0101                       	dc.b	$01, $01
00088FCB E102                       	smpsAlterNote       $02
00088FCD 01                         	dc.b	$01
00088FCE E1F7                       	smpsAlterNote       $F7
00088FD0 0101                       	dc.b	$01, $01
00088FD2 E1FC                       	smpsAlterNote       $FC
00088FD4 ECF5                       	smpsPSGAlterVol     $F5
00088FD6 8F06                       	dc.b	nD1, $06
00088FD8 EC04                       	smpsPSGAlterVol     $04
00088FDA E701                       	dc.b	smpsNoAttack, $01
00088FDC EC07                       	smpsPSGAlterVol     $07
00088FDE 8003                       	dc.b	nRst, $03
00088FE0 ECF5                       	smpsPSGAlterVol     $F5
00088FE2 8F06                       	dc.b	nD1, $06
00088FE4 EC04                       	smpsPSGAlterVol     $04
00088FE6 E701                       	dc.b	smpsNoAttack, $01
00088FE8 EC07                       	smpsPSGAlterVol     $07
00088FEA 8006                       	dc.b	nRst, $06
00088FEC E1FF                       	smpsAlterNote       $FF
00088FEE 01                         	dc.b	$01
00088FEF E102                       	smpsAlterNote       $02
00088FF1 01                         	dc.b	$01
00088FF2 E101                       	smpsAlterNote       $01
00088FF4 01                         	dc.b	$01
00088FF5 E1FC                       	smpsAlterNote       $FC
00088FF7 01                         	dc.b	$01
00088FF8 ECF5                       	smpsPSGAlterVol     $F5
00088FFA 9007                       	dc.b	nEb1, $07
00088FFC EC0B                       	smpsPSGAlterVol     $0B
00088FFE 8004                       	dc.b	nRst, $04
00089000 ECF5                       	smpsPSGAlterVol     $F5
00089002 9006                       	dc.b	nEb1, $06
00089004 EC0B                       	smpsPSGAlterVol     $0B
00089006 8007                       	dc.b	nRst, $07
00089008 E103                       	smpsAlterNote       $03
0008900A 0101                       	dc.b	$01, $01
0008900C E1FF                       	smpsAlterNote       $FF
0008900E 01                         	dc.b	$01
0008900F E1F9                       	smpsAlterNote       $F9
00089011 01                         	dc.b	$01
00089012 E1FC                       	smpsAlterNote       $FC
00089014 ECF5                       	smpsPSGAlterVol     $F5
00089016 8F06                       	dc.b	nD1, $06
00089018 EC04                       	smpsPSGAlterVol     $04
0008901A E701                       	dc.b	smpsNoAttack, $01
0008901C EC07                       	smpsPSGAlterVol     $07
0008901E 8003                       	dc.b	nRst, $03
00089020 ECF5                       	smpsPSGAlterVol     $F5
00089022 8F06                       	dc.b	nD1, $06
00089024 EC04                       	smpsPSGAlterVol     $04
00089026 E701                       	dc.b	smpsNoAttack, $01
00089028 EC07                       	smpsPSGAlterVol     $07
0008902A 8006                       	dc.b	nRst, $06
0008902C E1FF                       	smpsAlterNote       $FF
0008902E 01                         	dc.b	$01
0008902F E103                       	smpsAlterNote       $03
00089031 01                         	dc.b	$01
00089032 E1FF                       	smpsAlterNote       $FF
00089034 01                         	dc.b	$01
00089035 E1F9                       	smpsAlterNote       $F9
00089037 01                         	dc.b	$01
00089038 E1FC                       	smpsAlterNote       $FC
0008903A ECF5                       	smpsPSGAlterVol     $F5
0008903C 8F06                       	dc.b	nD1, $06
0008903E EC04                       	smpsPSGAlterVol     $04
00089040 E701                       	dc.b	smpsNoAttack, $01
00089042 EC07                       	smpsPSGAlterVol     $07
00089044 8003                       	dc.b	nRst, $03
00089046 ECF5                       	smpsPSGAlterVol     $F5
00089048 8F07                       	dc.b	nD1, $07
0008904A EC0B                       	smpsPSGAlterVol     $0B
0008904C 8006                       	dc.b	nRst, $06
0008904E E1FF                       	smpsAlterNote       $FF
00089050 01                         	dc.b	$01
00089051 E102                       	smpsAlterNote       $02
00089053 0101                       	dc.b	$01, $01
00089055 E1FC                       	smpsAlterNote       $FC
00089057 01                         	dc.b	$01
00089058 ECF5                       	smpsPSGAlterVol     $F5
0008905A 8F07                       	dc.b	nD1, $07
0008905C EC0B                       	smpsPSGAlterVol     $0B
0008905E 8004                       	dc.b	nRst, $04
00089060 ECF5                       	smpsPSGAlterVol     $F5
00089062 8F06                       	dc.b	nD1, $06
00089064 EC04                       	smpsPSGAlterVol     $04
00089066 E701                       	dc.b	smpsNoAttack, $01
00089068 EC07                       	smpsPSGAlterVol     $07
0008906A 8006                       	dc.b	nRst, $06
0008906C E101                       	smpsAlterNote       $01
0008906E 01                         	dc.b	$01
0008906F E102                       	smpsAlterNote       $02
00089071 01                         	dc.b	$01
00089072 E1FF                       	smpsAlterNote       $FF
00089074 01                         	dc.b	$01
00089075 E1F9                       	smpsAlterNote       $F9
00089077 01                         	dc.b	$01
00089078 E1FC                       	smpsAlterNote       $FC
0008907A ECF5                       	smpsPSGAlterVol     $F5
0008907C 9006                       	dc.b	nEb1, $06
0008907E EC04                       	smpsPSGAlterVol     $04
00089080 E701                       	dc.b	smpsNoAttack, $01
00089082 EC07                       	smpsPSGAlterVol     $07
00089084 8003                       	dc.b	nRst, $03
00089086 ECF5                       	smpsPSGAlterVol     $F5
00089088 9006                       	dc.b	nEb1, $06
0008908A EC04                       	smpsPSGAlterVol     $04
0008908C E701                       	dc.b	smpsNoAttack, $01
0008908E EC07                       	smpsPSGAlterVol     $07
00089090 8006                       	dc.b	nRst, $06
00089092 E100                       	smpsAlterNote       $00
00089094 01                         	dc.b	$01
00089095 E102                       	smpsAlterNote       $02
00089097 01                         	dc.b	$01
00089098 E100                       	smpsAlterNote       $00
0008909A 01                         	dc.b	$01
0008909B E1FF                       	smpsAlterNote       $FF
0008909D 01                         	dc.b	$01
0008909E ECF5                       	smpsPSGAlterVol     $F5
000890A0 9B06                       	dc.b	nD2, $06
000890A2 EC04                       	smpsPSGAlterVol     $04
000890A4 E701                       	dc.b	smpsNoAttack, $01
000890A6 EC07                       	smpsPSGAlterVol     $07
000890A8 8003                       	dc.b	nRst, $03
000890AA ECF5                       	smpsPSGAlterVol     $F5
000890AC 9B07                       	dc.b	nD2, $07
000890AE EC0B                       	smpsPSGAlterVol     $0B
000890B0 8007                       	dc.b	nRst, $07
000890B2 E105                       	smpsAlterNote       $05
000890B4 0101                       	dc.b	$01, $01
000890B6 E1FF                       	smpsAlterNote       $FF
000890B8 01                         	dc.b	$01
000890B9 E1FC                       	smpsAlterNote       $FC
000890BB 01                         	dc.b	$01
000890BC E1FF                       	smpsAlterNote       $FF
000890BE ECF5                       	smpsPSGAlterVol     $F5
000890C0 9B06                       	dc.b	nD2, $06
000890C2 EC0B                       	smpsPSGAlterVol     $0B
000890C4 8004                       	dc.b	nRst, $04
000890C6 ECF5                       	smpsPSGAlterVol     $F5
000890C8 9B06                       	dc.b	nD2, $06
000890CA EC04                       	smpsPSGAlterVol     $04
000890CC E701                       	dc.b	smpsNoAttack, $01
000890CE EC07                       	smpsPSGAlterVol     $07
000890D0 8006                       	dc.b	nRst, $06
000890D2 E102                       	smpsAlterNote       $02
000890D4 01                         	dc.b	$01
000890D5 E106                       	smpsAlterNote       $06
000890D7 01                         	dc.b	$01
000890D8 E102                       	smpsAlterNote       $02
000890DA 01                         	dc.b	$01
000890DB E1FC                       	smpsAlterNote       $FC
000890DD 01                         	dc.b	$01
000890DE E1FF                       	smpsAlterNote       $FF
000890E0 ECF5                       	smpsPSGAlterVol     $F5
000890E2 9B06                       	dc.b	nD2, $06
000890E4 EC04                       	smpsPSGAlterVol     $04
000890E6 E701                       	dc.b	smpsNoAttack, $01
000890E8 EC07                       	smpsPSGAlterVol     $07
000890EA 8003                       	dc.b	nRst, $03
000890EC ECF5                       	smpsPSGAlterVol     $F5
000890EE 9B07                       	dc.b	nD2, $07
000890F0 EC0B                       	smpsPSGAlterVol     $0B
000890F2 8006                       	dc.b	nRst, $06
000890F4 E102                       	smpsAlterNote       $02
000890F6 01                         	dc.b	$01
000890F7 E105                       	smpsAlterNote       $05
000890F9 0101                       	dc.b	$01, $01
000890FB E1FF                       	smpsAlterNote       $FF
000890FD 01                         	dc.b	$01
000890FE ECF5                       	smpsPSGAlterVol     $F5
00089100 9B07                       	dc.b	nD2, $07
00089102 EC0B                       	smpsPSGAlterVol     $0B
00089104 8004                       	dc.b	nRst, $04
00089106 ECF5                       	smpsPSGAlterVol     $F5
00089108 9B06                       	dc.b	nD2, $06
0008910A EC04                       	smpsPSGAlterVol     $04
0008910C E701                       	dc.b	smpsNoAttack, $01
0008910E EC07                       	smpsPSGAlterVol     $07
00089110 8006                       	dc.b	nRst, $06
00089112 E105                       	smpsAlterNote       $05
00089114 0101                       	dc.b	$01, $01
00089116 E102                       	smpsAlterNote       $02
00089118 01                         	dc.b	$01
00089119 E1FC                       	smpsAlterNote       $FC
0008911B 01                         	dc.b	$01
0008911C E1FF                       	smpsAlterNote       $FF
0008911E ECF5                       	smpsPSGAlterVol     $F5
00089120 9B06                       	dc.b	nD2, $06
00089122 EC04                       	smpsPSGAlterVol     $04
00089124 E701                       	dc.b	smpsNoAttack, $01
00089126 EC07                       	smpsPSGAlterVol     $07
00089128 8003                       	dc.b	nRst, $03
0008912A ECF5                       	smpsPSGAlterVol     $F5
0008912C 9B06                       	dc.b	nD2, $06
0008912E EC04                       	smpsPSGAlterVol     $04
00089130 E701                       	dc.b	smpsNoAttack, $01
00089132 EC07                       	smpsPSGAlterVol     $07
00089134 8006                       	dc.b	nRst, $06
00089136 E102                       	smpsAlterNote       $02
00089138 01                         	dc.b	$01
00089139 E106                       	smpsAlterNote       $06
0008913B 01                         	dc.b	$01
0008913C E102                       	smpsAlterNote       $02
0008913E 01                         	dc.b	$01
0008913F E1FF                       	smpsAlterNote       $FF
00089141 01                         	dc.b	$01
00089142 ECF5                       	smpsPSGAlterVol     $F5
00089144 9B06                       	dc.b	nD2, $06
00089146 EC04                       	smpsPSGAlterVol     $04
00089148 E701                       	dc.b	smpsNoAttack, $01
0008914A EC07                       	smpsPSGAlterVol     $07
0008914C 8003                       	dc.b	nRst, $03
0008914E ECF5                       	smpsPSGAlterVol     $F5
00089150 9B07                       	dc.b	nD2, $07
00089152 EC0B                       	smpsPSGAlterVol     $0B
00089154 8007                       	dc.b	nRst, $07
00089156 E107                       	smpsAlterNote       $07
00089158 0101                       	dc.b	$01, $01
0008915A E1FE                       	smpsAlterNote       $FE
0008915C 01                         	dc.b	$01
0008915D E1FA                       	smpsAlterNote       $FA
0008915F 0101                       	dc.b	$01, $01
00089161 E103                       	smpsAlterNote       $03
00089163 01                         	dc.b	$01
00089164 E109                       	smpsAlterNote       $09
00089166 01                         	dc.b	$01
00089167 E107                       	smpsAlterNote       $07
00089169 01                         	dc.b	$01
0008916A E1FE                       	smpsAlterNote       $FE
0008916C 01                         	dc.b	$01
0008916D E108                       	smpsAlterNote       $08
0008916F 01                         	dc.b	$01
00089170 E1FD                       	smpsAlterNote       $FD
00089172 ECF5                       	smpsPSGAlterVol     $F5
00089174 940E                       	dc.b	nG1, $0E
00089176 E103                       	smpsAlterNote       $03
00089178 EC0B                       	smpsPSGAlterVol     $0B
0008917A 8001 01                    	dc.b	nRst, $01, $01
0008917D E1FD                       	smpsAlterNote       $FD
0008917F 01                         	dc.b	$01
00089180 E1FB                       	smpsAlterNote       $FB
00089182 0101                       	dc.b	$01, $01
00089184 E100                       	smpsAlterNote       $00
00089186 01                         	dc.b	$01
00089187 E103                       	smpsAlterNote       $03
00089189 01                         	dc.b	$01
0008918A E100                       	smpsAlterNote       $00
0008918C 01                         	dc.b	$01
0008918D E1FD                       	smpsAlterNote       $FD
0008918F 01                         	dc.b	$01
00089190 E1FA                       	smpsAlterNote       $FA
00089192 01                         	dc.b	$01
00089193 E1FD                       	smpsAlterNote       $FD
00089195 01                         	dc.b	$01
00089196 E103                       	smpsAlterNote       $03
00089198 0101                       	dc.b	$01, $01
0008919A E100                       	smpsAlterNote       $00
0008919C 01                         	dc.b	$01
0008919D E1FE                       	smpsAlterNote       $FE
0008919F ECF5                       	smpsPSGAlterVol     $F5
000891A1 960D                       	dc.b	nA1, $0D
000891A3 E104                       	smpsAlterNote       $04
000891A5 EC0B                       	smpsPSGAlterVol     $0B
000891A7 8001 01                    	dc.b	nRst, $01, $01
000891AA E101                       	smpsAlterNote       $01
000891AC 01                         	dc.b	$01
000891AD E1FB                       	smpsAlterNote       $FB
000891AF 0101                       	dc.b	$01, $01
000891B1 E1FE                       	smpsAlterNote       $FE
000891B3 01                         	dc.b	$01
000891B4 E104                       	smpsAlterNote       $04
000891B6 0101                       	dc.b	$01, $01
000891B8 E1FE                       	smpsAlterNote       $FE
000891BA 01                         	dc.b	$01
000891BB E1FB                       	smpsAlterNote       $FB
000891BD 0101                       	dc.b	$01, $01
000891BF E101                       	smpsAlterNote       $01
000891C1 01                         	dc.b	$01
000891C2 E104                       	smpsAlterNote       $04
000891C4 0101                       	dc.b	$01, $01
000891C6 E1FE                       	smpsAlterNote       $FE
000891C8 ECF5                       	smpsPSGAlterVol     $F5
000891CA 970D                       	dc.b	nBb1, $0D
000891CC E101                       	smpsAlterNote       $01
000891CE EC04                       	smpsPSGAlterVol     $04
000891D0 E701                       	dc.b	smpsNoAttack, $01
000891D2 EC07                       	smpsPSGAlterVol     $07
000891D4 E104                       	smpsAlterNote       $04
000891D6 8001                       	dc.b	nRst, $01
000891D8 E103                       	smpsAlterNote       $03
000891DA 01                         	dc.b	$01
000891DB E1FE                       	smpsAlterNote       $FE
000891DD 01                         	dc.b	$01
000891DE E1FA                       	smpsAlterNote       $FA
000891E0 01                         	dc.b	$01
000891E1 E1FE                       	smpsAlterNote       $FE
000891E3 01                         	dc.b	$01
000891E4 E101                       	smpsAlterNote       $01
000891E6 01                         	dc.b	$01
000891E7 E104                       	smpsAlterNote       $04
000891E9 01                         	dc.b	$01
000891EA E101                       	smpsAlterNote       $01
000891EC 01                         	dc.b	$01
000891ED E1FB                       	smpsAlterNote       $FB
000891EF 01                         	dc.b	$01
000891F0 E1FA                       	smpsAlterNote       $FA
000891F2 01                         	dc.b	$01
000891F3 E1FE                       	smpsAlterNote       $FE
000891F5 01                         	dc.b	$01
000891F6 E103                       	smpsAlterNote       $03
000891F8 0101                       	dc.b	$01, $01
000891FA E101                       	smpsAlterNote       $01
000891FC 01                         	dc.b	$01
000891FD E1FE                       	smpsAlterNote       $FE
000891FF ECF5                       	smpsPSGAlterVol     $F5
00089201 990D                       	dc.b	nC2, $0D
00089203 E104                       	smpsAlterNote       $04
00089205 EC0B                       	smpsPSGAlterVol     $0B
00089207 8001 01                    	dc.b	nRst, $01, $01
0008920A E102                       	smpsAlterNote       $02
0008920C 01                         	dc.b	$01
0008920D E1FC                       	smpsAlterNote       $FC
0008920F 0101                       	dc.b	$01, $01
00089211 E102                       	smpsAlterNote       $02
00089213 01                         	dc.b	$01
00089214 E104                       	smpsAlterNote       $04
00089216 01                         	dc.b	$01
00089217 E1FF                       	smpsAlterNote       $FF
00089219 ECF5                       	smpsPSGAlterVol     $F5
0008921B 9B06                       	dc.b	nD2, $06
0008921D EC04                       	smpsPSGAlterVol     $04
0008921F E701                       	dc.b	smpsNoAttack, $01
00089221 EC07                       	smpsPSGAlterVol     $07
00089223 8003                       	dc.b	nRst, $03
00089225 ECF5                       	smpsPSGAlterVol     $F5
00089227 9B07                       	dc.b	nD2, $07
00089229 EC0B                       	smpsPSGAlterVol     $0B
0008922B 8006                       	dc.b	nRst, $06
0008922D E101                       	smpsAlterNote       $01
0008922F 01                         	dc.b	$01
00089230 E104                       	smpsAlterNote       $04
00089232 0101                       	dc.b	$01, $01
00089234 E1FE                       	smpsAlterNote       $FE
00089236 01                         	dc.b	$01
00089237 E1FC                       	smpsAlterNote       $FC
00089239 01                         	dc.b	$01
0008923A E1FE                       	smpsAlterNote       $FE
0008923C ECF5                       	smpsPSGAlterVol     $F5
0008923E 9C06                       	dc.b	nEb2, $06
00089240 EC0B                       	smpsPSGAlterVol     $0B
00089242 8004                       	dc.b	nRst, $04
00089244 ECF5                       	smpsPSGAlterVol     $F5
00089246 9C06                       	dc.b	nEb2, $06
00089248 EC04                       	smpsPSGAlterVol     $04
0008924A E701                       	dc.b	smpsNoAttack, $01
0008924C EC07                       	smpsPSGAlterVol     $07
0008924E 8006                       	dc.b	nRst, $06
00089250 E105                       	smpsAlterNote       $05
00089252 01                         	dc.b	$01
00089253 E106                       	smpsAlterNote       $06
00089255 01                         	dc.b	$01
00089256 E102                       	smpsAlterNote       $02
00089258 01                         	dc.b	$01
00089259 E1FB                       	smpsAlterNote       $FB
0008925B 01                         	dc.b	$01
0008925C E1FF                       	smpsAlterNote       $FF
0008925E ECF5                       	smpsPSGAlterVol     $F5
00089260 9B06                       	dc.b	nD2, $06
00089262 EC04                       	smpsPSGAlterVol     $04
00089264 E701                       	dc.b	smpsNoAttack, $01
00089266 EC07                       	smpsPSGAlterVol     $07
00089268 8003                       	dc.b	nRst, $03
0008926A ECF5                       	smpsPSGAlterVol     $F5
0008926C 9B06                       	dc.b	nD2, $06
0008926E EC04                       	smpsPSGAlterVol     $04
00089270 E701                       	dc.b	smpsNoAttack, $01
00089272 EC07                       	smpsPSGAlterVol     $07
00089274 8006                       	dc.b	nRst, $06
00089276 E101                       	smpsAlterNote       $01
00089278 01                         	dc.b	$01
00089279 E105                       	smpsAlterNote       $05
0008927B 01                         	dc.b	$01
0008927C E104                       	smpsAlterNote       $04
0008927E 01                         	dc.b	$01
0008927F E1FE                       	smpsAlterNote       $FE
00089281 01                         	dc.b	$01
00089282 ECF5                       	smpsPSGAlterVol     $F5
00089284 9C07                       	dc.b	nEb2, $07
00089286 EC0B                       	smpsPSGAlterVol     $0B
00089288 8004                       	dc.b	nRst, $04
0008928A ECF5                       	smpsPSGAlterVol     $F5
0008928C 9C06                       	dc.b	nEb2, $06
0008928E EC0B                       	smpsPSGAlterVol     $0B
00089290 8007                       	dc.b	nRst, $07
00089292 E105                       	smpsAlterNote       $05
00089294 0101                       	dc.b	$01, $01
00089296 E102                       	smpsAlterNote       $02
00089298 01                         	dc.b	$01
00089299 E1FB                       	smpsAlterNote       $FB
0008929B 01                         	dc.b	$01
0008929C E1FF                       	smpsAlterNote       $FF
0008929E ECF5                       	smpsPSGAlterVol     $F5
000892A0 9B06                       	dc.b	nD2, $06
000892A2 EC04                       	smpsPSGAlterVol     $04
000892A4 E701                       	dc.b	smpsNoAttack, $01
000892A6 EC07                       	smpsPSGAlterVol     $07
000892A8 8003                       	dc.b	nRst, $03
000892AA ECF5                       	smpsPSGAlterVol     $F5
000892AC 9B06                       	dc.b	nD2, $06
000892AE EC04                       	smpsPSGAlterVol     $04
000892B0 E701                       	dc.b	smpsNoAttack, $01
000892B2 EC07                       	smpsPSGAlterVol     $07
000892B4 8006                       	dc.b	nRst, $06
000892B6 E101                       	smpsAlterNote       $01
000892B8 01                         	dc.b	$01
000892B9 E105                       	smpsAlterNote       $05
000892BB 01                         	dc.b	$01
000892BC E101                       	smpsAlterNote       $01
000892BE 01                         	dc.b	$01
000892BF E1FC                       	smpsAlterNote       $FC
000892C1 01                         	dc.b	$01
000892C2 E1FE                       	smpsAlterNote       $FE
000892C4 ECF5                       	smpsPSGAlterVol     $F5
000892C6 9C06                       	dc.b	nEb2, $06
000892C8 EC04                       	smpsPSGAlterVol     $04
000892CA E701                       	dc.b	smpsNoAttack, $01
000892CC EC07                       	smpsPSGAlterVol     $07
000892CE 8003                       	dc.b	nRst, $03
000892D0 ECF5                       	smpsPSGAlterVol     $F5
000892D2 9C07                       	dc.b	nEb2, $07
000892D4 EC0B                       	smpsPSGAlterVol     $0B
000892D6 8006                       	dc.b	nRst, $06
000892D8 E102                       	smpsAlterNote       $02
000892DA 01                         	dc.b	$01
000892DB E105                       	smpsAlterNote       $05
000892DD 0101                       	dc.b	$01, $01
000892DF E1FF                       	smpsAlterNote       $FF
000892E1 01                         	dc.b	$01
000892E2 ECF5                       	smpsPSGAlterVol     $F5
000892E4 9B07                       	dc.b	nD2, $07
000892E6 EC0B                       	smpsPSGAlterVol     $0B
000892E8 8004                       	dc.b	nRst, $04
000892EA ECF5                       	smpsPSGAlterVol     $F5
000892EC 9B06                       	dc.b	nD2, $06
000892EE EC04                       	smpsPSGAlterVol     $04
000892F0 E701                       	dc.b	smpsNoAttack, $01
000892F2 EC07                       	smpsPSGAlterVol     $07
000892F4 8002                       	dc.b	nRst, $02
000892F6 E1FC                       	smpsAlterNote       $FC
000892F8 ECF5                       	smpsPSGAlterVol     $F5
000892FA 9006                       	dc.b	nEb1, $06
000892FC EC04                       	smpsPSGAlterVol     $04
000892FE E701                       	dc.b	smpsNoAttack, $01
00089300 ECFC                       	smpsPSGAlterVol     $FC
00089302 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00089306 EC04                       	smpsPSGAlterVol     $04
00089308 E701                       	dc.b	smpsNoAttack, $01
0008930A E1FD                       	smpsAlterNote       $FD
0008930C ECFC                       	smpsPSGAlterVol     $FC
0008930E 9402                       	dc.b	nG1, $02
00089310 EC04                       	smpsPSGAlterVol     $04
00089312 E701                       	dc.b	smpsNoAttack, $01
00089314 E1FE                       	smpsAlterNote       $FE
00089316 ECFC                       	smpsPSGAlterVol     $FC
00089318 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008931C EC04                       	smpsPSGAlterVol     $04
0008931E E701                       	dc.b	smpsNoAttack, $01
00089320 EC07                       	smpsPSGAlterVol     $07
00089322 8008                       	dc.b	nRst, $08
00089324 F6F4 F3                    	smpsJump            music84_Jump06
00089327                            
00089327                            ; PSG3 Data
00089327                            music84_PSG3:
00089327 F500                       	smpsPSGvoice        $00
00089329 E1FF                       	smpsAlterNote       $FF
0008932B EC0F                       	smpsPSGAlterVol     $0F
0008932D 803A                       	dc.b	nRst, $3A
0008932F                            
0008932F                            music84_Jump05:
0008932F 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008933B 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00089345 F6FF E8                    	smpsJump            music84_Jump05
00089348                            
00089348                            ; DAC Data
00089348                            music84_DAC:
00089348 E0C0                       	smpsPan             panCenter, $00
0008934A 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00089356 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00089362 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008936E 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008937A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00089386 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00089392 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008939E 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
000893AA 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000893B6 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
000893C2 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000893CE 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
000893DA 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000893E6 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000893F2 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000893FE 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008940A 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00089416 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00089422 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008942E 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008943A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00089446 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00089452 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008945E 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008946A 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00089476 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00089482 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008948E 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008949A 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000894A6 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000894B2 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000894BE 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000894CA 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
000894D6 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000894E2 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000894EE 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000894FA 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00089506 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00089512 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008951E 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008952A 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00089536 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00089542 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008954E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008955A 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00089566 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00089572 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008957E 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008958A 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00089596 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
000895A2 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
000895AE 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
000895BA 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
000895C6 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
000895D2 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000895DE 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000895EA 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000895F6 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00089602 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008960E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008961A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00089626 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00089632 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008963E 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008964A 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00089656 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00089662 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008966E 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008967A 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00089686 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00089692 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008969E 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000896AA 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
000896B6 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
000896C2 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000896CE E0C0                       	smpsPan             panCenter, $00
000896D0 F2                         	smpsStop
000896D1                            
000896D1                            music84_Voices:
000896D1                            ;	Voice $00
000896D1                            ;	$3D
000896D1                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000896D1                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000896D1                            	smpsVcAlgorithm     $05
000896D1                            	smpsVcFeedback      $07
000896D1                            	smpsVcUnusedBits    $00
000896D1                            	smpsVcDetune        $05, $04, $03, $04
000896D1                            	smpsVcCoarseFreq    $01, $01, $01, $01
000896D1                            	smpsVcRateScale     $00, $00, $00, $00
000896D1                            	smpsVcAttackRate    $11, $11, $11, $11
000896D1                            	smpsVcAmpMod        $00, $00, $00, $00
000896D1                            	smpsVcDecayRate1    $00, $00, $00, $0A
000896D1                            	smpsVcDecayRate2    $00, $00, $00, $0B
000896D1                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000896D1                            	smpsVcReleaseRate   $08, $08, $08, $07
000896D1 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000896EA                            
000896EA                            ;	Voice $01
000896EA                            ;	$04
000896EA                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000896EA                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000896EA                            	smpsVcAlgorithm     $04
000896EA                            	smpsVcFeedback      $00
000896EA                            	smpsVcUnusedBits    $00
000896EA                            	smpsVcDetune        $04, $03, $04, $05
000896EA                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000896EA                            	smpsVcRateScale     $00, $01, $00, $01
000896EA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000896EA                            	smpsVcAmpMod        $00, $00, $00, $00
000896EA                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000896EA                            	smpsVcDecayRate2    $05, $00, $05, $00
000896EA                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000896EA                            	smpsVcReleaseRate   $06, $06, $06, $06
000896EA 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00089703                            
00089703                            ;	Voice $02
00089703                            ;	$30
00089703                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00089703                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00089703                            	smpsVcAlgorithm     $00
00089703                            	smpsVcFeedback      $06
00089703                            	smpsVcUnusedBits    $00
00089703                            	smpsVcDetune        $04, $02, $00, $06
00089703                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00089703                            	smpsVcRateScale     $00, $00, $00, $00
00089703                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00089703                            	smpsVcAmpMod        $00, $00, $00, $00
00089703                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00089703                            	smpsVcDecayRate2    $01, $01, $01, $01
00089703                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00089703                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00089703 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008971C                            
0008971C                            ;	Voice $03
0008971C                            ;	$3A
0008971C                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008971C                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008971C                            	smpsVcAlgorithm     $02
0008971C                            	smpsVcFeedback      $07
0008971C                            	smpsVcUnusedBits    $00
0008971C                            	smpsVcDetune        $04, $06, $02, $00
0008971C                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008971C                            	smpsVcRateScale     $00, $00, $00, $00
0008971C                            	smpsVcAttackRate    $18, $19, $14, $14
0008971C                            	smpsVcAmpMod        $00, $00, $00, $00
0008971C                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008971C                            	smpsVcDecayRate2    $00, $00, $00, $00
0008971C                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008971C                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008971C 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00089735                            
00089735                            ;	Voice $04
00089735                            ;	$3C
00089735                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00089735                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00089735                            	smpsVcAlgorithm     $04
00089735                            	smpsVcFeedback      $07
00089735                            	smpsVcUnusedBits    $00
00089735                            	smpsVcDetune        $07, $00, $00, $03
00089735                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00089735                            	smpsVcRateScale     $00, $00, $00, $00
00089735                            	smpsVcAttackRate    $10, $1F, $10, $1F
00089735                            	smpsVcAmpMod        $00, $00, $00, $00
00089735                            	smpsVcDecayRate1    $00, $00, $00, $00
00089735                            	smpsVcDecayRate2    $00, $00, $00, $00
00089735                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00089735                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00089735 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008974E                            
0008974E                            ;	Voice $05
0008974E                            ;	$38
0008974E                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008974E                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008974E                            	smpsVcAlgorithm     $00
0008974E                            	smpsVcFeedback      $07
0008974E                            	smpsVcUnusedBits    $00
0008974E                            	smpsVcDetune        $04, $06, $02, $00
0008974E                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008974E                            	smpsVcRateScale     $00, $00, $00, $00
0008974E                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008974E                            	smpsVcAmpMod        $00, $00, $00, $00
0008974E                            	smpsVcDecayRate1    $00, $03, $00, $17
0008974E                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008974E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008974E                            	smpsVcReleaseRate   $08, $05, $05, $05
0008974E 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00089767                            
00089767                            
00089768 00                         		even
00089768                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0008D978                            		even
0008D978                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000914D0 00                         		even
000914D0                            Music87:	include	sound\music87.asm; Invincibility
000914D0                            triple_Header:
000914D0 =00000001                  smpsHeaderStartSong = 1
000914D0 0000                       	smpsHeaderVoice     triple_Voices
000914D2 0501                       	smpsHeaderChan      $05, $01
000914D4 0200                       	smpsHeaderTempo     $02, $00
000914D6                            
000914DA 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000914DE 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000914E2 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000914E6 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000914EA 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000914F0                            
000914F0                            ; DAC Data
000914F0                            triple_DAC:
000914F0 E0C0                       	smpsPan             panCenter, $00
000914F2 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000914F8                            
000914F8                            triple_Loop01:
000914F8 8282 82                    	dc.b	dSnare, dSnare, dSnare
000914FB                            
000914FB                            triple_Loop00:
000914FB 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00091507 06                         	dc.b	$06
00091508 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
0009150D 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00091519 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00091520 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00091525 0303 1B                    	dc.b	$03, $03, $1B
00091528 E0C0                       	smpsPan             panCenter, $00
0009152A F6FF C4                    	smpsJump triple_DAC
0009152D                            
0009152D                            ; FM1 Data
0009152D                            triple_FM1:
0009152D E0C0                       	smpsPan             panCenter, $00
00091531 8018                       	dc.b	nRst, $18
00091533                            
00091533                            triple_Loop0B:
00091533 AC06 B8                    	dc.b	nG3, $06, nG4
00091536 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
0009153B                            
0009153B                            triple_Loop0C:
0009153B A7B3                       	dc.b	nD3, nD4
0009153D F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00091542                            
00091542                            triple_Loop0D:
00091542 A9B5                       	dc.b	nE3, nE4
00091544 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00091549 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00091551 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00091556 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00091562 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
0009156E AD                         	dc.b	nAb3
0009156F F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00091574 8018                       	dc.b	nRst, $18
00091576 E0C0                       	smpsPan             panCenter, $00
0009157A F6FF B1                    	smpsJump triple_FM1
0009157D                            
0009157D                            ; FM2 Data
0009157D                            triple_FM2:
0009157D E0C0                       	smpsPan             panCenter, $00
00091581 8018                       	dc.b	nRst, $18
00091583                            
00091583                            triple_Loop07:
00091583 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009158F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009159B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000915A0 8003                       	dc.b	nRst, $03
000915A2                            
000915A2                            triple_Loop08:
000915A2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000915A8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000915AD B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000915B3                            
000915B3                            triple_Loop09:
000915B3 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000915BF C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000915CB F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000915D0 8003                       	dc.b	nRst, $03
000915D2                            
000915D2                            triple_Loop0A:
000915D2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000915D8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000915DD B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000915E3 E0C0                       	smpsPan             panCenter, $00
000915E7 F6FF 94                    	smpsJump triple_FM2
000915EA                            
000915EA                            ; FM3 Data
000915EA                            triple_FM3:
000915EA E0C0                       	smpsPan             panCenter, $00
000915EE 8018                       	dc.b	nRst, $18
000915F0                            
000915F0                            triple_Loop06:
000915F0 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000915F7 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000915FC 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00091608 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00091614 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00091617 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
0009161C 8018                       	dc.b	nRst, $18
0009161E E0C0                       	smpsPan             panCenter, $00
00091622 F6FF C6                    	smpsJump triple_FM3
00091625                            
00091625                            ; FM4 Data
00091625                            triple_FM4:
00091625 E103                       	smpsAlterNote       $03
00091629 E0C0                       	smpsPan             panCenter, $00
0009162B 8018                       	dc.b	nRst, $18
0009162D                            
0009162D                            triple_Loop02:
0009162D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00091639 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00091645 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0009164A 8003                       	dc.b	nRst, $03
0009164C                            
0009164C                            triple_Loop03:
0009164C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00091652 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00091657 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009165D                            
0009165D                            triple_Loop04:
0009165D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00091669 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00091675 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
0009167A 8003                       	dc.b	nRst, $03
0009167C                            
0009167C                            triple_Loop05:
0009167C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00091682 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00091687 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0009168D E0C0                       	smpsPan             panCenter, $00
0009168F F6FF 94                    	smpsJump triple_FM4
00091692                            
00091692                            ; PSG1 Data
00091692                            triple_PSG1:
00091692 8018                       	dc.b	nRst, $18
00091694                            
00091694                            triple_Loop0E:
00091694 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000916A0 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000916AC 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000916B8 9402 8004                  	dc.b	nG1, $02, nRst, $04
000916BC F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000916C1 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000916CD 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000916D9 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000916E5 9402 8007                  	dc.b	nG1, $02, nRst, $07
000916E9                            
000916E9                            triple_Loop0F:
000916E9 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000916EF F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000916F4 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000916FA                            
000916FA                            triple_Loop10:
000916FA A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00091706 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00091712 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009171E 9402 8004                  	dc.b	nG1, $02, nRst, $04
00091722 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00091727 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00091733 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009173F 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009174B 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009174F                            
0009174F                            triple_Loop11:
0009174F 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00091755 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0009175A 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00091760 F500                       	smpsPSGvoice        $00
00091762 F6FF 2E                    	smpsJump triple_PSG1
00091765                            
00091765                            triple_Voices:
00091765                            ;	Voice $00
00091765                            ;	$3A
00091765                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00091765                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00091765                            	smpsVcAlgorithm     $02
00091765                            	smpsVcFeedback      $07
00091765                            	smpsVcUnusedBits    $00
00091765                            	smpsVcDetune        $00, $00, $00, $00
00091765                            	smpsVcCoarseFreq    $01, $01, $07, $01
00091765                            	smpsVcRateScale     $01, $02, $02, $02
00091765                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00091765                            	smpsVcAmpMod        $00, $00, $00, $00
00091765                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00091765                            	smpsVcDecayRate2    $00, $00, $00, $00
00091765                            	smpsVcDecayLevel    $00, $01, $0F, $01
00091765                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00091765 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0009177E                            
0009177E                            ;	Voice $01
0009177E                            ;	$20
0009177E                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0009177E                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0009177E                            	smpsVcAlgorithm     $00
0009177E                            	smpsVcFeedback      $04
0009177E                            	smpsVcUnusedBits    $00
0009177E                            	smpsVcDetune        $00, $00, $03, $07
0009177E                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0009177E                            	smpsVcRateScale     $03, $03, $03, $02
0009177E                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0009177E                            	smpsVcAmpMod        $00, $00, $00, $00
0009177E                            	smpsVcDecayRate1    $04, $04, $0A, $10
0009177E                            	smpsVcDecayRate2    $08, $08, $08, $0F
0009177E                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0009177E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009177E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009177E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00091798 00                         		even
00091798                            Music88:	incbin	sound\music88.bin; Extra Life
00091886                            		even
00091886                            Music89:	incbin	sound\music89.bin; Special Stage
0009574E 00                         		even
0009574E                            Music8A:	incbin	sound\music8A.bin; Title Screen
00095918                            		even
00095918                            Music8B:	incbin	sound\music8B.bin; Ending Theme
00095BB2                            		even
00095BB2                            Music8C:	incbin	sound\music8C.bin; VS Boss
00095DCE                            		even
00095DCE                            Music8D:	incbin	sound\music8D.bin; Final Zone
00095FEA                            		even
00095FEA                            Music8E:	incbin	sound\fle.bin ;		Act Clear
00096458 00                         		even
00096458                            Music8F:	incbin	sound\music8F.bin ; Game Over
00096A98 00                         		even
00096A98                            Music90:	incbin	sound\music90.bin ; Continue
00096BF6                            		even
00096BF6                            Music91:	incbin	sound\music91.bin ; Credits
00097EC4                            		even
00097EC4                            Music92:	incbin	sound\music92.bin ; Drowning
00097FEE                            		even
00097FEE                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000980BC                            		even
000980BC                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000980F6 00                         		even
000980F6                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
00098130 00                         		even
00098130                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009816A 00                         		even
0009816A                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000981A4 00                         		even
000981A4                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000981DE 00                         		even
000981DE                            Music99:	incbin	sound\music99.bin ; Marble Act 3
00098218 00                         		even
00098218                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
00098252 00                         		even
00098252                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009828C 00                         		even
0009828C                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000982C6 00                         		even
000982C6                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
00098300 00                         		even
00098300                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009833A 00                         		even
0009833A                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
00098374 00                         		even
00098374                            ; ---------------------------------------------------------------------------
00098374                            ; Sound	effect pointers
00098374                            ; ---------------------------------------------------------------------------
00098374 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00098380 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009838C 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00098398 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000983A4 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000983B0 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000983BC 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000983C8 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000983D4 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000983E0 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000983EC 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000983F8 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00098404 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00098410 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0009841C 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00098428 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00098434 0000 0000                  SoundD0Index:	dc.l SoundD0
00098438                            SoundA0:	incbin	sound\soundA0.bin
0009844E                            		even
0009844E                            SoundA1:	incbin	sound\soundA1.bin
00098478                            		even
00098478                            SoundA2:	incbin	sound\soundA2.bin
00098498                            		even
00098498                            SoundA3:	incbin	sound\soundA3.bin
000984CA                            		even
000984CA                            SoundA4:	incbin	sound\soundA4.bin
00098500                            		even
00098500                            SoundA5:	incbin	sound\soundA5.bin
0009852C                            		even
0009852C                            SoundA6:	incbin	sound\soundA6.bin
0009855C                            		even
0009855C                            SoundA7:	incbin	sound\soundA7.bin
0009858C                            		even
0009858C                            SoundA8:	incbin	sound\soundA8.bin
000985C0                            		even
000985C0                            SoundA9:	incbin	sound\soundA9.bin
000985D2                            		even
000985D2                            SoundAA:	incbin	sound\soundAA.bin
00098614                            		even
00098614                            SoundAB:	incbin	sound\soundAB.bin
00098634                            		even
00098634                            SoundAC:	incbin	sound\soundAC.bin
00098668                            		even
00098668                            SoundAD:	incbin	sound\soundAD.bin
0009869E                            		even
0009869E                            SoundAE:	incbin	sound\soundAE.bin
000986E8                            		even
000986E8                            SoundAF:	incbin	sound\soundAF.bin
00098716                            		even
00098716                            SoundB0:	incbin	sound\soundB0.bin
00098748                            		even
00098748                            SoundB1:	incbin	sound\soundB1.bin
00098774                            		even
00098774                            SoundB2:	incbin	sound\soundB2.bin
000987C4                            		even
000987C4                            SoundB3:	incbin	sound\soundB3.bin
0009880E                            		even
0009880E                            SoundB4:	include	sound\soundB4.asm
0009880E                            SndB4_Bumper_Header:
0009880E =00000001                  smpsHeaderStartSong = 1
0009880E 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
00098810 01                         	smpsHeaderTempoSFX  $01
00098811 03                         	smpsHeaderChanSFX   $03
00098812                            
00098824                            
00098824                            ; FM5 Data
00098824                            SndB4_Bumper_FM5:
00098826 F600 00                    	smpsJump            SndB4_Bumper_Jump00
00098829                            
00098829                            ; FM4 Data
00098829                            SndB4_Bumper_FM4:
00098829 F2                         	smpsStop
0009882A                            
0009882A                            SndB4_Bumper_Jump00:
0009882A A020                       	dc.b	nG2, $20
0009882C F2                         	smpsStop
0009882D                            
0009882D                            ; FM3 Data
0009882D                            SndB4_Bumper_FM3:
0009882D F2                         	smpsStop
0009882E                            
0009882E                            SndB4_Bumper_Voices:
0009882E                            ;	Voice $00
0009882E                            ;	$32
0009882E                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
0009882E                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
0009882E                            	smpsVcAlgorithm     $02
0009882E                            	smpsVcFeedback      $06
0009882E                            	smpsVcUnusedBits    $00
0009882E                            	smpsVcDetune        $07, $07, $02, $00
0009882E                            	smpsVcCoarseFreq    $00, $00, $00, $04
0009882E                            	smpsVcRateScale     $00, $00, $00, $00
0009882E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009882E                            	smpsVcAmpMod        $00, $00, $00, $00
0009882E                            	smpsVcDecayRate1    $08, $00, $00, $09
0009882E                            	smpsVcDecayRate2    $0B, $00, $00, $09
0009882E                            	smpsVcDecayLevel    $00, $00, $00, $00
0009882E                            	smpsVcReleaseRate   $0F, $00, $00, $00
0009882E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009882E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00098848 00                         		even
00098848                            SoundB5:	incbin	sound\soundB5.bin
00098876                            		even
00098876                            SoundB6:	incbin	sound\soundB6.bin
00098894                            		even
00098894                            SoundB7:	incbin	sound\soundB7.bin
000988D0                            		even
000988D0                            SoundB8:	incbin	sound\soundB8.bin
000988EE                            		even
000988EE                            SoundB9:	incbin	sound\soundB9.bin
00098952                            		even
00098952                            SoundBA:	incbin	sound\soundBA.bin
0009897A                            		even
0009897A                            SoundBB:	incbin	sound\soundBB.bin
000989A6                            		even
000989A6                            SoundBC:	incbin	sound\soundBC.bin
000989E8                            		even
000989E8                            SoundBD:	incbin	sound\soundBD.bin
00098A3C                            		even
00098A3C                            SoundBE:	incbin	sound\soundBE.bin
00098A76                            		even
00098A76                            SoundBF:	incbin	sound\soundBF.bin
00098AE8                            		even
00098AE8                            SoundC0:	incbin	sound\soundC0.bin
00098B16                            		even
00098B16                            SoundC1:	incbin	sound\soundC1.bin
00098B70                            		even
00098B70                            SoundC2:	incbin	sound\soundC2.bin
00098B9A                            		even
00098B9A                            SoundC3:	incbin	sound\soundC3.bin
00098C14                            		even
00098C14                            SoundC4:	incbin	sound\soundC4.bin
00098C3C                            		even
00098C3C                            SoundC5:	incbin	sound\soundC5.bin
00098CA4                            		even
00098CA4                            SoundC6:	incbin	sound\soundC6.bin
00098CE6                            		even
00098CE6                            SoundC7:	incbin	sound\soundC7.bin
00098D14                            		even
00098D14                            SoundC8:	incbin	sound\soundC8.bin
00098D26                            		even
00098D26                            SoundC9:	incbin	sound\soundC9.bin
00098D54                            		even
00098D54                            SoundCA:	incbin	sound\soundCA.bin
00098D82                            		even
00098D82                            SoundCB:	incbin	sound\soundCB.bin
00098DCE                            		even
00098DCE                            SoundCC:	incbin	sound\C9.ssf
00098DFC                            		even
00098DFC                            SoundCD:	incbin	sound\soundCD.bin
00098E0A                            		even
00098E0A                            SoundCE:	incbin	sound\soundCE.bin
00098E38                            		even
00098E38                            SoundCF:	incbin	sound\soundCF.bin
00098E70                            		even
00098E70                            SoundD0:	incbin	sound\soundD0.bin
00098EAA                            		even
00098EAA                            SegaPCM:	incbin	sound\segapcm.bin
000B3000                            SegaPCM_end:	even
000B3000                            
000B3000                            IdiotPCM:	incbin	sound\youare.bin
000BD0D2 00                         IdiotPCM_end:	even
000BD0D2                            
000BD0D2                            ; end of 'ROM'
000BD0D2                            EndOfRom:
000BD0D2                            
000BD0D2                            
