00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3032+  Date:		dc.b '(C)IDK 2025.03  ' ; Release date
00000120 4749 5448 5542 204D 4144+  Title_Local:	dc.b 'GITHUB MADNESS 3                                ' ; Domestic name
00000150 4749 5448 5542 204D 4144+  Title_Int:	dc.b 'GITHUB MADNESS 3                                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002428 0000 0000                  	dc.l Pal_Idiot
0000242C FB20                       	dc.w $FB20
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
000025D0                            Pal_GHZ:	incbin	pallet\ghz.bin
00002630                            Pal_LZ:		incbin	pallet\lz.bin
00002690                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002710                            Pal_MZ:		incbin	pallet\mz.bin
00002770                            Pal_SLZ:	incbin	pallet\slz.bin
000027D0                            Pal_SYZ:	incbin	pallet\syz.bin
00002830                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002890                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028F0                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002970                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029D0                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A50                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A70                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A90                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B10                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B50                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BD0                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BF0                            
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            
00002BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BF0                            
00002BF0                            
00002BF0                            DelayProgram:				; XREF: PauseGame
00002BF0 46FC 2300                  		move	#$2300,sr
00002BF4                            
00002BF4                            loc_29AC:
00002BF4 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BF8 66FA                       		bne.s	loc_29AC
00002BFA 4E75                       		rts	
00002BFC                            ; End of function DelayProgram
00002BFC                            
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            ; Subroutine to	generate a pseudo-random number	in d0
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            
00002BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BFC                            
00002BFC                            
00002BFC                            RandomNumber:
00002BFC 2238 F636                  		move.l	($FFFFF636).w,d1
00002C00 6600                       		bne.s	loc_29C0
00002C02 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C08                            
00002C08                            loc_29C0:
00002C08 2001                       		move.l	d1,d0
00002C0A E581                       		asl.l	#2,d1
00002C0C D280                       		add.l	d0,d1
00002C0E E781                       		asl.l	#3,d1
00002C10 D280                       		add.l	d0,d1
00002C12 3001                       		move.w	d1,d0
00002C14 4841                       		swap	d1
00002C16 D041                       		add.w	d1,d0
00002C18 3200                       		move.w	d0,d1
00002C1A 4841                       		swap	d1
00002C1C 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C20 4E75                       		rts	
00002C22                            ; End of function RandomNumber
00002C22                            
00002C22                            
00002C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C22                            
00002C22                            
00002C22                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C22 0240 00FF                  		andi.w	#$FF,d0
00002C26 D040                       		add.w	d0,d0
00002C28 0640 0080                  		addi.w	#$80,d0
00002C2C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C30 0440 0080                  		subi.w	#$80,d0
00002C34 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C38 4E75                       		rts	
00002C3A                            ; End of function CalcSine
00002C3A                            
00002C3A                            ; ===========================================================================
00002C3A                            
00002C3A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EBA                            
00002EBA                            ; ===========================================================================
00002EBA 48E7 6000                  		movem.l	d1-d2,-(sp)
00002EBE 3200                       		move.w	d0,d1
00002EC0 4841                       		swap	d1
00002EC2 7000                       		moveq	#0,d0
00002EC4 3200                       		move.w	d0,d1
00002EC6 7407                       		moveq	#7,d2
00002EC8                            
00002EC8                            loc_2C80:
00002EC8 E599                       		rol.l	#2,d1
00002ECA D040                       		add.w	d0,d0
00002ECC 5240                       		addq.w	#1,d0
00002ECE 9240                       		sub.w	d0,d1
00002ED0 6400                       		bcc.s	loc_2C9A
00002ED2 D240                       		add.w	d0,d1
00002ED4 5340                       		subq.w	#1,d0
00002ED6 51CA FFF0                  		dbf	d2,loc_2C80
00002EDA E248                       		lsr.w	#1,d0
00002EDC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EE0 4E75                       		rts	
00002EE2                            ; ===========================================================================
00002EE2                            
00002EE2                            loc_2C9A:
00002EE2 5240                       		addq.w	#1,d0
00002EE4 51CA FFE2                  		dbf	d2,loc_2C80
00002EE8 E248                       		lsr.w	#1,d0
00002EEA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EEE 4E75                       		rts	
00002EF0                            
00002EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EF0                            
00002EF0                            
00002EF0                            CalcAngle:
00002EF0 48E7 1800                  		movem.l	d3-d4,-(sp)
00002EF4 7600                       		moveq	#0,d3
00002EF6 7800                       		moveq	#0,d4
00002EF8 3601                       		move.w	d1,d3
00002EFA 3802                       		move.w	d2,d4
00002EFC 8843                       		or.w	d3,d4
00002EFE 6700                       		beq.s	loc_2D04
00002F00 3802                       		move.w	d2,d4
00002F02 4A43                       		tst.w	d3
00002F04 6A00 0000                  		bpl.w	loc_2CC2
00002F08 4443                       		neg.w	d3
00002F0A                            
00002F0A                            loc_2CC2:
00002F0A 4A44                       		tst.w	d4
00002F0C 6A00 0000                  		bpl.w	loc_2CCA
00002F10 4444                       		neg.w	d4
00002F12                            
00002F12                            loc_2CCA:
00002F12 B843                       		cmp.w	d3,d4
00002F14 6400 0000                  		bcc.w	loc_2CDC
00002F18 E18C                       		lsl.l	#8,d4
00002F1A 88C3                       		divu.w	d3,d4
00002F1C 7000                       		moveq	#0,d0
00002F1E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F22 6000                       		bra.s	loc_2CE6
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2CDC:				; XREF: CalcAngle
00002F24 E18B                       		lsl.l	#8,d3
00002F26 86C4                       		divu.w	d4,d3
00002F28 7040                       		moveq	#$40,d0
00002F2A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F2E                            
00002F2E                            loc_2CE6:
00002F2E 4A41                       		tst.w	d1
00002F30 6A00 0000                  		bpl.w	loc_2CF2
00002F34 4440                       		neg.w	d0
00002F36 0640 0080                  		addi.w	#$80,d0
00002F3A                            
00002F3A                            loc_2CF2:
00002F3A 4A42                       		tst.w	d2
00002F3C 6A00 0000                  		bpl.w	loc_2CFE
00002F40 4440                       		neg.w	d0
00002F42 0640 0100                  		addi.w	#$100,d0
00002F46                            
00002F46                            loc_2CFE:
00002F46 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F4A 4E75                       		rts	
00002F4C                            ; ===========================================================================
00002F4C                            
00002F4C                            loc_2D04:				; XREF: CalcAngle
00002F4C 303C 0040                  		move.w	#$40,d0
00002F50 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F54 4E75                       		rts	
00002F56                            ; End of function CalcAngle
00002F56                            
00002F56                            ; ===========================================================================
00002F56                            
00002F56                            Angle_Data:	incbin	misc\angles.bin
00003058                            
00003058                            ; ===========================================================================
00003058                            
00003058                            ; ---------------------------------------------------------------------------
00003058                            ; Sega screen
00003058                            ; ---------------------------------------------------------------------------
00003058                            
00003058                            SegaScreen:				; XREF: GameModeArray
00003058 103C 00E4                  		move.b	#$E4,d0
0000305C 6100 E55E                  		bsr.w	PlaySound_Special ; stop music
00003060 6100 E79C                  		bsr.w	ClearPLC
00003064 6100 F00C                  		bsr.w	Pal_FadeFrom
00003068 4DF9 00C0 0004             		lea	($C00004).l,a6
0000306E 3CBC 8004                  		move.w	#$8004,(a6)
00003072 3CBC 8230                  		move.w	#$8230,(a6)
00003076 3CBC 8407                  		move.w	#$8407,(a6)
0000307A 3CBC 8700                  		move.w	#$8700,(a6)
0000307E 3CBC 8B00                  		move.w	#$8B00,(a6)
00003082 4238 F64E                  		clr.b	($FFFFF64E).w
00003086 46FC 2700                  		move	#$2700,sr
0000308A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000308E 0200 00BF                  		andi.b	#$BF,d0
00003092 33C0 00C0 0004             		move.w	d0,($C00004).l
00003098 6100 E44A                  		bsr.w	ClearScreen
0000309C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030A6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030AC 6100 E5B2                  		bsr.w	NemDec
000030B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B6 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030BC 303C 0000                  		move.w	#0,d0
000030C0 6100 E87C                  		bsr.w	EniDec
000030C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000030CA 203C 6510 0003             		move.l	#$65100003,d0
000030D0 7217                       		moveq	#$17,d1
000030D2 7407                       		moveq	#7,d2
000030D4 6100 E56A                  		bsr.w	ShowVDPGraphics
000030D8 43F9 00FF 0180             		lea	($FF0180).l,a1
000030DE 203C 4000 0003             		move.l	#$40000003,d0
000030E4 7227                       		moveq	#$27,d1
000030E6 741B                       		moveq	#$1B,d2
000030E8 6100 E556                  		bsr.w	ShowVDPGraphics
000030EC 7000                       		moveq	#0,d0
000030EE 6100 F248                  		bsr.w	PalLoad2	; load Sega logo pallet
000030F2 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030FE 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003104 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000310A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000310E 0000 0040                  		ori.b	#$40,d0
00003112 33C0 00C0 0004             		move.w	d0,($C00004).l
00003118                            
00003118                            Sega_WaitPallet:
00003118 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000311E 6100 FAD0                  		bsr.w	DelayProgram
00003122 6100 F106                  		bsr.w	PalCycle_Sega
00003126 66F0                       		bne.s	Sega_WaitPallet
00003128                            
00003128 103C 00E1                  		move.b	#$E1,d0
0000312C 6100 E48E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003130 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003136 6100 FAB8                  		bsr.w	DelayProgram
0000313A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003140                            
00003140                            Sega_WaitEnd:
00003140 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003146 6100 FAA8                  		bsr.w	DelayProgram
0000314A 4A78 F614                  		tst.w	($FFFFF614).w
0000314E 6700                       		beq.s	Sega_GotoTitle
00003150 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003156 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003158                            
00003158                            Sega_GotoTitle:
00003158 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000315E 4E75                       		rts	
00003160                            ; ===========================================================================
00003160                            
00003160                            ; ---------------------------------------------------------------------------
00003160                            ; Title	screen
00003160                            ; ---------------------------------------------------------------------------
00003160                            
00003160                            TitleScreen:				; XREF: GameModeArray
00003160 103C 00E4                  		move.b	#$E4,d0
00003164 6100 E456                  		bsr.w	PlaySound_Special ; stop music
00003168 6100 E694                  		bsr.w	ClearPLC
0000316C 6100 EF04                  		bsr.w	Pal_FadeFrom
00003170 46FC 2700                  		move	#$2700,sr
00003174 6100 E3FC                  		bsr.w	SoundDriverLoad
00003178 4DF9 00C0 0004             		lea	($C00004).l,a6
0000317E 3CBC 8004                  		move.w	#$8004,(a6)
00003182 3CBC 8230                  		move.w	#$8230,(a6)
00003186 3CBC 8407                  		move.w	#$8407,(a6)
0000318A 3CBC 9001                  		move.w	#$9001,(a6)
0000318E 3CBC 9200                  		move.w	#$9200,(a6)
00003192 3CBC 8B03                  		move.w	#$8B03,(a6)
00003196 3CBC 8720                  		move.w	#$8720,(a6)
0000319A 4238 F64E                  		clr.b	($FFFFF64E).w
0000319E 6100 E344                  		bsr.w	ClearScreen
000031A2 43F8 D000                  		lea	($FFFFD000).w,a1
000031A6 7000                       		moveq	#0,d0
000031A8 323C 07FF                  		move.w	#$7FF,d1
000031AC                            
000031AC                            Title_ClrObjRam:
000031AC 22C0                       		move.l	d0,(a1)+
000031AE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031B2                            
000031B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BC 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000031C2 6100 E49C                  		bsr.w	NemDec
000031C6 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000031D0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000031D6 6100 E488                  		bsr.w	NemDec
000031DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000031E0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031E6 303C 0000                  		move.w	#0,d0
000031EA 6100 E752                  		bsr.w	EniDec
000031EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000031F4 203C 4000 0003             		move.l	#$40000003,d0
000031FA 7227                       		moveq	#$27,d1
000031FC 741B                       		moveq	#$1B,d2
000031FE 6100 E440                  		bsr.w	ShowVDPGraphics
00003202 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003206 7000                       		moveq	#0,d0
00003208 323C 001F                  		move.w	#$1F,d1
0000320C                            
0000320C                            Title_ClrPallet:
0000320C 22C0                       		move.l	d0,(a1)+
0000320E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003212                            
00003212 7003                       		moveq	#3,d0		; load Sonic's pallet
00003214 6100 F106                  		bsr.w	PalLoad1
00003218 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000321E 4EB9 0000 0000             		jsr	ObjectsLoad
00003224 4EB9 0000 0000             		jsr	BuildSprites
0000322A 6100 EDA0                  		bsr.w	Pal_FadeTo
0000322E 46FC 2700                  		move	#$2700,sr
00003232 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000323C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003242 6100 E41C                  		bsr.w	NemDec
00003246 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003250 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003256 6100 E408                  		bsr.w	NemDec
0000325A 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003264 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000326A 6100 E3F4                  		bsr.w	NemDec
0000326E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003274 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000327C 4BF9 0000 05F0             		lea	(Art_Text).l,a5
00003282 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003286                            
00003286                            Title_LoadText:
00003286 2C9D                       		move.l	(a5)+,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000328C                            
0000328C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003292 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003298 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000329E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032A4 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032B0 6100 0000                  		bsr.w	LevelSizeLoad
000032B4 6100 0000                  		bsr.w	DeformBgLayer
000032B8 43F8 B000                  		lea	($FFFFB000).w,a1
000032BC 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000032C2 303C 0000                  		move.w	#0,d0
000032C6 6100 E676                  		bsr.w	EniDec
000032CA 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000032D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D6 6100 E7E4                  		bsr.w	KosDec
000032DA 6100 0000                  		bsr.w	LevelLayoutLoad
000032DE 6100 ED92                  		bsr.w	Pal_FadeFrom
000032E2 46FC 2700                  		move	#$2700,sr
000032E6 6100 E1FC                  		bsr.w	ClearScreen
000032EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000032F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032F6 47F8 F708                  		lea	($FFFFF708).w,a3
000032FA 49F8 A440                  		lea	($FFFFA440).w,a4
000032FE 343C 6000                  		move.w	#$6000,d2
00003302 6100 0000                  		bsr.w	LoadTilesFromStart2
00003306 43F9 00FF 0000             		lea	($FF0000).l,a1
0000330C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003312 303C 0000                  		move.w	#0,d0
00003316 6100 E626                  		bsr.w	EniDec
0000331A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003320 203C 4206 0003             		move.l	#$42060003,d0
00003326 7221                       		moveq	#$21,d1
00003328 7415                       		moveq	#$15,d2
0000332A 6100 E314                  		bsr.w	ShowVDPGraphics
0000332E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003338 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000333E 6100 E320                  		bsr.w	NemDec
00003342 7001                       		moveq	#1,d0		; load title screen pallet
00003344 6100 EFD6                  		bsr.w	PalLoad1
00003348 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000334C 6100 E26E                  		bsr.w	PlaySound_Special
00003350 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003356 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000335C 43F8 D080                  		lea	($FFFFD080).w,a1
00003360 7000                       		moveq	#0,d0
00003362 323C 0007                  		move.w	#7,d1
00003366                            
00003366                            Title_ClrObjRam2:
00003366 22C0                       		move.l	d0,(a1)+
00003368 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000336C                            
0000336C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003372 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003378 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000337E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003384 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000338A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003390 4EB9 0000 0000             		jsr	ObjectsLoad
00003396 6100 0000                  		bsr.w	DeformBgLayer
0000339A 4EB9 0000 0000             		jsr	BuildSprites
000033A0 7000                       		moveq	#0,d0
000033A2 6100 E42E                  		bsr.w	LoadPLC2
000033A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033AC 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033B6 0000 0040                  		ori.b	#$40,d0
000033BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000033C0 6100 EC0A                  		bsr.w	Pal_FadeTo
000033C4                            
000033C4                            loc_317C:
000033C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033CA 6100 F824                  		bsr.w	DelayProgram
000033CE 4EB9 0000 0000             		jsr	ObjectsLoad
000033D4 6100 0000                  		bsr.w	DeformBgLayer
000033D8 4EB9 0000 0000             		jsr	BuildSprites
000033DE 6100 E79C                  		bsr.w	PalCycle_Title
000033E2 6100 E428                  		bsr.w	RunPLC_RAM
000033E6 3038 D008                  		move.w	($FFFFD008).w,d0
000033EA 5440                       		addq.w	#2,d0
000033EC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033F0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033F4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033FC 4E75                       		rts	
000033FE                            ; ===========================================================================
000033FE                            
000033FE                            Title_ChkRegion:
000033FE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003402 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003404 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000340A 6000                       		bra.s	Title_EnterCheat
0000340C                            ; ===========================================================================
0000340C                            
0000340C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000340C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003412                            
00003412                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003412 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003416 D0C0                       		adda.w	d0,a0
00003418 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000341C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003420 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003422 6600                       		bne.s	loc_3210	; if not, branch
00003424 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003428 4A00                       		tst.b	d0
0000342A 6600                       		bne.s	Title_CountC
0000342C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003430 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003434 E249                       		lsr.w	#1,d1
00003436 0241 0003                  		andi.w	#3,d1
0000343A 6700                       		beq.s	Title_PlayRing
0000343C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003440 6A00                       		bpl.s	Title_PlayRing
00003442 7201                       		moveq	#1,d1
00003444 1181 1001                  		move.b	d1,1(a0,d1.w)
00003448                            
00003448                            Title_PlayRing:
00003448 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000344E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003452 6100 E168                  		bsr.w	PlaySound_Special
00003456 6000                       		bra.s	Title_CountC
00003458                            ; ===========================================================================
00003458                            
00003458                            loc_3210:				; XREF: Title_EnterCheat
00003458 4A00                       		tst.b	d0
0000345A 6700                       		beq.s	Title_CountC
0000345C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003462 6700                       		beq.s	Title_CountC
00003464 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000346A                            
0000346A                            Title_CountC:
0000346A 1038 F605                  		move.b	($FFFFF605).w,d0
0000346E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003472 6700                       		beq.s	loc_3230	; if not, branch
00003474 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003478                            
00003478                            loc_3230:
00003478 4A78 F614                  		tst.w	($FFFFF614).w
0000347C 6700 0000                  		beq.w	Demo
00003480 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003486 6700 FF3C                  		beq.w	loc_317C	; if not, branch
0000348A                            
0000348A                            Title_ChkLevSel:
0000348A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000348E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003492 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003498 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000349C 7002                       		moveq	#2,d0
0000349E 6100 EE98                  		bsr.w	PalLoad2	; load level select pallet
000034A2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034A6 7000                       		moveq	#0,d0
000034A8 323C 00DF                  		move.w	#$DF,d1
000034AC                            
000034AC                            Title_ClrScroll:
000034AC 22C0                       		move.l	d0,(a1)+
000034AE 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000034B2                            
000034B2 21C0 F616                  		move.l	d0,($FFFFF616).w
000034B6 46FC 2700                  		move	#$2700,sr
000034BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C0 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000034CA 323C 03FF                  		move.w	#$3FF,d1
000034CE                            
000034CE                            Title_ClrVram:
000034CE 2C80                       		move.l	d0,(a6)
000034D0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000034D4                            
000034D4 6100 0000                  		bsr.w	LevSelTextLoad
000034D8                            		
000034D8                            		; sound test fix
000034D8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034DC 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034E2 363C E65F                  		move.w	#$E680-$21,d3
000034E6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034EA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034EE 6000 0000                  		bra.w	LevelSelect
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            ; Level	Select
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            YouAreAnIdiot:
000034F2 6100 DFF0                  		bsr.w	ClearScreen
000034F6                            		
000034F6 4DF9 00C0 0004             		lea	($C00004).l,a6
000034FC 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003500                            		
00003500 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000350A 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003510 6100 E14E                  		bsr.w	NemDec
00003514 43F9 00FF 0000             		lea	($FF0000).l,a1
0000351A 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003520 303C 0000                  		move.w	#0,d0
00003524 6100 E418                  		bsr.w	EniDec
00003528 43F9 00FF 0000             		lea	($FF0000).l,a1
0000352E 203C 4304 0003             		move.l	#$43040003,d0
00003534 7223                       		moveq	#35,d1
00003536 740D                       		moveq	#13,d2
00003538 6100 E106                  		bsr.w	ShowVDPGraphics
0000353C 7014                       		moveq	#20,d0
0000353E 6100 EDF8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003542                            		
00003542 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
00003546 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000354A                            	@wait:
0000354A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003550 6100 F69E                  		bsr.w	DelayProgram
00003554 60F4                       		bra.s	@wait
00003556                            LevelSelect:
00003556 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000355C 6100 F692                  		bsr.w	DelayProgram
00003560 6100 0000                  		bsr.w	LevSelControls
00003564 6100 E2A6                  		bsr.w	RunPLC_RAM
00003568 4AB8 F680                  		tst.l	($FFFFF680).w
0000356C 66E8                       		bne.s	LevelSelect
0000356E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003574 67E0                       		beq.s	LevelSelect	; if not, branch
00003576 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000357A 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
0000357E 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
00003582                            		
00003582 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003586 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003588                            		
00003588 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000358C 0640 0080                  		addi.w	#$80,d0
00003590 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003594                            		
00003594 4EB9 0000 0000             		jsr		ShowNow_Playing
0000359A 60BA                       		bra.s	LevelSelect
0000359C                            ; ===========================================================================
0000359C                            
0000359C                            LevSel_Ending:				; XREF: LevelSelect
0000359C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035A2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035A8 4E75                       		rts	
000035AA                            ; ===========================================================================
000035AA                            
000035AA                            LevSel_Credits:				; XREF: LevelSelect
000035AA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000035B0 103C 0091                  		move.b	#$91,d0
000035B4 6100 E006                  		bsr.w	PlaySound_Special ; play credits music
000035B8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000035BE 4E75                       		rts	
000035C0                            ; ===========================================================================
000035C0                            
000035C0                            LevSel_Level_SS:			; XREF: LevelSelect
000035C0 D040                       		add.w	d0,d0
000035C2 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000035C6 6B00 FF8E                  		bmi.w	LevelSelect
000035CA 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000035CE 6600                       		bne.s	LevSel_Level	; if not, branch
000035D0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000035D6 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000035DA 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000035E0 7000                       		moveq	#0,d0
000035E2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035E6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035EA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035EE 4E75                       		rts	
000035F0                            ; ===========================================================================
000035F0                            
000035F0                            LevSel_Level:				; XREF: LevSel_Level_SS
000035F0 0240 3FFF                  		andi.w	#$3FFF,d0
000035F4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035F8                            
000035F8                            PlayLevel:				; XREF: ROM:00003246j ...
000035F8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035FE 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003604 7000                       		moveq	#0,d0
00003606 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000360A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000360E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003612 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003616 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000361A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000361E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003622 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003626 103C 00E0                  		move.b	#$E0,d0
0000362A 6100 DF90                  		bsr.w	PlaySound_Special ; fade out music
0000362E 4E75                       		rts	
00003630                            ; ===========================================================================
00003630                            ; ---------------------------------------------------------------------------
00003630                            ; Level	select - level pointers
00003630                            ; ---------------------------------------------------------------------------
00003630                            LSelectPointers:
00003630                            		incbin	misc\ls_point.bin
0000365A                            		even
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            ; Level	select codes
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            LevelSelectCode_J:
0000365A                            		incbin	misc\ls_jcode.bin
00003660                            		even
00003660                            
00003660                            LevelSelectCode_US:
00003660                            		incbin	misc\ls_ucode.bin
00003666                            		even
00003666                            ; ===========================================================================
00003666                            
00003666                            ; ---------------------------------------------------------------------------
00003666                            ; Demo mode
00003666                            ; ---------------------------------------------------------------------------
00003666                            
00003666                            Demo:					; XREF: TitleScreen
00003666 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000366C                            
0000366C                            loc_33B6:				; XREF: loc_33E4
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F57C                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	DeformBgLayer
0000367A 6100 E4E0                  		bsr.w	PalCycle_Load
0000367E 6100 E18C                  		bsr.w	RunPLC_RAM
00003682 3038 D008                  		move.w	($FFFFD008).w,d0
00003686 5440                       		addq.w	#2,d0
00003688 31C0 D008                  		move.w	d0,($FFFFD008).w
0000368C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003690 6500                       		bcs.s	loc_33E4
00003692 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003698 4E75                       		rts	
0000369A                            ; ===========================================================================
0000369A                            
0000369A                            loc_33E4:				; XREF: Demo
0000369A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036A0 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
000036A4 4A78 F614                  		tst.w	($FFFFF614).w
000036A8 6600 FFC2                  		bne.w	loc_33B6
000036AC 103C 00E0                  		move.b	#$E0,d0
000036B0 6100 DF0A                  		bsr.w	PlaySound_Special ; fade out music
000036B4 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000036B8 0240 0007                  		andi.w	#7,d0
000036BC D040                       		add.w	d0,d0
000036BE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000036C2 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000036C6 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000036CA 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000036D0 6500                       		bcs.s	loc_3422	; if yes, branch
000036D2 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000036D8                            
000036D8                            loc_3422:
000036D8 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000036DE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000036E4 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000036E8 6600                       		bne.s	Demo_Level	; if not, branch
000036EA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036F0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036F4 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036F8                            
000036F8                            Demo_Level:
000036F8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000036FE 7000                       		moveq	#0,d0
00003700 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003704 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003708 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000370C 4E75                       		rts	
0000370E                            ; ===========================================================================
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            ; Levels used in demos
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003716                            		even
00003716                            
00003716                            ; ---------------------------------------------------------------------------
00003716                            ; Subroutine to	change what you're selecting in the level select
00003716                            ; ---------------------------------------------------------------------------
00003716                            
00003716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003716                            
00003716                            
00003716                            LevSelControls:				; XREF: LevelSelect
00003716 1238 F605                  		move.b	($FFFFF605).w,d1
0000371A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000371E 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003720 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003724 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003726                            
00003726                            LevSel_UpDown:
00003726 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000372C 1238 F604                  		move.b	($FFFFF604).w,d1
00003730 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003734 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003736 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000373A 0801 0000                  		btst	#0,d1		; is up	pressed?
0000373E 6700                       		beq.s	LevSel_Down	; if not, branch
00003740 5346                       		subq.w	#1,d6		; move up 1 selection
00003742 6400                       		bcc.s	LevSel_Down
00003744 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003746                            
00003746                            LevSel_Down:
00003746 0801 0001                  		btst	#1,d1		; is down pressed?
0000374A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000374C 5246                       		addq.w	#1,d6		; move down 1 selection
0000374E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003752 6500                       		bcs.s	LevSel_Refresh
00003754 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003756 6000                       		bra.s	LevSel_Refresh
00003758                            		
00003758                            LevSel_GoLR:
00003758 0801 0002                  		btst	#2,d1		; is left pressed?
0000375C 6700                       		beq.s	LevSel_GoRight	; if not, branch
0000375E 0446 0000                  		sub.w	#lsrow2size,d6
00003762 64E2                       		bcc.s	LevSel_Down
00003764 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003768 6000                       		bra.s	LevSel_Refresh
0000376A                            LevSel_GoRight:
0000376A 0646 0000                  		add.w	#lsrow1size,d6
0000376E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003772 6500                       		bcs.s	LevSel_Refresh
00003774 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003778                            ; ===========================================================================
00003778                            LevSel_Refresh:
00003778 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000377C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003780 363C C65F                  		move.w	#$C680-$21,d3
00003784 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003788 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000378C 4E75                       		rts	
0000378E                            		
0000378E                            LevSel_SndTest:				; XREF: LevSelControls
0000378E 1238 F605                  		move.b	($FFFFF605).w,d1
00003792 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003796 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003798 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
0000379E 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037A0                            		
000037A0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037A4 0801 0002                  		btst	#2,d1		; is left pressed?
000037A8 6700                       		beq.s	LevSel_Right	; if not, branch
000037AA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000037AC 6400                       		bcc.s	LevSel_Right
000037AE 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000037B0                            
000037B0                            LevSel_Right:
000037B0 0801 0003                  		btst	#3,d1		; is right pressed?
000037B4 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000037B6 5240                       		addq.w	#1,d0		; add 1	to sound test
000037B8 0C40 0050                  		cmpi.w	#$50,d0
000037BC 6500                       		bcs.s	LevSel_Refresh2
000037BE 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000037C0                            
000037C0                            LevSel_Refresh2:
000037C0 363C C65F                  		move.w	#$C680-$21,d3
000037C4 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000037C8 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037CC                            
000037CC                            LevSel_NoMove:
000037CC 4E75                       		rts	
000037CE                            ; End of function LevSelControls
000037CE                            
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            ; Subroutine to load level select text
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            
000037CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037CE =60860003                  lsscrpos = $60860003
000037CE =00240000                  lsoff = $240000
000037CE =64C00003                  lsstpos = lsscrpos+$43A0000
000037CE                            
000037CE                            LevSelTextLoad_loop:
000037CE 2D44 0004                  		move.l	d4,4(a6)
000037D2 6100 0000                  		bsr.w	LevSel_ChgLine
000037D6 0684 0080 0000             		addi.l	#$800000,d4
000037DC 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037E0 4E75                       		rts
000037E2                            LevSelTextLoad:				; XREF: TitleScreen
000037E2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000037EE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037F2 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037F8                            		
000037F8 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037FC 61D0                       		bsr.s	LevSelTextLoad_loop
000037FE                            		
000037FE                            		
000037FE 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003804 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003808 61C4                       		bsr.s	LevSelTextLoad_loop
0000380A 363C C65F                  		move.w	#$C680-$21,d3
0000380E                            		
0000380E                            LevSelHighlightCode:
0000380E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003814 7000                       		moveq	#0,d0
00003816 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000381A 3200                       		move.w	d0,d1
0000381C 283C 6086 0003             		move.l	#lsscrpos,d4
00003822                            		
00003822 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003826 6D00                       		blt.s	@notsecond
00003828                            		
00003828 0440 0000                  		sub.w	#lsrow1size,d0
0000382C 0684 0024 0000             		addi.l	#lsoff,d4
00003832                            	@notsecond:
00003832 EF48                       		lsl.w	#7,d0
00003834 4840                       		swap	d0
00003836 D880                       		add.l	d0,d4
00003838 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000383E E749                       		lsl.w	#3,d1
00003840 D241                       		add.w	d1,d1
00003842 D2C1                       		adda.w	d1,a1
00003844 2D44 0004                  		move.l	d4,4(a6)
00003848 6100 0000                  		bsr.w	LevSel_ChgLine
0000384C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003852 6700                       		beq.s	LevSelSndTest
00003854 4E75                       		rts
00003856                            
00003856                            LevSelSndTest:
00003856 0643 0030                  		add.w	#$30,d3
0000385A 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003864 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003868 0640 0080                  		addi.w	#$80,d0
0000386C 1400                       		move.b	d0,d2
0000386E E808                       		lsr.b	#4,d0
00003870 6100 0000                  		bsr.w	LevSel_ChgSnd
00003874 1002                       		move.b	d2,d0
00003876 6100 0000                  		bsr.w	LevSel_ChgSnd
0000387A 4E75                       		rts	
0000387C                            ; End of function LevSelTextLoad
0000387C                            
0000387C                            
0000387C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000387C                            
0000387C                            
0000387C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000387C 0240 000F                  		andi.w	#$F,d0
00003880 0C00 000A                  		cmpi.b	#$A,d0
00003884 6500                       		bcs.s	loc_3580
00003886 5E00                       		addi.b	#7,d0
00003888                            
00003888                            loc_3580:
00003888 D043                       		add.w	d3,d0
0000388A 3C80                       		move.w	d0,(a6)
0000388C 4E75                       		rts	
0000388E                            ; End of function LevSel_ChgSnd
0000388E                            
0000388E                            
0000388E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000388E                            
0000388E                            
0000388E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000388E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003890                            
00003890                            @loop:
00003890 7000                       		moveq	#0,d0
00003892 1019                       		move.b	(a1)+,d0
00003894 0C00 0020                  		cmpi.b	#$20,d0
00003898 6E00                       		bgt.s	@draw
0000389A 3CBC 0000                  		move.w	#0,(a6)
0000389E 51CA FFF0                  		dbf	d2,@loop
000038A2 4E75                       		rts	
000038A4                            ; ===========================================================================
000038A4                            
000038A4                            @draw:				; XREF: LevSel_ChgLine
000038A4 D043                       		add.w	d3,d0
000038A6 3C80                       		move.w	d0,(a6)
000038A8 51CA FFE6                  		dbf	d2,@loop
000038AC 4E75                       		rts	
000038AE                            ; End of function LevSel_ChgLine
000038AE                            		
000038AE                            CStringSlop_draw:
000038AE D043                       		add.w	d3,d0
000038B0 3C80                       		move.w	d0,(a6)
000038B2                            CStringSlop:				; XREF: LevSelTextLoad
000038B2 7000                       		moveq	#0,d0
000038B4 1019                       		move.b	(a1)+,d0
000038B6 0C00 0020                  		cmpi.b	#$20,d0
000038BA 6EF2                       		bgt.s	CStringSlop_draw
000038BC 4A00                       		tst.b	d0
000038BE 6700                       		beq.s	@end
000038C0 3CBC 0000                  		move.w	#0,(a6)
000038C4 60EC                       		bra.s	CStringSlop
000038C6                            	@end:
000038C6 4E75                       		rts
000038C8                            ; End of function LevSel_ChgLine
000038C8                            
000038C8                            ; ===========================================================================
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            LevelMenuText:	
000038C8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000038D8 2020 2020 2020 2020 2020+          dc.b    "               2"
000038E8 2020 2020 2020 2020 2020+          dc.b    "               3"
000038F8 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
00003908 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
00003918 2020 2020 2020 2020 2020+          dc.b    "               3"
00003928 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003938 2020 2020 2020 2020 2020+          dc.b    "               2"
00003948 2020 2020 2020 2020 2020+          dc.b    "               3"
00003958 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
00003968 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
00003978 2020 2020 2020 2020 2020+          dc.b    "               3"
00003988                            LMTSecondRow:
00003988 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003998 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
000039A8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B8 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000039C8 2020 2020 2020 2020 2020+          dc.b    "               2"
000039D8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000039F8 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A08 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A18 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A28 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A38                            LMTSelectableEnd:
00003A38 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A48                            LMTEnd:
00003A48                            
00003A48                            
00003A48 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003A48 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003A48 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003A48                            ; just to not break these
00003A48 =00000014                  lssndtest = lsrow2size+8
00003A48 =00000015                  lswifi = lsrow2size+9
00003A48                            
00003A48 =6C820003                  nppos = $6C820003
00003A48                            Now_Playing:
00003A48 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A58                            		even
00003A58                            NP_Track:
00003A58 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A60                            		even
00003A60                            NP_SFX:
00003A60 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003A68                            		even
00003A68                            
00003A68                            ShowNow_Playing:
00003A68 1C00                       		move.b	d0,d6
00003A6A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003A6E 43FA FFD8                  		lea	Now_Playing(pc),a1
00003A72 4DF9 00C0 0000             		lea		($C00000).l,a6
00003A78 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003A80 6100 FE30                  		bsr.w	CStringSlop
00003A84                            		
00003A84 43FA FFD2                  		lea	NP_Track(pc),a1
00003A88 0C06 00A0                  		cmpi.b	#$A0,d6
00003A8C 6D00                       		blt.s	@track
00003A8E                            		
00003A8E 43FA FFD0                  		lea	NP_SFX(pc),a1
00003A92                            	@track:
00003A92 6100 FE1E                  		bsr.w	CStringSlop
00003A96                            		
00003A96 0643 0030                  		add.w	#$30,d3
00003A9A 1006                       		move.b	d6,d0
00003A9C 1400                       		move.b	d0,d2
00003A9E E808                       		lsr.b	#4,d0
00003AA0 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003AA4 1002                       		move.b	d2,d0
00003AA6 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003AAA 4E75                       		rts	
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            ; Music	playlist
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            MusicList1:	incbin	misc\muslist1.bin
00003AB4                            		even
00003AB4                            MusicList2:	incbin	misc\muslist2.bin
00003ABA                            		even
00003ABA                            MusicList3:	incbin	misc\muslist3.bin
00003AC0                            		even
00003AC0                            MusicList4:	incbin	misc\muslist4.bin
00003AC6                            		even
00003AC6                            ; ===========================================================================
00003AC6                            
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            ; Level
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            
00003AC6                            Level:					; XREF: GameModeArray
00003AC6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003ACC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AD0 6B00                       		bmi.s	loc_37B6
00003AD2 103C 00E0                  		move.b	#$E0,d0
00003AD6 6100 DAE4                  		bsr.w	PlaySound_Special ; fade out music
00003ADA                            
00003ADA                            loc_37B6:
00003ADA 6100 DD22                  		bsr.w	ClearPLC
00003ADE 6100 E592                  		bsr.w	Pal_FadeFrom
00003AE2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AE6 6B00                       		bmi.s	Level_ClrRam
00003AE8 46FC 2700                  		move	#$2700,sr
00003AEC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003AF6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003AFC 6100 DB62                  		bsr.w	NemDec
00003B00 46FC 2300                  		move	#$2300,sr
00003B04 7000                       		moveq	#0,d0
00003B06 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B0A E948                       		lsl.w	#4,d0
00003B0C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B12 45F2 0000                  		lea	(a2,d0.w),a2
00003B16 7000                       		moveq	#0,d0
00003B18 1012                       		move.b	(a2),d0
00003B1A 6700                       		beq.s	loc_37FC
00003B1C 6100 DC82                  		bsr.w	LoadPLC		; load level patterns
00003B20                            
00003B20                            loc_37FC:
00003B20 7001                       		moveq	#1,d0
00003B22 6100 DC7C                  		bsr.w	LoadPLC		; load standard	patterns
00003B26                            
00003B26                            Level_ClrRam:
00003B26 43F8 D000                  		lea	($FFFFD000).w,a1
00003B2A 7000                       		moveq	#0,d0
00003B2C 323C 07FF                  		move.w	#$7FF,d1
00003B30                            
00003B30                            Level_ClrObjRam:
00003B30 22C0                       		move.l	d0,(a1)+
00003B32 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B36                            
00003B36 43F8 F628                  		lea	($FFFFF628).w,a1
00003B3A 7000                       		moveq	#0,d0
00003B3C 323C 0015                  		move.w	#$15,d1
00003B40                            
00003B40                            Level_ClrVars:
00003B40 22C0                       		move.l	d0,(a1)+
00003B42 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B46                            
00003B46 43F8 F700                  		lea	($FFFFF700).w,a1
00003B4A 7000                       		moveq	#0,d0
00003B4C 323C 003F                  		move.w	#$3F,d1
00003B50                            
00003B50                            Level_ClrVars2:
00003B50 22C0                       		move.l	d0,(a1)+
00003B52 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003B56                            
00003B56 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003B5A 7000                       		moveq	#0,d0
00003B5C 323C 0047                  		move.w	#$47,d1
00003B60                            
00003B60                            Level_ClrVars3:
00003B60 22C0                       		move.l	d0,(a1)+
00003B62 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003B66                            
00003B66 46FC 2700                  		move	#$2700,sr
00003B6A 6100 D978                  		bsr.w	ClearScreen
00003B6E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003B74 3CBC 8B03                  		move.w	#$8B03,(a6)
00003B78 3CBC 8230                  		move.w	#$8230,(a6)
00003B7C 3CBC 8407                  		move.w	#$8407,(a6)
00003B80 3CBC 857C                  		move.w	#$857C,(a6)
00003B84 3CBC 9001                  		move.w	#$9001,(a6)
00003B88 3CBC 8004                  		move.w	#$8004,(a6)
00003B8C 3CBC 8720                  		move.w	#$8720,(a6)
00003B90 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003B96 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BA0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003BA2 3CBC 8014                  		move.w	#$8014,(a6)
00003BA6 7000                       		moveq	#0,d0
00003BA8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003BAC D040                       		add.w	d0,d0
00003BAE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003BB4 3031 0000                  		move.w	(a1,d0.w),d0
00003BB8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003BBC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003BC0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003BC4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003BC8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003BCC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003BD2                            
00003BD2                            Level_LoadPal:
00003BD2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003BD8 46FC 2300                  		move	#$2300,sr
00003BDC 7003                       		moveq	#3,d0
00003BDE 6100 E758                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003BE2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BE8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003BEA 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003BEC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003BF2 6600                       		bne.s	Level_WaterPal	; if not, branch
00003BF4 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003BF6                            
00003BF6                            Level_WaterPal:
00003BF6 6100 E758                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003BFA 4A38 FE30                  		tst.b	($FFFFFE30).w
00003BFE 6700                       		beq.s	Level_GetBgm
00003C00 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C06                            
00003C06                            ; NineKode begins here - How to play different songs on different acts
00003C06                             
00003C06                            Level_GetBgm:
00003C06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C0A 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C0E 7000                       		moveq	#0,d0
00003C10 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C14                             
00003C14 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C1A 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C1C 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003C22 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C24                             
00003C24                            Level_GetBgm2:
00003C24 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003C2A 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003C2C 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003C32 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C34                             
00003C34                            Level_GetBgm3:
00003C34 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003C3A 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003C3C 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003C42 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C44                             
00003C44                            Level_GetBgm4:
00003C44 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003C4A 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003C4C 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003C52                             
00003C52                            Level_PlayBgm:
00003C52 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003C56 6100 D95E                  		bsr.w	PlaySound	; play music
00003C5A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003C60                             
00003C60                            ; NineKode ends here
00003C60                            
00003C60                            Level_TtlCard:
00003C60 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003C66 6100 EF88                  		bsr.w	DelayProgram
00003C6A 4EB9 0000 0000             		jsr	ObjectsLoad
00003C70 4EB9 0000 0000             		jsr	BuildSprites
00003C76 6100 DB94                  		bsr.w	RunPLC_RAM
00003C7A 3038 D108                  		move.w	($FFFFD108).w,d0
00003C7E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003C82 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003C84 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003C88 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003C8A 4EB9 0000 0000             		jsr	Hud_Base
00003C90                            
00003C90                            loc_3946:
00003C90 7003                       		moveq	#3,d0
00003C92 6100 E688                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003C96 6100 0000                  		bsr.w	LevelSizeLoad
00003C9A 6100 0000                  		bsr.w	DeformBgLayer
00003C9E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003CA4 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003CA8 6100 0000                  		bsr.w	LoadTilesFromStart
00003CAC 4EB9 0000 0000             		jsr	FloorLog_Unk
00003CB2 6100 0000                  		bsr.w	ColIndexLoad
00003CB6 6100 0000                  		bsr.w	LZWaterEffects
00003CBA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003CC0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CC4 6B00                       		bmi.s	Level_ChkDebug
00003CC6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003CCC                            
00003CCC                            Level_ChkDebug:
00003CCC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003CD0 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CD2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003CD8 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CDA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003CE0                            
00003CE0                            Level_ChkWater:
00003CE0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003CE6 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003CEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CF2 6600                       		bne.s	Level_LoadObj	; if not, branch
00003CF4 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003CFA 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D00 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D06 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D0C                            
00003D0C                            Level_LoadObj:
00003D0C 4EB9 0000 0000             		jsr	ObjPosLoad
00003D12 4EB9 0000 0000             		jsr	ObjectsLoad
00003D18 4EB9 0000 0000             		jsr	BuildSprites
00003D1E 7000                       		moveq	#0,d0
00003D20 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003D24 6600                       		bne.s	loc_39E8	; if yes, branch
00003D26 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D2A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D2E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003D32                            
00003D32                            loc_39E8:
00003D32 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003D36 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003D3A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003D3E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003D42                            		; move.b	d0,($FFFFFE2F).w
00003D42 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003D48 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003D4C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003D50 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003D54 6100 0000                  		bsr.w	OscillateNumInit
00003D58 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003D5E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003D64 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003D6A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003D70 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003D76 7000                       		moveq	#0,d0
00003D78 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D7C E548                       		lsl.w	#2,d0
00003D7E 2271 0000                  		movea.l	(a1,d0.w),a1
00003D82 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003D86 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003D88 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003D8E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003D92 5340                       		subq.w	#1,d0
00003D94 E548                       		lsl.w	#2,d0
00003D96 2271 0000                  		movea.l	(a1,d0.w),a1
00003D9A                            
00003D9A                            Level_Demo:
00003D9A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003DA0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003DA4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003DAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DAE 6A00                       		bpl.s	Level_ChkWaterPal
00003DB0 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003DB6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003DBC 6600                       		bne.s	Level_ChkWaterPal
00003DBE 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003DC4                            
00003DC4                            Level_ChkWaterPal:
00003DC4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003DCA 6600                       		bne.s	Level_Delay	; if not, branch
00003DCC 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003DCE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003DD4 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003DD6 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003DD8                            
00003DD8                            Level_WaterPal2:
00003DD8 6100 E592                  		bsr.w	PalLoad4_Water
00003DDC                            
00003DDC                            Level_Delay:
00003DDC 323C 0003                  		move.w	#3,d1
00003DE0                            
00003DE0                            Level_DelayLoop:
00003DE0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DE6 6100 EE08                  		bsr.w	DelayProgram
00003DEA 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003DEE                            
00003DEE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003DF4 6100 E1DC                  		bsr.w	Pal_FadeTo2
00003DF8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFC 6B00                       		bmi.s	Level_ClrCardArt
00003DFE 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E02 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E06 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E0A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E0E 6000                       		bra.s	Level_StartGame
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            Level_ClrCardArt:
00003E10 7002                       		moveq	#2,d0
00003E12 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003E18 7000                       		moveq	#0,d0
00003E1A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E1E 0640 0015                  		addi.w	#$15,d0
00003E22 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003E28                            
00003E28                            Level_StartGame:
00003E28 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003E2E                            
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            ; Main level loop (when	all title card and loading sequences are finished)
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            
00003E2E                            Level_MainLoop:
00003E2E 6100 D798                  		bsr.w	PauseGame
00003E32 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E38 6100 EDB6                  		bsr.w	DelayProgram
00003E3C 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003E40 6100 0000                  		bsr.w	MoveSonicInDemo
00003E44 6100 0000                  		bsr.w	LZWaterEffects
00003E48 4EB9 0000 0000             		jsr	ObjectsLoad
00003E4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00003E52 6600                       		bne.s	loc_3B10
00003E54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E5A 6400                       		bcc.s	loc_3B14
00003E5C                            
00003E5C                            loc_3B10:
00003E5C 6100 0000                  		bsr.w	DeformBgLayer
00003E60                            
00003E60                            loc_3B14:
00003E60 4EB9 0000 0000             		jsr	BuildSprites
00003E66 4EB9 0000 0000             		jsr	ObjPosLoad
00003E6C 6100 DCEE                  		bsr.w	PalCycle_Load
00003E70 6100 D99A                  		bsr.w	RunPLC_RAM
00003E74 6100 0000                  		bsr.w	OscillateNumDo
00003E78 6100 0000                  		bsr.w	ChangeRingFrame
00003E7C 6100 0000                  		bsr.w	SignpostArtLoad
00003E80 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E86 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003E88 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003E8C 6600 FC38                  		bne.w	Level		; if yes, branch
00003E90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003E96 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003E9A 4E75                       		rts	
00003E9C                            ; ===========================================================================
00003E9C                            
00003E9C                            Level_ChkDemo:				; XREF: Level_MainLoop
00003E9C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003EA0 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003EA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003EA6 6700                       		beq.s	Level_EndDemo	; if not, branch
00003EA8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003EAE 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003EB2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EB8 4E75                       		rts	
00003EBA                            ; ===========================================================================
00003EBA                            
00003EBA                            Level_EndDemo:				; XREF: Level_ChkDemo
00003EBA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003EC0 6600                       		bne.s	loc_3B88	; if not, branch
00003EC2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003ECC 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003ECE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003ED4                            
00003ED4                            loc_3B88:
00003ED4 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003EDA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003EE0 4278 F794                  		clr.w	($FFFFF794).w
00003EE4                            
00003EE4                            loc_3B98:
00003EE4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EEA 6100 ED04                  		bsr.w	DelayProgram
00003EEE 6100 0000                  		bsr.w	MoveSonicInDemo
00003EF2 4EB9 0000 0000             		jsr	ObjectsLoad
00003EF8 4EB9 0000 0000             		jsr	BuildSprites
00003EFE 4EB9 0000 0000             		jsr	ObjPosLoad
00003F04 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F08 6A00                       		bpl.s	loc_3BC8
00003F0A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F10 6100 E180                  		bsr.w	Pal_FadeOut
00003F14                            
00003F14                            loc_3BC8:
00003F14 4A78 F614                  		tst.w	($FFFFF614).w
00003F18 66CA                       		bne.s	loc_3B98
00003F1A 4E75                       		rts	
00003F1C                            ; ===========================================================================
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            
00003F1C                            LZWaterEffects:				; XREF: Level
00003F1C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003F22 6600                       		bne.s	locret_3C28	; if not, branch
00003F24 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F2A 6400                       		bcc.s	LZMoveWater
00003F2C 6100 0000                  		bsr.w	LZWindTunnels
00003F30 6100 0000                  		bsr.w	LZWaterSlides
00003F34 6100 0000                  		bsr.w	LZDynamicWater
00003F38                            
00003F38                            LZMoveWater:
00003F38 4238 F64E                  		clr.b	($FFFFF64E).w
00003F3C 7000                       		moveq	#0,d0
00003F3E 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003F42 E248                       		lsr.w	#1,d0
00003F44 D078 F648                  		add.w	($FFFFF648).w,d0
00003F48 31C0 F646                  		move.w	d0,($FFFFF646).w
00003F4C 3038 F646                  		move.w	($FFFFF646).w,d0
00003F50 9078 F704                  		sub.w	($FFFFF704).w,d0
00003F54 6400                       		bcc.s	loc_3C1A
00003F56 4A40                       		tst.w	d0
00003F58 6A00                       		bpl.s	loc_3C1A
00003F5A 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003F60 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003F66                            
00003F66                            loc_3C1A:
00003F66 0C40 00DF                  		cmpi.w	#$DF,d0
00003F6A 6500                       		bcs.s	loc_3C24
00003F6C 303C 00DF                  		move.w	#$DF,d0
00003F70                            
00003F70                            loc_3C24:
00003F70 11C0 F625                  		move.b	d0,($FFFFF625).w
00003F74                            
00003F74                            locret_3C28:
00003F74 4E75                       		rts	
00003F76                            ; ===========================================================================
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            ; Labyrinth default water heights
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            WaterHeight:	incbin	misc\lz_heigh.bin
00003F7E                            		even
00003F7E                            ; ===========================================================================
00003F7E                            
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            ; Labyrinth dynamic water routines
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            
00003F7E                            LZDynamicWater:				; XREF: LZWaterEffects
00003F7E 7000                       		moveq	#0,d0
00003F80 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F84 D040                       		add.w	d0,d0
00003F86 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003F8A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003F8E 7200                       		moveq	#0,d1
00003F90 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003F94 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003F98 9078 F648                  		sub.w	($FFFFF648).w,d0
00003F9C 6700                       		beq.s	locret_3C5A
00003F9E 6400                       		bcc.s	loc_3C56
00003FA0 4441                       		neg.w	d1
00003FA2                            
00003FA2                            loc_3C56:
00003FA2 D378 F648                  		add.w	d1,($FFFFF648).w
00003FA6                            
00003FA6                            locret_3C5A:
00003FA6 4E75                       		rts	
00003FA8                            ; ===========================================================================
00003FA8 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003FAA 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003FAC 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003FAE 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003FB0                            ; ===========================================================================
00003FB0                            
00003FB0                            DynWater_LZ1:				; XREF: DynWater_Index
00003FB0 3038 F700                  		move.w	($FFFFF700).w,d0
00003FB4 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003FB8 6600                       		bne.s	loc_3CD0
00003FBA 323C 00B8                  		move.w	#$B8,d1
00003FBE 0C40 0600                  		cmpi.w	#$600,d0
00003FC2 6500                       		bcs.s	loc_3CB4
00003FC4 323C 0108                  		move.w	#$108,d1
00003FC8 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003FCE 6500                       		bcs.s	loc_3CBA
00003FD0 0C40 0C00                  		cmpi.w	#$C00,d0
00003FD4 6500                       		bcs.s	loc_3CB4
00003FD6 323C 0318                  		move.w	#$318,d1
00003FDA 0C40 1080                  		cmpi.w	#$1080,d0
00003FDE 6500                       		bcs.s	loc_3CB4
00003FE0 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003FE6 323C 05C8                  		move.w	#$5C8,d1
00003FEA 0C40 1380                  		cmpi.w	#$1380,d0
00003FEE 6500                       		bcs.s	loc_3CB4
00003FF0 323C 03A8                  		move.w	#$3A8,d1
00003FF4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003FF8 6600                       		bne.s	loc_3CB4
00003FFA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004000                            
00004000                            loc_3CB4:
00004000 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004004 4E75                       		rts	
00004006                            ; ===========================================================================
00004006                            
00004006                            loc_3CBA:				; XREF: DynWater_LZ1
00004006 0C40 0C80                  		cmpi.w	#$C80,d0
0000400A 65F4                       		bcs.s	loc_3CB4
0000400C 323C 00E8                  		move.w	#$E8,d1
00004010 0C40 1500                  		cmpi.w	#$1500,d0
00004014 65EA                       		bcs.s	loc_3CB4
00004016 323C 0108                  		move.w	#$108,d1
0000401A 60E4                       		bra.s	loc_3CB4
0000401C                            ; ===========================================================================
0000401C                            
0000401C                            loc_3CD0:				; XREF: DynWater_LZ1
0000401C 5302                       		subq.b	#1,d2
0000401E 6600                       		bne.s	locret_3CF4
00004020 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004026 6400                       		bcc.s	locret_3CF4
00004028 323C 03A8                  		move.w	#$3A8,d1
0000402C 0C40 1300                  		cmpi.w	#$1300,d0
00004030 6500                       		bcs.s	loc_3CF0
00004032 323C 0108                  		move.w	#$108,d1
00004036 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000403C                            
0000403C                            loc_3CF0:
0000403C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004040                            
00004040                            locret_3CF4:
00004040 4E75                       		rts	
00004042                            ; ===========================================================================
00004042                            
00004042                            DynWater_LZ2:				; XREF: DynWater_Index
00004042 3038 F700                  		move.w	($FFFFF700).w,d0
00004046 323C 0328                  		move.w	#$328,d1
0000404A 0C40 0500                  		cmpi.w	#$500,d0
0000404E 6500                       		bcs.s	loc_3D12
00004050 323C 03C8                  		move.w	#$3C8,d1
00004054 0C40 0B00                  		cmpi.w	#$B00,d0
00004058 6500                       		bcs.s	loc_3D12
0000405A 323C 0428                  		move.w	#$428,d1
0000405E                            
0000405E                            loc_3D12:
0000405E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004062 4E75                       		rts	
00004064                            ; ===========================================================================
00004064                            
00004064                            DynWater_LZ3:				; XREF: DynWater_Index
00004064 3038 F700                  		move.w	($FFFFF700).w,d0
00004068 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000406C 6600                       		bne.s	loc_3D5E
0000406E 323C 0900                  		move.w	#$900,d1
00004072 0C40 0600                  		cmpi.w	#$600,d0
00004076 6500                       		bcs.s	loc_3D54
00004078 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000407E 6500                       		bcs.s	loc_3D54
00004080 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004086 6400                       		bcc.s	loc_3D54
00004088 323C 04C8                  		move.w	#$4C8,d1
0000408C 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004092 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004098 303C 00B7                  		move.w	#$B7,d0
0000409C 6100 D51E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000040A0                            
000040A0                            loc_3D54:
000040A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000040A8 4E75                       		rts	
000040AA                            ; ===========================================================================
000040AA                            
000040AA                            loc_3D5E:				; XREF: DynWater_LZ3
000040AA 5302                       		subq.b	#1,d2
000040AC 6600                       		bne.s	loc_3DA8
000040AE 323C 04C8                  		move.w	#$4C8,d1
000040B2 0C40 0770                  		cmpi.w	#$770,d0
000040B6 6500                       		bcs.s	loc_3DA2
000040B8 323C 0308                  		move.w	#$308,d1
000040BC 0C40 1400                  		cmpi.w	#$1400,d0
000040C0 6500                       		bcs.s	loc_3DA2
000040C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000040C8 6700                       		beq.s	loc_3D8E
000040CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000040D0 6400                       		bcc.s	loc_3D8E
000040D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000040D8 6400                       		bcc.s	loc_3DA2
000040DA                            
000040DA                            loc_3D8E:
000040DA 323C 0508                  		move.w	#$508,d1
000040DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000040E2 0C40 1770                  		cmpi.w	#$1770,d0
000040E6 6500                       		bcs.s	loc_3DA2
000040E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040EE                            
000040EE                            loc_3DA2:
000040EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040F2 4E75                       		rts	
000040F4                            ; ===========================================================================
000040F4                            
000040F4                            loc_3DA8:
000040F4 5302                       		subq.b	#1,d2
000040F6 6600                       		bne.s	loc_3DD2
000040F8 323C 0508                  		move.w	#$508,d1
000040FC 0C40 1860                  		cmpi.w	#$1860,d0
00004100 6500                       		bcs.s	loc_3DCC
00004102 323C 0188                  		move.w	#$188,d1
00004106 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000410A 6400                       		bcc.s	loc_3DC6
0000410C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004110 6600                       		bne.s	loc_3DCC
00004112                            
00004112                            loc_3DC6:
00004112 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004118                            
00004118                            loc_3DCC:
00004118 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000411C 4E75                       		rts	
0000411E                            ; ===========================================================================
0000411E                            
0000411E                            loc_3DD2:
0000411E 5302                       		subq.b	#1,d2
00004120 6600                       		bne.s	loc_3E0E
00004122 323C 0188                  		move.w	#$188,d1
00004126 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000412A 6500                       		bcs.s	loc_3E04
0000412C 323C 0900                  		move.w	#$900,d1
00004130 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004134 6500                       		bcs.s	loc_3E04
00004136 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000413C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004142 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004148 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000414E 4E75                       		rts	
00004150                            ; ===========================================================================
00004150                            
00004150                            loc_3E04:
00004150 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004154 31C1 F648                  		move.w	d1,($FFFFF648).w
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            loc_3E0E:
0000415A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000415E 6500                       		bcs.s	locret_3E1A
00004160 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004166                            
00004166                            locret_3E1A:
00004166 4E75                       		rts	
00004168                            ; ===========================================================================
00004168                            
00004168                            DynWater_SBZ3:				; XREF: DynWater_Index
00004168 323C 0228                  		move.w	#$228,d1
0000416C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004172 6500                       		bcs.s	loc_3E2C
00004174 323C 04C8                  		move.w	#$4C8,d1
00004178                            
00004178                            loc_3E2C:
00004178 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000417C 4E75                       		rts
0000417E                            
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            
0000417E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000417E                            
0000417E                            
0000417E                            LZWindTunnels:				; XREF: LZWaterEffects
0000417E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004182 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004186 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000418C 7000                       		moveq	#0,d0
0000418E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004192 E748                       		lsl.w	#3,d0
00004194 D4C0                       		adda.w	d0,a2
00004196 7200                       		moveq	#0,d1
00004198 4A38 FE11                  		tst.b	($FFFFFE11).w
0000419C 6600                       		bne.s	loc_3E56
0000419E 7201                       		moveq	#1,d1
000041A0 514A                       		subq.w	#8,a2
000041A2                            
000041A2                            loc_3E56:
000041A2 43F8 D000                  		lea	($FFFFD000).w,a1
000041A6                            
000041A6                            LZWind_Loop:
000041A6 3029 0008                  		move.w	8(a1),d0
000041AA B052                       		cmp.w	(a2),d0
000041AC 6500 0000                  		bcs.w	loc_3EF4
000041B0 B06A 0004                  		cmp.w	4(a2),d0
000041B4 6400 0000                  		bcc.w	loc_3EF4
000041B8 3429 000C                  		move.w	$C(a1),d2
000041BC B46A 0002                  		cmp.w	2(a2),d2
000041C0 6500                       		bcs.s	loc_3EF4
000041C2 B46A 0006                  		cmp.w	6(a2),d2
000041C6 6400                       		bcc.s	loc_3EF4
000041C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000041CC 0200 003F                  		andi.b	#$3F,d0
000041D0 6600                       		bne.s	loc_3E90
000041D2 303C 00D0                  		move.w	#$D0,d0
000041D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
000041DC                            
000041DC                            loc_3E90:
000041DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000041E0 6600 0000                  		bne.w	locret_3F0A
000041E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000041EA 6400                       		bcc.s	loc_3F06
000041EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000041F2 0440 0080                  		subi.w	#$80,d0
000041F6 B052                       		cmp.w	(a2),d0
000041F8 6400                       		bcc.s	LZWind_Move
000041FA 7002                       		moveq	#2,d0
000041FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004202 6600                       		bne.s	loc_3EBA
00004204 4440                       		neg.w	d0
00004206                            
00004206                            loc_3EBA:
00004206 D169 000C                  		add.w	d0,$C(a1)
0000420A                            
0000420A                            LZWind_Move:
0000420A 5869 0008                  		addq.w	#4,8(a1)
0000420E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004214 337C 0000 0012             		move.w	#0,$12(a1)
0000421A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004220 08E9 0001 0022             		bset	#1,$22(a1)
00004226 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000422C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000422E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004232                            
00004232                            LZWind_MoveDown:
00004232 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004238 6700                       		beq.s	locret_3EF2	; if not, branch
0000423A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000423E                            
0000423E                            locret_3EF2:
0000423E 4E75                       		rts	
00004240                            ; ===========================================================================
00004240                            
00004240                            loc_3EF4:				; XREF: LZWindTunnels
00004240 504A                       		addq.w	#8,a2
00004242 51C9 FF62                  		dbf	d1,LZWind_Loop
00004246 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000424A 6700                       		beq.s	locret_3F0A
0000424C 137C 0000 001C             		move.b	#0,$1C(a1)
00004252                            
00004252                            loc_3F06:
00004252 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004256                            
00004256                            locret_3F0A:
00004256 4E75                       		rts	
00004258                            ; End of function LZWindTunnels
00004258                            
00004258                            ; ===========================================================================
00004258 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004260 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004272 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004280                            					; XREF: LZWindTunnels
00004280                            		even
00004280                            
00004280                            ; ---------------------------------------------------------------------------
00004280                            ; Labyrinth Zone water slide subroutine
00004280                            ; ---------------------------------------------------------------------------
00004280                            
00004280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004280                            
00004280                            
00004280                            LZWaterSlides:				; XREF: LZWaterEffects
00004280 43F8 D000                  		lea	($FFFFD000).w,a1
00004284 0829 0001 0022             		btst	#1,$22(a1)
0000428A 6600                       		bne.s	loc_3F6A
0000428C 3029 000C                  		move.w	$C(a1),d0
00004290 E248                       		lsr.w	#1,d0
00004292 0240 0380                  		andi.w	#$380,d0
00004296 1229 0008                  		move.b	8(a1),d1
0000429A 0241 007F                  		andi.w	#$7F,d1
0000429E D041                       		add.w	d1,d0
000042A0 45F8 A400                  		lea	($FFFFA400).w,a2
000042A4 1032 0000                  		move.b	(a2,d0.w),d0
000042A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000042AC 7206                       		moveq	#6,d1
000042AE                            
000042AE                            loc_3F62:
000042AE B022                       		cmp.b	-(a2),d0
000042B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000042B4 6700                       		beq.s	LZSlide_Move
000042B6                            
000042B6                            loc_3F6A:
000042B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000042BA 6700                       		beq.s	locret_3F7A
000042BC 337C 0005 003E             		move.w	#5,$3E(a1)
000042C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000042C6                            
000042C6                            locret_3F7A:
000042C6 4E75                       		rts	
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            LZSlide_Move:				; XREF: LZWaterSlides
000042C8 0C41 0003                  		cmpi.w	#3,d1
000042CC 6400                       		bcc.s	loc_3F84
000042CE 4E71                       		nop	
000042D0                            
000042D0                            loc_3F84:
000042D0 08A9 0000 0022             		bclr	#0,$22(a1)
000042D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000042DA 1340 0014                  		move.b	d0,$14(a1)
000042DE 6A00                       		bpl.s	loc_3F9A
000042E0 08E9 0000 0022             		bset	#0,$22(a1)
000042E6                            
000042E6                            loc_3F9A:
000042E6 4229 0015                  		clr.b	$15(a1)
000042EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000042F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000042F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042FA 0200 001F                  		andi.b	#$1F,d0
000042FE 6600                       		bne.s	locret_3FBE
00004300 303C 00D0                  		move.w	#$D0,d0
00004304 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
0000430A                            
0000430A                            locret_3FBE:
0000430A 4E75                       		rts	
0000430C                            ; End of function LZWaterSlides
0000430C                            
0000430C                            ; ===========================================================================
0000430C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000431B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000431C                            		even
0000431C                            
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            ; Subroutine to	move Sonic in demo mode
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            
0000431C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000431C                            
0000431C                            
0000431C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000431C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004320 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            ; This is an unused subroutine for recording a demo
00004324                            
00004324                            MoveDemo_Record:
00004324 43F9 0008 0000             		lea	($80000).l,a1
0000432A 3038 F790                  		move.w	($FFFFF790).w,d0
0000432E D2C0                       		adda.w	d0,a1
00004330 1038 F604                  		move.b	($FFFFF604).w,d0
00004334 B011                       		cmp.b	(a1),d0
00004336 6600                       		bne.s	loc_3FFA
00004338 5229 0001                  		addq.b	#1,1(a1)
0000433C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004342 6700                       		beq.s	loc_3FFA
00004344 4E75                       		rts	
00004346                            ; ===========================================================================
00004346                            
00004346                            loc_3FFA:				; XREF: MoveDemo_Record
00004346 1340 0002                  		move.b	d0,2(a1)
0000434A 137C 0000 0003             		move.b	#0,3(a1)
00004350 5478 F790                  		addq.w	#2,($FFFFF790).w
00004354 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000435C 4A38 F604                  		tst.b	($FFFFF604).w
00004360 6A00                       		bpl.s	loc_4022
00004362 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004366 6B00                       		bmi.s	loc_4022
00004368 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000436E                            
0000436E                            loc_4022:
0000436E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004374 7000                       		moveq	#0,d0
00004376 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000437A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004380 6600                       		bne.s	loc_4038
00004382 7006                       		moveq	#6,d0
00004384                            
00004384                            loc_4038:
00004384 E548                       		lsl.w	#2,d0
00004386 2271 0000                  		movea.l	(a1,d0.w),a1
0000438A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000438E 6A00                       		bpl.s	loc_4056
00004390 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004396 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000439A 5340                       		subq.w	#1,d0
0000439C E548                       		lsl.w	#2,d0
0000439E 2271 0000                  		movea.l	(a1,d0.w),a1
000043A2                            
000043A2                            loc_4056:
000043A2 3038 F790                  		move.w	($FFFFF790).w,d0
000043A6 D2C0                       		adda.w	d0,a1
000043A8 1011                       		move.b	(a1),d0
000043AA 41F8 F604                  		lea	($FFFFF604).w,a0
000043AE 1200                       		move.b	d0,d1
000043B0 1410                       		move.b	(a0),d2
000043B2 B500                       		eor.b	d2,d0
000043B4 10C1                       		move.b	d1,(a0)+
000043B6 C001                       		and.b	d1,d0
000043B8 10C0                       		move.b	d0,(a0)+
000043BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000043BE 6400                       		bcc.s	locret_407E
000043C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000043C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000043CA                            
000043CA                            locret_407E:
000043CA 4E75                       		rts	
000043CC                            ; End of function MoveSonicInDemo
000043CC                            
000043CC                            ; ===========================================================================
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            Demo_Index:
000043CC                            	include "_inc\Demo pointers for intro.asm"
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC 0000 0000                  	dc.l Demo_GHZ
000043D0 0000 0000                  	dc.l Demo_GHZ
000043D4 0000 0000                  	dc.l Demo_MZ
000043D8 0000 0000                  	dc.l Demo_MZ
000043DC 0000 0000                  	dc.l Demo_SYZ
000043E0 0000 0000                  	dc.l Demo_SYZ
000043E4 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043EC                            
000043EC                            Demo_EndIndex:
000043EC                            	include "_inc\Demo pointers for ending.asm"
000043EC                            ; ---------------------------------------------------------------------------
000043EC                            ; Demo (ending) sequence pointers
000043EC                            ; ---------------------------------------------------------------------------
000043EC 0000 0000                  	dc.l Demo_EndGHZ1
000043F0 0000 0000                  	dc.l Demo_EndMZ
000043F4 0000 0000                  	dc.l Demo_EndSYZ
000043F8 0000 0000                  	dc.l Demo_EndLZ
000043FC 0000 0000                  	dc.l Demo_EndSLZ
00004400 0000 0000                  	dc.l Demo_EndSBZ1
00004404 0000 0000                  	dc.l Demo_EndSBZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
0000440C                            
0000440C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000441C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000442C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000443C                            		even
0000443C                            
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            ; Collision index loading subroutine
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            
0000443C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000443C                            
0000443C                            
0000443C                            ColIndexLoad:				; XREF: Level
0000443C 7000                       		moveq	#0,d0
0000443E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004442 E548                       		lsl.w	#2,d0
00004444 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000444A 4E75                       		rts	
0000444C                            ; End of function ColIndexLoad
0000444C                            
0000444C                            ; ===========================================================================
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ColPointers:
0000444C                            	include "_inc\Collision index pointers.asm"
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C 0000 0000                  	dc.l Col_GHZ
00004450 0000 0000                  	dc.l Col_LZ
00004454 0000 0000                  	dc.l Col_MZ
00004458 0000 0000                  	dc.l Col_SLZ
0000445C 0000 0000                  	dc.l Col_SYZ
00004460 0000 0000                  	dc.l Col_SBZ
00004460 0000 0000                  	dc.l Col_SBZ
00004464                            
00004464                            ; ---------------------------------------------------------------------------
00004464                            ; Oscillating number subroutine
00004464                            ; ---------------------------------------------------------------------------
00004464                            
00004464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004464                            
00004464                            
00004464                            OscillateNumInit:			; XREF: Level
00004464 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004468 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000446E 7220                       		moveq	#$20,d1
00004470                            
00004470                            Osc_Loop:
00004470 32DA                       		move.w	(a2)+,(a1)+
00004472 51C9 FFFC                  		dbf	d1,Osc_Loop
00004476 4E75                       		rts	
00004478                            ; End of function OscillateNumInit
00004478                            
00004478                            ; ===========================================================================
00004478 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000447C 0000 0080                  		dc.w 0,	$80
00004480 0000 0080                  		dc.w 0,	$80
00004484 0000 0080                  		dc.w 0,	$80
00004488 0000 0080                  		dc.w 0,	$80
0000448C 0000 0080                  		dc.w 0,	$80
00004490 0000 0080                  		dc.w 0,	$80
00004494 0000 0080                  		dc.w 0,	$80
00004498 0000 0080                  		dc.w 0,	$80
0000449C 0000 50F0                  		dc.w 0,	$50F0
000044A0 011E 2080                  		dc.w $11E, $2080
000044A4 00B4 3080                  		dc.w $B4, $3080
000044A8 010E 5080                  		dc.w $10E, $5080
000044AC 01C2 7080                  		dc.w $1C2, $7080
000044B0 0276 0080                  		dc.w $276, $80
000044B4 0000 0080                  		dc.w 0,	$80
000044B8 0000                       		dc.w 0
000044BA                            		even
000044BA                            
000044BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044BA                            
000044BA                            
000044BA                            OscillateNumDo:				; XREF: Level
000044BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000044C0 6400                       		bcc.s	locret_41C4
000044C2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044C6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000044CC 3619                       		move.w	(a1)+,d3
000044CE 720F                       		moveq	#$F,d1
000044D0                            
000044D0                            loc_4184:
000044D0 341A                       		move.w	(a2)+,d2
000044D2 381A                       		move.w	(a2)+,d4
000044D4 0303                       		btst	d1,d3
000044D6 6600                       		bne.s	loc_41A4
000044D8 3029 0002                  		move.w	2(a1),d0
000044DC D042                       		add.w	d2,d0
000044DE 3340 0002                  		move.w	d0,2(a1)
000044E2 D151                       		add.w	d0,0(a1)
000044E4 B811                       		cmp.b	0(a1),d4
000044E6 6200                       		bhi.s	loc_41BA
000044E8 03C3                       		bset	d1,d3
000044EA 6000                       		bra.s	loc_41BA
000044EC                            ; ===========================================================================
000044EC                            
000044EC                            loc_41A4:				; XREF: OscillateNumDo
000044EC 3029 0002                  		move.w	2(a1),d0
000044F0 9042                       		sub.w	d2,d0
000044F2 3340 0002                  		move.w	d0,2(a1)
000044F6 D151                       		add.w	d0,0(a1)
000044F8 B811                       		cmp.b	0(a1),d4
000044FA 6300                       		bls.s	loc_41BA
000044FC 0383                       		bclr	d1,d3
000044FE                            
000044FE                            loc_41BA:
000044FE 5849                       		addq.w	#4,a1
00004500 51C9 FFCE                  		dbf	d1,loc_4184
00004504 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004508                            
00004508                            locret_41C4:
00004508 4E75                       		rts	
0000450A                            ; End of function OscillateNumDo
0000450A                            
0000450A                            ; ===========================================================================
0000450A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000450E 0002 0018                  		dc.w 2,	$18
00004512 0002 0020                  		dc.w 2,	$20
00004516 0002 0030                  		dc.w 2,	$30
0000451A 0004 0020                  		dc.w 4,	$20
0000451E 0008 0008                  		dc.w 8,	8
00004522 0008 0040                  		dc.w 8,	$40
00004526 0004 0040                  		dc.w 4,	$40
0000452A 0002 0050                  		dc.w 2,	$50
0000452E 0002 0050                  		dc.w 2,	$50
00004532 0002 0020                  		dc.w 2,	$20
00004536 0003 0030                  		dc.w 3,	$30
0000453A 0005 0050                  		dc.w 5,	$50
0000453E 0007 0070                  		dc.w 7,	$70
00004542 0002 0010                  		dc.w 2,	$10
00004546 0002 0010                  		dc.w 2,	$10
0000454A                            		even
0000454A                            
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            
0000454A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000454A                            
0000454A                            
0000454A                            ChangeRingFrame:			; XREF: Level
0000454A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000454E 6A00                       		bpl.s	loc_421C
00004550 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004556 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000455A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004560                            
00004560                            loc_421C:
00004560 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004564 6A00                       		bpl.s	loc_4232
00004566 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000456C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004570 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004576                            
00004576                            loc_4232:
00004576 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000457A 6A00                       		bpl.s	loc_4250
0000457C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004582 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004586 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000458C 6500                       		bcs.s	loc_4250
0000458E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004594                            
00004594                            loc_4250:
00004594 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004598 6700                       		beq.s	locret_4272
0000459A 7000                       		moveq	#0,d0
0000459C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000045A0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000045A4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000045A8 EF58                       		rol.w	#7,d0
000045AA 0240 0003                  		andi.w	#3,d0
000045AE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000045B2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000045B6                            
000045B6                            locret_4272:
000045B6 4E75                       		rts	
000045B8                            ; End of function ChangeRingFrame
000045B8                            
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            ; End-of-act signpost pattern loading subroutine
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            
000045B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B8                            
000045B8                            
000045B8                            SignpostArtLoad:			; XREF: Level
000045B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000045BC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000045C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000045C6 6700                       		beq.s	Signpost_Exit	; if yes, branch
000045C8 3038 F700                  		move.w	($FFFFF700).w,d0
000045CC 3238 F72A                  		move.w	($FFFFF72A).w,d1
000045D0 0441 0100                  		subi.w	#$100,d1
000045D4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000045D6 6D00                       		blt.s	Signpost_Exit	; if not, branch
000045D8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000045DC 6700                       		beq.s	Signpost_Exit
000045DE B278 F728                  		cmp.w	($FFFFF728).w,d1
000045E2 6700                       		beq.s	Signpost_Exit
000045E4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000045E8 7012                       		moveq	#$12,d0
000045EA 6000 D1E6                  		bra.w	LoadPLC2	; load signpost	patterns
000045EE                            ; ===========================================================================
000045EE                            
000045EE                            Signpost_Exit:
000045EE 4E75                       		rts	
000045F0                            ; End of function SignpostArtLoad
000045F0                            
000045F0                            ; ===========================================================================
000045F0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004670                            Demo_MZ:	incbin	demodata\i_mz.bin
000047A0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004820                            Demo_SS:	incbin	demodata\i_ss.bin
00004920                            ; ===========================================================================
00004920                            
00004920                            ; ---------------------------------------------------------------------------
00004920                            ; Special Stage
00004920                            ; ---------------------------------------------------------------------------
00004920                            
00004920                            SpecialStage:				; XREF: GameModeArray
00004920 303C 00CA                  		move.w	#$CA,d0
00004924 6100 CC96                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004928 6100 D872                  		bsr.w	Pal_MakeFlash
0000492C 46FC 2700                  		move	#$2700,sr
00004930 4DF9 00C0 0004             		lea	($C00004).l,a6
00004936 3CBC 8B03                  		move.w	#$8B03,(a6)
0000493A 3CBC 8004                  		move.w	#$8004,(a6)
0000493E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004944 3CBC 9011                  		move.w	#$9011,(a6)
00004948 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000494C 0200 00BF                  		andi.b	#$BF,d0
00004950 33C0 00C0 0004             		move.w	d0,($C00004).l
00004956 6100 CB8C                  		bsr.w	ClearScreen
0000495A 46FC 2300                  		move	#$2300,sr
0000495E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004964 3ABC 8F01                  		move.w	#$8F01,(a5)
00004968 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000496E 3ABC 9780                  		move.w	#$9780,(a5)
00004972 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004978 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004980                            
00004980                            loc_463C:
00004980 3215                       		move.w	(a5),d1
00004982 0801 0001                  		btst	#1,d1
00004986 66F8                       		bne.s	loc_463C
00004988 3ABC 8F02                  		move.w	#$8F02,(a5)
0000498C 6100 0000                  		bsr.w	SS_BGLoad
00004990 7014                       		moveq	#$14,d0
00004992 6100 CF78                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004996 43F8 D000                  		lea	($FFFFD000).w,a1
0000499A 7000                       		moveq	#0,d0
0000499C 323C 07FF                  		move.w	#$7FF,d1
000049A0                            
000049A0                            SS_ClrObjRam:
000049A0 22C0                       		move.l	d0,(a1)+
000049A2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000049A6                            
000049A6 43F8 F700                  		lea	($FFFFF700).w,a1
000049AA 7000                       		moveq	#0,d0
000049AC 323C 003F                  		move.w	#$3F,d1
000049B0                            
000049B0                            SS_ClrRam:
000049B0 22C0                       		move.l	d0,(a1)+
000049B2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000049B6                            
000049B6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000049BA 7000                       		moveq	#0,d0
000049BC 323C 0027                  		move.w	#$27,d1
000049C0                            
000049C0                            SS_ClrRam2:
000049C0 22C0                       		move.l	d0,(a1)+
000049C2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000049C6                            
000049C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000049CA 7000                       		moveq	#0,d0
000049CC 323C 007F                  		move.w	#$7F,d1
000049D0                            
000049D0                            SS_ClrNemRam:
000049D0 22C0                       		move.l	d0,(a1)+
000049D2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000049D6                            
000049D6 4238 F64E                  		clr.b	($FFFFF64E).w
000049DA 4278 FE02                  		clr.w	($FFFFFE02).w
000049DE 700A                       		moveq	#$A,d0
000049E0 6100 D93A                  		bsr.w	PalLoad1	; load special stage pallet
000049E4 4EB9 0000 0000             		jsr	SS_Load
000049EA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000049F2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000049FA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A00 6100 0000                  		bsr.w	PalCycle_SS
00004A04 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A08 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A0E 303C 0089                  		move.w	#$89,d0
00004A12 6100 CBA2                  		bsr.w	PlaySound	; play special stage BG	music
00004A16 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A1C 43F9 0000 43CC             		lea	(Demo_Index).l,a1
00004A22 7006                       		moveq	#6,d0
00004A24 E548                       		lsl.w	#2,d0
00004A26 2271 0000                  		movea.l	(a1,d0.w),a1
00004A2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004A30 5338 F792                  		subq.b	#1,($FFFFF792).w
00004A34 4278 FE20                  		clr.w	($FFFFFE20).w
00004A38 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004A3C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004A42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004A48 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004A4C 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A4E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004A54 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A56 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004A5C                            
00004A5C                            SS_NoDebug:
00004A5C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A60 0000 0040                  		ori.b	#$40,d0
00004A64 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A6A 6100 D684                  		bsr.w	Pal_MakeWhite
00004A6E                            
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            ; Main Special Stage loop
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            
00004A6E                            SS_MainLoop:
00004A6E 6100 CB58                  		bsr.w	PauseGame
00004A72 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004A78 6100 E176                  		bsr.w	DelayProgram
00004A7C 6100 F89E                  		bsr.w	MoveSonicInDemo
00004A80 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004A86 4EB9 0000 0000             		jsr	ObjectsLoad
00004A8C 4EB9 0000 0000             		jsr	BuildSprites
00004A92 4EB9 0000 0000             		jsr	SS_ShowLayout
00004A98 6100 0000                  		bsr.w	SS_BGAnimate
00004A9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AA0 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004AA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004AA6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004AAA                            
00004AAA                            SS_ChkEnd:
00004AAA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004AB0 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004AB4                            
00004AB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AB8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004ABC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004AC2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004AC8 6500                       		bcs.s	SS_End		; if not, branch
00004ACA 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004ACE                            
00004ACE                            SS_End:
00004ACE 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004AD4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004ADA 4278 F794                  		clr.w	($FFFFF794).w
00004ADE                            
00004ADE                            SS_EndLoop:
00004ADE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004AE4 6100 E10A                  		bsr.w	DelayProgram
00004AE8 6100 F832                  		bsr.w	MoveSonicInDemo
00004AEC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004AF2 4EB9 0000 0000             		jsr	ObjectsLoad
00004AF8 4EB9 0000 0000             		jsr	BuildSprites
00004AFE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B04 6100 0000                  		bsr.w	SS_BGAnimate
00004B08 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B0C 6A00                       		bpl.s	loc_47D4
00004B0E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B14 6100 D6A6                  		bsr.w	Pal_ToWhite
00004B18                            
00004B18                            loc_47D4:
00004B18 4A78 F614                  		tst.w	($FFFFF614).w
00004B1C 66C0                       		bne.s	SS_EndLoop
00004B1E                            
00004B1E 46FC 2700                  		move	#$2700,sr
00004B22 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B28 3CBC 8230                  		move.w	#$8230,(a6)
00004B2C 3CBC 8407                  		move.w	#$8407,(a6)
00004B30 3CBC 9001                  		move.w	#$9001,(a6)
00004B34 6100 C9AE                  		bsr.w	ClearScreen
00004B38 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004B42 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004B48 6100 CB16                  		bsr.w	NemDec
00004B4C 4EB9 0000 0000             		jsr	Hud_Base
00004B52 46FC 2300                  		move	#$2300,sr
00004B56 7011                       		moveq	#$11,d0
00004B58 6100 D7DE                  		bsr.w	PalLoad2	; load results screen pallet
00004B5C 7000                       		moveq	#0,d0
00004B5E 6100 CC72                  		bsr.w	LoadPLC2
00004B62 701B                       		moveq	#$1B,d0
00004B64 6100 CC3A                  		bsr.w	LoadPLC		; load results screen patterns
00004B68 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004B6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004B74 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004B78 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004B7C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004B80 303C 008E                  		move.w	#$8E,d0
00004B84 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004B8A 43F8 D000                  		lea	($FFFFD000).w,a1
00004B8E 7000                       		moveq	#0,d0
00004B90 323C 07FF                  		move.w	#$7FF,d1
00004B94                            
00004B94                            SS_EndClrObjRam:
00004B94 22C0                       		move.l	d0,(a1)+
00004B96 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004B9A                            
00004B9A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004BA0                            
00004BA0                            SS_NormalExit:
00004BA0 6100 CA26                  		bsr.w	PauseGame
00004BA4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004BAA 6100 E044                  		bsr.w	DelayProgram
00004BAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004BB4 4EB9 0000 0000             		jsr	BuildSprites
00004BBA 6100 CC50                  		bsr.w	RunPLC_RAM
00004BBE 4A78 FE02                  		tst.w	($FFFFFE02).w
00004BC2 67DC                       		beq.s	SS_NormalExit
00004BC4 4AB8 F680                  		tst.l	($FFFFF680).w
00004BC8 66D6                       		bne.s	SS_NormalExit
00004BCA 303C 00CA                  		move.w	#$CA,d0
00004BCE 6100 C9EC                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004BD2 6100 D5C8                  		bsr.w	Pal_MakeFlash
00004BD6 4E75                       		rts	
00004BD8                            ; ===========================================================================
00004BD8                            
00004BD8                            SS_ToSegaScreen:
00004BD8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004BDE 4E75                       		rts
00004BE0                            
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            ; Special stage	background loading subroutine
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            
00004BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BE0                            
00004BE0                            
00004BE0                            SS_BGLoad:				; XREF: SpecialStage
00004BE0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BE6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004BEC 303C 4051                  		move.w	#$4051,d0
00004BF0 6100 CD4C                  		bsr.w	EniDec
00004BF4 263C 5000 0001             		move.l	#$50000001,d3
00004BFA 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C00 7E06                       		moveq	#6,d7
00004C02                            
00004C02                            loc_48BE:
00004C02 2003                       		move.l	d3,d0
00004C04 7C03                       		moveq	#3,d6
00004C06 7800                       		moveq	#0,d4
00004C08 0C47 0003                  		cmpi.w	#3,d7
00004C0C 6400                       		bcc.s	loc_48CC
00004C0E 7801                       		moveq	#1,d4
00004C10                            
00004C10                            loc_48CC:
00004C10 7A07                       		moveq	#7,d5
00004C12                            
00004C12                            loc_48CE:
00004C12 224A                       		movea.l	a2,a1
00004C14 0A04 0001                  		eori.b	#1,d4
00004C18 6600                       		bne.s	loc_48E2
00004C1A 0C47 0006                  		cmpi.w	#6,d7
00004C1E 6600                       		bne.s	loc_48F2
00004C20 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C26                            
00004C26                            loc_48E2:
00004C26 48E7 F800                  		movem.l	d0-d4,-(sp)
00004C2A 7207                       		moveq	#7,d1
00004C2C 7407                       		moveq	#7,d2
00004C2E 6100 CA10                  		bsr.w	ShowVDPGraphics
00004C32 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004C36                            
00004C36                            loc_48F2:
00004C36 0680 0010 0000             		addi.l	#$100000,d0
00004C3C 51CD FFD4                  		dbf	d5,loc_48CE
00004C40 0680 0380 0000             		addi.l	#$3800000,d0
00004C46 0A04 0001                  		eori.b	#1,d4
00004C4A 51CE FFC4                  		dbf	d6,loc_48CC
00004C4E 0683 1000 0000             		addi.l	#$10000000,d3
00004C54 6A00                       		bpl.s	loc_491C
00004C56 4843                       		swap	d3
00004C58 0683 0000 C000             		addi.l	#$C000,d3
00004C5E 4843                       		swap	d3
00004C60                            
00004C60                            loc_491C:
00004C60 D4FC 0080                  		adda.w	#$80,a2
00004C64 51CF FF9C                  		dbf	d7,loc_48BE
00004C68 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C6E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004C74 303C 4000                  		move.w	#$4000,d0
00004C78 6100 CCC4                  		bsr.w	EniDec
00004C7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C82 203C 4000 0003             		move.l	#$40000003,d0
00004C88 723F                       		moveq	#$3F,d1
00004C8A 741F                       		moveq	#$1F,d2
00004C8C 6100 C9B2                  		bsr.w	ShowVDPGraphics
00004C90 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C96 203C 5000 0003             		move.l	#$50000003,d0
00004C9C 723F                       		moveq	#$3F,d1
00004C9E 743F                       		moveq	#$3F,d2
00004CA0 6100 C99E                  		bsr.w	ShowVDPGraphics
00004CA4 4E75                       		rts	
00004CA6                            ; End of function SS_BGLoad
00004CA6                            
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            ; Pallet cycling routine - special stage
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            
00004CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CA6                            
00004CA6                            
00004CA6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004CA6 4A78 F63A                  		tst.w	($FFFFF63A).w
00004CAA 6600                       		bne.s	locret_49E6
00004CAC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004CB0 6A00                       		bpl.s	locret_49E6
00004CB2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CB8 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004CBC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004CC0 0240 001F                  		andi.w	#$1F,d0
00004CC4 E548                       		lsl.w	#2,d0
00004CC6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004CCC D0C0                       		adda.w	d0,a0
00004CCE 1018                       		move.b	(a0)+,d0
00004CD0 6A00                       		bpl.s	loc_4992
00004CD2 303C 01FF                  		move.w	#$1FF,d0
00004CD6                            
00004CD6                            loc_4992:
00004CD6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004CDA 7000                       		moveq	#0,d0
00004CDC 1018                       		move.b	(a0)+,d0
00004CDE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004CE2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004CE8 43F1 0000                  		lea	(a1,d0.w),a1
00004CEC 303C 8200                  		move.w	#-$7E00,d0
00004CF0 1019                       		move.b	(a1)+,d0
00004CF2 3C80                       		move.w	d0,(a6)
00004CF4 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004CF8 303C 8400                  		move.w	#-$7C00,d0
00004CFC 1018                       		move.b	(a0)+,d0
00004CFE 3C80                       		move.w	d0,(a6)
00004D00 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D0A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D12 7000                       		moveq	#0,d0
00004D14 1018                       		move.b	(a0)+,d0
00004D16 6B00                       		bmi.s	loc_49E8
00004D18 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D1E D2C0                       		adda.w	d0,a1
00004D20 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004D24 24D9                       		move.l	(a1)+,(a2)+
00004D26 24D9                       		move.l	(a1)+,(a2)+
00004D28 24D9                       		move.l	(a1)+,(a2)+
00004D2A                            
00004D2A                            locret_49E6:
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            
00004D2C                            loc_49E8:				; XREF: PalCycle_SS
00004D2C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004D30 0C40 008A                  		cmpi.w	#$8A,d0
00004D34 6500                       		bcs.s	loc_49F4
00004D36 5241                       		addq.w	#1,d1
00004D38                            
00004D38                            loc_49F4:
00004D38 C2FC 002A                  		mulu.w	#$2A,d1
00004D3C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004D42 D2C1                       		adda.w	d1,a1
00004D44 0240 007F                  		andi.w	#$7F,d0
00004D48 0880 0000                  		bclr	#0,d0
00004D4C 6700                       		beq.s	loc_4A18
00004D4E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004D52 24D1                       		move.l	(a1),(a2)+
00004D54 24E9 0004                  		move.l	4(a1),(a2)+
00004D58 24E9 0008                  		move.l	8(a1),(a2)+
00004D5C                            
00004D5C                            loc_4A18:
00004D5C D2FC 000C                  		adda.w	#$C,a1
00004D60 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004D64 0C40 000A                  		cmpi.w	#$A,d0
00004D68 6500                       		bcs.s	loc_4A2E
00004D6A 0440 000A                  		subi.w	#$A,d0
00004D6E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004D72                            
00004D72                            loc_4A2E:
00004D72 3200                       		move.w	d0,d1
00004D74 D040                       		add.w	d0,d0
00004D76 D041                       		add.w	d1,d0
00004D78 D2C0                       		adda.w	d0,a1
00004D7A 24D9                       		move.l	(a1)+,(a2)+
00004D7C 34D9                       		move.w	(a1)+,(a2)+
00004D7E 4E75                       		rts	
00004D80                            ; End of function PalCycle_SS
00004D80                            
00004D80                            ; ===========================================================================
00004D80 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004D90                            					; XREF: PalCycle_SS
00004D90 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004DA0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004DB0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004DC0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004DD0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004DE0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004DF0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E00                            		even
00004E00 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E0E                            					; XREF: PalCycle_SS
00004E0E                            		even
00004E0E                            
00004E0E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004E56                            		even
00004E56                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004F28                            		even
00004F28                            
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            ; Subroutine to	make the special stage background animated
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            
00004F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F28                            
00004F28                            
00004F28                            SS_BGAnimate:				; XREF: SpecialStage
00004F28 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004F2C 6600                       		bne.s	loc_4BF6
00004F2E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004F34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F3A                            
00004F3A                            loc_4BF6:
00004F3A 0C40 0008                  		cmpi.w	#8,d0
00004F3E 6400                       		bcc.s	loc_4C4E
00004F40 0C40 0006                  		cmpi.w	#6,d0
00004F44 6600                       		bne.s	loc_4C10
00004F46 5278 F718                  		addq.w	#1,($FFFFF718).w
00004F4A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004F4E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F54                            
00004F54                            loc_4C10:
00004F54 7000                       		moveq	#0,d0
00004F56 3038 F708                  		move.w	($FFFFF708).w,d0
00004F5A 4440                       		neg.w	d0
00004F5C 4840                       		swap	d0
00004F5E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004F64 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F68 7609                       		moveq	#9,d3
00004F6A                            
00004F6A                            loc_4C26:
00004F6A 302B 0002                  		move.w	2(a3),d0
00004F6E 6100 DCB2                  		bsr.w	CalcSine
00004F72 7400                       		moveq	#0,d2
00004F74 1419                       		move.b	(a1)+,d2
00004F76 C1C2                       		muls.w	d2,d0
00004F78 E080                       		asr.l	#8,d0
00004F7A 36C0                       		move.w	d0,(a3)+
00004F7C 1419                       		move.b	(a1)+,d2
00004F7E 4882                       		ext.w	d2
00004F80 D55B                       		add.w	d2,(a3)+
00004F82 51CB FFE6                  		dbf	d3,loc_4C26
00004F86 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F8A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004F90 6000                       		bra.s	loc_4C7E
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            loc_4C4E:				; XREF: SS_BGAnimate
00004F92 0C40 000C                  		cmpi.w	#$C,d0
00004F96 6600                       		bne.s	loc_4C74
00004F98 5378 F718                  		subq.w	#1,($FFFFF718).w
00004F9C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FA0 243C 0001 8000             		move.l	#$18000,d2
00004FA6 7206                       		moveq	#6,d1
00004FA8                            
00004FA8                            loc_4C64:
00004FA8 2013                       		move.l	(a3),d0
00004FAA 9082                       		sub.l	d2,d0
00004FAC 26C0                       		move.l	d0,(a3)+
00004FAE 0482 0000 2000             		subi.l	#$2000,d2
00004FB4 51C9 FFF2                  		dbf	d1,loc_4C64
00004FB8                            
00004FB8                            loc_4C74:
00004FB8 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FBC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004FC2                            
00004FC2                            loc_4C7E:
00004FC2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004FC6 3038 F718                  		move.w	($FFFFF718).w,d0
00004FCA 4440                       		neg.w	d0
00004FCC 4840                       		swap	d0
00004FCE 7600                       		moveq	#0,d3
00004FD0 161A                       		move.b	(a2)+,d3
00004FD2 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004FD6 4442                       		neg.w	d2
00004FD8 0242 00FF                  		andi.w	#$FF,d2
00004FDC E54A                       		lsl.w	#2,d2
00004FDE                            
00004FDE                            loc_4C9A:
00004FDE 301B                       		move.w	(a3)+,d0
00004FE0 544B                       		addq.w	#2,a3
00004FE2 7200                       		moveq	#0,d1
00004FE4 121A                       		move.b	(a2)+,d1
00004FE6 5341                       		subq.w	#1,d1
00004FE8                            
00004FE8                            loc_4CA4:
00004FE8 2380 2000                  		move.l	d0,(a1,d2.w)
00004FEC 5842                       		addq.w	#4,d2
00004FEE 0242 03FC                  		andi.w	#$3FC,d2
00004FF2 51C9 FFF4                  		dbf	d1,loc_4CA4
00004FF6 51CB FFE6                  		dbf	d3,loc_4C9A
00004FFA 4E75                       		rts	
00004FFC                            ; End of function SS_BGAnimate
00004FFC                            
00004FFC                            ; ===========================================================================
00004FFC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005008                            		even
00005008 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005010                            		even
00005010 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005024                            		even
00005024                            					; XREF: SS_BGAnimate
00005024                            ; ===========================================================================
00005024                            
00005024                            ; ---------------------------------------------------------------------------
00005024                            ; Continue screen
00005024                            ; ---------------------------------------------------------------------------
00005024                            
00005024                            ContinueScreen:				; XREF: GameModeArray
00005024 6100 D04C                  		bsr.w	Pal_FadeFrom
00005028 46FC 2700                  		move	#$2700,sr
0000502C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005030 0200 00BF                  		andi.b	#$BF,d0
00005034 33C0 00C0 0004             		move.w	d0,($C00004).l
0000503A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005040 3CBC 8004                  		move.w	#$8004,(a6)
00005044 3CBC 8700                  		move.w	#$8700,(a6)
00005048 6100 C49A                  		bsr.w	ClearScreen
0000504C 43F8 D000                  		lea	($FFFFD000).w,a1
00005050 7000                       		moveq	#0,d0
00005052 323C 07FF                  		move.w	#$7FF,d1
00005056                            
00005056                            Cont_ClrObjRam:
00005056 22C0                       		move.l	d0,(a1)+
00005058 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000505C                            
0000505C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005066 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000506C 6100 C5F2                  		bsr.w	NemDec
00005070 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000507A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005080 6100 C5DE                  		bsr.w	NemDec
00005084 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000508E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005094 6100 C5CA                  		bsr.w	NemDec
00005098 720A                       		moveq	#10,d1
0000509A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000050A0 7012                       		moveq	#$12,d0
000050A2 6100 D278                  		bsr.w	PalLoad1	; load continue	screen pallet
000050A6 103C 0090                  		move.b	#$90,d0
000050AA 6100 C50A                  		bsr.w	PlaySound	; play continue	music
000050AE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000050B4 42B8 F700                  		clr.l	($FFFFF700).w
000050B8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000050C0 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000050C6 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000050CC 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000050D2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000050D8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000050DE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000050E4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000050EA 4EB9 0000 0000             		jsr	ObjectsLoad
000050F0 4EB9 0000 0000             		jsr	BuildSprites
000050F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050FA 0000 0040                  		ori.b	#$40,d0
000050FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005104 6100 CEC6                  		bsr.w	Pal_FadeTo
00005108                            
00005108                            ; ---------------------------------------------------------------------------
00005108                            ; Continue screen main loop
00005108                            ; ---------------------------------------------------------------------------
00005108                            
00005108                            Cont_MainLoop:
00005108 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000510E 6100 DAE0                  		bsr.w	DelayProgram
00005112 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005118 6400                       		bcc.s	loc_4DF2
0000511A 46FC 2700                  		move	#$2700,sr
0000511E 3238 F614                  		move.w	($FFFFF614).w,d1
00005122 82FC 003C                  		divu.w	#$3C,d1
00005126 0281 0000 000F             		andi.l	#$F,d1
0000512C 4EB9 0000 0000             		jsr	ContScrCounter
00005132 46FC 2300                  		move	#$2300,sr
00005136                            
00005136                            loc_4DF2:
00005136 4EB9 0000 0000             		jsr	ObjectsLoad
0000513C 4EB9 0000 0000             		jsr	BuildSprites
00005142 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005148 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000514A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005150 64B6                       		bcc.s	Cont_MainLoop
00005152 4A78 F614                  		tst.w	($FFFFF614).w
00005156 6600 FFB0                  		bne.w	Cont_MainLoop
0000515A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005160 4E75                       		rts	
00005162                            ; ===========================================================================
00005162                            
00005162                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005162 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005168 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000516E 7000                       		moveq	#0,d0
00005170 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005174 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005178 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000517C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005180 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005184 4E75                       		rts	
00005186                            ; ===========================================================================
00005186                            
00005186                            ; ---------------------------------------------------------------------------
00005186                            ; Object 80 - Continue screen elements
00005186                            ; ---------------------------------------------------------------------------
00005186                            
00005186                            Obj80:					; XREF: Obj_Index
00005186 7000                       		moveq	#0,d0
00005188 1028 0024                  		move.b	$24(a0),d0
0000518C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005190 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005194                            ; ===========================================================================
00005194 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005196 0000                       		dc.w Obj80_Display-Obj80_Index
00005198 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000519A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000519C                            ; ===========================================================================
0000519C                            
0000519C                            Obj80_Main:				; XREF: Obj80_Index
0000519C 5428 0024                  		addq.b	#2,$24(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051A8 317C 8500 0002             		move.w	#$8500,2(a0)
000051AE 117C 0000 0001             		move.b	#0,1(a0)
000051B4 117C 003C 0019             		move.b	#$3C,$19(a0)
000051BA 317C 0120 0008             		move.w	#$120,8(a0)
000051C0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000051C6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000051CC                            
000051CC                            Obj80_Display:				; XREF: Obj80_Index
000051CC 4EF9 0000 0000             		jmp	DisplaySprite
000051D2                            ; ===========================================================================
000051D2                            Obj80_MiniSonicPos:
000051D2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000051E4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000051F0                            ; ===========================================================================
000051F0                            
000051F0                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000051F0 2248                       		movea.l	a0,a1
000051F2 45F9 0000 51D2             		lea	(Obj80_MiniSonicPos).l,a2
000051F8 7200                       		moveq	#0,d1
000051FA 1238 FE18                  		move.b	($FFFFFE18).w,d1
000051FE 5501                       		subq.b	#2,d1
00005200 6400                       		bcc.s	loc_4EC4
00005202 4EF9 0000 0000             		jmp	DeleteObject
00005208                            ; ===========================================================================
00005208                            
00005208                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005208 7601                       		moveq	#1,d3
0000520A 0C01 000E                  		cmpi.b	#$E,d1
0000520E 6500                       		bcs.s	loc_4ED0
00005210 7600                       		moveq	#0,d3
00005212 720E                       		moveq	#$E,d1
00005214                            
00005214                            loc_4ED0:
00005214 1401                       		move.b	d1,d2
00005216 0202 0001                  		andi.b	#1,d2
0000521A                            
0000521A                            Obj80_MiniSonLoop:
0000521A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000521E 335A 0008                  		move.w	(a2)+,8(a1)
00005222 4A02                       		tst.b	d2
00005224 6700                       		beq.s	loc_4EEA
00005226 0469 000A 0008             		subi.w	#$A,8(a1)
0000522C                            
0000522C                            loc_4EEA:
0000522C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005232 137C 0006 001A             		move.b	#6,$1A(a1)
00005238 137C 0006 0024             		move.b	#6,$24(a1)
0000523E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005246 337C 8551 0002             		move.w	#$8551,2(a1)
0000524C 137C 0000 0001             		move.b	#0,1(a1)
00005252 43E9 0040                  		lea	$40(a1),a1
00005256 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000525A 43E9 FFC0                  		lea	-$40(a1),a1
0000525E 1343 0028                  		move.b	d3,$28(a1)
00005262                            
00005262                            Obj80_ChkType:				; XREF: Obj80_Index
00005262 4A28 0028                  		tst.b	$28(a0)
00005266 6700                       		beq.s	loc_4F40
00005268 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000526E 6500                       		bcs.s	loc_4F40
00005270 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005274 0200 0001                  		andi.b	#1,d0
00005278 6600                       		bne.s	loc_4F40
0000527A 4A78 D010                  		tst.w	($FFFFD010).w
0000527E 6600                       		bne.s	Obj80_Delete
00005280 4E75                       		rts	
00005282                            ; ===========================================================================
00005282                            
00005282                            loc_4F40:				; XREF: Obj80_ChkType
00005282 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005286 0200 000F                  		andi.b	#$F,d0
0000528A 6600                       		bne.s	Obj80_Display2
0000528C 0868 0000 001A             		bchg	#0,$1A(a0)
00005292                            
00005292                            Obj80_Display2:
00005292 4EF9 0000 0000             		jmp	DisplaySprite
00005298                            ; ===========================================================================
00005298                            
00005298                            Obj80_Delete:				; XREF: Obj80_ChkType
00005298 4EF9 0000 0000             		jmp	DeleteObject
0000529E                            ; ===========================================================================
0000529E                            
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Object 81 - Sonic on the continue screen
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            
0000529E                            Obj81:					; XREF: Obj_Index
0000529E 7000                       		moveq	#0,d0
000052A0 1028 0024                  		move.b	$24(a0),d0
000052A4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000052A8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000052AC 4EF9 0000 0000             		jmp	DisplaySprite
000052B2                            ; ===========================================================================
000052B2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000052B4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000052B6 0000                       		dc.w Obj81_Animate-Obj81_Index
000052B8 0000                       		dc.w Obj81_Run-Obj81_Index
000052BA                            ; ===========================================================================
000052BA                            
000052BA                            Obj81_Main:				; XREF: Obj81_Index
000052BA 5428 0024                  		addq.b	#2,$24(a0)
000052BE 317C 00A0 0008             		move.w	#$A0,8(a0)
000052C4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000052CA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000052D2 317C 0780 0002             		move.w	#$780,2(a0)
000052D8 117C 0004 0001             		move.b	#4,1(a0)
000052DE 117C 0002 0018             		move.b	#2,$18(a0)
000052E4 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000052EA 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000052F0                            
000052F0                            Obj81_ChkLand:				; XREF: Obj81_Index
000052F0 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000052F6 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000052F8 5428 0024                  		addq.b	#2,$24(a0)
000052FC 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005300 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005308 317C 8500 0002             		move.w	#$8500,2(a0)
0000530E 117C 0000 001C             		move.b	#0,$1C(a0)
00005314 6000                       		bra.s	Obj81_Animate
00005316                            ; ===========================================================================
00005316                            
00005316                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005316 4EB9 0000 0000             		jsr	SpeedToPos
0000531C 4EB9 0000 0000             		jsr	Sonic_Animate
00005322 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005328                            ; ===========================================================================
00005328                            
00005328                            Obj81_Animate:				; XREF: Obj81_Index
00005328 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000532C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000532E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005334 4EF9 0000 0000             		jmp	AnimateSprite
0000533A                            ; ===========================================================================
0000533A                            
0000533A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000533A 5428 0024                  		addq.b	#2,$24(a0)
0000533E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005346 317C 0780 0002             		move.w	#$780,2(a0)
0000534C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005352 4268 0014                  		clr.w	$14(a0)
00005356 5168 000C                  		subq.w	#8,$C(a0)
0000535A 103C 00E0                  		move.b	#$E0,d0
0000535E 6100 C25C                  		bsr.w	PlaySound_Special ; fade out music
00005362                            
00005362                            Obj81_Run:				; XREF: Obj81_Index
00005362 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005368 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000536A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005370 6000                       		bra.s	Obj81_ShowRun
00005372                            ; ===========================================================================
00005372                            
00005372                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005372 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005378                            
00005378                            Obj81_ShowRun:				; XREF: Obj81_Run
00005378 4EB9 0000 0000             		jsr	SpeedToPos
0000537E 4EB9 0000 0000             		jsr	Sonic_Animate
00005384 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000538A                            ; ===========================================================================
0000538A                            Ani_obj81:
0000538A                            	include "_anim\obj81.asm"
0000538A                            ; ---------------------------------------------------------------------------
0000538A                            ; Animation script - Sonic on the continue screen
0000538A                            ; ---------------------------------------------------------------------------
0000538A 0000                       		dc.w byte_504A-Ani_obj81
0000538C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005398 00                         		even
00005398 00                         		even
00005398                            
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398                            Map_obj80:
00005398                            	include "_maps\obj80.asm"
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000539C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000053A0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000053A4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000053A8 0B                         byte_5066:	dc.b $B
000053A9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000053AE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000053B3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000053B8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000053BD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000053C2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000053C7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000053CC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000053D1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000053D6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000053DB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000053E0 03                         byte_509E:	dc.b 3
000053E1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000053E6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053EB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053F0 03                         byte_50AE:	dc.b 3
000053F1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000053F6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053FB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005400 03                         byte_50BE:	dc.b 3
00005401 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005406 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000540B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005410 02                         byte_50CE:	dc.b 2
00005411 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005416 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000541B 01                         byte_50D9:	dc.b 1
0000541C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005421 01                         byte_50DF:	dc.b 1
00005422 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005428 00                         		even
00005428 00                         		even
00005428                            
00005428                            ; ===========================================================================
00005428                            ; ---------------------------------------------------------------------------
00005428                            ; Ending sequence in Green Hill	Zone
00005428                            ; ---------------------------------------------------------------------------
00005428                            
00005428                            EndingSequence:				; XREF: GameModeArray
00005428 103C 00E4                  		move.b	#$E4,d0
0000542C 6100 C18E                  		bsr.w	PlaySound_Special ; stop music
00005430 6100 CC40                  		bsr.w	Pal_FadeFrom
00005434 43F8 D000                  		lea	($FFFFD000).w,a1
00005438 7000                       		moveq	#0,d0
0000543A 323C 07FF                  		move.w	#$7FF,d1
0000543E                            
0000543E                            End_ClrObjRam:
0000543E 22C0                       		move.l	d0,(a1)+
00005440 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005444                            
00005444 43F8 F628                  		lea	($FFFFF628).w,a1
00005448 7000                       		moveq	#0,d0
0000544A 323C 0015                  		move.w	#$15,d1
0000544E                            
0000544E                            End_ClrRam:
0000544E 22C0                       		move.l	d0,(a1)+
00005450 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005454                            
00005454 43F8 F700                  		lea	($FFFFF700).w,a1
00005458 7000                       		moveq	#0,d0
0000545A 323C 003F                  		move.w	#$3F,d1
0000545E                            
0000545E                            End_ClrRam2:
0000545E 22C0                       		move.l	d0,(a1)+
00005460 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005464                            
00005464 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005468 7000                       		moveq	#0,d0
0000546A 323C 0047                  		move.w	#$47,d1
0000546E                            
0000546E                            End_ClrRam3:
0000546E 22C0                       		move.l	d0,(a1)+
00005470 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005474                            
00005474 46FC 2700                  		move	#$2700,sr
00005478 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000547C 0200 00BF                  		andi.b	#$BF,d0
00005480 33C0 00C0 0004             		move.w	d0,($C00004).l
00005486 6100 C05C                  		bsr.w	ClearScreen
0000548A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005490 3CBC 8B03                  		move.w	#$8B03,(a6)
00005494 3CBC 8230                  		move.w	#$8230,(a6)
00005498 3CBC 8407                  		move.w	#$8407,(a6)
0000549C 3CBC 857C                  		move.w	#$857C,(a6)
000054A0 3CBC 9001                  		move.w	#$9001,(a6)
000054A4 3CBC 8004                  		move.w	#$8004,(a6)
000054A8 3CBC 8720                  		move.w	#$8720,(a6)
000054AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000054B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000054B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000054BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000054C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000054C8 6700                       		beq.s	End_LoadData	; if yes, branch
000054CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000054D0                            
000054D0                            End_LoadData:
000054D0 701C                       		moveq	#$1C,d0
000054D2 6100 C438                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000054D6 4EB9 0000 0000             		jsr	Hud_Base
000054DC 6100 0000                  		bsr.w	LevelSizeLoad
000054E0 6100 0000                  		bsr.w	DeformBgLayer
000054E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000054EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000054EE 6100 0000                  		bsr.w	LoadTilesFromStart
000054F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000054FA 46FC 2300                  		move	#$2300,sr
000054FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005504 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005508 6100 C5B2                  		bsr.w	KosDec
0000550C 7003                       		moveq	#3,d0
0000550E 6100 CE0C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005512 303C 008B                  		move.w	#$8B,d0
00005516 6100 C09E                  		bsr.w	PlaySound	; play ending sequence music
0000551A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005520 6700                       		beq.s	End_LoadSonic	; if not, branch
00005522 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005528                            
00005528                            End_LoadSonic:
00005528 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000552E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005534 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000553A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005540 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005546 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000554C 4EB9 0000 0000             		jsr	ObjPosLoad
00005552 4EB9 0000 0000             		jsr	ObjectsLoad
00005558 4EB9 0000 0000             		jsr	BuildSprites
0000555E 7000                       		moveq	#0,d0
00005560 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005564 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005568 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000556C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005570 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005574 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005578 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000557C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005580 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005584 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005588 6100 EEDA                  		bsr.w	OscillateNumInit
0000558C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005592 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005598 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000559E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000055A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055AA 6100 D644                  		bsr.w	DelayProgram
000055AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055B2 0000 0040                  		ori.b	#$40,d0
000055B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000055BC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000055C2 6100 CA08                  		bsr.w	Pal_FadeTo
000055C6                            
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            ; Main ending sequence loop
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            
000055C6                            End_MainLoop:
000055C6 6100 C000                  		bsr.w	PauseGame
000055CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055D0 6100 D61E                  		bsr.w	DelayProgram
000055D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000055D8 6100 0000                  		bsr.w	End_MoveSonic
000055DC 4EB9 0000 0000             		jsr	ObjectsLoad
000055E2 6100 0000                  		bsr.w	DeformBgLayer
000055E6 4EB9 0000 0000             		jsr	BuildSprites
000055EC 4EB9 0000 0000             		jsr	ObjPosLoad
000055F2 6100 C568                  		bsr.w	PalCycle_Load
000055F6 6100 EEC2                  		bsr.w	OscillateNumDo
000055FA 6100 EF4E                  		bsr.w	ChangeRingFrame
000055FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005604 6700                       		beq.s	loc_52DA	; if yes, branch
00005606 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000560C 103C 0091                  		move.b	#$91,d0
00005610 6100 BFAA                  		bsr.w	PlaySound_Special ; play credits music
00005614 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000561A 4E75                       		rts	
0000561C                            ; ===========================================================================
0000561C                            
0000561C                            loc_52DA:
0000561C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005620 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005624                            
00005624 4278 FE02                  		clr.w	($FFFFFE02).w
00005628 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000562E 4278 F794                  		clr.w	($FFFFF794).w
00005632                            
00005632                            End_AllEmlds:				; XREF: loc_5334
00005632 6100 BF94                  		bsr.w	PauseGame
00005636 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000563C 6100 D5B2                  		bsr.w	DelayProgram
00005640 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005644 6100 0000                  		bsr.w	End_MoveSonic
00005648 4EB9 0000 0000             		jsr	ObjectsLoad
0000564E 6100 0000                  		bsr.w	DeformBgLayer
00005652 4EB9 0000 0000             		jsr	BuildSprites
00005658 4EB9 0000 0000             		jsr	ObjPosLoad
0000565E 6100 EE5A                  		bsr.w	OscillateNumDo
00005662 6100 EEE6                  		bsr.w	ChangeRingFrame
00005666 5378 F794                  		subq.w	#1,($FFFFF794).w
0000566A 6A00                       		bpl.s	loc_5334
0000566C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005672 6100 CB48                  		bsr.w	Pal_ToWhite
00005676                            
00005676                            loc_5334:
00005676 4A78 FE02                  		tst.w	($FFFFFE02).w
0000567A 6700 FFB6                  		beq.w	End_AllEmlds
0000567E 4278 FE02                  		clr.w	($FFFFFE02).w
00005682 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005688 4BF9 00C0 0004             		lea	($C00004).l,a5
0000568E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005694 47F8 F700                  		lea	($FFFFF700).w,a3
00005698 49F8 A400                  		lea	($FFFFA400).w,a4
0000569C 343C 4000                  		move.w	#$4000,d2
000056A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000056A4 7013                       		moveq	#$13,d0
000056A6 6100 CC74                  		bsr.w	PalLoad1	; load ending pallet
000056AA 6100 CA44                  		bsr.w	Pal_MakeWhite
000056AE 6000 FF16                  		bra.w	End_MainLoop
000056B2                            
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            ; Subroutine controlling Sonic on the ending sequence
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            
000056B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056B2                            
000056B2                            
000056B2                            End_MoveSonic:				; XREF: End_MainLoop
000056B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000056B6 6600                       		bne.s	End_MoveSonic2
000056B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000056BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000056C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000056CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000056D0 4E75                       		rts	
000056D2                            ; ===========================================================================
000056D2                            
000056D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000056D2 5500                       		subq.b	#2,d0
000056D4 6600                       		bne.s	End_MoveSonic3
000056D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000056DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000056DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056E2 7000                       		moveq	#0,d0
000056E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000056E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000056EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000056F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000056F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000056FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005702 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005708 4E75                       		rts	
0000570A                            ; ===========================================================================
0000570A                            
0000570A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000570A 5500                       		subq.b	#2,d0
0000570C 6600                       		bne.s	End_MoveSonExit
0000570E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005712 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005718 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000571E 4278 D024                  		clr.w	($FFFFD024).w
00005722                            
00005722                            End_MoveSonExit:
00005722 4E75                       		rts	
00005724                            ; End of function End_MoveSonic
00005724                            
00005724                            ; ===========================================================================
00005724                            ; ---------------------------------------------------------------------------
00005724                            ; Object 87 - Sonic on ending sequence
00005724                            ; ---------------------------------------------------------------------------
00005724                            
00005724                            Obj87:					; XREF: Obj_Index
00005724 7000                       		moveq	#0,d0
00005726 1028 0025                  		move.b	$25(a0),d0
0000572A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000572E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005732 4EF9 0000 0000             		jmp	DisplaySprite
00005738                            ; ===========================================================================
00005738 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000573C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005740 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005744 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005748 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            Obj87_Main:				; XREF: Obj87_Index
0000574C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005752 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005754 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000575A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005760 4E75                       		rts	
00005762                            ; ===========================================================================
00005762                            
00005762                            Obj87_Main2:				; XREF: Obj87_Main
00005762 5428 0025                  		addq.b	#2,$25(a0)
00005766 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000576E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005774 117C 0004 0001             		move.b	#4,1(a0)
0000577A 4228 0022                  		clr.b	$22(a0)
0000577E 117C 0002 0018             		move.b	#2,$18(a0)
00005784 117C 0000 001A             		move.b	#0,$1A(a0)
0000578A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005790                            
00005790                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005790 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005794 6600                       		bne.s	Obj87_Wait
00005796 5428 0025                  		addq.b	#2,$25(a0)
0000579A 317C 0001 001C             		move.w	#1,$1C(a0)
000057A0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000057A6                            
000057A6                            Obj87_Wait:
000057A6 4E75                       		rts	
000057A8                            ; ===========================================================================
000057A8                            
000057A8                            Obj87_LookUp:				; XREF: Obj87_Index
000057A8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000057B0 6600                       		bne.s	locret_5480
000057B2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000057B8 317C 005A 0030             		move.w	#$5A,$30(a0)
000057BE 5428 0025                  		addq.b	#2,$25(a0)
000057C2                            
000057C2                            locret_5480:
000057C2 4E75                       		rts	
000057C4                            ; ===========================================================================
000057C4                            
000057C4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000057C4 5368 0030                  		subq.w	#1,$30(a0)
000057C8 6600                       		bne.s	Obj87_Wait2
000057CA 43F8 D400                  		lea	($FFFFD400).w,a1
000057CE 323C 00FF                  		move.w	#$FF,d1
000057D2                            
000057D2                            Obj87_ClrLoop:
000057D2 4299                       		clr.l	(a1)+
000057D4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000057D8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000057DE 5428 0025                  		addq.b	#2,$25(a0)
000057E2 117C 0001 001C             		move.b	#1,$1C(a0)
000057E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000057EE                            
000057EE                            Obj87_Wait2:
000057EE 4E75                       		rts	
000057F0                            ; ===========================================================================
000057F0                            
000057F0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000057F0 5368 0030                  		subq.w	#1,$30(a0)
000057F4 6600                       		bne.s	Obj87_Wait3
000057F6 5428 0025                  		addq.b	#2,$25(a0)
000057FA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005800 117C 0002 001C             		move.b	#2,$1C(a0)
00005806 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000580C                            
0000580C                            Obj87_Wait3:
0000580C 4E75                       		rts	
0000580E                            ; ===========================================================================
0000580E                            
0000580E                            Obj87_Animate:				; XREF: Obj87_Index
0000580E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005814 4EF9 0000 0000             		jmp	AnimateSprite
0000581A                            ; ===========================================================================
0000581A                            
0000581A                            Obj87_Leap:				; XREF: Obj87_Index
0000581A 5368 0030                  		subq.w	#1,$30(a0)
0000581E 6600                       		bne.s	Obj87_Wait4
00005820 5428 0025                  		addq.b	#2,$25(a0)
00005824 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000582C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005832 117C 0004 0001             		move.b	#4,1(a0)
00005838 4228 0022                  		clr.b	$22(a0)
0000583C 117C 0002 0018             		move.b	#2,$18(a0)
00005842 117C 0005 001A             		move.b	#5,$1A(a0)
00005848 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000584E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005854 60B8                       		bra.s	Obj87_Animate
00005856                            ; ===========================================================================
00005856                            
00005856                            Obj87_Wait4:				; XREF: Obj87_Leap
00005856 4E75                       		rts	
00005858                            ; ===========================================================================
00005858                            Ani_obj87:
00005858                            	include "_anim\obj87.asm"
00005858                            ; ---------------------------------------------------------------------------
00005858                            ; Animation script - Sonic on the ending sequence
00005858                            ; ---------------------------------------------------------------------------
00005858 0000                       		dc.w byte_551C-Ani_obj87
0000585A 0000                       		dc.w byte_552A-Ani_obj87
0000585C 0000                       		dc.w byte_5534-Ani_obj87
0000585E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000586C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005876 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000587E                            		even
0000587E                            		even
0000587E                            
0000587E                            ; ===========================================================================
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            ; Object 88 - chaos emeralds on	the ending sequence
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            
0000587E                            Obj88:					; XREF: Obj_Index
0000587E 7000                       		moveq	#0,d0
00005880 1028 0024                  		move.b	$24(a0),d0
00005884 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005888 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000588C 4EF9 0000 0000             		jmp	DisplaySprite
00005892                            ; ===========================================================================
00005892 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005894 0000                       		dc.w Obj88_Move-Obj88_Index
00005896                            ; ===========================================================================
00005896                            
00005896                            Obj88_Main:				; XREF: Obj88_Index
00005896 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000589C 6700                       		beq.s	Obj88_Main2
0000589E 588F                       		addq.l	#4,sp
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            Obj88_Main2:				; XREF: Obj88_Main
000058A2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000058A8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000058AE 2248                       		movea.l	a0,a1
000058B0 7600                       		moveq	#0,d3
000058B2 7401                       		moveq	#1,d2
000058B4 7205                       		moveq	#5,d1
000058B6                            
000058B6                            Obj88_MainLoop:
000058B6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000058BA 5429 0024                  		addq.b	#2,$24(a1)
000058BE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000058C6 337C 03C5 0002             		move.w	#$3C5,2(a1)
000058CC 137C 0004 0001             		move.b	#4,1(a1)
000058D2 137C 0001 0018             		move.b	#1,$18(a1)
000058D8 3368 0008 0038             		move.w	8(a0),$38(a1)
000058DE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000058E4 1342 001C                  		move.b	d2,$1C(a1)
000058E8 1342 001A                  		move.b	d2,$1A(a1)
000058EC 5202                       		addq.b	#1,d2
000058EE 1343 0026                  		move.b	d3,$26(a1)
000058F2 0603 002A                  		addi.b	#$2A,d3
000058F6 43E9 0040                  		lea	$40(a1),a1
000058FA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000058FE                            
000058FE                            Obj88_Move:				; XREF: Obj88_Index
000058FE 3028 003E                  		move.w	$3E(a0),d0
00005902 D168 0026                  		add.w	d0,$26(a0)
00005906 1028 0026                  		move.b	$26(a0),d0
0000590A 4EB9 0000 2C22             		jsr	(CalcSine).l
00005910 7800                       		moveq	#0,d4
00005912 1828 003C                  		move.b	$3C(a0),d4
00005916 C3C4                       		muls.w	d4,d1
00005918 E081                       		asr.l	#8,d1
0000591A C1C4                       		muls.w	d4,d0
0000591C E080                       		asr.l	#8,d0
0000591E D268 0038                  		add.w	$38(a0),d1
00005922 D068 003A                  		add.w	$3A(a0),d0
00005926 3141 0008                  		move.w	d1,8(a0)
0000592A 3140 000C                  		move.w	d0,$C(a0)
0000592E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005934 6700                       		beq.s	loc_55FA
00005936 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000593C                            
0000593C                            loc_55FA:
0000593C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005942 6700                       		beq.s	loc_5608
00005944 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000594A                            
0000594A                            loc_5608:
0000594A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005950 6700                       		beq.s	locret_5614
00005952 5368 003A                  		subq.w	#1,$3A(a0)
00005956                            
00005956                            locret_5614:
00005956 4E75                       		rts	
00005958                            ; ===========================================================================
00005958                            ; ---------------------------------------------------------------------------
00005958                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005958                            ; ---------------------------------------------------------------------------
00005958                            
00005958                            Obj89:					; XREF: Obj_Index
00005958 7000                       		moveq	#0,d0
0000595A 1028 0024                  		move.b	$24(a0),d0
0000595E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005962 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005966                            ; ===========================================================================
00005966 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005968 0000                       		dc.w Obj89_Move-Obj89_Index
0000596A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000596C                            ; ===========================================================================
0000596C                            
0000596C                            Obj89_Main:				; XREF: Obj89_Index
0000596C 5428 0024                  		addq.b	#2,$24(a0)
00005970 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005976 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000597C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005984 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000598A 117C 0000 0001             		move.b	#0,1(a0)
00005990 117C 0000 0018             		move.b	#0,$18(a0)
00005996                            
00005996                            Obj89_Move:				; XREF: Obj89_Index
00005996 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000599C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000599E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000059A4 4EB9 0000 0000             		jsr	DisplaySprite
000059AA                            ; ===========================================================================
000059AA                            
000059AA                            Obj89_Delay:				; XREF: Obj89_Move
000059AA 5428 0024                  		addq.b	#2,$24(a0)
000059AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000059B4                            
000059B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000059B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000059B8 6A00                       		bpl.s	Obj89_Display
000059BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000059C0                            
000059C0                            Obj89_Display:
000059C0 4EB9 0000 0000             		jsr	DisplaySprite
000059C6                            ; ===========================================================================
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            Map_obj87:
000059C6                            	include "_maps\obj87.asm"
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000059CA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000059CE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000059D2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000059D6 02                         byte_5690:	dc.b 2
000059D7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000059DC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059E1 03                         byte_569B:	dc.b 3
000059E2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000059E7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000059EC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059F1 02                         byte_56AB:	dc.b 2
000059F2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000059F7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000059FC 02                         byte_56B6:	dc.b 2
000059FD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A02 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A07 02                         byte_56C1:	dc.b 2
00005A08 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A0D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A12 03                         byte_56CC:	dc.b 3
00005A13 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A18 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A1D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005A22 07                         byte_56DC:	dc.b 7
00005A23 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005A28 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005A2D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005A32 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005A37 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005A3C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005A41 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005A46 18                         byte_5700:	dc.b $18
00005A47 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005A4C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005A51 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005A56 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005A5B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005A60 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005A65 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005A6A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005A6F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005A74 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005A79 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005A7E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005A83 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005A88 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005A8D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005A92 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005A97 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005A9C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005AA1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005AA6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005AAB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005AB0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005AB5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005ABA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005AC0 00                         		even
00005AC0 00                         		even
00005AC0                            
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            Map_obj88:
00005AC0                            	include "_maps\obj88.asm"
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005AC4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005AC8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005ACC 0000                       		dc.w byte_57AC-Map_obj88
00005ACE 01                         byte_5788:	dc.b 1
00005ACF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005AD4 01                         byte_578E:	dc.b 1
00005AD5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005ADA 01                         byte_5794:	dc.b 1
00005ADB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005AE0 01                         byte_579A:	dc.b 1
00005AE1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005AE6 01                         byte_57A0:	dc.b 1
00005AE7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005AEC 01                         byte_57A6:	dc.b 1
00005AED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005AF2 01                         byte_57AC:	dc.b 1
00005AF3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005AF8                            		even
00005AF8                            		even
00005AF8                            
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            Map_obj89:
00005AF8                            	include "_maps\obj89.asm"
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8 0000                       		dc.w byte_57B4-Map_obj89
00005AFA 03                         byte_57B4:	dc.b 3
00005AFB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B00 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B05 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B0A                            		even
00005B0A                            		even
00005B0A                            
00005B0A                            ; ===========================================================================
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ; Credits ending sequence
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            
00005B0A                            Credits:				; XREF: GameModeArray
00005B0A 6100 BCF2                  		bsr.w	ClearPLC
00005B0E 6100 C562                  		bsr.w	Pal_FadeFrom
00005B12 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B18 3CBC 8004                  		move.w	#$8004,(a6)
00005B1C 3CBC 8230                  		move.w	#$8230,(a6)
00005B20 3CBC 8407                  		move.w	#$8407,(a6)
00005B24 3CBC 9001                  		move.w	#$9001,(a6)
00005B28 3CBC 9200                  		move.w	#$9200,(a6)
00005B2C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B30 3CBC 8720                  		move.w	#$8720,(a6)
00005B34 4238 F64E                  		clr.b	($FFFFF64E).w
00005B38 6100 B9AA                  		bsr.w	ClearScreen
00005B3C 43F8 D000                  		lea	($FFFFD000).w,a1
00005B40 7000                       		moveq	#0,d0
00005B42 323C 07FF                  		move.w	#$7FF,d1
00005B46                            
00005B46                            Cred_ClrObjRam:
00005B46 22C0                       		move.l	d0,(a1)+
00005B48 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005B4C                            
00005B4C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005B56 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005B5C 6100 BB02                  		bsr.w	NemDec
00005B60 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B64 7000                       		moveq	#0,d0
00005B66 323C 001F                  		move.w	#$1F,d1
00005B6A                            
00005B6A                            Cred_ClrPallet:
00005B6A 22C0                       		move.l	d0,(a1)+
00005B6C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005B70                            
00005B70 7003                       		moveq	#3,d0
00005B72 6100 C7A8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005B76 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005B7C 4EB9 0000 0000             		jsr	ObjectsLoad
00005B82 4EB9 0000 0000             		jsr	BuildSprites
00005B88 6100 0000                  		bsr.w	EndingDemoLoad
00005B8C 7000                       		moveq	#0,d0
00005B8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005B92 E948                       		lsl.w	#4,d0
00005B94 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005B9A 45F2 0000                  		lea	(a2,d0.w),a2
00005B9E 7000                       		moveq	#0,d0
00005BA0 1012                       		move.b	(a2),d0
00005BA2 6700                       		beq.s	loc_5862
00005BA4 6100 BBFA                  		bsr.w	LoadPLC		; load level patterns
00005BA8                            
00005BA8                            loc_5862:
00005BA8 7001                       		moveq	#1,d0
00005BAA 6100 BBF4                  		bsr.w	LoadPLC		; load standard	level patterns
00005BAE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005BB4 6100 C416                  		bsr.w	Pal_FadeTo
00005BB8                            
00005BB8                            Cred_WaitLoop:
00005BB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BBE 6100 D030                  		bsr.w	DelayProgram
00005BC2 6100 BC48                  		bsr.w	RunPLC_RAM
00005BC6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005BCA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005BCC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005BD0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005BD2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005BD8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005BDC 4E75                       		rts	
00005BDE                            
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            ; Ending sequence demo loading subroutine
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            
00005BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BDE                            
00005BDE                            
00005BDE                            EndingDemoLoad:				; XREF: Credits
00005BDE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005BE2 0240 000F                  		andi.w	#$F,d0
00005BE6 D040                       		add.w	d0,d0
00005BE8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005BEC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005BF0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005BF4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005BFA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005BFC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C02 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C08 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005C0E 7000                       		moveq	#0,d0
00005C10 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C14 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C18 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C1C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C20 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005C26 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005C28 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005C2E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005C32 303C 0008                  		move.w	#8,d0
00005C36                            
00005C36                            EndDemo_LampLoad:
00005C36 24D9                       		move.l	(a1)+,(a2)+
00005C38 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005C3C                            
00005C3C                            EndDemo_Exit:
00005C3C 4E75                       		rts	
00005C3E                            ; End of function EndingDemoLoad
00005C3E                            
00005C3E                            ; ===========================================================================
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            ; Levels used in the end sequence demos
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005C4E                            
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            EndDemo_LampVar:
00005C4E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005C50 0A00 062C 000D             		dc.w $A00, $62C, $D
00005C56 0000 0000                  		dc.l 0
00005C5A 0000                       		dc.b 0,	0
00005C5C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005C70 0101                       		dc.b 1,	1
00005C72                            ; ===========================================================================
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            ; "TRY AGAIN" and "END"	screens
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            
00005C72                            TryAgainEnd:				; XREF: Credits
00005C72 6100 BB8A                  		bsr.w	ClearPLC
00005C76 6100 C3FA                  		bsr.w	Pal_FadeFrom
00005C7A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C80 3CBC 8004                  		move.w	#$8004,(a6)
00005C84 3CBC 8230                  		move.w	#$8230,(a6)
00005C88 3CBC 8407                  		move.w	#$8407,(a6)
00005C8C 3CBC 9001                  		move.w	#$9001,(a6)
00005C90 3CBC 9200                  		move.w	#$9200,(a6)
00005C94 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C98 3CBC 8720                  		move.w	#$8720,(a6)
00005C9C 4238 F64E                  		clr.b	($FFFFF64E).w
00005CA0 6100 B842                  		bsr.w	ClearScreen
00005CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00005CA8 7000                       		moveq	#0,d0
00005CAA 323C 07FF                  		move.w	#$7FF,d1
00005CAE                            
00005CAE                            TryAg_ClrObjRam:
00005CAE 22C0                       		move.l	d0,(a1)+
00005CB0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005CB4                            
00005CB4 701D                       		moveq	#$1D,d0
00005CB6 6100 BC54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005CBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CBE 7000                       		moveq	#0,d0
00005CC0 323C 001F                  		move.w	#$1F,d1
00005CC4                            
00005CC4                            TryAg_ClrPallet:
00005CC4 22C0                       		move.l	d0,(a1)+
00005CC6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005CCA                            
00005CCA 7013                       		moveq	#$13,d0
00005CCC 6100 C64E                  		bsr.w	PalLoad1	; load ending pallet
00005CD0 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005CD4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00005CE0 4EB9 0000 0000             		jsr	BuildSprites
00005CE6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005CEC 6100 C2DE                  		bsr.w	Pal_FadeTo
00005CF0                            
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; "TRY AGAIN" and "END"	screen main loop
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            TryAg_MainLoop:
00005CF0 6100 B8D6                  		bsr.w	PauseGame
00005CF4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CFA 6100 CEF4                  		bsr.w	DelayProgram
00005CFE 4EB9 0000 0000             		jsr	ObjectsLoad
00005D04 4EB9 0000 0000             		jsr	BuildSprites
00005D0A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D10 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D12 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D16 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D18 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D1E 67D0                       		beq.s	TryAg_MainLoop
00005D20                            
00005D20                            TryAg_Exit:
00005D20 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005D26 4E75                       		rts	
00005D28                            
00005D28                            ; ===========================================================================
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            
00005D28                            Obj8B:					; XREF: Obj_Index
00005D28 7000                       		moveq	#0,d0
00005D2A 1028 0024                  		move.b	$24(a0),d0
00005D2E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005D32 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005D36 4EF9 0000 0000             		jmp	DisplaySprite
00005D3C                            ; ===========================================================================
00005D3C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005D3E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005D40 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005D42 0000                       		dc.w loc_5A8E-Obj8B_Index
00005D44                            ; ===========================================================================
00005D44                            
00005D44                            Obj8B_Main:				; XREF: Obj8B_Index
00005D44 5428 0024                  		addq.b	#2,$24(a0)
00005D48 317C 0120 0008             		move.w	#$120,8(a0)
00005D4E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005D54 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005D5C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005D62 117C 0000 0001             		move.b	#0,1(a0)
00005D68 117C 0002 0018             		move.b	#2,$18(a0)
00005D6E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005D74 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005D7A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005D7C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005D82 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005D88 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005D8E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005D94                            
00005D94                            Obj8B_Animate:				; XREF: Obj8B_Index
00005D94 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005D9A 4EF9 0000 0000             		jmp	AnimateSprite
00005DA0                            ; ===========================================================================
00005DA0                            
00005DA0                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005DA0 5428 0024                  		addq.b	#2,$24(a0)
00005DA4 7002                       		moveq	#2,d0
00005DA6 0828 0000 001C             		btst	#0,$1C(a0)
00005DAC 6700                       		beq.s	loc_5A6A
00005DAE 4440                       		neg.w	d0
00005DB0                            
00005DB0                            loc_5A6A:
00005DB0 43F8 D800                  		lea	($FFFFD800).w,a1
00005DB4 7205                       		moveq	#5,d1
00005DB6                            
00005DB6                            loc_5A70:
00005DB6 1340 003E                  		move.b	d0,$3E(a1)
00005DBA 3400                       		move.w	d0,d2
00005DBC E742                       		asl.w	#3,d2
00005DBE D529 0026                  		add.b	d2,$26(a1)
00005DC2 43E9 0040                  		lea	$40(a1),a1
00005DC6 51C9 FFEE                  		dbf	d1,loc_5A70
00005DCA 5228 001A                  		addq.b	#1,$1A(a0)
00005DCE 317C 0070 0030             		move.w	#112,$30(a0)
00005DD4                            
00005DD4                            loc_5A8E:				; XREF: Obj8B_Index
00005DD4 5368 0030                  		subq.w	#1,$30(a0)
00005DD8 6A00                       		bpl.s	locret_5AA0
00005DDA 0868 0000 001C             		bchg	#0,$1C(a0)
00005DE0 117C 0002 0024             		move.b	#2,$24(a0)
00005DE6                            
00005DE6                            locret_5AA0:
00005DE6 4E75                       		rts	
00005DE8                            ; ===========================================================================
00005DE8                            Ani_obj8B:
00005DE8                            	include "_anim\obj8B.asm"
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005DEA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005DEC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005DEE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005DF2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005DF6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E08                            		even
00005E08                            		even
00005E08                            
00005E08                            ; ===========================================================================
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            
00005E08                            Obj8C:					; XREF: Obj_Index
00005E08 7000                       		moveq	#0,d0
00005E0A 1028 0024                  		move.b	$24(a0),d0
00005E0E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E12 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E16 4EF9 0000 0000             		jmp	DisplaySprite
00005E1C                            ; ===========================================================================
00005E1C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E1E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E20                            ; ===========================================================================
00005E20                            
00005E20                            Obj8C_Main:				; XREF: Obj8C_Index
00005E20 2248                       		movea.l	a0,a1
00005E22 7400                       		moveq	#0,d2
00005E24 7600                       		moveq	#0,d3
00005E26 7205                       		moveq	#5,d1
00005E28 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005E2C                            
00005E2C                            Obj8C_MakeEms:				; XREF: loc_5B42
00005E2C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005E30 5429 0024                  		addq.b	#2,$24(a1)
00005E34 237C 0000 5AC0 0004        		move.l	#Map_obj88,4(a1)
00005E3C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005E42 137C 0000 0001             		move.b	#0,1(a1)
00005E48 137C 0001 0018             		move.b	#1,$18(a1)
00005E4E 337C 0104 0008             		move.w	#$104,8(a1)
00005E54 337C 0120 0038             		move.w	#$120,$38(a1)
00005E5A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005E60 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005E66 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005E6C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005E70                            
00005E70                            Obj8C_ChkEms:
00005E70 7000                       		moveq	#0,d0
00005E72 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005E76 5340                       		subq.w	#1,d0
00005E78 6500                       		bcs.s	loc_5B42
00005E7A                            
00005E7A                            Obj8C_ChkEmLoop:
00005E7A B433 0000                  		cmp.b	(a3,d0.w),d2
00005E7E 6600                       		bne.s	loc_5B3E
00005E80 5202                       		addq.b	#1,d2
00005E82 60EC                       		bra.s	Obj8C_ChkEms
00005E84                            ; ===========================================================================
00005E84                            
00005E84                            loc_5B3E:
00005E84 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005E88                            
00005E88                            loc_5B42:
00005E88 1342 001A                  		move.b	d2,$1A(a1)
00005E8C 5229 001A                  		addq.b	#1,$1A(a1)
00005E90 5202                       		addq.b	#1,d2
00005E92 137C 0080 0026             		move.b	#$80,$26(a1)
00005E98 1343 001E                  		move.b	d3,$1E(a1)
00005E9C 1343 001F                  		move.b	d3,$1F(a1)
00005EA0 0643 000A                  		addi.w	#$A,d3
00005EA4 43E9 0040                  		lea	$40(a1),a1
00005EA8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005EAC                            
00005EAC                            Obj8C_Move:				; XREF: Obj8C_Index
00005EAC 4A68 003E                  		tst.w	$3E(a0)
00005EB0 6700                       		beq.s	locret_5BBA
00005EB2 4A28 001E                  		tst.b	$1E(a0)
00005EB6 6700                       		beq.s	loc_5B78
00005EB8 5328 001E                  		subq.b	#1,$1E(a0)
00005EBC 6600                       		bne.s	loc_5B80
00005EBE                            
00005EBE                            loc_5B78:
00005EBE 3028 003E                  		move.w	$3E(a0),d0
00005EC2 D168 0026                  		add.w	d0,$26(a0)
00005EC6                            
00005EC6                            loc_5B80:
00005EC6 1028 0026                  		move.b	$26(a0),d0
00005ECA 6700                       		beq.s	loc_5B8C
00005ECC 0C00 0080                  		cmpi.b	#$80,d0
00005ED0 6600                       		bne.s	loc_5B96
00005ED2                            
00005ED2                            loc_5B8C:
00005ED2 4268 003E                  		clr.w	$3E(a0)
00005ED6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005EDC                            
00005EDC                            loc_5B96:
00005EDC 4EB9 0000 2C22             		jsr	(CalcSine).l
00005EE2 7800                       		moveq	#0,d4
00005EE4 1828 003C                  		move.b	$3C(a0),d4
00005EE8 C3C4                       		muls.w	d4,d1
00005EEA E081                       		asr.l	#8,d1
00005EEC C1C4                       		muls.w	d4,d0
00005EEE E080                       		asr.l	#8,d0
00005EF0 D268 0038                  		add.w	$38(a0),d1
00005EF4 D068 003A                  		add.w	$3A(a0),d0
00005EF8 3141 0008                  		move.w	d1,8(a0)
00005EFC 3140 000A                  		move.w	d0,$A(a0)
00005F00                            
00005F00                            locret_5BBA:
00005F00 4E75                       		rts	
00005F02                            ; ===========================================================================
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            Map_obj8B:
00005F02                            	include "_maps\obj8B.asm"
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F06 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F0A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F0E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F12 08                         byte_5BCC:	dc.b 8
00005F13 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F18 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F1D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005F22 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005F27 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F2C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F31 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F36 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F3B 08                         byte_5BF5:	dc.b 8
00005F3C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005F41 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005F46 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005F4B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005F50 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F55 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F5A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F5F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F64 08                         byte_5C1E:	dc.b 8
00005F65 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005F6A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005F6F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005F74 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005F79 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F7E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F83 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F88 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F8D 08                         byte_5C47:	dc.b 8
00005F8E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005F93 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005F98 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005F9D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005FA2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FA7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FAC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FB1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FB6 0C                         byte_5C70:	dc.b $C
00005FB7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005FBC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005FC1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005FC6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005FCB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005FD0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005FD5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005FDA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005FDF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005FE4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005FE9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005FEE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005FF3 0A                         byte_5CAD:	dc.b $A
00005FF4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005FF9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005FFE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006003 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006008 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000600D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006012 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006017 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000601C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006021 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006026 0A                         byte_5CE0:	dc.b $A
00006027 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000602C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006031 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006036 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000603B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006040 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006045 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000604A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000604F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006054 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006059 0C                         byte_5D13:	dc.b $C
0000605A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000605F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006064 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006069 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000606E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006073 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006078 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000607D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006082 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006087 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000608C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006091 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006096                            		even
00006096                            		even
00006096                            
00006096                            ; ---------------------------------------------------------------------------
00006096                            ; Ending sequence demos
00006096                            ; ---------------------------------------------------------------------------
00006096                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000060C4                            		even
000060C4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006104                            		even
00006104                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006134                            		even
00006134                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006164                            		even
00006164                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006184                            		even
00006184                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000061A4                            		even
000061A4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000061D4                            		even
000061D4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006204                            		even
00006204                            
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Subroutine to	load level boundaries and start	locations
00006204                            ; ---------------------------------------------------------------------------
00006204                            
00006204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006204                            
00006204                            
00006204                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006204 7000                       		moveq	#0,d0
00006206 11C0 F740                  		move.b	d0,($FFFFF740).w
0000620A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000620E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006212 11C0 F748                  		move.b	d0,($FFFFF748).w
00006216 11C0 F742                  		move.b	d0,($FFFFF742).w
0000621A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000621E ED08                       		lsl.b	#6,d0
00006220 E848                       		lsr.w	#4,d0
00006222 3200                       		move.w	d0,d1
00006224 D040                       		add.w	d0,d0
00006226 D041                       		add.w	d1,d0
00006228 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000622C 3018                       		move.w	(a0)+,d0
0000622E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006232 2018                       		move.l	(a0)+,d0
00006234 21C0 F728                  		move.l	d0,($FFFFF728).w
00006238 21C0 F720                  		move.l	d0,($FFFFF720).w
0000623C 2018                       		move.l	(a0)+,d0
0000623E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006242 21C0 F724                  		move.l	d0,($FFFFF724).w
00006246 3038 F728                  		move.w	($FFFFF728).w,d0
0000624A 0640 0240                  		addi.w	#$240,d0
0000624E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006252 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006258 3018                       		move.w	(a0)+,d0
0000625A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000625E 6000 0000                  		bra.w	LevSz_ChkLamp
00006262                            ; ===========================================================================
00006262                            ; ---------------------------------------------------------------------------
00006262                            ; Level size array and ending start location array
00006262                            ; ---------------------------------------------------------------------------
00006262                            LevelSizeArray:	incbin	misc\lvl_size.bin
000063B2                            		even
000063B2                            
000063B2                            EndingStLocArray:
000063B2                            		incbin	misc\sloc_end.bin
000063D2                            		even
000063D2                            
000063D2                            ; ===========================================================================
000063D2                            
000063D2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000063D6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000063D8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000063DE 3238 D008                  		move.w	($FFFFD008).w,d1
000063E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000063E6 6000                       		bra.s	loc_60D0
000063E8                            ; ===========================================================================
000063E8                            
000063E8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000063E8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063EC ED08                       		lsl.b	#6,d0
000063EE E848                       		lsr.w	#4,d0
000063F0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000063F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000063F8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000063FA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000063FE 5340                       		subq.w	#1,d0
00006400 E548                       		lsl.w	#2,d0
00006402 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006406                            
00006406                            LevSz_SonicPos:
00006406 7200                       		moveq	#0,d1
00006408 3219                       		move.w	(a1)+,d1
0000640A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000640E 7000                       		moveq	#0,d0
00006410 3011                       		move.w	(a1),d0
00006412 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006416                            
00006416                            loc_60D0:				; XREF: LevSz_ChkLamp
00006416 0441 00A0                  		subi.w	#$A0,d1
0000641A 6400                       		bcc.s	loc_60D8
0000641C 7200                       		moveq	#0,d1
0000641E                            
0000641E                            loc_60D8:
0000641E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006422 B242                       		cmp.w	d2,d1
00006424 6500                       		bcs.s	loc_60E2
00006426 3202                       		move.w	d2,d1
00006428                            
00006428                            loc_60E2:
00006428 31C1 F700                  		move.w	d1,($FFFFF700).w
0000642C 0440 0060                  		subi.w	#$60,d0
00006430 6400                       		bcc.s	loc_60EE
00006432 7000                       		moveq	#0,d0
00006434                            
00006434                            loc_60EE:
00006434 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006438 6D00                       		blt.s	loc_60F8
0000643A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000643E                            
0000643E                            loc_60F8:
0000643E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006442 6100 0000                  		bsr.w	BgScrollSpeed
00006446 7000                       		moveq	#0,d0
00006448 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000644C E508                       		lsl.b	#2,d0
0000644E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006454 6000 0000                  		bra.w	LevSz_Unk
00006458                            ; ===========================================================================
00006458                            ; ---------------------------------------------------------------------------
00006458                            ; Sonic	start location array
00006458                            ; ---------------------------------------------------------------------------
00006458                            StartLocArray:	incbin	misc\sloc_lev.bin
000064C8                            		even
000064C8                            
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Which	256x256	tiles contain loops or roll-tunnels
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000064C8                            ; loop,	loop, tunnel, tunnel
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            LoopTileNums:	incbin	misc\loopnums.bin
000064E4                            		even
000064E4                            
000064E4                            ; ===========================================================================
000064E4                            
000064E4                            LevSz_Unk:				; XREF: LevelSizeLoad
000064E4 7000                       		moveq	#0,d0
000064E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064EA E748                       		lsl.w	#3,d0
000064EC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000064F0 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000064F4 24D9                       		move.l	(a1)+,(a2)+
000064F6 24D9                       		move.l	(a1)+,(a2)+
000064F8 4E75                       		rts	
000064FA                            ; End of function LevelSizeLoad
000064FA                            
000064FA                            ; ===========================================================================
000064FA 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006502 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000650A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006512 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000651A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006522 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000652A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006532                            
00006532                            ; ---------------------------------------------------------------------------
00006532                            ; Subroutine to	set scroll speed of some backgrounds
00006532                            ; ---------------------------------------------------------------------------
00006532                            
00006532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006532                            
00006532                            
00006532                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006532 4A38 FE30                  		tst.b	($FFFFFE30).w
00006536 6600                       		bne.s	loc_6206
00006538 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000653C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006540 31C1 F708                  		move.w	d1,($FFFFF708).w
00006544 31C1 F710                  		move.w	d1,($FFFFF710).w
00006548 31C1 F718                  		move.w	d1,($FFFFF718).w
0000654C                            
0000654C                            loc_6206:
0000654C 7400                       		moveq	#0,d2
0000654E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006552 D442                       		add.w	d2,d2
00006554 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006558 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000655C                            ; End of function BgScrollSpeed
0000655C                            
0000655C                            ; ===========================================================================
0000655C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006560 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006564 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006568 0000                       		dc.w BgScroll_End-BgScroll_Index
0000656A                            ; ===========================================================================
0000656A                            
0000656A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000656A 6000 0000                  		bra.w	Deform_GHZ
0000656E                            ; ===========================================================================
0000656E                            
0000656E                            BgScroll_LZ:				; XREF: BgScroll_Index
0000656E E280                       		asr.l	#1,d0
00006570 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006574 4E75                       		rts	
00006576                            ; ===========================================================================
00006576                            
00006576                            BgScroll_MZ:				; XREF: BgScroll_Index
00006576 4E75                       		rts	
00006578                            ; ===========================================================================
00006578                            
00006578                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006578 E280                       		asr.l	#1,d0
0000657A 0640 00C0                  		addi.w	#$C0,d0
0000657E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            
00006584                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006584 E980                       		asl.l	#4,d0
00006586 2400                       		move.l	d0,d2
00006588 E380                       		asl.l	#1,d0
0000658A D082                       		add.l	d2,d0
0000658C E080                       		asr.l	#8,d0
0000658E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006592 31C0 F714                  		move.w	d0,($FFFFF714).w
00006596 4E75                       		rts	
00006598                            ; ===========================================================================
00006598                            
00006598                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006598 E980                       		asl.l	#4,d0
0000659A E380                       		asl.l	#1,d0
0000659C E080                       		asr.l	#8,d0
0000659E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065A2 4E75                       		rts	
000065A4                            ; ===========================================================================
000065A4                            
000065A4                            BgScroll_End:				; XREF: BgScroll_Index
000065A4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065AA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065B0 4E75                       		rts	
000065B2                            ; ===========================================================================
000065B2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000065B8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065BE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000065C4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065CA 4E75                       		rts
000065CC                            
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            ; Background layer deformation subroutines
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            
000065CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065CC                            
000065CC                            
000065CC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000065CC 4A38 F744                  		tst.b	($FFFFF744).w
000065D0 6700                       		beq.s	loc_628E
000065D2 4E75                       		rts	
000065D4                            ; ===========================================================================
000065D4                            
000065D4                            loc_628E:
000065D4 4278 F754                  		clr.w	($FFFFF754).w
000065D8 4278 F756                  		clr.w	($FFFFF756).w
000065DC 4278 F758                  		clr.w	($FFFFF758).w
000065E0 4278 F75A                  		clr.w	($FFFFF75A).w
000065E4 6100 0000                  		bsr.w	ScrollHoriz
000065E8 6100 0000                  		bsr.w	ScrollVertical
000065EC 6100 0000                  		bsr.w	DynScrResizeLoad
000065F0 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000065F6 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000065FC 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006602 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006608 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000660E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006614 7000                       		moveq	#0,d0
00006616 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000661A D040                       		add.w	d0,d0
0000661C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006620 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006624                            ; End of function DeformBgLayer
00006624                            
00006624                            ; ===========================================================================
00006624                            ; ---------------------------------------------------------------------------
00006624                            ; Offset index for background layer deformation	code
00006624                            ; ---------------------------------------------------------------------------
00006624 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006628 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000662C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006630 0000                       		dc.w Deform_GHZ-Deform_Index
00006632                            ; ---------------------------------------------------------------------------
00006632                            ; Green	Hill Zone background layer deformation code
00006632                            ; ---------------------------------------------------------------------------
00006632                            
00006632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006632                            
00006632                            
00006632                            Deform_GHZ:				; XREF: Deform_Index
00006632 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006636 48C4                       		ext.l	d4
00006638 EB84                       		asl.l	#5,d4
0000663A 2204                       		move.l	d4,d1
0000663C E384                       		asl.l	#1,d4
0000663E D881                       		add.l	d1,d4
00006640 7A00                       		moveq	#0,d5
00006642 6100 0000                  		bsr.w	ScrollBlock1
00006646 6100 0000                  		bsr.w	ScrollBlock4
0000664A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000664E 3038 F704                  		move.w	($FFFFF704).w,d0
00006652 0240 07FF                  		andi.w	#$7FF,d0
00006656 EA48                       		lsr.w	#5,d0
00006658 4440                       		neg.w	d0
0000665A 0640 0026                  		addi.w	#$26,d0
0000665E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006662 3800                       		move.w	d0,d4
00006664 6100 0000                  		bsr.w	ScrollBlock3
00006668 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000666E 323C 006F                  		move.w	#$6F,d1
00006672 9244                       		sub.w	d4,d1
00006674 3038 F700                  		move.w	($FFFFF700).w,d0
00006678 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000667E 6600                       		bne.s	loc_633C
00006680 7000                       		moveq	#0,d0
00006682                            
00006682                            loc_633C:
00006682 4440                       		neg.w	d0
00006684 4840                       		swap	d0
00006686 3038 F708                  		move.w	($FFFFF708).w,d0
0000668A 4440                       		neg.w	d0
0000668C                            
0000668C                            loc_6346:
0000668C 22C0                       		move.l	d0,(a1)+
0000668E 51C9 FFFC                  		dbf	d1,loc_6346
00006692 323C 0027                  		move.w	#$27,d1
00006696 3038 F710                  		move.w	($FFFFF710).w,d0
0000669A 4440                       		neg.w	d0
0000669C                            
0000669C                            loc_6356:
0000669C 22C0                       		move.l	d0,(a1)+
0000669E 51C9 FFFC                  		dbf	d1,loc_6356
000066A2 3038 F710                  		move.w	($FFFFF710).w,d0
000066A6 0640 0000                  		addi.w	#0,d0
000066AA 3438 F700                  		move.w	($FFFFF700).w,d2
000066AE 0642 FE00                  		addi.w	#-$200,d2
000066B2 9440                       		sub.w	d0,d2
000066B4 48C2                       		ext.l	d2
000066B6 E182                       		asl.l	#8,d2
000066B8 85FC 0068                  		divs.w	#$68,d2
000066BC 48C2                       		ext.l	d2
000066BE E182                       		asl.l	#8,d2
000066C0 7600                       		moveq	#0,d3
000066C2 3600                       		move.w	d0,d3
000066C4 323C 0047                  		move.w	#$47,d1
000066C8 D244                       		add.w	d4,d1
000066CA                            
000066CA                            loc_6384:
000066CA 3003                       		move.w	d3,d0
000066CC 4440                       		neg.w	d0
000066CE 22C0                       		move.l	d0,(a1)+
000066D0 4843                       		swap	d3
000066D2 D682                       		add.l	d2,d3
000066D4 4843                       		swap	d3
000066D6 51C9 FFF2                  		dbf	d1,loc_6384
000066DA 4E75                       		rts	
000066DC                            ; End of function Deform_GHZ
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; Labyrinth Zone background layer deformation code
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            
000066DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066DC                            
000066DC                            
000066DC                            Deform_LZ:				; XREF: Deform_Index
000066DC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066E0 48C4                       		ext.l	d4
000066E2 EF84                       		asl.l	#7,d4
000066E4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000066E8 48C5                       		ext.l	d5
000066EA EF85                       		asl.l	#7,d5
000066EC 6100 0000                  		bsr.w	ScrollBlock1
000066F0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066F6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066FA 323C 00DF                  		move.w	#$DF,d1
000066FE 3038 F700                  		move.w	($FFFFF700).w,d0
00006702 4440                       		neg.w	d0
00006704 4840                       		swap	d0
00006706 3038 F708                  		move.w	($FFFFF708).w,d0
0000670A 4440                       		neg.w	d0
0000670C                            
0000670C                            loc_63C6:
0000670C 22C0                       		move.l	d0,(a1)+
0000670E 51C9 FFFC                  		dbf	d1,loc_63C6
00006712 3038 F646                  		move.w	($FFFFF646).w,d0
00006716 9078 F704                  		sub.w	($FFFFF704).w,d0
0000671A 4E75                       		rts	
0000671C                            ; End of function Deform_LZ
0000671C                            
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            ; Marble Zone background layer deformation code
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            
0000671C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000671C                            
0000671C                            
0000671C                            Deform_MZ:				; XREF: Deform_Index
0000671C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006720 48C4                       		ext.l	d4
00006722 ED84                       		asl.l	#6,d4
00006724 2204                       		move.l	d4,d1
00006726 E384                       		asl.l	#1,d4
00006728 D881                       		add.l	d1,d4
0000672A 7A00                       		moveq	#0,d5
0000672C 6100 0000                  		bsr.w	ScrollBlock1
00006730 303C 0200                  		move.w	#$200,d0
00006734 3238 F704                  		move.w	($FFFFF704).w,d1
00006738 0441 01C8                  		subi.w	#$1C8,d1
0000673C 6500                       		bcs.s	loc_6402
0000673E 3401                       		move.w	d1,d2
00006740 D241                       		add.w	d1,d1
00006742 D242                       		add.w	d2,d1
00006744 E441                       		asr.w	#2,d1
00006746 D041                       		add.w	d1,d0
00006748                            
00006748                            loc_6402:
00006748 31C0 F714                  		move.w	d0,($FFFFF714).w
0000674C 6100 0000                  		bsr.w	ScrollBlock3
00006750 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006756 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000675A 323C 00DF                  		move.w	#$DF,d1
0000675E 3038 F700                  		move.w	($FFFFF700).w,d0
00006762 4440                       		neg.w	d0
00006764 4840                       		swap	d0
00006766 3038 F708                  		move.w	($FFFFF708).w,d0
0000676A 4440                       		neg.w	d0
0000676C                            
0000676C                            loc_6426:
0000676C 22C0                       		move.l	d0,(a1)+
0000676E 51C9 FFFC                  		dbf	d1,loc_6426
00006772 4E75                       		rts	
00006774                            ; End of function Deform_MZ
00006774                            
00006774                            ; ---------------------------------------------------------------------------
00006774                            ; Star Light Zone background layer deformation code
00006774                            ; ---------------------------------------------------------------------------
00006774                            
00006774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006774                            
00006774                            
00006774                            Deform_SLZ:				; XREF: Deform_Index
00006774 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006778 48C4                       		ext.l	d4
0000677A EB84                       		asl.l	#5,d4
0000677C 2204                       		move.l	d4,d1
0000677E E384                       		asl.l	#1,d4
00006780 D881                       		add.l	d1,d4
00006782 7A00                       		moveq	#0,d5
00006784 6100 0000                  		bsr.w	ScrollBlock1
00006788 6100 0000                  		bsr.w	ScrollBlock3
0000678C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006790                            	;	move.w	($FFFFF704).w,d0
00006790                            	;	andi.w	#$7FF,d0
00006790 EA48                       		lsr.w	#5,d0
00006792 4440                       		neg.w	d0
00006794 0640 0026                  		addi.w	#$26,d0
00006798 31C0 F714                  		move.w	d0,($FFFFF714).w
0000679C 3800                       		move.w	d0,d4
0000679E                            	;	bsr.w	ScrollBlock3
0000679E 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000067A4 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000067A8                            
000067A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067AC 4440                       		neg.w	d0			; negate (positive to negative)
000067AE 4840                       		swap	d0			; send to the left side of d0
000067B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067B4 45F8 A800                  		lea	($FFFFA800).w,a2
000067B8 069A 0000 5000             		addi.l	#$5000,(a2)+
000067BE 069A 0000 C000             		addi.l	#$C000,(a2)+
000067C4 3038 A800                  		move.w	($FFFFA800).w,d0
000067C8 4440                       		neg.w	d0			; negate (positive to negative)
000067CA E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000067CC 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067D0                            slz_DeformLoop_1:
000067D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000067D6                            
000067D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067DA 4440                       		neg.w	d0			; negate (positive to negative)
000067DC 4840                       		swap	d0			; send to the left side of d0
000067DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067E2 45F8 A800                  		lea	($FFFFA800).w,a2
000067E6 069A 0000 5000             		addi.l	#$5000,(a2)+
000067EC 069A 0000 C000             		addi.l	#$C000,(a2)+
000067F2 3038 A800                  		move.w	($FFFFA800).w,d0
000067F6 4440                       		neg.w	d0			; negate (positive to negative)
000067F8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000067FA 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067FE                            slz_DeformLoop_2:
000067FE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006800 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006804                            
00006804 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006808 4440                       		neg.w	d0			; negate (positive to negative)
0000680A 4840                       		swap	d0			; send to the left side of d0
0000680C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006810 45F8 A800                  		lea	($FFFFA800).w,a2
00006814 069A 0000 5000             		addi.l	#$5000,(a2)+
0000681A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006820 3038 A800                  		move.w	($FFFFA800).w,d0
00006824 4440                       		neg.w	d0			; negate (positive to negative)
00006826 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006828 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000682C                            slz_DeformLoop_3:
0000682C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000682E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006832                            
00006832 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006836 4440                       		neg.w	d0			; negate (positive to negative)
00006838 4840                       		swap	d0			; send to the left side of d0
0000683A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000683E 45F8 A800                  		lea	($FFFFA800).w,a2
00006842 069A 0000 5000             		addi.l	#$5000,(a2)+
00006848 069A 0000 C000             		addi.l	#$C000,(a2)+
0000684E 3038 A800                  		move.w	($FFFFA800).w,d0
00006852 4440                       		neg.w	d0			; negate (positive to negative)
00006854 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006856 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000685A                            slz_DeformLoop_4:
0000685A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000685C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006860                            
00006860 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006864 4440                       		neg.w	d0			; negate (positive to negative)
00006866 4840                       		swap	d0			; send to the left side of d0
00006868 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000686C 45F8 A800                  		lea	($FFFFA800).w,a2
00006870 069A 0000 5000             		addi.l	#$5000,(a2)+
00006876 069A 0000 C000             		addi.l	#$C000,(a2)+
0000687C 3038 A800                  		move.w	($FFFFA800).w,d0
00006880 4440                       		neg.w	d0			; negate (positive to negative)
00006882 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006884 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006888                            slz_DeformLoop_5:
00006888 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000688A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
0000688E                            
0000688E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006892 4440                       		neg.w	d0			; negate (positive to negative)
00006894 4840                       		swap	d0			; send to the left side of d0
00006896 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000689A 4440                       		neg.w	d0			; negate (positive to negative)
0000689C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000689E 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068A2                            slz_DeformLoop_6:
000068A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000068A8                            
000068A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068AC 4440                       		neg.w	d0			; negate (positive to negative)
000068AE 4840                       		swap	d0			; send to the left side of d0
000068B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068B4 4440                       		neg.w	d0			; negate (positive to negative)
000068B6 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000068B8 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068BC                            slz_DeformLoop_7:
000068BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000068C2                            
000068C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068C6 4440                       		neg.w	d0			; negate (positive to negative)
000068C8 4840                       		swap	d0			; send to the left side of d0
000068CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068CE 4440                       		neg.w	d0			; negate (positive to negative)
000068D0 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000068D2 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D6                            slz_DeformLoop_8:
000068D6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068D8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000068DC                            
000068DC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E0 4440                       		neg.w	d0			; negate (positive to negative)
000068E2 4840                       		swap	d0			; send to the left side of d0
000068E4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068E8 4440                       		neg.w	d0			; negate (positive to negative)
000068EA EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000068EC 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068F0                            slz_DeformLoop_9:
000068F0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068F2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000068F6                            
000068F6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068FA 4440                       		neg.w	d0			; negate (positive to negative)
000068FC 4840                       		swap	d0			; send to the left side of d0
000068FE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006902 4440                       		neg.w	d0			; negate (positive to negative)
00006904 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006906 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000690A                            slz_DeformLoop_10:
0000690A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000690C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006910                            
00006910 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 4840                       		swap	d0			; send to the left side of d0
00006918 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000691C 4440                       		neg.w	d0			; negate (positive to negative)
0000691E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006920 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006924                            slz_DeformLoop_11:
00006924 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006926 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
0000692A                            
0000692A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 4840                       		swap	d0			; send to the left side of d0
00006932 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006936 4440                       		neg.w	d0			; negate (positive to negative)
00006938 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000693A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000693E                            slz_DeformLoop_12:
0000693E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006940 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006944                            
00006944 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A 4840                       		swap	d0			; send to the left side of d0
0000694C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006950 4440                       		neg.w	d0			; negate (positive to negative)
00006952 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006954 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006958                            slz_DeformLoop_13:
00006958 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000695A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
0000695E 4E75                       		rts	
00006960                            ; End of function Deform_SLZ
00006960 4E75                       		rts	
00006962                            ; End of function Deform_SLZ_2
00006962                            
00006962                            ; ---------------------------------------------------------------------------
00006962                            ; Spring Yard Zone background layer deformation	code
00006962                            ; ---------------------------------------------------------------------------
00006962                            
00006962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006962                            
00006962                            
00006962                            Deform_SYZ:				; XREF: Deform_Index
00006962 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006966 48C4                       		ext.l	d4
00006968 ED84                       		asl.l	#6,d4
0000696A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000696E 48C5                       		ext.l	d5
00006970 E985                       		asl.l	#4,d5
00006972 2205                       		move.l	d5,d1
00006974 E385                       		asl.l	#1,d5
00006976 DA81                       		add.l	d1,d5
00006978 6100 0000                  		bsr.w	ScrollBlock1
0000697C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006982 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006986 323C 00DF                  		move.w	#$DF,d1
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0
0000698E 4440                       		neg.w	d0
00006990 4840                       		swap	d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0
00006996 4440                       		neg.w	d0
00006998                            
00006998                            loc_653C:
00006998 22C0                       		move.l	d0,(a1)+
0000699A 51C9 FFFC                  		dbf	d1,loc_653C
0000699E 4E75                       		rts	
000069A0                            ; End of function Deform_SYZ
000069A0                            
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            ; Scrap	Brain Zone background layer deformation	code
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            
000069A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A0                            
000069A0                            
000069A0                            Deform_SBZ:				; XREF: Deform_Index
000069A0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069A4 48C4                       		ext.l	d4
000069A6 ED84                       		asl.l	#6,d4
000069A8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069AC 48C5                       		ext.l	d5
000069AE E985                       		asl.l	#4,d5
000069B0 E385                       		asl.l	#1,d5
000069B2 6100 0000                  		bsr.w	ScrollBlock1
000069B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069C0 323C 00DF                  		move.w	#$DF,d1
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0
000069C8 4440                       		neg.w	d0
000069CA 4840                       		swap	d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0
000069D0 4440                       		neg.w	d0
000069D2                            
000069D2                            loc_6576:
000069D2 22C0                       		move.l	d0,(a1)+
000069D4 51C9 FFFC                  		dbf	d1,loc_6576
000069D8 4E75                       		rts	
000069DA                            ; End of function Deform_SBZ
000069DA                            
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            ; Subroutine to	scroll the level horizontally as Sonic moves
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            
000069DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069DA                            
000069DA                            
000069DA                            ScrollHoriz:				; XREF: DeformBgLayer
000069DA 3838 F700                  		move.w	($FFFFF700).w,d4
000069DE 6100                       		bsr.s	ScrollHoriz2
000069E0 3038 F700                  		move.w	($FFFFF700).w,d0
000069E4 0240 0010                  		andi.w	#$10,d0
000069E8 1238 F74A                  		move.b	($FFFFF74A).w,d1
000069EC B300                       		eor.b	d1,d0
000069EE 6600                       		bne.s	locret_65B0
000069F0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000069F6 3038 F700                  		move.w	($FFFFF700).w,d0
000069FA 9044                       		sub.w	d4,d0
000069FC 6A00                       		bpl.s	loc_65AA
000069FE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A04 4E75                       		rts	
00006A06                            ; ===========================================================================
00006A06                            
00006A06                            loc_65AA:
00006A06 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A0C                            
00006A0C                            locret_65B0:
00006A0C 4E75                       		rts	
00006A0E                            ; End of function ScrollHoriz
00006A0E                            
00006A0E                            
00006A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A0E                            
00006A0E                            
00006A0E                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A0E 3038 D008                  		move.w	($FFFFD008).w,d0
00006A12 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A16 0440 0090                  		subi.w	#$90,d0
00006A1A 6500                       		bcs.s	loc_65F6
00006A1C 0440 0010                  		subi.w	#$10,d0
00006A20 6400                       		bcc.s	loc_65CC
00006A22 4278 F73A                  		clr.w	($FFFFF73A).w
00006A26 4E75                       		rts	
00006A28                            ; ===========================================================================
00006A28                            
00006A28                            loc_65CC:
00006A28 0C40 0010                  		cmpi.w	#$10,d0
00006A2C 6500                       		bcs.s	loc_65D6
00006A2E 303C 0010                  		move.w	#$10,d0
00006A32                            
00006A32                            loc_65D6:
00006A32 D078 F700                  		add.w	($FFFFF700).w,d0
00006A36 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006A3A 6D00                       		blt.s	loc_65E4
00006A3C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006A40                            
00006A40                            loc_65E4:
00006A40 3200                       		move.w	d0,d1
00006A42 9278 F700                  		sub.w	($FFFFF700).w,d1
00006A46 E141                       		asl.w	#8,d1
00006A48 31C0 F700                  		move.w	d0,($FFFFF700).w
00006A4C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006A50 4E75                       		rts	
00006A52                            ; ===========================================================================
00006A52                            
00006A52                            loc_65F6:				; XREF: ScrollHoriz2
00006A52 D078 F700                  		add.w	($FFFFF700).w,d0
00006A56 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006A5A 6EE4                       		bgt.s	loc_65E4
00006A5C 3038 F728                  		move.w	($FFFFF728).w,d0
00006A60 60DE                       		bra.s	loc_65E4
00006A62                            ; End of function ScrollHoriz2
00006A62                            
00006A62                            ; ===========================================================================
00006A62 4A40                       		tst.w	d0
00006A64 6A00                       		bpl.s	loc_6610
00006A66 303C FFFE                  		move.w	#-2,d0
00006A6A 60E6                       		bra.s	loc_65F6
00006A6C                            ; ===========================================================================
00006A6C                            
00006A6C                            loc_6610:
00006A6C 303C 0002                  		move.w	#2,d0
00006A70 60B6                       		bra.s	loc_65CC
00006A72                            
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            ; Subroutine to	scroll the level vertically as Sonic moves
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            
00006A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A72                            
00006A72                            
00006A72                            ScrollVertical:				; XREF: DeformBgLayer
00006A72 7200                       		moveq	#0,d1
00006A74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A78 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A7C 0838 0002 D022             		btst	#2,($FFFFD022).w
00006A82 6700                       		beq.s	loc_662A
00006A84 5B40                       		subq.w	#5,d0
00006A86                            
00006A86                            loc_662A:
00006A86 0838 0001 D022             		btst	#1,($FFFFD022).w
00006A8C 6700                       		beq.s	loc_664A
00006A8E 0640 0020                  		addi.w	#$20,d0
00006A92 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A96 6500                       		bcs.s	loc_6696
00006A98 0440 0040                  		subi.w	#$40,d0
00006A9C 6400                       		bcc.s	loc_6696
00006A9E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AA2 6600                       		bne.s	loc_66A8
00006AA4 6000                       		bra.s	loc_6656
00006AA6                            ; ===========================================================================
00006AA6                            
00006AA6                            loc_664A:
00006AA6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006AAA 6600                       		bne.s	loc_665C
00006AAC 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AB0 6600                       		bne.s	loc_66A8
00006AB2                            
00006AB2                            loc_6656:
00006AB2 4278 F73C                  		clr.w	($FFFFF73C).w
00006AB6 4E75                       		rts	
00006AB8                            ; ===========================================================================
00006AB8                            
00006AB8                            loc_665C:
00006AB8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006ABE 6600                       		bne.s	loc_6684
00006AC0 3238 D014                  		move.w	($FFFFD014).w,d1
00006AC4 6A00                       		bpl.s	loc_666C
00006AC6 4441                       		neg.w	d1
00006AC8                            
00006AC8                            loc_666C:
00006AC8 0C41 0800                  		cmpi.w	#$800,d1
00006ACC 6400                       		bcc.s	loc_6696
00006ACE 323C 0600                  		move.w	#$600,d1
00006AD2 0C40 0006                  		cmpi.w	#6,d0
00006AD6 6E00                       		bgt.s	loc_66F6
00006AD8 0C40 FFFA                  		cmpi.w	#-6,d0
00006ADC 6D00                       		blt.s	loc_66C0
00006ADE 6000                       		bra.s	loc_66AE
00006AE0                            ; ===========================================================================
00006AE0                            
00006AE0                            loc_6684:
00006AE0 323C 0200                  		move.w	#$200,d1
00006AE4 0C40 0002                  		cmpi.w	#2,d0
00006AE8 6E00                       		bgt.s	loc_66F6
00006AEA 0C40 FFFE                  		cmpi.w	#-2,d0
00006AEE 6D00                       		blt.s	loc_66C0
00006AF0 6000                       		bra.s	loc_66AE
00006AF2                            ; ===========================================================================
00006AF2                            
00006AF2                            loc_6696:
00006AF2 323C 1000                  		move.w	#$1000,d1
00006AF6 0C40 0010                  		cmpi.w	#$10,d0
00006AFA 6E00                       		bgt.s	loc_66F6
00006AFC 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B00 6D00                       		blt.s	loc_66C0
00006B02 6000                       		bra.s	loc_66AE
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            loc_66A8:
00006B04 7000                       		moveq	#0,d0
00006B06 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B0A                            
00006B0A                            loc_66AE:
00006B0A 7200                       		moveq	#0,d1
00006B0C 3200                       		move.w	d0,d1
00006B0E D278 F704                  		add.w	($FFFFF704).w,d1
00006B12 4A40                       		tst.w	d0
00006B14 6A00 0000                  		bpl.w	loc_6700
00006B18 6000 0000                  		bra.w	loc_66CC
00006B1C                            ; ===========================================================================
00006B1C                            
00006B1C                            loc_66C0:
00006B1C 4441                       		neg.w	d1
00006B1E 48C1                       		ext.l	d1
00006B20 E181                       		asl.l	#8,d1
00006B22 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B26 4841                       		swap	d1
00006B28                            
00006B28                            loc_66CC:
00006B28 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006B2C 6E00                       		bgt.s	loc_6724
00006B2E 0C41 FF00                  		cmpi.w	#-$100,d1
00006B32 6E00                       		bgt.s	loc_66F0
00006B34 0241 07FF                  		andi.w	#$7FF,d1
00006B38 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B3E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006B44 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B4A 6000                       		bra.s	loc_6724
00006B4C                            ; ===========================================================================
00006B4C                            
00006B4C                            loc_66F0:
00006B4C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006B50 6000                       		bra.s	loc_6724
00006B52                            ; ===========================================================================
00006B52                            
00006B52                            loc_66F6:
00006B52 48C1                       		ext.l	d1
00006B54 E181                       		asl.l	#8,d1
00006B56 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B5A 4841                       		swap	d1
00006B5C                            
00006B5C                            loc_6700:
00006B5C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006B60 6D00                       		blt.s	loc_6724
00006B62 0441 0800                  		subi.w	#$800,d1
00006B66 6500                       		bcs.s	loc_6720
00006B68 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B6E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006B74 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B7A 6000                       		bra.s	loc_6724
00006B7C                            ; ===========================================================================
00006B7C                            
00006B7C                            loc_6720:
00006B7C 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006B80                            
00006B80                            loc_6724:
00006B80 3838 F704                  		move.w	($FFFFF704).w,d4
00006B84 4841                       		swap	d1
00006B86 2601                       		move.l	d1,d3
00006B88 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006B8C E09B                       		ror.l	#8,d3
00006B8E 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006B92 21C1 F704                  		move.l	d1,($FFFFF704).w
00006B96 3038 F704                  		move.w	($FFFFF704).w,d0
00006B9A 0240 0010                  		andi.w	#$10,d0
00006B9E 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006BA2 B300                       		eor.b	d1,d0
00006BA4 6600                       		bne.s	locret_6766
00006BA6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006BAC 3038 F704                  		move.w	($FFFFF704).w,d0
00006BB0 9044                       		sub.w	d4,d0
00006BB2 6A00                       		bpl.s	loc_6760
00006BB4 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006BBA 4E75                       		rts	
00006BBC                            ; ===========================================================================
00006BBC                            
00006BBC                            loc_6760:
00006BBC 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006BC2                            
00006BC2                            locret_6766:
00006BC2 4E75                       		rts	
00006BC4                            ; End of function ScrollVertical
00006BC4                            
00006BC4                            
00006BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC4                            
00006BC4                            
00006BC4                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006BC4 2438 F708                  		move.l	($FFFFF708).w,d2
00006BC8 2002                       		move.l	d2,d0
00006BCA D084                       		add.l	d4,d0
00006BCC 21C0 F708                  		move.l	d0,($FFFFF708).w
00006BD0 2200                       		move.l	d0,d1
00006BD2 4841                       		swap	d1
00006BD4 0241 0010                  		andi.w	#$10,d1
00006BD8 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006BDC B701                       		eor.b	d3,d1
00006BDE 6600                       		bne.s	loc_679C
00006BE0 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006BE6 9082                       		sub.l	d2,d0
00006BE8 6A00                       		bpl.s	loc_6796
00006BEA 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006BF0 6000                       		bra.s	loc_679C
00006BF2                            ; ===========================================================================
00006BF2                            
00006BF2                            loc_6796:
00006BF2 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006BF8                            
00006BF8                            loc_679C:
00006BF8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BFC 2003                       		move.l	d3,d0
00006BFE D085                       		add.l	d5,d0
00006C00 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C04 2200                       		move.l	d0,d1
00006C06 4841                       		swap	d1
00006C08 0241 0010                  		andi.w	#$10,d1
00006C0C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C10 B501                       		eor.b	d2,d1
00006C12 6600                       		bne.s	locret_67D0
00006C14 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C1A 9083                       		sub.l	d3,d0
00006C1C 6A00                       		bpl.s	loc_67CA
00006C1E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C24 4E75                       		rts	
00006C26                            ; ===========================================================================
00006C26                            
00006C26                            loc_67CA:
00006C26 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C2C                            
00006C2C                            locret_67D0:
00006C2C 4E75                       		rts	
00006C2E                            ; End of function ScrollBlock1
00006C2E                            
00006C2E                            
00006C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C2E                            
00006C2E                            
00006C2E                            ScrollBlock2:				; XREF: Deform_SLZ
00006C2E 2438 F708                  		move.l	($FFFFF708).w,d2
00006C32 2002                       		move.l	d2,d0
00006C34 D084                       		add.l	d4,d0
00006C36 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C3A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C3E 2003                       		move.l	d3,d0
00006C40 D085                       		add.l	d5,d0
00006C42 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C46 2200                       		move.l	d0,d1
00006C48 4841                       		swap	d1
00006C4A 0241 0010                  		andi.w	#$10,d1
00006C4E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C52 B501                       		eor.b	d2,d1
00006C54 6600                       		bne.s	locret_6812
00006C56 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C5C 9083                       		sub.l	d3,d0
00006C5E 6A00                       		bpl.s	loc_680C
00006C60 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C66 4E75                       		rts	
00006C68                            ; ===========================================================================
00006C68                            
00006C68                            loc_680C:
00006C68 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C6E                            
00006C6E                            locret_6812:
00006C6E 4E75                       		rts	
00006C70                            ; End of function ScrollBlock2
00006C70                            
00006C70                            
00006C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C70                            
00006C70                            
00006C70                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006C70 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006C74 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C78 3200                       		move.w	d0,d1
00006C7A 0241 0010                  		andi.w	#$10,d1
00006C7E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C82 B501                       		eor.b	d2,d1
00006C84 6600                       		bne.s	locret_6842
00006C86 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C8C 9043                       		sub.w	d3,d0
00006C8E 6A00                       		bpl.s	loc_683C
00006C90 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C96 4E75                       		rts	
00006C98                            ; ===========================================================================
00006C98                            
00006C98                            loc_683C:
00006C98 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C9E                            
00006C9E                            locret_6842:
00006C9E 4E75                       		rts	
00006CA0                            ; End of function ScrollBlock3
00006CA0                            
00006CA0                            
00006CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA0                            
00006CA0                            
00006CA0                            ScrollBlock4:				; XREF: Deform_GHZ
00006CA0 3438 F710                  		move.w	($FFFFF710).w,d2
00006CA4 3638 F714                  		move.w	($FFFFF714).w,d3
00006CA8 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006CAC 48C0                       		ext.l	d0
00006CAE EF80                       		asl.l	#7,d0
00006CB0 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006CB4 3038 F710                  		move.w	($FFFFF710).w,d0
00006CB8 0240 0010                  		andi.w	#$10,d0
00006CBC 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006CC0 B300                       		eor.b	d1,d0
00006CC2 6600                       		bne.s	locret_6884
00006CC4 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006CCA 3038 F710                  		move.w	($FFFFF710).w,d0
00006CCE 9042                       		sub.w	d2,d0
00006CD0 6A00                       		bpl.s	loc_687E
00006CD2 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006CD8 6000                       		bra.s	locret_6884
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_687E:
00006CDA 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006CE0                            
00006CE0                            locret_6884:
00006CE0 4E75                       		rts	
00006CE2                            ; End of function ScrollBlock4
00006CE2                            
00006CE2                            
00006CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE2                            
00006CE2                            
00006CE2                            sub_6886:				; XREF: loc_C44
00006CE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CEE 45F8 F756                  		lea	($FFFFF756).w,a2
00006CF2 47F8 F708                  		lea	($FFFFF708).w,a3
00006CF6 49F8 A440                  		lea	($FFFFA440).w,a4
00006CFA 343C 6000                  		move.w	#$6000,d2
00006CFE 6100 0000                  		bsr.w	sub_6954
00006D02 45F8 F758                  		lea	($FFFFF758).w,a2
00006D06 47F8 F710                  		lea	($FFFFF710).w,a3
00006D0A 6000 0000                  		bra.w	sub_69F4
00006D0E                            ; End of function sub_6886
00006D0E                            
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            ; Subroutine to	display	correct	tiles as you move
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            
00006D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0E                            
00006D0E                            
00006D0E                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D14 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D1A 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D1E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D22 49F8 A440                  		lea	($FFFFA440).w,a4
00006D26 343C 6000                  		move.w	#$6000,d2
00006D2A 6100 0000                  		bsr.w	sub_6954
00006D2E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006D32 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006D36 6100 0000                  		bsr.w	sub_69F4
00006D3A 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D3E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006D42 49F8 A400                  		lea	($FFFFA400).w,a4
00006D46 343C 4000                  		move.w	#$4000,d2
00006D4A 4A12                       		tst.b	(a2)
00006D4C 6700                       		beq.s	locret_6952
00006D4E 0892 0000                  		bclr	#0,(a2)
00006D52 6700                       		beq.s	loc_6908
00006D54 78F0                       		moveq	#-$10,d4
00006D56 7AF0                       		moveq	#-$10,d5
00006D58 6100 0000                  		bsr.w	sub_6C20
00006D5C 78F0                       		moveq	#-$10,d4
00006D5E 7AF0                       		moveq	#-$10,d5
00006D60 6100 0000                  		bsr.w	sub_6AD8
00006D64                            
00006D64                            loc_6908:
00006D64 0892 0001                  		bclr	#1,(a2)
00006D68 6700                       		beq.s	loc_6922
00006D6A 383C 00E0                  		move.w	#$E0,d4
00006D6E 7AF0                       		moveq	#-$10,d5
00006D70 6100 0000                  		bsr.w	sub_6C20
00006D74 383C 00E0                  		move.w	#$E0,d4
00006D78 7AF0                       		moveq	#-$10,d5
00006D7A 6100 0000                  		bsr.w	sub_6AD8
00006D7E                            
00006D7E                            loc_6922:
00006D7E 0892 0002                  		bclr	#2,(a2)
00006D82 6700                       		beq.s	loc_6938
00006D84 78F0                       		moveq	#-$10,d4
00006D86 7AF0                       		moveq	#-$10,d5
00006D88 6100 0000                  		bsr.w	sub_6C20
00006D8C 78F0                       		moveq	#-$10,d4
00006D8E 7AF0                       		moveq	#-$10,d5
00006D90 6100 0000                  		bsr.w	sub_6B04
00006D94                            
00006D94                            loc_6938:
00006D94 0892 0003                  		bclr	#3,(a2)
00006D98 6700                       		beq.s	locret_6952
00006D9A 78F0                       		moveq	#-$10,d4
00006D9C 3A3C 0140                  		move.w	#$140,d5
00006DA0 6100 0000                  		bsr.w	sub_6C20
00006DA4 78F0                       		moveq	#-$10,d4
00006DA6 3A3C 0140                  		move.w	#$140,d5
00006DAA 6100 0000                  		bsr.w	sub_6B04
00006DAE                            
00006DAE                            locret_6952:
00006DAE 4E75                       		rts	
00006DB0                            ; End of function LoadTilesAsYouMove
00006DB0                            
00006DB0                            
00006DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB0                            
00006DB0                            
00006DB0                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006DB0 4A12                       		tst.b	(a2)
00006DB2 6700 0000                  		beq.w	locret_69F2
00006DB6 0892 0000                  		bclr	#0,(a2)
00006DBA 6700                       		beq.s	loc_6972
00006DBC 78F0                       		moveq	#-$10,d4
00006DBE 7AF0                       		moveq	#-$10,d5
00006DC0 6100 0000                  		bsr.w	sub_6C20
00006DC4 78F0                       		moveq	#-$10,d4
00006DC6 7AF0                       		moveq	#-$10,d5
00006DC8 7C1F                       		moveq	#$1F,d6
00006DCA 6100 0000                  		bsr.w	sub_6ADA
00006DCE                            
00006DCE                            loc_6972:
00006DCE 0892 0001                  		bclr	#1,(a2)
00006DD2 6700                       		beq.s	loc_698E
00006DD4 383C 00E0                  		move.w	#$E0,d4
00006DD8 7AF0                       		moveq	#-$10,d5
00006DDA 6100 0000                  		bsr.w	sub_6C20
00006DDE 383C 00E0                  		move.w	#$E0,d4
00006DE2 7AF0                       		moveq	#-$10,d5
00006DE4 7C1F                       		moveq	#$1F,d6
00006DE6 6100 0000                  		bsr.w	sub_6ADA
00006DEA                            
00006DEA                            loc_698E:
00006DEA 0892 0002                  		bclr	#2,(a2)
00006DEE 6700                       		beq.s	loc_69BE
00006DF0 78F0                       		moveq	#-$10,d4
00006DF2 7AF0                       		moveq	#-$10,d5
00006DF4 6100 0000                  		bsr.w	sub_6C20
00006DF8 78F0                       		moveq	#-$10,d4
00006DFA 7AF0                       		moveq	#-$10,d5
00006DFC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E00 322B 0004                  		move.w	4(a3),d1
00006E04 0241 FFF0                  		andi.w	#-$10,d1
00006E08 9C41                       		sub.w	d1,d6
00006E0A 6D00                       		blt.s	loc_69BE
00006E0C E84E                       		lsr.w	#4,d6
00006E0E 0C46 000F                  		cmpi.w	#$F,d6
00006E12 6500                       		bcs.s	loc_69BA
00006E14 7C0F                       		moveq	#$F,d6
00006E16                            
00006E16                            loc_69BA:
00006E16 6100 0000                  		bsr.w	sub_6B06
00006E1A                            
00006E1A                            loc_69BE:
00006E1A 0892 0003                  		bclr	#3,(a2)
00006E1E 6700                       		beq.s	locret_69F2
00006E20 78F0                       		moveq	#-$10,d4
00006E22 3A3C 0140                  		move.w	#$140,d5
00006E26 6100 0000                  		bsr.w	sub_6C20
00006E2A 78F0                       		moveq	#-$10,d4
00006E2C 3A3C 0140                  		move.w	#$140,d5
00006E30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E34 322B 0004                  		move.w	4(a3),d1
00006E38 0241 FFF0                  		andi.w	#-$10,d1
00006E3C 9C41                       		sub.w	d1,d6
00006E3E 6D00                       		blt.s	locret_69F2
00006E40 E84E                       		lsr.w	#4,d6
00006E42 0C46 000F                  		cmpi.w	#$F,d6
00006E46 6500                       		bcs.s	loc_69EE
00006E48 7C0F                       		moveq	#$F,d6
00006E4A                            
00006E4A                            loc_69EE:
00006E4A 6100 0000                  		bsr.w	sub_6B06
00006E4E                            
00006E4E                            locret_69F2:
00006E4E 4E75                       		rts	
00006E50                            ; End of function sub_6954
00006E50                            
00006E50                            
00006E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E50                            
00006E50                            
00006E50                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006E50 4A12                       		tst.b	(a2)
00006E52 6700 0000                  		beq.w	locret_6A80
00006E56 0892 0002                  		bclr	#2,(a2)
00006E5A 6700                       		beq.s	loc_6A3E
00006E5C 0C53 0010                  		cmpi.w	#$10,(a3)
00006E60 6500                       		bcs.s	loc_6A3E
00006E62 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E66 322B 0004                  		move.w	4(a3),d1
00006E6A 0241 FFF0                  		andi.w	#-$10,d1
00006E6E 9841                       		sub.w	d1,d4
00006E70 3F04                       		move.w	d4,-(sp)
00006E72 7AF0                       		moveq	#-$10,d5
00006E74 6100 0000                  		bsr.w	sub_6C20
00006E78 381F                       		move.w	(sp)+,d4
00006E7A 7AF0                       		moveq	#-$10,d5
00006E7C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E80 322B 0004                  		move.w	4(a3),d1
00006E84 0241 FFF0                  		andi.w	#-$10,d1
00006E88 9C41                       		sub.w	d1,d6
00006E8A 6D00                       		blt.s	loc_6A3E
00006E8C E84E                       		lsr.w	#4,d6
00006E8E 0446 000E                  		subi.w	#$E,d6
00006E92 6400                       		bcc.s	loc_6A3E
00006E94 4446                       		neg.w	d6
00006E96 6100 0000                  		bsr.w	sub_6B06
00006E9A                            
00006E9A                            loc_6A3E:
00006E9A 0892 0003                  		bclr	#3,(a2)
00006E9E 6700                       		beq.s	locret_6A80
00006EA0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EA4 322B 0004                  		move.w	4(a3),d1
00006EA8 0241 FFF0                  		andi.w	#-$10,d1
00006EAC 9841                       		sub.w	d1,d4
00006EAE 3F04                       		move.w	d4,-(sp)
00006EB0 3A3C 0140                  		move.w	#$140,d5
00006EB4 6100 0000                  		bsr.w	sub_6C20
00006EB8 381F                       		move.w	(sp)+,d4
00006EBA 3A3C 0140                  		move.w	#$140,d5
00006EBE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EC2 322B 0004                  		move.w	4(a3),d1
00006EC6 0241 FFF0                  		andi.w	#-$10,d1
00006ECA 9C41                       		sub.w	d1,d6
00006ECC 6D00                       		blt.s	locret_6A80
00006ECE E84E                       		lsr.w	#4,d6
00006ED0 0446 000E                  		subi.w	#$E,d6
00006ED4 6400                       		bcc.s	locret_6A80
00006ED6 4446                       		neg.w	d6
00006ED8 6100 0000                  		bsr.w	sub_6B06
00006EDC                            
00006EDC                            locret_6A80:
00006EDC 4E75                       		rts	
00006EDE                            ; End of function sub_69F4
00006EDE                            
00006EDE                            ; ===========================================================================
00006EDE 4A12                       		tst.b	(a2)
00006EE0 6700                       		beq.s	locret_6AD6
00006EE2 0892 0002                  		bclr	#2,(a2)
00006EE6 6700                       		beq.s	loc_6AAC
00006EE8 383C 00D0                  		move.w	#$D0,d4
00006EEC 322B 0004                  		move.w	4(a3),d1
00006EF0 0241 FFF0                  		andi.w	#-$10,d1
00006EF4 9841                       		sub.w	d1,d4
00006EF6 3F04                       		move.w	d4,-(sp)
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 6100 0000                  		bsr.w	sub_6C3C
00006EFE 381F                       		move.w	(sp)+,d4
00006F00 7AF0                       		moveq	#-$10,d5
00006F02 7C02                       		moveq	#2,d6
00006F04 6100 0000                  		bsr.w	sub_6B06
00006F08                            
00006F08                            loc_6AAC:
00006F08 0892 0003                  		bclr	#3,(a2)
00006F0C 6700                       		beq.s	locret_6AD6
00006F0E 383C 00D0                  		move.w	#$D0,d4
00006F12 322B 0004                  		move.w	4(a3),d1
00006F16 0241 FFF0                  		andi.w	#-$10,d1
00006F1A 9841                       		sub.w	d1,d4
00006F1C 3F04                       		move.w	d4,-(sp)
00006F1E 3A3C 0140                  		move.w	#$140,d5
00006F22 6100 0000                  		bsr.w	sub_6C3C
00006F26 381F                       		move.w	(sp)+,d4
00006F28 3A3C 0140                  		move.w	#$140,d5
00006F2C 7C02                       		moveq	#2,d6
00006F2E 6100 0000                  		bsr.w	sub_6B06
00006F32                            
00006F32                            locret_6AD6:
00006F32 4E75                       		rts	
00006F34                            
00006F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F34                            
00006F34                            
00006F34                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006F34 7C15                       		moveq	#$15,d6
00006F36                            ; End of function sub_6AD8
00006F36                            
00006F36                            
00006F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F36                            
00006F36                            
00006F36                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006F36 2E3C 0080 0000             		move.l	#$800000,d7
00006F3C 2200                       		move.l	d0,d1
00006F3E                            
00006F3E                            loc_6AE2:
00006F3E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F42 6100 0000                  		bsr.w	sub_6BD6
00006F46 2001                       		move.l	d1,d0
00006F48 6100 0000                  		bsr.w	sub_6B32
00006F4C 5801                       		addq.b	#4,d1
00006F4E 0201 007F                  		andi.b	#$7F,d1
00006F52 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F56 0645 0010                  		addi.w	#$10,d5
00006F5A 51CE FFE2                  		dbf	d6,loc_6AE2
00006F5E 4E75                       		rts	
00006F60                            ; End of function sub_6ADA
00006F60                            
00006F60                            
00006F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F60                            
00006F60                            
00006F60                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006F60 7C0F                       		moveq	#$F,d6
00006F62                            ; End of function sub_6B04
00006F62                            
00006F62                            
00006F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F62                            
00006F62                            
00006F62                            sub_6B06:				; XREF: sub_6954
00006F62 2E3C 0080 0000             		move.l	#$800000,d7
00006F68 2200                       		move.l	d0,d1
00006F6A                            
00006F6A                            loc_6B0E:
00006F6A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F6E 6100 0000                  		bsr.w	sub_6BD6
00006F72 2001                       		move.l	d1,d0
00006F74 6100 0000                  		bsr.w	sub_6B32
00006F78 0641 0100                  		addi.w	#$100,d1
00006F7C 0241 0FFF                  		andi.w	#$FFF,d1
00006F80 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F84 0644 0010                  		addi.w	#$10,d4
00006F88 51CE FFE0                  		dbf	d6,loc_6B0E
00006F8C 4E75                       		rts	
00006F8E                            ; End of function sub_6B06
00006F8E                            
00006F8E                            
00006F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8E                            
00006F8E                            
00006F8E                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006F8E 8042                       		or.w	d2,d0
00006F90 4840                       		swap	d0
00006F92 0810 0004                  		btst	#4,(a0)
00006F96 6600                       		bne.s	loc_6B6E
00006F98 0810 0003                  		btst	#3,(a0)
00006F9C 6600                       		bne.s	loc_6B4E
00006F9E 2A80                       		move.l	d0,(a5)
00006FA0 2C99                       		move.l	(a1)+,(a6)
00006FA2 D087                       		add.l	d7,d0
00006FA4 2A80                       		move.l	d0,(a5)
00006FA6 2C99                       		move.l	(a1)+,(a6)
00006FA8 4E75                       		rts	
00006FAA                            ; ===========================================================================
00006FAA                            
00006FAA                            loc_6B4E:
00006FAA 2A80                       		move.l	d0,(a5)
00006FAC 2819                       		move.l	(a1)+,d4
00006FAE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FB4 4844                       		swap	d4
00006FB6 2C84                       		move.l	d4,(a6)
00006FB8 D087                       		add.l	d7,d0
00006FBA 2A80                       		move.l	d0,(a5)
00006FBC 2819                       		move.l	(a1)+,d4
00006FBE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FC4 4844                       		swap	d4
00006FC6 2C84                       		move.l	d4,(a6)
00006FC8 4E75                       		rts	
00006FCA                            ; ===========================================================================
00006FCA                            
00006FCA                            loc_6B6E:
00006FCA 0810 0003                  		btst	#3,(a0)
00006FCE 6600                       		bne.s	loc_6B90
00006FD0 2A80                       		move.l	d0,(a5)
00006FD2 2A19                       		move.l	(a1)+,d5
00006FD4 2819                       		move.l	(a1)+,d4
00006FD6 0A84 1000 1000             		eori.l	#$10001000,d4
00006FDC 2C84                       		move.l	d4,(a6)
00006FDE D087                       		add.l	d7,d0
00006FE0 2A80                       		move.l	d0,(a5)
00006FE2 0A85 1000 1000             		eori.l	#$10001000,d5
00006FE8 2C85                       		move.l	d5,(a6)
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC                            
00006FEC                            loc_6B90:
00006FEC 2A80                       		move.l	d0,(a5)
00006FEE 2A19                       		move.l	(a1)+,d5
00006FF0 2819                       		move.l	(a1)+,d4
00006FF2 0A84 1800 1800             		eori.l	#$18001800,d4
00006FF8 4844                       		swap	d4
00006FFA 2C84                       		move.l	d4,(a6)
00006FFC D087                       		add.l	d7,d0
00006FFE 2A80                       		move.l	d0,(a5)
00007000 0A85 1800 1800             		eori.l	#$18001800,d5
00007006 4845                       		swap	d5
00007008 2C85                       		move.l	d5,(a6)
0000700A 4E75                       		rts	
0000700C                            ; End of function sub_6B32
0000700C                            
0000700C                            ; ===========================================================================
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E 2A80                       		move.l	d0,(a5)
00007010 3A3C 2000                  		move.w	#$2000,d5
00007014 3819                       		move.w	(a1)+,d4
00007016 D845                       		add.w	d5,d4
00007018 3C84                       		move.w	d4,(a6)
0000701A 3819                       		move.w	(a1)+,d4
0000701C D845                       		add.w	d5,d4
0000701E 3C84                       		move.w	d4,(a6)
00007020 D087                       		add.l	d7,d0
00007022 2A80                       		move.l	d0,(a5)
00007024 3819                       		move.w	(a1)+,d4
00007026 D845                       		add.w	d5,d4
00007028 3C84                       		move.w	d4,(a6)
0000702A 3819                       		move.w	(a1)+,d4
0000702C D845                       		add.w	d5,d4
0000702E 3C84                       		move.w	d4,(a6)
00007030 4E75                       		rts	
00007032                            
00007032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007032                            
00007032                            
00007032                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007032 43F8 B000                  		lea	($FFFFB000).w,a1
00007036 D86B 0004                  		add.w	4(a3),d4
0000703A DA53                       		add.w	(a3),d5
0000703C 3604                       		move.w	d4,d3
0000703E E24B                       		lsr.w	#1,d3
00007040 0243 0380                  		andi.w	#$380,d3
00007044 E64D                       		lsr.w	#3,d5
00007046 3005                       		move.w	d5,d0
00007048 EA48                       		lsr.w	#5,d0
0000704A 0240 007F                  		andi.w	#$7F,d0
0000704E D043                       		add.w	d3,d0
00007050 76FF                       		moveq	#-1,d3
00007052 1634 0000                  		move.b	(a4,d0.w),d3
00007056 6700                       		beq.s	locret_6C1E
00007058 5303                       		subq.b	#1,d3
0000705A 0243 007F                  		andi.w	#$7F,d3
0000705E EE5B                       		ror.w	#7,d3
00007060 D844                       		add.w	d4,d4
00007062 0244 01E0                  		andi.w	#$1E0,d4
00007066 0245 001E                  		andi.w	#$1E,d5
0000706A D644                       		add.w	d4,d3
0000706C D645                       		add.w	d5,d3
0000706E 2043                       		movea.l	d3,a0
00007070 3610                       		move.w	(a0),d3
00007072 0243 03FF                  		andi.w	#$3FF,d3
00007076 E74B                       		lsl.w	#3,d3
00007078 D2C3                       		adda.w	d3,a1
0000707A                            
0000707A                            locret_6C1E:
0000707A 4E75                       		rts	
0000707C                            ; End of function sub_6BD6
0000707C                            
0000707C                            
0000707C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707C                            
0000707C                            
0000707C                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000707C D86B 0004                  		add.w	4(a3),d4
00007080 DA53                       		add.w	(a3),d5
00007082 0244 00F0                  		andi.w	#$F0,d4
00007086 0245 01F0                  		andi.w	#$1F0,d5
0000708A E94C                       		lsl.w	#4,d4
0000708C E44D                       		lsr.w	#2,d5
0000708E D845                       		add.w	d5,d4
00007090 7003                       		moveq	#3,d0
00007092 4840                       		swap	d0
00007094 3004                       		move.w	d4,d0
00007096 4E75                       		rts	
00007098                            ; End of function sub_6C20
00007098                            
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            ; not used
00007098                            
00007098                            
00007098                            sub_6C3C:
00007098 D86B 0004                  		add.w	4(a3),d4
0000709C DA53                       		add.w	(a3),d5
0000709E 0244 00F0                  		andi.w	#$F0,d4
000070A2 0245 01F0                  		andi.w	#$1F0,d5
000070A6 E94C                       		lsl.w	#4,d4
000070A8 E44D                       		lsr.w	#2,d5
000070AA D845                       		add.w	d5,d4
000070AC 7002                       		moveq	#2,d0
000070AE 4840                       		swap	d0
000070B0 3004                       		move.w	d4,d0
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_6C3C
000070B4                            
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            ; Subroutine to	load tiles as soon as the level	appears
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000070B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000070BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000070C0 47F8 F700                  		lea	($FFFFF700).w,a3
000070C4 49F8 A400                  		lea	($FFFFA400).w,a4
000070C8 343C 4000                  		move.w	#$4000,d2
000070CC 6100                       		bsr.s	LoadTilesFromStart2
000070CE 47F8 F708                  		lea	($FFFFF708).w,a3
000070D2 49F8 A440                  		lea	($FFFFA440).w,a4
000070D6 343C 6000                  		move.w	#$6000,d2
000070DA                            ; End of function LoadTilesFromStart
000070DA                            
000070DA                            
000070DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070DA                            
000070DA                            
000070DA                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000070DA 78F0                       		moveq	#-$10,d4
000070DC 7C0F                       		moveq	#$F,d6
000070DE                            
000070DE                            loc_6C82:
000070DE 48E7 0E00                  		movem.l	d4-d6,-(sp)
000070E2 7A00                       		moveq	#0,d5
000070E4 3204                       		move.w	d4,d1
000070E6 6100 FF94                  		bsr.w	sub_6C20
000070EA 3801                       		move.w	d1,d4
000070EC 7A00                       		moveq	#0,d5
000070EE 7C1F                       		moveq	#$1F,d6
000070F0 6100 FE44                  		bsr.w	sub_6ADA
000070F4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000070F8 0644 0010                  		addi.w	#$10,d4
000070FC 51CE FFE0                  		dbf	d6,loc_6C82
00007100 4E75                       		rts	
00007102                            ; End of function LoadTilesFromStart2
00007102                            
00007102                            ; ---------------------------------------------------------------------------
00007102                            ; Main Load Block loading subroutine
00007102                            ; ---------------------------------------------------------------------------
00007102                            
00007102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007102                            
00007102                            
00007102                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007102 7000                       		moveq	#0,d0
00007104 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007108 E948                       		lsl.w	#4,d0
0000710A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007110 45F2 0000                  		lea	(a2,d0.w),a2
00007114 2F0A                       		move.l	a2,-(sp)
00007116 588A                       		addq.l	#4,a2
00007118 205A                       		movea.l	(a2)+,a0
0000711A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000711E 303C 0000                  		move.w	#0,d0
00007122 6100 A81A                  		bsr.w	EniDec
00007126 205A                       		movea.l	(a2)+,a0
00007128 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000712E 6100 A98C                  		bsr.w	KosDec
00007132 6100 0000                  		bsr.w	LevelLayoutLoad
00007136 301A                       		move.w	(a2)+,d0
00007138 3012                       		move.w	(a2),d0
0000713A 0240 00FF                  		andi.w	#$FF,d0
0000713E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007144 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007146 700C                       		moveq	#$C,d0		; use SB3 pallet
00007148                            
00007148                            MLB_ChkSBZPal:
00007148 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000714E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007150 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007156 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007158                            
00007158                            MLB_UsePal0E:
00007158 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000715A                            
0000715A                            MLB_NormalPal:
0000715A 6100 B1C0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000715E 245F                       		movea.l	(sp)+,a2
00007160 584A                       		addq.w	#4,a2
00007162 7000                       		moveq	#0,d0
00007164 1012                       		move.b	(a2),d0
00007166 6700                       		beq.s	locret_6D10
00007168 6100 A636                  		bsr.w	LoadPLC		; load pattern load cues
0000716C                            
0000716C                            locret_6D10:
0000716C 4E75                       		rts	
0000716E                            ; End of function MainLoadBlockLoad
0000716E                            
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            ; Level	layout loading subroutine
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            
0000716E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000716E                            
0000716E                            
0000716E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000716E 47F8 A400                  		lea	($FFFFA400).w,a3
00007172 323C 01FF                  		move.w	#$1FF,d1
00007176 7000                       		moveq	#0,d0
00007178                            
00007178                            LevLoad_ClrRam:
00007178 26C0                       		move.l	d0,(a3)+
0000717A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000717E                            
0000717E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007182 7200                       		moveq	#0,d1
00007184 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007188 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000718C 7202                       		moveq	#2,d1
0000718E                            ; End of function LevelLayoutLoad
0000718E                            
0000718E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000718E                            
0000718E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000718E                            
0000718E                            
0000718E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000718E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007192 ED08                       		lsl.b	#6,d0
00007194 EA48                       		lsr.w	#5,d0
00007196 3400                       		move.w	d0,d2
00007198 D040                       		add.w	d0,d0
0000719A D042                       		add.w	d2,d0
0000719C D041                       		add.w	d1,d0
0000719E 43F9 0000 0000             		lea	(Level_Index).l,a1
000071A4 3031 0000                  		move.w	(a1,d0.w),d0
000071A8 43F1 0000                  		lea	(a1,d0.w),a1
000071AC 7200                       		moveq	#0,d1
000071AE 3401                       		move.w	d1,d2
000071B0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000071B2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000071B4                            
000071B4                            LevLoad_NumRows:
000071B4 3001                       		move.w	d1,d0
000071B6 204B                       		movea.l	a3,a0
000071B8                            
000071B8                            LevLoad_Row:
000071B8 10D9                       		move.b	(a1)+,(a0)+
000071BA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000071BE 47EB 0080                  		lea	$80(a3),a3	; do next row
000071C2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000071C6 4E75                       		rts	
000071C8                            ; End of function LevelLayoutLoad2
000071C8                            
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            ; Dynamic screen resize	loading	subroutine
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            
000071C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C8                            
000071C8                            
000071C8                            DynScrResizeLoad:			; XREF: DeformBgLayer
000071C8 7000                       		moveq	#0,d0
000071CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000071CE D040                       		add.w	d0,d0
000071D0 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000071D4 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000071D8 7202                       		moveq	#2,d1
000071DA 3038 F726                  		move.w	($FFFFF726).w,d0
000071DE 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000071E2 6700                       		beq.s	locret_6DAA
000071E4 6400                       		bcc.s	loc_6DAC
000071E6 4441                       		neg.w	d1
000071E8 3038 F704                  		move.w	($FFFFF704).w,d0
000071EC B078 F726                  		cmp.w	($FFFFF726).w,d0
000071F0 6300                       		bls.s	loc_6DA0
000071F2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000071F6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000071FC                            
000071FC                            loc_6DA0:
000071FC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007200 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007206                            
00007206                            locret_6DAA:
00007206 4E75                       		rts	
00007208                            ; ===========================================================================
00007208                            
00007208                            loc_6DAC:				; XREF: DynScrResizeLoad
00007208 3038 F704                  		move.w	($FFFFF704).w,d0
0000720C 5040                       		addq.w	#8,d0
0000720E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007212 6500                       		bcs.s	loc_6DC4
00007214 0838 0001 D022             		btst	#1,($FFFFD022).w
0000721A 6700                       		beq.s	loc_6DC4
0000721C D241                       		add.w	d1,d1
0000721E D241                       		add.w	d1,d1
00007220                            
00007220                            loc_6DC4:
00007220 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007224 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000722A 4E75                       		rts	
0000722C                            ; End of function DynScrResizeLoad
0000722C                            
0000722C                            ; ===========================================================================
0000722C                            ; ---------------------------------------------------------------------------
0000722C                            ; Offset index for dynamic screen resizing
0000722C                            ; ---------------------------------------------------------------------------
0000722C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007230 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007234 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007238 0000                       		dc.w Resize_Ending-Resize_Index
0000723A                            ; ===========================================================================
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            ; Green	Hill Zone dynamic screen resizing
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            
0000723A                            Resize_GHZ:				; XREF: Resize_Index
0000723A 7000                       		moveq	#0,d0
0000723C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007240 D040                       		add.w	d0,d0
00007242 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007246 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000724A                            ; ===========================================================================
0000724A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000724C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000724E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007250                            ; ===========================================================================
00007250                            
00007250                            Resize_GHZ1:
00007250 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007256 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000725C 6500                       		bcs.s	locret_6E08	; if not, branch
0000725E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007264                            
00007264                            locret_6E08:
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            Resize_GHZ2:
00007266 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000726C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007272 6500                       		bcs.s	locret_6E3A
00007274 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000727A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007280 6500                       		bcs.s	locret_6E3A
00007282 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007288 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000728E 6500                       		bcs.s	locret_6E3A
00007290 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007296                            
00007296                            locret_6E3A:
00007296 4E75                       		rts	
00007298                            ; ===========================================================================
00007298                            
00007298                            Resize_GHZ3:
00007298 7000                       		moveq	#0,d0
0000729A 1038 F742                  		move.b	($FFFFF742).w,d0
0000729E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000072A2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000072A6                            ; ===========================================================================
000072A6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000072A8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000072AA 0000                       		dc.w Resize_GHZ3end-off_6E4A
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            Resize_GHZ3main:
000072AC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072B2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000072B8 6500                       		bcs.s	locret_6E96
000072BA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000072C0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000072C6 6500                       		bcs.s	locret_6E96
000072C8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000072CE 6500                       		bcs.s	loc_6E98
000072D0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000072D6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000072DC 6400                       		bcc.s	loc_6E8E
000072DE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000072E4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000072EA                            
000072EA                            loc_6E8E:
000072EA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000072F0 6400                       		bcc.s	loc_6E98
000072F2                            
000072F2                            locret_6E96:
000072F2 4E75                       		rts	
000072F4                            ; ===========================================================================
000072F4                            
000072F4                            loc_6E98:
000072F4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000072FE 4E75                       		rts	
00007300                            ; ===========================================================================
00007300                            
00007300                            Resize_GHZ3boss:
00007300 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007306 6400                       		bcc.s	loc_6EB0
00007308 5538 F742                  		subq.b	#2,($FFFFF742).w
0000730C                            
0000730C                            loc_6EB0:
0000730C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007312 6500                       		bcs.s	locret_6EE8
00007314 6100 0000                  		bsr.w	SingleObjLoad
00007318 6600                       		bne.s	loc_6ED0
0000731A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000731E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007324 337C 0280 000C             		move.w	#$280,$C(a1)
0000732A                            
0000732A                            loc_6ED0:
0000732A 303C 008C                  		move.w	#$8C,d0
0000732E 6100 A286                  		bsr.w	PlaySound	; play boss music
00007332 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007338 5438 F742                  		addq.b	#2,($FFFFF742).w
0000733C 7011                       		moveq	#$11,d0
0000733E 6000 A460                  		bra.w	LoadPLC		; load boss patterns
00007342                            ; ===========================================================================
00007342                            
00007342                            locret_6EE8:
00007342 4E75                       		rts	
00007344                            ; ===========================================================================
00007344                            
00007344                            Resize_GHZ3end:
00007344 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            ; Labyrinth Zone dynamic screen	resizing
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            
0000734C                            Resize_LZ:				; XREF: Resize_Index
0000734C 7000                       		moveq	#0,d0
0000734E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007352 D040                       		add.w	d0,d0
00007354 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000735E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007360 0000                       		dc.w Resize_LZ3-Resize_LZx
00007362 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_LZ12:
00007364 4E75                       		rts	
00007366                            ; ===========================================================================
00007366                            
00007366                            Resize_LZ3:
00007366 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000736A 6700                       		beq.s	loc_6F28	; if not, branch
0000736C 43F8 A506                  		lea	($FFFFA506).w,a1
00007370 0C11 0007                  		cmpi.b	#7,(a1)
00007374 6700                       		beq.s	loc_6F28
00007376 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000737A 303C 00B7                  		move.w	#$B7,d0
0000737E 6100 A23C                  		bsr.w	PlaySound_Special ; play rumbling sound
00007382                            
00007382                            loc_6F28:
00007382 4A38 F742                  		tst.b	($FFFFF742).w
00007386 6600                       		bne.s	locret_6F64
00007388 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000738E 6500                       		bcs.s	locret_6F62
00007390 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007396 6400                       		bcc.s	locret_6F62
00007398 6100 0000                  		bsr.w	SingleObjLoad
0000739C 6600                       		bne.s	loc_6F4A
0000739E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000073A2                            
000073A2                            loc_6F4A:
000073A2 303C 008C                  		move.w	#$8C,d0
000073A6 6100 A20E                  		bsr.w	PlaySound	; play boss music
000073AA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000073B4 7011                       		moveq	#$11,d0
000073B6 6000 A3E8                  		bra.w	LoadPLC		; load boss patterns
000073BA                            ; ===========================================================================
000073BA                            
000073BA                            locret_6F62:
000073BA 4E75                       		rts	
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            locret_6F64:
000073BC 4E75                       		rts	
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            Resize_SBZ3:
000073BE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000073C4 6500                       		bcs.s	locret_6F8C
000073C6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000073CC 6400                       		bcc.s	locret_6F8C	; if not, branch
000073CE 4238 FE30                  		clr.b	($FFFFFE30).w
000073D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000073D8 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000073DE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000073E4                            
000073E4                            locret_6F8C:
000073E4 4E75                       		rts	
000073E6                            ; ===========================================================================
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            ; Marble Zone dynamic screen resizing
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            
000073E6                            Resize_MZ:				; XREF: Resize_Index
000073E6 7000                       		moveq	#0,d0
000073E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073EC D040                       		add.w	d0,d0
000073EE 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000073F2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000073F6                            ; ===========================================================================
000073F6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000073F8 0000                       		dc.w Resize_MZ2-Resize_MZx
000073FA 0000                       		dc.w Resize_MZ3-Resize_MZx
000073FC                            ; ===========================================================================
000073FC                            
000073FC                            Resize_MZ1:
000073FC 7000                       		moveq	#0,d0
000073FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007402 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007406 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000740A                            ; ===========================================================================
0000740A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000740C 0000                       		dc.w loc_6FEA-off_6FB2
0000740E 0000                       		dc.w loc_702E-off_6FB2
00007410 0000                       		dc.w loc_7050-off_6FB2
00007412                            ; ===========================================================================
00007412                            
00007412                            loc_6FBA:
00007412 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007418 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000741E 6500                       		bcs.s	locret_6FE8
00007420 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007426 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000742C 6500                       		bcs.s	locret_6FE8
0000742E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007434 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000743A 6500                       		bcs.s	locret_6FE8
0000743C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007440                            
00007440                            locret_6FE8:
00007440 4E75                       		rts	
00007442                            ; ===========================================================================
00007442                            
00007442                            loc_6FEA:
00007442 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007448 6400                       		bcc.s	loc_6FF8
0000744A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000744E 4E75                       		rts	
00007450                            ; ===========================================================================
00007450                            
00007450                            loc_6FF8:
00007450 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007456 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000745C 6400                       		bcc.s	locret_702C
0000745E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007464 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000746A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007470 6400                       		bcc.s	locret_702C
00007472 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007478 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000747E 6500                       		bcs.s	locret_702C
00007480 5438 F742                  		addq.b	#2,($FFFFF742).w
00007484                            
00007484                            locret_702C:
00007484 4E75                       		rts	
00007486                            ; ===========================================================================
00007486                            
00007486                            loc_702E:
00007486 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000748C 6400                       		bcc.s	loc_703C
0000748E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007492 4E75                       		rts	
00007494                            ; ===========================================================================
00007494                            
00007494                            loc_703C:
00007494 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000749A 6500                       		bcs.s	locret_704E
0000749C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000074A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000074A6                            
000074A6                            locret_704E:
000074A6 4E75                       		rts	
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            loc_7050:
000074A8 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000074AE 6500                       		bcs.s	locret_7072
000074B0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074B6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074BC 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000074C2 6500                       		bcs.s	locret_7072
000074C4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000074CA                            
000074CA                            locret_7072:
000074CA 4E75                       		rts	
000074CC                            ; ===========================================================================
000074CC                            
000074CC                            Resize_MZ2:
000074CC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000074D2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074D8 6500                       		bcs.s	locret_7088
000074DA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000074E0                            
000074E0                            locret_7088:
000074E0 4E75                       		rts	
000074E2                            ; ===========================================================================
000074E2                            
000074E2                            Resize_MZ3:
000074E2 7000                       		moveq	#0,d0
000074E4 1038 F742                  		move.b	($FFFFF742).w,d0
000074E8 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000074EC 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000074F0                            ; ===========================================================================
000074F0 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000074F2 0000                       		dc.w Resize_MZ3end-off_7098
000074F4                            ; ===========================================================================
000074F4                            
000074F4                            Resize_MZ3boss:
000074F4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000074FA 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007500 6500                       		bcs.s	locret_70E8
00007502 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007508 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000750E 6500                       		bcs.s	locret_70E8
00007510 6100 0000                  		bsr.w	SingleObjLoad
00007514 6600                       		bne.s	loc_70D0
00007516 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000751A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007520 337C 022C 000C             		move.w	#$22C,$C(a1)
00007526                            
00007526                            loc_70D0:
00007526 303C 008C                  		move.w	#$8C,d0
0000752A 6100 A08A                  		bsr.w	PlaySound	; play boss music
0000752E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007534 5438 F742                  		addq.b	#2,($FFFFF742).w
00007538 7011                       		moveq	#$11,d0
0000753A 6000 A264                  		bra.w	LoadPLC		; load boss patterns
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            locret_70E8:
0000753E 4E75                       		rts	
00007540                            ; ===========================================================================
00007540                            
00007540                            Resize_MZ3end:
00007540 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007546 4E75                       		rts	
00007548                            ; ===========================================================================
00007548                            ; ---------------------------------------------------------------------------
00007548                            ; Star Light Zone dynamic screen resizing
00007548                            ; ---------------------------------------------------------------------------
00007548                            
00007548                            Resize_SLZ:				; XREF: Resize_Index
00007548 7000                       		moveq	#0,d0
0000754A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000754E D040                       		add.w	d0,d0
00007550 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007554 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007558                            ; ===========================================================================
00007558 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000755A 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000755C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000755E                            ; ===========================================================================
0000755E                            
0000755E                            Resize_SLZ12:
0000755E 4E75                       		rts	
00007560                            ; ===========================================================================
00007560                            
00007560                            Resize_SLZ3:
00007560 7000                       		moveq	#0,d0
00007562 1038 F742                  		move.b	($FFFFF742).w,d0
00007566 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000756A 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000756E                            ; ===========================================================================
0000756E 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007570 0000                       		dc.w Resize_SLZ3boss-off_7118
00007572 0000                       		dc.w Resize_SLZ3end-off_7118
00007574                            ; ===========================================================================
00007574                            
00007574                            Resize_SLZ3main:
00007574 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000757A 6500                       		bcs.s	locret_7130
0000757C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007582 5438 F742                  		addq.b	#2,($FFFFF742).w
00007586                            
00007586                            locret_7130:
00007586 4E75                       		rts	
00007588                            ; ===========================================================================
00007588                            
00007588                            Resize_SLZ3boss:
00007588 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000758E 6500                       		bcs.s	locret_715C
00007590 6100 0000                  		bsr.w	SingleObjLoad
00007594 6600                       		bne.s	loc_7144
00007596 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000759A                            
0000759A                            loc_7144:
0000759A 303C 008C                  		move.w	#$8C,d0
0000759E 6100 A016                  		bsr.w	PlaySound	; play boss music
000075A2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075AC 7011                       		moveq	#$11,d0
000075AE 6000 A1F0                  		bra.w	LoadPLC		; load boss patterns
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            locret_715C:
000075B2 4E75                       		rts	
000075B4                            ; ===========================================================================
000075B4                            
000075B4                            Resize_SLZ3end:
000075B4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075BA 4E75                       		rts
000075BC 4E75                       		rts
000075BE                            ; ===========================================================================
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            ; Spring Yard Zone dynamic screen resizing
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            
000075BE                            Resize_SYZ:				; XREF: Resize_Index
000075BE 7000                       		moveq	#0,d0
000075C0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075C4 D040                       		add.w	d0,d0
000075C6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000075CA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000075CE                            ; ===========================================================================
000075CE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000075D0 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000075D2 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000075D4                            ; ===========================================================================
000075D4                            
000075D4                            Resize_SYZ1:
000075D4 4E75                       		rts	
000075D6                            ; ===========================================================================
000075D6                            
000075D6                            Resize_SYZ2:
000075D6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075DC 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000075E2 6500                       		bcs.s	locret_71A2
000075E4 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000075EA 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000075F0 6500                       		bcs.s	locret_71A2
000075F2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075F8                            
000075F8                            locret_71A2:
000075F8 4E75                       		rts	
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            Resize_SYZ3:
000075FA 7000                       		moveq	#0,d0
000075FC 1038 F742                  		move.b	($FFFFF742).w,d0
00007600 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007604 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007608                            ; ===========================================================================
00007608 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000760A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000760C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_SYZ3main:
0000760E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007614 6500                       		bcs.s	locret_71CE
00007616 6100 0000                  		bsr.w	SingleObjLoad
0000761A 6600                       		bne.s	locret_71CE
0000761C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007620 5438 F742                  		addq.b	#2,($FFFFF742).w
00007624                            
00007624                            locret_71CE:
00007624 4E75                       		rts	
00007626                            ; ===========================================================================
00007626                            
00007626                            Resize_SYZ3boss:
00007626 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000762C 6500                       		bcs.s	locret_7200
0000762E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007634 6100 0000                  		bsr.w	SingleObjLoad
00007638 6600                       		bne.s	loc_71EC
0000763A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000763E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007642                            
00007642                            loc_71EC:
00007642 303C 008C                  		move.w	#$8C,d0
00007646 6100 9F6E                  		bsr.w	PlaySound	; play boss music
0000764A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007650 7011                       		moveq	#$11,d0
00007652 6000 A14C                  		bra.w	LoadPLC		; load boss patterns
00007656                            ; ===========================================================================
00007656                            
00007656                            locret_7200:
00007656 4E75                       		rts	
00007658                            ; ===========================================================================
00007658                            
00007658                            Resize_SYZ3end:
00007658 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000765E 4E75                       		rts	
00007660                            ; ===========================================================================
00007660                            ; ---------------------------------------------------------------------------
00007660                            ; Scrap	Brain Zone dynamic screen resizing
00007660                            ; ---------------------------------------------------------------------------
00007660                            
00007660                            Resize_SBZ:				; XREF: Resize_Index
00007660 7000                       		moveq	#0,d0
00007662 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007666 D040                       		add.w	d0,d0
00007668 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000766C 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007670                            ; ===========================================================================
00007670 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007672 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007674 0000                       		dc.w Resize_FZ-Resize_SBZx
00007676                            ; ===========================================================================
00007676                            
00007676                            Resize_SBZ1:
00007676 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000767C 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007682 6500                       		bcs.s	locret_7242
00007684 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000768A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007690 6500                       		bcs.s	locret_7242
00007692 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007698                            
00007698                            locret_7242:
00007698 4E75                       		rts	
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_SBZ2:
0000769A 7000                       		moveq	#0,d0
0000769C 1038 F742                  		move.b	($FFFFF742).w,d0
000076A0 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000076A4 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000076A8                            ; ===========================================================================
000076A8 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000076AA 0000                       		dc.w Resize_SBZ2boss-off_7252
000076AC 0000                       		dc.w Resize_SBZ2boss2-off_7252
000076AE 0000                       		dc.w Resize_SBZ2end-off_7252
000076B0                            ; ===========================================================================
000076B0                            
000076B0                            Resize_SBZ2main:
000076B0 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000076B6 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000076BC 6500                       		bcs.s	locret_727A
000076BE 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000076C4 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000076CA 6500                       		bcs.s	locret_727A
000076CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D0                            
000076D0                            locret_727A:
000076D0 4E75                       		rts	
000076D2                            ; ===========================================================================
000076D2                            
000076D2                            Resize_SBZ2boss:
000076D2 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000076D8 6500                       		bcs.s	locret_7298
000076DA 6100 0000                  		bsr.w	SingleObjLoad
000076DE 6600                       		bne.s	locret_7298
000076E0 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000076E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E8 701E                       		moveq	#$1E,d0
000076EA 6000 A0B4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000076EE                            ; ===========================================================================
000076EE                            
000076EE                            locret_7298:
000076EE 4E75                       		rts	
000076F0                            ; ===========================================================================
000076F0                            
000076F0                            Resize_SBZ2boss2:
000076F0 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000076F6 6500                       		bcs.s	loc_72B6
000076F8 6100 0000                  		bsr.w	SingleObjLoad
000076FC 6600                       		bne.s	loc_72B0
000076FE 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007702 5438 F742                  		addq.b	#2,($FFFFF742).w
00007706                            
00007706                            loc_72B0:
00007706 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000770C                            
0000770C                            loc_72B6:
0000770C 6000                       		bra.s	loc_72C2
0000770E                            ; ===========================================================================
0000770E                            
0000770E                            Resize_SBZ2end:
0000770E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007714 6500                       		bcs.s	loc_72C2
00007716 4E75                       		rts	
00007718                            ; ===========================================================================
00007718                            
00007718                            loc_72C2:
00007718 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            Resize_FZ:
00007720 7000                       		moveq	#0,d0
00007722 1038 F742                  		move.b	($FFFFF742).w,d0
00007726 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000772A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000772E                            ; ===========================================================================
0000772E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007732 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007736 0000                       		dc.w Resize_FZend2-off_72D8
00007738                            ; ===========================================================================
00007738                            
00007738                            Resize_FZmain:
00007738 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000773E 6500                       		bcs.s	loc_72F4
00007740 5438 F742                  		addq.b	#2,($FFFFF742).w
00007744 701F                       		moveq	#$1F,d0
00007746 6100 A058                  		bsr.w	LoadPLC		; load FZ boss patterns
0000774A                            
0000774A                            loc_72F4:
0000774A 60CC                       		bra.s	loc_72C2
0000774C                            ; ===========================================================================
0000774C                            
0000774C                            Resize_FZboss:
0000774C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007752 6500                       		bcs.s	loc_7312
00007754 6100 0000                  		bsr.w	SingleObjLoad
00007758 6600                       		bne.s	loc_7312
0000775A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000775E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007762 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007768                            
00007768                            loc_7312:
00007768 60AE                       		bra.s	loc_72C2
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            Resize_FZend:
0000776A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007770 6500                       		bcs.s	loc_7320
00007772 5438 F742                  		addq.b	#2,($FFFFF742).w
00007776                            
00007776                            loc_7320:
00007776 60A0                       		bra.s	loc_72C2
00007778                            ; ===========================================================================
00007778                            
00007778                            locret_7322:
00007778 4E75                       		rts	
0000777A                            ; ===========================================================================
0000777A                            
0000777A                            Resize_FZend2:
0000777A 609C                       		bra.s	loc_72C2
0000777C                            ; ===========================================================================
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            ; Ending sequence dynamic screen resizing (empty)
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            
0000777C                            Resize_Ending:				; XREF: Resize_Index
0000777C 4E75                       		rts	
0000777E                            ; ===========================================================================
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            ; Object 11 - GHZ bridge
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            
0000777E                            Obj11:					; XREF: Obj_Index
0000777E 7000                       		moveq	#0,d0
00007780 1028 0024                  		move.b	$24(a0),d0
00007784 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007788 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000778C                            ; ===========================================================================
0000778C 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007790 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007794 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007798                            ; ===========================================================================
00007798                            
00007798                            Obj11_Main:				; XREF: Obj11_Index
00007798 5428 0024                  		addq.b	#2,$24(a0)
0000779C 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000077A4 317C 438E 0002             		move.w	#$438E,2(a0)
000077AA 117C 0004 0001             		move.b	#4,1(a0)
000077B0 117C 0003 0018             		move.b	#3,$18(a0)
000077B6 117C 0080 0019             		move.b	#$80,$19(a0)
000077BC 3428 000C                  		move.w	$C(a0),d2
000077C0 3628 0008                  		move.w	8(a0),d3
000077C4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000077C6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000077CA 7200                       		moveq	#0,d1
000077CC 1212                       		move.b	(a2),d1		; copy a2 to d1
000077CE 14FC 0000                  		move.b	#0,(a2)+
000077D2 3001                       		move.w	d1,d0
000077D4 E248                       		lsr.w	#1,d0
000077D6 E948                       		lsl.w	#4,d0
000077D8 9640                       		sub.w	d0,d3
000077DA 5501                       		subq.b	#2,d1
000077DC 6500                       		bcs.s	Obj11_Action
000077DE                            
000077DE                            Obj11_MakeBdg:
000077DE 6100 0000                  		bsr.w	SingleObjLoad
000077E2 6600                       		bne.s	Obj11_Action
000077E4 5228 0028                  		addq.b	#1,$28(a0)
000077E8 B668 0008                  		cmp.w	8(a0),d3
000077EC 6600                       		bne.s	loc_73B8
000077EE 0643 0010                  		addi.w	#$10,d3
000077F2 3142 000C                  		move.w	d2,$C(a0)
000077F6 3142 003C                  		move.w	d2,$3C(a0)
000077FA 3A08                       		move.w	a0,d5
000077FC 0445 D000                  		subi.w	#-$3000,d5
00007800 EC4D                       		lsr.w	#6,d5
00007802 0245 007F                  		andi.w	#$7F,d5
00007806 14C5                       		move.b	d5,(a2)+
00007808 5228 0028                  		addq.b	#1,$28(a0)
0000780C                            
0000780C                            loc_73B8:				; XREF: ROM:00007398j
0000780C 3A09                       		move.w	a1,d5
0000780E 0445 D000                  		subi.w	#-$3000,d5
00007812 EC4D                       		lsr.w	#6,d5
00007814 0245 007F                  		andi.w	#$7F,d5
00007818 14C5                       		move.b	d5,(a2)+
0000781A 137C 000A 0024             		move.b	#$A,$24(a1)
00007820 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007822 3342 000C                  		move.w	d2,$C(a1)
00007826 3342 003C                  		move.w	d2,$3C(a1)
0000782A 3343 0008                  		move.w	d3,8(a1)
0000782E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007836 337C 438E 0002             		move.w	#$438E,2(a1)
0000783C 137C 0004 0001             		move.b	#4,1(a1)
00007842 137C 0003 0018             		move.b	#3,$18(a1)
00007848 137C 0008 0019             		move.b	#8,$19(a1)
0000784E 0643 0010                  		addi.w	#$10,d3
00007852 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007856                            
00007856                            Obj11_Action:				; XREF: Obj11_Index
00007856 6100                       		bsr.s	Obj11_Solid
00007858 4A28 003E                  		tst.b	$3E(a0)
0000785C 6700                       		beq.s	Obj11_Display
0000785E 5928 003E                  		subq.b	#4,$3E(a0)
00007862 6100 0000                  		bsr.w	Obj11_Bend
00007866                            
00007866                            Obj11_Display:
00007866 6100 0000                  		bsr.w	DisplaySprite
0000786A 6000 0000                  		bra.w	Obj11_ChkDel
0000786E                            
0000786E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000786E                            
0000786E                            
0000786E                            Obj11_Solid:				; XREF: Obj11_Action
0000786E 7200                       		moveq	#0,d1
00007870 1228 0028                  		move.b	$28(a0),d1
00007874 E749                       		lsl.w	#3,d1
00007876 3401                       		move.w	d1,d2
00007878 5041                       		addq.w	#8,d1
0000787A D442                       		add.w	d2,d2
0000787C 43F8 D000                  		lea	($FFFFD000).w,a1
00007880 4A69 0012                  		tst.w	$12(a1)
00007884 6B00 0000                  		bmi.w	locret_751E
00007888 3029 0008                  		move.w	8(a1),d0
0000788C 9068 0008                  		sub.w	8(a0),d0
00007890 D041                       		add.w	d1,d0
00007892 6B00 0000                  		bmi.w	locret_751E
00007896 B042                       		cmp.w	d2,d0
00007898 6400 0000                  		bcc.w	locret_751E
0000789C 6000                       		bra.s	Platform2
0000789E                            ; End of function Obj11_Solid
0000789E                            
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            ; Platform subroutine
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            
0000789E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789E                            
0000789E                            
0000789E                            PlatformObject:
0000789E 43F8 D000                  		lea	($FFFFD000).w,a1
000078A2 4A69 0012                  		tst.w	$12(a1)
000078A6 6B00 0000                  		bmi.w	locret_751E
000078AA 3029 0008                  		move.w	8(a1),d0
000078AE 9068 0008                  		sub.w	8(a0),d0
000078B2 D041                       		add.w	d1,d0
000078B4 6B00 0000                  		bmi.w	locret_751E
000078B8 D241                       		add.w	d1,d1
000078BA B041                       		cmp.w	d1,d0
000078BC 6400 0000                  		bcc.w	locret_751E
000078C0                            
000078C0                            Platform2:
000078C0 3028 000C                  		move.w	$C(a0),d0
000078C4 5140                       		subq.w	#8,d0
000078C6                            
000078C6                            Platform3:
000078C6 3429 000C                  		move.w	$C(a1),d2
000078CA 1229 0016                  		move.b	$16(a1),d1
000078CE 4881                       		ext.w	d1
000078D0 D242                       		add.w	d2,d1
000078D2 5841                       		addq.w	#4,d1
000078D4 9041                       		sub.w	d1,d0
000078D6 6200 0000                  		bhi.w	locret_751E
000078DA 0C40 FFF0                  		cmpi.w	#-$10,d0
000078DE 6500 0000                  		bcs.w	locret_751E
000078E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000078E6 6B00 0000                  		bmi.w	locret_751E
000078EA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000078F0 6400 0000                  		bcc.w	locret_751E
000078F4 D440                       		add.w	d0,d2
000078F6 5642                       		addq.w	#3,d2
000078F8 3342 000C                  		move.w	d2,$C(a1)
000078FC 5428 0024                  		addq.b	#2,$24(a0)
00007900                            
00007900                            loc_74AE:
00007900 0829 0003 0022             		btst	#3,$22(a1)
00007906 6700                       		beq.s	loc_74DC
00007908 7000                       		moveq	#0,d0
0000790A 1029 003D                  		move.b	$3D(a1),d0
0000790E ED48                       		lsl.w	#6,d0
00007910 0680 00FF D000             		addi.l	#$FFD000,d0
00007916 2440                       		movea.l	d0,a2
00007918 08AA 0003 0022             		bclr	#3,$22(a2)
0000791E 422A 0025                  		clr.b	$25(a2)
00007922 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007928 6600                       		bne.s	loc_74DC
0000792A 552A 0024                  		subq.b	#2,$24(a2)
0000792E                            
0000792E                            loc_74DC:
0000792E 3008                       		move.w	a0,d0
00007930 0440 D000                  		subi.w	#-$3000,d0
00007934 EC48                       		lsr.w	#6,d0
00007936 0240 007F                  		andi.w	#$7F,d0
0000793A 1340 003D                  		move.b	d0,$3D(a1)
0000793E 137C 0000 0026             		move.b	#0,$26(a1)
00007944 337C 0000 0012             		move.w	#0,$12(a1)
0000794A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007950 0829 0001 0022             		btst	#1,$22(a1)
00007956 6700                       		beq.s	loc_7512
00007958 2F08                       		move.l	a0,-(sp)
0000795A 2049                       		movea.l	a1,a0
0000795C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007962 205F                       		movea.l	(sp)+,a0
00007964                            
00007964                            loc_7512:
00007964 08E9 0003 0022             		bset	#3,$22(a1)
0000796A 08E8 0003 0022             		bset	#3,$22(a0)
00007970                            
00007970                            locret_751E:
00007970 4E75                       		rts	
00007972                            ; End of function PlatformObject
00007972                            
00007972                            ; ---------------------------------------------------------------------------
00007972                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007972                            ; ---------------------------------------------------------------------------
00007972                            
00007972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007972                            
00007972                            
00007972                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007972 43F8 D000                  		lea	($FFFFD000).w,a1
00007976 4A69 0012                  		tst.w	$12(a1)
0000797A 6B00 FFF4                  		bmi.w	locret_751E
0000797E 3029 0008                  		move.w	8(a1),d0
00007982 9068 0008                  		sub.w	8(a0),d0
00007986 D041                       		add.w	d1,d0
00007988 6BE6                       		bmi.s	locret_751E
0000798A D241                       		add.w	d1,d1
0000798C B041                       		cmp.w	d1,d0
0000798E 64E0                       		bcc.s	locret_751E
00007990 0828 0000 0001             		btst	#0,1(a0)
00007996 6700                       		beq.s	loc_754A
00007998 4640                       		not.w	d0
0000799A D041                       		add.w	d1,d0
0000799C                            
0000799C                            loc_754A:
0000799C E248                       		lsr.w	#1,d0
0000799E 7600                       		moveq	#0,d3
000079A0 1632 0000                  		move.b	(a2,d0.w),d3
000079A4 3028 000C                  		move.w	$C(a0),d0
000079A8 9043                       		sub.w	d3,d0
000079AA 6000 FF1A                  		bra.w	Platform3
000079AE                            ; End of function SlopeObject
000079AE                            
000079AE                            
000079AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079AE                            
000079AE                            
000079AE                            Obj15_Solid:				; XREF: Obj15_SetSolid
000079AE 43F8 D000                  		lea	($FFFFD000).w,a1
000079B2 4A69 0012                  		tst.w	$12(a1)
000079B6 6B00 FFB8                  		bmi.w	locret_751E
000079BA 3029 0008                  		move.w	8(a1),d0
000079BE 9068 0008                  		sub.w	8(a0),d0
000079C2 D041                       		add.w	d1,d0
000079C4 6B00 FFAA                  		bmi.w	locret_751E
000079C8 D241                       		add.w	d1,d1
000079CA B041                       		cmp.w	d1,d0
000079CC 6400 FFA2                  		bcc.w	locret_751E
000079D0 3028 000C                  		move.w	$C(a0),d0
000079D4 9043                       		sub.w	d3,d0
000079D6 6000 FEEE                  		bra.w	Platform3
000079DA                            ; End of function Obj15_Solid
000079DA                            
000079DA                            ; ===========================================================================
000079DA                            
000079DA                            Obj11_Action2:				; XREF: Obj11_Index
000079DA 6100                       		bsr.s	Obj11_WalkOff
000079DC 6100 0000                  		bsr.w	DisplaySprite
000079E0 6000 0000                  		bra.w	Obj11_ChkDel
000079E4                            
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            ; Subroutine allowing Sonic to walk off a bridge
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            
000079E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E4                            
000079E4                            
000079E4                            Obj11_WalkOff:				; XREF: Obj11_Action2
000079E4 7200                       		moveq	#0,d1
000079E6 1228 0028                  		move.b	$28(a0),d1
000079EA E749                       		lsl.w	#3,d1
000079EC 3401                       		move.w	d1,d2
000079EE 5041                       		addq.w	#8,d1
000079F0 6100                       		bsr.s	ExitPlatform2
000079F2 6400                       		bcc.s	locret_75BE
000079F4 E848                       		lsr.w	#4,d0
000079F6 1140 003F                  		move.b	d0,$3F(a0)
000079FA 1028 003E                  		move.b	$3E(a0),d0
000079FE 0C00 0040                  		cmpi.b	#$40,d0
00007A02 6700                       		beq.s	loc_75B6
00007A04 5828 003E                  		addq.b	#4,$3E(a0)
00007A08                            
00007A08                            loc_75B6:
00007A08 6100 0000                  		bsr.w	Obj11_Bend
00007A0C 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A10                            
00007A10                            locret_75BE:
00007A10 4E75                       		rts	
00007A12                            ; End of function Obj11_WalkOff
00007A12                            
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            
00007A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A12                            
00007A12                            
00007A12                            ExitPlatform:
00007A12 3401                       		move.w	d1,d2
00007A14                            
00007A14                            ExitPlatform2:
00007A14 D442                       		add.w	d2,d2
00007A16 43F8 D000                  		lea	($FFFFD000).w,a1
00007A1A 0829 0001 0022             		btst	#1,$22(a1)
00007A20 6600                       		bne.s	loc_75E0
00007A22 3029 0008                  		move.w	8(a1),d0
00007A26 9068 0008                  		sub.w	8(a0),d0
00007A2A D041                       		add.w	d1,d0
00007A2C 6B00                       		bmi.s	loc_75E0
00007A2E B042                       		cmp.w	d2,d0
00007A30 6500                       		bcs.s	locret_75F2
00007A32                            
00007A32                            loc_75E0:
00007A32 08A9 0003 0022             		bclr	#3,$22(a1)
00007A38 117C 0002 0024             		move.b	#2,$24(a0)
00007A3E 08A8 0003 0022             		bclr	#3,$22(a0)
00007A44                            
00007A44                            locret_75F2:
00007A44 4E75                       		rts	
00007A46                            ; End of function ExitPlatform
00007A46                            
00007A46                            
00007A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A46                            
00007A46                            
00007A46                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007A46 7000                       		moveq	#0,d0
00007A48 1028 003F                  		move.b	$3F(a0),d0
00007A4C 1030 0029                  		move.b	$29(a0,d0.w),d0
00007A50 ED48                       		lsl.w	#6,d0
00007A52 0680 00FF D000             		addi.l	#$FFD000,d0
00007A58 2440                       		movea.l	d0,a2
00007A5A 43F8 D000                  		lea	($FFFFD000).w,a1
00007A5E 302A 000C                  		move.w	$C(a2),d0
00007A62 5140                       		subq.w	#8,d0
00007A64 7200                       		moveq	#0,d1
00007A66 1229 0016                  		move.b	$16(a1),d1
00007A6A 9041                       		sub.w	d1,d0
00007A6C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007A70 4E75                       		rts	
00007A72                            ; End of function Obj11_MoveSonic
00007A72                            
00007A72                            
00007A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A72                            
00007A72                            
00007A72                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007A72 1028 003E                  		move.b	$3E(a0),d0
00007A76 6100 B1AA                  		bsr.w	CalcSine
00007A7A 3800                       		move.w	d0,d4
00007A7C 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007A82 7000                       		moveq	#0,d0
00007A84 1028 0028                  		move.b	$28(a0),d0
00007A88 E948                       		lsl.w	#4,d0
00007A8A 7600                       		moveq	#0,d3
00007A8C 1628 003F                  		move.b	$3F(a0),d3
00007A90 3403                       		move.w	d3,d2
00007A92 D640                       		add.w	d0,d3
00007A94 7A00                       		moveq	#0,d5
00007A96 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007A9C 1A35 3000                  		move.b	(a5,d3.w),d5
00007AA0 0243 000F                  		andi.w	#$F,d3
00007AA4 E94B                       		lsl.w	#4,d3
00007AA6 47F4 3000                  		lea	(a4,d3.w),a3
00007AAA 45E8 0029                  		lea	$29(a0),a2
00007AAE                            
00007AAE                            loc_765C:
00007AAE 7000                       		moveq	#0,d0
00007AB0 101A                       		move.b	(a2)+,d0
00007AB2 ED48                       		lsl.w	#6,d0
00007AB4 0680 00FF D000             		addi.l	#$FFD000,d0
00007ABA 2240                       		movea.l	d0,a1
00007ABC 7000                       		moveq	#0,d0
00007ABE 101B                       		move.b	(a3)+,d0
00007AC0 5240                       		addq.w	#1,d0
00007AC2 C0C5                       		mulu.w	d5,d0
00007AC4 C0C4                       		mulu.w	d4,d0
00007AC6 4840                       		swap	d0
00007AC8 D069 003C                  		add.w	$3C(a1),d0
00007ACC 3340 000C                  		move.w	d0,$C(a1)
00007AD0 51CA FFDC                  		dbf	d2,loc_765C
00007AD4 7000                       		moveq	#0,d0
00007AD6 1028 0028                  		move.b	$28(a0),d0
00007ADA 7600                       		moveq	#0,d3
00007ADC 1628 003F                  		move.b	$3F(a0),d3
00007AE0 5203                       		addq.b	#1,d3
00007AE2 9600                       		sub.b	d0,d3
00007AE4 4403                       		neg.b	d3
00007AE6 6B00                       		bmi.s	locret_76CA
00007AE8 3403                       		move.w	d3,d2
00007AEA E94B                       		lsl.w	#4,d3
00007AEC 47F4 3000                  		lea	(a4,d3.w),a3
00007AF0 D6C2                       		adda.w	d2,a3
00007AF2 5342                       		subq.w	#1,d2
00007AF4 6500                       		bcs.s	locret_76CA
00007AF6                            
00007AF6                            loc_76A4:
00007AF6 7000                       		moveq	#0,d0
00007AF8 101A                       		move.b	(a2)+,d0
00007AFA ED48                       		lsl.w	#6,d0
00007AFC 0680 00FF D000             		addi.l	#$FFD000,d0
00007B02 2240                       		movea.l	d0,a1
00007B04 7000                       		moveq	#0,d0
00007B06 1023                       		move.b	-(a3),d0
00007B08 5240                       		addq.w	#1,d0
00007B0A C0C5                       		mulu.w	d5,d0
00007B0C C0C4                       		mulu.w	d4,d0
00007B0E 4840                       		swap	d0
00007B10 D069 003C                  		add.w	$3C(a1),d0
00007B14 3340 000C                  		move.w	d0,$C(a1)
00007B18 51CA FFDC                  		dbf	d2,loc_76A4
00007B1C                            
00007B1C                            locret_76CA:
00007B1C 4E75                       		rts	
00007B1E                            ; End of function Obj11_Bend
00007B1E                            
00007B1E                            ; ===========================================================================
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            ; GHZ bridge-bending data
00007B1E                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007C2E                            		even
00007C2E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007D2E                            		even
00007D2E                            
00007D2E                            ; ===========================================================================
00007D2E                            
00007D2E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007D2E 3028 0008                  		move.w	8(a0),d0
00007D32 0240 FF80                  		andi.w	#$FF80,d0
00007D36 3238 F700                  		move.w	($FFFFF700).w,d1
00007D3A 0441 0080                  		subi.w	#$80,d1
00007D3E 0241 FF80                  		andi.w	#$FF80,d1
00007D42 9041                       		sub.w	d1,d0
00007D44 0C40 0280                  		cmpi.w	#$280,d0
00007D48 6200 0000                  		bhi.w	Obj11_DelAll
00007D4C 4E75                       		rts	
00007D4E                            ; ===========================================================================
00007D4E                            
00007D4E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007D4E 7400                       		moveq	#0,d2
00007D50 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007D54 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007D56 5302                       		subq.b	#1,d2		; subtract 1
00007D58 6500                       		bcs.s	Obj11_Delete
00007D5A                            
00007D5A                            Obj11_DelLoop:
00007D5A 7000                       		moveq	#0,d0
00007D5C 101A                       		move.b	(a2)+,d0
00007D5E ED48                       		lsl.w	#6,d0
00007D60 0680 00FF D000             		addi.l	#$FFD000,d0
00007D66 2240                       		movea.l	d0,a1
00007D68 B048                       		cmp.w	a0,d0
00007D6A 6700                       		beq.s	loc_791E
00007D6C 6100 0000                  		bsr.w	DeleteObject2
00007D70                            
00007D70                            loc_791E:
00007D70 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007D74                            
00007D74                            Obj11_Delete:
00007D74 6100 0000                  		bsr.w	DeleteObject
00007D78 4E75                       		rts	
00007D7A                            ; ===========================================================================
00007D7A                            
00007D7A                            Obj11_Delete2:				; XREF: Obj11_Index
00007D7A 6100 0000                  		bsr.w	DeleteObject
00007D7E 4E75                       		rts	
00007D80                            ; ===========================================================================
00007D80                            
00007D80                            Obj11_Display2:				; XREF: Obj11_Index
00007D80 6100 0000                  		bsr.w	DisplaySprite
00007D84 4E75                       		rts	
00007D86                            ; ===========================================================================
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            Map_obj11:
00007D86                            	include "_maps\obj11.asm"
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007D8A 0000                       		dc.w byte_794B-Map_obj11
00007D8C 01                         byte_793A:	dc.b 1
00007D8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D92 02                         byte_7940:	dc.b 2
00007D93 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007D98 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007D9D 01                         byte_794B:	dc.b 1
00007D9E FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007DA4 00                         		even
00007DA4 00                         		even
00007DA4                            
00007DA4                            ; ===========================================================================
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007DA4                            ;	    - spiked ball on a chain (SBZ)
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            
00007DA4                            Obj15:					; XREF: Obj_Index
00007DA4 7000                       		moveq	#0,d0
00007DA6 1028 0024                  		move.b	$24(a0),d0
00007DAA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007DAE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007DB2                            ; ===========================================================================
00007DB2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007DB6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007DBA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007DBE 0000                       		dc.w Obj15_Action-Obj15_Index
00007DC0                            ; ===========================================================================
00007DC0                            
00007DC0                            Obj15_Main:				; XREF: Obj15_Index
00007DC0 5428 0024                  		addq.b	#2,$24(a0)
00007DC4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007DCC 317C 4380 0002             		move.w	#$4380,2(a0)
00007DD2 117C 0004 0001             		move.b	#4,1(a0)
00007DD8 117C 0003 0018             		move.b	#3,$18(a0)
00007DDE 117C 0018 0019             		move.b	#$18,$19(a0)
00007DE4 117C 0008 0016             		move.b	#8,$16(a0)
00007DEA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007DF0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007DF6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007DFC 6600                       		bne.s	Obj15_NotSLZ
00007DFE 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E06 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E0C 117C 0020 0019             		move.b	#$20,$19(a0)
00007E12 117C 0010 0016             		move.b	#$10,$16(a0)
00007E18 117C 0099 0020             		move.b	#$99,$20(a0)
00007E1E                            
00007E1E                            Obj15_NotSLZ:
00007E1E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007E24 6600                       		bne.s	Obj15_SetLength
00007E26 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007E2E 317C 0391 0002             		move.w	#$391,2(a0)
00007E34 117C 0018 0019             		move.b	#$18,$19(a0)
00007E3A 117C 0018 0016             		move.b	#$18,$16(a0)
00007E40 117C 0086 0020             		move.b	#$86,$20(a0)
00007E46 117C 000C 0024             		move.b	#$C,$24(a0)
00007E4C                            
00007E4C                            Obj15_SetLength:
00007E4C 1810                       		move.b	0(a0),d4
00007E4E 7200                       		moveq	#0,d1
00007E50 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007E54 1212                       		move.b	(a2),d1		; move a2 to d1
00007E56 3F01                       		move.w	d1,-(sp)
00007E58 0241 000F                  		andi.w	#$F,d1
00007E5C 14FC 0000                  		move.b	#0,(a2)+
00007E60 3601                       		move.w	d1,d3
00007E62 E94B                       		lsl.w	#4,d3
00007E64 5003                       		addq.b	#8,d3
00007E66 1143 003C                  		move.b	d3,$3C(a0)
00007E6A 5103                       		subq.b	#8,d3
00007E6C 4A28 001A                  		tst.b	$1A(a0)
00007E70 6700                       		beq.s	Obj15_MakeChain
00007E72 5003                       		addq.b	#8,d3
00007E74 5341                       		subq.w	#1,d1
00007E76                            
00007E76                            Obj15_MakeChain:
00007E76 6100 0000                  		bsr.w	SingleObjLoad
00007E7A 6600                       		bne.s	loc_7A92
00007E7C 5228 0028                  		addq.b	#1,$28(a0)
00007E80 3A09                       		move.w	a1,d5
00007E82 0445 D000                  		subi.w	#-$3000,d5
00007E86 EC4D                       		lsr.w	#6,d5
00007E88 0245 007F                  		andi.w	#$7F,d5
00007E8C 14C5                       		move.b	d5,(a2)+
00007E8E 137C 000A 0024             		move.b	#$A,$24(a1)
00007E94 1284                       		move.b	d4,0(a1)	; load swinging	object
00007E96 2368 0004 0004             		move.l	4(a0),4(a1)
00007E9C 3368 0002 0002             		move.w	2(a0),2(a1)
00007EA2 08A9 0006 0002             		bclr	#6,2(a1)
00007EA8 137C 0004 0001             		move.b	#4,1(a1)
00007EAE 137C 0004 0018             		move.b	#4,$18(a1)
00007EB4 137C 0008 0019             		move.b	#8,$19(a1)
00007EBA 137C 0001 001A             		move.b	#1,$1A(a1)
00007EC0 1343 003C                  		move.b	d3,$3C(a1)
00007EC4 0403 0010                  		subi.b	#$10,d3
00007EC8 6400                       		bcc.s	loc_7A8E
00007ECA 137C 0002 001A             		move.b	#2,$1A(a1)
00007ED0 137C 0003 0018             		move.b	#3,$18(a1)
00007ED6 08E9 0006 0002             		bset	#6,2(a1)
00007EDC                            
00007EDC                            loc_7A8E:
00007EDC 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007EE0                            
00007EE0                            loc_7A92:
00007EE0 3A08                       		move.w	a0,d5
00007EE2 0445 D000                  		subi.w	#-$3000,d5
00007EE6 EC4D                       		lsr.w	#6,d5
00007EE8 0245 007F                  		andi.w	#$7F,d5
00007EEC 14C5                       		move.b	d5,(a2)+
00007EEE 317C 4080 0026             		move.w	#$4080,$26(a0)
00007EF4 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007EFA 321F                       		move.w	(sp)+,d1
00007EFC 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F00 6700                       		beq.s	loc_7AD4	; if not, branch
00007F02 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F0A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F10 117C 0001 001A             		move.b	#1,$1A(a0)
00007F16 117C 0002 0018             		move.b	#2,$18(a0)
00007F1C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007F22                            
00007F22                            loc_7AD4:
00007F22 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007F28 6700                       		beq.s	Obj15_Action	; if yes, branch
00007F2A                            
00007F2A                            Obj15_SetSolid:				; XREF: Obj15_Index
00007F2A 7200                       		moveq	#0,d1
00007F2C 1228 0019                  		move.b	$19(a0),d1
00007F30 7600                       		moveq	#0,d3
00007F32 1628 0016                  		move.b	$16(a0),d3
00007F36 6100 FA76                  		bsr.w	Obj15_Solid
00007F3A                            
00007F3A                            Obj15_Action:				; XREF: Obj15_Index
00007F3A 6100 0000                  		bsr.w	Obj15_Move
00007F3E 6100 0000                  		bsr.w	DisplaySprite
00007F42 6000 0000                  		bra.w	Obj15_ChkDel
00007F46                            ; ===========================================================================
00007F46                            
00007F46                            Obj15_Action2:				; XREF: Obj15_Index
00007F46 7200                       		moveq	#0,d1
00007F48 1228 0019                  		move.b	$19(a0),d1
00007F4C 6100 FAC4                  		bsr.w	ExitPlatform
00007F50 3F28 0008                  		move.w	8(a0),-(sp)
00007F54 6100 0000                  		bsr.w	Obj15_Move
00007F58 341F                       		move.w	(sp)+,d2
00007F5A 7600                       		moveq	#0,d3
00007F5C 1628 0016                  		move.b	$16(a0),d3
00007F60 5203                       		addq.b	#1,d3
00007F62 6100 0000                  		bsr.w	MvSonicOnPtfm
00007F66 6100 0000                  		bsr.w	DisplaySprite
00007F6A 6000 0000                  		bra.w	Obj15_ChkDel
00007F6E                            
00007F6E 4E75                       		rts
00007F70                            
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Subroutine to	change Sonic's position with a platform
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            
00007F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F70                            
00007F70                            
00007F70                            MvSonicOnPtfm:
00007F70 43F8 D000                  		lea	($FFFFD000).w,a1
00007F74 3028 000C                  		move.w	$C(a0),d0
00007F78 9043                       		sub.w	d3,d0
00007F7A 6000                       		bra.s	MvSonic2
00007F7C                            ; End of function MvSonicOnPtfm
00007F7C                            
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            ; Subroutine to	change Sonic's position with a platform
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            
00007F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F7C                            
00007F7C                            
00007F7C                            MvSonicOnPtfm2:
00007F7C 43F8 D000                  		lea	($FFFFD000).w,a1
00007F80 3028 000C                  		move.w	$C(a0),d0
00007F84 0440 0009                  		subi.w	#9,d0
00007F88                            
00007F88                            MvSonic2:
00007F88 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F8C 6B00                       		bmi.s	locret_7B62
00007F8E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007F94 6400                       		bcc.s	locret_7B62
00007F96 4A78 FE08                  		tst.w	($FFFFFE08).w
00007F9A 6600                       		bne.s	locret_7B62
00007F9C 7200                       		moveq	#0,d1
00007F9E 1229 0016                  		move.b	$16(a1),d1
00007FA2 9041                       		sub.w	d1,d0
00007FA4 3340 000C                  		move.w	d0,$C(a1)
00007FA8 9468 0008                  		sub.w	8(a0),d2
00007FAC 9569 0008                  		sub.w	d2,8(a1)
00007FB0                            
00007FB0                            locret_7B62:
00007FB0 4E75                       		rts	
00007FB2                            ; End of function MvSonicOnPtfm2
00007FB2                            
00007FB2                            
00007FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FB2                            
00007FB2                            
00007FB2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007FB2 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007FB6 323C 0080                  		move.w	#$80,d1
00007FBA 0828 0000 0022             		btst	#0,$22(a0)
00007FC0 6700                       		beq.s	loc_7B78
00007FC2 4440                       		neg.w	d0
00007FC4 D041                       		add.w	d1,d0
00007FC6                            
00007FC6                            loc_7B78:
00007FC6 6000                       		bra.s	Obj15_Move2
00007FC8                            ; End of function Obj15_Move
00007FC8                            
00007FC8                            
00007FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC8                            
00007FC8                            
00007FC8                            Obj48_Move:				; XREF: Obj48_Display2
00007FC8 4A28 003D                  		tst.b	$3D(a0)
00007FCC 6600                       		bne.s	loc_7B9C
00007FCE 3028 003E                  		move.w	$3E(a0),d0
00007FD2 5040                       		addq.w	#8,d0
00007FD4 3140 003E                  		move.w	d0,$3E(a0)
00007FD8 D168 0026                  		add.w	d0,$26(a0)
00007FDC 0C40 0200                  		cmpi.w	#$200,d0
00007FE0 6600                       		bne.s	loc_7BB6
00007FE2 117C 0001 003D             		move.b	#1,$3D(a0)
00007FE8 6000                       		bra.s	loc_7BB6
00007FEA                            ; ===========================================================================
00007FEA                            
00007FEA                            loc_7B9C:
00007FEA 3028 003E                  		move.w	$3E(a0),d0
00007FEE 5140                       		subq.w	#8,d0
00007FF0 3140 003E                  		move.w	d0,$3E(a0)
00007FF4 D168 0026                  		add.w	d0,$26(a0)
00007FF8 0C40 FE00                  		cmpi.w	#-$200,d0
00007FFC 6600                       		bne.s	loc_7BB6
00007FFE 117C 0000 003D             		move.b	#0,$3D(a0)
00008004                            
00008004                            loc_7BB6:
00008004 1028 0026                  		move.b	$26(a0),d0
00008008                            ; End of function Obj48_Move
00008008                            
00008008                            
00008008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008008                            
00008008                            
00008008                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008008 6100 AC18                  		bsr.w	CalcSine
0000800C 3428 0038                  		move.w	$38(a0),d2
00008010 3628 003A                  		move.w	$3A(a0),d3
00008014 45E8 0028                  		lea	$28(a0),a2
00008018 7C00                       		moveq	#0,d6
0000801A 1C1A                       		move.b	(a2)+,d6
0000801C                            
0000801C                            loc_7BCE:
0000801C 7800                       		moveq	#0,d4
0000801E 181A                       		move.b	(a2)+,d4
00008020 ED4C                       		lsl.w	#6,d4
00008022 0684 00FF D000             		addi.l	#$FFD000,d4
00008028 2244                       		movea.l	d4,a1
0000802A 7800                       		moveq	#0,d4
0000802C 1829 003C                  		move.b	$3C(a1),d4
00008030 2A04                       		move.l	d4,d5
00008032 C9C0                       		muls.w	d0,d4
00008034 E084                       		asr.l	#8,d4
00008036 CBC1                       		muls.w	d1,d5
00008038 E085                       		asr.l	#8,d5
0000803A D842                       		add.w	d2,d4
0000803C DA43                       		add.w	d3,d5
0000803E 3344 000C                  		move.w	d4,$C(a1)
00008042 3345 0008                  		move.w	d5,8(a1)
00008046 51CE FFD4                  		dbf	d6,loc_7BCE
0000804A 4E75                       		rts	
0000804C                            ; End of function Obj15_Move2
0000804C                            
0000804C                            ; ===========================================================================
0000804C                            
0000804C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000804C 3028 003A                  		move.w	$3A(a0),d0
00008050 0240 FF80                  		andi.w	#$FF80,d0
00008054 3238 F700                  		move.w	($FFFFF700).w,d1
00008058 0441 0080                  		subi.w	#$80,d1
0000805C 0241 FF80                  		andi.w	#$FF80,d1
00008060 9041                       		sub.w	d1,d0
00008062 0C40 0280                  		cmpi.w	#$280,d0
00008066 6200 0000                  		bhi.w	Obj15_DelAll
0000806A 4E75                       		rts	
0000806C                            ; ===========================================================================
0000806C                            
0000806C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000806C 7400                       		moveq	#0,d2
0000806E 45E8 0028                  		lea	$28(a0),a2
00008072 141A                       		move.b	(a2)+,d2
00008074                            
00008074                            Obj15_DelLoop:
00008074 7000                       		moveq	#0,d0
00008076 101A                       		move.b	(a2)+,d0
00008078 ED48                       		lsl.w	#6,d0
0000807A 0680 00FF D000             		addi.l	#$FFD000,d0
00008080 2240                       		movea.l	d0,a1
00008082 6100 0000                  		bsr.w	DeleteObject2
00008086 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000808A 4E75                       		rts	
0000808C                            ; ===========================================================================
0000808C                            
0000808C                            Obj15_Delete:				; XREF: Obj15_Index
0000808C 6100 0000                  		bsr.w	DeleteObject
00008090 4E75                       		rts	
00008092                            ; ===========================================================================
00008092                            
00008092                            Obj15_Display:				; XREF: Obj15_Index
00008092 6000 0000                  		bra.w	DisplaySprite
00008096                            ; ===========================================================================
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096                            Map_obj15:
00008096                            	include "_maps\obj15ghz.asm"
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096 0000                       		dc.w byte_7C4E-Map_obj15
00008098 0000                       		dc.w byte_7C59-Map_obj15
0000809A 0000                       		dc.w byte_7C5F-Map_obj15
0000809C 02                         byte_7C4E:	dc.b 2
0000809D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000080A2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000080A7 01                         byte_7C59:	dc.b 1
000080A8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000080AD 01                         byte_7C5F:	dc.b 1
000080AE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000080B4 00                         		even
000080B4 00                         		even
000080B4                            
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            Map_obj15a:
000080B4                            	include "_maps\obj15slz.asm"
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4 0000                       		dc.w byte_7C6C-Map_obj15a
000080B6 0000                       		dc.w byte_7C95-Map_obj15a
000080B8 0000                       		dc.w byte_7C9B-Map_obj15a
000080BA 08                         byte_7C6C:	dc.b 8
000080BB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000080C0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000080C5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000080CA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000080CF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000080D4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000080D9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000080DE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000080E3 01                         byte_7C95:	dc.b 1
000080E4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000080E9 01                         byte_7C9B:	dc.b 1
000080EA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000080F0 00                         		even
000080F0 00                         		even
000080F0                            
000080F0                            ; ===========================================================================
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            ; Object 17 - helix of spikes on a pole	(GHZ)
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            
000080F0                            Obj17:					; XREF: Obj_Index
000080F0 7000                       		moveq	#0,d0
000080F2 1028 0024                  		move.b	$24(a0),d0
000080F6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000080FA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000080FE                            ; ===========================================================================
000080FE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008100 0000                       		dc.w Obj17_Action-Obj17_Index
00008102 0000                       		dc.w Obj17_Action-Obj17_Index
00008104 0000                       		dc.w Obj17_Delete-Obj17_Index
00008106 0000                       		dc.w Obj17_Display-Obj17_Index
00008108                            ; ===========================================================================
00008108                            
00008108                            Obj17_Main:				; XREF: Obj17_Index
00008108 5428 0024                  		addq.b	#2,$24(a0)
0000810C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008114 317C 4398 0002             		move.w	#$4398,2(a0)
0000811A 117C 0007 0022             		move.b	#7,$22(a0)
00008120 117C 0004 0001             		move.b	#4,1(a0)
00008126 117C 0003 0018             		move.b	#3,$18(a0)
0000812C 117C 0008 0019             		move.b	#8,$19(a0)
00008132 3428 000C                  		move.w	$C(a0),d2
00008136 3628 0008                  		move.w	8(a0),d3
0000813A 1810                       		move.b	0(a0),d4
0000813C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008140 7200                       		moveq	#0,d1
00008142 1212                       		move.b	(a2),d1		; move a2 to d1
00008144 14FC 0000                  		move.b	#0,(a2)+
00008148 3001                       		move.w	d1,d0
0000814A E248                       		lsr.w	#1,d0
0000814C E948                       		lsl.w	#4,d0
0000814E 9640                       		sub.w	d0,d3
00008150 5501                       		subq.b	#2,d1
00008152 6500                       		bcs.s	Obj17_Action
00008154 7C00                       		moveq	#0,d6
00008156                            
00008156                            Obj17_MakeHelix:
00008156 6100 0000                  		bsr.w	SingleObjLoad
0000815A 6600                       		bne.s	Obj17_Action
0000815C 5228 0028                  		addq.b	#1,$28(a0)
00008160 3A09                       		move.w	a1,d5
00008162 0445 D000                  		subi.w	#$D000,d5
00008166 EC4D                       		lsr.w	#6,d5
00008168 0245 007F                  		andi.w	#$7F,d5
0000816C 14C5                       		move.b	d5,(a2)+
0000816E 137C 0008 0024             		move.b	#8,$24(a1)
00008174 1284                       		move.b	d4,0(a1)
00008176 3342 000C                  		move.w	d2,$C(a1)
0000817A 3343 0008                  		move.w	d3,8(a1)
0000817E 2368 0004 0004             		move.l	4(a0),4(a1)
00008184 337C 4398 0002             		move.w	#$4398,2(a1)
0000818A 137C 0004 0001             		move.b	#4,1(a1)
00008190 137C 0003 0018             		move.b	#3,$18(a1)
00008196 137C 0008 0019             		move.b	#8,$19(a1)
0000819C 1346 003E                  		move.b	d6,$3E(a1)
000081A0 5206                       		addq.b	#1,d6
000081A2 0206 0007                  		andi.b	#7,d6
000081A6 0643 0010                  		addi.w	#$10,d3
000081AA B668 0008                  		cmp.w	8(a0),d3
000081AE 6600                       		bne.s	loc_7D78
000081B0 1146 003E                  		move.b	d6,$3E(a0)
000081B4 5206                       		addq.b	#1,d6
000081B6 0206 0007                  		andi.b	#7,d6
000081BA 0643 0010                  		addi.w	#$10,d3
000081BE 5228 0028                  		addq.b	#1,$28(a0)
000081C2                            
000081C2                            loc_7D78:
000081C2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000081C6                            
000081C6                            Obj17_Action:				; XREF: Obj17_Index
000081C6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000081CA 6100 0000                  		bsr.w	DisplaySprite
000081CE 6000 0000                  		bra.w	Obj17_ChkDel
000081D2                            
000081D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081D2                            
000081D2                            
000081D2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000081D2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000081D6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000081DC D028 003E                  		add.b	$3E(a0),d0
000081E0 0200 0007                  		andi.b	#7,d0
000081E4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000081E8 6600                       		bne.s	locret_7DA6
000081EA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000081F0                            
000081F0                            locret_7DA6:
000081F0 4E75                       		rts	
000081F2                            ; End of function Obj17_RotateSpikes
000081F2                            
000081F2                            ; ===========================================================================
000081F2                            
000081F2                            Obj17_ChkDel:				; XREF: Obj17_Action
000081F2 3028 0008                  		move.w	8(a0),d0
000081F6 0240 FF80                  		andi.w	#$FF80,d0
000081FA 3238 F700                  		move.w	($FFFFF700).w,d1
000081FE 0441 0080                  		subi.w	#$80,d1
00008202 0241 FF80                  		andi.w	#$FF80,d1
00008206 9041                       		sub.w	d1,d0
00008208 0C40 0280                  		cmpi.w	#$280,d0
0000820C 6200 0000                  		bhi.w	Obj17_DelAll
00008210 4E75                       		rts	
00008212                            ; ===========================================================================
00008212                            
00008212                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008212 7400                       		moveq	#0,d2
00008214 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008218 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000821A 5502                       		subq.b	#2,d2
0000821C 6500                       		bcs.s	Obj17_Delete
0000821E                            
0000821E                            Obj17_DelLoop:
0000821E 7000                       		moveq	#0,d0
00008220 101A                       		move.b	(a2)+,d0
00008222 ED48                       		lsl.w	#6,d0
00008224 0680 00FF D000             		addi.l	#$FFD000,d0
0000822A 2240                       		movea.l	d0,a1
0000822C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008230 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008234                            
00008234                            Obj17_Delete:				; XREF: Obj17_Index
00008234 6100 0000                  		bsr.w	DeleteObject
00008238 4E75                       		rts	
0000823A                            ; ===========================================================================
0000823A                            
0000823A                            Obj17_Display:				; XREF: Obj17_Index
0000823A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000823E 6000 0000                  		bra.w	DisplaySprite
00008242                            ; ===========================================================================
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242                            Map_obj17:
00008242                            	include "_maps\obj17.asm"
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008246 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000824A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000824E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008252 01                         byte_7E08:	dc.b 1
00008253 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008258 01                         byte_7E0E:	dc.b 1
00008259 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000825E 01                         byte_7E14:	dc.b 1
0000825F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008264 01                         byte_7E1A:	dc.b 1
00008265 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000826A 01                         byte_7E20:	dc.b 1
0000826B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008270 01                         byte_7E26:	dc.b 1
00008271 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008276 01                         byte_7E2C:	dc.b 1
00008277 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000827C                            		even
0000827C                            		even
0000827C                            
0000827C                            ; ===========================================================================
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            
0000827C                            Obj18:					; XREF: Obj_Index
0000827C 7000                       		moveq	#0,d0
0000827E 1028 0024                  		move.b	$24(a0),d0
00008282 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008286 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000828A                            ; ===========================================================================
0000828A 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000828C 0000                       		dc.w Obj18_Solid-Obj18_Index
0000828E 0000                       		dc.w Obj18_Action2-Obj18_Index
00008290 0000                       		dc.w Obj18_Delete-Obj18_Index
00008292 0000                       		dc.w Obj18_Action-Obj18_Index
00008294                            ; ===========================================================================
00008294                            
00008294                            Obj18_Main:				; XREF: Obj18_Index
00008294 5428 0024                  		addq.b	#2,$24(a0)
00008298 317C 4000 0002             		move.w	#$4000,2(a0)
0000829E 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000082A6 117C 0020 0019             		move.b	#$20,$19(a0)
000082AC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000082B2 6600                       		bne.s	Obj18_NotSYZ
000082B4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000082BC 117C 0020 0019             		move.b	#$20,$19(a0)
000082C2                            
000082C2                            Obj18_NotSYZ:
000082C2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000082C8 6600                       		bne.s	Obj18_NotSLZ
000082CA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000082D2 117C 0020 0019             		move.b	#$20,$19(a0)
000082D8 317C 4000 0002             		move.w	#$4000,2(a0)
000082DE 117C 0003 0028             		move.b	#3,$28(a0)
000082E4                            
000082E4                            Obj18_NotSLZ:
000082E4 117C 0004 0001             		move.b	#4,1(a0)
000082EA 117C 0004 0018             		move.b	#4,$18(a0)
000082F0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000082F6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000082FC 3168 0008 0032             		move.w	8(a0),$32(a0)
00008302 317C 0080 0026             		move.w	#$80,$26(a0)
00008308 7200                       		moveq	#0,d1
0000830A 1028 0028                  		move.b	$28(a0),d0
0000830E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008312 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008314 5201                       		addq.b	#1,d1		; use frame #1
00008316 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000831C                            
0000831C                            Obj18_SetFrame:
0000831C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008320                            
00008320                            Obj18_Solid:				; XREF: Obj18_Index
00008320 4A28 0038                  		tst.b	$38(a0)
00008324 6700                       		beq.s	loc_7EE0
00008326 5928 0038                  		subq.b	#4,$38(a0)
0000832A                            
0000832A                            loc_7EE0:
0000832A 7200                       		moveq	#0,d1
0000832C 1228 0019                  		move.b	$19(a0),d1
00008330 6100 F56C                  		bsr.w	PlatformObject
00008334                            
00008334                            Obj18_Action:				; XREF: Obj18_Index
00008334 6100 0000                  		bsr.w	Obj18_Move
00008338 6100 0000                  		bsr.w	Obj18_Nudge
0000833C 6100 0000                  		bsr.w	DisplaySprite
00008340 6000 0000                  		bra.w	Obj18_ChkDel
00008344                            ; ===========================================================================
00008344                            
00008344                            Obj18_Action2:				; XREF: Obj18_Index
00008344 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000834A 6700                       		beq.s	loc_7F06
0000834C 5828 0038                  		addq.b	#4,$38(a0)
00008350                            
00008350                            loc_7F06:
00008350 7200                       		moveq	#0,d1
00008352 1228 0019                  		move.b	$19(a0),d1
00008356 6100 F6BA                  		bsr.w	ExitPlatform
0000835A 3F28 0008                  		move.w	8(a0),-(sp)
0000835E 6100 0000                  		bsr.w	Obj18_Move
00008362 6100 0000                  		bsr.w	Obj18_Nudge
00008366 341F                       		move.w	(sp)+,d2
00008368 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000836C 6100 0000                  		bsr.w	DisplaySprite
00008370 6000 0000                  		bra.w	Obj18_ChkDel
00008374                            
00008374 4E75                       		rts
00008376                            
00008376                            ; ---------------------------------------------------------------------------
00008376                            ; Subroutine to	move platform slightly when you	stand on it
00008376                            ; ---------------------------------------------------------------------------
00008376                            
00008376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008376                            
00008376                            
00008376                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008376 1028 0038                  		move.b	$38(a0),d0
0000837A 6100 A8A6                  		bsr.w	CalcSine
0000837E 323C 0400                  		move.w	#$400,d1
00008382 C1C1                       		muls.w	d1,d0
00008384 4840                       		swap	d0
00008386 D068 002C                  		add.w	$2C(a0),d0
0000838A 3140 000C                  		move.w	d0,$C(a0)
0000838E 4E75                       		rts	
00008390                            ; End of function Obj18_Nudge
00008390                            
00008390                            ; ---------------------------------------------------------------------------
00008390                            ; Subroutine to	move platforms
00008390                            ; ---------------------------------------------------------------------------
00008390                            
00008390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008390                            
00008390                            
00008390                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008390 7000                       		moveq	#0,d0
00008392 1028 0028                  		move.b	$28(a0),d0
00008396 0240 000F                  		andi.w	#$F,d0
0000839A D040                       		add.w	d0,d0
0000839C 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000083A0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000083A4                            ; End of function Obj18_Move
000083A4                            
000083A4                            ; ===========================================================================
000083A4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000083A8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000083AC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000083B0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000083B4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000083B8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000083BC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Obj18_Type00:
000083BE 4E75                       		rts			; platform 00 doesn't move
000083C0                            ; ===========================================================================
000083C0                            
000083C0                            Obj18_Type05:
000083C0 3028 0032                  		move.w	$32(a0),d0
000083C4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083C8 4401                       		neg.b	d1		; reverse platform-motion
000083CA 0601 0040                  		addi.b	#$40,d1
000083CE 6000                       		bra.s	Obj18_01_Move
000083D0                            ; ===========================================================================
000083D0                            
000083D0                            Obj18_Type01:
000083D0 3028 0032                  		move.w	$32(a0),d0
000083D4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083D8 0401 0040                  		subi.b	#$40,d1
000083DC                            
000083DC                            Obj18_01_Move:
000083DC 4881                       		ext.w	d1
000083DE D041                       		add.w	d1,d0
000083E0 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000083E4 6000 0000                  		bra.w	Obj18_ChgMotion
000083E8                            ; ===========================================================================
000083E8                            
000083E8                            Obj18_Type0C:
000083E8 3028 0034                  		move.w	$34(a0),d0
000083EC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000083F0 4401                       		neg.b	d1		; reverse platform-motion
000083F2 0601 0030                  		addi.b	#$30,d1
000083F6 6000                       		bra.s	Obj18_02_Move
000083F8                            ; ===========================================================================
000083F8                            
000083F8                            Obj18_Type0B:
000083F8 3028 0034                  		move.w	$34(a0),d0
000083FC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008400 0401 0030                  		subi.b	#$30,d1
00008404 6000                       		bra.s	Obj18_02_Move
00008406                            ; ===========================================================================
00008406                            
00008406                            Obj18_Type06:
00008406 3028 0034                  		move.w	$34(a0),d0
0000840A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000840E 4401                       		neg.b	d1		; reverse platform-motion
00008410 0601 0040                  		addi.b	#$40,d1
00008414 6000                       		bra.s	Obj18_02_Move
00008416                            ; ===========================================================================
00008416                            
00008416                            Obj18_Type02:
00008416 3028 0034                  		move.w	$34(a0),d0
0000841A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000841E 0401 0040                  		subi.b	#$40,d1
00008422                            
00008422                            Obj18_02_Move:
00008422 4881                       		ext.w	d1
00008424 D041                       		add.w	d1,d0
00008426 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000842A 6000 0000                  		bra.w	Obj18_ChgMotion
0000842E                            ; ===========================================================================
0000842E                            
0000842E                            Obj18_Type03:
0000842E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008432 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008434 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000843A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000843C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008442                            
00008442                            Obj18_03_NoMove:
00008442 4E75                       		rts	
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj18_03_Wait:
00008444 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008448 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000844A 317C 0020 003A             		move.w	#32,$3A(a0)
00008450 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008454 4E75                       		rts	
00008456                            ; ===========================================================================
00008456                            
00008456                            Obj18_Type04:
00008456 4A68 003A                  		tst.w	$3A(a0)
0000845A 6700                       		beq.s	loc_8048
0000845C 5368 003A                  		subq.w	#1,$3A(a0)
00008460 6600                       		bne.s	loc_8048
00008462 0828 0003 0022             		btst	#3,$22(a0)
00008468 6700                       		beq.s	loc_8042
0000846A 08E9 0001 0022             		bset	#1,$22(a1)
00008470 08A9 0003 0022             		bclr	#3,$22(a1)
00008476 137C 0002 0024             		move.b	#2,$24(a1)
0000847C 08A8 0003 0022             		bclr	#3,$22(a0)
00008482 4228 0025                  		clr.b	$25(a0)
00008486 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000848C                            
0000848C                            loc_8042:
0000848C 117C 0008 0024             		move.b	#8,$24(a0)
00008492                            
00008492                            loc_8048:
00008492 2628 002C                  		move.l	$2C(a0),d3
00008496 3028 0012                  		move.w	$12(a0),d0
0000849A 48C0                       		ext.l	d0
0000849C E180                       		asl.l	#8,d0
0000849E D680                       		add.l	d0,d3
000084A0 2143 002C                  		move.l	d3,$2C(a0)
000084A4 0668 0038 0012             		addi.w	#$38,$12(a0)
000084AA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000084AE 0640 00E0                  		addi.w	#$E0,d0
000084B2 B068 002C                  		cmp.w	$2C(a0),d0
000084B6 6400                       		bcc.s	locret_8074
000084B8 117C 0006 0024             		move.b	#6,$24(a0)
000084BE                            
000084BE                            locret_8074:
000084BE 4E75                       		rts	
000084C0                            ; ===========================================================================
000084C0                            
000084C0                            Obj18_Type07:
000084C0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084C4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000084C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000084CA 7000                       		moveq	#0,d0
000084CC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000084D0 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000084D2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000084D6 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000084D8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000084DE                            
000084DE                            Obj18_07_NoMove:
000084DE 4E75                       		rts	
000084E0                            ; ===========================================================================
000084E0                            
000084E0                            Obj18_07_Wait:
000084E0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000084E4 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000084E6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000084EA 4E75                       		rts	
000084EC                            ; ===========================================================================
000084EC                            
000084EC                            Obj18_Type08:
000084EC 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000084F0 3028 0034                  		move.w	$34(a0),d0
000084F4 0440 0200                  		subi.w	#$200,d0
000084F8 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000084FC 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000084FE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008502                            
00008502                            Obj18_08_NoStop:
00008502 4E75                       		rts	
00008504                            ; ===========================================================================
00008504                            
00008504                            Obj18_Type0A:
00008504 3028 0034                  		move.w	$34(a0),d0
00008508 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000850C 0401 0040                  		subi.b	#$40,d1
00008510 4881                       		ext.w	d1
00008512 E241                       		asr.w	#1,d1
00008514 D041                       		add.w	d1,d0
00008516 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000851A                            
0000851A                            Obj18_ChgMotion:
0000851A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008520 4E75                       		rts	
00008522                            ; ===========================================================================
00008522                            
00008522                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008522 3028 0032                  		move.w	$32(a0),d0
00008526 0240 FF80                  		andi.w	#$FF80,d0
0000852A 3238 F700                  		move.w	($FFFFF700).w,d1
0000852E 0441 0080                  		subi.w	#$80,d1
00008532 0241 FF80                  		andi.w	#$FF80,d1
00008536 9041                       		sub.w	d1,d0
00008538 0C40 0280                  		cmpi.w	#$280,d0
0000853C 6200                       		bhi.s	Obj18_Delete
0000853E 4E75                       		rts	
00008540                            ; ===========================================================================
00008540                            
00008540                            Obj18_Delete:				; XREF: Obj18_Index
00008540 6000 0000                  		bra.w	DeleteObject
00008544                            ; ===========================================================================
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544                            Map_obj18x:
00008544                            	include "_maps\obj18x.asm"
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544 0000                       		dc.w byte_80FE-Map_obj18x
00008546 0000                       		dc.w byte_8109-Map_obj18x
00008548 02                         byte_80FE:	dc.b 2
00008549 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000854E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008553 0A                         byte_8109:	dc.b $A
00008554 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008559 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000855E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008563 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008568 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000856D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008572 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008577 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000857C 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008581 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008586                            		even
00008586                            		even
00008586                            
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586                            Map_obj18:
00008586                            	include "_maps\obj18ghz.asm"
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586 0000                       		dc.w byte_8140-Map_obj18
00008588 0000                       		dc.w byte_8155-Map_obj18
0000858A 04                         byte_8140:	dc.b 4
0000858B F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008590 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008595 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000859A F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000859F 0A                         byte_8155:	dc.b $A
000085A0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000085A5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000085AA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000085AF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000085B4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000085B9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000085BE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000085C3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000085C8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000085CD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000085D2                            		even
000085D2                            		even
000085D2                            
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            Map_obj18a:
000085D2                            	include "_maps\obj18syz.asm"
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2 0000                       		dc.w byte_818A-Map_obj18a
000085D4 03                         byte_818A:	dc.b 3
000085D5 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000085DA F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000085DF F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000085E4                            		even
000085E4                            		even
000085E4                            
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            Map_obj18b:
000085E4                            	include "_maps\obj18slz.asm"
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4 0000                       		dc.w byte_819C-Map_obj18b
000085E6 02                         byte_819C:	dc.b 2
000085E7 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000085EC F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000085F2 00                         		even
000085F2 00                         		even
000085F2                            
000085F2                            ; ===========================================================================
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            ; Object 19 - blank
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            
000085F2                            Obj19:					; XREF: Obj_Index
000085F2 4E75                       		rts	
000085F4                            ; ===========================================================================
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            Map_obj48:
000085F4                            	include "_maps\obj48.asm"
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000085F8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000085FC 06                         byte_81B2:	dc.b 6
000085FD F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008602 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008607 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000860C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008611 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008616 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000861B 04                         byte_81D1:	dc.b 4
0000861C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008621 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008626 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000862B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008630 04                         byte_81E6:	dc.b 4
00008631 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008636 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000863B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008640 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008645 04                         byte_81FB:	dc.b 4
00008646 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000864B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008650 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008655 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000865A                            		even
0000865A                            		even
0000865A                            
0000865A                            ; ===========================================================================
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            ; Object 1A - GHZ collapsing ledge
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            
0000865A                            Obj1A:					; XREF: Obj_Index
0000865A 7000                       		moveq	#0,d0
0000865C 1028 0024                  		move.b	$24(a0),d0
00008660 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008664 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008668                            ; ===========================================================================
00008668 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000866C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008670 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008674                            ; ===========================================================================
00008674                            
00008674                            Obj1A_Main:				; XREF: Obj1A_Index
00008674 5428 0024                  		addq.b	#2,$24(a0)
00008678 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008680 317C 4000 0002             		move.w	#$4000,2(a0)
00008686 0028 0004 0001             		ori.b	#4,1(a0)
0000868C 117C 0004 0018             		move.b	#4,$18(a0)
00008692 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008698 117C 0064 0019             		move.b	#$64,$19(a0)
0000869E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000086A4 117C 0038 0016             		move.b	#$38,$16(a0)
000086AA 08E8 0004 0001             		bset	#4,1(a0)
000086B0                            
000086B0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000086B0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000086B4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000086B6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000086BA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000086BE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000086C2                            
000086C2                            Obj1A_Slope:
000086C2 323C 0030                  		move.w	#$30,d1
000086C6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086CC 6100 F2A4                  		bsr.w	SlopeObject
000086D0 6000 0000                  		bra.w	MarkObjGone
000086D4                            ; ===========================================================================
000086D4                            
000086D4                            Obj1A_Touch:				; XREF: Obj1A_Index
000086D4 4A28 0038                  		tst.b	$38(a0)
000086D8 6700 0000                  		beq.w	loc_847A
000086DC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000086E2 5328 0038                  		subq.b	#1,$38(a0)
000086E6                            
000086E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E6                            
000086E6                            
000086E6                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000086E6 323C 0030                  		move.w	#$30,d1
000086EA 6100 F326                  		bsr.w	ExitPlatform
000086EE 323C 0030                  		move.w	#$30,d1
000086F2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086F8 3428 0008                  		move.w	8(a0),d2
000086FC 6100 0000                  		bsr.w	SlopeObject2
00008700 6000 0000                  		bra.w	MarkObjGone
00008704                            ; End of function Obj1A_WalkOff
00008704                            
00008704                            ; ===========================================================================
00008704                            
00008704                            Obj1A_Display:				; XREF: Obj1A_Index
00008704 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008708 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000870A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000870E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008712 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008716 6000 0000                  		bra.w	DisplaySprite
0000871A                            ; ===========================================================================
0000871A                            
0000871A                            loc_82D0:				; XREF: Obj1A_Display
0000871A 5328 0038                  		subq.b	#1,$38(a0)
0000871E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008722 43F8 D000                  		lea	($FFFFD000).w,a1
00008726 0829 0003 0022             		btst	#3,$22(a1)
0000872C 6700                       		beq.s	loc_82FC
0000872E 4A28 0038                  		tst.b	$38(a0)
00008732 6600                       		bne.s	locret_8308
00008734 08A9 0003 0022             		bclr	#3,$22(a1)
0000873A 08A9 0005 0022             		bclr	#5,$22(a1)
00008740 137C 0001 001D             		move.b	#1,$1D(a1)
00008746                            
00008746                            loc_82FC:
00008746 117C 0000 003A             		move.b	#0,$3A(a0)
0000874C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008752                            
00008752                            locret_8308:
00008752 4E75                       		rts	
00008754                            ; ===========================================================================
00008754                            
00008754                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008754 6100 0000                  		bsr.w	ObjectFall
00008758 6100 0000                  		bsr.w	DisplaySprite
0000875C 4A28 0001                  		tst.b	1(a0)
00008760 6A00                       		bpl.s	Obj1A_Delete
00008762 4E75                       		rts	
00008764                            ; ===========================================================================
00008764                            
00008764                            Obj1A_Delete:				; XREF: Obj1A_Index
00008764 6100 0000                  		bsr.w	DeleteObject
00008768 4E75                       		rts	
0000876A                            ; ===========================================================================
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            
0000876A                            Obj53:					; XREF: Obj_Index
0000876A 7000                       		moveq	#0,d0
0000876C 1028 0024                  		move.b	$24(a0),d0
00008770 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008774 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008778                            ; ===========================================================================
00008778 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000877C 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008780 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008784                            ; ===========================================================================
00008784                            
00008784                            Obj53_Main:				; XREF: Obj53_Index
00008784 5428 0024                  		addq.b	#2,$24(a0)
00008788 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008790 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008796 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000879C 6600                       		bne.s	Obj53_NotSLZ
0000879E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000087A4 5428 001A                  		addq.b	#2,$1A(a0)
000087A8                            
000087A8                            Obj53_NotSLZ:
000087A8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000087AE 6600                       		bne.s	Obj53_NotSBZ
000087B0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000087B6                            
000087B6                            Obj53_NotSBZ:
000087B6 0028 0004 0001             		ori.b	#4,1(a0)
000087BC 117C 0004 0018             		move.b	#4,$18(a0)
000087C2 117C 0007 0038             		move.b	#7,$38(a0)
000087C8 117C 0044 0019             		move.b	#$44,$19(a0)
000087CE                            
000087CE                            Obj53_ChkTouch:				; XREF: Obj53_Index
000087CE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000087D2 6700                       		beq.s	Obj53_Solid	; if not, branch
000087D4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000087D8 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000087DC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087E0                            
000087E0                            Obj53_Solid:
000087E0 323C 0020                  		move.w	#$20,d1
000087E4 6100 F0B8                  		bsr.w	PlatformObject
000087E8 4A28 0028                  		tst.b	$28(a0)
000087EC 6A00                       		bpl.s	Obj53_MarkAsGone
000087EE 0829 0003 0022             		btst	#3,$22(a1)
000087F4 6700                       		beq.s	Obj53_MarkAsGone
000087F6 08A8 0000 0001             		bclr	#0,1(a0)
000087FC 3029 0008                  		move.w	8(a1),d0
00008800 9068 0008                  		sub.w	8(a0),d0
00008804 6400                       		bcc.s	Obj53_MarkAsGone
00008806 08E8 0000 0001             		bset	#0,1(a0)
0000880C                            
0000880C                            Obj53_MarkAsGone:
0000880C 6000 0000                  		bra.w	MarkObjGone
00008810                            ; ===========================================================================
00008810                            
00008810                            Obj53_Touch:				; XREF: Obj53_Index
00008810 4A28 0038                  		tst.b	$38(a0)
00008814 6700 0000                  		beq.w	loc_8458
00008818 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000881E 5328 0038                  		subq.b	#1,$38(a0)
00008822                            
00008822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008822                            
00008822                            
00008822                            Obj53_WalkOff:				; XREF: Obj53_Index
00008822 323C 0020                  		move.w	#$20,d1
00008826 6100 F1EA                  		bsr.w	ExitPlatform
0000882A 3428 0008                  		move.w	8(a0),d2
0000882E 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008832 6000 0000                  		bra.w	MarkObjGone
00008836                            ; End of function Obj53_WalkOff
00008836                            
00008836                            ; ===========================================================================
00008836                            
00008836                            Obj53_Display:				; XREF: Obj53_Index
00008836 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000883A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000883C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008840 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008844 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008848 6000 0000                  		bra.w	DisplaySprite
0000884C                            ; ===========================================================================
0000884C                            
0000884C                            loc_8402:
0000884C 5328 0038                  		subq.b	#1,$38(a0)
00008850 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008854 43F8 D000                  		lea	($FFFFD000).w,a1
00008858 0829 0003 0022             		btst	#3,$22(a1)
0000885E 6700                       		beq.s	loc_842E
00008860 4A28 0038                  		tst.b	$38(a0)
00008864 6600                       		bne.s	locret_843A
00008866 08A9 0003 0022             		bclr	#3,$22(a1)
0000886C 08A9 0005 0022             		bclr	#5,$22(a1)
00008872 137C 0001 001D             		move.b	#1,$1D(a1)
00008878                            
00008878                            loc_842E:
00008878 117C 0000 003A             		move.b	#0,$3A(a0)
0000887E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008884                            
00008884                            locret_843A:
00008884 4E75                       		rts	
00008886                            ; ===========================================================================
00008886                            
00008886                            Obj53_TimeZero:				; XREF: Obj53_Display
00008886 6100 0000                  		bsr.w	ObjectFall
0000888A 6100 0000                  		bsr.w	DisplaySprite
0000888E 4A28 0001                  		tst.b	1(a0)
00008892 6A00                       		bpl.s	Obj53_Delete
00008894 4E75                       		rts	
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj53_Delete:				; XREF: Obj53_Index
00008896 6100 0000                  		bsr.w	DeleteObject
0000889A 4E75                       		rts	
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000889C 117C 0000 003A             		move.b	#0,$3A(a0)
000088A2                            
000088A2                            loc_8458:				; XREF: Obj53_Touch
000088A2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000088A8 0828 0000 0028             		btst	#0,$28(a0)
000088AE 6700                       		beq.s	loc_846C
000088B0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000088B6                            
000088B6                            loc_846C:
000088B6 7207                       		moveq	#7,d1
000088B8 5228 001A                  		addq.b	#1,$1A(a0)
000088BC 6000                       		bra.s	loc_8486
000088BE                            ; ===========================================================================
000088BE                            
000088BE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000088BE 117C 0000 003A             		move.b	#0,$3A(a0)
000088C4                            
000088C4                            loc_847A:				; XREF: Obj1A_Touch
000088C4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000088CA 7218                       		moveq	#$18,d1
000088CC 5428 001A                  		addq.b	#2,$1A(a0)
000088D0                            
000088D0                            loc_8486:				; XREF: Obj53_Collapse
000088D0 7000                       		moveq	#0,d0
000088D2 1028 001A                  		move.b	$1A(a0),d0
000088D6 D040                       		add.w	d0,d0
000088D8 2668 0004                  		movea.l	4(a0),a3
000088DC D6F3 0000                  		adda.w	(a3,d0.w),a3
000088E0 524B                       		addq.w	#1,a3
000088E2 08E8 0005 0001             		bset	#5,1(a0)
000088E8 1810                       		move.b	0(a0),d4
000088EA 1A28 0001                  		move.b	1(a0),d5
000088EE 2248                       		movea.l	a0,a1
000088F0 6000                       		bra.s	loc_84B2
000088F2                            ; ===========================================================================
000088F2                            
000088F2                            loc_84AA:
000088F2 6100 0000                  		bsr.w	SingleObjLoad
000088F6 6600                       		bne.s	loc_84F2
000088F8 5A4B                       		addq.w	#5,a3
000088FA                            
000088FA                            loc_84B2:
000088FA 137C 0006 0024             		move.b	#6,$24(a1)
00008900 1284                       		move.b	d4,0(a1)
00008902 234B 0004                  		move.l	a3,4(a1)
00008906 1345 0001                  		move.b	d5,1(a1)
0000890A 3368 0008 0008             		move.w	8(a0),8(a1)
00008910 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008916 3368 0002 0002             		move.w	2(a0),2(a1)
0000891C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008922 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008928 135C 0038                  		move.b	(a4)+,$38(a1)
0000892C B3C8                       		cmpa.l	a0,a1
0000892E 6400                       		bcc.s	loc_84EE
00008930 6100 0000                  		bsr.w	DisplaySprite2
00008934                            
00008934                            loc_84EE:
00008934 51C9 FFBC                  		dbf	d1,loc_84AA
00008938                            
00008938                            loc_84F2:
00008938 6100 0000                  		bsr.w	DisplaySprite
0000893C 303C 00B9                  		move.w	#$B9,d0
00008940 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008946                            ; ===========================================================================
00008946                            ; ---------------------------------------------------------------------------
00008946                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008946                            ; ---------------------------------------------------------------------------
00008946 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008956 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008960 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008968 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008970                            
00008970                            ; ---------------------------------------------------------------------------
00008970                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008970                            ; ---------------------------------------------------------------------------
00008970                            
00008970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008970                            
00008970                            
00008970                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008970 43F8 D000                  		lea	($FFFFD000).w,a1
00008974 0829 0003 0022             		btst	#3,$22(a1)
0000897A 6700                       		beq.s	locret_856E
0000897C 3029 0008                  		move.w	8(a1),d0
00008980 9068 0008                  		sub.w	8(a0),d0
00008984 D041                       		add.w	d1,d0
00008986 E248                       		lsr.w	#1,d0
00008988 0828 0000 0001             		btst	#0,1(a0)
0000898E 6700                       		beq.s	loc_854E
00008990 4640                       		not.w	d0
00008992 D041                       		add.w	d1,d0
00008994                            
00008994                            loc_854E:
00008994 7200                       		moveq	#0,d1
00008996 1232 0000                  		move.b	(a2,d0.w),d1
0000899A 3028 000C                  		move.w	$C(a0),d0
0000899E 9041                       		sub.w	d1,d0
000089A0 7200                       		moveq	#0,d1
000089A2 1229 0016                  		move.b	$16(a1),d1
000089A6 9041                       		sub.w	d1,d0
000089A8 3340 000C                  		move.w	d0,$C(a1)
000089AC 9468 0008                  		sub.w	8(a0),d2
000089B0 9569 0008                  		sub.w	d2,8(a1)
000089B4                            
000089B4                            locret_856E:
000089B4 4E75                       		rts	
000089B6                            ; End of function SlopeObject2
000089B6                            
000089B6                            ; ===========================================================================
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            ; Collision data for GHZ collapsing ledge
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            Obj1A_SlopeData:
000089B6                            		incbin	misc\ghzledge.bin
000089E6                            		even
000089E6                            
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            Map_obj1A:
000089E6                            	include "_maps\obj1A.asm"
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000089EA 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000089EE 10                         byte_85A8:	dc.b $10
000089EF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000089F4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000089F9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000089FE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A0D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A12 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A1C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008A21 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A26 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A2B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A30 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A35 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A3A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A3F 10                         byte_85F9:	dc.b $10
00008A40 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008A45 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A4A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A4F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A54 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A59 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A5E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A63 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A68 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A6D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008A72 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A77 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A7C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A81 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008A86 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A90 19                         byte_864A:	dc.b $19
00008A91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008A96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008A9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008AA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008AA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008AAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008AAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008AB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008AB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008ABE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008AC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008AC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008ACD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008AD2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008AD7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008ADC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008AE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008AEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008AF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008AFA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008AFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B0E 19                         byte_86C8:	dc.b $19
00008B0F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B14 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B19 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B1E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B23 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B28 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B2D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B32 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B37 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B3C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008B41 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B46 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B4B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B50 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B55 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B5A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008B5F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B64 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B69 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B6E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B73 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B78 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B7D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B82 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B87 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B8C                            		even
00008B8C                            		even
00008B8C                            
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            Map_obj53:
00008B8C                            	include "_maps\obj53.asm"
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008B90 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008B94 04                         byte_874E:	dc.b 4
00008B95 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008B9A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008B9F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BA4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008BA9 08                         byte_8763:	dc.b 8
00008BAA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BAF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008BB4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BB9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008BBE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008BC3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008BC8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008BCD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008BD2 04                         byte_878C:	dc.b 4
00008BD3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008BD8 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008BDD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BE2 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008BE7 08                         byte_87A1:	dc.b 8
00008BE8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BED F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008BF2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BF7 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008BFC 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C01 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C06 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C0B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C10                            		even
00008C10                            		even
00008C10                            
00008C10                            ; ===========================================================================
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            
00008C10                            Obj1C:					; XREF: Obj_Index
00008C10 7000                       		moveq	#0,d0
00008C12 1028 0024                  		move.b	$24(a0),d0
00008C16 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008C1A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008C1E                            ; ===========================================================================
00008C1E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008C20 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008C22                            ; ===========================================================================
00008C22                            
00008C22                            Obj1C_Main:				; XREF: Obj1C_Index
00008C22 5428 0024                  		addq.b	#2,$24(a0)
00008C26 7000                       		moveq	#0,d0
00008C28 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008C2C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008C30 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008C34 2159 0004                  		move.l	(a1)+,4(a0)
00008C38 3159 0002                  		move.w	(a1)+,2(a0)
00008C3C 0028 0004 0001             		ori.b	#4,1(a0)
00008C42 1159 001A                  		move.b	(a1)+,$1A(a0)
00008C46 1159 0019                  		move.b	(a1)+,$19(a0)
00008C4A 1159 0018                  		move.b	(a1)+,$18(a0)
00008C4E 1159 0020                  		move.b	(a1)+,$20(a0)
00008C52                            
00008C52                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008C52 3028 0008                  		move.w	8(a0),d0
00008C56 0240 FF80                  		andi.w	#$FF80,d0
00008C5A 3238 F700                  		move.w	($FFFFF700).w,d1
00008C5E 0441 0080                  		subi.w	#$80,d1
00008C62 0241 FF80                  		andi.w	#$FF80,d1
00008C66 9041                       		sub.w	d1,d0
00008C68 0C40 0280                  		cmpi.w	#$280,d0
00008C6C 6200 0000                  		bhi.w	DeleteObject
00008C70 6000 0000                  		bra.w	DisplaySprite
00008C74                            ; ===========================================================================
00008C74                            ; ---------------------------------------------------------------------------
00008C74                            ; Variables for	object $1C are stored in an array
00008C74                            ; ---------------------------------------------------------------------------
00008C74 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008C78 44D8                       		dc.w $44D8		; VRAM setting
00008C7A 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008C7E 0000 0000                  		dc.l Map_obj1C
00008C82 44D8                       		dc.w $44D8
00008C84 0008 0200                  		dc.b 0,	8, 2, 0
00008C88 0000 0000                  		dc.l Map_obj1C
00008C8C 44D8                       		dc.w $44D8
00008C8E 0008 0200                  		dc.b 0,	8, 2, 0
00008C92 0000 7D86                  		dc.l Map_obj11
00008C96 438E                       		dc.w $438E
00008C98 0110 0100                  		dc.b 1,	$10, 1,	0
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            Map_obj1C:
00008C9C                            	include "_maps\obj1C.asm"
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C 0000                       		dc.w byte_8858-Map_obj1C
00008C9E 01                         byte_8858:	dc.b 1
00008C9F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008CA4                            		even
00008CA4                            		even
00008CA4                            
00008CA4                            ; ===========================================================================
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            ; Object 1D - switch that activates when Sonic touches it
00008CA4                            ; (this	is not used anywhere in	the game)
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            
00008CA4                            Obj1D:					; XREF: Obj_Index
00008CA4 7000                       		moveq	#0,d0
00008CA6 1028 0024                  		move.b	$24(a0),d0
00008CAA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008CAE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008CB2                            ; ===========================================================================
00008CB2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008CB4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008CB6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            Obj1D_Main:				; XREF: Obj1D_Index
00008CB8 5428 0024                  		addq.b	#2,$24(a0)
00008CBC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008CC4 317C 4000 0002             		move.w	#$4000,2(a0)
00008CCA 117C 0004 0001             		move.b	#4,1(a0)
00008CD0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008CD6 117C 0010 0019             		move.b	#$10,$19(a0)
00008CDC 117C 0005 0018             		move.b	#5,$18(a0)
00008CE2                            
00008CE2                            Obj1D_Action:				; XREF: Obj1D_Index
00008CE2 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008CE8 323C 0010                  		move.w	#$10,d1
00008CEC 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008CF0 6700                       		beq.s	Obj1D_ChkDel
00008CF2 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008CF6 7001                       		moveq	#1,d0
00008CF8 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008CFC                            
00008CFC                            Obj1D_ChkDel:
00008CFC 6100 0000                  		bsr.w	DisplaySprite
00008D00 3028 0008                  		move.w	8(a0),d0
00008D04 0240 FF80                  		andi.w	#$FF80,d0
00008D08 3238 F700                  		move.w	($FFFFF700).w,d1
00008D0C 0441 0080                  		subi.w	#$80,d1
00008D10 0241 FF80                  		andi.w	#$FF80,d1
00008D14 9041                       		sub.w	d1,d0
00008D16 0C40 0280                  		cmpi.w	#$280,d0
00008D1A 6200 0000                  		bhi.w	Obj1D_Delete
00008D1E 4E75                       		rts	
00008D20                            ; ===========================================================================
00008D20                            
00008D20                            Obj1D_Delete:				; XREF: Obj1D_Index
00008D20 6100 0000                  		bsr.w	DeleteObject
00008D24 4E75                       		rts	
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            ; Subroutine to	check if Sonic touches the object
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            
00008D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D26                            
00008D26                            
00008D26                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008D26 43F8 D000                  		lea	($FFFFD000).w,a1
00008D2A 3029 0008                  		move.w	8(a1),d0
00008D2E 9068 0008                  		sub.w	8(a0),d0
00008D32 D041                       		add.w	d1,d0
00008D34 6B00                       		bmi.s	loc_8918
00008D36 D241                       		add.w	d1,d1
00008D38 B041                       		cmp.w	d1,d0
00008D3A 6400                       		bcc.s	loc_8918
00008D3C 3429 000C                  		move.w	$C(a1),d2
00008D40 1229 0016                  		move.b	$16(a1),d1
00008D44 4881                       		ext.w	d1
00008D46 D242                       		add.w	d2,d1
00008D48 3028 000C                  		move.w	$C(a0),d0
00008D4C 0440 0010                  		subi.w	#$10,d0
00008D50 9041                       		sub.w	d1,d0
00008D52 6200                       		bhi.s	loc_8918
00008D54 0C40 FFF0                  		cmpi.w	#-$10,d0
00008D58 6500                       		bcs.s	loc_8918
00008D5A 70FF                       		moveq	#-1,d0
00008D5C 4E75                       		rts	
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            loc_8918:
00008D5E 7000                       		moveq	#0,d0
00008D60 4E75                       		rts	
00008D62                            ; End of function Obj1D_ChkTouch
00008D62                            
00008D62                            ; ===========================================================================
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            Map_obj1D:
00008D62                            	include "_maps\obj1D.asm"
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62 0000                       		dc.w byte_891E-Map_obj1D
00008D64 04                         byte_891E:	dc.b 4
00008D65 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008D6A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008D6F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008D74 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008D7A 00                         		even
00008D7A 00                         		even
00008D7A                            
00008D7A                            ; ===========================================================================
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            ; Object 2A - doors (SBZ)
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            
00008D7A                            Obj2A:					; XREF: Obj_Index
00008D7A 7000                       		moveq	#0,d0
00008D7C 1028 0024                  		move.b	$24(a0),d0
00008D80 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008D84 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008D88                            ; ===========================================================================
00008D88 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008D8A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008D8C                            ; ===========================================================================
00008D8C                            
00008D8C                            Obj2A_Main:				; XREF: Obj2A_Index
00008D8C 5428 0024                  		addq.b	#2,$24(a0)
00008D90 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008D98 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008D9E 0028 0004 0001             		ori.b	#4,1(a0)
00008DA4 117C 0008 0019             		move.b	#8,$19(a0)
00008DAA 117C 0004 0018             		move.b	#4,$18(a0)
00008DB0                            
00008DB0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008DB0 323C 0040                  		move.w	#$40,d1
00008DB4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008DB8 3038 D008                  		move.w	($FFFFD008).w,d0
00008DBC D041                       		add.w	d1,d0
00008DBE B068 0008                  		cmp.w	8(a0),d0
00008DC2 6500                       		bcs.s	Obj2A_Animate
00008DC4 9041                       		sub.w	d1,d0
00008DC6 9041                       		sub.w	d1,d0
00008DC8 B068 0008                  		cmp.w	8(a0),d0
00008DCC 6400                       		bcc.s	Obj2A_Animate
00008DCE D041                       		add.w	d1,d0
00008DD0 B068 0008                  		cmp.w	8(a0),d0
00008DD4 6400                       		bcc.s	loc_899A
00008DD6 0828 0000 0022             		btst	#0,$22(a0)
00008DDC 6600                       		bne.s	Obj2A_Animate
00008DDE 6000                       		bra.s	Obj2A_Open
00008DE0                            ; ===========================================================================
00008DE0                            
00008DE0                            loc_899A:				; XREF: Obj2A_OpenShut
00008DE0 0828 0000 0022             		btst	#0,$22(a0)
00008DE6 6700                       		beq.s	Obj2A_Animate
00008DE8                            
00008DE8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008DE8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008DEE                            
00008DEE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008DEE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008DF4 6100 0000                  		bsr.w	AnimateSprite
00008DF8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008DFC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008DFE 323C 0011                  		move.w	#$11,d1
00008E02 343C 0020                  		move.w	#$20,d2
00008E06 3602                       		move.w	d2,d3
00008E08 5243                       		addq.w	#1,d3
00008E0A 3828 0008                  		move.w	8(a0),d4
00008E0E 6100 0000                  		bsr.w	SolidObject
00008E12                            
00008E12                            Obj2A_MarkAsUsed:
00008E12 6000 0000                  		bra.w	MarkObjGone
00008E16                            ; ===========================================================================
00008E16                            Ani_obj2A:
00008E16                            	include "_anim\obj2A.asm"
00008E16                            ; ---------------------------------------------------------------------------
00008E16                            ; Animation script - doors (SBZ)
00008E16                            ; ---------------------------------------------------------------------------
00008E16 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E18 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008E1A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008E26 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008E32                            		even
00008E32                            		even
00008E32                            
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            Map_obj2A:
00008E32                            	include "_maps\obj2A.asm"
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008E36 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008E3A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008E3E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008E42 0000                       		dc.w byte_8A56-Map_obj2A
00008E44 02                         byte_89FE:	dc.b 2
00008E45 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008E4A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008E4F 02                         byte_8A09:	dc.b 2
00008E50 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008E55 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008E5A 02                         byte_8A14:	dc.b 2
00008E5B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008E60 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008E65 02                         byte_8A1F:	dc.b 2
00008E66 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008E6B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008E70 02                         byte_8A2A:	dc.b 2
00008E71 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008E76 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008E7B 02                         byte_8A35:	dc.b 2
00008E7C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008E81 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008E86 02                         byte_8A40:	dc.b 2
00008E87 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008E8C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008E91 02                         byte_8A4B:	dc.b 2
00008E92 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008E97 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008E9C 02                         byte_8A56:	dc.b 2
00008E9D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008EA2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008EA8 00                         		even
00008EA8 00                         		even
00008EA8                            
00008EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EA8                            
00008EA8                            
00008EA8                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008EA8 6100 0000                  		bsr.w	Obj44_SolidWall2
00008EAC 6700                       		beq.s	loc_8AA8
00008EAE 6B00 0000                  		bmi.w	loc_8AC4
00008EB2 4A40                       		tst.w	d0
00008EB4 6700 0000                  		beq.w	loc_8A92
00008EB8 6B00                       		bmi.s	loc_8A7C
00008EBA 4A69 0010                  		tst.w	$10(a1)
00008EBE 6B00                       		bmi.s	loc_8A92
00008EC0 6000                       		bra.s	loc_8A82
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            loc_8A7C:
00008EC2 4A69 0010                  		tst.w	$10(a1)
00008EC6 6A00                       		bpl.s	loc_8A92
00008EC8                            
00008EC8                            loc_8A82:
00008EC8 9169 0008                  		sub.w	d0,8(a1)
00008ECC 337C 0000 0014             		move.w	#0,$14(a1)
00008ED2 337C 0000 0010             		move.w	#0,$10(a1)
00008ED8                            
00008ED8                            loc_8A92:
00008ED8 0829 0001 0022             		btst	#1,$22(a1)
00008EDE 6600                       		bne.s	loc_8AB6
00008EE0 08E9 0005 0022             		bset	#5,$22(a1)
00008EE6 08E8 0005 0022             		bset	#5,$22(a0)
00008EEC 4E75                       		rts	
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            loc_8AA8:
00008EEE 0828 0005 0022             		btst	#5,$22(a0)
00008EF4 6700                       		beq.s	locret_8AC2
00008EF6 337C 0001 001C             		move.w	#1,$1C(a1)
00008EFC                            
00008EFC                            loc_8AB6:
00008EFC 08A8 0005 0022             		bclr	#5,$22(a0)
00008F02 08A9 0005 0022             		bclr	#5,$22(a1)
00008F08                            
00008F08                            locret_8AC2:
00008F08 4E75                       		rts	
00008F0A                            ; ===========================================================================
00008F0A                            
00008F0A                            loc_8AC4:
00008F0A 4A69 0012                  		tst.w	$12(a1)
00008F0E 6A00                       		bpl.s	locret_8AD8
00008F10 4A43                       		tst.w	d3
00008F12 6A00                       		bpl.s	locret_8AD8
00008F14 9769 000C                  		sub.w	d3,$C(a1)
00008F18 337C 0000 0012             		move.w	#0,$12(a1)
00008F1E                            
00008F1E                            locret_8AD8:
00008F1E 4E75                       		rts	
00008F20                            ; End of function Obj44_SolidWall
00008F20                            
00008F20                            
00008F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F20                            
00008F20                            
00008F20                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008F20 43F8 D000                  		lea	($FFFFD000).w,a1
00008F24 3029 0008                  		move.w	8(a1),d0
00008F28 9068 0008                  		sub.w	8(a0),d0
00008F2C D041                       		add.w	d1,d0
00008F2E 6B00                       		bmi.s	loc_8B48
00008F30 3601                       		move.w	d1,d3
00008F32 D643                       		add.w	d3,d3
00008F34 B043                       		cmp.w	d3,d0
00008F36 6200                       		bhi.s	loc_8B48
00008F38 1629 0016                  		move.b	$16(a1),d3
00008F3C 4883                       		ext.w	d3
00008F3E D443                       		add.w	d3,d2
00008F40 3629 000C                  		move.w	$C(a1),d3
00008F44 9668 000C                  		sub.w	$C(a0),d3
00008F48 D642                       		add.w	d2,d3
00008F4A 6B00                       		bmi.s	loc_8B48
00008F4C 3802                       		move.w	d2,d4
00008F4E D844                       		add.w	d4,d4
00008F50 B644                       		cmp.w	d4,d3
00008F52 6400                       		bcc.s	loc_8B48
00008F54 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008F58 6B00                       		bmi.s	loc_8B48
00008F5A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008F60 6400                       		bcc.s	loc_8B48
00008F62 4A78 FE08                  		tst.w	($FFFFFE08).w
00008F66 6600                       		bne.s	loc_8B48
00008F68 3A00                       		move.w	d0,d5
00008F6A B240                       		cmp.w	d0,d1
00008F6C 6400                       		bcc.s	loc_8B30
00008F6E D241                       		add.w	d1,d1
00008F70 9041                       		sub.w	d1,d0
00008F72 3A00                       		move.w	d0,d5
00008F74 4445                       		neg.w	d5
00008F76                            
00008F76                            loc_8B30:
00008F76 3203                       		move.w	d3,d1
00008F78 B443                       		cmp.w	d3,d2
00008F7A 6400                       		bcc.s	loc_8B3C
00008F7C 9644                       		sub.w	d4,d3
00008F7E 3203                       		move.w	d3,d1
00008F80 4441                       		neg.w	d1
00008F82                            
00008F82                            loc_8B3C:
00008F82 BA41                       		cmp.w	d1,d5
00008F84 6200                       		bhi.s	loc_8B44
00008F86 7801                       		moveq	#1,d4
00008F88 4E75                       		rts	
00008F8A                            ; ===========================================================================
00008F8A                            
00008F8A                            loc_8B44:
00008F8A 78FF                       		moveq	#-1,d4
00008F8C 4E75                       		rts	
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            loc_8B48:
00008F8E 7800                       		moveq	#0,d4
00008F90 4E75                       		rts	
00008F92                            ; End of function Obj44_SolidWall2
00008F92                            
00008F92                            ; ===========================================================================
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            ; Object 1E - Ball Hog enemy (SBZ)
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            
00008F92                            Obj1E:					; XREF: Obj_Index
00008F92 7000                       		moveq	#0,d0
00008F94 1028 0024                  		move.b	$24(a0),d0
00008F98 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008F9C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008FA0                            ; ===========================================================================
00008FA0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008FA2 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008FA4                            ; ===========================================================================
00008FA4                            
00008FA4                            Obj1E_Main:				; XREF: Obj1E_Index
00008FA4 117C 0013 0016             		move.b	#$13,$16(a0)
00008FAA 117C 0008 0017             		move.b	#8,$17(a0)
00008FB0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008FB8 317C 2302 0002             		move.w	#$2302,2(a0)
00008FBE 117C 0004 0001             		move.b	#4,1(a0)
00008FC4 117C 0004 0018             		move.b	#4,$18(a0)
00008FCA 117C 0005 0020             		move.b	#5,$20(a0)
00008FD0 117C 000C 0019             		move.b	#$C,$19(a0)
00008FD6 6100 0000                  		bsr.w	ObjectFall
00008FDA 4EB9 0000 0000             		jsr	ObjHitFloor
00008FE0 4A41                       		tst.w	d1
00008FE2 6A00                       		bpl.s	locret_8BAC
00008FE4 D368 000C                  		add.w	d1,$C(a0)
00008FE8 317C 0000 0012             		move.w	#0,$12(a0)
00008FEE 5428 0024                  		addq.b	#2,$24(a0)
00008FF2                            
00008FF2                            locret_8BAC:
00008FF2 4E75                       		rts	
00008FF4                            ; ===========================================================================
00008FF4                            
00008FF4                            Obj1E_Action:				; XREF: Obj1E_Index
00008FF4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008FFA 6100 0000                  		bsr.w	AnimateSprite
00008FFE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009004 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009006 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000900A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000900C 6000                       		bra.s	Obj1E_MarkAsGone
0000900E                            ; ===========================================================================
0000900E                            
0000900E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000900E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009012                            
00009012                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009012 6000 0000                  		bra.w	MarkObjGone
00009016                            ; ===========================================================================
00009016                            
00009016                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009016 117C 0001 0032             		move.b	#1,$32(a0)
0000901C 6100 0000                  		bsr.w	SingleObjLoad
00009020 6600                       		bne.s	loc_8C1A
00009022 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009026 3368 0008 0008             		move.w	8(a0),8(a1)
0000902C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009032 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009038 337C 0000 0012             		move.w	#0,$12(a1)
0000903E 70FC                       		moveq	#-4,d0
00009040 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009046 6700                       		beq.s	loc_8C0A	; if not, branch
00009048 4440                       		neg.w	d0
0000904A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000904E                            
0000904E                            loc_8C0A:
0000904E D169 0008                  		add.w	d0,8(a1)
00009052 0669 000C 000C             		addi.w	#$C,$C(a1)
00009058 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000905E                            
0000905E                            loc_8C1A:
0000905E 60B2                       		bra.s	Obj1E_MarkAsGone
00009060                            ; ===========================================================================
00009060                            ; ---------------------------------------------------------------------------
00009060                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009060                            ; ---------------------------------------------------------------------------
00009060                            
00009060                            Obj20:					; XREF: Obj_Index
00009060 7000                       		moveq	#0,d0
00009062 1028 0024                  		move.b	$24(a0),d0
00009066 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000906A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000906E                            ; ===========================================================================
0000906E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009070 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009072                            ; ===========================================================================
00009072                            
00009072                            Obj20_Main:				; XREF: Obj20_Index
00009072 5428 0024                  		addq.b	#2,$24(a0)
00009076 117C 0007 0016             		move.b	#7,$16(a0)
0000907C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009084 317C 2302 0002             		move.w	#$2302,2(a0)
0000908A 117C 0004 0001             		move.b	#4,1(a0)
00009090 117C 0003 0018             		move.b	#3,$18(a0)
00009096 117C 0087 0020             		move.b	#$87,$20(a0)
0000909C 117C 0008 0019             		move.b	#8,$19(a0)
000090A2 7000                       		moveq	#0,d0
000090A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000090A8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000090AC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000090B0 117C 0004 001A             		move.b	#4,$1A(a0)
000090B6                            
000090B6                            Obj20_Bounce:				; XREF: Obj20_Index
000090B6 4EB9 0000 0000             		jsr	ObjectFall
000090BC 4A68 0012                  		tst.w	$12(a0)
000090C0 6B00                       		bmi.s	Obj20_ChkExplode
000090C2 4EB9 0000 0000             		jsr	ObjHitFloor
000090C8 4A41                       		tst.w	d1
000090CA 6A00                       		bpl.s	Obj20_ChkExplode
000090CC D368 000C                  		add.w	d1,$C(a0)
000090D0 317C FD00 0012             		move.w	#-$300,$12(a0)
000090D6 4A03                       		tst.b	d3
000090D8 6700                       		beq.s	Obj20_ChkExplode
000090DA 6B00                       		bmi.s	loc_8CA4
000090DC 4A68 0010                  		tst.w	$10(a0)
000090E0 6A00                       		bpl.s	Obj20_ChkExplode
000090E2 4468 0010                  		neg.w	$10(a0)
000090E6 6000                       		bra.s	Obj20_ChkExplode
000090E8                            ; ===========================================================================
000090E8                            
000090E8                            loc_8CA4:				; XREF: Obj20_Bounce
000090E8 4A68 0010                  		tst.w	$10(a0)
000090EC 6B00                       		bmi.s	Obj20_ChkExplode
000090EE 4468 0010                  		neg.w	$10(a0)
000090F2                            
000090F2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000090F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000090F6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000090F8 10BC 0024                  		move.b	#$24,0(a0)
000090FC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009100 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009106 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000910A                            ; ===========================================================================
0000910A                            
0000910A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000910A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000910E 6A00                       		bpl.s	Obj20_Display
00009110 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009116 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000911C                            
0000911C                            Obj20_Display:
0000911C 6100 0000                  		bsr.w	DisplaySprite
00009120 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009124 0640 00E0                  		addi.w	#$E0,d0
00009128 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000912C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            ; ---------------------------------------------------------------------------
00009132                            ; Object 24 - explosion	from a destroyed monitor
00009132                            ; ---------------------------------------------------------------------------
00009132                            
00009132                            Obj24:					; XREF: Obj_Index
00009132 7000                       		moveq	#0,d0
00009134 1028 0024                  		move.b	$24(a0),d0
00009138 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000913C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009140                            ; ===========================================================================
00009140 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009142 0000                       		dc.w Obj24_Animate-Obj24_Index
00009144                            ; ===========================================================================
00009144                            
00009144                            Obj24_Main:				; XREF: Obj24_Index
00009144 5428 0024                  		addq.b	#2,$24(a0)
00009148 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009150 317C 041C 0002             		move.w	#$41C,2(a0)
00009156 117C 0004 0001             		move.b	#4,1(a0)
0000915C 117C 0001 0018             		move.b	#1,$18(a0)
00009162 117C 0000 0020             		move.b	#0,$20(a0)
00009168 117C 000C 0019             		move.b	#$C,$19(a0)
0000916E 117C 0009 001E             		move.b	#9,$1E(a0)
00009174 117C 0000 001A             		move.b	#0,$1A(a0)
0000917A 303C 00A5                  		move.w	#$A5,d0
0000917E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
00009184                            
00009184                            Obj24_Animate:				; XREF: Obj24_Index
00009184 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009188 6A00                       		bpl.s	Obj24_Display
0000918A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009190 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009194 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000919A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000919E                            
0000919E                            Obj24_Display:
0000919E 6000 0000                  		bra.w	DisplaySprite
000091A2                            ; ===========================================================================
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            ; Object 27 - explosion	from a destroyed enemy
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            
000091A2                            Obj27:					; XREF: Obj_Index
000091A2 7000                       		moveq	#0,d0
000091A4 1028 0024                  		move.b	$24(a0),d0
000091A8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000091AC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000091B0                            ; ===========================================================================
000091B0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000091B2 0000                       		dc.w Obj27_Main-Obj27_Index
000091B4 0000                       		dc.w Obj27_Animate-Obj27_Index
000091B6                            ; ===========================================================================
000091B6                            
000091B6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000091B6 5428 0024                  		addq.b	#2,$24(a0)
000091BA 6100 0000                  		bsr.w	SingleObjLoad
000091BE 6600                       		bne.s	Obj27_Main
000091C0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000091C4 3368 0008 0008             		move.w	8(a0),8(a1)
000091CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091D0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000091D6                            
000091D6                            Obj27_Main:				; XREF: Obj27_Index
000091D6 5428 0024                  		addq.b	#2,$24(a0)
000091DA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000091E2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000091E8 117C 0004 0001             		move.b	#4,1(a0)
000091EE 117C 0001 0018             		move.b	#1,$18(a0)
000091F4 117C 0000 0020             		move.b	#0,$20(a0)
000091FA 117C 000C 0019             		move.b	#$C,$19(a0)
00009200                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009200 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009206 117C 0000 001A             		move.b	#0,$1A(a0)
0000920C 303C 00C1                  		move.w	#$C1,d0
00009210 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009216                            
00009216 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000921C 1028 0028                  		move.b	$28(a0),d0
00009220 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009226 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000922C                            
0000922C                            Obj27_Animate:				; XREF: Obj27_Index
0000922C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009230 6A00                       		bpl.s	Obj27_Display
00009232                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009232 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009238 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000923C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009242 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009246                            
00009246                            Obj27_Display:
00009246 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000924C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009252 6000 0000                  		bra.w	DisplaySprite
00009256                            ; ===========================================================================
00009256                            ; ---------------------------------------------------------------------------
00009256                            Obj27_ExplosionXYSpd:
00009256                            		; dc.w	-$350, -$300	; Left
00009256                            		; dc.w	-$200, -$450	; Near middle (left)
00009256                            		; dc.w	0, -$500	; Middle
00009256                            		; dc.w	$200, -$450	; Near middle (right)
00009256                            		; dc.w	$350, -$300	; Right
00009256                            
00009256 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000925A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000925E 0000 FA00                  		dc.w	0, -$600	; Middle
00009262 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009266 0150 FC00                  		dc.w	$150, -$400	; Right
0000926A                            
0000926A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009284                            ; ---------------------------------------------------------------------------
00009284                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009284                            ; ---------------------------------------------------------------------------
00009284                            
00009284                            Obj3F:					; XREF: Obj_Index
00009284 7000                       		moveq	#0,d0
00009286 1028 0024                  		move.b	$24(a0),d0
0000928A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000928E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009292                            ; ===========================================================================
00009292 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009294 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009296                            ; ===========================================================================
00009296                            
00009296                            Obj3F_Main:				; XREF: Obj3F_Index
00009296 5428 0024                  		addq.b	#2,$24(a0)
0000929A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000092A2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000092A8 117C 0004 0001             		move.b	#4,1(a0)
000092AE 117C 0001 0018             		move.b	#1,$18(a0)
000092B4 117C 0000 0020             		move.b	#0,$20(a0)
000092BA 117C 000C 0019             		move.b	#$C,$19(a0)
000092C0 117C 0007 001E             		move.b	#7,$1E(a0)
000092C6 117C 0000 001A             		move.b	#0,$1A(a0)
000092CC 303C 00C4                  		move.w	#$C4,d0
000092D0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000092D6                            ; ===========================================================================
000092D6                            Ani_obj1E:
000092D6                            	include "_anim\obj1E.asm"
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            ; Animation script - doors (SBZ)
000092D6                            ; ---------------------------------------------------------------------------
000092D6 0000                       		dc.w byte_8E4A-Ani_obj1E
000092D8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000092F0 00                         		even
000092F0 00                         		even
000092F0                            
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            Map_obj1E:
000092F0                            	include "_maps\obj1E.asm"
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000092F4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000092F8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000092FC 02                         byte_8E6E:	dc.b 2
000092FD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009302 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009307 02                         byte_8E79:	dc.b 2
00009308 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000930D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009312 02                         byte_8E84:	dc.b 2
00009313 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009318 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000931D 02                         byte_8E8F:	dc.b 2
0000931E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009323 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009328 01                         byte_8E9A:	dc.b 1
00009329 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000932E 01                         byte_8EA0:	dc.b 1
0000932F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009334                            		even
00009334                            		even
00009334                            
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334                            Map_obj24:
00009334                            	include "_maps\obj24.asm"
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009338 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000933C 01                         byte_8EAE:	dc.b 1
0000933D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009342 01                         byte_8EB4:	dc.b 1
00009343 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009348 01                         byte_8EBA:	dc.b 1
00009349 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000934E 01                         byte_8EC0:	dc.b 1
0000934F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009354                            		even
00009354                            		even
00009354                            
00009354                            ; ---------------------------------------------------------------------------
00009354                            ; Sprite mappings - explosion
00009354                            ; ---------------------------------------------------------------------------
00009354 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009358 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000935C 0000                       		dc.w byte_8EF7-Map_obj27
0000935E 01                         byte_8ED0:	dc.b 1
0000935F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009364 01                         byte_8ED6:	dc.b 1
00009365 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000936A 01                         byte_8EDC:	dc.b 1
0000936B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009370 04                         byte_8EE2:	dc.b 4
00009371 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009376 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000937B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009380 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009385 04                         byte_8EF7:	dc.b 4
00009386 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000938B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009390 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009395 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000939A                            		even
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000939A                            ; ---------------------------------------------------------------------------
0000939A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000939C 0000                       		dc.w byte_8F16-Map_obj3F
0000939E 0000                       		dc.w byte_8F1C-Map_obj3F
000093A0 FFD6                       		dc.w byte_8EE2-Map_obj3F
000093A2 FFEB                       		dc.w byte_8EF7-Map_obj3F
000093A4 01                         byte_8F16:	dc.b 1
000093A5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000093AA 01                         byte_8F1C:	dc.b 1
000093AB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000093B0                            		even
000093B0                            ; ===========================================================================
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            ; Object 28 - animals
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            
000093B0                            Obj28:					; XREF: Obj_Index
000093B0 7000                       		moveq	#0,d0
000093B2 1028 0024                  		move.b	$24(a0),d0
000093B6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000093BA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000093BE                            ; ===========================================================================
000093BE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000093C2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093C6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000093CA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093CE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000093D2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000093D6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000093DA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093DE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093E2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000093E6 0000                       		dc.w loc_92D6-Obj28_Index
000093E8                            
000093E8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000093F4                            
000093F4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000093F8 0000 0000                  		dc.l Map_obj28
000093FC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009400 0000 0000                  		dc.l Map_obj28a		; mappings address
00009404 FE80 FD00                  		dc.w $FE80, $FD00
00009408 0000 0000                  		dc.l Map_obj28
0000940C FEC0 FE80                  		dc.w $FEC0, $FE80
00009410 0000 0000                  		dc.l Map_obj28a
00009414 FE40 FD00                  		dc.w $FE40, $FD00
00009418 0000 0000                  		dc.l Map_obj28b
0000941C FD00 FC00                  		dc.w $FD00, $FC00
00009420 0000 0000                  		dc.l Map_obj28a
00009424 FD80 FC80                  		dc.w $FD80, $FC80
00009428 0000 0000                  		dc.l Map_obj28b
0000942C                            
0000942C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000943C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000944C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009458                            
00009458 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000946C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009480 0000 0000                  		dc.l Map_obj28b
00009484                            
00009484 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009496 0565 05B3                  		dc.w $565, $5B3
0000949A                            ; ===========================================================================
0000949A                            
0000949A                            Obj28_Ending:				; XREF: Obj28_Index
0000949A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000949E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000094A2 7000                       		moveq	#0,d0
000094A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094A8 D040                       		add.w	d0,d0		; multiply d0 by 2
000094AA 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000094AE 0440 0014                  		subi.w	#$14,d0
000094B2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000094B8 D040                       		add.w	d0,d0
000094BA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000094C0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000094C4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000094CA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000094D0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000094D6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000094DC 117C 000C 0016             		move.b	#$C,$16(a0)
000094E2 117C 0004 0001             		move.b	#4,1(a0)
000094E8 08E8 0000 0001             		bset	#0,1(a0)
000094EE 117C 0006 0018             		move.b	#6,$18(a0)
000094F4 117C 0008 0019             		move.b	#8,$19(a0)
000094FA 117C 0007 001E             		move.b	#7,$1E(a0)
00009500 6000 0000                  		bra.w	DisplaySprite
00009504                            ; ===========================================================================
00009504                            
00009504                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009504 5428 0024                  		addq.b	#2,$24(a0)
00009508 6100 96F2                  		bsr.w	RandomNumber
0000950C 0240 0001                  		andi.w	#1,d0
00009510 7200                       		moveq	#0,d1
00009512 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009516 D241                       		add.w	d1,d1
00009518 D240                       		add.w	d0,d1
0000951A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000951E 1031 1000                  		move.b	(a1,d1.w),d0
00009522 1140 0030                  		move.b	d0,$30(a0)
00009526 E748                       		lsl.w	#3,d0
00009528 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000952C D2C0                       		adda.w	d0,a1
0000952E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009532 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009536 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000953A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009540 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009546 6700                       		beq.s	loc_90C0	; if yes, branch
00009548 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000954E                            
0000954E                            loc_90C0:
0000954E 117C 000C 0016             		move.b	#$C,$16(a0)
00009554 117C 0004 0001             		move.b	#4,1(a0)
0000955A 08E8 0000 0001             		bset	#0,1(a0)
00009560 117C 0006 0018             		move.b	#6,$18(a0)
00009566 117C 0008 0019             		move.b	#8,$19(a0)
0000956C 117C 0007 001E             		move.b	#7,$1E(a0)
00009572 117C 0002 001A             		move.b	#2,$1A(a0)
00009578 317C FC00 0012             		move.w	#-$400,$12(a0)
0000957E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009582 6600                       		bne.s	loc_911C
00009584 6100 0000                  		bsr.w	SingleObjLoad
00009588 6600                       		bne.s	Obj28_Display
0000958A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000958E 3368 0008 0008             		move.w	8(a0),8(a1)
00009594 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000959A 3028 003E                  		move.w	$3E(a0),d0
0000959E E248                       		lsr.w	#1,d0
000095A0 1340 001A                  		move.b	d0,$1A(a1)
000095A4                            
000095A4                            Obj28_Display:
000095A4 6000 0000                  		bra.w	DisplaySprite
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            loc_911C:
000095A8 117C 0012 0024             		move.b	#$12,$24(a0)
000095AE 4268 0010                  		clr.w	$10(a0)
000095B2 6000 0000                  		bra.w	DisplaySprite
000095B6                            ; ===========================================================================
000095B6                            
000095B6                            loc_912A:				; XREF: Obj28_Index
000095B6 4A28 0001                  		tst.b	1(a0)
000095BA 6A00 0000                  		bpl.w	DeleteObject
000095BE 6100 0000                  		bsr.w	ObjectFall
000095C2 4A68 0012                  		tst.w	$12(a0)
000095C6 6B00                       		bmi.s	loc_9180
000095C8 4EB9 0000 0000             		jsr	ObjHitFloor
000095CE 4A41                       		tst.w	d1
000095D0 6A00                       		bpl.s	loc_9180
000095D2 D368 000C                  		add.w	d1,$C(a0)
000095D6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000095DC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095E2 117C 0001 001A             		move.b	#1,$1A(a0)
000095E8 1028 0030                  		move.b	$30(a0),d0
000095EC D000                       		add.b	d0,d0
000095EE 5800                       		addq.b	#4,d0
000095F0 1140 0024                  		move.b	d0,$24(a0)
000095F4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000095F8 6700                       		beq.s	loc_9180
000095FA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009600 6700                       		beq.s	loc_9180
00009602 4468 0010                  		neg.w	$10(a0)
00009606 0868 0000 0001             		bchg	#0,1(a0)
0000960C                            
0000960C                            loc_9180:
0000960C 6000 0000                  		bra.w	DisplaySprite
00009610                            ; ===========================================================================
00009610                            
00009610                            loc_9184:				; XREF: Obj28_Index
00009610 6100 0000                  		bsr.w	ObjectFall
00009614 117C 0001 001A             		move.b	#1,$1A(a0)
0000961A 4A68 0012                  		tst.w	$12(a0)
0000961E 6B00                       		bmi.s	loc_91AE
00009620 117C 0000 001A             		move.b	#0,$1A(a0)
00009626 4EB9 0000 0000             		jsr	ObjHitFloor
0000962C 4A41                       		tst.w	d1
0000962E 6A00                       		bpl.s	loc_91AE
00009630 D368 000C                  		add.w	d1,$C(a0)
00009634 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000963A                            
0000963A                            loc_91AE:
0000963A 4A28 0028                  		tst.b	$28(a0)
0000963E 6600                       		bne.s	loc_9224
00009640 4A28 0001                  		tst.b	1(a0)
00009644 6A00 0000                  		bpl.w	DeleteObject
00009648 6000 0000                  		bra.w	DisplaySprite
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            loc_91C0:				; XREF: Obj28_Index
0000964C 6100 0000                  		bsr.w	SpeedToPos
00009650 0668 0018 0012             		addi.w	#$18,$12(a0)
00009656 4A68 0012                  		tst.w	$12(a0)
0000965A 6B00                       		bmi.s	loc_91FC
0000965C 4EB9 0000 0000             		jsr	ObjHitFloor
00009662 4A41                       		tst.w	d1
00009664 6A00                       		bpl.s	loc_91FC
00009666 D368 000C                  		add.w	d1,$C(a0)
0000966A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009670 4A28 0028                  		tst.b	$28(a0)
00009674 6700                       		beq.s	loc_91FC
00009676 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000967C 6700                       		beq.s	loc_91FC
0000967E 4468 0010                  		neg.w	$10(a0)
00009682 0868 0000 0001             		bchg	#0,1(a0)
00009688                            
00009688                            loc_91FC:
00009688 5328 001E                  		subq.b	#1,$1E(a0)
0000968C 6A00                       		bpl.s	loc_9212
0000968E 117C 0001 001E             		move.b	#1,$1E(a0)
00009694 5228 001A                  		addq.b	#1,$1A(a0)
00009698 0228 0001 001A             		andi.b	#1,$1A(a0)
0000969E                            
0000969E                            loc_9212:
0000969E 4A28 0028                  		tst.b	$28(a0)
000096A2 6600                       		bne.s	loc_9224
000096A4 4A28 0001                  		tst.b	1(a0)
000096A8 6A00 0000                  		bpl.w	DeleteObject
000096AC 6000 0000                  		bra.w	DisplaySprite
000096B0                            ; ===========================================================================
000096B0                            
000096B0                            loc_9224:				; XREF: Obj28_Index
000096B0 3028 0008                  		move.w	8(a0),d0
000096B4 9078 D008                  		sub.w	($FFFFD008).w,d0
000096B8 6500                       		bcs.s	loc_923C
000096BA 0440 0180                  		subi.w	#$180,d0
000096BE 6A00                       		bpl.s	loc_923C
000096C0 4A28 0001                  		tst.b	1(a0)
000096C4 6A00 0000                  		bpl.w	DeleteObject
000096C8                            
000096C8                            loc_923C:
000096C8 6000 0000                  		bra.w	DisplaySprite
000096CC                            ; ===========================================================================
000096CC                            
000096CC                            loc_9240:				; XREF: Obj28_Index
000096CC 4A28 0001                  		tst.b	1(a0)
000096D0 6A00 0000                  		bpl.w	DeleteObject
000096D4 5368 0036                  		subq.w	#1,$36(a0)
000096D8 6600 0000                  		bne.w	loc_925C
000096DC 117C 0002 0024             		move.b	#2,$24(a0)
000096E2 117C 0003 0018             		move.b	#3,$18(a0)
000096E8                            
000096E8                            loc_925C:
000096E8 6000 0000                  		bra.w	DisplaySprite
000096EC                            ; ===========================================================================
000096EC                            
000096EC                            loc_9260:				; XREF: Obj28_Index
000096EC 6100 0000                  		bsr.w	sub_9404
000096F0 6400                       		bcc.s	loc_927C
000096F2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000096F8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096FE 117C 000E 0024             		move.b	#$E,$24(a0)
00009704 6000 FF46                  		bra.w	loc_91C0
00009708                            ; ===========================================================================
00009708                            
00009708                            loc_927C:
00009708 6000 FFA6                  		bra.w	loc_9224
0000970C                            ; ===========================================================================
0000970C                            
0000970C                            loc_9280:				; XREF: Obj28_Index
0000970C 6100 0000                  		bsr.w	sub_9404
00009710 6A00                       		bpl.s	loc_92B6
00009712 4268 0010                  		clr.w	$10(a0)
00009716 4268 0032                  		clr.w	$32(a0)
0000971A 6100 0000                  		bsr.w	SpeedToPos
0000971E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009724 6100 0000                  		bsr.w	loc_93C4
00009728 6100 0000                  		bsr.w	loc_93EC
0000972C 5328 001E                  		subq.b	#1,$1E(a0)
00009730 6A00                       		bpl.s	loc_92B6
00009732 117C 0001 001E             		move.b	#1,$1E(a0)
00009738 5228 001A                  		addq.b	#1,$1A(a0)
0000973C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009742                            
00009742                            loc_92B6:
00009742 6000 FF6C                  		bra.w	loc_9224
00009746                            ; ===========================================================================
00009746                            
00009746                            loc_92BA:				; XREF: Obj28_Index
00009746 6100 0000                  		bsr.w	sub_9404
0000974A 6A00                       		bpl.s	loc_9310
0000974C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009752 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009758 117C 0004 0024             		move.b	#4,$24(a0)
0000975E 6000 FEB0                  		bra.w	loc_9184
00009762                            ; ===========================================================================
00009762                            
00009762                            loc_92D6:				; XREF: Obj28_Index
00009762 6100 0000                  		bsr.w	ObjectFall
00009766 117C 0001 001A             		move.b	#1,$1A(a0)
0000976C 4A68 0012                  		tst.w	$12(a0)
00009770 6B00                       		bmi.s	loc_9310
00009772 117C 0000 001A             		move.b	#0,$1A(a0)
00009778 4EB9 0000 0000             		jsr	ObjHitFloor
0000977E 4A41                       		tst.w	d1
00009780 6A00                       		bpl.s	loc_9310
00009782 4628 0029                  		not.b	$29(a0)
00009786 6600                       		bne.s	loc_9306
00009788 4468 0010                  		neg.w	$10(a0)
0000978C 0868 0000 0001             		bchg	#0,1(a0)
00009792                            
00009792                            loc_9306:
00009792 D368 000C                  		add.w	d1,$C(a0)
00009796 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000979C                            
0000979C                            loc_9310:
0000979C 6000 FF12                  		bra.w	loc_9224
000097A0                            ; ===========================================================================
000097A0                            
000097A0                            loc_9314:				; XREF: Obj28_Index
000097A0 6100 0000                  		bsr.w	sub_9404
000097A4 6A00                       		bpl.s	loc_932E
000097A6 4268 0010                  		clr.w	$10(a0)
000097AA 4268 0032                  		clr.w	$32(a0)
000097AE 6100 0000                  		bsr.w	ObjectFall
000097B2 6100 0000                  		bsr.w	loc_93C4
000097B6 6100 0000                  		bsr.w	loc_93EC
000097BA                            
000097BA                            loc_932E:
000097BA 6000 FEF4                  		bra.w	loc_9224
000097BE                            ; ===========================================================================
000097BE                            
000097BE                            loc_9332:				; XREF: Obj28_Index
000097BE 6100 0000                  		bsr.w	sub_9404
000097C2 6A00                       		bpl.s	loc_936C
000097C4 6100 0000                  		bsr.w	ObjectFall
000097C8 117C 0001 001A             		move.b	#1,$1A(a0)
000097CE 4A68 0012                  		tst.w	$12(a0)
000097D2 6B00                       		bmi.s	loc_936C
000097D4 117C 0000 001A             		move.b	#0,$1A(a0)
000097DA 4EB9 0000 0000             		jsr	ObjHitFloor
000097E0 4A41                       		tst.w	d1
000097E2 6A00                       		bpl.s	loc_936C
000097E4 4468 0010                  		neg.w	$10(a0)
000097E8 0868 0000 0001             		bchg	#0,1(a0)
000097EE D368 000C                  		add.w	d1,$C(a0)
000097F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097F8                            
000097F8                            loc_936C:
000097F8 6000 FEB6                  		bra.w	loc_9224
000097FC                            ; ===========================================================================
000097FC                            
000097FC                            loc_9370:				; XREF: Obj28_Index
000097FC 6100 0000                  		bsr.w	sub_9404
00009800 6A00                       		bpl.s	loc_93C0
00009802 6100 0000                  		bsr.w	SpeedToPos
00009806 0668 0018 0012             		addi.w	#$18,$12(a0)
0000980C 4A68 0012                  		tst.w	$12(a0)
00009810 6B00                       		bmi.s	loc_93AA
00009812 4EB9 0000 0000             		jsr	ObjHitFloor
00009818 4A41                       		tst.w	d1
0000981A 6A00                       		bpl.s	loc_93AA
0000981C 4628 0029                  		not.b	$29(a0)
00009820 6600                       		bne.s	loc_93A0
00009822 4468 0010                  		neg.w	$10(a0)
00009826 0868 0000 0001             		bchg	#0,1(a0)
0000982C                            
0000982C                            loc_93A0:
0000982C D368 000C                  		add.w	d1,$C(a0)
00009830 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009836                            
00009836                            loc_93AA:
00009836 5328 001E                  		subq.b	#1,$1E(a0)
0000983A 6A00                       		bpl.s	loc_93C0
0000983C 117C 0001 001E             		move.b	#1,$1E(a0)
00009842 5228 001A                  		addq.b	#1,$1A(a0)
00009846 0228 0001 001A             		andi.b	#1,$1A(a0)
0000984C                            
0000984C                            loc_93C0:
0000984C 6000 FE62                  		bra.w	loc_9224
00009850                            ; ===========================================================================
00009850                            
00009850                            loc_93C4:
00009850 117C 0001 001A             		move.b	#1,$1A(a0)
00009856 4A68 0012                  		tst.w	$12(a0)
0000985A 6B00                       		bmi.s	locret_93EA
0000985C 117C 0000 001A             		move.b	#0,$1A(a0)
00009862 4EB9 0000 0000             		jsr	ObjHitFloor
00009868 4A41                       		tst.w	d1
0000986A 6A00                       		bpl.s	locret_93EA
0000986C D368 000C                  		add.w	d1,$C(a0)
00009870 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009876                            
00009876                            locret_93EA:
00009876 4E75                       		rts	
00009878                            ; ===========================================================================
00009878                            
00009878                            loc_93EC:
00009878 08E8 0000 0001             		bset	#0,1(a0)
0000987E 3028 0008                  		move.w	8(a0),d0
00009882 9078 D008                  		sub.w	($FFFFD008).w,d0
00009886 6400                       		bcc.s	locret_9402
00009888 08A8 0000 0001             		bclr	#0,1(a0)
0000988E                            
0000988E                            locret_9402:
0000988E 4E75                       		rts	
00009890                            
00009890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009890                            
00009890                            
00009890                            sub_9404:
00009890 3038 D008                  		move.w	($FFFFD008).w,d0
00009894 9068 0008                  		sub.w	8(a0),d0
00009898 0440 00B8                  		subi.w	#$B8,d0
0000989C 4E75                       		rts	
0000989E                            ; End of function sub_9404
0000989E                            
0000989E                            ; ===========================================================================
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            ; Object 29 - points that appear when you destroy something
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            
0000989E                            Obj29:					; XREF: Obj_Index
0000989E 7000                       		moveq	#0,d0
000098A0 1028 0024                  		move.b	$24(a0),d0
000098A4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000098A8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000098AC 6000 0000                  		bra.w	DisplaySprite
000098B0                            ; ===========================================================================
000098B0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000098B2 0000                       		dc.w Obj29_Slower-Obj29_Index
000098B4                            ; ===========================================================================
000098B4                            
000098B4                            Obj29_Main:				; XREF: Obj29_Index
000098B4 5428 0024                  		addq.b	#2,$24(a0)
000098B8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000098C0 317C 2797 0002             		move.w	#$2797,2(a0)
000098C6 117C 0004 0001             		move.b	#4,1(a0)
000098CC 117C 0001 0018             		move.b	#1,$18(a0)
000098D2 117C 0008 0019             		move.b	#8,$19(a0)
000098D8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000098DE                            
000098DE                            Obj29_Slower:				; XREF: Obj29_Index
000098DE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000098E2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000098E6 6100 0000                  		bsr.w	SpeedToPos
000098EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000098F0 4E75                       		rts	
000098F2                            ; ===========================================================================
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            Map_obj28:
000098F2                            	include "_maps\obj28.asm"
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2 0000                       		dc.w byte_9472-Map_obj28
000098F4 0000                       		dc.w byte_9478-Map_obj28
000098F6 0000                       		dc.w byte_946C-Map_obj28
000098F8 01                         byte_946C:	dc.b 1
000098F9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000098FE 01                         byte_9472:	dc.b 1
000098FF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009904 01                         byte_9478:	dc.b 1
00009905 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000990A                            		even
0000990A                            		even
0000990A                            
0000990A                            Map_obj28a:
0000990A                            	include "_maps\obj28a.asm"
0000990A                            ; ---------------------------------------------------------------------------
0000990A                            ; Sprite mappings - animals
0000990A                            ; ---------------------------------------------------------------------------
0000990A 0000                       		dc.w byte_948A-Map_obj28a
0000990C 0000                       		dc.w byte_9490-Map_obj28a
0000990E 0000                       		dc.w byte_9484-Map_obj28a
00009910 01                         byte_9484:	dc.b 1
00009911 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009916 01                         byte_948A:	dc.b 1
00009917 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000991C 01                         byte_9490:	dc.b 1
0000991D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009922                            		even
00009922                            		even
00009922                            
00009922                            Map_obj28b:
00009922                            	include "_maps\obj28b.asm"
00009922                            ; ---------------------------------------------------------------------------
00009922                            ; Sprite mappings - animals
00009922                            ; ---------------------------------------------------------------------------
00009922 0000                       		dc.w byte_94A2-Map_obj28b
00009924 0000                       		dc.w byte_94A8-Map_obj28b
00009926 0000                       		dc.w byte_949C-Map_obj28b
00009928 01                         byte_949C:	dc.b 1
00009929 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000992E 01                         byte_94A2:	dc.b 1
0000992F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009934 01                         byte_94A8:	dc.b 1
00009935 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000993A                            		even
0000993A                            		even
0000993A                            
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            Map_obj29:
0000993A                            	include "_maps\obj29.asm"
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000993E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009942 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009946 0000                       		dc.w byte_94E5-Map_obj29
00009948 01                         byte_94BC:	dc.b 1
00009949 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000994E 01                         byte_94C2:	dc.b 1
0000994F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009954 01                         byte_94C8:	dc.b 1
00009955 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000995A 01                         byte_94CE:	dc.b 1
0000995B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009960 01                         byte_94D4:	dc.b 1
00009961 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009966 02                         byte_94DA:	dc.b 2
00009967 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000996C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009971 02                         byte_94E5:	dc.b 2
00009972 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009977 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000997C                            		even
0000997C                            		even
0000997C                            
0000997C                            ; ===========================================================================
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            
0000997C                            Obj1F:					; XREF: Obj_Index
0000997C 7000                       		moveq	#0,d0
0000997E 1028 0024                  		move.b	$24(a0),d0
00009982 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009986 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000998A                            ; ===========================================================================
0000998A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000998C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000998E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009990 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009992 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009994                            ; ===========================================================================
00009994                            
00009994                            Obj1F_Main:				; XREF: Obj1F_Index
00009994 117C 0010 0016             		move.b	#$10,$16(a0)
0000999A 117C 0008 0017             		move.b	#8,$17(a0)
000099A0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000099A8 317C 0400 0002             		move.w	#$400,2(a0)
000099AE 117C 0004 0001             		move.b	#4,1(a0)
000099B4 117C 0003 0018             		move.b	#3,$18(a0)
000099BA 117C 0006 0020             		move.b	#6,$20(a0)
000099C0 117C 0015 0019             		move.b	#$15,$19(a0)
000099C6 6100 0000                  		bsr.w	ObjectFall
000099CA 4EB9 0000 0000             		jsr	ObjHitFloor
000099D0 4A41                       		tst.w	d1
000099D2 6A00                       		bpl.s	locret_955A
000099D4 D368 000C                  		add.w	d1,$C(a0)
000099D8 1143 0026                  		move.b	d3,$26(a0)
000099DC 317C 0000 0012             		move.w	#0,$12(a0)
000099E2 5428 0024                  		addq.b	#2,$24(a0)
000099E6                            
000099E6                            locret_955A:
000099E6 4E75                       		rts	
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            Obj1F_Action:				; XREF: Obj1F_Index
000099E8 7000                       		moveq	#0,d0
000099EA 1028 0025                  		move.b	$25(a0),d0
000099EE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000099F2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000099F6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000099FC 6100 0000                  		bsr.w	AnimateSprite
00009A00 6000 0000                  		bra.w	MarkObjGone
00009A04                            ; ===========================================================================
00009A04 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A06 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A08                            ; ===========================================================================
00009A08                            
00009A08                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A08 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A0C 6A00                       		bpl.s	locret_95B6
00009A0E 4A28 0001                  		tst.b	1(a0)
00009A12 6A00                       		bpl.s	Obj1F_Move
00009A14 0868 0001 0032             		bchg	#1,$32(a0)
00009A1A 6600                       		bne.s	Obj1F_MakeFire
00009A1C                            
00009A1C                            Obj1F_Move:
00009A1C 5428 0025                  		addq.b	#2,$25(a0)
00009A20 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009A26 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009A2C 6100 0000                  		bsr.w	Obj1F_SetAni
00009A30 5600                       		addq.b	#3,d0
00009A32 1140 001C                  		move.b	d0,$1C(a0)
00009A36 0868 0000 0022             		bchg	#0,$22(a0)
00009A3C 6600                       		bne.s	locret_95B6
00009A3E 4468 0010                  		neg.w	$10(a0)		; change direction
00009A42                            
00009A42                            locret_95B6:
00009A42 4E75                       		rts	
00009A44                            ; ===========================================================================
00009A44                            
00009A44                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009A44 317C 003B 0030             		move.w	#$3B,$30(a0)
00009A4A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009A50 6100 0000                  		bsr.w	SingleObjLoad
00009A54 6600                       		bne.s	Obj1F_MakeFire2
00009A56 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009A5A 137C 0006 0024             		move.b	#6,$24(a1)
00009A60 3368 0008 0008             		move.w	8(a0),8(a1)
00009A66 0469 0010 0008             		subi.w	#$10,8(a1)
00009A6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A72 337C FF00 0010             		move.w	#-$100,$10(a1)
00009A78                            
00009A78                            Obj1F_MakeFire2:
00009A78 6100 0000                  		bsr.w	SingleObjLoad
00009A7C 6600                       		bne.s	locret_9618
00009A7E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009A82 137C 0006 0024             		move.b	#6,$24(a1)
00009A88 3368 0008 0008             		move.w	8(a0),8(a1)
00009A8E 0669 0010 0008             		addi.w	#$10,8(a1)
00009A94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A9A 337C 0100 0010             		move.w	#$100,$10(a1)
00009AA0                            
00009AA0                            locret_9618:
00009AA0 4E75                       		rts	
00009AA2                            ; ===========================================================================
00009AA2                            
00009AA2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009AA2 5368 0030                  		subq.w	#1,$30(a0)
00009AA6 6B00                       		bmi.s	loc_966E
00009AA8 6100 0000                  		bsr.w	SpeedToPos
00009AAC 0868 0000 0032             		bchg	#0,$32(a0)
00009AB2 6600                       		bne.s	loc_9654
00009AB4 3628 0008                  		move.w	8(a0),d3
00009AB8 0643 0010                  		addi.w	#$10,d3
00009ABC 0828 0000 0022             		btst	#0,$22(a0)
00009AC2 6700                       		beq.s	loc_9640
00009AC4 0443 0020                  		subi.w	#$20,d3
00009AC8                            
00009AC8                            loc_9640:
00009AC8 4EB9 0000 0000             		jsr	ObjHitFloor2
00009ACE 0C41 FFF8                  		cmpi.w	#-8,d1
00009AD2 6D00                       		blt.s	loc_966E
00009AD4 0C41 000C                  		cmpi.w	#$C,d1
00009AD8 6C00                       		bge.s	loc_966E
00009ADA 4E75                       		rts	
00009ADC                            ; ===========================================================================
00009ADC                            
00009ADC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009ADC 4EB9 0000 0000             		jsr	ObjHitFloor
00009AE2 D368 000C                  		add.w	d1,$C(a0)
00009AE6 1143 0026                  		move.b	d3,$26(a0)
00009AEA 6100 0000                  		bsr.w	Obj1F_SetAni
00009AEE 5600                       		addq.b	#3,d0
00009AF0 1140 001C                  		move.b	d0,$1C(a0)
00009AF4 4E75                       		rts	
00009AF6                            ; ===========================================================================
00009AF6                            
00009AF6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009AF6 5528 0025                  		subq.b	#2,$25(a0)
00009AFA 317C 003B 0030             		move.w	#59,$30(a0)
00009B00 317C 0000 0010             		move.w	#0,$10(a0)
00009B06 6100 0000                  		bsr.w	Obj1F_SetAni
00009B0A 1140 001C                  		move.b	d0,$1C(a0)
00009B0E 4E75                       		rts	
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            
00009B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B10                            
00009B10                            
00009B10                            Obj1F_SetAni:				; XREF: loc_966E
00009B10 7000                       		moveq	#0,d0
00009B12 1628 0026                  		move.b	$26(a0),d3
00009B16 6B00                       		bmi.s	loc_96A4
00009B18 0C03 0006                  		cmpi.b	#6,d3
00009B1C 6500                       		bcs.s	locret_96A2
00009B1E 7001                       		moveq	#1,d0
00009B20 0828 0000 0022             		btst	#0,$22(a0)
00009B26 6600                       		bne.s	locret_96A2
00009B28 7002                       		moveq	#2,d0
00009B2A                            
00009B2A                            locret_96A2:
00009B2A 4E75                       		rts	
00009B2C                            ; ===========================================================================
00009B2C                            
00009B2C                            loc_96A4:				; XREF: Obj1F_SetAni
00009B2C 0C03 00FA                  		cmpi.b	#-6,d3
00009B30 6200                       		bhi.s	locret_96B6
00009B32 7002                       		moveq	#2,d0
00009B34 0828 0000 0022             		btst	#0,$22(a0)
00009B3A 6600                       		bne.s	locret_96B6
00009B3C 7001                       		moveq	#1,d0
00009B3E                            
00009B3E                            locret_96B6:
00009B3E 4E75                       		rts	
00009B40                            ; End of function Obj1F_SetAni
00009B40                            
00009B40                            ; ===========================================================================
00009B40                            
00009B40                            Obj1F_Delete:				; XREF: Obj1F_Index
00009B40 6100 0000                  		bsr.w	DeleteObject
00009B44 4E75                       		rts	
00009B46                            ; ===========================================================================
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            ; Sub-object - missile that the	Crabmeat throws
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            
00009B46                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009B46 5428 0024                  		addq.b	#2,$24(a0)
00009B4A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B52 317C 0400 0002             		move.w	#$400,2(a0)
00009B58 117C 0004 0001             		move.b	#4,1(a0)
00009B5E 117C 0003 0018             		move.b	#3,$18(a0)
00009B64 117C 0087 0020             		move.b	#$87,$20(a0)
00009B6A 117C 0008 0019             		move.b	#8,$19(a0)
00009B70 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B76 117C 0007 001C             		move.b	#7,$1C(a0)
00009B7C                            
00009B7C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009B7C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009B82 6100 0000                  		bsr.w	AnimateSprite
00009B86 6100 0000                  		bsr.w	ObjectFall
00009B8A 6100 0000                  		bsr.w	DisplaySprite
00009B8E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009B92 0640 00E0                  		addi.w	#$E0,d0
00009B96 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009B9A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009B9C 4E75                       		rts	
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            Obj1F_Delete2:
00009B9E 6000 0000                  		bra.w	DeleteObject
00009BA2                            ; ===========================================================================
00009BA2                            Ani_obj1F:
00009BA2                            	include "_anim\obj1F.asm"
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2                            ; Animation script - Crabmeat enemy
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009BA8 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009BAE 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009BB2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009BB6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009BBA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009BBE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009BC4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009BCA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009BD0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009BD4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009BD8                            		even
00009BD8                            		even
00009BD8                            
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            Map_obj1F:
00009BD8                            	include "_maps\obj1F.asm"
00009BD8                            Map_1514:
00009BD8 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009BDA 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009BDC 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009BDE 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009BE0 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009BE2 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009BE4 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009BE6 03                         Map_1514_E: 	dc.b $3
00009BE7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BEC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BF1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009BF6 03                         Map_1514_1E: 	dc.b $3
00009BF7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BFC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C01 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C06 03                         Map_1514_2E: 	dc.b $3
00009C07 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C0C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C11 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C16 03                         Map_1514_3E: 	dc.b $3
00009C17 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C1C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C21 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C26 03                         Map_1514_4E: 	dc.b $3
00009C27 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C2C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C31 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C36 01                         Map_1514_5E: 	dc.b $1
00009C37 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009C3C 01                         Map_1514_64: 	dc.b $1
00009C3D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009C42                            	even
00009C42                            	even
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            
00009C42                            Obj22:					; XREF: Obj_Index
00009C42 7000                       		moveq	#0,d0
00009C44 1028 0024                  		move.b	$24(a0),d0
00009C48 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009C4C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009C50                            ; ===========================================================================
00009C50 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009C52 0000                       		dc.w Obj22_Action-Obj22_Index
00009C54 0000                       		dc.w Obj22_Delete-Obj22_Index
00009C56                            ; ===========================================================================
00009C56                            
00009C56                            Obj22_Main:				; XREF: Obj22_Index
00009C56 5428 0024                  		addq.b	#2,$24(a0)
00009C5A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009C62 317C 0444 0002             		move.w	#$444,2(a0)
00009C68 117C 0004 0001             		move.b	#4,1(a0)
00009C6E 117C 0003 0018             		move.b	#3,$18(a0)
00009C74 117C 0008 0020             		move.b	#8,$20(a0)
00009C7A 117C 0018 0019             		move.b	#$18,$19(a0)
00009C80                            
00009C80                            Obj22_Action:				; XREF: Obj22_Index
00009C80 7000                       		moveq	#0,d0
00009C82 1028 0025                  		move.b	$25(a0),d0
00009C86 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009C8A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009C8E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009C94 6100 0000                  		bsr.w	AnimateSprite
00009C98 6000 0000                  		bra.w	MarkObjGone
00009C9C                            ; ===========================================================================
00009C9C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009C9E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj22_Move:				; XREF: Obj22_Index2
00009CA0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009CA4 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009CA6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009CAC 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009CAE 5428 0025                  		addq.b	#2,$25(a0)
00009CB2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009CB8 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009CBE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009CC4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009CCA 6600                       		bne.s	locret_986C	; if not, branch
00009CCC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009CD0                            
00009CD0                            locret_986C:
00009CD0 4E75                       		rts	
00009CD2                            ; ===========================================================================
00009CD2                            
00009CD2                            Obj22_Fire:				; XREF: Obj22_Move
00009CD2 6100 0000                  		bsr.w	SingleObjLoad
00009CD6 6600                       		bne.s	locret_98D0
00009CD8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009CDC 3368 0008 0008             		move.w	8(a0),8(a1)
00009CE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CE8 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009CEE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009CF4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009CFA 303C 0018                  		move.w	#$18,d0
00009CFE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D04 6600                       		bne.s	loc_98AA	; if not, branch
00009D06 4440                       		neg.w	d0
00009D08 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D0C                            
00009D0C                            loc_98AA:
00009D0C D169 0008                  		add.w	d0,8(a1)
00009D10 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D16 337C 000E 0032             		move.w	#$E,$32(a1)
00009D1C 2348 003C                  		move.l	a0,$3C(a1)
00009D20 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009D26 317C 003B 0032             		move.w	#$3B,$32(a0)
00009D2C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009D32                            
00009D32                            locret_98D0:
00009D32 4E75                       		rts	
00009D34                            ; ===========================================================================
00009D34                            
00009D34                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009D34 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D38 6B00                       		bmi.s	Obj22_ChgDir
00009D3A 6100 0000                  		bsr.w	SpeedToPos
00009D3E 4A28 0034                  		tst.b	$34(a0)
00009D42 6600                       		bne.s	locret_992A
00009D44 3038 D008                  		move.w	($FFFFD008).w,d0
00009D48 9068 0008                  		sub.w	8(a0),d0
00009D4C 6A00                       		bpl.s	Obj22_SetNrSonic
00009D4E 4440                       		neg.w	d0
00009D50                            
00009D50                            Obj22_SetNrSonic:
00009D50 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009D54 6400                       		bcc.s	locret_992A	; if not, branch
00009D56 4A28 0001                  		tst.b	1(a0)
00009D5A 6A00                       		bpl.s	locret_992A
00009D5C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009D62 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009D68 6000                       		bra.s	Obj22_Stop
00009D6A                            ; ===========================================================================
00009D6A                            
00009D6A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009D6A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009D70 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009D76 317C 003B 0032             		move.w	#59,$32(a0)
00009D7C                            
00009D7C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009D7C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009D80 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009D86 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009D8C                            
00009D8C                            locret_992A:
00009D8C 4E75                       		rts	
00009D8E                            ; ===========================================================================
00009D8E                            
00009D8E                            Obj22_Delete:				; XREF: Obj22_Index
00009D8E 6100 0000                  		bsr.w	DeleteObject
00009D92 4E75                       		rts	
00009D94                            ; ===========================================================================
00009D94                            ; ---------------------------------------------------------------------------
00009D94                            ; Object 23 - missile that Buzz	Bomber throws
00009D94                            ; ---------------------------------------------------------------------------
00009D94                            
00009D94                            Obj23:					; XREF: Obj_Index
00009D94 7000                       		moveq	#0,d0
00009D96 1028 0024                  		move.b	$24(a0),d0
00009D9A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009D9E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009DA2                            ; ===========================================================================
00009DA2 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009DA4 0000                       		dc.w Obj23_Animate-Obj23_Index
00009DA6 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009DA8 0000                       		dc.w Obj23_Delete-Obj23_Index
00009DAA 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009DAC                            ; ===========================================================================
00009DAC                            
00009DAC                            Obj23_Main:				; XREF: Obj23_Index
00009DAC 5368 0032                  		subq.w	#1,$32(a0)
00009DB0 6A00                       		bpl.s	Obj23_ChkCancel
00009DB2 5428 0024                  		addq.b	#2,$24(a0)
00009DB6 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009DBE 317C 2444 0002             		move.w	#$2444,2(a0)
00009DC4 117C 0004 0001             		move.b	#4,1(a0)
00009DCA 117C 0003 0018             		move.b	#3,$18(a0)
00009DD0 117C 0008 0019             		move.b	#8,$19(a0)
00009DD6 0228 0003 0022             		andi.b	#3,$22(a0)
00009DDC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009DE0 6700                       		beq.s	Obj23_Animate	; if not, branch
00009DE2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009DE8 117C 0087 0020             		move.b	#$87,$20(a0)
00009DEE 117C 0001 001C             		move.b	#1,$1C(a0)
00009DF4 6000                       		bra.s	Obj23_Animate2
00009DF6                            ; ===========================================================================
00009DF6                            
00009DF6                            Obj23_Animate:				; XREF: Obj23_Index
00009DF6 6100                       		bsr.s	Obj23_ChkCancel
00009DF8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009DFE 6100 0000                  		bsr.w	AnimateSprite
00009E02 6000 0000                  		bra.w	DisplaySprite
00009E06                            ; ---------------------------------------------------------------------------
00009E06                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E06                            ; destroyed, and if it has, then cancel	the missile
00009E06                            ; ---------------------------------------------------------------------------
00009E06                            
00009E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E06                            
00009E06                            
00009E06                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E06 2268 003C                  		movea.l	$3C(a0),a1
00009E0A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E0E 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E10 4E75                       		rts	
00009E12                            ; End of function Obj23_ChkCancel
00009E12                            
00009E12                            ; ===========================================================================
00009E12                            
00009E12                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E12 0828 0007 0022             		btst	#7,$22(a0)
00009E18 6600                       		bne.s	Obj23_Explode
00009E1A 117C 0087 0020             		move.b	#$87,$20(a0)
00009E20 117C 0001 001C             		move.b	#1,$1C(a0)
00009E26 6100 0000                  		bsr.w	SpeedToPos
00009E2A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E30 6100 0000                  		bsr.w	AnimateSprite
00009E34 6100 0000                  		bsr.w	DisplaySprite
00009E38 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E3C 0640 00E0                  		addi.w	#$E0,d0
00009E40 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E44 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009E46 4E75                       		rts	
00009E48                            ; ===========================================================================
00009E48                            
00009E48                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009E48 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009E4C 117C 0000 0024             		move.b	#0,$24(a0)
00009E52 6000 F2DE                  		bra.w	Obj24
00009E56                            ; ===========================================================================
00009E56                            
00009E56                            Obj23_Delete:				; XREF: Obj23_Index
00009E56 6100 0000                  		bsr.w	DeleteObject
00009E5A 4E75                       		rts	
00009E5C                            ; ===========================================================================
00009E5C                            
00009E5C                            Obj23_FromNewt:				; XREF: Obj23_Index
00009E5C 4A28 0001                  		tst.b	1(a0)
00009E60 6AF4                       		bpl.s	Obj23_Delete
00009E62 6100 0000                  		bsr.w	SpeedToPos
00009E66                            
00009E66                            Obj23_Animate2:				; XREF: Obj23_Main
00009E66 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E6C 6100 0000                  		bsr.w	AnimateSprite
00009E70 6100 0000                  		bsr.w	DisplaySprite
00009E74 4E75                       		rts	
00009E76                            ; ===========================================================================
00009E76                            Ani_obj22:
00009E76                            	include "_anim\obj22.asm"
00009E76                            ; ---------------------------------------------------------------------------
00009E76                            ; Animation script - Buzz Bomber enemy
00009E76                            ; ---------------------------------------------------------------------------
00009E76 0000                       		dc.w byte_9A1E-Ani_obj22
00009E78 0000                       		dc.w byte_9A22-Ani_obj22
00009E7A 0000                       		dc.w byte_9A26-Ani_obj22
00009E7C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009E80 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009E84 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009E88                            		even
00009E88                            		even
00009E88                            
00009E88                            Ani_obj23:
00009E88                            	include "_anim\obj23.asm"
00009E88                            ; ---------------------------------------------------------------------------
00009E88                            ; Animation script - missile that Buzz Bomber throws
00009E88                            ; ---------------------------------------------------------------------------
00009E88 0000                       		dc.w byte_9A2E-Ani_obj23
00009E8A 0000                       		dc.w byte_9A32-Ani_obj23
00009E8C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009E90 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009E94                            		even
00009E94                            		even
00009E94                            
00009E94                            ; ---------------------------------------------------------------------------
00009E94                            ; Sprite mappings - Buzz Bomber	enemy
00009E94                            ; ---------------------------------------------------------------------------
00009E94                            Map_obj22:
00009E94                            	include "_maps\obj22.asm"
00009E94                            Map_e97a:
00009E94 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009E96 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009E98 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009E9A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009E9C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009E9E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009EA0 06                         Map_e97a_C: 	dc.b $6
00009EA1 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EA6 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EAB 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EB0 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EB5 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EBA F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009EBF 06                         Map_e97a_2B: 	dc.b $6
00009EC0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EC5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009ECA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009ECF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009ED4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009ED9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009EDE 07                         Map_e97a_4A: 	dc.b $7
00009EDF 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009EE4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EE9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EEE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EF3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EF8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EFD F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F02 07                         Map_e97a_6E: 	dc.b $7
00009F03 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F08 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F0D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F12 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F17 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F1C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F21 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F26 06                         Map_e97a_92: 	dc.b $6
00009F27 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F2C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F31 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F36 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F3B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F40 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F45 04                         Map_e97a_B1: 	dc.b $4
00009F46 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F4B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F50 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F55 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F5A                            	even
00009F5A                            	even
00009F5A                            
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Sprite mappings - missile that Buzz Bomber throws
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            Map_obj23:
00009F5A                            	include "_maps\obj23.asm"
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Sprite mappings - missile that Buzz Bomber throws
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009F5E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009F62 01                         byte_9B0E:	dc.b 1
00009F63 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009F68 01                         byte_9B14:	dc.b 1
00009F69 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009F6E 01                         byte_9B1A:	dc.b 1
00009F6F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009F74 01                         byte_9B20:	dc.b 1
00009F75 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009F7A                            		even
00009F7A                            		even
00009F7A                            
00009F7A                            ; ===========================================================================
00009F7A                            ; ---------------------------------------------------------------------------
00009F7A                            ; Object 25 - rings
00009F7A                            ; ---------------------------------------------------------------------------
00009F7A                            
00009F7A                            Obj25:					; XREF: Obj_Index
00009F7A 7000                       		moveq	#0,d0
00009F7C 1028 0024                  		move.b	$24(a0),d0
00009F80 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009F84 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009F88                            ; ===========================================================================
00009F88 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009F8A 0000                       		dc.w Obj25_Animate-Obj25_Index
00009F8C 0000                       		dc.w Obj25_Collect-Obj25_Index
00009F8E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009F90 0000                       		dc.w Obj25_Delete-Obj25_Index
00009F92                            ; ---------------------------------------------------------------------------
00009F92                            ; Distances between rings (format: horizontal, vertical)
00009F92                            ; ---------------------------------------------------------------------------
00009F92 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009F94 1800                       		dc.b $18, 0		; horizontal normal
00009F96 2000                       		dc.b $20, 0		; horizontal wide
00009F98 0010                       		dc.b 0,	$10		; vertical tight
00009F9A 0018                       		dc.b 0,	$18		; vertical normal
00009F9C 0020                       		dc.b 0,	$20		; vertical wide
00009F9E 1010                       		dc.b $10, $10		; diagonal
00009FA0 1818                       		dc.b $18, $18
00009FA2 2020                       		dc.b $20, $20
00009FA4 F010                       		dc.b $F0, $10
00009FA6 E818                       		dc.b $E8, $18
00009FA8 E020                       		dc.b $E0, $20
00009FAA 1008                       		dc.b $10, 8
00009FAC 1810                       		dc.b $18, $10
00009FAE F008                       		dc.b $F0, 8
00009FB0 E810                       		dc.b $E8, $10
00009FB2                            ; ===========================================================================
00009FB2                            
00009FB2                            Obj25_Main:				; XREF: Obj25_Index
00009FB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009FB6 7000                       		moveq	#0,d0
00009FB8 1028 0023                  		move.b	$23(a0),d0
00009FBC 45F2 0002                  		lea	2(a2,d0.w),a2
00009FC0 1812                       		move.b	(a2),d4
00009FC2 1228 0028                  		move.b	$28(a0),d1
00009FC6 1001                       		move.b	d1,d0
00009FC8 0241 0007                  		andi.w	#7,d1
00009FCC 0C41 0007                  		cmpi.w	#7,d1
00009FD0 6600                       		bne.s	loc_9B80
00009FD2 7206                       		moveq	#6,d1
00009FD4                            
00009FD4                            loc_9B80:
00009FD4 4841                       		swap	d1
00009FD6 323C 0000                  		move.w	#0,d1
00009FDA E808                       		lsr.b	#4,d0
00009FDC D040                       		add.w	d0,d0
00009FDE 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009FE2 4885                       		ext.w	d5
00009FE4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009FE8 4886                       		ext.w	d6
00009FEA 2248                       		movea.l	a0,a1
00009FEC 3428 0008                  		move.w	8(a0),d2
00009FF0 3628 000C                  		move.w	$C(a0),d3
00009FF4 E20C                       		lsr.b	#1,d4
00009FF6 6500                       		bcs.s	loc_9C02
00009FF8 0892 0007                  		bclr	#7,(a2)
00009FFC 6000                       		bra.s	loc_9BBA
00009FFE                            ; ===========================================================================
00009FFE                            
00009FFE                            Obj25_MakeRings:
00009FFE 4841                       		swap	d1
0000A000 E20C                       		lsr.b	#1,d4
0000A002 6500                       		bcs.s	loc_9C02
0000A004 0892 0007                  		bclr	#7,(a2)
0000A008 6100 0000                  		bsr.w	SingleObjLoad
0000A00C 6600                       		bne.s	loc_9C0E
0000A00E                            
0000A00E                            loc_9BBA:				; XREF: Obj25_Main
0000A00E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A012 5429 0024                  		addq.b	#2,$24(a1)
0000A016 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A01A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A020 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A024 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A02C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A032 137C 0004 0001             		move.b	#4,1(a1)
0000A038 137C 0002 0018             		move.b	#2,$18(a1)
0000A03E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A044 137C 0008 0019             		move.b	#8,$19(a1)
0000A04A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A050 1341 0034                  		move.b	d1,$34(a1)
0000A054                            
0000A054                            loc_9C02:
0000A054 5241                       		addq.w	#1,d1
0000A056 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A058 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A05A 4841                       		swap	d1
0000A05C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A060                            
0000A060                            loc_9C0E:
0000A060 0812 0000                  		btst	#0,(a2)
0000A064 6600 0000                  		bne.w	DeleteObject
0000A068                            
0000A068                            Obj25_Animate:				; XREF: Obj25_Index
0000A068 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A06E 6100 0000                  		bsr.w	DisplaySprite
0000A072 3028 0032                  		move.w	$32(a0),d0
0000A076 0240 FF80                  		andi.w	#$FF80,d0
0000A07A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A07E 0441 0080                  		subi.w	#$80,d1
0000A082 0241 FF80                  		andi.w	#$FF80,d1
0000A086 9041                       		sub.w	d1,d0
0000A088 0C40 0280                  		cmpi.w	#$280,d0
0000A08C 6200                       		bhi.s	Obj25_Delete
0000A08E 4E75                       		rts	
0000A090                            ; ===========================================================================
0000A090                            
0000A090                            Obj25_Collect:				; XREF: Obj25_Index
0000A090 5428 0024                  		addq.b	#2,$24(a0)
0000A094 117C 0000 0020             		move.b	#0,$20(a0)
0000A09A 117C 0001 0018             		move.b	#1,$18(a0)
0000A0A0 6100 0000                  		bsr.w	CollectRing
0000A0A4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A0A8 7000                       		moveq	#0,d0
0000A0AA 1028 0023                  		move.b	$23(a0),d0
0000A0AE 1228 0034                  		move.b	$34(a0),d1
0000A0B2 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A0B6                            
0000A0B6                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A0B6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A0BC 6100 0000                  		bsr.w	AnimateSprite
0000A0C0 6000 0000                  		bra.w	DisplaySprite
0000A0C4                            ; ===========================================================================
0000A0C4                            
0000A0C4                            Obj25_Delete:				; XREF: Obj25_Index
0000A0C4 6000 0000                  		bra.w	DeleteObject
0000A0C8                            
0000A0C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0C8                            
0000A0C8                            
0000A0C8                            CollectRing:				; XREF: Obj25_Collect
0000A0C8 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A0CC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A0D2 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A0D6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A0DC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0DE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A0E4 6700                       		beq.s	loc_9CA4
0000A0E6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A0EC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0EE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A0F4 6600                       		bne.s	Obj25_PlaySnd
0000A0F6                            
0000A0F6                            loc_9CA4:
0000A0F6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A0FA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A0FE 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A102                            
0000A102                            Obj25_PlaySnd:
0000A102 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A108                            ; End of function CollectRing
0000A108                            
0000A108                            ; ===========================================================================
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            
0000A108                            Obj37:					; XREF: Obj_Index
0000A108 7000                       		moveq	#0,d0
0000A10A 1028 0024                  		move.b	$24(a0),d0
0000A10E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A112 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A116                            ; ===========================================================================
0000A116 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A118 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A11A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A11C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A11E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A120                            ; ===========================================================================
0000A120                            
0000A120                            Obj37_CountRings:			; XREF: Obj37_Index
0000A120 2248                       		movea.l	a0,a1
0000A122 7A00                       		moveq	#0,d5
0000A124 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A128 7020                       		moveq	#32,d0
0000A12A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A12C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A12E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A130                            
0000A130                            loc_9CDE:
0000A130 5345                       		subq.w	#1,d5
0000A132 383C 0288                  		move.w	#$288,d4
0000A136 6000                       		bra.s	Obj37_MakeRings
0000A138                            ; ===========================================================================
0000A138                            
0000A138                            Obj37_Loop:
0000A138 6100 0000                  		bsr.w	SingleObjLoad
0000A13C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A140                            
0000A140                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A140 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A144 5429 0024                  		addq.b	#2,$24(a1)
0000A148 137C 0008 0016             		move.b	#8,$16(a1)
0000A14E 137C 0008 0017             		move.b	#8,$17(a1)
0000A154 3368 0008 0008             		move.w	8(a0),8(a1)
0000A15A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A160 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A168 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A16E 137C 0004 0001             		move.b	#4,1(a1)
0000A174 137C 0003 0018             		move.b	#3,$18(a1)
0000A17A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A180 137C 0008 0019             		move.b	#8,$19(a1)
0000A186 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A18C 4A44                       		tst.w	d4
0000A18E 6B00                       		bmi.s	loc_9D62
0000A190 3004                       		move.w	d4,d0
0000A192 6100 8A8E                  		bsr.w	CalcSine
0000A196 3404                       		move.w	d4,d2
0000A198 E04A                       		lsr.w	#8,d2
0000A19A E560                       		asl.w	d2,d0
0000A19C E561                       		asl.w	d2,d1
0000A19E 3400                       		move.w	d0,d2
0000A1A0 3601                       		move.w	d1,d3
0000A1A2 0604 0010                  		addi.b	#$10,d4
0000A1A6 6400                       		bcc.s	loc_9D62
0000A1A8 0444 0080                  		subi.w	#$80,d4
0000A1AC 6400                       		bcc.s	loc_9D62
0000A1AE 383C 0288                  		move.w	#$288,d4
0000A1B2                            
0000A1B2                            loc_9D62:
0000A1B2 3342 0010                  		move.w	d2,$10(a1)
0000A1B6 3343 0012                  		move.w	d3,$12(a1)
0000A1BA 4442                       		neg.w	d2
0000A1BC 4444                       		neg.w	d4
0000A1BE 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A1C2                            
0000A1C2                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A1C2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A1C8 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A1CE 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A1D4 303C 00C6                  		move.w	#$C6,d0
0000A1D8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A1DE                            
0000A1DE                            Obj37_Bounce:				; XREF: Obj37_Index
0000A1DE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A1E4 6100 0000                  		bsr.w	SpeedToPos
0000A1E8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A1EE 6B00                       		bmi.s	Obj37_ChkDel
0000A1F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A1F4 D007                       		add.b	d7,d0
0000A1F6 0200 0003                  		andi.b	#3,d0
0000A1FA 6600                       		bne.s	Obj37_ChkDel
0000A1FC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A202 4A41                       		tst.w	d1
0000A204 6A00                       		bpl.s	Obj37_ChkDel
0000A206 D368 000C                  		add.w	d1,$C(a0)
0000A20A 3028 0012                  		move.w	$12(a0),d0
0000A20E E440                       		asr.w	#2,d0
0000A210 9168 0012                  		sub.w	d0,$12(a0)
0000A214 4468 0012                  		neg.w	$12(a0)
0000A218                            
0000A218                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A218 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A21C 6700                       		beq.s	Obj37_Delete
0000A21E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A222 0640 00E0                  		addi.w	#$E0,d0
0000A226 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A22A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A22C 6000 0000                  		bra.w	DisplaySprite
0000A230                            ; ===========================================================================
0000A230                            
0000A230                            Obj37_Collect:				; XREF: Obj37_Index
0000A230 5428 0024                  		addq.b	#2,$24(a0)
0000A234 117C 0000 0020             		move.b	#0,$20(a0)
0000A23A 117C 0001 0018             		move.b	#1,$18(a0)
0000A240 6100 FE86                  		bsr.w	CollectRing
0000A244                            
0000A244                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A244 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A24A 6100 0000                  		bsr.w	AnimateSprite
0000A24E 6000 0000                  		bra.w	DisplaySprite
0000A252                            ; ===========================================================================
0000A252                            
0000A252                            Obj37_Delete:				; XREF: Obj37_Index
0000A252 6000 0000                  		bra.w	DeleteObject
0000A256                            ; ===========================================================================
0000A256                            ; ---------------------------------------------------------------------------
0000A256                            ; Object 4B - giant ring for entry to special stage
0000A256                            ; ---------------------------------------------------------------------------
0000A256                            
0000A256                            Obj4B:					; XREF: Obj_Index
0000A256 7000                       		moveq	#0,d0
0000A258 1028 0024                  		move.b	$24(a0),d0
0000A25C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A260 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A264                            ; ===========================================================================
0000A264 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A266 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A268 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A26A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A26C                            ; ===========================================================================
0000A26C                            
0000A26C                            Obj4B_Main:				; XREF: Obj4B_Index
0000A26C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A274 317C 2400 0002             		move.w	#$2400,2(a0)
0000A27A 0028 0004 0001             		ori.b	#4,1(a0)
0000A280 117C 0040 0019             		move.b	#$40,$19(a0)
0000A286 4A28 0001                  		tst.b	1(a0)
0000A28A 6A00                       		bpl.s	Obj4B_Animate
0000A28C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A292 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A296 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A29C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A29E 4E75                       		rts	
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A2A0 5428 0024                  		addq.b	#2,$24(a0)
0000A2A4 117C 0002 0018             		move.b	#2,$18(a0)
0000A2AA 117C 0052 0020             		move.b	#$52,$20(a0)
0000A2B0 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A2B6                            
0000A2B6                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A2B6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A2BC 3028 0008                  		move.w	8(a0),d0
0000A2C0 0240 FF80                  		andi.w	#$FF80,d0
0000A2C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2C8 0441 0080                  		subi.w	#$80,d1
0000A2CC 0241 FF80                  		andi.w	#$FF80,d1
0000A2D0 9041                       		sub.w	d1,d0
0000A2D2 0C40 0280                  		cmpi.w	#$280,d0
0000A2D6 6200 0000                  		bhi.w	DeleteObject
0000A2DA 6000 0000                  		bra.w	DisplaySprite
0000A2DE                            ; ===========================================================================
0000A2DE                            
0000A2DE                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A2DE 5528 0024                  		subq.b	#2,$24(a0)
0000A2E2 117C 0000 0020             		move.b	#0,$20(a0)
0000A2E8 6100 0000                  		bsr.w	SingleObjLoad
0000A2EC 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A2F0 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A2F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A300 2348 003C                  		move.l	a0,$3C(a1)
0000A304 3038 D008                  		move.w	($FFFFD008).w,d0
0000A308 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A30C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A30E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A314                            
0000A314                            Obj4B_PlaySnd:
0000A314 303C 00C3                  		move.w	#$C3,d0
0000A318 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A31E 6096                       		bra.s	Obj4B_Animate
0000A320                            ; ===========================================================================
0000A320                            
0000A320                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A320 6000 0000                  		bra.w	DeleteObject
0000A324                            ; ===========================================================================
0000A324                            ; ---------------------------------------------------------------------------
0000A324                            ; Object 7C - flash effect when	you collect the	giant ring
0000A324                            ; ---------------------------------------------------------------------------
0000A324                            
0000A324                            Obj7C:					; XREF: Obj_Index
0000A324 7000                       		moveq	#0,d0
0000A326 1028 0024                  		move.b	$24(a0),d0
0000A32A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A32E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A332                            ; ===========================================================================
0000A332 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A334 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A336 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A338                            ; ===========================================================================
0000A338                            
0000A338                            Obj7C_Main:				; XREF: Obj7C_Index
0000A338 5428 0024                  		addq.b	#2,$24(a0)
0000A33C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A344 317C 2462 0002             		move.w	#$2462,2(a0)
0000A34A 0028 0004 0001             		ori.b	#4,1(a0)
0000A350 117C 0000 0018             		move.b	#0,$18(a0)
0000A356 117C 0020 0019             		move.b	#$20,$19(a0)
0000A35C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A362                            
0000A362                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A362 6100                       		bsr.s	Obj7C_Collect
0000A364 3028 0008                  		move.w	8(a0),d0
0000A368 0240 FF80                  		andi.w	#$FF80,d0
0000A36C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A370 0441 0080                  		subi.w	#$80,d1
0000A374 0241 FF80                  		andi.w	#$FF80,d1
0000A378 9041                       		sub.w	d1,d0
0000A37A 0C40 0280                  		cmpi.w	#$280,d0
0000A37E 6200 0000                  		bhi.w	DeleteObject
0000A382 6000 0000                  		bra.w	DisplaySprite
0000A386                            
0000A386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A386                            
0000A386                            
0000A386                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A386 5328 001E                  		subq.b	#1,$1E(a0)
0000A38A 6A00                       		bpl.s	locret_9F76
0000A38C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A392 5228 001A                  		addq.b	#1,$1A(a0)
0000A396 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A39C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A39E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A3A4 6600                       		bne.s	locret_9F76	; if not, branch
0000A3A6 2268 003C                  		movea.l	$3C(a0),a1
0000A3AA 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A3B0 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A3B6 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A3BC 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A3C0 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A3C4                            
0000A3C4                            locret_9F76:
0000A3C4 4E75                       		rts	
0000A3C6                            ; ===========================================================================
0000A3C6                            
0000A3C6                            Obj7C_End:				; XREF: Obj7C_Collect
0000A3C6 5428 0024                  		addq.b	#2,$24(a0)
0000A3CA 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A3D0 588F                       		addq.l	#4,sp
0000A3D2 4E75                       		rts	
0000A3D4                            ; End of function Obj7C_Collect
0000A3D4                            
0000A3D4                            ; ===========================================================================
0000A3D4                            
0000A3D4                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A3D4 6000 0000                  		bra.w	DeleteObject
0000A3D8                            ; ===========================================================================
0000A3D8                            Ani_obj25:
0000A3D8                            	include "_anim\obj25.asm"
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8                            ; Animation script - ring
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8 0000                       		dc.w byte_9F8C-Ani_obj25
0000A3DA 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A3E0                            		even
0000A3E0                            		even
0000A3E0                            
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Sprite mappings - rings
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            Map_obj25:
0000A3E0                            	include "_maps\obj25.asm"
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Sprite mappings - rings
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A3E4 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A3E8 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A3EC 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A3F0 01                         byte_9FA2:	dc.b 1
0000A3F1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A3F6 01                         byte_9FA8:	dc.b 1
0000A3F7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A3FC 01                         byte_9FAE:	dc.b 1
0000A3FD F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A402 01                         byte_9FB4:	dc.b 1
0000A403 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A408 01                         byte_9FBA:	dc.b 1
0000A409 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A40E 01                         byte_9FC0:	dc.b 1
0000A40F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A414 01                         byte_9FC6:	dc.b 1
0000A415 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A41A 01                         byte_9FCC:	dc.b 1
0000A41B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A420                            		even
0000A420                            		even
0000A420                            
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            ; Sprite mappings - giant ring
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            Map_obj4B:
0000A420                            	include "_maps\obj4B.asm"
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            ; Sprite mappings - giant ring
0000A420                            ; ---------------------------------------------------------------------------
0000A420 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A424 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A428 0A                         byte_9FDA:	dc.b $A
0000A429 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A42E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A433 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A438 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A43D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A442 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A447 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A44C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A451 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A456 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A45B 08                         byte_A00D:	dc.b 8
0000A45C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A461 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A466 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A46B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A470 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A475 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A47A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A47F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A484 04                         byte_A036:	dc.b 4
0000A485 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A48A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A48F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A494 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A499 08                         byte_A04B:	dc.b 8
0000A49A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A49F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A4A4 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A4A9 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A4AE F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A4B3 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A4B8 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A4BD 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A4C2                            		even
0000A4C2                            		even
0000A4C2                            
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            Map_obj7C:
0000A4C2                            	include "_maps\obj7C.asm"
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A4C6 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A4CA 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A4CE 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A4D2 02                         byte_A084:	dc.b 2
0000A4D3 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A4D8 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A4DD 04                         byte_A08F:	dc.b 4
0000A4DE E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A4E3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A4E8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A4ED 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A4F2 04                         byte_A0A4:	dc.b 4
0000A4F3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A4F8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A4FD 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A502 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A507 04                         byte_A0B9:	dc.b 4
0000A508 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A50D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A512 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A517 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A51C 04                         byte_A0CE:	dc.b 4
0000A51D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A522 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A527 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A52C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A531 04                         byte_A0E3:	dc.b 4
0000A532 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A537 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A53C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A541 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A546 02                         byte_A0F8:	dc.b 2
0000A547 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A54C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A551 04                         byte_A103:	dc.b 4
0000A552 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A557 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A55C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A561 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A566                            		even
0000A566                            		even
0000A566                            
0000A566                            ; ===========================================================================
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            ; Object 26 - monitors
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            
0000A566                            Obj26:					; XREF: Obj_Index
0000A566 7000                       		moveq	#0,d0
0000A568 1028 0024                  		move.b	$24(a0),d0
0000A56C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A570 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A574                            ; ===========================================================================
0000A574 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A576 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A578 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A57A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A57C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A57E                            ; ===========================================================================
0000A57E                            
0000A57E                            Obj26_Main:				; XREF: Obj26_Index
0000A57E 5428 0024                  		addq.b	#2,$24(a0)
0000A582 117C 000E 0016             		move.b	#$E,$16(a0)
0000A588 117C 000E 0017             		move.b	#$E,$17(a0)
0000A58E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A596 317C 0680 0002             		move.w	#$680,2(a0)
0000A59C 117C 0004 0001             		move.b	#4,1(a0)
0000A5A2 117C 0003 0018             		move.b	#3,$18(a0)
0000A5A8 117C 000F 0019             		move.b	#$F,$19(a0)
0000A5AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5B2 7000                       		moveq	#0,d0
0000A5B4 1028 0023                  		move.b	$23(a0),d0
0000A5B8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A5BE 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A5C4 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A5C6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A5CC 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A5D2 4E75                       		rts	
0000A5D4                            ; ===========================================================================
0000A5D4                            
0000A5D4                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A5D4 117C 0046 0020             		move.b	#$46,$20(a0)
0000A5DA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A5E0                            
0000A5E0                            Obj26_Solid:				; XREF: Obj26_Index
0000A5E0 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A5E4 6700                       		beq.s	loc_A1EC	; if not, branch
0000A5E6 5500                       		subq.b	#2,d0
0000A5E8 6600                       		bne.s	Obj26_Fall
0000A5EA 7200                       		moveq	#0,d1
0000A5EC 1228 0019                  		move.b	$19(a0),d1
0000A5F0 0641 000B                  		addi.w	#$B,d1
0000A5F4 6100 D41C                  		bsr.w	ExitPlatform
0000A5F8 0829 0003 0022             		btst	#3,$22(a1)
0000A5FE 6600 0000                  		bne.w	loc_A1BC
0000A602 4228 0025                  		clr.b	$25(a0)
0000A606 6000 0000                  		bra.w	Obj26_Animate
0000A60A                            ; ===========================================================================
0000A60A                            
0000A60A                            loc_A1BC:				; XREF: Obj26_Solid
0000A60A 363C 0010                  		move.w	#$10,d3
0000A60E 3428 0008                  		move.w	8(a0),d2
0000A612 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A616 6000 0000                  		bra.w	Obj26_Animate
0000A61A                            ; ===========================================================================
0000A61A                            
0000A61A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A61A 6100 0000                  		bsr.w	ObjectFall
0000A61E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A624 4A41                       		tst.w	d1
0000A626 6A00 0000                  		bpl.w	Obj26_Animate
0000A62A D368 000C                  		add.w	d1,$C(a0)
0000A62E 4268 0012                  		clr.w	$12(a0)
0000A632 4228 0025                  		clr.b	$25(a0)
0000A636 6000 0000                  		bra.w	Obj26_Animate
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            loc_A1EC:				; XREF: Obj26_Solid
0000A63A 323C 001A                  		move.w	#$1A,d1
0000A63E 343C 000F                  		move.w	#$F,d2
0000A642 6100 0000                  		bsr.w	Obj26_SolidSides
0000A646 6700 0000                  		beq.w	loc_A25C
0000A64A 4A69 0012                  		tst.w	$12(a1)
0000A64E 6B00                       		bmi.s	loc_A20A
0000A650 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A656 6700                       		beq.s	loc_A25C	; if yes, branch
0000A658                            
0000A658                            loc_A20A:
0000A658 4A41                       		tst.w	d1
0000A65A 6A00                       		bpl.s	loc_A220
0000A65C 9769 000C                  		sub.w	d3,$C(a1)
0000A660 6100 D29E                  		bsr.w	loc_74AE
0000A664 117C 0002 0025             		move.b	#2,$25(a0)
0000A66A 6000 0000                  		bra.w	Obj26_Animate
0000A66E                            ; ===========================================================================
0000A66E                            
0000A66E                            loc_A220:
0000A66E 4A40                       		tst.w	d0
0000A670 6700 0000                  		beq.w	loc_A246
0000A674 6B00                       		bmi.s	loc_A230
0000A676 4A69 0010                  		tst.w	$10(a1)
0000A67A 6B00                       		bmi.s	loc_A246
0000A67C 6000                       		bra.s	loc_A236
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            loc_A230:
0000A67E 4A69 0010                  		tst.w	$10(a1)
0000A682 6A00                       		bpl.s	loc_A246
0000A684                            
0000A684                            loc_A236:
0000A684 9169 0008                  		sub.w	d0,8(a1)
0000A688 337C 0000 0014             		move.w	#0,$14(a1)
0000A68E 337C 0000 0010             		move.w	#0,$10(a1)
0000A694                            
0000A694                            loc_A246:
0000A694 0829 0001 0022             		btst	#1,$22(a1)
0000A69A 6600                       		bne.s	loc_A26A
0000A69C 08E9 0005 0022             		bset	#5,$22(a1)
0000A6A2 08E8 0005 0022             		bset	#5,$22(a0)
0000A6A8 6000                       		bra.s	Obj26_Animate
0000A6AA                            ; ===========================================================================
0000A6AA                            
0000A6AA                            loc_A25C:
0000A6AA 0828 0005 0022             		btst	#5,$22(a0)
0000A6B0 6700                       		beq.s	Obj26_Animate
0000A6B2 337C 0001 001C             		move.w	#1,$1C(a1)
0000A6B8                            
0000A6B8                            loc_A26A:
0000A6B8 08A8 0005 0022             		bclr	#5,$22(a0)
0000A6BE 08A9 0005 0022             		bclr	#5,$22(a1)
0000A6C4                            
0000A6C4                            Obj26_Animate:				; XREF: Obj26_Index
0000A6C4 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A6CA 6100 0000                  		bsr.w	AnimateSprite
0000A6CE                            
0000A6CE                            Obj26_Display:				; XREF: Obj26_Index
0000A6CE 6100 0000                  		bsr.w	DisplaySprite
0000A6D2 3028 0008                  		move.w	8(a0),d0
0000A6D6 0240 FF80                  		andi.w	#$FF80,d0
0000A6DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6DE 0441 0080                  		subi.w	#$80,d1
0000A6E2 0241 FF80                  		andi.w	#$FF80,d1
0000A6E6 9041                       		sub.w	d1,d0
0000A6E8 0C40 0280                  		cmpi.w	#$280,d0
0000A6EC 6200 0000                  		bhi.w	DeleteObject
0000A6F0 4E75                       		rts	
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A6F2 5428 0024                  		addq.b	#2,$24(a0)
0000A6F6 117C 0000 0020             		move.b	#0,$20(a0)
0000A6FC 6100 0000                  		bsr.w	SingleObjLoad
0000A700 6600                       		bne.s	Obj26_Explode
0000A702 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A706 3368 0008 0008             		move.w	8(a0),8(a1)
0000A70C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A712 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A718 7400                       		moveq	#0,d2	; GMZ
0000A71A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A71C                            
0000A71C                            Obj26_Explode:
0000A71C 6100 0000                  		bsr.w	SingleObjLoad
0000A720 6600                       		bne.s	Obj26_SetBroken
0000A722 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A726 5429 0024                  		addq.b	#2,$24(a1)
0000A72A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A72E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A734 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A73A                            
0000A73A                            Obj26_NextExplosion:
0000A73A 5802                       		addq.b	#4,d2
0000A73C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A740                            
0000A740                            Obj26_SetBroken:
0000A740 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A744 7000                       		moveq	#0,d0
0000A746 1028 0023                  		move.b	$23(a0),d0
0000A74A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A750 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A756 6000 0000                  		bra.w	DisplaySprite
0000A75A                            ; ===========================================================================
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            ; Object 2E - contents of monitors
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            
0000A75A                            Obj2E:					; XREF: Obj_Index
0000A75A 7000                       		moveq	#0,d0
0000A75C 1028 0024                  		move.b	$24(a0),d0
0000A760 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A764 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A768 6000 0000                  		bra.w	DisplaySprite
0000A76C                            ; ===========================================================================
0000A76C 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A76E 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A770 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A772                            ; ===========================================================================
0000A772                            
0000A772                            Obj2E_Main:				; XREF: Obj2E_Index
0000A772 5428 0024                  		addq.b	#2,$24(a0)
0000A776 317C 0680 0002             		move.w	#$680,2(a0)
0000A77C 117C 0024 0001             		move.b	#$24,1(a0)
0000A782 117C 0003 0018             		move.b	#3,$18(a0)
0000A788 117C 0008 0019             		move.b	#8,$19(a0)
0000A78E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A794 7000                       		moveq	#0,d0
0000A796 1028 001C                  		move.b	$1C(a0),d0
0000A79A 5400                       		addq.b	#2,d0
0000A79C 1140 001A                  		move.b	d0,$1A(a0)
0000A7A0 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A7A6 D000                       		add.b	d0,d0
0000A7A8 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A7AC 5249                       		addq.w	#1,a1
0000A7AE 2149 0004                  		move.l	a1,4(a0)
0000A7B2                            
0000A7B2                            Obj2E_Move:				; XREF: Obj2E_Index
0000A7B2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7B6 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A7BA 6100 0000                  		bsr.w	SpeedToPos
0000A7BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7C4 4E75                       		rts	
0000A7C6                            ; ===========================================================================
0000A7C6                            
0000A7C6                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A7C6 5428 0024                  		addq.b	#2,$24(a0)
0000A7CA 317C 001D 001E             		move.w	#29,$1E(a0)
0000A7D0 1028 001C                  		move.b	$1C(a0),d0
0000A7D4 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A7D8 6600                       		bne.s	Obj2E_ChkSonic
0000A7DA 4E75                       		rts			; Eggman monitor does nothing
0000A7DC                            ; ===========================================================================
0000A7DC                            
0000A7DC                            Obj2E_ChkSonic:
0000A7DC 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A7E0 6600                       		bne.s	Obj2E_ChkShoes
0000A7E2                            
0000A7E2                            ExtraLife:
0000A7E2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A7E6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A7EA 303C 0088                  		move.w	#$88,d0
0000A7EE 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A7F4                            ; ===========================================================================
0000A7F4                            
0000A7F4                            Obj2E_ChkShoes:
0000A7F4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A7F8 6600                       		bne.s	Obj2E_ChkShield
0000A7FA 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A800 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A806 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A80C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A812 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A818 303C 00E2                  		move.w	#$E2,d0
0000A81C 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A822                            ; ===========================================================================
0000A822                            
0000A822                            Obj2E_ChkShield:
0000A822 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A826 6600                       		bne.s	Obj2E_ChkInvinc
0000A828 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A82E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A834 303C 00AF                  		move.w	#$AF,d0
0000A838 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A83E                            ; ===========================================================================
0000A83E                            
0000A83E                            Obj2E_ChkInvinc:
0000A83E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A842 6600                       		bne.s	Obj2E_ChkRings
0000A844 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A84A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A850 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A856 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A85C 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A862 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A868 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A86E 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A874 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A87A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A880 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A884 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A886 303C 0087                  		move.w	#$87,d0
0000A88A 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A890                            ; ===========================================================================
0000A890                            
0000A890                            Obj2E_NoMusic:
0000A890 4E75                       		rts	
0000A892                            ; ===========================================================================
0000A892                            
0000A892                            Obj2E_ChkRings:
0000A892 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A896 6600                       		bne.s	Obj2E_ChkS
0000A898 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A89E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A8A4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A8AA 6500                       		bcs.s	Obj2E_RingSound
0000A8AC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A8B2 6700 FF2E                  		beq.w	ExtraLife
0000A8B6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A8BC 6500                       		bcs.s	Obj2E_RingSound
0000A8BE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A8C4 6700 FF1C                  		beq.w	ExtraLife
0000A8C8                            
0000A8C8                            Obj2E_RingSound:
0000A8C8 303C 00B5                  		move.w	#$B5,d0
0000A8CC 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A8D2                            ; ===========================================================================
0000A8D2                            
0000A8D2                            Obj2E_ChkS:
0000A8D2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A8D6 6600                       		bne.s	Obj2E_ChkEnd
0000A8D8                            		; nop	
0000A8D8 7201                       		moveq	#1,d1
0000A8DA B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A8DE                            
0000A8DE                            Obj2E_ChkEnd:
0000A8DE 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A8E0                            ; ===========================================================================
0000A8E0                            
0000A8E0                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A8E0 5368 001E                  		subq.w	#1,$1E(a0)
0000A8E4 6B00 0000                  		bmi.w	DeleteObject
0000A8E8 4E75                       		rts	
0000A8EA                            ; ---------------------------------------------------------------------------
0000A8EA                            ; Subroutine to	make the sides of a monitor solid
0000A8EA                            ; ---------------------------------------------------------------------------
0000A8EA                            
0000A8EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A8EA                            
0000A8EA                            
0000A8EA                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A8EA 43F8 D000                  		lea	($FFFFD000).w,a1
0000A8EE 3029 0008                  		move.w	8(a1),d0
0000A8F2 9068 0008                  		sub.w	8(a0),d0
0000A8F6 D041                       		add.w	d1,d0
0000A8F8 6B00                       		bmi.s	loc_A4E6
0000A8FA 3601                       		move.w	d1,d3
0000A8FC D643                       		add.w	d3,d3
0000A8FE B043                       		cmp.w	d3,d0
0000A900 6200                       		bhi.s	loc_A4E6
0000A902 1629 0016                  		move.b	$16(a1),d3
0000A906 4883                       		ext.w	d3
0000A908 D443                       		add.w	d3,d2
0000A90A 3629 000C                  		move.w	$C(a1),d3
0000A90E 9668 000C                  		sub.w	$C(a0),d3
0000A912 D642                       		add.w	d2,d3
0000A914 6B00                       		bmi.s	loc_A4E6
0000A916 D442                       		add.w	d2,d2
0000A918 B642                       		cmp.w	d2,d3
0000A91A 6400                       		bcc.s	loc_A4E6
0000A91C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A920 6B00                       		bmi.s	loc_A4E6
0000A922 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A928 6400                       		bcc.s	loc_A4E6
0000A92A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A92E 6600                       		bne.s	loc_A4E6
0000A930 B240                       		cmp.w	d0,d1
0000A932 6400                       		bcc.s	loc_A4DC
0000A934 D241                       		add.w	d1,d1
0000A936 9041                       		sub.w	d1,d0
0000A938                            
0000A938                            loc_A4DC:
0000A938 0C43 0010                  		cmpi.w	#$10,d3
0000A93C 6500                       		bcs.s	loc_A4EA
0000A93E                            
0000A93E                            loc_A4E2:
0000A93E 7201                       		moveq	#1,d1
0000A940 4E75                       		rts	
0000A942                            ; ===========================================================================
0000A942                            
0000A942                            loc_A4E6:
0000A942 7200                       		moveq	#0,d1
0000A944 4E75                       		rts	
0000A946                            ; ===========================================================================
0000A946                            
0000A946                            loc_A4EA:
0000A946 7200                       		moveq	#0,d1
0000A948 1228 0019                  		move.b	$19(a0),d1
0000A94C 5841                       		addq.w	#4,d1
0000A94E 3401                       		move.w	d1,d2
0000A950 D442                       		add.w	d2,d2
0000A952 D269 0008                  		add.w	8(a1),d1
0000A956 9268 0008                  		sub.w	8(a0),d1
0000A95A 6BE2                       		bmi.s	loc_A4E2
0000A95C B242                       		cmp.w	d2,d1
0000A95E 64DE                       		bcc.s	loc_A4E2
0000A960 72FF                       		moveq	#-1,d1
0000A962 4E75                       		rts	
0000A964                            ; End of function Obj26_SolidSides
0000A964                            
0000A964                            ; ===========================================================================
0000A964                            Ani_obj26:
0000A964                            	include "_anim\obj26.asm"
0000A964                            ; ---------------------------------------------------------------------------
0000A964                            ; Animation script - monitors
0000A964                            ; ---------------------------------------------------------------------------
0000A964 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A96A 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A970 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A976 0000                       		dc.w byte_A582-Ani_obj26
0000A978 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A97E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A98A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A996 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A9A2 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A9AE 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A9BA 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A9C6 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A9D2 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A9DE 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A9E6                            		even
0000A9E6                            		even
0000A9E6                            
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            ; Sprite mappings - monitors
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            Map_obj26:
0000A9E6                            	include "_maps\obj26.asm"
0000A9E6                            ; ================================================================================
0000A9E6                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000A9E6                            ; ================================================================================
0000A9E6                            
0000A9E6                            DATAY1U343IF3L:
0000A9E6 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000A9EA 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000A9EE 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000A9F2 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000A9F6 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000A9FA 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000A9FE 05                         DATAY1U343IF3L_0: dc.b $5
0000A9FF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA04 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA09 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA0E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA13 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA18 06                         DATAY1U343IF3L_1: dc.b $6
0000AA19 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AA1E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA23 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA28 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA2D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA32 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA37 05                         DATAY1U343IF3L_2: dc.b $5
0000AA38 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA3D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA42 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA47 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA4C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA51 05                         DATAY1U343IF3L_3: dc.b $5
0000AA52 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA57 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA5C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA61 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA66 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA6B 06                         DATAY1U343IF3L_4: dc.b $6
0000AA6C F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AA71 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA76 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA7B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA80 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA85 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA8A 06                         DATAY1U343IF3L_5: dc.b $6
0000AA8B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AA90 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA95 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA9A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA9F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAA4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAA9 06                         DATAY1U343IF3L_6: dc.b $6
0000AAAA F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AAAF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAB4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAB9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AABE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAC3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAC8 06                         DATAY1U343IF3L_7: dc.b $6
0000AAC9 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AACE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAD3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAD8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AADD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAE2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAE7 06                         DATAY1U343IF3L_8: dc.b $6
0000AAE8 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AAED E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAF2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAF7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAFC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB01 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB06 06                         DATAY1U343IF3L_9: dc.b $6
0000AB07 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB0C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB11 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB16 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB1B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB20 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB25 05                         DATAY1U343IF3L_A: dc.b $5
0000AB26 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB2B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB30 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB35 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB3A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB3F 01                         DATAY1U343IF3L_B: dc.b $1
0000AB40 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AB46 00                         	even
0000AB46 00                         	even
0000AB46                            
0000AB46                            ; ===========================================================================
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            ; Object 0E - Sonic on the title screen
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            
0000AB46                            Obj0E:					; XREF: Obj_Index
0000AB46 7000                       		moveq	#0,d0
0000AB48 1028 0024                  		move.b	$24(a0),d0
0000AB4C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AB50 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AB54                            ; ===========================================================================
0000AB54 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AB56 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AB58 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AB5A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AB5C                            ; ===========================================================================
0000AB5C                            
0000AB5C                            Obj0E_Main:				; XREF: Obj0E_Index
0000AB5C 5428 0024                  		addq.b	#2,$24(a0)
0000AB60 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AB66 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AB6C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AB74 317C 2300 0002             		move.w	#$2300,2(a0)
0000AB7A 117C 0001 0018             		move.b	#1,$18(a0)
0000AB80 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AB86 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AB8C 6100 0000                  		bsr.w	AnimateSprite
0000AB90                            
0000AB90                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AB90 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AB94 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AB96 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AB9A 6000 0000                  		bra.w	DisplaySprite
0000AB9E                            ; ===========================================================================
0000AB9E                            
0000AB9E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AB9E 4E75                       		rts	
0000ABA0                            ; ===========================================================================
0000ABA0                            
0000ABA0                            Obj0E_Move:				; XREF: Obj0E_Index
0000ABA0 5168 000A                  		subq.w	#8,$A(a0)
0000ABA4 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ABAA 6600                       		bne.s	Obj0E_Display
0000ABAC 5428 0024                  		addq.b	#2,$24(a0)
0000ABB0                            
0000ABB0                            Obj0E_Display:
0000ABB0 6000 0000                  		bra.w	DisplaySprite
0000ABB4                            ; ===========================================================================
0000ABB4 4E75                       		rts	
0000ABB6                            ; ===========================================================================
0000ABB6                            
0000ABB6                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ABB6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABBC 6100 0000                  		bsr.w	AnimateSprite
0000ABC0 6000 0000                  		bra.w	DisplaySprite
0000ABC4                            ; ===========================================================================
0000ABC4 4E75                       		rts	
0000ABC6                            ; ===========================================================================
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            
0000ABC6                            Obj0F:					; XREF: Obj_Index
0000ABC6 7000                       		moveq	#0,d0
0000ABC8 1028 0024                  		move.b	$24(a0),d0
0000ABCC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ABD0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ABD4 6000 0000                  		bra.w	DisplaySprite
0000ABD8                            ; ===========================================================================
0000ABD8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ABDA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ABDC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ABDE                            ; ===========================================================================
0000ABDE                            
0000ABDE                            Obj0F_Main:				; XREF: Obj0F_Index
0000ABDE 5428 0024                  		addq.b	#2,$24(a0)
0000ABE2 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ABE8 317C 0130 000A             		move.w	#$130,$A(a0)
0000ABEE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ABF6 317C 0200 0002             		move.w	#$200,2(a0)
0000ABFC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC02 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC04 5428 0024                  		addq.b	#2,$24(a0)
0000AC08 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC0E 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC10 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC16 317C 0170 0008             		move.w	#$170,8(a0)
0000AC1C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AC22                            
0000AC22                            locret_A6F8:				; XREF: Obj0F_Index
0000AC22 4E75                       		rts	
0000AC24                            ; ===========================================================================
0000AC24                            
0000AC24                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AC24 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AC2A 6000 0000                  		bra.w	AnimateSprite
0000AC2E                            ; ===========================================================================
0000AC2E                            Ani_obj0E:
0000AC2E                            	include "_anim\obj0E.asm"
0000AC2E                            ; ---------------------------------------------------------------------------
0000AC2E                            ; Animation script - Sonic on the title screen
0000AC2E                            ; ---------------------------------------------------------------------------
0000AC2E 0000                       		dc.w byte_A706-Ani_obj0E
0000AC30 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AC3C                            		even
0000AC3C                            		even
0000AC3C                            
0000AC3C                            Ani_obj0F:
0000AC3C                            	include "_anim\obj0F.asm"
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C 0000                       		dc.w byte_A714-Ani_obj0F
0000AC3E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AC42                            		even
0000AC42                            		even
0000AC42                            
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            ; Subroutine to	animate	a sprite using an animation script
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            
0000AC42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC42                            
0000AC42                            
0000AC42                            AnimateSprite:
0000AC42 7000                       		moveq	#0,d0
0000AC44 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AC48 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AC4C 6700                       		beq.s	Anim_Run	; if not, branch
0000AC4E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AC52 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AC58 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AC5E                            
0000AC5E                            Anim_Run:
0000AC5E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AC62 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AC64 D040                       		add.w	d0,d0
0000AC66 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AC6A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AC6E 7200                       		moveq	#0,d1
0000AC70 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AC74 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AC78 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AC7A                            
0000AC7A                            Anim_Next:
0000AC7A 1200                       		move.b	d0,d1
0000AC7C 0200 001F                  		andi.b	#$1F,d0
0000AC80 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AC84 1028 0022                  		move.b	$22(a0),d0
0000AC88 E719                       		rol.b	#3,d1
0000AC8A B101                       		eor.b	d0,d1
0000AC8C 0201 0003                  		andi.b	#3,d1
0000AC90 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AC96 8328 0001                  		or.b	d1,1(a0)
0000AC9A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AC9E                            
0000AC9E                            Anim_Wait:
0000AC9E 4E75                       		rts	
0000ACA0                            ; ===========================================================================
0000ACA0                            
0000ACA0                            Anim_End_FF:
0000ACA0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000ACA2 6600                       		bne.s	Anim_End_FE	; if not, branch
0000ACA4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000ACAA 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000ACAE 60CA                       		bra.s	Anim_Next
0000ACB0                            ; ===========================================================================
0000ACB0                            
0000ACB0                            Anim_End_FE:
0000ACB0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000ACB2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000ACB4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000ACB8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000ACBC 9200                       		sub.b	d0,d1
0000ACBE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000ACC2 60B6                       		bra.s	Anim_Next
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            Anim_End_FD:
0000ACC4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000ACC6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000ACC8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000ACCE                            
0000ACCE                            Anim_End_FC:
0000ACCE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000ACD0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000ACD2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000ACD6                            
0000ACD6                            Anim_End_FB:
0000ACD6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000ACD8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000ACDA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACE0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000ACE4                            
0000ACE4                            Anim_End_FA:
0000ACE4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000ACE6 6600                       		bne.s	Anim_End	; if not, branch
0000ACE8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000ACEC                            
0000ACEC                            Anim_End:
0000ACEC 4E75                       		rts	
0000ACEE                            ; End of function AnimateSprite
0000ACEE                            
0000ACEE                            ; ===========================================================================
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            Map_obj0F:
0000ACEE                            	include "_maps\obj0F.asm"
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE 0000                       		dc.w byte_A7CD-Map_obj0F
0000ACF0 0000                       		dc.w byte_A7CC-Map_obj0F
0000ACF2 0000                       		dc.w byte_A7EB-Map_obj0F
0000ACF4 0000                       		dc.w byte_A882-Map_obj0F
0000ACF6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000ACF7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000ACFC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD01 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD06 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD0B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD10 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD15 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD16 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD1B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD20 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD25 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD2A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD2F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD34 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD39 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD3E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD43 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD48 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD4D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD52 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD57 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD5C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD61 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD66 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD6B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD70 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD75 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD7A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD7F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD84 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD89 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD8E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD93 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD98 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD9D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADAC 01                         byte_A882:	dc.b 1			; "TM"
0000ADAD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000ADB2                            		even
0000ADB2                            		even
0000ADB2                            
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            ; Sprite mappings - Sonic on the title screen
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            Map_obj0E:
0000ADB2                            	include "_maps\obj0E.asm"
0000ADB2                            ; ================================================================================
0000ADB2                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 12:11:33 GMT-0500 (Central Daylight Time)
0000ADB2                            ; ================================================================================
0000ADB2                            
0000ADB2                            DATAV21JFHJ5PUP:
0000ADB2 0000 0000                  	dc.w DATAV21JFHJ5PUP_0-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_1-DATAV21JFHJ5PUP
0000ADB6 0000 0000                  	dc.w DATAV21JFHJ5PUP_2-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_3-DATAV21JFHJ5PUP
0000ADBA 0000 0000                  	dc.w DATAV21JFHJ5PUP_4-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_5-DATAV21JFHJ5PUP
0000ADBE 0000 0000                  	dc.w DATAV21JFHJ5PUP_6-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_7-DATAV21JFHJ5PUP
0000ADC2 08                         DATAV21JFHJ5PUP_0: dc.b $8
0000ADC3 0C0F 019F 08               	dc.b $C, $F, $1, $9F, $8
0000ADC8 2C0F 01AF 08               	dc.b $2C, $F, $1, $AF, $8
0000ADCD 4C0D 01BF 08               	dc.b $4C, $D, $1, $BF, $8
0000ADD2 0408 01C7 20               	dc.b $4, $8, $1, $C7, $20
0000ADD7 0C0B 01CA 28               	dc.b $C, $B, $1, $CA, $28
0000ADDC 2C0B 01D6 28               	dc.b $2C, $B, $1, $D6, $28
0000ADE1 4C05 01E2 28               	dc.b $4C, $5, $1, $E2, $28
0000ADE6 1407 01E6 40               	dc.b $14, $7, $1, $E6, $40
0000ADEB 0B                         DATAV21JFHJ5PUP_1: dc.b $B
0000ADEC 060F 01EE 01               	dc.b $6, $F, $1, $EE, $1
0000ADF1 060F 01FE 21               	dc.b $6, $F, $1, $FE, $21
0000ADF6 0607 020E 41               	dc.b $6, $7, $2, $E, $41
0000ADFB 260F 0216 01               	dc.b $26, $F, $2, $16, $1
0000AE00 260F 0226 21               	dc.b $26, $F, $2, $26, $21
0000AE05 2607 0236 41               	dc.b $26, $7, $2, $36, $41
0000AE0A 460C 023E 01               	dc.b $46, $C, $2, $3E, $1
0000AE0F 460E 0242 21               	dc.b $46, $E, $2, $42, $21
0000AE14 4606 024E 41               	dc.b $46, $6, $2, $4E, $41
0000AE19 4E08 0254 09               	dc.b $4E, $8, $2, $54, $9
0000AE1E 5604 0257 11               	dc.b $56, $4, $2, $57, $11
0000AE23 0B                         DATAV21JFHJ5PUP_2: dc.b $B
0000AE24 F20F 01EE 01               	dc.b $F2, $F, $1, $EE, $1
0000AE29 F20F 01FE 21               	dc.b $F2, $F, $1, $FE, $21
0000AE2E F207 020E 41               	dc.b $F2, $7, $2, $E, $41
0000AE33 120F 0216 01               	dc.b $12, $F, $2, $16, $1
0000AE38 120F 0226 21               	dc.b $12, $F, $2, $26, $21
0000AE3D 1207 0236 41               	dc.b $12, $7, $2, $36, $41
0000AE42 320C 023E 01               	dc.b $32, $C, $2, $3E, $1
0000AE47 320E 0242 21               	dc.b $32, $E, $2, $42, $21
0000AE4C 3206 024E 41               	dc.b $32, $6, $2, $4E, $41
0000AE51 3A08 0254 09               	dc.b $3A, $8, $2, $54, $9
0000AE56 4204 0257 11               	dc.b $42, $4, $2, $57, $11
0000AE5B 0D                         DATAV21JFHJ5PUP_3: dc.b $D
0000AE5C FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AE61 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AE66 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AE6B 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AE70 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AE75 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AE7A 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AE7F 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AE84 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AE89 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AE8E 3C01 004E 08               	dc.b $3C, $1, $0, $4E, $8
0000AE93 3C04 0050 28               	dc.b $3C, $4, $0, $50, $28
0000AE98 4400 0052 28               	dc.b $44, $0, $0, $52, $28
0000AE9D 10                         DATAV21JFHJ5PUP_4: dc.b $10
0000AE9E F80F 0259 09               	dc.b $F8, $F, $2, $59, $9
0000AEA3 F807 0269 29               	dc.b $F8, $7, $2, $69, $29
0000AEA8 0003 0271 01               	dc.b $0, $3, $2, $71, $1
0000AEAD 0003 0275 39               	dc.b $0, $3, $2, $75, $39
0000AEB2 1001 0279 F9               	dc.b $10, $1, $2, $79, $F9
0000AEB7 180D 027B 09               	dc.b $18, $D, $2, $7B, $9
0000AEBC 1807 0283 29               	dc.b $18, $7, $2, $83, $29
0000AEC1 1803 028B 41               	dc.b $18, $3, $2, $8B, $41
0000AEC6 2001 028F 01               	dc.b $20, $1, $2, $8F, $1
0000AECB 2003 0291 39               	dc.b $20, $3, $2, $91, $39
0000AED0 2808 0295 11               	dc.b $28, $8, $2, $95, $11
0000AED5 3007 0298 19               	dc.b $30, $7, $2, $98, $19
0000AEDA 3801 02A0 11               	dc.b $38, $1, $2, $A0, $11
0000AEDF 3806 02A2 29               	dc.b $38, $6, $2, $A2, $29
0000AEE4 3801 02A8 41               	dc.b $38, $1, $2, $A8, $41
0000AEE9 4001 02AA 39               	dc.b $40, $1, $2, $AA, $39
0000AEEE 13                         DATAV21JFHJ5PUP_5: dc.b $13
0000AEEF 280E 00B2 38               	dc.b $28, $E, $0, $B2, $38
0000AEF4 1805 00BE 48               	dc.b $18, $5, $0, $BE, $48
0000AEF9 4008 00C2 38               	dc.b $40, $8, $0, $C2, $38
0000AEFE 4804 00C5 38               	dc.b $48, $4, $0, $C5, $38
0000AF03 100F 0053 10               	dc.b $10, $F, $0, $53, $10
0000AF08 0804 0063 20               	dc.b $8, $4, $0, $63, $20
0000AF0D 000B 0065 30               	dc.b $0, $B, $0, $65, $30
0000AF12 0800 0071 48               	dc.b $8, $0, $0, $71, $48
0000AF17 1800 0072 48               	dc.b $18, $0, $0, $72, $48
0000AF1C 1805 0073 00               	dc.b $18, $5, $0, $73, $0
0000AF21 2802 0077 08               	dc.b $28, $2, $0, $77, $8
0000AF26 300F 007A 10               	dc.b $30, $F, $0, $7A, $10
0000AF2B 200D 008A 30               	dc.b $20, $D, $0, $8A, $30
0000AF30 2001 0092 50               	dc.b $20, $1, $0, $92, $50
0000AF35 3008 0094 30               	dc.b $30, $8, $0, $94, $30
0000AF3A 380E 0097 30               	dc.b $38, $E, $0, $97, $30
0000AF3F 500D 00A3 08               	dc.b $50, $D, $0, $A3, $8
0000AF44 500C 00AB 28               	dc.b $50, $C, $0, $AB, $28
0000AF49 5808 00AF 28               	dc.b $58, $8, $0, $AF, $28
0000AF4E 0F                         DATAV21JFHJ5PUP_6: dc.b $F
0000AF4F EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000AF54 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000AF59 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000AF5E EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000AF63 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000AF68 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000AF6D EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000AF72 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000AF77 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000AF7C EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000AF81 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000AF86 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000AF8B EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000AF90 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000AF95 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000AF9A 0F                         DATAV21JFHJ5PUP_7: dc.b $F
0000AF9B EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000AFA0 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000AFA5 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000AFAA EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000AFAF 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000AFB4 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000AFB9 EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000AFBE 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000AFC3 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000AFC8 EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000AFCD 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000AFD2 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000AFD7 EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000AFDC 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000AFE1 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000AFE6                            	even
0000AFE6                            	even
0000AFE6                            
0000AFE6                            ; ===========================================================================
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6                            ; Object 2B - Chopper enemy (GHZ)
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6                            
0000AFE6                            Obj2B:					; XREF: Obj_Index
0000AFE6 7000                       		moveq	#0,d0
0000AFE8 1028 0024                  		move.b	$24(a0),d0
0000AFEC 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AFF0 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AFF4 6000 0000                  		bra.w	MarkObjGone
0000AFF8                            ; ===========================================================================
0000AFF8 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AFFA 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AFFC                            ; ===========================================================================
0000AFFC                            
0000AFFC                            Obj2B_Main:				; XREF: Obj2B_Index
0000AFFC 5428 0024                  		addq.b	#2,$24(a0)
0000B000 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B008 317C 047B 0002             		move.w	#$47B,2(a0)
0000B00E 117C 0004 0001             		move.b	#4,1(a0)
0000B014 117C 0004 0018             		move.b	#4,$18(a0)
0000B01A 117C 0009 0020             		move.b	#9,$20(a0)
0000B020 117C 0010 0019             		move.b	#$10,$19(a0)
0000B026 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B02C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B032                            
0000B032                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B032 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B038 6100 FC08                  		bsr.w	AnimateSprite
0000B03C 6100 0000                  		bsr.w	SpeedToPos
0000B040 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B046 3028 0030                  		move.w	$30(a0),d0
0000B04A B068 000C                  		cmp.w	$C(a0),d0
0000B04E 6400                       		bcc.s	Obj2B_ChgAni
0000B050 3140 000C                  		move.w	d0,$C(a0)
0000B054 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B05A                            
0000B05A                            Obj2B_ChgAni:
0000B05A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B060 0440 00C0                  		subi.w	#$C0,d0
0000B064 B068 000C                  		cmp.w	$C(a0),d0
0000B068 6400                       		bcc.s	locret_ABB6
0000B06A 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B070 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B074 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B076 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B07C                            
0000B07C                            locret_ABB6:
0000B07C 4E75                       		rts	
0000B07E                            ; ===========================================================================
0000B07E                            Ani_obj2B:
0000B07E                            	include "_anim\obj2B.asm"
0000B07E                            ; ---------------------------------------------------------------------------
0000B07E                            ; Animation script - Chopper enemy
0000B07E                            ; ---------------------------------------------------------------------------
0000B07E 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B080 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B082 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B084 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B088 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B08C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B090 00                         		even
0000B090 00                         		even
0000B090                            
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            ; Sprite mappings - Chopper enemy (GHZ)
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            Map_obj2B:
0000B090                            	include "_maps\obj2B.asm"
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            ; Sprite mappings - Chopper enemy (GHZ)
0000B090                            ; ---------------------------------------------------------------------------
0000B090 0000                       		dc.w byte_ABCE-Map_obj2B
0000B092 0000                       		dc.w byte_ABD4-Map_obj2B
0000B094 01                         byte_ABCE:	dc.b 1
0000B095 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B09A 01                         byte_ABD4:	dc.b 1
0000B09B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B0A0                            		even
0000B0A0                            		even
0000B0A0                            
0000B0A0                            ; ===========================================================================
0000B0A0                            ; ---------------------------------------------------------------------------
0000B0A0                            ; Object 2C - Jaws enemy (LZ)
0000B0A0                            ; ---------------------------------------------------------------------------
0000B0A0                            
0000B0A0                            Obj2C:					; XREF: Obj_Index
0000B0A0 7000                       		moveq	#0,d0
0000B0A2 1028 0024                  		move.b	$24(a0),d0
0000B0A6 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B0AA 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B0AE                            ; ===========================================================================
0000B0AE 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B0B0 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B0B2                            ; ===========================================================================
0000B0B2                            
0000B0B2                            Obj2C_Main:				; XREF: Obj2C_Index
0000B0B2 5428 0024                  		addq.b	#2,$24(a0)
0000B0B6 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B0BE 317C 2486 0002             		move.w	#$2486,2(a0)
0000B0C4 0028 0004 0001             		ori.b	#4,1(a0)
0000B0CA 117C 000A 0020             		move.b	#$A,$20(a0)
0000B0D0 117C 0004 0018             		move.b	#4,$18(a0)
0000B0D6 117C 0010 0019             		move.b	#$10,$19(a0)
0000B0DC 7000                       		moveq	#0,d0
0000B0DE 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B0E2 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B0E4 5340                       		subq.w	#1,d0
0000B0E6 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B0EA 3140 0032                  		move.w	d0,$32(a0)
0000B0EE 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B0F4 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B0FA 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B0FC 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B100                            
0000B100                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B100 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B104 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B106 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B10C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B110 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B116 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B11C                            
0000B11C                            Obj2C_Animate:
0000B11C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B122 6100 FB1E                  		bsr.w	AnimateSprite
0000B126 6100 0000                  		bsr.w	SpeedToPos
0000B12A 6000 0000                  		bra.w	MarkObjGone
0000B12E                            ; ===========================================================================
0000B12E                            Ani_obj2C:
0000B12E                            	include "_anim\obj2C.asm"
0000B12E                            ; ---------------------------------------------------------------------------
0000B12E                            ; Animation script - Jaws enemy
0000B12E                            ; ---------------------------------------------------------------------------
0000B12E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B130 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B136                            		even
0000B136                            		even
0000B136                            
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            ; Sprite mappings - Jaws enemy (LZ)
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            Map_obj2C:
0000B136                            	include "_maps\obj2C.asm"
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            ; Sprite mappings - Jaws enemy (LZ)
0000B136                            ; ---------------------------------------------------------------------------
0000B136 0000                       		dc.w byte_AC78-Map_obj2C
0000B138 0000                       		dc.w byte_AC83-Map_obj2C
0000B13A 0000                       		dc.w byte_AC8E-Map_obj2C
0000B13C 0000                       		dc.w byte_AC99-Map_obj2C
0000B13E 02                         byte_AC78:	dc.b 2
0000B13F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B144 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B149 02                         byte_AC83:	dc.b 2
0000B14A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B14F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B154 02                         byte_AC8E:	dc.b 2
0000B155 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B15A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B15F 02                         byte_AC99:	dc.b 2
0000B160 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B165 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B16A                            		even
0000B16A                            		even
0000B16A                            
0000B16A                            ; ===========================================================================
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A                            ; Object 2D - Burrobot enemy (LZ)
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A                            
0000B16A                            Obj2D:					; XREF: Obj_Index
0000B16A 7000                       		moveq	#0,d0
0000B16C 1028 0024                  		move.b	$24(a0),d0
0000B170 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B174 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B178                            ; ===========================================================================
0000B178 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B17A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B17C                            ; ===========================================================================
0000B17C                            
0000B17C                            Obj2D_Main:				; XREF: Obj2D_Index
0000B17C 5428 0024                  		addq.b	#2,$24(a0)
0000B180 117C 0013 0016             		move.b	#$13,$16(a0)
0000B186 117C 0008 0017             		move.b	#8,$17(a0)
0000B18C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B194 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B19A 0028 0004 0001             		ori.b	#4,1(a0)
0000B1A0 117C 0004 0018             		move.b	#4,$18(a0)
0000B1A6 117C 0005 0020             		move.b	#5,$20(a0)
0000B1AC 117C 000C 0019             		move.b	#$C,$19(a0)
0000B1B2 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B1B6 117C 0002 001C             		move.b	#2,$1C(a0)
0000B1BC                            
0000B1BC                            Obj2D_Action:				; XREF: Obj2D_Index
0000B1BC 7000                       		moveq	#0,d0
0000B1BE 1028 0025                  		move.b	$25(a0),d0
0000B1C2 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B1C6 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B1CA 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B1D0 6100 FA70                  		bsr.w	AnimateSprite
0000B1D4 6000 0000                  		bra.w	MarkObjGone
0000B1D8                            ; ===========================================================================
0000B1D8 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B1DA 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B1DC 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B1DE 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B1E0                            ; ===========================================================================
0000B1E0                            
0000B1E0                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B1E0 5368 0030                  		subq.w	#1,$30(a0)
0000B1E4 6A00                       		bpl.s	locret_AD42
0000B1E6 5428 0025                  		addq.b	#2,$25(a0)
0000B1EA 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B1F0 317C 0080 0010             		move.w	#$80,$10(a0)
0000B1F6 117C 0001 001C             		move.b	#1,$1C(a0)
0000B1FC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B202 6700                       		beq.s	locret_AD42
0000B204 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B208                            
0000B208                            locret_AD42:
0000B208 4E75                       		rts	
0000B20A                            ; ===========================================================================
0000B20A                            
0000B20A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B20A 5368 0030                  		subq.w	#1,$30(a0)
0000B20E 6B00                       		bmi.s	loc_AD84
0000B210 6100 0000                  		bsr.w	SpeedToPos
0000B214 0868 0000 0032             		bchg	#0,$32(a0)
0000B21A 6600                       		bne.s	loc_AD78
0000B21C 3628 0008                  		move.w	8(a0),d3
0000B220 0643 000C                  		addi.w	#$C,d3
0000B224 0828 0000 0022             		btst	#0,$22(a0)
0000B22A 6600                       		bne.s	loc_AD6A
0000B22C 0443 0018                  		subi.w	#$18,d3
0000B230                            
0000B230                            loc_AD6A:
0000B230 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B236 0C41 000C                  		cmpi.w	#$C,d1
0000B23A 6C00                       		bge.s	loc_AD84
0000B23C 4E75                       		rts	
0000B23E                            ; ===========================================================================
0000B23E                            
0000B23E                            loc_AD78:				; XREF: Obj2D_Move
0000B23E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B244 D368 000C                  		add.w	d1,$C(a0)
0000B248 4E75                       		rts	
0000B24A                            ; ===========================================================================
0000B24A                            
0000B24A                            loc_AD84:				; XREF: Obj2D_Move
0000B24A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B250 6700                       		beq.s	loc_ADA4
0000B252 5528 0025                  		subq.b	#2,$25(a0)
0000B256 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B25C 317C 0000 0010             		move.w	#0,$10(a0)
0000B262 117C 0000 001C             		move.b	#0,$1C(a0)
0000B268 4E75                       		rts	
0000B26A                            ; ===========================================================================
0000B26A                            
0000B26A                            loc_ADA4:
0000B26A 5428 0025                  		addq.b	#2,$25(a0)
0000B26E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B274 117C 0002 001C             		move.b	#2,$1C(a0)
0000B27A 4E75                       		rts	
0000B27C                            ; ===========================================================================
0000B27C                            
0000B27C                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B27C 6100 0000                  		bsr.w	SpeedToPos
0000B280 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B286 6B00                       		bmi.s	locret_ADF0
0000B288 117C 0003 001C             		move.b	#3,$1C(a0)
0000B28E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B294 4A41                       		tst.w	d1
0000B296 6A00                       		bpl.s	locret_ADF0
0000B298 D368 000C                  		add.w	d1,$C(a0)
0000B29C 317C 0000 0012             		move.w	#0,$12(a0)
0000B2A2 117C 0001 001C             		move.b	#1,$1C(a0)
0000B2A8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B2AE 5528 0025                  		subq.b	#2,$25(a0)
0000B2B2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B2B6                            
0000B2B6                            locret_ADF0:
0000B2B6 4E75                       		rts	
0000B2B8                            ; ===========================================================================
0000B2B8                            
0000B2B8                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B2B8 343C 0060                  		move.w	#$60,d2
0000B2BC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B2C0 6400                       		bcc.s	locret_AE20
0000B2C2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B2C6 9068 000C                  		sub.w	$C(a0),d0
0000B2CA 6400                       		bcc.s	locret_AE20
0000B2CC 0C40 FF80                  		cmpi.w	#-$80,d0
0000B2D0 6500                       		bcs.s	locret_AE20
0000B2D2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B2D6 6600                       		bne.s	locret_AE20
0000B2D8 5528 0025                  		subq.b	#2,$25(a0)
0000B2DC 3141 0010                  		move.w	d1,$10(a0)
0000B2E0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2E6                            
0000B2E6                            locret_AE20:
0000B2E6 4E75                       		rts	
0000B2E8                            
0000B2E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2E8                            
0000B2E8                            
0000B2E8                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B2E8 323C 0080                  		move.w	#$80,d1
0000B2EC 08E8 0000 0022             		bset	#0,$22(a0)
0000B2F2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2F6 9068 0008                  		sub.w	8(a0),d0
0000B2FA 6400                       		bcc.s	loc_AE40
0000B2FC 4440                       		neg.w	d0
0000B2FE 4441                       		neg.w	d1
0000B300 08A8 0000 0022             		bclr	#0,$22(a0)
0000B306                            
0000B306                            loc_AE40:
0000B306 B042                       		cmp.w	d2,d0
0000B308 4E75                       		rts	
0000B30A                            ; End of function Obj2D_ChkSonic2
0000B30A                            
0000B30A                            ; ===========================================================================
0000B30A                            Ani_obj2D:
0000B30A                            	include "_anim\obj2D.asm"
0000B30A                            ; ---------------------------------------------------------------------------
0000B30A                            ; Animation script - Burrobot enemy but craig
0000B30A                            ; ---------------------------------------------------------------------------
0000B30A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B30C 0000                       		dc.w byte_AE50-Ani_obj2D
0000B30E 0000                       		dc.w byte_AE54-Ani_obj2D
0000B310 0000                       		dc.w byte_AE58-Ani_obj2D
0000B312 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B315 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B319 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B327 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B32A                            		even
0000B32A                            		even
0000B32A                            
0000B32A                            ; ---------------------------------------------------------------------------
0000B32A                            ; Sprite mappings - Burrobot enemy (LZ)
0000B32A                            ; ---------------------------------------------------------------------------
0000B32A                            Map_obj2D:
0000B32A                            	include "_maps\obj2D.asm"
0000B32A                            Map_e3a3:
0000B32A 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B32C 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B32E 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B330 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B332 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B334 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B336 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B338 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B33A 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B33C 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B33E 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B340 02                         Map_e3a3_16: 	dc.b $2
0000B341 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B346 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B34B 02                         Map_e3a3_21: 	dc.b $2
0000B34C EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B351 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B356 02                         Map_e3a3_2C: 	dc.b $2
0000B357 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B35C 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B361 02                         Map_e3a3_37: 	dc.b $2
0000B362 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B367 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B36C 02                         Map_e3a3_42: 	dc.b $2
0000B36D EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B372 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B377 02                         Map_e3a3_4D: 	dc.b $2
0000B378 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B37D FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B382 02                         Map_e3a3_58: 	dc.b $2
0000B383 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B388 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B38D 02                         Map_e3a3_63: 	dc.b $2
0000B38E EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B393 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B398 02                         Map_e3a3_6E: 	dc.b $2
0000B399 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B39E FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B3A3 02                         Map_e3a3_79: 	dc.b $2
0000B3A4 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B3A9 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B3AE 02                         Map_e3a3_84: 	dc.b $2
0000B3AF EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B3B4 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B3BA 00                         	even
0000B3BA 00                         	even
0000B3BA                            
0000B3BA                            ; ===========================================================================
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            ; Object 2F - large moving platforms (MZ)
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            
0000B3BA                            Obj2F:					; XREF: Obj_Index
0000B3BA 7000                       		moveq	#0,d0
0000B3BC 1028 0024                  		move.b	$24(a0),d0
0000B3C0 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B3C4 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B3C8                            ; ===========================================================================
0000B3C8 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B3CA 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B3CC                            
0000B3CC 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B3CE 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B3D0 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B3D2 0140                       		dc.b 1,	$40
0000B3D4 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B3D6 0220                       		dc.b 2,	$20
0000B3D8                            ; ===========================================================================
0000B3D8                            
0000B3D8                            Obj2F_Main:				; XREF: Obj2F_Index
0000B3D8 5428 0024                  		addq.b	#2,$24(a0)
0000B3DC 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B3E4 317C C000 0002             		move.w	#$C000,2(a0)
0000B3EA 117C 0004 0001             		move.b	#4,1(a0)
0000B3F0 117C 0005 0018             		move.b	#5,$18(a0)
0000B3F6 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B3FC 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B402 7000                       		moveq	#0,d0
0000B404 1028 0028                  		move.b	$28(a0),d0
0000B408 E448                       		lsr.w	#2,d0
0000B40A 0240 001C                  		andi.w	#$1C,d0
0000B40E 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B412 3019                       		move.w	(a1)+,d0
0000B414 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B418 214A 0030                  		move.l	a2,$30(a0)
0000B41C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B420 1151 0019                  		move.b	(a1),$19(a0)
0000B424 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B42A 117C 0040 0016             		move.b	#$40,$16(a0)
0000B430 08E8 0004 0001             		bset	#4,1(a0)
0000B436                            
0000B436                            Obj2F_Action:				; XREF: Obj2F_Index
0000B436 6100 0000                  		bsr.w	Obj2F_Types
0000B43A 4A28 0025                  		tst.b	$25(a0)
0000B43E 6700                       		beq.s	Obj2F_Solid
0000B440 7200                       		moveq	#0,d1
0000B442 1228 0019                  		move.b	$19(a0),d1
0000B446 0641 000B                  		addi.w	#$B,d1
0000B44A 6100 C5C6                  		bsr.w	ExitPlatform
0000B44E 0829 0003 0022             		btst	#3,$22(a1)
0000B454 6600 0000                  		bne.w	Obj2F_Slope
0000B458 4228 0025                  		clr.b	$25(a0)
0000B45C 6000                       		bra.s	Obj2F_Display
0000B45E                            ; ===========================================================================
0000B45E                            
0000B45E                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B45E 7200                       		moveq	#0,d1
0000B460 1228 0019                  		move.b	$19(a0),d1
0000B464 0641 000B                  		addi.w	#$B,d1
0000B468 2468 0030                  		movea.l	$30(a0),a2
0000B46C 3428 0008                  		move.w	8(a0),d2
0000B470 6100 D4FE                  		bsr.w	SlopeObject2
0000B474 6000                       		bra.s	Obj2F_Display
0000B476                            ; ===========================================================================
0000B476                            
0000B476                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B476 7200                       		moveq	#0,d1
0000B478 1228 0019                  		move.b	$19(a0),d1
0000B47C 0641 000B                  		addi.w	#$B,d1
0000B480 343C 0020                  		move.w	#$20,d2
0000B484 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B48A 6600                       		bne.s	loc_AF8E
0000B48C 343C 0030                  		move.w	#$30,d2
0000B490                            
0000B490                            loc_AF8E:
0000B490 2468 0030                  		movea.l	$30(a0),a2
0000B494 6100 0000                  		bsr.w	SolidObject2F
0000B498                            
0000B498                            Obj2F_Display:				; XREF: Obj2F_Action
0000B498 6100 0000                  		bsr.w	DisplaySprite
0000B49C 6000 0000                  		bra.w	Obj2F_ChkDel
0000B4A0                            
0000B4A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4A0                            
0000B4A0                            
0000B4A0                            Obj2F_Types:				; XREF: Obj2F_Action
0000B4A0 7000                       		moveq	#0,d0
0000B4A2 1028 0028                  		move.b	$28(a0),d0
0000B4A6 0240 0007                  		andi.w	#7,d0
0000B4AA D040                       		add.w	d0,d0
0000B4AC 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B4B0 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B4B4                            ; End of function Obj2F_Types
0000B4B4                            
0000B4B4                            ; ===========================================================================
0000B4B4 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B4B6 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B4B8 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B4BA 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B4BC 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B4BE 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B4C0                            ; ===========================================================================
0000B4C0                            
0000B4C0                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B4C0 4E75                       		rts			; type 00 platform doesn't move
0000B4C2                            ; ===========================================================================
0000B4C2                            
0000B4C2                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B4C2 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B4C6 323C 0020                  		move.w	#$20,d1
0000B4CA 6000                       		bra.s	Obj2F_Move
0000B4CC                            ; ===========================================================================
0000B4CC                            
0000B4CC                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B4CC 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B4D0 323C 0030                  		move.w	#$30,d1
0000B4D4 6000                       		bra.s	Obj2F_Move
0000B4D6                            ; ===========================================================================
0000B4D6                            
0000B4D6                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B4D6 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B4DA 323C 0040                  		move.w	#$40,d1
0000B4DE 6000                       		bra.s	Obj2F_Move
0000B4E0                            ; ===========================================================================
0000B4E0                            
0000B4E0                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B4E0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B4E4 323C 0060                  		move.w	#$60,d1
0000B4E8                            
0000B4E8                            Obj2F_Move:
0000B4E8 0828 0003 0028             		btst	#3,$28(a0)
0000B4EE 6700                       		beq.s	loc_AFF2
0000B4F0 4440                       		neg.w	d0
0000B4F2 D041                       		add.w	d1,d0
0000B4F4                            
0000B4F4                            loc_AFF2:
0000B4F4 3228 002C                  		move.w	$2C(a0),d1
0000B4F8 9240                       		sub.w	d0,d1
0000B4FA 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B4FE 4E75                       		rts	
0000B500                            ; ===========================================================================
0000B500                            
0000B500                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B500 1028 0034                  		move.b	$34(a0),d0
0000B504 4A28 0025                  		tst.b	$25(a0)
0000B508 6600                       		bne.s	loc_B010
0000B50A 5500                       		subq.b	#2,d0
0000B50C 6400                       		bcc.s	loc_B01C
0000B50E 7000                       		moveq	#0,d0
0000B510 6000                       		bra.s	loc_B01C
0000B512                            ; ===========================================================================
0000B512                            
0000B512                            loc_B010:
0000B512 5800                       		addq.b	#4,d0
0000B514 0C00 0040                  		cmpi.b	#$40,d0
0000B518 6500                       		bcs.s	loc_B01C
0000B51A 103C 0040                  		move.b	#$40,d0
0000B51E                            
0000B51E                            loc_B01C:
0000B51E 1140 0034                  		move.b	d0,$34(a0)
0000B522 4EB9 0000 2C22             		jsr	(CalcSine).l
0000B528 E848                       		lsr.w	#4,d0
0000B52A 3200                       		move.w	d0,d1
0000B52C D068 002C                  		add.w	$2C(a0),d0
0000B530 3140 000C                  		move.w	d0,$C(a0)
0000B534 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B53A 6600                       		bne.s	loc_B07A
0000B53C 4A28 0035                  		tst.b	$35(a0)
0000B540 6600                       		bne.s	loc_B07A
0000B542 117C 0001 0035             		move.b	#1,$35(a0)
0000B548 6100 0000                  		bsr.w	SingleObjLoad2
0000B54C 6600                       		bne.s	loc_B07A
0000B54E 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B552 3368 0008 0008             		move.w	8(a0),8(a1)
0000B558 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B55E 5069 002C                  		addq.w	#8,$2C(a1)
0000B562 5769 002C                  		subq.w	#3,$2C(a1)
0000B566 0469 0040 0008             		subi.w	#$40,8(a1)
0000B56C 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B572 2348 0038                  		move.l	a0,$38(a1)
0000B576 2448                       		movea.l	a0,a2
0000B578 6100                       		bsr.s	sub_B09C
0000B57A                            
0000B57A                            loc_B07A:
0000B57A 7400                       		moveq	#0,d2
0000B57C 45E8 0036                  		lea	$36(a0),a2
0000B580 141A                       		move.b	(a2)+,d2
0000B582 5302                       		subq.b	#1,d2
0000B584 6500                       		bcs.s	locret_B09A
0000B586                            
0000B586                            loc_B086:
0000B586 7000                       		moveq	#0,d0
0000B588 101A                       		move.b	(a2)+,d0
0000B58A ED48                       		lsl.w	#6,d0
0000B58C 0640 D000                  		addi.w	#-$3000,d0
0000B590 3240                       		movea.w	d0,a1
0000B592 3341 003C                  		move.w	d1,$3C(a1)
0000B596 51CA FFEE                  		dbf	d2,loc_B086
0000B59A                            
0000B59A                            locret_B09A:
0000B59A 4E75                       		rts	
0000B59C                            
0000B59C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B59C                            
0000B59C                            
0000B59C                            sub_B09C:
0000B59C 45EA 0036                  		lea	$36(a2),a2
0000B5A0 7000                       		moveq	#0,d0
0000B5A2 1012                       		move.b	(a2),d0
0000B5A4 5212                       		addq.b	#1,(a2)
0000B5A6 45F2 0001                  		lea	1(a2,d0.w),a2
0000B5AA 3009                       		move.w	a1,d0
0000B5AC 0440 D000                  		subi.w	#-$3000,d0
0000B5B0 EC48                       		lsr.w	#6,d0
0000B5B2 0240 007F                  		andi.w	#$7F,d0
0000B5B6 1480                       		move.b	d0,(a2)
0000B5B8 4E75                       		rts	
0000B5BA                            ; End of function sub_B09C
0000B5BA                            
0000B5BA                            ; ===========================================================================
0000B5BA                            
0000B5BA                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B5BA 4A28 0035                  		tst.b	$35(a0)
0000B5BE 6700                       		beq.s	loc_B0C6
0000B5C0 4A28 0001                  		tst.b	1(a0)
0000B5C4 6A00                       		bpl.s	Obj2F_DelFlames
0000B5C6                            
0000B5C6                            loc_B0C6:
0000B5C6 3028 002A                  		move.w	$2A(a0),d0
0000B5CA 0240 FF80                  		andi.w	#$FF80,d0
0000B5CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000B5D2 0441 0080                  		subi.w	#$80,d1
0000B5D6 0241 FF80                  		andi.w	#$FF80,d1
0000B5DA 9041                       		sub.w	d1,d0
0000B5DC 0C40 0280                  		cmpi.w	#$280,d0
0000B5E0 6200 0000                  		bhi.w	DeleteObject
0000B5E4 4E75                       		rts	
0000B5E6                            ; ===========================================================================
0000B5E6                            
0000B5E6                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B5E6 7400                       		moveq	#0,d2
0000B5E8                            
0000B5E8                            loc_B0E8:
0000B5E8 45E8 0036                  		lea	$36(a0),a2
0000B5EC 1412                       		move.b	(a2),d2
0000B5EE 421A                       		clr.b	(a2)+
0000B5F0 5302                       		subq.b	#1,d2
0000B5F2 6500                       		bcs.s	locret_B116
0000B5F4                            
0000B5F4                            loc_B0F4:
0000B5F4 7000                       		moveq	#0,d0
0000B5F6 1012                       		move.b	(a2),d0
0000B5F8 421A                       		clr.b	(a2)+
0000B5FA ED48                       		lsl.w	#6,d0
0000B5FC 0640 D000                  		addi.w	#-$3000,d0
0000B600 3240                       		movea.w	d0,a1
0000B602 6100 0000                  		bsr.w	DeleteObject2
0000B606 51CA FFEC                  		dbf	d2,loc_B0F4
0000B60A 117C 0000 0035             		move.b	#0,$35(a0)
0000B610 117C 0000 0034             		move.b	#0,$34(a0)
0000B616                            
0000B616                            locret_B116:
0000B616 4E75                       		rts	
0000B618                            ; ===========================================================================
0000B618                            ; ---------------------------------------------------------------------------
0000B618                            ; Collision data for large moving platforms (MZ)
0000B618                            ; ---------------------------------------------------------------------------
0000B618                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B664                            		even
0000B664                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B690                            		even
0000B690                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B6DC                            		even
0000B6DC                            ; ===========================================================================
0000B6DC                            ; ---------------------------------------------------------------------------
0000B6DC                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B6DC                            ; (appears when	you walk on sinking platforms)
0000B6DC                            ; ---------------------------------------------------------------------------
0000B6DC                            
0000B6DC                            Obj35:					; XREF: Obj_Index
0000B6DC 7000                       		moveq	#0,d0
0000B6DE 1028 0024                  		move.b	$24(a0),d0
0000B6E2 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B6E6 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B6EA                            ; ===========================================================================
0000B6EA 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B6EC 0000                       		dc.w loc_B238-Obj35_Index
0000B6EE 0000                       		dc.w Obj35_Move-Obj35_Index
0000B6F0                            ; ===========================================================================
0000B6F0                            
0000B6F0                            Obj35_Main:				; XREF: Obj35_Index
0000B6F0 5428 0024                  		addq.b	#2,$24(a0)
0000B6F4 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B6FC 317C 0345 0002             		move.w	#$345,2(a0)
0000B702 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B708 117C 0004 0001             		move.b	#4,1(a0)
0000B70E 117C 0001 0018             		move.b	#1,$18(a0)
0000B714 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B71A 117C 0008 0019             		move.b	#8,$19(a0)
0000B720 303C 00C8                  		move.w	#$C8,d0
0000B724 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B72A 4A28 0028                  		tst.b	$28(a0)
0000B72E 6700                       		beq.s	loc_B238
0000B730 5428 0024                  		addq.b	#2,$24(a0)
0000B734 6000 0000                  		bra.w	Obj35_Move
0000B738                            ; ===========================================================================
0000B738                            
0000B738                            loc_B238:				; XREF: Obj35_Index
0000B738 2268 0030                  		movea.l	$30(a0),a1
0000B73C 3228 0008                  		move.w	8(a0),d1
0000B740 9268 002A                  		sub.w	$2A(a0),d1
0000B744 0641 000C                  		addi.w	#$C,d1
0000B748 3001                       		move.w	d1,d0
0000B74A E248                       		lsr.w	#1,d0
0000B74C 1031 0000                  		move.b	(a1,d0.w),d0
0000B750 4440                       		neg.w	d0
0000B752 D068 002C                  		add.w	$2C(a0),d0
0000B756 3400                       		move.w	d0,d2
0000B758 D068 003C                  		add.w	$3C(a0),d0
0000B75C 3140 000C                  		move.w	d0,$C(a0)
0000B760 0C41 0084                  		cmpi.w	#$84,d1
0000B764 6400                       		bcc.s	loc_B2B0
0000B766 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B76E 0C41 0080                  		cmpi.w	#$80,d1
0000B772 6400                       		bcc.s	loc_B2B0
0000B774 2028 0008                  		move.l	8(a0),d0
0000B778 0680 0008 0000             		addi.l	#$80000,d0
0000B77E 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B784 6600                       		bne.s	loc_B2B0
0000B786 6100 0000                  		bsr.w	SingleObjLoad2
0000B78A 6600                       		bne.s	loc_B2B0
0000B78C 12BC 0035                  		move.b	#$35,0(a1)
0000B790 3368 0008 0008             		move.w	8(a0),8(a1)
0000B796 3342 002C                  		move.w	d2,$2C(a1)
0000B79A 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B7A0 137C 0001 0028             		move.b	#1,$28(a1)
0000B7A6 2468 0038                  		movea.l	$38(a0),a2
0000B7AA 6100 FDF0                  		bsr.w	sub_B09C
0000B7AE                            
0000B7AE                            loc_B2B0:
0000B7AE 6000                       		bra.s	Obj35_Animate
0000B7B0                            ; ===========================================================================
0000B7B0                            
0000B7B0                            Obj35_Move:				; XREF: Obj35_Index
0000B7B0 3028 002C                  		move.w	$2C(a0),d0
0000B7B4 D068 003C                  		add.w	$3C(a0),d0
0000B7B8 3140 000C                  		move.w	d0,$C(a0)
0000B7BC                            
0000B7BC                            Obj35_Animate:				; XREF: loc_B238
0000B7BC 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B7C2 6100 F47E                  		bsr.w	AnimateSprite
0000B7C6 6000 0000                  		bra.w	DisplaySprite
0000B7CA                            ; ===========================================================================
0000B7CA                            Ani_obj35:
0000B7CA                            	include "_anim\obj35.asm"
0000B7CA                            ; ---------------------------------------------------------------------------
0000B7CA                            ; Animation script - fireball that sits on the	floor (MZ)
0000B7CA                            ; ---------------------------------------------------------------------------
0000B7CA 0000                       		dc.w byte_B2CE-Ani_obj35
0000B7CC 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B7D2                            		even
0000B7D2                            		even
0000B7D2                            
0000B7D2                            ; ---------------------------------------------------------------------------
0000B7D2                            ; Sprite mappings - large moving platforms (MZ)
0000B7D2                            ; ---------------------------------------------------------------------------
0000B7D2                            Map_obj2F:
0000B7D2                            	include "_maps\obj2F.asm"
0000B7D2                            ; ---------------------------------------------------------------------------
0000B7D2                            ; Sprite mappings - large moving platforms (MZ)
0000B7D2                            ; ---------------------------------------------------------------------------
0000B7D2 0000                       		dc.w byte_B2DA-Map_obj2F
0000B7D4 0000                       		dc.w byte_B31C-Map_obj2F
0000B7D6 0000                       		dc.w byte_B34F-Map_obj2F
0000B7D8 0D                         byte_B2DA:	dc.b $D
0000B7D9 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B7DE F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B7E3 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7E8 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B7ED F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B7F2 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B7F7 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B7FC D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B801 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B806 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B80B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B810 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B815 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B81A 0A                         byte_B31C:	dc.b $A
0000B81B D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B820 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B825 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B82A C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B82F E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B834 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B839 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B83E E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B843 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B848 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B84D 06                         byte_B34F:	dc.b 6
0000B84E D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B853 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B858 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B85D D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B862 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B867 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B86C                            		even
0000B86C                            		even
0000B86C                            
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C                            Map_obj14:
0000B86C                            	include "_maps\obj14.asm"
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C 0000                       		dc.w byte_B37A-Map_obj14
0000B86E 0000                       		dc.w byte_B380-Map_obj14
0000B870 0000                       		dc.w byte_B386-Map_obj14
0000B872 0000                       		dc.w byte_B38C-Map_obj14
0000B874 0000                       		dc.w byte_B392-Map_obj14
0000B876 0000                       		dc.w byte_B398-Map_obj14
0000B878 01                         byte_B37A:	dc.b 1
0000B879 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B87E 01                         byte_B380:	dc.b 1
0000B87F E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B884 01                         byte_B386:	dc.b 1
0000B885 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B88A 01                         byte_B38C:	dc.b 1
0000B88B F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B890 01                         byte_B392:	dc.b 1
0000B891 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B896 01                         byte_B398:	dc.b 1
0000B897 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B89C                            		even
0000B89C                            		even
0000B89C                            
0000B89C                            ; ===========================================================================
0000B89C                            ; ---------------------------------------------------------------------------
0000B89C                            ; Object 30 - large green glassy blocks	(MZ)
0000B89C                            ; ---------------------------------------------------------------------------
0000B89C                            
0000B89C                            Obj30:					; XREF: Obj_Index
0000B89C 7000                       		moveq	#0,d0
0000B89E 1028 0024                  		move.b	$24(a0),d0
0000B8A2 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B8A6 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B8AA 3028 0008                  		move.w	8(a0),d0
0000B8AE 0240 FF80                  		andi.w	#$FF80,d0
0000B8B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8B6 0441 0080                  		subi.w	#$80,d1
0000B8BA 0241 FF80                  		andi.w	#$FF80,d1
0000B8BE 9041                       		sub.w	d1,d0
0000B8C0 0C40 0280                  		cmpi.w	#$280,d0
0000B8C4 6200 0000                  		bhi.w	Obj30_Delete
0000B8C8 6000 0000                  		bra.w	DisplaySprite
0000B8CC                            ; ===========================================================================
0000B8CC                            
0000B8CC                            Obj30_Delete:
0000B8CC 6000 0000                  		bra.w	DeleteObject
0000B8D0                            ; ===========================================================================
0000B8D0 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B8D2 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B8D4 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B8D6 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B8D8 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B8DA                            
0000B8DA 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B8DD 0400 01                    		dc.b 4,	0, 1
0000B8E0 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B8E3 0800 01                    		dc.b 8,	0, 1
0000B8E6                            ; ===========================================================================
0000B8E6                            
0000B8E6                            Obj30_Main:				; XREF: Obj30_Index
0000B8E6 45F9 0000 B8DA             		lea	(Obj30_Vars1).l,a2
0000B8EC 7201                       		moveq	#1,d1
0000B8EE 117C 0048 0016             		move.b	#$48,$16(a0)
0000B8F4 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B8FA 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B8FC 45F9 0000 B8E0             		lea	(Obj30_Vars2).l,a2
0000B902 7201                       		moveq	#1,d1
0000B904 117C 0038 0016             		move.b	#$38,$16(a0)
0000B90A                            
0000B90A                            loc_B40C:
0000B90A 2248                       		movea.l	a0,a1
0000B90C 6000                       		bra.s	Obj30_Load	; load main object
0000B90E                            ; ===========================================================================
0000B90E                            
0000B90E                            Obj30_Loop:
0000B90E 6100 0000                  		bsr.w	SingleObjLoad2
0000B912 6600                       		bne.s	loc_B480
0000B914                            
0000B914                            Obj30_Load:				; XREF: Obj30_Main
0000B914 135A 0024                  		move.b	(a2)+,$24(a1)
0000B918 12BC 0030                  		move.b	#$30,0(a1)
0000B91C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B922 101A                       		move.b	(a2)+,d0
0000B924 4880                       		ext.w	d0
0000B926 D068 000C                  		add.w	$C(a0),d0
0000B92A 3340 000C                  		move.w	d0,$C(a1)
0000B92E 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B936 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B93C 137C 0004 0001             		move.b	#4,1(a1)
0000B942 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B948 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B94E 137C 0020 0019             		move.b	#$20,$19(a1)
0000B954 137C 0004 0018             		move.b	#4,$18(a1)
0000B95A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B95E 2348 003C                  		move.l	a0,$3C(a1)
0000B962 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B966                            
0000B966 137C 0010 0019             		move.b	#$10,$19(a1)
0000B96C 137C 0003 0018             		move.b	#3,$18(a1)
0000B972 5029 0028                  		addq.b	#8,$28(a1)
0000B976 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B97C                            
0000B97C                            loc_B480:
0000B97C 317C 0090 0032             		move.w	#$90,$32(a0)
0000B982 08E8 0004 0001             		bset	#4,1(a0)
0000B988                            
0000B988                            Obj30_Block012:				; XREF: Obj30_Index
0000B988 6100 0000                  		bsr.w	Obj30_Types
0000B98C 323C 002B                  		move.w	#$2B,d1
0000B990 343C 0048                  		move.w	#$48,d2
0000B994 363C 0049                  		move.w	#$49,d3
0000B998 3828 0008                  		move.w	8(a0),d4
0000B99C 6000 0000                  		bra.w	SolidObject
0000B9A0                            ; ===========================================================================
0000B9A0                            
0000B9A0                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B9A0 2268 003C                  		movea.l	$3C(a0),a1
0000B9A4 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9AA 6000 0000                  		bra.w	Obj30_Types
0000B9AE                            ; ===========================================================================
0000B9AE                            
0000B9AE                            Obj30_Block34:				; XREF: Obj30_Index
0000B9AE 6100 0000                  		bsr.w	Obj30_Types
0000B9B2 323C 002B                  		move.w	#$2B,d1
0000B9B6 343C 0038                  		move.w	#$38,d2
0000B9BA 363C 0039                  		move.w	#$39,d3
0000B9BE 3828 0008                  		move.w	8(a0),d4
0000B9C2 6000 0000                  		bra.w	SolidObject
0000B9C6                            ; ===========================================================================
0000B9C6                            
0000B9C6                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B9C6 2268 003C                  		movea.l	$3C(a0),a1
0000B9CA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9D0 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B9D6 6000 0002                  		bra.w	*+4
0000B9DA                            
0000B9DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9DA                            
0000B9DA                            
0000B9DA                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B9DA 7000                       		moveq	#0,d0
0000B9DC 1028 0028                  		move.b	$28(a0),d0
0000B9E0 0240 0007                  		andi.w	#7,d0
0000B9E4 D040                       		add.w	d0,d0
0000B9E6 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B9EA 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B9EE                            ; End of function Obj30_Types
0000B9EE                            
0000B9EE                            ; ===========================================================================
0000B9EE 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B9F0 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B9F2 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B9F4 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B9F6 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B9F8                            ; ===========================================================================
0000B9F8                            
0000B9F8                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B9F8 4E75                       		rts	
0000B9FA                            ; ===========================================================================
0000B9FA                            
0000B9FA                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B9FA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9FE 323C 0040                  		move.w	#$40,d1
0000BA02 6000                       		bra.s	loc_B514
0000BA04                            ; ===========================================================================
0000BA04                            
0000BA04                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BA04 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA08 323C 0040                  		move.w	#$40,d1
0000BA0C 4440                       		neg.w	d0
0000BA0E D041                       		add.w	d1,d0
0000BA10                            
0000BA10                            loc_B514:				; XREF: Obj30_Type01
0000BA10 0828 0003 0028             		btst	#3,$28(a0)
0000BA16 6700                       		beq.s	loc_B526
0000BA18 4440                       		neg.w	d0
0000BA1A D041                       		add.w	d1,d0
0000BA1C E208                       		lsr.b	#1,d0
0000BA1E 0640 0020                  		addi.w	#$20,d0
0000BA22                            
0000BA22                            loc_B526:
0000BA22 6000 0000                  		bra.w	loc_B5EE
0000BA26                            ; ===========================================================================
0000BA26                            
0000BA26                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BA26 0828 0003 0028             		btst	#3,$28(a0)
0000BA2C 6700                       		beq.s	loc_B53E
0000BA2E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA32 0440 0010                  		subi.w	#$10,d0
0000BA36 6000 0000                  		bra.w	loc_B5EE
0000BA3A                            ; ===========================================================================
0000BA3A                            
0000BA3A                            loc_B53E:
0000BA3A 0828 0003 0022             		btst	#3,$22(a0)
0000BA40 6600                       		bne.s	loc_B54E
0000BA42 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA48 6000                       		bra.s	loc_B582
0000BA4A                            ; ===========================================================================
0000BA4A                            
0000BA4A                            loc_B54E:
0000BA4A 4A28 0034                  		tst.b	$34(a0)
0000BA4E 6600                       		bne.s	loc_B582
0000BA50 117C 0001 0034             		move.b	#1,$34(a0)
0000BA56 08E8 0000 0035             		bset	#0,$35(a0)
0000BA5C 6700                       		beq.s	loc_B582
0000BA5E 08E8 0007 0034             		bset	#7,$34(a0)
0000BA64 317C 0010 0036             		move.w	#$10,$36(a0)
0000BA6A 117C 000A 0038             		move.b	#$A,$38(a0)
0000BA70 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BA76 6600                       		bne.s	loc_B582
0000BA78 317C 0040 0036             		move.w	#$40,$36(a0)
0000BA7E                            
0000BA7E                            loc_B582:
0000BA7E 4A28 0034                  		tst.b	$34(a0)
0000BA82 6A00                       		bpl.s	loc_B5AA
0000BA84 4A28 0038                  		tst.b	$38(a0)
0000BA88 6700                       		beq.s	loc_B594
0000BA8A 5328 0038                  		subq.b	#1,$38(a0)
0000BA8E 6600                       		bne.s	loc_B5AA
0000BA90                            
0000BA90                            loc_B594:
0000BA90 4A68 0032                  		tst.w	$32(a0)
0000BA94 6700                       		beq.s	loc_B5A4
0000BA96 5368 0032                  		subq.w	#1,$32(a0)
0000BA9A 5368 0036                  		subq.w	#1,$36(a0)
0000BA9E 6600                       		bne.s	loc_B5AA
0000BAA0                            
0000BAA0                            loc_B5A4:
0000BAA0 08A8 0007 0034             		bclr	#7,$34(a0)
0000BAA6                            
0000BAA6                            loc_B5AA:
0000BAA6 3028 0032                  		move.w	$32(a0),d0
0000BAAA 6000                       		bra.s	loc_B5EE
0000BAAC                            ; ===========================================================================
0000BAAC                            
0000BAAC                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BAAC 0828 0003 0028             		btst	#3,$28(a0)
0000BAB2 6700                       		beq.s	Obj30_ChkSwitch
0000BAB4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BAB8 0440 0010                  		subi.w	#$10,d0
0000BABC 6000                       		bra.s	loc_B5EE
0000BABE                            ; ===========================================================================
0000BABE                            
0000BABE                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BABE 4A28 0034                  		tst.b	$34(a0)
0000BAC2 6600                       		bne.s	loc_B5E0
0000BAC4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BAC8 7000                       		moveq	#0,d0
0000BACA 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BACE E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BAD0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BAD4 6700                       		beq.s	loc_B5EA	; if not, branch
0000BAD6 117C 0001 0034             		move.b	#1,$34(a0)
0000BADC                            
0000BADC                            loc_B5E0:
0000BADC 4A68 0032                  		tst.w	$32(a0)
0000BAE0 6700                       		beq.s	loc_B5EA
0000BAE2 5568 0032                  		subq.w	#2,$32(a0)
0000BAE6                            
0000BAE6                            loc_B5EA:
0000BAE6 3028 0032                  		move.w	$32(a0),d0
0000BAEA                            
0000BAEA                            loc_B5EE:
0000BAEA 3228 0030                  		move.w	$30(a0),d1
0000BAEE 9240                       		sub.w	d0,d1
0000BAF0 3141 000C                  		move.w	d1,$C(a0)
0000BAF4 4E75                       		rts	
0000BAF6                            ; ===========================================================================
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6                            Map_obj30:
0000BAF6                            	include "_maps\obj30.asm"
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6 0000                       		dc.w byte_B600-Map_obj30
0000BAF8 0000                       		dc.w byte_B63D-Map_obj30
0000BAFA 0000                       		dc.w byte_B648-Map_obj30
0000BAFC 0C                         byte_B600:	dc.b $C
0000BAFD B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BB02 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BB07 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BB0C C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BB11 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BB16 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BB1B 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BB20 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BB25 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BB2A 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BB2F 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BB34 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB39 02                         byte_B63D:	dc.b 2
0000BB3A 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB3F 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB44 0A                         byte_B648:	dc.b $A
0000BB45 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BB4A C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BB4F D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BB54 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BB59 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BB5E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BB63 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BB68 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BB6D 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BB72 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BB78 00                         		even
0000BB78 00                         		even
0000BB78                            
0000BB78                            ; ===========================================================================
0000BB78                            ; ---------------------------------------------------------------------------
0000BB78                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BB78                            ; ---------------------------------------------------------------------------
0000BB78                            
0000BB78                            Obj31:					; XREF: Obj_Index
0000BB78 7000                       		moveq	#0,d0
0000BB7A 1028 0024                  		move.b	$24(a0),d0
0000BB7E 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BB82 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BB86                            ; ===========================================================================
0000BB86 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BB88 0000                       		dc.w loc_B798-Obj31_Index
0000BB8A 0000                       		dc.w loc_B7FE-Obj31_Index
0000BB8C 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BB8E 0000                       		dc.w loc_B7E2-Obj31_Index
0000BB90                            
0000BB90 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BB92 0100                       		dc.b 1,	0
0000BB94                            
0000BB94 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BB97 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BB9A 08CC 03                    		dc.b 8,	$CC, 3
0000BB9D 06F0 02                    		dc.b 6,	$F0, 2
0000BBA0                            
0000BBA0 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BBA4 5000 7800                  		dc.w $5000, $7800
0000BBA8 3800 5800                  		dc.w $3800, $5800
0000BBAC B800                       		dc.w $B800
0000BBAE                            ; ===========================================================================
0000BBAE                            
0000BBAE                            Obj31_Main:				; XREF: Obj31_Index
0000BBAE 7000                       		moveq	#0,d0
0000BBB0 1028 0028                  		move.b	$28(a0),d0
0000BBB4 6A00                       		bpl.s	loc_B6CE
0000BBB6 0240 007F                  		andi.w	#$7F,d0
0000BBBA D040                       		add.w	d0,d0
0000BBBC 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BBC0 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BBC4 101A                       		move.b	(a2)+,d0
0000BBC6 1140 0028                  		move.b	d0,$28(a0)
0000BBCA                            
0000BBCA                            loc_B6CE:
0000BBCA 0200 000F                  		andi.b	#$F,d0
0000BBCE D040                       		add.w	d0,d0
0000BBD0 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BBD4 4A40                       		tst.w	d0
0000BBD6 6600                       		bne.s	loc_B6E0
0000BBD8 3142 0032                  		move.w	d2,$32(a0)
0000BBDC                            
0000BBDC                            loc_B6E0:
0000BBDC 45F9 0000 BB94             		lea	(Obj31_Var).l,a2
0000BBE2 2248                       		movea.l	a0,a1
0000BBE4 7203                       		moveq	#3,d1
0000BBE6 6000                       		bra.s	Obj31_MakeStomper
0000BBE8                            ; ===========================================================================
0000BBE8                            
0000BBE8                            Obj31_Loop:
0000BBE8 6100 0000                  		bsr.w	SingleObjLoad2
0000BBEC 6600 0000                  		bne.w	Obj31_SetSize
0000BBF0                            
0000BBF0                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BBF0 135A 0024                  		move.b	(a2)+,$24(a1)
0000BBF4 12BC 0031                  		move.b	#$31,0(a1)
0000BBF8 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBFE 101A                       		move.b	(a2)+,d0
0000BC00 4880                       		ext.w	d0
0000BC02 D068 000C                  		add.w	$C(a0),d0
0000BC06 3340 000C                  		move.w	d0,$C(a1)
0000BC0A 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BC12 337C 0300 0002             		move.w	#$300,2(a1)
0000BC18 137C 0004 0001             		move.b	#4,1(a1)
0000BC1E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BC24 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BC2A 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC30 3342 0034                  		move.w	d2,$34(a1)
0000BC34 137C 0004 0018             		move.b	#4,$18(a1)
0000BC3A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC3E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC44 6600                       		bne.s	loc_B76A
0000BC46 5341                       		subq.w	#1,d1
0000BC48 1028 0028                  		move.b	$28(a0),d0
0000BC4C 0240 00F0                  		andi.w	#$F0,d0
0000BC50 0C40 0020                  		cmpi.w	#$20,d0
0000BC54 679A                       		beq.s	Obj31_MakeStomper
0000BC56 137C 0038 0019             		move.b	#$38,$19(a1)
0000BC5C 137C 0090 0020             		move.b	#$90,$20(a1)
0000BC62 5241                       		addq.w	#1,d1
0000BC64                            
0000BC64                            loc_B76A:
0000BC64 2348 003C                  		move.l	a0,$3C(a1)
0000BC68 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BC6C                            
0000BC6C 137C 0003 0018             		move.b	#3,$18(a1)
0000BC72                            
0000BC72                            Obj31_SetSize:
0000BC72 7000                       		moveq	#0,d0
0000BC74 1028 0028                  		move.b	$28(a0),d0
0000BC78 E648                       		lsr.w	#3,d0
0000BC7A 0200 000E                  		andi.b	#$E,d0
0000BC7E 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BC82 115A 0019                  		move.b	(a2)+,$19(a0)
0000BC86 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BC8A 6000                       		bra.s	loc_B798
0000BC8C                            ; ===========================================================================
0000BC8C 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BC8E 3009                       		dc.b $30, 9
0000BC90 100A                       		dc.b $10, $A
0000BC92                            ; ===========================================================================
0000BC92                            
0000BC92                            loc_B798:				; XREF: Obj31_Index
0000BC92 6100 0000                  		bsr.w	Obj31_Types
0000BC96 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BC9C 7200                       		moveq	#0,d1
0000BC9E 1228 0019                  		move.b	$19(a0),d1
0000BCA2 0641 000B                  		addi.w	#$B,d1
0000BCA6 343C 000C                  		move.w	#$C,d2
0000BCAA 363C 000D                  		move.w	#$D,d3
0000BCAE 3828 0008                  		move.w	8(a0),d4
0000BCB2 6100 0000                  		bsr.w	SolidObject
0000BCB6 0828 0003 0022             		btst	#3,$22(a0)
0000BCBC 6700                       		beq.s	Obj31_Display
0000BCBE 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BCC4 6400                       		bcc.s	Obj31_Display
0000BCC6 2448                       		movea.l	a0,a2
0000BCC8 41F8 D000                  		lea	($FFFFD000).w,a0
0000BCCC 4EB9 0000 0000             		jsr	KillSonic
0000BCD2 204A                       		movea.l	a2,a0
0000BCD4                            
0000BCD4                            Obj31_Display:
0000BCD4 6100 0000                  		bsr.w	DisplaySprite
0000BCD8 6000 0000                  		bra.w	Obj31_ChkDel
0000BCDC                            ; ===========================================================================
0000BCDC                            
0000BCDC                            loc_B7E2:				; XREF: Obj31_Index
0000BCDC 117C 0080 0016             		move.b	#$80,$16(a0)
0000BCE2 08E8 0004 0001             		bset	#4,1(a0)
0000BCE8 2268 003C                  		movea.l	$3C(a0),a1
0000BCEC 1029 0032                  		move.b	$32(a1),d0
0000BCF0 EA08                       		lsr.b	#5,d0
0000BCF2 5600                       		addq.b	#3,d0
0000BCF4 1140 001A                  		move.b	d0,$1A(a0)
0000BCF8                            
0000BCF8                            loc_B7FE:				; XREF: Obj31_Index
0000BCF8 2268 003C                  		movea.l	$3C(a0),a1
0000BCFC 7000                       		moveq	#0,d0
0000BCFE 1029 0032                  		move.b	$32(a1),d0
0000BD02 D068 0030                  		add.w	$30(a0),d0
0000BD06 3140 000C                  		move.w	d0,$C(a0)
0000BD0A                            
0000BD0A                            Obj31_Display2:				; XREF: Obj31_Index
0000BD0A 6100 0000                  		bsr.w	DisplaySprite
0000BD0E                            
0000BD0E                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BD0E 3028 0008                  		move.w	8(a0),d0
0000BD12 0240 FF80                  		andi.w	#$FF80,d0
0000BD16 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD1A 0441 0080                  		subi.w	#$80,d1
0000BD1E 0241 FF80                  		andi.w	#$FF80,d1
0000BD22 9041                       		sub.w	d1,d0
0000BD24 0C40 0280                  		cmpi.w	#$280,d0
0000BD28 6200 0000                  		bhi.w	DeleteObject
0000BD2C 4E75                       		rts	
0000BD2E                            ; ===========================================================================
0000BD2E                            
0000BD2E                            Obj31_Types:				; XREF: loc_B798
0000BD2E 1028 0028                  		move.b	$28(a0),d0
0000BD32 0240 000F                  		andi.w	#$F,d0
0000BD36 D040                       		add.w	d0,d0
0000BD38 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD3C 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD40                            ; ===========================================================================
0000BD40 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD42 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD44 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD46 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD48 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD4A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD4C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD4E                            ; ===========================================================================
0000BD4E                            
0000BD4E                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BD4E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BD52 7000                       		moveq	#0,d0
0000BD54 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BD58 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BD5C 6700                       		beq.s	loc_B8A8	; if not, branch
0000BD5E 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BD62 6A00                       		bpl.s	loc_B872
0000BD64 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD6A 6700                       		beq.s	loc_B8A0
0000BD6C                            
0000BD6C                            loc_B872:
0000BD6C 4A68 0032                  		tst.w	$32(a0)
0000BD70 6700                       		beq.s	loc_B8A0
0000BD72 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD76 0200 000F                  		andi.b	#$F,d0
0000BD7A 6600                       		bne.s	loc_B892
0000BD7C 4A28 0001                  		tst.b	1(a0)
0000BD80 6A00                       		bpl.s	loc_B892
0000BD82 303C 00C7                  		move.w	#$C7,d0
0000BD86 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BD8C                            
0000BD8C                            loc_B892:
0000BD8C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BD92 6400                       		bcc.s	Obj31_Restart
0000BD94 317C 0000 0032             		move.w	#0,$32(a0)
0000BD9A                            
0000BD9A                            loc_B8A0:
0000BD9A 317C 0000 0012             		move.w	#0,$12(a0)
0000BDA0 6000                       		bra.s	Obj31_Restart
0000BDA2                            ; ===========================================================================
0000BDA2                            
0000BDA2                            loc_B8A8:				; XREF: Obj31_Type00
0000BDA2 3228 0034                  		move.w	$34(a0),d1
0000BDA6 B268 0032                  		cmp.w	$32(a0),d1
0000BDAA 6700                       		beq.s	Obj31_Restart
0000BDAC 3028 0012                  		move.w	$12(a0),d0
0000BDB0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BDB6 D168 0032                  		add.w	d0,$32(a0)
0000BDBA B268 0032                  		cmp.w	$32(a0),d1
0000BDBE 6200                       		bhi.s	Obj31_Restart
0000BDC0 3141 0032                  		move.w	d1,$32(a0)
0000BDC4 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BDCA 4A28 0001                  		tst.b	1(a0)
0000BDCE 6A00                       		bpl.s	Obj31_Restart
0000BDD0 303C 00BD                  		move.w	#$BD,d0
0000BDD4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BDDA                            
0000BDDA                            Obj31_Restart:
0000BDDA 7000                       		moveq	#0,d0
0000BDDC 1028 0032                  		move.b	$32(a0),d0
0000BDE0 D068 0030                  		add.w	$30(a0),d0
0000BDE4 3140 000C                  		move.w	d0,$C(a0)
0000BDE8 4E75                       		rts	
0000BDEA                            ; ===========================================================================
0000BDEA                            
0000BDEA                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BDEA 4A68 0036                  		tst.w	$36(a0)
0000BDEE 6700                       		beq.s	loc_B938
0000BDF0 4A68 0038                  		tst.w	$38(a0)
0000BDF4 6700                       		beq.s	loc_B902
0000BDF6 5368 0038                  		subq.w	#1,$38(a0)
0000BDFA 6000                       		bra.s	loc_B97C
0000BDFC                            ; ===========================================================================
0000BDFC                            
0000BDFC                            loc_B902:
0000BDFC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BE00 0200 000F                  		andi.b	#$F,d0
0000BE04 6600                       		bne.s	loc_B91C
0000BE06 4A28 0001                  		tst.b	1(a0)
0000BE0A 6A00                       		bpl.s	loc_B91C
0000BE0C 303C 00C7                  		move.w	#$C7,d0
0000BE10 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BE16                            
0000BE16                            loc_B91C:
0000BE16 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE1C 6400                       		bcc.s	loc_B97C
0000BE1E 317C 0000 0032             		move.w	#0,$32(a0)
0000BE24 317C 0000 0012             		move.w	#0,$12(a0)
0000BE2A 317C 0000 0036             		move.w	#0,$36(a0)
0000BE30 6000                       		bra.s	loc_B97C
0000BE32                            ; ===========================================================================
0000BE32                            
0000BE32                            loc_B938:				; XREF: Obj31_Type01
0000BE32 3228 0034                  		move.w	$34(a0),d1
0000BE36 B268 0032                  		cmp.w	$32(a0),d1
0000BE3A 6700                       		beq.s	loc_B97C
0000BE3C 3028 0012                  		move.w	$12(a0),d0
0000BE40 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE46 D168 0032                  		add.w	d0,$32(a0)
0000BE4A B268 0032                  		cmp.w	$32(a0),d1
0000BE4E 6200                       		bhi.s	loc_B97C
0000BE50 3141 0032                  		move.w	d1,$32(a0)
0000BE54 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE5A 317C 0001 0036             		move.w	#1,$36(a0)
0000BE60 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BE66 4A28 0001                  		tst.b	1(a0)
0000BE6A 6A00                       		bpl.s	loc_B97C
0000BE6C 303C 00BD                  		move.w	#$BD,d0
0000BE70 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE76                            
0000BE76                            loc_B97C:
0000BE76 6000 FF62                  		bra.w	Obj31_Restart
0000BE7A                            ; ===========================================================================
0000BE7A                            
0000BE7A                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BE7A 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE7E 9068 0008                  		sub.w	8(a0),d0
0000BE82 6400                       		bcc.s	loc_B98C
0000BE84 4440                       		neg.w	d0
0000BE86                            
0000BE86                            loc_B98C:
0000BE86 0C40 0090                  		cmpi.w	#$90,d0
0000BE8A 6400                       		bcc.s	loc_B996
0000BE8C 5228 0028                  		addq.b	#1,$28(a0)
0000BE90                            
0000BE90                            loc_B996:
0000BE90 6000 FF48                  		bra.w	Obj31_Restart
0000BE94                            ; ===========================================================================
0000BE94                            ; ---------------------------------------------------------------------------
0000BE94                            ; Object 45 - spiked metal block from beta version (MZ)
0000BE94                            ; ---------------------------------------------------------------------------
0000BE94                            
0000BE94                            Obj45:					; XREF: Obj_Index
0000BE94 7000                       		moveq	#0,d0
0000BE96 1028 0024                  		move.b	$24(a0),d0
0000BE9A 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BE9E 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BEA2                            ; ===========================================================================
0000BEA2 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BEA4 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BEA6 0000                       		dc.w loc_BA8E-Obj45_Index
0000BEA8 0000                       		dc.w Obj45_Display-Obj45_Index
0000BEAA 0000                       		dc.w loc_BA7A-Obj45_Index
0000BEAC                            
0000BEAC 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BEAF 04E4 01                    		dc.b	4, $E4,	  1
0000BEB2 0834 03                    		dc.b	8, $34,	  3
0000BEB5 0628 02                    		dc.b	6, $28,	  2
0000BEB8                            
0000BEB8 3800                       word_B9BE:	dc.w $3800
0000BEBA A000                       		dc.w -$6000
0000BEBC 5000                       		dc.w $5000
0000BEBE                            ; ===========================================================================
0000BEBE                            
0000BEBE                            Obj45_Main:				; XREF: Obj45_Index
0000BEBE 7000                       		moveq	#0,d0
0000BEC0 1028 0028                  		move.b	$28(a0),d0
0000BEC4 D040                       		add.w	d0,d0
0000BEC6 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BECA 45F9 0000 BEAC             		lea	(Obj45_Var).l,a2
0000BED0 2248                       		movea.l	a0,a1
0000BED2 7203                       		moveq	#3,d1
0000BED4 6000                       		bra.s	Obj45_Load
0000BED6                            ; ===========================================================================
0000BED6                            
0000BED6                            Obj45_Loop:
0000BED6 6100 0000                  		bsr.w	SingleObjLoad2
0000BEDA 6600                       		bne.s	loc_BA52
0000BEDC                            
0000BEDC                            Obj45_Load:				; XREF: Obj45_Main
0000BEDC 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEE0 12BC 0045                  		move.b	#$45,0(a1)
0000BEE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BEEA 101A                       		move.b	(a2)+,d0
0000BEEC 4880                       		ext.w	d0
0000BEEE D068 0008                  		add.w	8(a0),d0
0000BEF2 3340 0008                  		move.w	d0,8(a1)
0000BEF6 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BEFE 337C 0300 0002             		move.w	#$300,2(a1)
0000BF04 137C 0004 0001             		move.b	#4,1(a1)
0000BF0A 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BF10 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BF16 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF1C 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF22 3342 0034                  		move.w	d2,$34(a1)
0000BF26 137C 0004 0018             		move.b	#4,$18(a1)
0000BF2C 0C12 0001                  		cmpi.b	#1,(a2)
0000BF30 6600                       		bne.s	loc_BA40
0000BF32 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF38                            
0000BF38                            loc_BA40:
0000BF38 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF3C 2348 003C                  		move.l	a0,$3C(a1)
0000BF40 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF44                            
0000BF44 137C 0003 0018             		move.b	#3,$18(a1)
0000BF4A                            
0000BF4A                            loc_BA52:
0000BF4A 117C 0010 0019             		move.b	#$10,$19(a0)
0000BF50                            
0000BF50                            Obj45_Solid:				; XREF: Obj45_Index
0000BF50 3F28 0008                  		move.w	8(a0),-(sp)
0000BF54 6100 0000                  		bsr.w	Obj45_Move
0000BF58 323C 0017                  		move.w	#$17,d1
0000BF5C 343C 0020                  		move.w	#$20,d2
0000BF60 363C 0020                  		move.w	#$20,d3
0000BF64 381F                       		move.w	(sp)+,d4
0000BF66 6100 0000                  		bsr.w	SolidObject
0000BF6A 6100 0000                  		bsr.w	DisplaySprite
0000BF6E 6000 0000                  		bra.w	Obj45_ChkDel
0000BF72                            ; ===========================================================================
0000BF72                            
0000BF72                            loc_BA7A:				; XREF: Obj45_Index
0000BF72 2268 003C                  		movea.l	$3C(a0),a1
0000BF76 1029 0032                  		move.b	$32(a1),d0
0000BF7A 0600 0010                  		addi.b	#$10,d0
0000BF7E EA08                       		lsr.b	#5,d0
0000BF80 5600                       		addq.b	#3,d0
0000BF82 1140 001A                  		move.b	d0,$1A(a0)
0000BF86                            
0000BF86                            loc_BA8E:				; XREF: Obj45_Index
0000BF86 2268 003C                  		movea.l	$3C(a0),a1
0000BF8A 7000                       		moveq	#0,d0
0000BF8C 1029 0032                  		move.b	$32(a1),d0
0000BF90 4440                       		neg.w	d0
0000BF92 D068 0030                  		add.w	$30(a0),d0
0000BF96 3140 0008                  		move.w	d0,8(a0)
0000BF9A                            
0000BF9A                            Obj45_Display:				; XREF: Obj45_Index
0000BF9A 6100 0000                  		bsr.w	DisplaySprite
0000BF9E                            
0000BF9E                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BF9E 3028 003A                  		move.w	$3A(a0),d0
0000BFA2 0240 FF80                  		andi.w	#$FF80,d0
0000BFA6 3238 F700                  		move.w	($FFFFF700).w,d1
0000BFAA 0441 0080                  		subi.w	#$80,d1
0000BFAE 0241 FF80                  		andi.w	#$FF80,d1
0000BFB2 9041                       		sub.w	d1,d0
0000BFB4 0C40 0280                  		cmpi.w	#$280,d0
0000BFB8 6200 0000                  		bhi.w	DeleteObject
0000BFBC 4E75                       		rts	
0000BFBE                            
0000BFBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFBE                            
0000BFBE                            
0000BFBE                            Obj45_Move:				; XREF: Obj45_Solid
0000BFBE 7000                       		moveq	#0,d0
0000BFC0 1028 0028                  		move.b	$28(a0),d0
0000BFC4 D040                       		add.w	d0,d0
0000BFC6 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BFCA 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BFCE                            ; End of function Obj45_Move
0000BFCE                            
0000BFCE                            ; ===========================================================================
0000BFCE 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BFD0 0000                       		dc.w loc_BADA-off_BAD6
0000BFD2                            ; ===========================================================================
0000BFD2                            
0000BFD2                            loc_BADA:				; XREF: off_BAD6
0000BFD2 4A68 0036                  		tst.w	$36(a0)
0000BFD6 6700                       		beq.s	loc_BB08
0000BFD8 4A68 0038                  		tst.w	$38(a0)
0000BFDC 6700                       		beq.s	loc_BAEC
0000BFDE 5368 0038                  		subq.w	#1,$38(a0)
0000BFE2 6000                       		bra.s	loc_BB3C
0000BFE4                            ; ===========================================================================
0000BFE4                            
0000BFE4                            loc_BAEC:
0000BFE4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFEA 6400                       		bcc.s	loc_BB3C
0000BFEC 317C 0000 0032             		move.w	#0,$32(a0)
0000BFF2 317C 0000 0010             		move.w	#0,$10(a0)
0000BFF8 317C 0000 0036             		move.w	#0,$36(a0)
0000BFFE 6000                       		bra.s	loc_BB3C
0000C000                            ; ===========================================================================
0000C000                            
0000C000                            loc_BB08:				; XREF: loc_BADA
0000C000 3228 0034                  		move.w	$34(a0),d1
0000C004 B268 0032                  		cmp.w	$32(a0),d1
0000C008 6700                       		beq.s	loc_BB3C
0000C00A 3028 0010                  		move.w	$10(a0),d0
0000C00E 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C014 D168 0032                  		add.w	d0,$32(a0)
0000C018 B268 0032                  		cmp.w	$32(a0),d1
0000C01C 6200                       		bhi.s	loc_BB3C
0000C01E 3141 0032                  		move.w	d1,$32(a0)
0000C022 317C 0000 0010             		move.w	#0,$10(a0)
0000C028 317C 0001 0036             		move.w	#1,$36(a0)
0000C02E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C034                            
0000C034                            loc_BB3C:
0000C034 7000                       		moveq	#0,d0
0000C036 1028 0032                  		move.b	$32(a0),d0
0000C03A 4440                       		neg.w	d0
0000C03C D068 0030                  		add.w	$30(a0),d0
0000C040 3140 0008                  		move.w	d0,8(a0)
0000C044 4E75                       		rts	
0000C046                            ; ===========================================================================
0000C046                            ; ---------------------------------------------------------------------------
0000C046                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C046                            ; ---------------------------------------------------------------------------
0000C046                            Map_obj31:
0000C046                            	include "_maps\obj31.asm"
0000C046                            ; ---------------------------------------------------------------------------
0000C046                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C046                            ; ---------------------------------------------------------------------------
0000C046 0000                       		dc.w byte_BB64-Map_obj31
0000C048 0000                       		dc.w byte_BB7E-Map_obj31
0000C04A 0000                       		dc.w byte_BB98-Map_obj31
0000C04C 0000                       		dc.w byte_BB9E-Map_obj31
0000C04E 0000                       		dc.w byte_BBA9-Map_obj31
0000C050 0000                       		dc.w byte_BBBE-Map_obj31
0000C052 0000                       		dc.w byte_BBDD-Map_obj31
0000C054 0000                       		dc.w byte_BC06-Map_obj31
0000C056 0000                       		dc.w byte_BC06-Map_obj31
0000C058 0000                       		dc.w byte_BC39-Map_obj31
0000C05A 0000                       		dc.w byte_BC53-Map_obj31
0000C05C 05                         byte_BB64:	dc.b 5
0000C05D F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C062 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C067 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C06C F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C071 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C076 05                         byte_BB7E:	dc.b 5
0000C077 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C07C F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C081 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C086 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C08B F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C090 01                         byte_BB98:	dc.b 1
0000C091 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C096 02                         byte_BB9E:	dc.b 2
0000C097 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C09C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0A1 04                         byte_BBA9:	dc.b 4
0000C0A2 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0A7 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0AC 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0B1 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0B6 06                         byte_BBBE:	dc.b 6
0000C0B7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0BC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0C1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0C6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0CB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0D0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0D5 08                         byte_BBDD:	dc.b 8
0000C0D6 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0DB B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0E0 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0E5 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0EA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0EF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0F4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0F9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0FE 0A                         byte_BC06:	dc.b $A
0000C0FF 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C104 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C109 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C10E B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C113 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C118 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C11D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C122 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C127 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C12C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C131 05                         byte_BC39:	dc.b 5
0000C132 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C137 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C13C F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C141 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C146 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C14B 01                         byte_BC53:	dc.b 1
0000C14C EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C152 00                         		even
0000C152 00                         		even
0000C152                            
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            Map_obj45:
0000C152                            	include "_maps\obj45.asm"
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C152                            ; ---------------------------------------------------------------------------
0000C152 0000                       		dc.w byte_BC6C-Map_obj45
0000C154 0000                       		dc.w byte_BC7C-Map_obj45
0000C156 0000                       		dc.w byte_BC8C-Map_obj45
0000C158 0000                       		dc.w byte_BC92-Map_obj45
0000C15A 0000                       		dc.w byte_BC9D-Map_obj45
0000C15C 0000                       		dc.w byte_BCB2-Map_obj45
0000C15E 0000                       		dc.w byte_BCD1-Map_obj45
0000C160 0000                       		dc.w byte_BCFA-Map_obj45
0000C162 0000                       		dc.w byte_BCFA-Map_obj45
0000C164 03                         byte_BC6C:	dc.b 3
0000C165 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C16A 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C16F F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C174 03                         byte_BC7C:	dc.b 3
0000C175 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C17A FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C17F 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C184 01                         byte_BC8C:	dc.b 1
0000C185 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C18A 02                         byte_BC92:	dc.b 2
0000C18B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C190 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C195 04                         byte_BC9D:	dc.b 4
0000C196 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C19B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1A0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1A5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1AA 06                         byte_BCB2:	dc.b 6
0000C1AB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1B0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1B5 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1BA F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1BF F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1C4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1C9 08                         byte_BCD1:	dc.b 8
0000C1CA F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1CF F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1D4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1D9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1DE F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1E3 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1E8 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1ED F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1F2 08                         byte_BCFA:	dc.b 8
0000C1F3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1F8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1FD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C202 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C207 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C20C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C211 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C216 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C21B F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C220 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C226 00                         		even
0000C226 00                         		even
0000C226                            
0000C226                            ; ===========================================================================
0000C226                            ; ---------------------------------------------------------------------------
0000C226                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C226                            ; ---------------------------------------------------------------------------
0000C226                            
0000C226                            Obj32:					; XREF: Obj_Index
0000C226 7000                       		moveq	#0,d0
0000C228 1028 0024                  		move.b	$24(a0),d0
0000C22C 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C230 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C234                            ; ===========================================================================
0000C234 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C236 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C238                            ; ===========================================================================
0000C238                            
0000C238                            Obj32_Main:				; XREF: Obj32_Index
0000C238 5428 0024                  		addq.b	#2,$24(a0)
0000C23C 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C244 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C24A 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C250 6700                       		beq.s	loc_BD60
0000C252 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C258                            
0000C258                            loc_BD60:
0000C258 117C 0004 0001             		move.b	#4,1(a0)
0000C25E 117C 0010 0019             		move.b	#$10,$19(a0)
0000C264 117C 0004 0018             		move.b	#4,$18(a0)
0000C26A 5668 000C                  		addq.w	#3,$C(a0)
0000C26E                            
0000C26E                            Obj32_Pressed:				; XREF: Obj32_Index
0000C26E 4A28 0001                  		tst.b	1(a0)
0000C272 6A00                       		bpl.s	Obj32_Display
0000C274 323C 001B                  		move.w	#$1B,d1
0000C278 343C 0005                  		move.w	#5,d2
0000C27C 363C 0005                  		move.w	#5,d3
0000C280 3828 0008                  		move.w	8(a0),d4
0000C284 6100 0000                  		bsr.w	SolidObject
0000C288 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C28E 1028 0028                  		move.b	$28(a0),d0
0000C292 0240 000F                  		andi.w	#$F,d0
0000C296 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C29A 47F3 0000                  		lea	(a3,d0.w),a3
0000C29E 7600                       		moveq	#0,d3
0000C2A0 0828 0006 0028             		btst	#6,$28(a0)
0000C2A6 6700                       		beq.s	loc_BDB2
0000C2A8 7607                       		moveq	#7,d3
0000C2AA                            
0000C2AA                            loc_BDB2:
0000C2AA 4A28 0028                  		tst.b	$28(a0)
0000C2AE 6A00                       		bpl.s	loc_BDBE
0000C2B0 6100 0000                  		bsr.w	Obj32_MZBlock
0000C2B4 6600                       		bne.s	loc_BDC8
0000C2B6                            
0000C2B6                            loc_BDBE:
0000C2B6 4A28 0025                  		tst.b	$25(a0)
0000C2BA 6600                       		bne.s	loc_BDC8
0000C2BC 0793                       		bclr	d3,(a3)
0000C2BE 6000                       		bra.s	loc_BDDE
0000C2C0                            ; ===========================================================================
0000C2C0                            
0000C2C0                            loc_BDC8:
0000C2C0 4A13                       		tst.b	(a3)
0000C2C2 6600                       		bne.s	loc_BDD6
0000C2C4 303C 00CD                  		move.w	#$CD,d0
0000C2C8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C2CE                            
0000C2CE                            loc_BDD6:
0000C2CE 07D3                       		bset	d3,(a3)
0000C2D0 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C2D6                            
0000C2D6                            loc_BDDE:
0000C2D6 0828 0005 0028             		btst	#5,$28(a0)
0000C2DC 6700                       		beq.s	Obj32_Display
0000C2DE 5328 001E                  		subq.b	#1,$1E(a0)
0000C2E2 6A00                       		bpl.s	Obj32_Display
0000C2E4 117C 0007 001E             		move.b	#7,$1E(a0)
0000C2EA 0868 0001 001A             		bchg	#1,$1A(a0)
0000C2F0                            
0000C2F0                            Obj32_Display:
0000C2F0 6100 0000                  		bsr.w	DisplaySprite
0000C2F4 3028 0008                  		move.w	8(a0),d0
0000C2F8 0240 FF80                  		andi.w	#$FF80,d0
0000C2FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000C300 0441 0080                  		subi.w	#$80,d1
0000C304 0241 FF80                  		andi.w	#$FF80,d1
0000C308 9041                       		sub.w	d1,d0
0000C30A 0C40 0280                  		cmpi.w	#$280,d0
0000C30E 6200 0000                  		bhi.w	Obj32_Delete
0000C312 4E75                       		rts	
0000C314                            ; ===========================================================================
0000C314                            
0000C314                            Obj32_Delete:
0000C314 6100 0000                  		bsr.w	DeleteObject
0000C318 4E75                       		rts	
0000C31A                            
0000C31A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C31A                            
0000C31A                            
0000C31A                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C31A 3F03                       		move.w	d3,-(sp)
0000C31C 3428 0008                  		move.w	8(a0),d2
0000C320 3628 000C                  		move.w	$C(a0),d3
0000C324 0442 0010                  		subi.w	#$10,d2
0000C328 5143                       		subq.w	#8,d3
0000C32A 383C 0020                  		move.w	#$20,d4
0000C32E 3A3C 0010                  		move.w	#$10,d5
0000C332 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C336 3C3C 005F                  		move.w	#$5F,d6
0000C33A                            
0000C33A                            Obj32_MZLoop:
0000C33A 4A29 0001                  		tst.b	1(a1)
0000C33E 6A00                       		bpl.s	loc_BE4E
0000C340 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C344 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C346                            
0000C346                            loc_BE4E:
0000C346 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C34A 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C34E                            
0000C34E 361F                       		move.w	(sp)+,d3
0000C350 7000                       		moveq	#0,d0
0000C352                            
0000C352                            locret_BE5A:
0000C352 4E75                       		rts	
0000C354                            ; ===========================================================================
0000C354 1010                       Obj32_MZData:	dc.b $10, $10
0000C356                            ; ===========================================================================
0000C356                            
0000C356                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C356 7001                       		moveq	#1,d0
0000C358 0240 003F                  		andi.w	#$3F,d0
0000C35C D040                       		add.w	d0,d0
0000C35E 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C362 121A                       		move.b	(a2)+,d1
0000C364 4881                       		ext.w	d1
0000C366 3029 0008                  		move.w	8(a1),d0
0000C36A 9041                       		sub.w	d1,d0
0000C36C 9042                       		sub.w	d2,d0
0000C36E 6400                       		bcc.s	loc_BE80
0000C370 D241                       		add.w	d1,d1
0000C372 D041                       		add.w	d1,d0
0000C374 6500                       		bcs.s	loc_BE84
0000C376 60CE                       		bra.s	loc_BE4E
0000C378                            ; ===========================================================================
0000C378                            
0000C378                            loc_BE80:
0000C378 B044                       		cmp.w	d4,d0
0000C37A 62CA                       		bhi.s	loc_BE4E
0000C37C                            
0000C37C                            loc_BE84:
0000C37C 121A                       		move.b	(a2)+,d1
0000C37E 4881                       		ext.w	d1
0000C380 3029 000C                  		move.w	$C(a1),d0
0000C384 9041                       		sub.w	d1,d0
0000C386 9043                       		sub.w	d3,d0
0000C388 6400                       		bcc.s	loc_BE9A
0000C38A D241                       		add.w	d1,d1
0000C38C D041                       		add.w	d1,d0
0000C38E 6500                       		bcs.s	loc_BE9E
0000C390 60B4                       		bra.s	loc_BE4E
0000C392                            ; ===========================================================================
0000C392                            
0000C392                            loc_BE9A:
0000C392 B045                       		cmp.w	d5,d0
0000C394 62B0                       		bhi.s	loc_BE4E
0000C396                            
0000C396                            loc_BE9E:
0000C396 361F                       		move.w	(sp)+,d3
0000C398 7001                       		moveq	#1,d0
0000C39A 4E75                       		rts	
0000C39C                            ; End of function Obj32_MZBlock
0000C39C                            
0000C39C                            ; ===========================================================================
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            Map_obj32:
0000C39C                            	include "_maps\obj32.asm"
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C 0000                       		dc.w byte_BEAC-Map_obj32
0000C39E 0000                       		dc.w byte_BEB7-Map_obj32
0000C3A0 0000                       		dc.w byte_BEC2-Map_obj32
0000C3A2 0000                       		dc.w byte_BEB7-Map_obj32
0000C3A4 02                         byte_BEAC:	dc.b 2
0000C3A5 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C3AA F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C3AF 02                         byte_BEB7:	dc.b 2
0000C3B0 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C3B5 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C3BA 02                         byte_BEC2:	dc.b 2
0000C3BB F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C3C0 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C3C5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C3CA                            		even
0000C3CA                            		even
0000C3CA                            
0000C3CA                            ; ===========================================================================
0000C3CA                            ; ---------------------------------------------------------------------------
0000C3CA                            ; Object 33 - pushable blocks (MZ, LZ)
0000C3CA                            ; ---------------------------------------------------------------------------
0000C3CA                            
0000C3CA                            Obj33:					; XREF: Obj_Index
0000C3CA 7000                       		moveq	#0,d0
0000C3CC 1028 0024                  		move.b	$24(a0),d0
0000C3D0 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C3D4 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C3D8                            ; ===========================================================================
0000C3D8 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C3DA 0000                       		dc.w loc_BF6E-Obj33_Index
0000C3DC 0000                       		dc.w loc_C02C-Obj33_Index
0000C3DE                            
0000C3DE 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C3E0 4001                       		dc.b $40, 1
0000C3E2                            ; ===========================================================================
0000C3E2                            
0000C3E2                            Obj33_Main:				; XREF: Obj33_Index
0000C3E2 5428 0024                  		addq.b	#2,$24(a0)
0000C3E6 117C 000F 0016             		move.b	#$F,$16(a0)
0000C3EC 117C 000F 0017             		move.b	#$F,$17(a0)
0000C3F2 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C3FA 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C400 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C406 6600                       		bne.s	loc_BF16
0000C408 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C40E                            
0000C40E                            loc_BF16:
0000C40E 117C 0004 0001             		move.b	#4,1(a0)
0000C414 117C 0003 0018             		move.b	#3,$18(a0)
0000C41A 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C420 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C426 7000                       		moveq	#0,d0
0000C428 1028 0028                  		move.b	$28(a0),d0
0000C42C D040                       		add.w	d0,d0
0000C42E 0240 000E                  		andi.w	#$E,d0
0000C432 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C436 115A 0019                  		move.b	(a2)+,$19(a0)
0000C43A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C43E 4A28 0028                  		tst.b	$28(a0)
0000C442 6700                       		beq.s	Obj33_ChkGone
0000C444 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C44A                            
0000C44A                            Obj33_ChkGone:
0000C44A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C44E 7000                       		moveq	#0,d0
0000C450 1028 0023                  		move.b	$23(a0),d0
0000C454 6700                       		beq.s	loc_BF6E
0000C456 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C45C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C462 6600 0000                  		bne.w	DeleteObject
0000C466                            
0000C466                            loc_BF6E:				; XREF: Obj33_Index
0000C466 4A28 0032                  		tst.b	$32(a0)
0000C46A 6600 0000                  		bne.w	loc_C046
0000C46E 7200                       		moveq	#0,d1
0000C470 1228 0019                  		move.b	$19(a0),d1
0000C474 0641 000B                  		addi.w	#$B,d1
0000C478 343C 0010                  		move.w	#$10,d2
0000C47C 363C 0011                  		move.w	#$11,d3
0000C480 3828 0008                  		move.w	8(a0),d4
0000C484 6100 0000                  		bsr.w	loc_C186
0000C488 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C48E 6600                       		bne.s	loc_BFC6	; if not, branch
0000C490 08A8 0007 0028             		bclr	#7,$28(a0)
0000C496 3028 0008                  		move.w	8(a0),d0
0000C49A 0C40 0A20                  		cmpi.w	#$A20,d0
0000C49E 6500                       		bcs.s	loc_BFC6
0000C4A0 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C4A4 6400                       		bcc.s	loc_BFC6
0000C4A6 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C4AA 0440 001C                  		subi.w	#$1C,d0
0000C4AE 3140 000C                  		move.w	d0,$C(a0)
0000C4B2 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C4B8 08E8 0007 0028             		bset	#7,$28(a0)
0000C4BE                            
0000C4BE                            loc_BFC6:
0000C4BE 3028 0008                  		move.w	8(a0),d0
0000C4C2 0240 FF80                  		andi.w	#$FF80,d0
0000C4C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4CA 0441 0080                  		subi.w	#$80,d1
0000C4CE 0241 FF80                  		andi.w	#$FF80,d1
0000C4D2 9041                       		sub.w	d1,d0
0000C4D4 0C40 0280                  		cmpi.w	#$280,d0
0000C4D8 6200                       		bhi.s	loc_BFE6
0000C4DA 6000 0000                  		bra.w	DisplaySprite
0000C4DE                            ; ===========================================================================
0000C4DE                            
0000C4DE                            loc_BFE6:
0000C4DE 3028 0034                  		move.w	$34(a0),d0
0000C4E2 0240 FF80                  		andi.w	#$FF80,d0
0000C4E6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4EA 0441 0080                  		subi.w	#$80,d1
0000C4EE 0241 FF80                  		andi.w	#$FF80,d1
0000C4F2 9041                       		sub.w	d1,d0
0000C4F4 0C40 0280                  		cmpi.w	#$280,d0
0000C4F8 6200                       		bhi.s	loc_C016
0000C4FA 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C500 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C506 117C 0004 0024             		move.b	#4,$24(a0)
0000C50C 6000                       		bra.s	loc_C02C
0000C50E                            ; ===========================================================================
0000C50E                            
0000C50E                            loc_C016:
0000C50E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C512 7000                       		moveq	#0,d0
0000C514 1028 0023                  		move.b	$23(a0),d0
0000C518 6700                       		beq.s	loc_C028
0000C51A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C520                            
0000C520                            loc_C028:
0000C520 6000 0000                  		bra.w	DeleteObject
0000C524                            ; ===========================================================================
0000C524                            
0000C524                            loc_C02C:				; XREF: Obj33_Index
0000C524 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C528 6700                       		beq.s	locret_C044
0000C52A 117C 0002 0024             		move.b	#2,$24(a0)
0000C530 4228 0032                  		clr.b	$32(a0)
0000C534 4268 0010                  		clr.w	$10(a0)
0000C538 4268 0012                  		clr.w	$12(a0)
0000C53C                            
0000C53C                            locret_C044:
0000C53C 4E75                       		rts	
0000C53E                            ; ===========================================================================
0000C53E                            
0000C53E                            loc_C046:				; XREF: loc_BF6E
0000C53E 3F28 0008                  		move.w	8(a0),-(sp)
0000C542 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C548 6400                       		bcc.s	loc_C056
0000C54A 6100 0000                  		bsr.w	SpeedToPos
0000C54E                            
0000C54E                            loc_C056:
0000C54E 0828 0001 0022             		btst	#1,$22(a0)
0000C554 6700                       		beq.s	loc_C0A0
0000C556 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C55C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C562 4A41                       		tst.w	d1
0000C564 6A00 0000                  		bpl.w	loc_C09E
0000C568 D368 000C                  		add.w	d1,$C(a0)
0000C56C 4268 0012                  		clr.w	$12(a0)
0000C570 08A8 0001 0022             		bclr	#1,$22(a0)
0000C576 3011                       		move.w	(a1),d0
0000C578 0240 03FF                  		andi.w	#$3FF,d0
0000C57C 0C40 016A                  		cmpi.w	#$16A,d0
0000C580 6500                       		bcs.s	loc_C09E
0000C582 3028 0030                  		move.w	$30(a0),d0
0000C586 E640                       		asr.w	#3,d0
0000C588 3140 0010                  		move.w	d0,$10(a0)
0000C58C 117C 0001 0032             		move.b	#1,$32(a0)
0000C592 4268 000E                  		clr.w	$E(a0)
0000C596                            
0000C596                            loc_C09E:
0000C596 6000                       		bra.s	loc_C0E6
0000C598                            ; ===========================================================================
0000C598                            
0000C598                            loc_C0A0:
0000C598 4A68 0010                  		tst.w	$10(a0)
0000C59C 6700 0000                  		beq.w	loc_C0D6
0000C5A0 6B00                       		bmi.s	loc_C0BC
0000C5A2 7600                       		moveq	#0,d3
0000C5A4 1628 0019                  		move.b	$19(a0),d3
0000C5A8 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C5AE 4A41                       		tst.w	d1		; has block touched a wall?
0000C5B0 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C5B2 6000                       		bra.s	loc_C0E6
0000C5B4                            ; ===========================================================================
0000C5B4                            
0000C5B4                            loc_C0BC:
0000C5B4 7600                       		moveq	#0,d3
0000C5B6 1628 0019                  		move.b	$19(a0),d3
0000C5BA 4643                       		not.w	d3
0000C5BC 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C5C2 4A41                       		tst.w	d1		; has block touched a wall?
0000C5C4 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C5C6 6000                       		bra.s	loc_C0E6
0000C5C8                            ; ===========================================================================
0000C5C8                            
0000C5C8                            Obj33_StopPush:
0000C5C8 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C5CC 6000                       		bra.s	loc_C0E6
0000C5CE                            ; ===========================================================================
0000C5CE                            
0000C5CE                            loc_C0D6:
0000C5CE 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C5D6 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C5DC 6400                       		bcc.s	loc_C104
0000C5DE                            
0000C5DE                            loc_C0E6:
0000C5DE 7200                       		moveq	#0,d1
0000C5E0 1228 0019                  		move.b	$19(a0),d1
0000C5E4 0641 000B                  		addi.w	#$B,d1
0000C5E8 343C 0010                  		move.w	#$10,d2
0000C5EC 363C 0011                  		move.w	#$11,d3
0000C5F0 381F                       		move.w	(sp)+,d4
0000C5F2 6100 0000                  		bsr.w	loc_C186
0000C5F6 6100                       		bsr.s	Obj33_ChkLava
0000C5F8 6000 FEC4                  		bra.w	loc_BFC6
0000C5FC                            ; ===========================================================================
0000C5FC                            
0000C5FC                            loc_C104:
0000C5FC 381F                       		move.w	(sp)+,d4
0000C5FE 43F8 D000                  		lea	($FFFFD000).w,a1
0000C602 08A9 0003 0022             		bclr	#3,$22(a1)
0000C608 08A8 0003 0022             		bclr	#3,$22(a0)
0000C60E 6000 FECE                  		bra.w	loc_BFE6
0000C612                            ; ===========================================================================
0000C612                            
0000C612                            Obj33_ChkLava:
0000C612 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C618 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C61A 343C FFE0                  		move.w	#-$20,d2
0000C61E 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C624 6700                       		beq.s	Obj33_LoadLava
0000C626 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C62C 6700                       		beq.s	Obj33_LoadLava
0000C62E 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C634 6700                       		beq.s	Obj33_LoadLava
0000C636 4E75                       		rts	
0000C638                            ; ===========================================================================
0000C638                            
0000C638                            Obj33_ChkLava2:
0000C638 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C63E 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C640 343C 0020                  		move.w	#$20,d2
0000C644 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C64A 6700                       		beq.s	Obj33_LoadLava
0000C64C 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C652 6700                       		beq.s	Obj33_LoadLava
0000C654                            
0000C654                            Obj33_NoLava:
0000C654 4E75                       		rts	
0000C656                            ; ===========================================================================
0000C656                            
0000C656                            Obj33_LoadLava:
0000C656 6100 0000                  		bsr.w	SingleObjLoad
0000C65A 6600                       		bne.s	locret_C184
0000C65C 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C660 3368 0008 0008             		move.w	8(a0),8(a1)
0000C666 D569 0008                  		add.w	d2,8(a1)
0000C66A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C670 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C676 2348 003C                  		move.l	a0,$3C(a1)
0000C67A                            
0000C67A                            locret_C184:
0000C67A 4E75                       		rts	
0000C67C                            ; ===========================================================================
0000C67C                            
0000C67C                            loc_C186:				; XREF: loc_BF6E
0000C67C 1028 0025                  		move.b	$25(a0),d0
0000C680 6700 0000                  		beq.w	loc_C218
0000C684 5500                       		subq.b	#2,d0
0000C686 6600                       		bne.s	loc_C1AA
0000C688 6100 B388                  		bsr.w	ExitPlatform
0000C68C 0829 0003 0022             		btst	#3,$22(a1)
0000C692 6600                       		bne.s	loc_C1A4
0000C694 4228 0025                  		clr.b	$25(a0)
0000C698 4E75                       		rts	
0000C69A                            ; ===========================================================================
0000C69A                            
0000C69A                            loc_C1A4:
0000C69A 3404                       		move.w	d4,d2
0000C69C 6000 B8D2                  		bra.w	MvSonicOnPtfm
0000C6A0                            ; ===========================================================================
0000C6A0                            
0000C6A0                            loc_C1AA:
0000C6A0 5500                       		subq.b	#2,d0
0000C6A2 6600                       		bne.s	loc_C1F2
0000C6A4 6100 0000                  		bsr.w	SpeedToPos
0000C6A8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C6AE 4EB9 0000 0000             		jsr	ObjHitFloor
0000C6B4 4A41                       		tst.w	d1
0000C6B6 6A00 0000                  		bpl.w	locret_C1F0
0000C6BA D368 000C                  		add.w	d1,$C(a0)
0000C6BE 4268 0012                  		clr.w	$12(a0)
0000C6C2 4228 0025                  		clr.b	$25(a0)
0000C6C6 3011                       		move.w	(a1),d0
0000C6C8 0240 03FF                  		andi.w	#$3FF,d0
0000C6CC 0C40 016A                  		cmpi.w	#$16A,d0
0000C6D0 6500                       		bcs.s	locret_C1F0
0000C6D2 3028 0030                  		move.w	$30(a0),d0
0000C6D6 E640                       		asr.w	#3,d0
0000C6D8 3140 0010                  		move.w	d0,$10(a0)
0000C6DC 117C 0001 0032             		move.b	#1,$32(a0)
0000C6E2 4268 000E                  		clr.w	$E(a0)
0000C6E6                            
0000C6E6                            locret_C1F0:
0000C6E6 4E75                       		rts	
0000C6E8                            ; ===========================================================================
0000C6E8                            
0000C6E8                            loc_C1F2:
0000C6E8 6100 0000                  		bsr.w	SpeedToPos
0000C6EC 3028 0008                  		move.w	8(a0),d0
0000C6F0 0240 000C                  		andi.w	#$C,d0
0000C6F4 6600 0000                  		bne.w	locret_C2E4
0000C6F8 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C6FE 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C704 4268 0010                  		clr.w	$10(a0)
0000C708 5528 0025                  		subq.b	#2,$25(a0)
0000C70C 4E75                       		rts	
0000C70E                            ; ===========================================================================
0000C70E                            
0000C70E                            loc_C218:
0000C70E 6100 0000                  		bsr.w	loc_FAC8
0000C712 4A44                       		tst.w	d4
0000C714 6700 0000                  		beq.w	locret_C2E4
0000C718 6B00 0000                  		bmi.w	locret_C2E4
0000C71C 4A28 0032                  		tst.b	$32(a0)
0000C720 6700                       		beq.s	loc_C230
0000C722 6000 0000                  		bra.w	locret_C2E4
0000C726                            ; ===========================================================================
0000C726                            
0000C726                            loc_C230:
0000C726 4A40                       		tst.w	d0
0000C728 6700 0000                  		beq.w	locret_C2E4
0000C72C 6B00                       		bmi.s	loc_C268
0000C72E 0829 0000 0022             		btst	#0,$22(a1)
0000C734 6600 0000                  		bne.w	locret_C2E4
0000C738 3F00                       		move.w	d0,-(sp)
0000C73A 7600                       		moveq	#0,d3
0000C73C 1628 0019                  		move.b	$19(a0),d3
0000C740 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C746 301F                       		move.w	(sp)+,d0
0000C748 4A41                       		tst.w	d1
0000C74A 6B00 0000                  		bmi.w	locret_C2E4
0000C74E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C756 7001                       		moveq	#1,d0
0000C758 323C 0040                  		move.w	#$40,d1
0000C75C 6000                       		bra.s	loc_C294
0000C75E                            ; ===========================================================================
0000C75E                            
0000C75E                            loc_C268:
0000C75E 0829 0000 0022             		btst	#0,$22(a1)
0000C764 6700                       		beq.s	locret_C2E4
0000C766 3F00                       		move.w	d0,-(sp)
0000C768 7600                       		moveq	#0,d3
0000C76A 1628 0019                  		move.b	$19(a0),d3
0000C76E 4643                       		not.w	d3
0000C770 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C776 301F                       		move.w	(sp)+,d0
0000C778 4A41                       		tst.w	d1
0000C77A 6B00                       		bmi.s	locret_C2E4
0000C77C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C784 70FF                       		moveq	#-1,d0
0000C786 323C FFC0                  		move.w	#-$40,d1
0000C78A                            
0000C78A                            loc_C294:
0000C78A 43F8 D000                  		lea	($FFFFD000).w,a1
0000C78E D169 0008                  		add.w	d0,8(a1)
0000C792 3341 0014                  		move.w	d1,$14(a1)
0000C796 337C 0000 0010             		move.w	#0,$10(a1)
0000C79C 3F00                       		move.w	d0,-(sp)
0000C79E 303C 00A7                  		move.w	#$A7,d0
0000C7A2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C7A8 301F                       		move.w	(sp)+,d0
0000C7AA 4A28 0028                  		tst.b	$28(a0)
0000C7AE 6B00                       		bmi.s	locret_C2E4
0000C7B0 3F00                       		move.w	d0,-(sp)
0000C7B2 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7B8 301F                       		move.w	(sp)+,d0
0000C7BA 0C41 0004                  		cmpi.w	#4,d1
0000C7BE 6F00                       		ble.s	loc_C2E0
0000C7C0 317C 0400 0010             		move.w	#$400,$10(a0)
0000C7C6 4A40                       		tst.w	d0
0000C7C8 6A00                       		bpl.s	loc_C2D8
0000C7CA 4468 0010                  		neg.w	$10(a0)
0000C7CE                            
0000C7CE                            loc_C2D8:
0000C7CE 117C 0006 0025             		move.b	#6,$25(a0)
0000C7D4 6000                       		bra.s	locret_C2E4
0000C7D6                            ; ===========================================================================
0000C7D6                            
0000C7D6                            loc_C2E0:
0000C7D6 D368 000C                  		add.w	d1,$C(a0)
0000C7DA                            
0000C7DA                            locret_C2E4:
0000C7DA 4E75                       		rts	
0000C7DC                            ; ===========================================================================
0000C7DC                            ; ---------------------------------------------------------------------------
0000C7DC                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7DC                            ; ---------------------------------------------------------------------------
0000C7DC                            Map_obj33:
0000C7DC                            	include "_maps\obj33.asm"
0000C7DC                            ; ---------------------------------------------------------------------------
0000C7DC                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7DC                            ; ---------------------------------------------------------------------------
0000C7DC 0000                       		dc.w byte_C2EA-Map_obj33
0000C7DE 0000                       		dc.w byte_C2F0-Map_obj33
0000C7E0 01                         byte_C2EA:	dc.b 1
0000C7E1 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C7E6 04                         byte_C2F0:	dc.b 4
0000C7E7 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C7EC F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C7F1 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C7F6 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C7FC 00                         		even
0000C7FC 00                         		even
0000C7FC                            
0000C7FC                            ; ===========================================================================
0000C7FC                            ; ---------------------------------------------------------------------------
0000C7FC                            ; Object 34 - zone title cards
0000C7FC                            ; ---------------------------------------------------------------------------
0000C7FC                            
0000C7FC                            Obj34:					; XREF: Obj_Index
0000C7FC 7000                       		moveq	#0,d0
0000C7FE 1028 0024                  		move.b	$24(a0),d0
0000C802 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C806 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C80A                            ; ===========================================================================
0000C80A 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C80C 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C80E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C810 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C812                            ; ===========================================================================
0000C812                            
0000C812                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C812 2248                       		movea.l	a0,a1
0000C814 7000                       		moveq	#0,d0
0000C816 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C81A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C820 6600                       		bne.s	Obj34_CheckFZ
0000C822 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C824                            
0000C824                            Obj34_CheckFZ:
0000C824 3400                       		move.w	d0,d2
0000C826 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C82C 6600                       		bne.s	Obj34_LoadConfig
0000C82E 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C830 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C832                            
0000C832                            Obj34_LoadConfig:
0000C832 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C838 E948                       		lsl.w	#4,d0
0000C83A D6C0                       		adda.w	d0,a3
0000C83C 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C842 7203                       		moveq	#3,d1
0000C844                            
0000C844                            Obj34_Loop:
0000C844 12BC 0034                  		move.b	#$34,0(a1)
0000C848 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C84C 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C850 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C854 335A 000A                  		move.w	(a2)+,$A(a1)
0000C858 135A 0024                  		move.b	(a2)+,$24(a1)
0000C85C 101A                       		move.b	(a2)+,d0
0000C85E 6600                       		bne.s	Obj34_ActNumber
0000C860 1002                       		move.b	d2,d0
0000C862                            
0000C862                            Obj34_ActNumber:
0000C862 0C00 0007                  		cmpi.b	#7,d0
0000C866 6600                       		bne.s	Obj34_MakeSprite
0000C868 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C86C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C872 6600                       		bne.s	Obj34_MakeSprite
0000C874 5300                       		subq.b	#1,d0
0000C876                            
0000C876                            Obj34_MakeSprite:
0000C876 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C87A 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C882 337C 8580 0002             		move.w	#$8580,2(a1)
0000C888 137C 0078 0019             		move.b	#$78,$19(a1)
0000C88E 137C 0000 0001             		move.b	#0,1(a1)
0000C894 137C 0000 0018             		move.b	#0,$18(a1)
0000C89A 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C8A0 43E9 0040                  		lea	$40(a1),a1	; next object
0000C8A4 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C8A8                            
0000C8A8                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C8A8 7210                       		moveq	#$10,d1		; set horizontal speed
0000C8AA 3028 0030                  		move.w	$30(a0),d0
0000C8AE B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C8B2 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C8B4 6C00                       		bge.s	Obj34_Move
0000C8B6 4441                       		neg.w	d1
0000C8B8                            
0000C8B8                            Obj34_Move:
0000C8B8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8BC                            
0000C8BC                            loc_C3C8:
0000C8BC 3028 0008                  		move.w	8(a0),d0
0000C8C0 6B00                       		bmi.s	locret_C3D8
0000C8C2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8C6 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C8C8 6000 0000                  		bra.w	DisplaySprite
0000C8CC                            ; ===========================================================================
0000C8CC                            
0000C8CC                            locret_C3D8:
0000C8CC 4E75                       		rts	
0000C8CE                            ; ===========================================================================
0000C8CE                            
0000C8CE                            Obj34_Wait:				; XREF: Obj34_Index
0000C8CE 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C8D2 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C8D4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C8D8 6000 0000                  		bra.w	DisplaySprite
0000C8DC                            ; ===========================================================================
0000C8DC                            
0000C8DC                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C8DC 4A28 0001                  		tst.b	1(a0)
0000C8E0 6A00                       		bpl.s	Obj34_ChangeArt
0000C8E2 7220                       		moveq	#$20,d1
0000C8E4 3028 0032                  		move.w	$32(a0),d0
0000C8E8 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C8EC 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C8EE 6C00                       		bge.s	Obj34_Move2
0000C8F0 4441                       		neg.w	d1
0000C8F2                            
0000C8F2                            Obj34_Move2:
0000C8F2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8F6 3028 0008                  		move.w	8(a0),d0
0000C8FA 6B00                       		bmi.s	locret_C412
0000C8FC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C900 6400                       		bcc.s	locret_C412	; if yes, branch
0000C902 6000 0000                  		bra.w	DisplaySprite
0000C906                            ; ===========================================================================
0000C906                            
0000C906                            locret_C412:
0000C906 4E75                       		rts	
0000C908                            ; ===========================================================================
0000C908                            
0000C908                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C908 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C90E 6600                       		bne.s	Obj34_Delete
0000C910 7002                       		moveq	#2,d0
0000C912 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C918 7000                       		moveq	#0,d0
0000C91A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C91E 0640 0015                  		addi.w	#$15,d0
0000C922 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C928                            
0000C928                            Obj34_Delete:
0000C928 6000 0000                  		bra.w	DeleteObject
0000C92C                            ; ===========================================================================
0000C92C 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C92E 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C930 00E4                       		dc.w $E4
0000C932 0206                       		dc.b 2,	6
0000C934 00EA                       		dc.w $EA
0000C936 0207                       		dc.b 2,	7
0000C938 00E0                       		dc.w $E0
0000C93A 020A                       		dc.b 2,	$A
0000C93C                            ; ---------------------------------------------------------------------------
0000C93C                            ; Title	card configuration data
0000C93C                            ; Format:
0000C93C                            ; 4 bytes per item (YYYY XXXX)
0000C93C                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C93C                            ; ---------------------------------------------------------------------------
0000C93C 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C94C 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C95C 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C96C 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C97C 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C98C 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C99C 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C9AC                            ; ===========================================================================
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            
0000C9AC                            Obj39:					; XREF: Obj_Index
0000C9AC 7000                       		moveq	#0,d0
0000C9AE 1028 0024                  		move.b	$24(a0),d0
0000C9B2 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C9B6 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C9BA                            ; ===========================================================================
0000C9BA 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C9BC 0000                       		dc.w loc_C50C-Obj39_Index
0000C9BE 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C9C0                            ; ===========================================================================
0000C9C0                            
0000C9C0                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C9C0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C9C4 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C9C6 4E75                       		rts	
0000C9C8                            ; ===========================================================================
0000C9C8                            
0000C9C8                            Obj39_Main:
0000C9C8 5428 0024                  		addq.b	#2,$24(a0)
0000C9CC 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C9D2 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C9D8 6700                       		beq.s	loc_C4EC	; if not, branch
0000C9DA 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C9E0                            
0000C9E0                            loc_C4EC:
0000C9E0 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C9E6 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C9EE 317C 855E 0002             		move.w	#$855E,2(a0)
0000C9F4 117C 0000 0001             		move.b	#0,1(a0)
0000C9FA 117C 0000 0018             		move.b	#0,$18(a0)
0000CA00                            
0000CA00                            loc_C50C:				; XREF: Obj39_Index
0000CA00 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA02 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CA08 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CA0A 6500                       		bcs.s	Obj39_Move
0000CA0C 4441                       		neg.w	d1
0000CA0E                            
0000CA0E                            Obj39_Move:
0000CA0E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA12 6000 0000                  		bra.w	DisplaySprite
0000CA16                            ; ===========================================================================
0000CA16                            
0000CA16                            Obj39_SetWait:				; XREF: Obj39_Main
0000CA16 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CA1C 5428 0024                  		addq.b	#2,$24(a0)
0000CA20 4E75                       		rts	
0000CA22                            ; ===========================================================================
0000CA22                            
0000CA22                            Obj39_Wait:				; XREF: Obj39_Index
0000CA22 1038 F605                  		move.b	($FFFFF605).w,d0
0000CA26 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CA2A 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CA2C 0828 0000 001A             		btst	#0,$1A(a0)
0000CA32 6600                       		bne.s	Obj39_Display
0000CA34 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA38 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA3A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA3E 6000 0000                  		bra.w	DisplaySprite
0000CA42                            ; ===========================================================================
0000CA42                            
0000CA42                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA42 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA46 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA48 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CA4E 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CA52 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CA54 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CA5A 6000                       		bra.s	Obj39_Display
0000CA5C                            ; ===========================================================================
0000CA5C                            
0000CA5C                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CA5C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CA62                            
0000CA62                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CA62 6000 0000                  		bra.w	DisplaySprite
0000CA66                            ; ===========================================================================
0000CA66                            ; ---------------------------------------------------------------------------
0000CA66                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CA66                            ; ---------------------------------------------------------------------------
0000CA66                            
0000CA66                            Obj3A:					; XREF: Obj_Index
0000CA66 7000                       		moveq	#0,d0
0000CA68 1028 0024                  		move.b	$24(a0),d0
0000CA6C 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CA70 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CA74                            ; ===========================================================================
0000CA74 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CA76 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CA78 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA7A 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CA7C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA7E 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CA80 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA82 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CA84 0000                       		dc.w loc_C766-Obj3A_Index
0000CA86                            ; ===========================================================================
0000CA86                            
0000CA86                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CA86 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA8A 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CA8C 4E75                       		rts	
0000CA8E                            ; ===========================================================================
0000CA8E                            
0000CA8E                            Obj3A_Main:
0000CA8E 2248                       		movea.l	a0,a1
0000CA90 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CA96 7206                       		moveq	#6,d1
0000CA98                            
0000CA98                            Obj3A_Loop:
0000CA98 12BC 003A                  		move.b	#$3A,0(a1)
0000CA9C 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CAA0 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CAA4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CAA8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CAAC 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAB0 101A                       		move.b	(a2)+,d0
0000CAB2 0C00 0006                  		cmpi.b	#6,d0
0000CAB6 6600                       		bne.s	loc_C5CA
0000CAB8 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CABC                            
0000CABC                            loc_C5CA:
0000CABC 1340 001A                  		move.b	d0,$1A(a1)
0000CAC0 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CAC8 337C 8580 0002             		move.w	#$8580,2(a1)
0000CACE 137C 0000 0001             		move.b	#0,1(a1)
0000CAD4 43E9 0040                  		lea	$40(a1),a1
0000CAD8 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CADC                            
0000CADC                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CADC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CADE 3028 0030                  		move.w	$30(a0),d0
0000CAE2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CAE6 6700                       		beq.s	loc_C61A	; if yes, branch
0000CAE8 6C00                       		bge.s	Obj3A_Move
0000CAEA 4441                       		neg.w	d1
0000CAEC                            
0000CAEC                            Obj3A_Move:
0000CAEC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAF0                            
0000CAF0                            loc_C5FE:				; XREF: loc_C61A
0000CAF0 3028 0008                  		move.w	8(a0),d0
0000CAF4 6B00                       		bmi.s	locret_C60E
0000CAF6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CAFA 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CAFC 6000 0000                  		bra.w	DisplaySprite
0000CB00                            ; ===========================================================================
0000CB00                            
0000CB00                            locret_C60E:
0000CB00 4E75                       		rts	
0000CB02                            ; ===========================================================================
0000CB02                            
0000CB02                            loc_C610:				; XREF: loc_C61A
0000CB02 117C 000E 0024             		move.b	#$E,$24(a0)
0000CB08 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CB0C                            ; ===========================================================================
0000CB0C                            
0000CB0C                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CB0C 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CB12 67EE                       		beq.s	loc_C610
0000CB14 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CB1A 66D4                       		bne.s	loc_C5FE
0000CB1C 5428 0024                  		addq.b	#2,$24(a0)
0000CB20 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB26                            
0000CB26                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CB26 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB2A 6600                       		bne.s	Obj3A_Display
0000CB2C 5428 0024                  		addq.b	#2,$24(a0)
0000CB30                            
0000CB30                            Obj3A_Display:
0000CB30 6000 0000                  		bra.w	DisplaySprite
0000CB34                            ; ===========================================================================
0000CB34                            
0000CB34                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CB34 6100 0000                  		bsr.w	DisplaySprite
0000CB38 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB3E 7000                       		moveq	#0,d0
0000CB40 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB44 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB46 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB4A 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CB50                            
0000CB50                            Obj3A_RingBonus:
0000CB50 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CB54 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CB56 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB5A 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CB60                            
0000CB60                            Obj3A_ChkBonus:
0000CB60 4A40                       		tst.w	d0		; is there any bonus?
0000CB62 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CB64 303C 00C5                  		move.w	#$C5,d0
0000CB68 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB6E 5428 0024                  		addq.b	#2,$24(a0)
0000CB72 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CB78 6600                       		bne.s	Obj3A_SetDelay
0000CB7A 5828 0024                  		addq.b	#4,$24(a0)
0000CB7E                            
0000CB7E                            Obj3A_SetDelay:
0000CB7E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB84                            
0000CB84                            locret_C692:
0000CB84 4E75                       		rts	
0000CB86                            ; ===========================================================================
0000CB86                            
0000CB86                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CB86 4EB9 0000 0000             		jsr	AddPoints
0000CB8C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB90 0200 0003                  		andi.b	#3,d0
0000CB94 66EE                       		bne.s	locret_C692
0000CB96 303C 00CD                  		move.w	#$CD,d0
0000CB9A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CBA0                            ; ===========================================================================
0000CBA0                            
0000CBA0                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CBA0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBA4 0240 0007                  		andi.w	#7,d0
0000CBA8 E748                       		lsl.w	#3,d0
0000CBAA 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CBAE 0241 0003                  		andi.w	#3,d1
0000CBB2 D241                       		add.w	d1,d1
0000CBB4 D041                       		add.w	d1,d0
0000CBB6 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CBBA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CBBE 4A40                       		tst.w	d0
0000CBC0 6600                       		bne.s	Obj3A_ChkSS
0000CBC2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CBC8 6000                       		bra.s	Obj3A_Display2
0000CBCA                            ; ===========================================================================
0000CBCA                            
0000CBCA                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CBCA 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CBCE 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CBD2 6700                       		beq.s	loc_C6EA	; if not, branch
0000CBD4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CBDA 6000                       		bra.s	Obj3A_Display2
0000CBDC                            ; ===========================================================================
0000CBDC                            
0000CBDC                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CBDC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CBE2                            
0000CBE2                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CBE2 6000 0000                  		bra.w	DisplaySprite
0000CBE6                            ; ===========================================================================
0000CBE6                            ; ---------------------------------------------------------------------------
0000CBE6                            ; Level	order array
0000CBE6                            ; ---------------------------------------------------------------------------
0000CBE6                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CC16                            		even
0000CC16                            ; ===========================================================================
0000CC16                            
0000CC16                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CC16 7220                       		moveq	#$20,d1		; set horizontal speed
0000CC18 3028 0032                  		move.w	$32(a0),d0
0000CC1C B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CC20 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CC22 6C00                       		bge.s	Obj3A_Move2
0000CC24 4441                       		neg.w	d1
0000CC26                            
0000CC26                            Obj3A_Move2:
0000CC26 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC2A 3028 0008                  		move.w	8(a0),d0
0000CC2E 6B00                       		bmi.s	locret_C748
0000CC30 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC34 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC36 6000 0000                  		bra.w	DisplaySprite
0000CC3A                            ; ===========================================================================
0000CC3A                            
0000CC3A                            locret_C748:
0000CC3A 4E75                       		rts	
0000CC3C                            ; ===========================================================================
0000CC3C                            
0000CC3C                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC3C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC42 6600 0000                  		bne.w	DeleteObject
0000CC46 5428 0024                  		addq.b	#2,$24(a0)
0000CC4A 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CC4E 303C 008D                  		move.w	#$8D,d0
0000CC52 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CC58                            ; ===========================================================================
0000CC58                            
0000CC58                            loc_C766:				; XREF: Obj3A_Index
0000CC58 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CC5C 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CC62 6700 0000                  		beq.w	DeleteObject
0000CC66 4E75                       		rts	
0000CC68                            ; ===========================================================================
0000CC68 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CC6E 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CC70 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CC76 0201                       		dc.b 2,	1
0000CC78 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CC7E 0206                       		dc.b 2,	6
0000CC80 0520 0120 00EC             		dc.w $520, $120, $EC
0000CC86 0202                       		dc.b 2,	2
0000CC88 0540 0120 00FC             		dc.w $540, $120, $FC
0000CC8E 0203                       		dc.b 2,	3
0000CC90 0560 0120 010C             		dc.w $560, $120, $10C
0000CC96 0204                       		dc.b 2,	4
0000CC98 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CC9E 0205                       		dc.b 2,	5
0000CCA0                            ; ===========================================================================
0000CCA0                            ; ---------------------------------------------------------------------------
0000CCA0                            ; Object 7E - special stage results screen
0000CCA0                            ; ---------------------------------------------------------------------------
0000CCA0                            
0000CCA0                            Obj7E:					; XREF: Obj_Index
0000CCA0 7000                       		moveq	#0,d0
0000CCA2 1028 0024                  		move.b	$24(a0),d0
0000CCA6 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CCAA 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CCAE                            ; ===========================================================================
0000CCAE 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CCB0 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CCB2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCB4 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CCB6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCB8 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCBA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCBC 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CCBE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCC0 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCC2 0000                       		dc.w loc_C91A-Obj7E_Index
0000CCC4                            ; ===========================================================================
0000CCC4                            
0000CCC4                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CCC4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCC8 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CCCA 4E75                       		rts	
0000CCCC                            ; ===========================================================================
0000CCCC                            
0000CCCC                            Obj7E_Main:
0000CCCC 2248                       		movea.l	a0,a1
0000CCCE 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CCD4 7203                       		moveq	#3,d1
0000CCD6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CCDC 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CCDE 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CCE0                            
0000CCE0                            Obj7E_Loop:
0000CCE0 12BC 007E                  		move.b	#$7E,0(a1)
0000CCE4 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CCE8 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCEC 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CCF0 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCF4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CCF8 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CD00 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD06 137C 0000 0001             		move.b	#0,1(a1)
0000CD0C 43E9 0040                  		lea	$40(a1),a1
0000CD10 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CD14                            
0000CD14 7007                       		moveq	#7,d0
0000CD16 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CD1A 6700                       		beq.s	loc_C842
0000CD1C 7000                       		moveq	#0,d0
0000CD1E 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CD22 6600                       		bne.s	loc_C842	; if not, branch
0000CD24 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CD26 317C 0018 0008             		move.w	#$18,8(a0)
0000CD2C 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CD32                            
0000CD32                            loc_C842:
0000CD32 1140 001A                  		move.b	d0,$1A(a0)
0000CD36                            
0000CD36                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD36 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD38 3028 0030                  		move.w	$30(a0),d0
0000CD3C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD40 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD42 6C00                       		bge.s	Obj7E_Move
0000CD44 4441                       		neg.w	d1
0000CD46                            
0000CD46                            Obj7E_Move:
0000CD46 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD4A                            
0000CD4A                            loc_C85A:				; XREF: loc_C86C
0000CD4A 3028 0008                  		move.w	8(a0),d0
0000CD4E 6B00                       		bmi.s	locret_C86A
0000CD50 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD54 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CD56 6000 0000                  		bra.w	DisplaySprite
0000CD5A                            ; ===========================================================================
0000CD5A                            
0000CD5A                            locret_C86A:
0000CD5A 4E75                       		rts	
0000CD5C                            ; ===========================================================================
0000CD5C                            
0000CD5C                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CD5C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CD62 66E6                       		bne.s	loc_C85A
0000CD64 5428 0024                  		addq.b	#2,$24(a0)
0000CD68 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD6E 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CD74                            
0000CD74                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CD74 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD78 6600                       		bne.s	Obj7E_Display
0000CD7A 5428 0024                  		addq.b	#2,$24(a0)
0000CD7E                            
0000CD7E                            Obj7E_Display:
0000CD7E 6000 0000                  		bra.w	DisplaySprite
0000CD82                            ; ===========================================================================
0000CD82                            
0000CD82                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CD82 6100 0000                  		bsr.w	DisplaySprite
0000CD86 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CD8C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD90 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CD92 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD98 700A                       		moveq	#10,d0		; add 10 to score
0000CD9A 4EB9 0000 0000             		jsr	AddPoints
0000CDA0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDA4 0200 0003                  		andi.b	#3,d0
0000CDA8 6600                       		bne.s	locret_C8EA
0000CDAA 303C 00CD                  		move.w	#$CD,d0
0000CDAE 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CDB4                            ; ===========================================================================
0000CDB4                            
0000CDB4                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CDB4 303C 00C5                  		move.w	#$C5,d0
0000CDB8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDBE 5428 0024                  		addq.b	#2,$24(a0)
0000CDC2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDC8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CDCE 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CDD0 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CDD6 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CDDA                            
0000CDDA                            locret_C8EA:
0000CDDA 4E75                       		rts	
0000CDDC                            ; ===========================================================================
0000CDDC                            
0000CDDC                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CDDC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CDE2 6000 0000                  		bra.w	DisplaySprite
0000CDE6                            ; ===========================================================================
0000CDE6                            
0000CDE6                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CDE6 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CDEC 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CDF2 303C 00BF                  		move.w	#$BF,d0
0000CDF6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CDFC 5428 0024                  		addq.b	#2,$24(a0)
0000CE00 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CE06 6000 0000                  		bra.w	DisplaySprite
0000CE0A                            ; ===========================================================================
0000CE0A                            
0000CE0A                            loc_C91A:				; XREF: Obj7E_Index
0000CE0A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE0E 0200 000F                  		andi.b	#$F,d0
0000CE12 6600                       		bne.s	Obj7E_Display2
0000CE14 0868 0000 001A             		bchg	#0,$1A(a0)
0000CE1A                            
0000CE1A                            Obj7E_Display2:
0000CE1A 6000 0000                  		bra.w	DisplaySprite
0000CE1E                            ; ===========================================================================
0000CE1E 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CE24 0200                       		dc.b 2,	0		; rountine number, frame number
0000CE26 0320 0120 0118             		dc.w $320, $120, $118
0000CE2C 0201                       		dc.b 2,	1
0000CE2E 0360 0120 0128             		dc.w $360, $120, $128
0000CE34 0202                       		dc.b 2,	2
0000CE36 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE3C 0203                       		dc.b 2,	3
0000CE3E 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE44 0206                       		dc.b 2,	6
0000CE46                            ; ===========================================================================
0000CE46                            ; ---------------------------------------------------------------------------
0000CE46                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE46                            ; ---------------------------------------------------------------------------
0000CE46                            
0000CE46                            Obj7F:					; XREF: Obj_Index
0000CE46 7000                       		moveq	#0,d0
0000CE48 1028 0024                  		move.b	$24(a0),d0
0000CE4C 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CE50 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CE54                            ; ===========================================================================
0000CE54 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CE56 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CE58                            
0000CE58                            ; ---------------------------------------------------------------------------
0000CE58                            ; X-axis positions for chaos emeralds
0000CE58                            ; ---------------------------------------------------------------------------
0000CE58 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CE64                            ; ===========================================================================
0000CE64                            
0000CE64                            Obj7F_Main:				; XREF: Obj7F_Index
0000CE64 2248                       		movea.l	a0,a1
0000CE66 45F9 0000 CE58             		lea	(Obj7F_PosData).l,a2
0000CE6C 7400                       		moveq	#0,d2
0000CE6E 7200                       		moveq	#0,d1
0000CE70 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CE74 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CE76 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CE7A                            
0000CE7A                            Obj7F_Loop:
0000CE7A 12BC 007F                  		move.b	#$7F,0(a1)
0000CE7E 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CE82 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CE88 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CE8C 1633 2000                  		move.b	(a3,d2.w),d3
0000CE90 1343 001A                  		move.b	d3,$1A(a1)
0000CE94 1343 001C                  		move.b	d3,$1C(a1)
0000CE98 5202                       		addq.b	#1,d2
0000CE9A 5429 0024                  		addq.b	#2,$24(a1)
0000CE9E 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CEA6 337C 8541 0002             		move.w	#$8541,2(a1)
0000CEAC 137C 0000 0001             		move.b	#0,1(a1)
0000CEB2 43E9 0040                  		lea	$40(a1),a1	; next object
0000CEB6 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CEBA                            
0000CEBA                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CEBA 1028 001A                  		move.b	$1A(a0),d0
0000CEBE 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CEC4 0C00 0006                  		cmpi.b	#6,d0
0000CEC8 6600                       		bne.s	Obj7F_Display
0000CECA 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CED0                            
0000CED0                            Obj7F_Display:
0000CED0 6000 0000                  		bra.w	DisplaySprite
0000CED4                            ; ===========================================================================
0000CED4                            ; ---------------------------------------------------------------------------
0000CED4                            ; Sprite mappings - zone title cards
0000CED4                            ; ---------------------------------------------------------------------------
0000CED4 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CED6 0000                       		dc.w byte_CA2C-Map_obj34
0000CED8 0000                       		dc.w byte_CA5A-Map_obj34
0000CEDA 0000                       		dc.w byte_CA7A-Map_obj34
0000CEDC 0000                       		dc.w byte_CAA8-Map_obj34
0000CEDE 0000                       		dc.w byte_CADC-Map_obj34
0000CEE0 0000                       		dc.w byte_CB10-Map_obj34
0000CEE2 0000                       		dc.w byte_CB26-Map_obj34
0000CEE4 0000                       		dc.w byte_CB31-Map_obj34
0000CEE6 0000                       		dc.w byte_CB3C-Map_obj34
0000CEE8 0000                       		dc.w byte_CB47-Map_obj34
0000CEEA 0000                       		dc.w byte_CB8A-Map_obj34
0000CEEC 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CEED F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CEF2 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CEF7 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CEFC F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CF01 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CF06 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CF0B F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CF10 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CF15 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CF1A F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CF1F F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CF24 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CF29 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CF2A F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CF2F F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CF34 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF39 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF3E F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF43 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF48 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF4D F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CF52 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CF57 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CF5C F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CF61 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CF66 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CF6B F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CF70 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CF75 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CF7A F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CF7F F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CF84 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CF89 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CF8E F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CF93 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CF98 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CF99 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CF9E F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CFA3 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CFA8 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CFAD F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CFB2 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CFB3 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CFB8 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CFBD F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CFC2 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CFC7 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CFCC F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CFD1 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CFD6 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CFDB F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CFE0 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CFE5 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CFEA F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CFEF F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CFF4 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CFF9 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CFFE F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D003 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D008 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D009 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D00E F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D013 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D018 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D01D F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D022 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D027 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D02C F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D031 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D036 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D03B F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D040 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D045 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D04A F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D04F F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D054 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D059 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D05E F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D063 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D068 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D06D F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D072 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D073 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D078 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D07D F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D082 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D087 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D08C F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D091 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D096 04                         byte_CB10:	dc.b 4			; ZONE
0000D097 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D09C F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D0A1 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D0A6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D0AB 00                         		dc.b 0
0000D0AC 02                         byte_CB26:	dc.b 2			; ACT 1
0000D0AD 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0B2 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D0B7 02                         byte_CB31:	dc.b 2			; ACT 2
0000D0B8 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0BD F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D0C2 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D0C3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0C8 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D0CD 0D                         byte_CB47:	dc.b $D			; Oval
0000D0CE E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D0D3 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D0D8 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D0DD F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D0E2 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D0E7 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D0EC 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D0F1 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D0F6 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D0FB F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D100 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D105 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D10A 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D10F 00                         		dc.b 0
0000D110 05                         byte_CB8A:	dc.b 5			; FINAL
0000D111 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D116 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D11B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D120 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D125 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D12A                            		even
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A                            Map_obj39:
0000D12A                            	include "_maps\obj39.asm"
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A 0000                       		dc.w byte_CBAC-Map_obj39
0000D12C 0000                       		dc.w byte_CBB7-Map_obj39
0000D12E 0000                       		dc.w byte_CBC2-Map_obj39
0000D130 0000                       		dc.w byte_CBCD-Map_obj39
0000D132 02                         byte_CBAC:	dc.b 2
0000D133 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D138 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D13D 02                         byte_CBB7:	dc.b 2
0000D13E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D143 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D148 02                         byte_CBC2:	dc.b 2
0000D149 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D14E F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D153 02                         byte_CBCD:	dc.b 2
0000D154 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D159 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D15E                            		even
0000D15E                            		even
0000D15E                            
0000D15E                            ; ---------------------------------------------------------------------------
0000D15E                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D15E                            ; ---------------------------------------------------------------------------
0000D15E 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D160 0000                       		dc.w byte_CC13-Map_obj3A
0000D162 0000                       		dc.w byte_CC32-Map_obj3A
0000D164 0000                       		dc.w byte_CC51-Map_obj3A
0000D166 0000                       		dc.w byte_CC75-Map_obj3A
0000D168 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D16A FF4E                       		dc.w byte_CB26-Map_obj3A
0000D16C FF59                       		dc.w byte_CB31-Map_obj3A
0000D16E FF64                       		dc.w byte_CB3C-Map_obj3A
0000D170 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D171 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D176 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D17B F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D180 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D185 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D18A F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D18F F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D194 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D199 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D19E F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D1A3 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D1A8 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D1AD F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D1B2 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D1B7 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D1BC 06                         byte_CC13:	dc.b 6			; PASSED
0000D1BD F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D1C2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D1C7 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D1CC F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D1D1 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D1D6 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D1DB 06                         byte_CC32:	dc.b 6			; SCORE
0000D1DC F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D1E1 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D1E6 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D1EB F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D1F0 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D1F5 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D1FA 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D1FB F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D200 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D205 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D20A F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D20F FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D214 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D219 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D21E 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D21F F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D224 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D229 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D22E F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D233 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D238 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D23D F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D242                            		even
0000D242                            ; ---------------------------------------------------------------------------
0000D242                            ; Sprite mappings - special stage results screen
0000D242                            ; ---------------------------------------------------------------------------
0000D242 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D244 0000                       		dc.w byte_CCEE-Map_obj7E
0000D246 0000                       		dc.w byte_CD0D-Map_obj7E
0000D248 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D24A 0000                       		dc.w byte_CD31-Map_obj7E
0000D24C 0000                       		dc.w byte_CD46-Map_obj7E
0000D24E 0000                       		dc.w byte_CD5B-Map_obj7E
0000D250 0000                       		dc.w byte_CD6B-Map_obj7E
0000D252 0000                       		dc.w byte_CDA8-Map_obj7E
0000D254 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D255 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D25A F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D25F F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D264 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D269 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D26E F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D273 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D278 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D27D F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D282 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D287 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D28C F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D291 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D296 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D297 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D29C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D2A1 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D2A6 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D2AB F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D2B0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D2B5 07                         byte_CD0D:	dc.b 7
0000D2B6 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D2BB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D2C0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D2C5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D2CA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D2CF F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D2D4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D2D9 04                         byte_CD31:	dc.b 4
0000D2DA F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2DF F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2E4 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2E9 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D2EE 04                         byte_CD46:	dc.b 4
0000D2EF F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2F4 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2F9 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2FE F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D303 03                         byte_CD5B:	dc.b 3
0000D304 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D309 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D30E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D313 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D314 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D319 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D31E F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D323 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D328 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D32D F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D332 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D337 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D33C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D341 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D346 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D34B F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D350 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D351 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D356 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D35B F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D360 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D365 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D36A F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D36F F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D374 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D379 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D37E F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D383 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D388 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D38D F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D392 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D397 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D39C                            		even
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            Map_obj7F:
0000D39C                            	include "_maps\obj7F.asm"
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C 0000                       		dc.w byte_CE02-Map_obj7F
0000D39E 0000                       		dc.w byte_CE08-Map_obj7F
0000D3A0 0000                       		dc.w byte_CE0E-Map_obj7F
0000D3A2 0000                       		dc.w byte_CE14-Map_obj7F
0000D3A4 0000                       		dc.w byte_CE1A-Map_obj7F
0000D3A6 0000                       		dc.w byte_CE20-Map_obj7F
0000D3A8 0000                       		dc.w byte_CE26-Map_obj7F
0000D3AA 01                         byte_CE02:	dc.b 1
0000D3AB F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D3B0 01                         byte_CE08:	dc.b 1
0000D3B1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D3B6 01                         byte_CE0E:	dc.b 1
0000D3B7 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D3BC 01                         byte_CE14:	dc.b 1
0000D3BD F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D3C2 01                         byte_CE1A:	dc.b 1
0000D3C3 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D3C8 01                         byte_CE20:	dc.b 1
0000D3C9 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D3CE 00                         byte_CE26:	dc.b 0			; Blank frame
0000D3D0 00                         		even
0000D3D0 00                         		even
0000D3D0                            
0000D3D0                            ; ===========================================================================
0000D3D0                            ; ---------------------------------------------------------------------------
0000D3D0                            ; Object 36 - spikes
0000D3D0                            ; ---------------------------------------------------------------------------
0000D3D0                            
0000D3D0                            Obj36:					; XREF: Obj_Index
0000D3D0 7000                       		moveq	#0,d0
0000D3D2 1028 0024                  		move.b	$24(a0),d0
0000D3D6 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D3DA 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D3DE                            ; ===========================================================================
0000D3DE 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D3E0 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D3E2                            
0000D3E2 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D3E4 0110                       		dc.b 1,	$10
0000D3E6 0204                       		dc.b 2,	4
0000D3E8 031C                       		dc.b 3,	$1C
0000D3EA 0440                       		dc.b 4,	$40
0000D3EC 0510                       		dc.b 5,	$10
0000D3EE                            ; ===========================================================================
0000D3EE                            
0000D3EE                            Obj36_Main:				; XREF: Obj36_Index
0000D3EE 5428 0024                  		addq.b	#2,$24(a0)
0000D3F2 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D3FA 317C 051B 0002             		move.w	#$51B,2(a0)
0000D400 0028 0004 0001             		ori.b	#4,1(a0)
0000D406 117C 0004 0018             		move.b	#4,$18(a0)
0000D40C 1028 0028                  		move.b	$28(a0),d0
0000D410 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D416 0240 00F0                  		andi.w	#$F0,d0
0000D41A 43F9 0000 D3E2             		lea	(Obj36_Var).l,a1
0000D420 E648                       		lsr.w	#3,d0
0000D422 D2C0                       		adda.w	d0,a1
0000D424 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D428 1159 0019                  		move.b	(a1)+,$19(a0)
0000D42C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D432 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D438                            
0000D438                            Obj36_Solid:				; XREF: Obj36_Index
0000D438 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D43C 343C 0004                  		move.w	#4,d2
0000D440 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D446 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D448 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D44E 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D450 343C 0014                  		move.w	#$14,d2
0000D454                            
0000D454                            ; Spikes types $1x and $5x face	sideways
0000D454                            
0000D454                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D454 323C 001B                  		move.w	#$1B,d1
0000D458 3602                       		move.w	d2,d3
0000D45A 5243                       		addq.w	#1,d3
0000D45C 3828 0008                  		move.w	8(a0),d4
0000D460 6100 0000                  		bsr.w	SolidObject
0000D464 0828 0003 0022             		btst	#3,$22(a0)
0000D46A 6600                       		bne.s	Obj36_Display
0000D46C 0C44 0001                  		cmpi.w	#1,d4
0000D470 6700                       		beq.s	Obj36_Hurt
0000D472 6000                       		bra.s	Obj36_Display
0000D474                            ; ===========================================================================
0000D474                            
0000D474                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D474                            
0000D474                            Obj36_Upright:				; XREF: Obj36_Solid
0000D474 7200                       		moveq	#0,d1
0000D476 1228 0019                  		move.b	$19(a0),d1
0000D47A 0641 000B                  		addi.w	#$B,d1
0000D47E 343C 0010                  		move.w	#$10,d2
0000D482 363C 0011                  		move.w	#$11,d3
0000D486 3828 0008                  		move.w	8(a0),d4
0000D48A 6100 0000                  		bsr.w	SolidObject
0000D48E 0828 0003 0022             		btst	#3,$22(a0)
0000D494 6600                       		bne.s	Obj36_Hurt
0000D496 4A44                       		tst.w	d4
0000D498 6A00                       		bpl.s	Obj36_Display
0000D49A                            
0000D49A                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D49A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D49E 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D4A0 2F08                       		move.l	a0,-(sp)
0000D4A2 2448                       		movea.l	a0,a2
0000D4A4 41F8 D000                  		lea	($FFFFD000).w,a0
0000D4A8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D4AE 6400                       		bcc.s	loc_CF20
0000D4B0 2628 000C                  		move.l	$C(a0),d3
0000D4B4 3028 0012                  		move.w	$12(a0),d0
0000D4B8 48C0                       		ext.l	d0
0000D4BA E180                       		asl.l	#8,d0
0000D4BC 9680                       		sub.l	d0,d3
0000D4BE 2143 000C                  		move.l	d3,$C(a0)
0000D4C2 4EB9 0000 0000             		jsr	HurtSonic
0000D4C8                            
0000D4C8                            loc_CF20:
0000D4C8 205F                       		movea.l	(sp)+,a0
0000D4CA                            
0000D4CA                            Obj36_Display:
0000D4CA 6100 0000                  		bsr.w	DisplaySprite
0000D4CE 3028 0030                  		move.w	$30(a0),d0
0000D4D2 0240 FF80                  		andi.w	#$FF80,d0
0000D4D6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4DA 0441 0080                  		subi.w	#$80,d1
0000D4DE 0241 FF80                  		andi.w	#$FF80,d1
0000D4E2 9041                       		sub.w	d1,d0
0000D4E4 0C40 0280                  		cmpi.w	#$280,d0
0000D4E8 6200 0000                  		bhi.w	DeleteObject
0000D4EC 4E75                       		rts	
0000D4EE                            ; ===========================================================================
0000D4EE                            
0000D4EE                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D4EE 7000                       		moveq	#0,d0
0000D4F0 1028 0028                  		move.b	$28(a0),d0
0000D4F4 D040                       		add.w	d0,d0
0000D4F6 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D4FA 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D4FE                            ; ===========================================================================
0000D4FE 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D500 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D502 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D504                            ; ===========================================================================
0000D504                            
0000D504                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D504 4E75                       		rts			; don't move the object
0000D506                            ; ===========================================================================
0000D506                            
0000D506                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D506 6100 0000                  		bsr.w	Obj36_Wait
0000D50A 7000                       		moveq	#0,d0
0000D50C 1028 0034                  		move.b	$34(a0),d0
0000D510 D068 0032                  		add.w	$32(a0),d0
0000D514 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D518 4E75                       		rts	
0000D51A                            ; ===========================================================================
0000D51A                            
0000D51A                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D51A 6100 0000                  		bsr.w	Obj36_Wait
0000D51E 7000                       		moveq	#0,d0
0000D520 1028 0034                  		move.b	$34(a0),d0
0000D524 D068 0030                  		add.w	$30(a0),d0
0000D528 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D52C 4E75                       		rts	
0000D52E                            ; ===========================================================================
0000D52E                            
0000D52E                            Obj36_Wait:
0000D52E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D532 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D534 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D538 6600                       		bne.s	locret_CFE6
0000D53A 4A28 0001                  		tst.b	1(a0)
0000D53E 6A00                       		bpl.s	locret_CFE6
0000D540 303C 00B6                  		move.w	#$B6,d0
0000D544 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D54A 6000                       		bra.s	locret_CFE6
0000D54C                            ; ===========================================================================
0000D54C                            
0000D54C                            loc_CFA4:
0000D54C 4A68 0036                  		tst.w	$36(a0)
0000D550 6700                       		beq.s	loc_CFC6
0000D552 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D558 6400                       		bcc.s	locret_CFE6
0000D55A 317C 0000 0034             		move.w	#0,$34(a0)
0000D560 317C 0000 0036             		move.w	#0,$36(a0)
0000D566 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D56C 6000                       		bra.s	locret_CFE6
0000D56E                            ; ===========================================================================
0000D56E                            
0000D56E                            loc_CFC6:
0000D56E 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D574 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D57A 6500                       		bcs.s	locret_CFE6
0000D57C 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D582 317C 0001 0036             		move.w	#1,$36(a0)
0000D588 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D58E                            
0000D58E                            locret_CFE6:
0000D58E 4E75                       		rts	
0000D590                            ; ===========================================================================
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            ; Sprite mappings - spikes
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            Map_obj36:
0000D590                            	include "_maps\obj36.asm"
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            ; Sprite mappings - spikes
0000D590                            ; ---------------------------------------------------------------------------
0000D590 0000                       		dc.w byte_CFF4-Map_obj36
0000D592 0000                       		dc.w byte_D004-Map_obj36
0000D594 0000                       		dc.w byte_D014-Map_obj36
0000D596 0000                       		dc.w byte_D01A-Map_obj36
0000D598 0000                       		dc.w byte_D02A-Map_obj36
0000D59A 0000                       		dc.w byte_D049-Map_obj36
0000D59C 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D59D F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D5A2 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5A7 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D5AC 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D5AD EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D5B2 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5B7 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D5BC 01                         byte_D014:	dc.b 1			; 1 spike
0000D5BD F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5C2 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D5C3 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D5C8 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5CD F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D5D2 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D5D3 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D5D8 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D5DD F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D5E2 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D5E7 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D5EC F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D5F1 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D5F2 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5F8 00                         		even
0000D5F8 00                         		even
0000D5F8                            
0000D5F8                            ; ===========================================================================
0000D5F8                            ; ---------------------------------------------------------------------------
0000D5F8                            ; Object 3B - purple rock (GHZ)
0000D5F8                            ; ---------------------------------------------------------------------------
0000D5F8                            
0000D5F8                            Obj3B:					; XREF: Obj_Index
0000D5F8 7000                       		moveq	#0,d0
0000D5FA 1028 0024                  		move.b	$24(a0),d0
0000D5FE 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D602 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D606                            ; ===========================================================================
0000D606 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D608 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D60A                            ; ===========================================================================
0000D60A                            
0000D60A                            Obj3B_Main:				; XREF: Obj3B_Index
0000D60A 5428 0024                  		addq.b	#2,$24(a0)
0000D60E 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D616 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D61C 117C 0004 0001             		move.b	#4,1(a0)
0000D622 117C 0013 0019             		move.b	#$13,$19(a0)
0000D628 117C 0004 0018             		move.b	#4,$18(a0)
0000D62E                            
0000D62E                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D62E 323C 001B                  		move.w	#$1B,d1
0000D632 343C 0010                  		move.w	#$10,d2
0000D636 363C 0010                  		move.w	#$10,d3
0000D63A 3828 0008                  		move.w	8(a0),d4
0000D63E 6100 0000                  		bsr.w	SolidObject
0000D642 6100 0000                  		bsr.w	DisplaySprite
0000D646 3028 0008                  		move.w	8(a0),d0
0000D64A 0240 FF80                  		andi.w	#$FF80,d0
0000D64E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D652 0441 0080                  		subi.w	#$80,d1
0000D656 0241 FF80                  		andi.w	#$FF80,d1
0000D65A 9041                       		sub.w	d1,d0
0000D65C 0C40 0280                  		cmpi.w	#$280,d0
0000D660 6200 0000                  		bhi.w	DeleteObject
0000D664 4E75                       		rts	
0000D666                            ; ===========================================================================
0000D666                            ; ---------------------------------------------------------------------------
0000D666                            ; Object 49 - waterfall	sound effect (GHZ)
0000D666                            ; ---------------------------------------------------------------------------
0000D666                            
0000D666                            Obj49:					; XREF: Obj_Index
0000D666 7000                       		moveq	#0,d0
0000D668 1028 0024                  		move.b	$24(a0),d0
0000D66C 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D670 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D674                            ; ===========================================================================
0000D674 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D676 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D678                            ; ===========================================================================
0000D678                            
0000D678                            Obj49_Main:				; XREF: Obj49_Index
0000D678 5428 0024                  		addq.b	#2,$24(a0)
0000D67C 117C 0004 0001             		move.b	#4,1(a0)
0000D682                            
0000D682                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D682 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D686 0200 003F                  		andi.b	#$3F,d0
0000D68A 6600                       		bne.s	Obj49_ChkDel
0000D68C 303C 00D0                  		move.w	#$D0,d0
0000D690 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D696                            
0000D696                            Obj49_ChkDel:
0000D696 3028 0008                  		move.w	8(a0),d0
0000D69A 0240 FF80                  		andi.w	#$FF80,d0
0000D69E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6A2 0441 0080                  		subi.w	#$80,d1
0000D6A6 0241 FF80                  		andi.w	#$FF80,d1
0000D6AA 9041                       		sub.w	d1,d0
0000D6AC 0C40 0280                  		cmpi.w	#$280,d0
0000D6B0 6200 0000                  		bhi.w	DeleteObject
0000D6B4 4E75                       		rts	
0000D6B6                            ; ===========================================================================
0000D6B6                            ; ---------------------------------------------------------------------------
0000D6B6                            ; Sprite mappings - purple rock	(GHZ)
0000D6B6                            ; ---------------------------------------------------------------------------
0000D6B6                            Map_obj3B:
0000D6B6                            	include "_maps\obj3B.asm"
0000D6B6                            ; ---------------------------------------------------------------------------
0000D6B6                            ; Sprite mappings - purple rock	(GHZ)
0000D6B6                            ; ---------------------------------------------------------------------------
0000D6B6 0000                       		dc.w byte_D110-Map_obj3B
0000D6B8 02                         byte_D110:	dc.b 2
0000D6B9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D6BE F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D6C4 00                         		even
0000D6C4 00                         		even
0000D6C4                            
0000D6C4                            ; ===========================================================================
0000D6C4                            ; ---------------------------------------------------------------------------
0000D6C4                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D6C4                            ; ---------------------------------------------------------------------------
0000D6C4                            
0000D6C4                            Obj3C:					; XREF: Obj_Index
0000D6C4 7000                       		moveq	#0,d0
0000D6C6 1028 0024                  		move.b	$24(a0),d0
0000D6CA 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D6CE 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D6D2 6000 0000                  		bra.w	MarkObjGone
0000D6D6                            ; ===========================================================================
0000D6D6 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D6D8 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D6DA 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D6DC                            ; ===========================================================================
0000D6DC                            
0000D6DC                            Obj3C_Main:				; XREF: Obj3C_Index
0000D6DC 5428 0024                  		addq.b	#2,$24(a0)
0000D6E0 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D6E8 317C 450F 0002             		move.w	#$450F,2(a0)
0000D6EE 117C 0004 0001             		move.b	#4,1(a0)
0000D6F4 117C 0010 0019             		move.b	#$10,$19(a0)
0000D6FA 117C 0004 0018             		move.b	#4,$18(a0)
0000D700 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D706                            
0000D706                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D706 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D70C 323C 001B                  		move.w	#$1B,d1
0000D710 343C 0020                  		move.w	#$20,d2
0000D714 363C 0020                  		move.w	#$20,d3
0000D718 3828 0008                  		move.w	8(a0),d4
0000D71C 6100 0000                  		bsr.w	SolidObject
0000D720 0828 0005 0022             		btst	#5,$22(a0)
0000D726 6600                       		bne.s	Obj3C_ChkRoll
0000D728                            
0000D728                            locret_D180:
0000D728 4E75                       		rts	
0000D72A                            ; ===========================================================================
0000D72A                            
0000D72A                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D72A 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D730 66F6                       		bne.s	locret_D180	; if not, branch
0000D732 3028 0030                  		move.w	$30(a0),d0
0000D736 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D738 4440                       		neg.w	d0
0000D73A                            
0000D73A                            Obj3C_ChkSpeed:
0000D73A 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D73E 65E8                       		bcs.s	locret_D180	; if not, branch
0000D740 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D746 5869 0008                  		addq.w	#4,8(a1)
0000D74A 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D750 3028 0008                  		move.w	8(a0),d0
0000D754 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D758 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D75A 5169 0008                  		subq.w	#8,8(a1)
0000D75E 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D764                            
0000D764                            Obj3C_Smash:
0000D764 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D76A 08A8 0005 0022             		bclr	#5,$22(a0)
0000D770 08A9 0005 0022             		bclr	#5,$22(a1)
0000D776 7207                       		moveq	#7,d1		; load 8 fragments
0000D778 343C 0070                  		move.w	#$70,d2
0000D77C 6100                       		bsr.s	SmashObject
0000D77E                            
0000D77E                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D77E 6100 0000                  		bsr.w	SpeedToPos
0000D782 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D788 6100 0000                  		bsr.w	DisplaySprite
0000D78C 4A28 0001                  		tst.b	1(a0)
0000D790 6A00 0000                  		bpl.w	DeleteObject
0000D794 4E75                       		rts	
0000D796                            
0000D796                            ; ---------------------------------------------------------------------------
0000D796                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D796                            ; ---------------------------------------------------------------------------
0000D796                            
0000D796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D796                            
0000D796                            
0000D796                            SmashObject:				; XREF: Obj3C_Smash
0000D796 7000                       		moveq	#0,d0
0000D798 1028 001A                  		move.b	$1A(a0),d0
0000D79C D040                       		add.w	d0,d0
0000D79E 2668 0004                  		movea.l	4(a0),a3
0000D7A2 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D7A6 524B                       		addq.w	#1,a3
0000D7A8 08E8 0005 0001             		bset	#5,1(a0)
0000D7AE 1810                       		move.b	0(a0),d4
0000D7B0 1A28 0001                  		move.b	1(a0),d5
0000D7B4 2248                       		movea.l	a0,a1
0000D7B6 6000                       		bra.s	Smash_LoadFrag
0000D7B8                            ; ===========================================================================
0000D7B8                            
0000D7B8                            Smash_Loop:
0000D7B8 6100 0000                  		bsr.w	SingleObjLoad
0000D7BC 6600                       		bne.s	Smash_PlaySnd
0000D7BE 5A4B                       		addq.w	#5,a3
0000D7C0                            
0000D7C0                            Smash_LoadFrag:				; XREF: SmashObject
0000D7C0 137C 0004 0024             		move.b	#4,$24(a1)
0000D7C6 1284                       		move.b	d4,0(a1)
0000D7C8 234B 0004                  		move.l	a3,4(a1)
0000D7CC 1345 0001                  		move.b	d5,1(a1)
0000D7D0 3368 0008 0008             		move.w	8(a0),8(a1)
0000D7D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D7DC 3368 0002 0002             		move.w	2(a0),2(a1)
0000D7E2 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D7E8 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D7EE 335C 0010                  		move.w	(a4)+,$10(a1)
0000D7F2 335C 0012                  		move.w	(a4)+,$12(a1)
0000D7F6 B3C8                       		cmpa.l	a0,a1
0000D7F8 6400                       		bcc.s	loc_D268
0000D7FA 2F08                       		move.l	a0,-(sp)
0000D7FC 2049                       		movea.l	a1,a0
0000D7FE 6100 0000                  		bsr.w	SpeedToPos
0000D802 D568 0012                  		add.w	d2,$12(a0)
0000D806 205F                       		movea.l	(sp)+,a0
0000D808 6100 0000                  		bsr.w	DisplaySprite2
0000D80C                            
0000D80C                            loc_D268:
0000D80C 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D810                            
0000D810                            Smash_PlaySnd:
0000D810 303C 00CB                  		move.w	#$CB,d0
0000D814 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D81A                            ; End of function SmashObject
0000D81A                            
0000D81A                            ; ===========================================================================
0000D81A                            ; Smashed block	fragment speeds
0000D81A                            ;
0000D81A 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D81E 0600 FF00                  		dc.w $600, $FF00
0000D822 0600 0100                  		dc.w $600, $100
0000D826 0400 0500                  		dc.w $400, $500
0000D82A 0600 FA00                  		dc.w $600, $FA00
0000D82E 0800 FE00                  		dc.w $800, $FE00
0000D832 0800 0200                  		dc.w $800, $200
0000D836 0600 0600                  		dc.w $600, $600
0000D83A                            
0000D83A FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D83E F800 FE00                  		dc.w $F800, $FE00
0000D842 F800 0200                  		dc.w $F800, $200
0000D846 FA00 0600                  		dc.w $FA00, $600
0000D84A FC00 FB00                  		dc.w $FC00, $FB00
0000D84E FA00 FF00                  		dc.w $FA00, $FF00
0000D852 FA00 0100                  		dc.w $FA00, $100
0000D856 FC00 0500                  		dc.w $FC00, $500
0000D85A                            ; ---------------------------------------------------------------------------
0000D85A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D85A                            ; ---------------------------------------------------------------------------
0000D85A                            Map_obj3C:
0000D85A                            	include "_maps\obj3C.asm"
0000D85A                            ; ---------------------------------------------------------------------------
0000D85A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D85A                            ; ---------------------------------------------------------------------------
0000D85A 0000                       		dc.w byte_D2BC-Map_obj3C
0000D85C 0000                       		dc.w byte_D2E5-Map_obj3C
0000D85E 0000                       		dc.w byte_D30E-Map_obj3C
0000D860 08                         byte_D2BC:	dc.b 8
0000D861 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D866 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D86B 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D870 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D875 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D87A F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D87F 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D884 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D889 08                         byte_D2E5:	dc.b 8
0000D88A E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D88F F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D894 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D899 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D89E E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8A3 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8A8 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D8AD 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D8B2 08                         byte_D30E:	dc.b 8
0000D8B3 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D8B8 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8BD 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8C2 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8C7 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D8CC F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D8D1 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D8D6 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D8DC 00                         		even
0000D8DC 00                         		even
0000D8DC                            
0000D8DC                            ; ---------------------------------------------------------------------------
0000D8DC                            ; Object code loading subroutine
0000D8DC                            ; ---------------------------------------------------------------------------
0000D8DC                            
0000D8DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8DC                            
0000D8DC                            
0000D8DC                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D8DC 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D8E0 7E7F                       		moveq	#$7F,d7
0000D8E2 7000                       		moveq	#0,d0
0000D8E4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D8EA 6400                       		bcc.s	loc_D362
0000D8EC                            
0000D8EC                            loc_D348:
0000D8EC 1010                       		move.b	(a0),d0		; load object number from RAM
0000D8EE 6700                       		beq.s	loc_D358
0000D8F0 D040                       		add.w	d0,d0
0000D8F2 D040                       		add.w	d0,d0
0000D8F4 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D8F8 4E91                       		jsr	(a1)		; run the object's code
0000D8FA 7000                       		moveq	#0,d0
0000D8FC                            
0000D8FC                            loc_D358:
0000D8FC 41E8 0040                  		lea	$40(a0),a0	; next object
0000D900 51CF FFEA                  		dbf	d7,loc_D348
0000D904 4E75                       		rts	
0000D906                            ; ===========================================================================
0000D906                            
0000D906                            loc_D362:
0000D906 7E1F                       		moveq	#$1F,d7
0000D908 61E2                       		bsr.s	loc_D348
0000D90A 7E5F                       		moveq	#$5F,d7
0000D90C                            
0000D90C                            loc_D368:
0000D90C 7000                       		moveq	#0,d0
0000D90E 1010                       		move.b	(a0),d0
0000D910 6700                       		beq.s	loc_D378
0000D912 4A28 0001                  		tst.b	1(a0)
0000D916 6A00                       		bpl.s	loc_D378
0000D918 6100 0000                  		bsr.w	DisplaySprite
0000D91C                            
0000D91C                            loc_D378:
0000D91C 41E8 0040                  		lea	$40(a0),a0
0000D920                            
0000D920                            loc_D37C:
0000D920 51CF FFEA                  		dbf	d7,loc_D368
0000D924 4E75                       		rts	
0000D926                            ; End of function ObjectsLoad
0000D926                            
0000D926                            ; ===========================================================================
0000D926                            ; ---------------------------------------------------------------------------
0000D926                            ; Object pointers
0000D926                            ; ---------------------------------------------------------------------------
0000D926                            Obj_Index:
0000D926                            	include "_inc\Object pointers.asm"
0000D926                            ; ---------------------------------------------------------------------------
0000D926                            ; Object pointers
0000D926                            ; ---------------------------------------------------------------------------
0000D926 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D936 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D946 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D956 0000 0000 0000 AB46 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D966 0000 777E 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D976 0000 7DA4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D986 0000 85F2 0000 865A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D996 0000 8CA4 0000 8F92 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D9A6 0000 0000 0000 9C42 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D9B6 0000 9F7A 0000 A566 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D9C6 0000 989E 0000 8D7A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D9D6 0000 B16A 0000 A75A 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D9E6 0000 BB78 0000 C226 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D9F6 0000 B6DC 0000 D3D0 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DA06 0000 C9AC 0000 CA66 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DA16 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DA26 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA36 0000 BE94 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA46 0000 D666 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DA56 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DA66 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DA76 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DA86 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DA96 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DAA6 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DAB6 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DAC6 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DAD6 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DAE6 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DAF6 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DB06 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DB16 0000 0000 0000 CCA0 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DB26 0000 529E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB36 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB46 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB46 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB56                            
0000DB56                            ; ---------------------------------------------------------------------------
0000DB56                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DB56                            ; ---------------------------------------------------------------------------
0000DB56                            
0000DB56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB56                            
0000DB56                            
0000DB56                            ObjectFall:
0000DB56 2428 0008                  		move.l	8(a0),d2
0000DB5A 2628 000C                  		move.l	$C(a0),d3
0000DB5E 3028 0010                  		move.w	$10(a0),d0
0000DB62 48C0                       		ext.l	d0
0000DB64 E180                       		asl.l	#8,d0
0000DB66 D480                       		add.l	d0,d2
0000DB68 3028 0012                  		move.w	$12(a0),d0
0000DB6C 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DB72 48C0                       		ext.l	d0
0000DB74 E180                       		asl.l	#8,d0
0000DB76 D680                       		add.l	d0,d3
0000DB78 2142 0008                  		move.l	d2,8(a0)
0000DB7C 2143 000C                  		move.l	d3,$C(a0)
0000DB80 4E75                       		rts	
0000DB82                            ; End of function ObjectFall
0000DB82                            
0000DB82                            ; ---------------------------------------------------------------------------
0000DB82                            ; Subroutine translating object	speed to update	object position
0000DB82                            ; ---------------------------------------------------------------------------
0000DB82                            
0000DB82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB82                            
0000DB82                            
0000DB82                            SpeedToPos:
0000DB82 2428 0008                  		move.l	8(a0),d2
0000DB86 2628 000C                  		move.l	$C(a0),d3
0000DB8A 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DB8E 48C0                       		ext.l	d0
0000DB90 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DB92 D480                       		add.l	d0,d2		; add to x-axis	position
0000DB94 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DB98 48C0                       		ext.l	d0
0000DB9A E180                       		asl.l	#8,d0		; multiply by $100
0000DB9C D680                       		add.l	d0,d3		; add to y-axis	position
0000DB9E 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DBA2 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DBA6 4E75                       		rts	
0000DBA8                            ; End of function SpeedToPos
0000DBA8                            
0000DBA8                            ; ---------------------------------------------------------------------------
0000DBA8                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DBA8                            ; ---------------------------------------------------------------------------
0000DBA8                            
0000DBA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBA8                            
0000DBA8                            
0000DBA8                            DisplaySprite:
0000DBA8 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DBAC 3028 0018                  		move.w	$18(a0),d0
0000DBB0 E248                       		lsr.w	#1,d0
0000DBB2 0240 0380                  		andi.w	#$380,d0
0000DBB6 D2C0                       		adda.w	d0,a1
0000DBB8 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DBBC 6400                       		bcc.s	locret_D620
0000DBBE 5451                       		addq.w	#2,(a1)
0000DBC0 D2D1                       		adda.w	(a1),a1
0000DBC2 3288                       		move.w	a0,(a1)
0000DBC4                            
0000DBC4                            locret_D620:
0000DBC4 4E75                       		rts	
0000DBC6                            ; End of function DisplaySprite
0000DBC6                            
0000DBC6                            ; ---------------------------------------------------------------------------
0000DBC6                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DBC6                            ; ---------------------------------------------------------------------------
0000DBC6                            
0000DBC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBC6                            
0000DBC6                            
0000DBC6                            DisplaySprite2:
0000DBC6 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DBCA 3029 0018                  		move.w	$18(a1),d0
0000DBCE E248                       		lsr.w	#1,d0
0000DBD0 0240 0380                  		andi.w	#$380,d0
0000DBD4 D4C0                       		adda.w	d0,a2
0000DBD6 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DBDA 6400                       		bcc.s	locret_D63E
0000DBDC 5452                       		addq.w	#2,(a2)
0000DBDE D4D2                       		adda.w	(a2),a2
0000DBE0 3489                       		move.w	a1,(a2)
0000DBE2                            
0000DBE2                            locret_D63E:
0000DBE2 4E75                       		rts	
0000DBE4                            ; End of function DisplaySprite2
0000DBE4                            
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            ; Subroutine to	delete an object
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            
0000DBE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBE4                            
0000DBE4                            
0000DBE4                            DeleteObject:
0000DBE4 2248                       		movea.l	a0,a1
0000DBE6                            
0000DBE6                            DeleteObject2:
0000DBE6 7200                       		moveq	#0,d1
0000DBE8 700F                       		moveq	#$F,d0
0000DBEA                            
0000DBEA                            loc_D646:
0000DBEA 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DBEC 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DBF0 4E75                       		rts	
0000DBF2                            ; End of function DeleteObject
0000DBF2                            
0000DBF2                            ; ===========================================================================
0000DBF2 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DBF6 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DBFA 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DBFE 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DC02                            ; ---------------------------------------------------------------------------
0000DC02                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DC02                            ; ---------------------------------------------------------------------------
0000DC02                            
0000DC02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC02                            
0000DC02                            
0000DC02                            BuildSprites:				; XREF: TitleScreen; et al
0000DC02 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DC06 7A00                       		moveq	#0,d5
0000DC08 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DC0C 7E07                       		moveq	#7,d7
0000DC0E                            
0000DC0E                            loc_D66A:
0000DC0E 4A54                       		tst.w	(a4)
0000DC10 6700 0000                  		beq.w	loc_D72E
0000DC14 7C02                       		moveq	#2,d6
0000DC16                            
0000DC16                            loc_D672:
0000DC16 3074 6000                  		movea.w	(a4,d6.w),a0
0000DC1A 4A10                       		tst.b	(a0)
0000DC1C 6700 0000                  		beq.w	loc_D726
0000DC20 08A8 0007 0001             		bclr	#7,1(a0)
0000DC26 1028 0001                  		move.b	1(a0),d0
0000DC2A 1800                       		move.b	d0,d4
0000DC2C 0240 000C                  		andi.w	#$C,d0
0000DC30 6700                       		beq.s	loc_D6DE
0000DC32 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC36 7000                       		moveq	#0,d0
0000DC38 1028 0019                  		move.b	$19(a0),d0
0000DC3C 3628 0008                  		move.w	8(a0),d3
0000DC40 9651                       		sub.w	(a1),d3
0000DC42 3203                       		move.w	d3,d1
0000DC44 D240                       		add.w	d0,d1
0000DC46 6B00 0000                  		bmi.w	loc_D726
0000DC4A 3203                       		move.w	d3,d1
0000DC4C 9240                       		sub.w	d0,d1
0000DC4E 0C41 0140                  		cmpi.w	#$140,d1
0000DC52 6C00                       		bge.s	loc_D726
0000DC54 0643 0080                  		addi.w	#$80,d3
0000DC58 0804 0004                  		btst	#4,d4
0000DC5C 6700                       		beq.s	loc_D6E8
0000DC5E 7000                       		moveq	#0,d0
0000DC60 1028 0016                  		move.b	$16(a0),d0
0000DC64 3428 000C                  		move.w	$C(a0),d2
0000DC68 9469 0004                  		sub.w	4(a1),d2
0000DC6C 3202                       		move.w	d2,d1
0000DC6E D240                       		add.w	d0,d1
0000DC70 6B00                       		bmi.s	loc_D726
0000DC72 3202                       		move.w	d2,d1
0000DC74 9240                       		sub.w	d0,d1
0000DC76 0C41 00E0                  		cmpi.w	#$E0,d1
0000DC7A 6C00                       		bge.s	loc_D726
0000DC7C 0642 0080                  		addi.w	#$80,d2
0000DC80 6000                       		bra.s	loc_D700
0000DC82                            ; ===========================================================================
0000DC82                            
0000DC82                            loc_D6DE:
0000DC82 3428 000A                  		move.w	$A(a0),d2
0000DC86 3628 0008                  		move.w	8(a0),d3
0000DC8A 6000                       		bra.s	loc_D700
0000DC8C                            ; ===========================================================================
0000DC8C                            
0000DC8C                            loc_D6E8:
0000DC8C 3428 000C                  		move.w	$C(a0),d2
0000DC90 9469 0004                  		sub.w	4(a1),d2
0000DC94 0642 0080                  		addi.w	#$80,d2
0000DC98 0C42 0060                  		cmpi.w	#$60,d2
0000DC9C 6500                       		bcs.s	loc_D726
0000DC9E 0C42 0180                  		cmpi.w	#$180,d2
0000DCA2 6400                       		bcc.s	loc_D726
0000DCA4                            
0000DCA4                            loc_D700:
0000DCA4 2268 0004                  		movea.l	4(a0),a1
0000DCA8 7200                       		moveq	#0,d1
0000DCAA 0804 0005                  		btst	#5,d4
0000DCAE 6600                       		bne.s	loc_D71C
0000DCB0 1228 001A                  		move.b	$1A(a0),d1
0000DCB4 D201                       		add.b	d1,d1
0000DCB6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DCBA 1219                       		move.b	(a1)+,d1
0000DCBC 5301                       		subq.b	#1,d1
0000DCBE 6B00                       		bmi.s	loc_D720
0000DCC0                            
0000DCC0                            loc_D71C:
0000DCC0 6100 0000                  		bsr.w	sub_D750
0000DCC4                            
0000DCC4                            loc_D720:
0000DCC4 08E8 0007 0001             		bset	#7,1(a0)
0000DCCA                            
0000DCCA                            loc_D726:
0000DCCA 5446                       		addq.w	#2,d6
0000DCCC 5554                       		subq.w	#2,(a4)
0000DCCE 6600 FF46                  		bne.w	loc_D672
0000DCD2                            
0000DCD2                            loc_D72E:
0000DCD2 49EC 0080                  		lea	$80(a4),a4
0000DCD6 51CF FF36                  		dbf	d7,loc_D66A
0000DCDA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DCDE 0C05 0050                  		cmpi.b	#$50,d5
0000DCE2 6700                       		beq.s	loc_D748
0000DCE4 24BC 0000 0000             		move.l	#0,(a2)
0000DCEA 4E75                       		rts	
0000DCEC                            ; ===========================================================================
0000DCEC                            
0000DCEC                            loc_D748:
0000DCEC 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DCF2 4E75                       		rts	
0000DCF4                            ; End of function BuildSprites
0000DCF4                            
0000DCF4                            
0000DCF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCF4                            
0000DCF4                            
0000DCF4                            sub_D750:				; XREF: BuildSprites
0000DCF4 3668 0002                  		movea.w	2(a0),a3
0000DCF8 0804 0000                  		btst	#0,d4
0000DCFC 6600                       		bne.s	loc_D796
0000DCFE 0804 0001                  		btst	#1,d4
0000DD02 6600 0000                  		bne.w	loc_D7E4
0000DD06                            ; End of function sub_D750
0000DD06                            
0000DD06                            
0000DD06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD06                            
0000DD06                            
0000DD06                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DD06 0C05 0050                  		cmpi.b	#$50,d5
0000DD0A 6700                       		beq.s	locret_D794
0000DD0C 1019                       		move.b	(a1)+,d0
0000DD0E 4880                       		ext.w	d0
0000DD10 D042                       		add.w	d2,d0
0000DD12 34C0                       		move.w	d0,(a2)+
0000DD14 14D9                       		move.b	(a1)+,(a2)+
0000DD16 5205                       		addq.b	#1,d5
0000DD18 14C5                       		move.b	d5,(a2)+
0000DD1A 1019                       		move.b	(a1)+,d0
0000DD1C E148                       		lsl.w	#8,d0
0000DD1E 1019                       		move.b	(a1)+,d0
0000DD20 D04B                       		add.w	a3,d0
0000DD22 34C0                       		move.w	d0,(a2)+
0000DD24 1019                       		move.b	(a1)+,d0
0000DD26 4880                       		ext.w	d0
0000DD28 D043                       		add.w	d3,d0
0000DD2A 0240 01FF                  		andi.w	#$1FF,d0
0000DD2E 6600                       		bne.s	loc_D78E
0000DD30 5240                       		addq.w	#1,d0
0000DD32                            
0000DD32                            loc_D78E:
0000DD32 34C0                       		move.w	d0,(a2)+
0000DD34 51C9 FFD0                  		dbf	d1,sub_D762
0000DD38                            
0000DD38                            locret_D794:
0000DD38 4E75                       		rts	
0000DD3A                            ; End of function sub_D762
0000DD3A                            
0000DD3A                            ; ===========================================================================
0000DD3A                            
0000DD3A                            loc_D796:
0000DD3A 0804 0001                  		btst	#1,d4
0000DD3E 6600 0000                  		bne.w	loc_D82A
0000DD42                            
0000DD42                            loc_D79E:
0000DD42 0C05 0050                  		cmpi.b	#$50,d5
0000DD46 6700                       		beq.s	locret_D7E2
0000DD48 1019                       		move.b	(a1)+,d0
0000DD4A 4880                       		ext.w	d0
0000DD4C D042                       		add.w	d2,d0
0000DD4E 34C0                       		move.w	d0,(a2)+
0000DD50 1819                       		move.b	(a1)+,d4
0000DD52 14C4                       		move.b	d4,(a2)+
0000DD54 5205                       		addq.b	#1,d5
0000DD56 14C5                       		move.b	d5,(a2)+
0000DD58 1019                       		move.b	(a1)+,d0
0000DD5A E148                       		lsl.w	#8,d0
0000DD5C 1019                       		move.b	(a1)+,d0
0000DD5E D04B                       		add.w	a3,d0
0000DD60 0A40 0800                  		eori.w	#$800,d0
0000DD64 34C0                       		move.w	d0,(a2)+
0000DD66 1019                       		move.b	(a1)+,d0
0000DD68 4880                       		ext.w	d0
0000DD6A 4440                       		neg.w	d0
0000DD6C D804                       		add.b	d4,d4
0000DD6E 0244 0018                  		andi.w	#$18,d4
0000DD72 5044                       		addq.w	#8,d4
0000DD74 9044                       		sub.w	d4,d0
0000DD76 D043                       		add.w	d3,d0
0000DD78 0240 01FF                  		andi.w	#$1FF,d0
0000DD7C 6600                       		bne.s	loc_D7DC
0000DD7E 5240                       		addq.w	#1,d0
0000DD80                            
0000DD80                            loc_D7DC:
0000DD80 34C0                       		move.w	d0,(a2)+
0000DD82 51C9 FFBE                  		dbf	d1,loc_D79E
0000DD86                            
0000DD86                            locret_D7E2:
0000DD86 4E75                       		rts	
0000DD88                            ; ===========================================================================
0000DD88                            
0000DD88                            loc_D7E4:				; XREF: sub_D750
0000DD88 0C05 0050                  		cmpi.b	#$50,d5
0000DD8C 6700                       		beq.s	locret_D828
0000DD8E 1019                       		move.b	(a1)+,d0
0000DD90 1811                       		move.b	(a1),d4
0000DD92 4880                       		ext.w	d0
0000DD94 4440                       		neg.w	d0
0000DD96 E70C                       		lsl.b	#3,d4
0000DD98 0244 0018                  		andi.w	#$18,d4
0000DD9C 5044                       		addq.w	#8,d4
0000DD9E 9044                       		sub.w	d4,d0
0000DDA0 D042                       		add.w	d2,d0
0000DDA2 34C0                       		move.w	d0,(a2)+
0000DDA4 14D9                       		move.b	(a1)+,(a2)+
0000DDA6 5205                       		addq.b	#1,d5
0000DDA8 14C5                       		move.b	d5,(a2)+
0000DDAA 1019                       		move.b	(a1)+,d0
0000DDAC E148                       		lsl.w	#8,d0
0000DDAE 1019                       		move.b	(a1)+,d0
0000DDB0 D04B                       		add.w	a3,d0
0000DDB2 0A40 1000                  		eori.w	#$1000,d0
0000DDB6 34C0                       		move.w	d0,(a2)+
0000DDB8 1019                       		move.b	(a1)+,d0
0000DDBA 4880                       		ext.w	d0
0000DDBC D043                       		add.w	d3,d0
0000DDBE 0240 01FF                  		andi.w	#$1FF,d0
0000DDC2 6600                       		bne.s	loc_D822
0000DDC4 5240                       		addq.w	#1,d0
0000DDC6                            
0000DDC6                            loc_D822:
0000DDC6 34C0                       		move.w	d0,(a2)+
0000DDC8 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DDCC                            
0000DDCC                            locret_D828:
0000DDCC 4E75                       		rts	
0000DDCE                            ; ===========================================================================
0000DDCE                            
0000DDCE                            loc_D82A:
0000DDCE 0C05 0050                  		cmpi.b	#$50,d5
0000DDD2 6700                       		beq.s	locret_D87C
0000DDD4 1019                       		move.b	(a1)+,d0
0000DDD6 1811                       		move.b	(a1),d4
0000DDD8 4880                       		ext.w	d0
0000DDDA 4440                       		neg.w	d0
0000DDDC E70C                       		lsl.b	#3,d4
0000DDDE 0244 0018                  		andi.w	#$18,d4
0000DDE2 5044                       		addq.w	#8,d4
0000DDE4 9044                       		sub.w	d4,d0
0000DDE6 D042                       		add.w	d2,d0
0000DDE8 34C0                       		move.w	d0,(a2)+
0000DDEA 1819                       		move.b	(a1)+,d4
0000DDEC 14C4                       		move.b	d4,(a2)+
0000DDEE 5205                       		addq.b	#1,d5
0000DDF0 14C5                       		move.b	d5,(a2)+
0000DDF2 1019                       		move.b	(a1)+,d0
0000DDF4 E148                       		lsl.w	#8,d0
0000DDF6 1019                       		move.b	(a1)+,d0
0000DDF8 D04B                       		add.w	a3,d0
0000DDFA 0A40 1800                  		eori.w	#$1800,d0
0000DDFE 34C0                       		move.w	d0,(a2)+
0000DE00 1019                       		move.b	(a1)+,d0
0000DE02 4880                       		ext.w	d0
0000DE04 4440                       		neg.w	d0
0000DE06 D804                       		add.b	d4,d4
0000DE08 0244 0018                  		andi.w	#$18,d4
0000DE0C 5044                       		addq.w	#8,d4
0000DE0E 9044                       		sub.w	d4,d0
0000DE10 D043                       		add.w	d3,d0
0000DE12 0240 01FF                  		andi.w	#$1FF,d0
0000DE16 6600                       		bne.s	loc_D876
0000DE18 5240                       		addq.w	#1,d0
0000DE1A                            
0000DE1A                            loc_D876:
0000DE1A 34C0                       		move.w	d0,(a2)+
0000DE1C 51C9 FFB0                  		dbf	d1,loc_D82A
0000DE20                            
0000DE20                            locret_D87C:
0000DE20 4E75                       		rts	
0000DE22                            ; ---------------------------------------------------------------------------
0000DE22                            ; Subroutine to	check if an object is on the screen
0000DE22                            ; ---------------------------------------------------------------------------
0000DE22                            
0000DE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE22                            
0000DE22                            
0000DE22                            ChkObjOnScreen:
0000DE22 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DE26 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DE2A 6B00                       		bmi.s	NotOnScreen
0000DE2C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DE30 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE32                            
0000DE32 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE36 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE3A 6B00                       		bmi.s	NotOnScreen
0000DE3C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE40 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE42                            
0000DE42 7000                       		moveq	#0,d0		; set flag to 0
0000DE44 4E75                       		rts	
0000DE46                            ; ===========================================================================
0000DE46                            
0000DE46                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE46 7001                       		moveq	#1,d0		; set flag to 1
0000DE48 4E75                       		rts	
0000DE4A                            ; End of function ChkObjOnScreen
0000DE4A                            
0000DE4A                            
0000DE4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE4A                            
0000DE4A                            
0000DE4A                            ChkObjOnScreen2:
0000DE4A 7200                       		moveq	#0,d1
0000DE4C 1228 0019                  		move.b	$19(a0),d1
0000DE50 3028 0008                  		move.w	8(a0),d0
0000DE54 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DE58 D041                       		add.w	d1,d0
0000DE5A 6B00                       		bmi.s	NotOnScreen2
0000DE5C D241                       		add.w	d1,d1
0000DE5E 9041                       		sub.w	d1,d0
0000DE60 0C40 0140                  		cmpi.w	#320,d0
0000DE64 6C00                       		bge.s	NotOnScreen2
0000DE66                            
0000DE66 3228 000C                  		move.w	$C(a0),d1
0000DE6A 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DE6E 6B00                       		bmi.s	NotOnScreen2
0000DE70 0C41 00E0                  		cmpi.w	#224,d1
0000DE74 6C00                       		bge.s	NotOnScreen2
0000DE76                            
0000DE76 7000                       		moveq	#0,d0
0000DE78 4E75                       		rts	
0000DE7A                            ; ===========================================================================
0000DE7A                            
0000DE7A                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DE7A 7001                       		moveq	#1,d0
0000DE7C 4E75                       		rts	
0000DE7E                            ; End of function ChkObjOnScreen2
0000DE7E                            
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            ; Subroutine to	load a level's objects
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            
0000DE7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE7E                            
0000DE7E                            
0000DE7E                            ObjPosLoad:				; XREF: Level; et al
0000DE7E 7000                       		moveq	#0,d0
0000DE80 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DE84 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DE88 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DE8C                            ; End of function ObjPosLoad
0000DE8C                            
0000DE8C                            ; ===========================================================================
0000DE8C 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DE8E 0000                       		dc.w OPL_Next-OPL_Index
0000DE90                            ; ===========================================================================
0000DE90                            
0000DE90                            OPL_Main:				; XREF: OPL_Index
0000DE90 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DE94 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DE98 ED08                       		lsl.b	#6,d0
0000DE9A E848                       		lsr.w	#4,d0
0000DE9C 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DEA2 2248                       		movea.l	a0,a1
0000DEA4 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DEA8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DEAC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DEB0 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DEB4 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DEB8 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DEBC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEC0 34FC 0101                  		move.w	#$101,(a2)+
0000DEC4 303C 005E                  		move.w	#$5E,d0
0000DEC8                            
0000DEC8                            OPL_ClrList:
0000DEC8 429A                       		clr.l	(a2)+
0000DECA 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DECE                            
0000DECE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DED2 7400                       		moveq	#0,d2
0000DED4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DED8 0446 0080                  		subi.w	#$80,d6
0000DEDC 6400                       		bcc.s	loc_D93C
0000DEDE 7C00                       		moveq	#0,d6
0000DEE0                            
0000DEE0                            loc_D93C:
0000DEE0 0246 FF80                  		andi.w	#$FF80,d6
0000DEE4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DEE8                            
0000DEE8                            loc_D944:
0000DEE8 BC50                       		cmp.w	(a0),d6
0000DEEA 6300                       		bls.s	loc_D956
0000DEEC 4A28 0004                  		tst.b	4(a0)
0000DEF0 6A00                       		bpl.s	loc_D952
0000DEF2 1412                       		move.b	(a2),d2
0000DEF4 5212                       		addq.b	#1,(a2)
0000DEF6                            
0000DEF6                            loc_D952:
0000DEF6 5C48                       		addq.w	#6,a0
0000DEF8 60EE                       		bra.s	loc_D944
0000DEFA                            ; ===========================================================================
0000DEFA                            
0000DEFA                            loc_D956:
0000DEFA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DEFE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF02 0446 0080                  		subi.w	#$80,d6
0000DF06 6500                       		bcs.s	loc_D976
0000DF08                            
0000DF08                            loc_D964:
0000DF08 BC50                       		cmp.w	(a0),d6
0000DF0A 6300                       		bls.s	loc_D976
0000DF0C 4A28 0004                  		tst.b	4(a0)
0000DF10 6A00                       		bpl.s	loc_D972
0000DF12 522A 0001                  		addq.b	#1,1(a2)
0000DF16                            
0000DF16                            loc_D972:
0000DF16 5C48                       		addq.w	#6,a0
0000DF18 60EE                       		bra.s	loc_D964
0000DF1A                            ; ===========================================================================
0000DF1A                            
0000DF1A                            loc_D976:
0000DF1A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF1E 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DF24                            
0000DF24                            OPL_Next:				; XREF: OPL_Index
0000DF24 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF28 7400                       		moveq	#0,d2
0000DF2A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF2E 0246 FF80                  		andi.w	#$FF80,d6
0000DF32 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF36 6700 0000                  		beq.w	locret_DA3A
0000DF3A 6C00                       		bge.s	loc_D9F6
0000DF3C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF40 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF44 0446 0080                  		subi.w	#$80,d6
0000DF48 6500                       		bcs.s	loc_D9D2
0000DF4A                            
0000DF4A                            loc_D9A6:
0000DF4A BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF4E 6C00                       		bge.s	loc_D9D2
0000DF50 5D48                       		subq.w	#6,a0
0000DF52 4A28 0004                  		tst.b	4(a0)
0000DF56 6A00                       		bpl.s	loc_D9BC
0000DF58 532A 0001                  		subq.b	#1,1(a2)
0000DF5C 142A 0001                  		move.b	1(a2),d2
0000DF60                            
0000DF60                            loc_D9BC:
0000DF60 6100 0000                  		bsr.w	loc_DA3C
0000DF64 6600                       		bne.s	loc_D9C6
0000DF66 5D48                       		subq.w	#6,a0
0000DF68 60E0                       		bra.s	loc_D9A6
0000DF6A                            ; ===========================================================================
0000DF6A                            
0000DF6A                            loc_D9C6:
0000DF6A 4A28 0004                  		tst.b	4(a0)
0000DF6E 6A00                       		bpl.s	loc_D9D0
0000DF70 522A 0001                  		addq.b	#1,1(a2)
0000DF74                            
0000DF74                            loc_D9D0:
0000DF74 5C48                       		addq.w	#6,a0
0000DF76                            
0000DF76                            loc_D9D2:
0000DF76 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF7A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF7E 0646 0300                  		addi.w	#$300,d6
0000DF82                            
0000DF82                            loc_D9DE:
0000DF82 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF86 6E00                       		bgt.s	loc_D9F0
0000DF88 4A28 FFFE                  		tst.b	-2(a0)
0000DF8C 6A00                       		bpl.s	loc_D9EC
0000DF8E 5312                       		subq.b	#1,(a2)
0000DF90                            
0000DF90                            loc_D9EC:
0000DF90 5D48                       		subq.w	#6,a0
0000DF92 60EE                       		bra.s	loc_D9DE
0000DF94                            ; ===========================================================================
0000DF94                            
0000DF94                            loc_D9F0:
0000DF94 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF98 4E75                       		rts	
0000DF9A                            ; ===========================================================================
0000DF9A                            
0000DF9A                            loc_D9F6:
0000DF9A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF9E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFA2 0646 0280                  		addi.w	#$280,d6
0000DFA6                            
0000DFA6                            loc_DA02:
0000DFA6 BC50                       		cmp.w	(a0),d6
0000DFA8 6300                       		bls.s	loc_DA16
0000DFAA 4A28 0004                  		tst.b	4(a0)
0000DFAE 6A00                       		bpl.s	loc_DA10
0000DFB0 1412                       		move.b	(a2),d2
0000DFB2 5212                       		addq.b	#1,(a2)
0000DFB4                            
0000DFB4                            loc_DA10:
0000DFB4 6100 0000                  		bsr.w	loc_DA3C
0000DFB8 67EC                       		beq.s	loc_DA02
0000DFBA                            
0000DFBA                            loc_DA16:
0000DFBA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFBE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DFC2 0446 0300                  		subi.w	#$300,d6
0000DFC6 6500                       		bcs.s	loc_DA36
0000DFC8                            
0000DFC8                            loc_DA24:
0000DFC8 BC50                       		cmp.w	(a0),d6
0000DFCA 6300                       		bls.s	loc_DA36
0000DFCC 4A28 0004                  		tst.b	4(a0)
0000DFD0 6A00                       		bpl.s	loc_DA32
0000DFD2 522A 0001                  		addq.b	#1,1(a2)
0000DFD6                            
0000DFD6                            loc_DA32:
0000DFD6 5C48                       		addq.w	#6,a0
0000DFD8 60EE                       		bra.s	loc_DA24
0000DFDA                            ; ===========================================================================
0000DFDA                            
0000DFDA                            loc_DA36:
0000DFDA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFDE                            
0000DFDE                            locret_DA3A:
0000DFDE 4E75                       		rts	
0000DFE0                            ; ===========================================================================
0000DFE0                            
0000DFE0                            loc_DA3C:
0000DFE0 4A28 0004                  		tst.b	4(a0)
0000DFE4 6A00                       		bpl.s	OPL_MakeItem
0000DFE6 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DFEC 6700                       		beq.s	OPL_MakeItem
0000DFEE 5C48                       		addq.w	#6,a0
0000DFF0 7000                       		moveq	#0,d0
0000DFF2 4E75                       		rts	
0000DFF4                            ; ===========================================================================
0000DFF4                            
0000DFF4                            OPL_MakeItem:
0000DFF4 6100 0000                  		bsr.w	SingleObjLoad
0000DFF8 6600                       		bne.s	locret_DA8A
0000DFFA 3358 0008                  		move.w	(a0)+,8(a1)
0000DFFE 3018                       		move.w	(a0)+,d0
0000E000 3200                       		move.w	d0,d1
0000E002 0240 0FFF                  		andi.w	#$FFF,d0
0000E006 3340 000C                  		move.w	d0,$C(a1)
0000E00A E559                       		rol.w	#2,d1
0000E00C 0201 0003                  		andi.b	#3,d1
0000E010 1341 0001                  		move.b	d1,1(a1)
0000E014 1341 0022                  		move.b	d1,$22(a1)
0000E018 1018                       		move.b	(a0)+,d0
0000E01A 6A00                       		bpl.s	loc_DA80
0000E01C 0200 007F                  		andi.b	#$7F,d0
0000E020 1342 0023                  		move.b	d2,$23(a1)
0000E024                            
0000E024                            loc_DA80:
0000E024 1280                       		move.b	d0,0(a1)
0000E026 1358 0028                  		move.b	(a0)+,$28(a1)
0000E02A 7000                       		moveq	#0,d0
0000E02C                            
0000E02C                            locret_DA8A:
0000E02C 4E75                       		rts	
0000E02E                            ; ---------------------------------------------------------------------------
0000E02E                            ; Single object	loading	subroutine
0000E02E                            ; ---------------------------------------------------------------------------
0000E02E                            
0000E02E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E02E                            
0000E02E                            
0000E02E                            SingleObjLoad:
0000E02E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E032 303C 005F                  		move.w	#$5F,d0
0000E036                            
0000E036                            loc_DA94:
0000E036 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E038 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E03A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E03E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E042                            
0000E042                            locret_DAA0:
0000E042 4E75                       		rts	
0000E044                            ; End of function SingleObjLoad
0000E044                            
0000E044                            
0000E044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E044                            
0000E044                            
0000E044                            SingleObjLoad2:
0000E044 2248                       		movea.l	a0,a1
0000E046 303C F000                  		move.w	#-$1000,d0
0000E04A 9048                       		sub.w	a0,d0
0000E04C EC48                       		lsr.w	#6,d0
0000E04E 5340                       		subq.w	#1,d0
0000E050 6500                       		bcs.s	locret_DABC
0000E052                            
0000E052                            loc_DAB0:
0000E052 4A11                       		tst.b	(a1)
0000E054 6700                       		beq.s	locret_DABC
0000E056 43E9 0040                  		lea	$40(a1),a1
0000E05A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E05E                            
0000E05E                            locret_DABC:
0000E05E 4E75                       		rts	
0000E060                            ; End of function SingleObjLoad2
0000E060                            
0000E060                            ; ===========================================================================
0000E060                            ; ---------------------------------------------------------------------------
0000E060                            ; Object 41 - springs
0000E060                            ; ---------------------------------------------------------------------------
0000E060                            
0000E060                            Obj41:					; XREF: Obj_Index
0000E060 7000                       		moveq	#0,d0
0000E062 1028 0024                  		move.b	$24(a0),d0
0000E066 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E06A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E06E 6100 FB38                  		bsr.w	DisplaySprite
0000E072 3028 0008                  		move.w	8(a0),d0
0000E076 0240 FF80                  		andi.w	#$FF80,d0
0000E07A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E07E 0441 0080                  		subi.w	#$80,d1
0000E082 0241 FF80                  		andi.w	#$FF80,d1
0000E086 9041                       		sub.w	d1,d0
0000E088 0C40 0280                  		cmpi.w	#$280,d0
0000E08C 6200 FB56                  		bhi.w	DeleteObject
0000E090 4E75                       		rts	
0000E092                            ; ===========================================================================
0000E092 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E094 0000                       		dc.w Obj41_Up-Obj41_Index
0000E096 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E098 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E09A 0000                       		dc.w Obj41_LR-Obj41_Index
0000E09C 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E09E 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E0A0 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E0A2 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E0A4 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E0A6                            
0000E0A6 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E0A8 F600                       		dc.w -$A00		; power	of yellow spring
0000E0AA                            ; ===========================================================================
0000E0AA                            
0000E0AA                            Obj41_Main:				; XREF: Obj41_Index
0000E0AA 5428 0024                  		addq.b	#2,$24(a0)
0000E0AE 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E0B6 317C 0523 0002             		move.w	#$523,2(a0)
0000E0BC 0028 0004 0001             		ori.b	#4,1(a0)
0000E0C2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E0C8 117C 0004 0018             		move.b	#4,$18(a0)
0000E0CE 1028 0028                  		move.b	$28(a0),d0
0000E0D2 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E0D6 6700                       		beq.s	loc_DB54	; if not, branch
0000E0D8 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E0DE 117C 0001 001C             		move.b	#1,$1C(a0)
0000E0E4 117C 0003 001A             		move.b	#3,$1A(a0)
0000E0EA 317C 0533 0002             		move.w	#$533,2(a0)
0000E0F0 117C 0008 0019             		move.b	#8,$19(a0)
0000E0F6                            
0000E0F6                            loc_DB54:
0000E0F6 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E0FA 6700                       		beq.s	loc_DB66	; if not, branch
0000E0FC 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E102 08E8 0001 0022             		bset	#1,$22(a0)
0000E108                            
0000E108                            loc_DB66:
0000E108 0800 0001                  		btst	#1,d0
0000E10C 6700                       		beq.s	loc_DB72
0000E10E 08E8 0005 0002             		bset	#5,2(a0)
0000E114                            
0000E114                            loc_DB72:
0000E114 0240 000F                  		andi.w	#$F,d0
0000E118 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E11E 4E75                       		rts	
0000E120                            ; ===========================================================================
0000E120                            
0000E120                            Obj41_Up:				; XREF: Obj41_Index
0000E120 323C 001B                  		move.w	#$1B,d1
0000E124 343C 0008                  		move.w	#8,d2
0000E128 363C 0010                  		move.w	#$10,d3
0000E12C 3828 0008                  		move.w	8(a0),d4
0000E130 6100 0000                  		bsr.w	SolidObject
0000E134 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E138 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E13A 4E75                       		rts	
0000E13C                            ; ===========================================================================
0000E13C                            
0000E13C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E13C 5428 0024                  		addq.b	#2,$24(a0)
0000E140 5069 000C                  		addq.w	#8,$C(a1)
0000E144 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E14A 08E9 0001 0022             		bset	#1,$22(a1)
0000E150 08A9 0003 0022             		bclr	#3,$22(a1)
0000E156 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E15C 137C 0002 0024             		move.b	#2,$24(a1)
0000E162 08A8 0003 0022             		bclr	#3,$22(a0)
0000E168 4228 0025                  		clr.b	$25(a0)
0000E16C 303C 00CC                  		move.w	#$CC,d0
0000E170 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E176                            
0000E176                            Obj41_AniUp:				; XREF: Obj41_Index
0000E176 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E17C 6000 CAC4                  		bra.w	AnimateSprite
0000E180                            ; ===========================================================================
0000E180                            
0000E180                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E180 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E186 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E18A 4E75                       		rts	
0000E18C                            ; ===========================================================================
0000E18C                            
0000E18C                            Obj41_LR:				; XREF: Obj41_Index
0000E18C 323C 0013                  		move.w	#$13,d1
0000E190 343C 000E                  		move.w	#$E,d2
0000E194 363C 000F                  		move.w	#$F,d3
0000E198 3828 0008                  		move.w	8(a0),d4
0000E19C 6100 0000                  		bsr.w	SolidObject
0000E1A0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E1A6 6600                       		bne.s	loc_DC0C
0000E1A8 117C 0008 0024             		move.b	#8,$24(a0)
0000E1AE                            
0000E1AE                            loc_DC0C:
0000E1AE 0828 0005 0022             		btst	#5,$22(a0)
0000E1B4 6600                       		bne.s	Obj41_BounceLR
0000E1B6 4E75                       		rts	
0000E1B8                            ; ===========================================================================
0000E1B8                            
0000E1B8                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E1B8 5428 0024                  		addq.b	#2,$24(a0)
0000E1BC 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E1C2 5069 0008                  		addq.w	#8,8(a1)
0000E1C6 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E1CC 6600                       		bne.s	loc_DC36	; if yes, branch
0000E1CE 0469 0010 0008             		subi.w	#$10,8(a1)
0000E1D4 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E1D8                            
0000E1D8                            loc_DC36:
0000E1D8 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E1DE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E1E4 0869 0000 0022             		bchg	#0,$22(a1)
0000E1EA 0829 0002 0022             		btst	#2,$22(a1)
0000E1F0 6600                       		bne.s	loc_DC56
0000E1F2 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E1F8                            
0000E1F8                            loc_DC56:
0000E1F8 08A8 0005 0022             		bclr	#5,$22(a0)
0000E1FE 08A9 0005 0022             		bclr	#5,$22(a1)
0000E204 303C 00CC                  		move.w	#$CC,d0
0000E208 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E20E                            
0000E20E                            Obj41_AniLR:				; XREF: Obj41_Index
0000E20E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E214 6000 CA2C                  		bra.w	AnimateSprite
0000E218                            ; ===========================================================================
0000E218                            
0000E218                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E218 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E21E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E222 4E75                       		rts	
0000E224                            ; ===========================================================================
0000E224                            
0000E224                            Obj41_Dwn:				; XREF: Obj41_Index
0000E224 323C 001B                  		move.w	#$1B,d1
0000E228 343C 0008                  		move.w	#8,d2
0000E22C 363C 0010                  		move.w	#$10,d3
0000E230 3828 0008                  		move.w	8(a0),d4
0000E234 6100 0000                  		bsr.w	SolidObject
0000E238 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E23E 6600                       		bne.s	loc_DCA4
0000E240 117C 000E 0024             		move.b	#$E,$24(a0)
0000E246                            
0000E246                            loc_DCA4:
0000E246 4A28 0025                  		tst.b	$25(a0)
0000E24A 6600                       		bne.s	locret_DCAE
0000E24C 4A44                       		tst.w	d4
0000E24E 6B00                       		bmi.s	Obj41_BounceDwn
0000E250                            
0000E250                            locret_DCAE:
0000E250 4E75                       		rts	
0000E252                            ; ===========================================================================
0000E252                            
0000E252                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E252 5428 0024                  		addq.b	#2,$24(a0)
0000E256 5169 000C                  		subq.w	#8,$C(a1)
0000E25A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E260 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E264 08E9 0001 0022             		bset	#1,$22(a1)
0000E26A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E270 137C 0002 0024             		move.b	#2,$24(a1)
0000E276 08A8 0003 0022             		bclr	#3,$22(a0)
0000E27C 4228 0025                  		clr.b	$25(a0)
0000E280 303C 00CC                  		move.w	#$CC,d0
0000E284 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E28A                            
0000E28A                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E28A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E290 6000 C9B0                  		bra.w	AnimateSprite
0000E294                            ; ===========================================================================
0000E294                            
0000E294                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E294 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E29A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E29E 4E75                       		rts	
0000E2A0                            ; ===========================================================================
0000E2A0                            Ani_obj41:
0000E2A0                            	include "_anim\obj41.asm"
0000E2A0                            ; ---------------------------------------------------------------------------
0000E2A0                            ; Animation script - springs
0000E2A0                            ; ---------------------------------------------------------------------------
0000E2A0 0000                       		dc.w byte_DD02-Ani_obj41
0000E2A2 0000                       		dc.w byte_DD0E-Ani_obj41
0000E2A4 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E2B0 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E2BC                            		even
0000E2BC                            		even
0000E2BC                            
0000E2BC                            ; ---------------------------------------------------------------------------
0000E2BC                            ; Sprite mappings - springs
0000E2BC                            ; ---------------------------------------------------------------------------
0000E2BC                            Map_obj41:
0000E2BC                            	include "_maps\obj41.asm"
0000E2BC                            ; ---------------------------------------------------------------------------
0000E2BC                            ; Sprite mappings - springs
0000E2BC                            ; ---------------------------------------------------------------------------
0000E2BC 0000                       		dc.w byte_DD26-Map_obj41
0000E2BE 0000                       		dc.w byte_DD31-Map_obj41
0000E2C0 0000                       		dc.w byte_DD37-Map_obj41
0000E2C2 0000                       		dc.w byte_DD47-Map_obj41
0000E2C4 0000                       		dc.w byte_DD4D-Map_obj41
0000E2C6 0000                       		dc.w byte_DD53-Map_obj41
0000E2C8 02                         byte_DD26:	dc.b 2
0000E2C9 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E2CE 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E2D3 01                         byte_DD31:	dc.b 1
0000E2D4 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E2D9 03                         byte_DD37:	dc.b 3
0000E2DA E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E2DF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E2E4 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E2E9 01                         byte_DD47:	dc.b 1
0000E2EA F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E2EF 01                         byte_DD4D:	dc.b 1
0000E2F0 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E2F5 04                         byte_DD53:	dc.b 4
0000E2F6 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E2FB F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E300 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E305 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E30A                            		even
0000E30A                            		even
0000E30A                            
0000E30A                            ; ===========================================================================
0000E30A                            ; ---------------------------------------------------------------------------
0000E30A                            ; Object 42 - Newtron enemy (GHZ)
0000E30A                            ; ---------------------------------------------------------------------------
0000E30A                            
0000E30A                            Obj42:					; XREF: Obj_Index
0000E30A 7000                       		moveq	#0,d0
0000E30C 1028 0024                  		move.b	$24(a0),d0
0000E310 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E314 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E318                            ; ===========================================================================
0000E318 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E31A 0000                       		dc.w Obj42_Action-Obj42_Index
0000E31C 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E31E                            ; ===========================================================================
0000E31E                            
0000E31E                            Obj42_Main:				; XREF: Obj42_Index
0000E31E 5428 0024                  		addq.b	#2,$24(a0)
0000E322 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E32A 317C 049B 0002             		move.w	#$49B,2(a0)
0000E330 117C 0004 0001             		move.b	#4,1(a0)
0000E336 117C 0004 0018             		move.b	#4,$18(a0)
0000E33C 117C 0014 0019             		move.b	#$14,$19(a0)
0000E342 117C 0010 0016             		move.b	#$10,$16(a0)
0000E348 117C 0008 0017             		move.b	#8,$17(a0)
0000E34E                            
0000E34E                            Obj42_Action:				; XREF: Obj42_Index
0000E34E 7000                       		moveq	#0,d0
0000E350 1028 0025                  		move.b	$25(a0),d0
0000E354 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E358 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E35C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E362 6100 C8DE                  		bsr.w	AnimateSprite
0000E366 6000 0000                  		bra.w	MarkObjGone
0000E36A                            ; ===========================================================================
0000E36A 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E36C 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E36E 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E370 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E372 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E374                            ; ===========================================================================
0000E374                            
0000E374                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E374 08E8 0000 0022             		bset	#0,$22(a0)
0000E37A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E37E 9068 0008                  		sub.w	8(a0),d0
0000E382 6400                       		bcc.s	loc_DDEA
0000E384 4440                       		neg.w	d0
0000E386 08A8 0000 0022             		bclr	#0,$22(a0)
0000E38C                            
0000E38C                            loc_DDEA:
0000E38C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E390 6400                       		bcc.s	locret_DE12	; if not, branch
0000E392 5428 0025                  		addq.b	#2,$25(a0)
0000E396 117C 0001 001C             		move.b	#1,$1C(a0)
0000E39C 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E3A0 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E3A2 317C 249B 0002             		move.w	#$249B,2(a0)
0000E3A8 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E3AE 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E3B4                            
0000E3B4                            locret_DE12:
0000E3B4 4E75                       		rts	
0000E3B6                            ; ===========================================================================
0000E3B6                            
0000E3B6                            Obj42_Type00:				; XREF: Obj42_Index2
0000E3B6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E3BC 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E3BE 08E8 0000 0022             		bset	#0,$22(a0)
0000E3C4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E3C8 9068 0008                  		sub.w	8(a0),d0
0000E3CC 6400                       		bcc.s	locret_DE32
0000E3CE 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3D4                            
0000E3D4                            locret_DE32:
0000E3D4 4E75                       		rts	
0000E3D6                            ; ===========================================================================
0000E3D6                            
0000E3D6                            Obj42_Fall:				; XREF: Obj42_Type00
0000E3D6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E3DC 6600                       		bne.s	loc_DE42
0000E3DE 117C 000C 0020             		move.b	#$C,$20(a0)
0000E3E4                            
0000E3E4                            loc_DE42:
0000E3E4 6100 F770                  		bsr.w	ObjectFall
0000E3E8 6100 0000                  		bsr.w	ObjHitFloor
0000E3EC 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E3EE 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E3F0 D368 000C                  		add.w	d1,$C(a0)
0000E3F4 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E3FA 5428 0025                  		addq.b	#2,$25(a0)
0000E3FE 117C 0002 001C             		move.b	#2,$1C(a0)
0000E404 0828 0005 0002             		btst	#5,2(a0)
0000E40A 6700                       		beq.s	Obj42_Move
0000E40C 5228 001C                  		addq.b	#1,$1C(a0)
0000E410                            
0000E410                            Obj42_Move:
0000E410 117C 000D 0020             		move.b	#$D,$20(a0)
0000E416 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E41C 0828 0000 0022             		btst	#0,$22(a0)
0000E422 6600                       		bne.s	locret_DE86
0000E424 4468 0010                  		neg.w	$10(a0)
0000E428                            
0000E428                            locret_DE86:
0000E428 4E75                       		rts	
0000E42A                            ; ===========================================================================
0000E42A                            
0000E42A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E42A 6100 F756                  		bsr.w	SpeedToPos
0000E42E 6100 0000                  		bsr.w	ObjHitFloor
0000E432 0C41 FFF8                  		cmpi.w	#-8,d1
0000E436 6D00                       		blt.s	loc_DEA2
0000E438 0C41 000C                  		cmpi.w	#$C,d1
0000E43C 6C00                       		bge.s	loc_DEA2
0000E43E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E442 4E75                       		rts	
0000E444                            ; ===========================================================================
0000E444                            
0000E444                            loc_DEA2:
0000E444 5428 0025                  		addq.b	#2,$25(a0)
0000E448 4E75                       		rts	
0000E44A                            ; ===========================================================================
0000E44A                            
0000E44A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E44A 6100 F736                  		bsr.w	SpeedToPos
0000E44E 4E75                       		rts	
0000E450                            ; ===========================================================================
0000E450                            
0000E450                            Obj42_Type01:				; XREF: Obj42_Index2
0000E450 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E456 6600                       		bne.s	Obj42_FireMissile
0000E458 117C 000C 0020             		move.b	#$C,$20(a0)
0000E45E                            
0000E45E                            Obj42_FireMissile:
0000E45E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E464 6600                       		bne.s	locret_DF14
0000E466 4A28 0032                  		tst.b	$32(a0)
0000E46A 6600                       		bne.s	locret_DF14
0000E46C 117C 0001 0032             		move.b	#1,$32(a0)
0000E472 6100 FBBA                  		bsr.w	SingleObjLoad
0000E476 6600                       		bne.s	locret_DF14
0000E478 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E47C 3368 0008 0008             		move.w	8(a0),8(a1)
0000E482 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E488 5169 000C                  		subq.w	#8,$C(a1)
0000E48C 337C 0200 0010             		move.w	#$200,$10(a1)
0000E492 303C 0014                  		move.w	#$14,d0
0000E496 0828 0000 0022             		btst	#0,$22(a0)
0000E49C 6600                       		bne.s	loc_DF04
0000E49E 4440                       		neg.w	d0
0000E4A0 4469 0010                  		neg.w	$10(a1)
0000E4A4                            
0000E4A4                            loc_DF04:
0000E4A4 D169 0008                  		add.w	d0,8(a1)
0000E4A8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E4AE 137C 0001 0028             		move.b	#1,$28(a1)
0000E4B4                            
0000E4B4                            locret_DF14:
0000E4B4 4E75                       		rts	
0000E4B6                            ; ===========================================================================
0000E4B6                            
0000E4B6                            Obj42_Delete:				; XREF: Obj42_Index
0000E4B6 6000 F72C                  		bra.w	DeleteObject
0000E4BA                            ; ===========================================================================
0000E4BA                            Ani_obj42:
0000E4BA                            	include "_anim\obj42.asm"
0000E4BA                            ; ---------------------------------------------------------------------------
0000E4BA                            ; Animation script - Newtron enemy
0000E4BA                            ; ---------------------------------------------------------------------------
0000E4BA 0000                       		dc.w byte_DF24-Ani_obj42
0000E4BC 0000                       		dc.w byte_DF28-Ani_obj42
0000E4BE 0000                       		dc.w byte_DF30-Ani_obj42
0000E4C0 0000                       		dc.w byte_DF34-Ani_obj42
0000E4C2 0000                       		dc.w byte_DF38-Ani_obj42
0000E4C4 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E4C8 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E4D0 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E4D4 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E4D8 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E4E2                            		even
0000E4E2                            		even
0000E4E2                            
0000E4E2                            ; ---------------------------------------------------------------------------
0000E4E2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4E2                            ; ---------------------------------------------------------------------------
0000E4E2                            Map_obj42:
0000E4E2                            	include "_maps\obj42.asm"
0000E4E2                            ; ---------------------------------------------------------------------------
0000E4E2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4E2                            ; ---------------------------------------------------------------------------
0000E4E2 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E4E6 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E4EA 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E4EE 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E4F2 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E4F6 0000                       		dc.w byte_DFF8-Map_obj42
0000E4F8 03                         byte_DF58:	dc.b 3
0000E4F9 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E4FE F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E503 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E508 03                         byte_DF68:	dc.b 3
0000E509 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E50E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E513 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E518 03                         byte_DF78:	dc.b 3
0000E519 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E51E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E523 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E528 04                         byte_DF88:	dc.b 4
0000E529 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E52E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E533 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E538 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E53D 03                         byte_DF9D:	dc.b 3
0000E53E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E543 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E548 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E54D 02                         byte_DFAD:	dc.b 2
0000E54E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E553 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E558 03                         byte_DFB8:	dc.b 3
0000E559 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E55E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E563 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E568 03                         byte_DFC8:	dc.b 3
0000E569 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E56E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E573 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E578 03                         byte_DFD8:	dc.b 3
0000E579 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E57E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E583 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E588 03                         byte_DFE8:	dc.b 3
0000E589 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E58E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E593 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E598 00                         byte_DFF8:	dc.b 0
0000E59A 00                         		even
0000E59A 00                         		even
0000E59A                            
0000E59A                            ; ===========================================================================
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A                            ; Object 43 - Roller enemy (SYZ)
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A                            
0000E59A                            Obj43:					; XREF: Obj_Index
0000E59A 7000                       		moveq	#0,d0
0000E59C 1028 0024                  		move.b	$24(a0),d0
0000E5A0 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E5A4 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E5A8                            ; ===========================================================================
0000E5A8 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E5AA 0000                       		dc.w Obj43_Action-Obj43_Index
0000E5AC                            ; ===========================================================================
0000E5AC                            
0000E5AC                            Obj43_Main:				; XREF: Obj43_Index
0000E5AC 117C 000E 0016             		move.b	#$E,$16(a0)
0000E5B2 117C 0008 0017             		move.b	#8,$17(a0)
0000E5B8 6100 F59C                  		bsr.w	ObjectFall
0000E5BC 6100 0000                  		bsr.w	ObjHitFloor
0000E5C0 4A41                       		tst.w	d1
0000E5C2 6A00                       		bpl.s	locret_E052
0000E5C4 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E5C8 317C 0000 0012             		move.w	#0,$12(a0)
0000E5CE 5428 0024                  		addq.b	#2,$24(a0)
0000E5D2 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E5DA 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E5E0 117C 0004 0001             		move.b	#4,1(a0)
0000E5E6 117C 0004 0018             		move.b	#4,$18(a0)
0000E5EC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E5F2                            
0000E5F2                            locret_E052:
0000E5F2 4E75                       		rts	
0000E5F4                            ; ===========================================================================
0000E5F4                            
0000E5F4                            Obj43_Action:				; XREF: Obj43_Index
0000E5F4 7000                       		moveq	#0,d0
0000E5F6 1028 0025                  		move.b	$25(a0),d0
0000E5FA 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E5FE 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E602 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E608 6100 C638                  		bsr.w	AnimateSprite
0000E60C 3028 0008                  		move.w	8(a0),d0
0000E610 0240 FF80                  		andi.w	#$FF80,d0
0000E614 3238 F700                  		move.w	($FFFFF700).w,d1
0000E618 0441 0080                  		subi.w	#$80,d1
0000E61C 0241 FF80                  		andi.w	#$FF80,d1
0000E620 9041                       		sub.w	d1,d0
0000E622 0C40 0280                  		cmpi.w	#$280,d0
0000E626 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E62A 6000 F57C                  		bra.w	DisplaySprite
0000E62E                            ; ===========================================================================
0000E62E                            
0000E62E                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E62E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E632 7000                       		moveq	#0,d0
0000E634 1028 0023                  		move.b	$23(a0),d0
0000E638 6700                       		beq.s	Obj43_Delete
0000E63A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E640                            
0000E640                            Obj43_Delete:
0000E640 6000 F5A2                  		bra.w	DeleteObject
0000E644                            ; ===========================================================================
0000E644 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E646 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E648 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E64A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E64C                            ; ===========================================================================
0000E64C                            
0000E64C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E64C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E650 0440 0100                  		subi.w	#$100,d0
0000E654 6500                       		bcs.s	loc_E0D2
0000E656 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E65A 6500                       		bcs.s	loc_E0D2
0000E65C 5828 0025                  		addq.b	#4,$25(a0)
0000E660 117C 0002 001C             		move.b	#2,$1C(a0)
0000E666 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E66C 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E672                            
0000E672                            loc_E0D2:
0000E672 588F                       		addq.l	#4,sp
0000E674 4E75                       		rts	
0000E676                            ; ===========================================================================
0000E676                            
0000E676                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E676 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E67C 6700                       		beq.s	loc_E0F8
0000E67E 5368 0030                  		subq.w	#1,$30(a0)
0000E682 6A00                       		bpl.s	locret_E0F6
0000E684 117C 0001 001C             		move.b	#1,$1C(a0)
0000E68A 317C 0700 0010             		move.w	#$700,$10(a0)
0000E690 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E696                            
0000E696                            locret_E0F6:
0000E696 4E75                       		rts	
0000E698                            ; ===========================================================================
0000E698                            
0000E698                            loc_E0F8:
0000E698 5428 0025                  		addq.b	#2,$25(a0)
0000E69C 4E75                       		rts	
0000E69E                            ; ===========================================================================
0000E69E                            
0000E69E                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E69E 6100 0000                  		bsr.w	Obj43_Stop
0000E6A2 6100 F4DE                  		bsr.w	SpeedToPos
0000E6A6 6100 0000                  		bsr.w	ObjHitFloor
0000E6AA 0C41 FFF8                  		cmpi.w	#-8,d1
0000E6AE 6D00                       		blt.s	Obj43_Jump
0000E6B0 0C41 000C                  		cmpi.w	#$C,d1
0000E6B4 6C00                       		bge.s	Obj43_Jump
0000E6B6 D368 000C                  		add.w	d1,$C(a0)
0000E6BA 4E75                       		rts	
0000E6BC                            ; ===========================================================================
0000E6BC                            
0000E6BC                            Obj43_Jump:
0000E6BC 5428 0025                  		addq.b	#2,$25(a0)
0000E6C0 08E8 0000 0032             		bset	#0,$32(a0)
0000E6C6 6700                       		beq.s	locret_E12E
0000E6C8 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E6CE                            
0000E6CE                            locret_E12E:
0000E6CE 4E75                       		rts	
0000E6D0                            ; ===========================================================================
0000E6D0                            
0000E6D0                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E6D0 6100 F484                  		bsr.w	ObjectFall
0000E6D4 4A68 0012                  		tst.w	$12(a0)
0000E6D8 6B00                       		bmi.s	locret_E150
0000E6DA 6100 0000                  		bsr.w	ObjHitFloor
0000E6DE 4A41                       		tst.w	d1
0000E6E0 6A00                       		bpl.s	locret_E150
0000E6E2 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E6E6 5528 0025                  		subq.b	#2,$25(a0)
0000E6EA 317C 0000 0012             		move.w	#0,$12(a0)
0000E6F0                            
0000E6F0                            locret_E150:
0000E6F0 4E75                       		rts	
0000E6F2                            
0000E6F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6F2                            
0000E6F2                            
0000E6F2                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E6F2 4A28 0032                  		tst.b	$32(a0)
0000E6F6 6B00                       		bmi.s	locret_E188
0000E6F8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6FC 0440 0030                  		subi.w	#$30,d0
0000E700 9068 0008                  		sub.w	8(a0),d0
0000E704 6400                       		bcc.s	locret_E188
0000E706 117C 0000 001C             		move.b	#0,$1C(a0)
0000E70C 117C 000E 0020             		move.b	#$E,$20(a0)
0000E712 4268 0010                  		clr.w	$10(a0)
0000E716 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E71C 117C 0002 0025             		move.b	#2,$25(a0)
0000E722 08E8 0007 0032             		bset	#7,$32(a0)
0000E728                            
0000E728                            locret_E188:
0000E728 4E75                       		rts	
0000E72A                            ; End of function Obj43_Stop
0000E72A                            
0000E72A                            ; ===========================================================================
0000E72A                            Ani_obj43:
0000E72A                            	include "_anim\obj43.asm"
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A                            ; Animation script - Roller enemy
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A 0000                       		dc.w byte_E190-Ani_obj43
0000E72C 0000                       		dc.w byte_E196-Ani_obj43
0000E72E 0000                       		dc.w byte_E19C-Ani_obj43
0000E730 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E736 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E73C 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E742 00                         		even
0000E742 00                         		even
0000E742                            
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            ; Sprite mappings - Roller enemy (SYZ)
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            Map_obj43:
0000E742                            	include "_maps\obj43.asm"
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            ; Sprite mappings - Roller enemy (SYZ)
0000E742                            ; ---------------------------------------------------------------------------
0000E742 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E746 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E74A 0000                       		dc.w byte_E1CE-Map_obj43
0000E74C 02                         byte_E1AC:	dc.b 2
0000E74D DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E752 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E757 02                         byte_E1B7:	dc.b 2
0000E758 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E75D FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E762 01                         byte_E1C2:	dc.b 1
0000E763 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E768 01                         byte_E1C8:	dc.b 1
0000E769 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E76E 01                         byte_E1CE:	dc.b 1
0000E76F F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E774                            		even
0000E774                            		even
0000E774                            
0000E774                            ; ===========================================================================
0000E774                            ; ---------------------------------------------------------------------------
0000E774                            ; Object 44 - walls (GHZ)
0000E774                            ; ---------------------------------------------------------------------------
0000E774                            
0000E774                            Obj44:					; XREF: Obj_Index
0000E774 7000                       		moveq	#0,d0
0000E776 1028 0024                  		move.b	$24(a0),d0
0000E77A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E77E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E782                            ; ===========================================================================
0000E782 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E784 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E786 0000                       		dc.w Obj44_Display-Obj44_Index
0000E788                            ; ===========================================================================
0000E788                            
0000E788                            Obj44_Main:				; XREF: Obj44_Index
0000E788 5428 0024                  		addq.b	#2,$24(a0)
0000E78C 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E794 317C 434C 0002             		move.w	#$434C,2(a0)
0000E79A 0028 0004 0001             		ori.b	#4,1(a0)
0000E7A0 117C 0008 0019             		move.b	#8,$19(a0)
0000E7A6 117C 0006 0018             		move.b	#6,$18(a0)
0000E7AC 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E7B2 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E7B8 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E7BA 5428 0024                  		addq.b	#2,$24(a0)
0000E7BE 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E7C0                            ; ===========================================================================
0000E7C0                            
0000E7C0                            Obj44_Solid:				; XREF: Obj44_Index
0000E7C0 323C 0013                  		move.w	#$13,d1
0000E7C4 343C 0028                  		move.w	#$28,d2
0000E7C8 6100 A6DE                  		bsr.w	Obj44_SolidWall
0000E7CC                            
0000E7CC                            Obj44_Display:				; XREF: Obj44_Index
0000E7CC 6100 F3DA                  		bsr.w	DisplaySprite
0000E7D0 3028 0008                  		move.w	8(a0),d0
0000E7D4 0240 FF80                  		andi.w	#$FF80,d0
0000E7D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7DC 0441 0080                  		subi.w	#$80,d1
0000E7E0 0241 FF80                  		andi.w	#$FF80,d1
0000E7E4 9041                       		sub.w	d1,d0
0000E7E6 0C40 0280                  		cmpi.w	#$280,d0
0000E7EA 6200 F3F8                  		bhi.w	DeleteObject
0000E7EE 4E75                       		rts	
0000E7F0                            ; ===========================================================================
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            ; Sprite mappings - walls (GHZ)
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            Map_obj44:
0000E7F0                            	include "_maps\obj44.asm"
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            ; Sprite mappings - walls (GHZ)
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0 0000                       		dc.w byte_E256-Map_obj44
0000E7F2 0000                       		dc.w byte_E26B-Map_obj44
0000E7F4 0000                       		dc.w byte_E280-Map_obj44
0000E7F6 04                         byte_E256:	dc.b 4
0000E7F7 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E7FC F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E801 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E806 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E80B 04                         byte_E26B:	dc.b 4
0000E80C E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E811 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E816 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E81B 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E820 04                         byte_E280:	dc.b 4
0000E821 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E826 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E82B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E830 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E836 00                         		even
0000E836 00                         		even
0000E836                            
0000E836                            ; ===========================================================================
0000E836                            ; ---------------------------------------------------------------------------
0000E836                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E836                            ; ---------------------------------------------------------------------------
0000E836                            
0000E836                            Obj13:					; XREF: Obj_Index
0000E836 7000                       		moveq	#0,d0
0000E838 1028 0024                  		move.b	$24(a0),d0
0000E83C 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E840 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E844 6000 0000                  		bra.w	Obj14_ChkDel
0000E848                            ; ===========================================================================
0000E848 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E84A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C                            ;
0000E84C                            ; Lava ball production rates
0000E84C                            ;
0000E84C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E852                            ; ===========================================================================
0000E852                            
0000E852                            Obj13_Main:				; XREF: Obj13_Index
0000E852 5428 0024                  		addq.b	#2,$24(a0)
0000E856 1028 0028                  		move.b	$28(a0),d0
0000E85A E848                       		lsr.w	#4,d0
0000E85C 0240 000F                  		andi.w	#$F,d0
0000E860 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E866 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E86C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E872                            
0000E872                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E872 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E876 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E878 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E87E 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E882 6600                       		bne.s	locret_E302
0000E884 6100 F7A8                  		bsr.w	SingleObjLoad
0000E888 6600                       		bne.s	locret_E302
0000E88A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E88E 3368 0008 0008             		move.w	8(a0),8(a1)
0000E894 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E89A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E8A0                            
0000E8A0                            locret_E302:
0000E8A0 4E75                       		rts	
0000E8A2                            ; ===========================================================================
0000E8A2                            ; ---------------------------------------------------------------------------
0000E8A2                            ; Object 14 - lava balls (MZ, SLZ)
0000E8A2                            ; ---------------------------------------------------------------------------
0000E8A2                            
0000E8A2                            Obj14:					; XREF: Obj_Index
0000E8A2 7000                       		moveq	#0,d0
0000E8A4 1028 0024                  		move.b	$24(a0),d0
0000E8A8 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E8AC 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E8B0 6000 F2F6                  		bra.w	DisplaySprite
0000E8B4                            ; ===========================================================================
0000E8B4 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E8B6 0000                       		dc.w Obj14_Action-Obj14_Index
0000E8B8 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E8BA                            
0000E8BA FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E8C4 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E8CC                            ; ===========================================================================
0000E8CC                            
0000E8CC                            Obj14_Main:				; XREF: Obj14_Index
0000E8CC 5428 0024                  		addq.b	#2,$24(a0)
0000E8D0 117C 0008 0016             		move.b	#8,$16(a0)
0000E8D6 117C 0008 0017             		move.b	#8,$17(a0)
0000E8DC 217C 0000 B86C 0004        		move.l	#Map_obj14,4(a0)
0000E8E4 317C 0345 0002             		move.w	#$345,2(a0)
0000E8EA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E8F0 6600                       		bne.s	loc_E35A
0000E8F2 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E8F8                            
0000E8F8                            loc_E35A:
0000E8F8 117C 0004 0001             		move.b	#4,1(a0)
0000E8FE 117C 0003 0018             		move.b	#3,$18(a0)
0000E904 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E90A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E910 4A28 0029                  		tst.b	$29(a0)
0000E914 6700                       		beq.s	Obj14_SetSpeed
0000E916 5428 0018                  		addq.b	#2,$18(a0)
0000E91A                            
0000E91A                            Obj14_SetSpeed:
0000E91A 7000                       		moveq	#0,d0
0000E91C 1028 0028                  		move.b	$28(a0),d0
0000E920 D040                       		add.w	d0,d0
0000E922 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E928 117C 0008 0019             		move.b	#8,$19(a0)
0000E92E 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E934 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E936 117C 0010 0019             		move.b	#$10,$19(a0)
0000E93C 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E942 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E948 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E94E                            
0000E94E                            Obj14_PlaySnd:
0000E94E 303C 00AE                  		move.w	#$AE,d0
0000E952 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E958                            
0000E958                            Obj14_Action:				; XREF: Obj14_Index
0000E958 7000                       		moveq	#0,d0
0000E95A 1028 0028                  		move.b	$28(a0),d0
0000E95E D040                       		add.w	d0,d0
0000E960 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E964 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E968 6100 F218                  		bsr.w	SpeedToPos
0000E96C 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E972 6100 C2CE                  		bsr.w	AnimateSprite
0000E976                            
0000E976                            Obj14_ChkDel:				; XREF: Obj13
0000E976 3028 0008                  		move.w	8(a0),d0
0000E97A 0240 FF80                  		andi.w	#$FF80,d0
0000E97E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E982 0441 0080                  		subi.w	#$80,d1
0000E986 0241 FF80                  		andi.w	#$FF80,d1
0000E98A 9041                       		sub.w	d1,d0
0000E98C 0C40 0280                  		cmpi.w	#$280,d0
0000E990 6200 F252                  		bhi.w	DeleteObject
0000E994 4E75                       		rts	
0000E996                            ; ===========================================================================
0000E996 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E99A 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E99E 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E9A2 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E9A6 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E9A8                            ; ===========================================================================
0000E9A8                            ; lavaball types 00-03 fly up and fall back down
0000E9A8                            
0000E9A8                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E9A8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E9AE 3028 0030                  		move.w	$30(a0),d0
0000E9B2 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E9B6 6400                       		bcc.s	loc_E41E	; if not, branch
0000E9B8 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E9BC                            
0000E9BC                            loc_E41E:
0000E9BC 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9C2 4A68 0012                  		tst.w	$12(a0)
0000E9C6 6A00                       		bpl.s	locret_E430
0000E9C8 08E8 0001 0022             		bset	#1,$22(a0)
0000E9CE                            
0000E9CE                            locret_E430:
0000E9CE 4E75                       		rts	
0000E9D0                            ; ===========================================================================
0000E9D0                            ; lavaball type	04 flies up until it hits the ceiling
0000E9D0                            
0000E9D0                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E9D0 08E8 0001 0022             		bset	#1,$22(a0)
0000E9D6 6100 0000                  		bsr.w	ObjHitCeiling
0000E9DA 4A41                       		tst.w	d1
0000E9DC 6A00                       		bpl.s	locret_E452
0000E9DE 117C 0008 0028             		move.b	#8,$28(a0)
0000E9E4 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9EA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E9F0                            
0000E9F0                            locret_E452:
0000E9F0 4E75                       		rts	
0000E9F2                            ; ===========================================================================
0000E9F2                            ; lavaball type	05 falls down until it hits the	floor
0000E9F2                            
0000E9F2                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E9F2 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9F8 6100 0000                  		bsr.w	ObjHitFloor
0000E9FC 4A41                       		tst.w	d1
0000E9FE 6A00                       		bpl.s	locret_E474
0000EA00 117C 0008 0028             		move.b	#8,$28(a0)
0000EA06 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA0C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EA12                            
0000EA12                            locret_E474:
0000EA12 4E75                       		rts	
0000EA14                            ; ===========================================================================
0000EA14                            ; lavaball types 06-07 move sideways
0000EA14                            
0000EA14                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EA14 08E8 0000 0022             		bset	#0,$22(a0)
0000EA1A 76F8                       		moveq	#-8,d3
0000EA1C 6100 0000                  		bsr.w	ObjHitWallLeft
0000EA20 4A41                       		tst.w	d1
0000EA22 6A00                       		bpl.s	locret_E498
0000EA24 117C 0008 0028             		move.b	#8,$28(a0)
0000EA2A 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA30 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA36                            
0000EA36                            locret_E498:
0000EA36 4E75                       		rts	
0000EA38                            ; ===========================================================================
0000EA38                            
0000EA38                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA38 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA3E 7608                       		moveq	#8,d3
0000EA40 6100 0000                  		bsr.w	ObjHitWallRight
0000EA44 4A41                       		tst.w	d1
0000EA46 6A00                       		bpl.s	locret_E4BC
0000EA48 117C 0008 0028             		move.b	#8,$28(a0)
0000EA4E 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA54 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA5A                            
0000EA5A                            locret_E4BC:
0000EA5A 4E75                       		rts	
0000EA5C                            ; ===========================================================================
0000EA5C                            
0000EA5C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EA5C 4E75                       		rts	
0000EA5E                            ; ===========================================================================
0000EA5E                            
0000EA5E                            Obj14_Delete:				; XREF: Obj14_Index
0000EA5E 6000 F184                  		bra.w	DeleteObject
0000EA62                            ; ===========================================================================
0000EA62                            Ani_obj14:
0000EA62                            	include "_anim\obj14.asm"
0000EA62                            ; ---------------------------------------------------------------------------
0000EA62                            ; Animation script - lava balls
0000EA62                            ; ---------------------------------------------------------------------------
0000EA62 0000                       		dc.w byte_E4CC-Ani_obj14
0000EA64 0000                       		dc.w byte_E4D2-Ani_obj14
0000EA66 0000                       		dc.w byte_E4D6-Ani_obj14
0000EA68 0000                       		dc.w byte_E4DC-Ani_obj14
0000EA6A 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EA70 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EA74 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EA7A 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EA7E                            		even
0000EA7E                            		even
0000EA7E                            
0000EA7E                            ; ===========================================================================
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E                            ; Object 6D - flame thrower (SBZ)
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E                            
0000EA7E                            Obj6D:					; XREF: Obj_Index
0000EA7E 7000                       		moveq	#0,d0
0000EA80 1028 0024                  		move.b	$24(a0),d0
0000EA84 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EA88 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EA8C                            ; ===========================================================================
0000EA8C 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EA8E 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EA90                            ; ===========================================================================
0000EA90                            
0000EA90                            Obj6D_Main:				; XREF: Obj6D_Index
0000EA90 5428 0024                  		addq.b	#2,$24(a0)
0000EA94 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EA9C 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EAA2 0028 0004 0001             		ori.b	#4,1(a0)
0000EAA8 117C 0001 0018             		move.b	#1,$18(a0)
0000EAAE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EAB4 117C 000C 0019             		move.b	#$C,$19(a0)
0000EABA 1028 0028                  		move.b	$28(a0),d0
0000EABE 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EAC2 D040                       		add.w	d0,d0		; multiply by 2
0000EAC4 3140 0030                  		move.w	d0,$30(a0)
0000EAC8 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EACC 1028 0028                  		move.b	$28(a0),d0
0000EAD0 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EAD4 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EAD6 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EADA 117C 000A 0036             		move.b	#$A,$36(a0)
0000EAE0 0828 0001 0022             		btst	#1,$22(a0)
0000EAE6 6700                       		beq.s	Obj6D_Action
0000EAE8 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAEE 117C 0015 0036             		move.b	#$15,$36(a0)
0000EAF4                            
0000EAF4                            Obj6D_Action:				; XREF: Obj6D_Index
0000EAF4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EAF8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EAFA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EB00 0868 0000 001C             		bchg	#0,$1C(a0)
0000EB06 6700                       		beq.s	loc_E57A
0000EB08 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EB0E 303C 00B3                  		move.w	#$B3,d0
0000EB12 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EB18                            
0000EB18                            loc_E57A:
0000EB18 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EB1E 6100 C122                  		bsr.w	AnimateSprite
0000EB22 117C 0000 0020             		move.b	#0,$20(a0)
0000EB28 1028 0036                  		move.b	$36(a0),d0
0000EB2C B028 001A                  		cmp.b	$1A(a0),d0
0000EB30 6600                       		bne.s	Obj6D_ChkDel
0000EB32 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB38                            
0000EB38                            Obj6D_ChkDel:
0000EB38 3028 0008                  		move.w	8(a0),d0
0000EB3C 0240 FF80                  		andi.w	#$FF80,d0
0000EB40 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB44 0441 0080                  		subi.w	#$80,d1
0000EB48 0241 FF80                  		andi.w	#$FF80,d1
0000EB4C 9041                       		sub.w	d1,d0
0000EB4E 0C40 0280                  		cmpi.w	#$280,d0
0000EB52 6200 F090                  		bhi.w	DeleteObject
0000EB56 6000 F050                  		bra.w	DisplaySprite
0000EB5A                            ; ===========================================================================
0000EB5A                            Ani_obj6D:
0000EB5A                            	include "_anim\obj6D.asm"
0000EB5A                            ; ---------------------------------------------------------------------------
0000EB5A                            ; Animation script - flamethrower (SBZ)
0000EB5A                            ; ---------------------------------------------------------------------------
0000EB5A 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EB5C 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EB5E 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EB60 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EB62 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EB70 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EB7A 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EB88 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EB92                            		even
0000EB92                            		even
0000EB92                            
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92                            ; Sprite mappings - flame thrower (SBZ)
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92                            Map_obj6D:
0000EB92                            	include "_maps\obj6D.asm"
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92                            ; Sprite mappings - flame thrower (SBZ)
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EB96 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EB9A 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EB9E 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EBA2 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EBA6 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EBAA 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EBAE 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EBB2 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EBB6 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EBBA 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EBBE 01                         byte_E620:	dc.b 1
0000EBBF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBC4 02                         byte_E626:	dc.b 2
0000EBC5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBCA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBCF 02                         byte_E631:	dc.b 2
0000EBD0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBD5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBDA 03                         byte_E63C:	dc.b 3
0000EBDB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBE0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBE5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBEA 03                         byte_E64C:	dc.b 3
0000EBEB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBF0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBF5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBFA 04                         byte_E65C:	dc.b 4
0000EBFB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC00 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC05 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC0A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC0F 04                         byte_E671:	dc.b 4
0000EC10 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC15 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC1A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC1F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC24 05                         byte_E686:	dc.b 5
0000EC25 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EC2A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC2F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC34 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC39 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC3E 05                         byte_E6A0:	dc.b 5
0000EC3F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC44 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC49 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC4E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC53 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC58 06                         byte_E6BA:	dc.b 6
0000EC59 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EC5E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EC63 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC68 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EC6D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC72 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC77 06                         byte_E6D9:	dc.b 6
0000EC78 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EC7D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC82 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EC87 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC8C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC91 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC96 01                         byte_E6F8:	dc.b 1
0000EC97 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC9C 02                         byte_E6FE:	dc.b 2
0000EC9D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECA2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECA7 02                         byte_E709:	dc.b 2
0000ECA8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECAD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECB2 03                         byte_E714:	dc.b 3
0000ECB3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECB8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECBD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECC2 03                         byte_E724:	dc.b 3
0000ECC3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECC8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECCD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECD2 04                         byte_E734:	dc.b 4
0000ECD3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECD8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECDD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECE2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECE7 04                         byte_E749:	dc.b 4
0000ECE8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECED 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECF2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECF7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECFC 05                         byte_E75E:	dc.b 5
0000ECFD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED02 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED07 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED0C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED11 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED16 05                         byte_E778:	dc.b 5
0000ED17 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED1C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED21 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED26 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED2B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED30 06                         byte_E792:	dc.b 6
0000ED31 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED36 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED3B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED40 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED45 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED4A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED4F 06                         byte_E7B1:	dc.b 6
0000ED50 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED55 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED5A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED5F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED64 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED69 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED6E                            		even
0000ED6E                            		even
0000ED6E                            
0000ED6E                            ; ===========================================================================
0000ED6E                            ; ---------------------------------------------------------------------------
0000ED6E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000ED6E                            ; ---------------------------------------------------------------------------
0000ED6E                            
0000ED6E                            Obj46:					; XREF: Obj_Index
0000ED6E 7000                       		moveq	#0,d0
0000ED70 1028 0024                  		move.b	$24(a0),d0
0000ED74 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000ED78 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000ED7C                            ; ===========================================================================
0000ED7C 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000ED7E 0000                       		dc.w Obj46_Action-Obj46_Index
0000ED80                            ; ===========================================================================
0000ED80                            
0000ED80                            Obj46_Main:				; XREF: Obj46_Index
0000ED80 5428 0024                  		addq.b	#2,$24(a0)
0000ED84 117C 000F 0016             		move.b	#$F,$16(a0)
0000ED8A 117C 000F 0017             		move.b	#$F,$17(a0)
0000ED90 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000ED98 317C 4000 0002             		move.w	#$4000,2(a0)
0000ED9E 117C 0004 0001             		move.b	#4,1(a0)
0000EDA4 117C 0003 0018             		move.b	#3,$18(a0)
0000EDAA 117C 0010 0019             		move.b	#$10,$19(a0)
0000EDB0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EDB6 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EDBC                            
0000EDBC                            Obj46_Action:				; XREF: Obj46_Index
0000EDBC 4A28 0001                  		tst.b	1(a0)
0000EDC0 6A00                       		bpl.s	Obj46_ChkDel
0000EDC2 7000                       		moveq	#0,d0
0000EDC4 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EDC8 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EDCC D040                       		add.w	d0,d0
0000EDCE 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EDD2 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EDD6 323C 001B                  		move.w	#$1B,d1
0000EDDA 343C 0010                  		move.w	#$10,d2
0000EDDE 363C 0011                  		move.w	#$11,d3
0000EDE2 3828 0008                  		move.w	8(a0),d4
0000EDE6 6100 0000                  		bsr.w	SolidObject
0000EDEA                            
0000EDEA                            Obj46_ChkDel:
0000EDEA 6100 EDBC                  		bsr.w	DisplaySprite
0000EDEE 3028 0008                  		move.w	8(a0),d0
0000EDF2 0240 FF80                  		andi.w	#$FF80,d0
0000EDF6 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDFA 0441 0080                  		subi.w	#$80,d1
0000EDFE 0241 FF80                  		andi.w	#$FF80,d1
0000EE02 9041                       		sub.w	d1,d0
0000EE04 0C40 0280                  		cmpi.w	#$280,d0
0000EE08 6200 EDDA                  		bhi.w	DeleteObject
0000EE0C 4E75                       		rts	
0000EE0E                            ; ===========================================================================
0000EE0E 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EE10 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EE12 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EE14 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EE16 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EE18                            ; ===========================================================================
0000EE18                            
0000EE18                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EE18 4E75                       		rts	
0000EE1A                            ; ===========================================================================
0000EE1A                            
0000EE1A                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EE1A 3038 D008                  		move.w	($FFFFD008).w,d0
0000EE1E 9068 0008                  		sub.w	8(a0),d0
0000EE22 6400                       		bcc.s	loc_E888
0000EE24 4440                       		neg.w	d0
0000EE26                            
0000EE26                            loc_E888:
0000EE26 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EE2A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EE2C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EE32                            
0000EE32                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EE32 7000                       		moveq	#0,d0
0000EE34 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE38 0828 0003 0028             		btst	#3,$28(a0)
0000EE3E 6700                       		beq.s	loc_E8A8
0000EE40 4440                       		neg.w	d0
0000EE42 0640 0010                  		addi.w	#$10,d0
0000EE46                            
0000EE46                            loc_E8A8:
0000EE46 3228 0030                  		move.w	$30(a0),d1
0000EE4A 9240                       		sub.w	d0,d1
0000EE4C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EE50 4E75                       		rts	
0000EE52                            ; ===========================================================================
0000EE52                            
0000EE52                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EE52 6100 ED2E                  		bsr.w	SpeedToPos
0000EE56 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EE5C 6100 0000                  		bsr.w	ObjHitFloor
0000EE60 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EE62 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EE66 D368 000C                  		add.w	d1,$C(a0)
0000EE6A 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EE6E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE74 117C 0004 0028             		move.b	#4,$28(a0)
0000EE7A 3011                       		move.w	(a1),d0
0000EE7C 0240 03FF                  		andi.w	#$3FF,d0
0000EE80 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EE84 6400                       		bcc.s	locret_E8EE
0000EE86 117C 0000 0028             		move.b	#0,$28(a0)
0000EE8C                            
0000EE8C                            locret_E8EE:
0000EE8C 4E75                       		rts	
0000EE8E                            ; ===========================================================================
0000EE8E                            
0000EE8E                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EE8E 7000                       		moveq	#0,d0
0000EE90 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EE94 E648                       		lsr.w	#3,d0
0000EE96 3228 0030                  		move.w	$30(a0),d1
0000EE9A 9240                       		sub.w	d0,d1
0000EE9C 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EEA0 4E75                       		rts	
0000EEA2                            ; ===========================================================================
0000EEA2                            ; ---------------------------------------------------------------------------
0000EEA2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEA2                            ; ---------------------------------------------------------------------------
0000EEA2                            Map_obj46:
0000EEA2                            	include "_maps\obj46.asm"
0000EEA2                            ; ---------------------------------------------------------------------------
0000EEA2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEA2                            ; ---------------------------------------------------------------------------
0000EEA2 0000                       		dc.w byte_E906-Map_obj46
0000EEA4 01                         byte_E906:	dc.b 1
0000EEA5 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EEAA                            		even
0000EEAA                            		even
0000EEAA                            
0000EEAA                            ; ===========================================================================
0000EEAA                            ; ---------------------------------------------------------------------------
0000EEAA                            ; Object 12 - lamp (SYZ)
0000EEAA                            ; ---------------------------------------------------------------------------
0000EEAA                            
0000EEAA                            Obj12:					; XREF: Obj_Index
0000EEAA 7000                       		moveq	#0,d0
0000EEAC 1028 0024                  		move.b	$24(a0),d0
0000EEB0 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EEB4 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EEB8                            ; ===========================================================================
0000EEB8 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EEBA 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EEBC                            ; ===========================================================================
0000EEBC                            
0000EEBC                            Obj12_Main:				; XREF: Obj12_Index
0000EEBC 5428 0024                  		addq.b	#2,$24(a0)
0000EEC0 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EEC8 317C 0000 0002             		move.w	#0,2(a0)
0000EECE 117C 0004 0001             		move.b	#4,1(a0)
0000EED4 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEDA 117C 0006 0018             		move.b	#6,$18(a0)
0000EEE0                            
0000EEE0                            Obj12_Animate:				; XREF: Obj12_Index
0000EEE0 5328 001E                  		subq.b	#1,$1E(a0)
0000EEE4 6A00                       		bpl.s	Obj12_ChkDel
0000EEE6 117C 0007 001E             		move.b	#7,$1E(a0)
0000EEEC 5228 001A                  		addq.b	#1,$1A(a0)
0000EEF0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EEF6 6500                       		bcs.s	Obj12_ChkDel
0000EEF8 117C 0000 001A             		move.b	#0,$1A(a0)
0000EEFE                            
0000EEFE                            Obj12_ChkDel:
0000EEFE 3028 0008                  		move.w	8(a0),d0
0000EF02 0240 FF80                  		andi.w	#$FF80,d0
0000EF06 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF0A 0441 0080                  		subi.w	#$80,d1
0000EF0E 0241 FF80                  		andi.w	#$FF80,d1
0000EF12 9041                       		sub.w	d1,d0
0000EF14 0C40 0280                  		cmpi.w	#$280,d0
0000EF18 6200 ECCA                  		bhi.w	DeleteObject
0000EF1C 6000 EC8A                  		bra.w	DisplaySprite
0000EF20                            ; ===========================================================================
0000EF20                            ; ---------------------------------------------------------------------------
0000EF20                            ; Sprite mappings - lamp (SYZ)
0000EF20                            ; ---------------------------------------------------------------------------
0000EF20                            Map_obj12:
0000EF20                            	include "_maps\obj12.asm"
0000EF20                            ; ---------------------------------------------------------------------------
0000EF20                            ; Sprite mappings - lamp (SYZ)
0000EF20                            ; ---------------------------------------------------------------------------
0000EF20 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EF24 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EF28 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EF2C 02                         byte_E98E:	dc.b 2
0000EF2D F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EF32 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF37 02                         byte_E999:	dc.b 2
0000EF38 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF3D 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF42 02                         byte_E9A4:	dc.b 2
0000EF43 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF48 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EF4D 02                         byte_E9AF:	dc.b 2
0000EF4E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EF53 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EF58 02                         byte_E9BA:	dc.b 2
0000EF59 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EF5E 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EF63 02                         byte_E9C5:	dc.b 2
0000EF64 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EF69 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EF6E                            		even
0000EF6E                            		even
0000EF6E                            
0000EF6E                            ; ===========================================================================
0000EF6E                            ; ---------------------------------------------------------------------------
0000EF6E                            ; Object 47 - pinball bumper (SYZ)
0000EF6E                            ; ---------------------------------------------------------------------------
0000EF6E                            
0000EF6E                            Obj47:					; XREF: Obj_Index
0000EF6E 7000                       		moveq	#0,d0
0000EF70 1028 0024                  		move.b	$24(a0),d0
0000EF74 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EF78 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EF7C                            ; ===========================================================================
0000EF7C 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EF7E 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EF80                            ; ===========================================================================
0000EF80                            
0000EF80                            Obj47_Main:				; XREF: Obj47_Index
0000EF80 5428 0024                  		addq.b	#2,$24(a0)
0000EF84 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EF8C 317C 0380 0002             		move.w	#$380,2(a0)
0000EF92 117C 0004 0001             		move.b	#4,1(a0)
0000EF98 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF9E 117C 0001 0018             		move.b	#1,$18(a0)
0000EFA4 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EFAA                            
0000EFAA                            Obj47_Hit:				; XREF: Obj47_Index
0000EFAA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EFAE 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EFB2 4228 0021                  		clr.b	$21(a0)
0000EFB6 43F8 D000                  		lea	($FFFFD000).w,a1
0000EFBA 3228 0008                  		move.w	8(a0),d1
0000EFBE 3428 000C                  		move.w	$C(a0),d2
0000EFC2 9269 0008                  		sub.w	8(a1),d1
0000EFC6 9469 000C                  		sub.w	$C(a1),d2
0000EFCA 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0000EFD0 4EB9 0000 2C22             		jsr	(CalcSine).l
0000EFD6 C3FC F900                  		muls.w	#-$700,d1
0000EFDA E081                       		asr.l	#8,d1
0000EFDC 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EFE0 C1FC F900                  		muls.w	#-$700,d0
0000EFE4 E080                       		asr.l	#8,d0
0000EFE6 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EFEA 08E9 0001 0022             		bset	#1,$22(a1)
0000EFF0 08A9 0004 0022             		bclr	#4,$22(a1)
0000EFF6 08A9 0005 0022             		bclr	#5,$22(a1)
0000EFFC 4229 003C                  		clr.b	$3C(a1)
0000F000 117C 0001 001C             		move.b	#1,$1C(a0)
0000F006 303C 00B4                  		move.w	#$B4,d0
0000F00A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F010 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F014 7000                       		moveq	#0,d0
0000F016 1028 0023                  		move.b	$23(a0),d0
0000F01A 6700                       		beq.s	Obj47_Score
0000F01C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F022 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F024 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F028                            
0000F028                            Obj47_Score:
0000F028 7001                       		moveq	#1,d0
0000F02A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F030 6100 EFFC                  		bsr.w	SingleObjLoad
0000F034 6600                       		bne.s	Obj47_Display
0000F036 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F03A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F040 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F046 137C 0004 001A             		move.b	#4,$1A(a1)
0000F04C                            
0000F04C                            Obj47_Display:
0000F04C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F052 6100 BBEE                  		bsr.w	AnimateSprite
0000F056 3028 0008                  		move.w	8(a0),d0
0000F05A 0240 FF80                  		andi.w	#$FF80,d0
0000F05E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F062 0441 0080                  		subi.w	#$80,d1
0000F066 0241 FF80                  		andi.w	#$FF80,d1
0000F06A 9041                       		sub.w	d1,d0
0000F06C 0C40 0280                  		cmpi.w	#$280,d0
0000F070 6200                       		bhi.s	Obj47_ChkHit
0000F072 6000 EB34                  		bra.w	DisplaySprite
0000F076                            ; ===========================================================================
0000F076                            
0000F076                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F076 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F07A 7000                       		moveq	#0,d0
0000F07C 1028 0023                  		move.b	$23(a0),d0
0000F080 6700                       		beq.s	Obj47_Delete
0000F082 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F088                            
0000F088                            Obj47_Delete:
0000F088 6000 EB5A                  		bra.w	DeleteObject
0000F08C                            ; ===========================================================================
0000F08C                            Ani_obj47:
0000F08C                            	include "_anim\obj47.asm"
0000F08C                            ; ---------------------------------------------------------------------------
0000F08C                            ; Animation script - flamethrower (SBZ)
0000F08C                            ; ---------------------------------------------------------------------------
0000F08C 0000                       		dc.w byte_EAF4-Ani_obj47
0000F08E 0000                       		dc.w byte_EAF8-Ani_obj47
0000F090 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F094 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F09C                            		even
0000F09C                            		even
0000F09C                            
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C                            ; Sprite mappings - pinball bumper (SYZ)
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C                            Map_obj47:
0000F09C                            	include "_maps\obj47.asm"
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C                            ; Sprite mappings - pinball bumper (SYZ)
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C 0000                       		dc.w byte_EB06-Map_obj47
0000F09E 0000                       		dc.w byte_EB11-Map_obj47
0000F0A0 0000                       		dc.w byte_EB1C-Map_obj47
0000F0A2 02                         byte_EB06:	dc.b 2
0000F0A3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F0A8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F0AD 02                         byte_EB11:	dc.b 2
0000F0AE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F0B3 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F0B8 02                         byte_EB1C:	dc.b 2
0000F0B9 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F0BE F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F0C4 00                         		even
0000F0C4 00                         		even
0000F0C4                            
0000F0C4                            ; ===========================================================================
0000F0C4                            ; ---------------------------------------------------------------------------
0000F0C4                            ; Object 0D - signpost at the end of a level
0000F0C4                            ; ---------------------------------------------------------------------------
0000F0C4                            
0000F0C4                            Obj0D:					; XREF: Obj_Index
0000F0C4 7000                       		moveq	#0,d0
0000F0C6 1028 0024                  		move.b	$24(a0),d0
0000F0CA 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F0CE 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F0D2 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F0D8 6100 BB68                  		bsr.w	AnimateSprite
0000F0DC 6100 EACA                  		bsr.w	DisplaySprite
0000F0E0 3028 0008                  		move.w	8(a0),d0
0000F0E4 0240 FF80                  		andi.w	#$FF80,d0
0000F0E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0EC 0441 0080                  		subi.w	#$80,d1
0000F0F0 0241 FF80                  		andi.w	#$FF80,d1
0000F0F4 9041                       		sub.w	d1,d0
0000F0F6 0C40 0280                  		cmpi.w	#$280,d0
0000F0FA 6200 EAE8                  		bhi.w	DeleteObject
0000F0FE 4E75                       		rts	
0000F100                            ; ===========================================================================
0000F100 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F102 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F104 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F106 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F108 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F10A                            ; ===========================================================================
0000F10A                            
0000F10A                            Obj0D_Main:				; XREF: Obj0D_Index
0000F10A 5428 0024                  		addq.b	#2,$24(a0)
0000F10E 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F116 317C 0680 0002             		move.w	#$680,2(a0)
0000F11C 117C 0004 0001             		move.b	#4,1(a0)
0000F122 117C 0018 0019             		move.b	#$18,$19(a0)
0000F128 117C 0004 0018             		move.b	#4,$18(a0)
0000F12E                            
0000F12E                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F12E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F132 9068 0008                  		sub.w	8(a0),d0
0000F136 6500                       		bcs.s	locret_EBBA
0000F138 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F13C 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F13E 303C 00CF                  		move.w	#$CF,d0
0000F142 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F148 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F14C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F152 5428 0024                  		addq.b	#2,$24(a0)
0000F156                            
0000F156                            locret_EBBA:
0000F156 4E75                       		rts	
0000F158                            ; ===========================================================================
0000F158                            
0000F158                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F158 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F15C 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F15E 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F164 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F168 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F16E 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F170 5428 0024                  		addq.b	#2,$24(a0)
0000F174                            
0000F174                            Obj0D_Sparkle:
0000F174 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F178 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F17A 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F180 7000                       		moveq	#0,d0
0000F182 1028 0034                  		move.b	$34(a0),d0
0000F186 5428 0034                  		addq.b	#2,$34(a0)
0000F18A 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F190 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F194 6100 EE98                  		bsr.w	SingleObjLoad
0000F198 6600                       		bne.s	locret_EC42
0000F19A 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F19E 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F1A4 101A                       		move.b	(a2)+,d0
0000F1A6 4880                       		ext.w	d0
0000F1A8 D068 0008                  		add.w	8(a0),d0
0000F1AC 3340 0008                  		move.w	d0,8(a1)
0000F1B0 101A                       		move.b	(a2)+,d0
0000F1B2 4880                       		ext.w	d0
0000F1B4 D068 000C                  		add.w	$C(a0),d0
0000F1B8 3340 000C                  		move.w	d0,$C(a1)
0000F1BC 237C 0000 A3E0 0004        		move.l	#Map_obj25,4(a1)
0000F1C4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F1CA 137C 0004 0001             		move.b	#4,1(a1)
0000F1D0 137C 0002 0018             		move.b	#2,$18(a1)
0000F1D6 137C 0008 0019             		move.b	#8,$19(a1)
0000F1DC                            
0000F1DC                            locret_EC42:
0000F1DC 4E75                       		rts	
0000F1DE                            ; ===========================================================================
0000F1DE E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F1E0 0808                       		dc.b	8,   8
0000F1E2 F000                       		dc.b -$10,   0
0000F1E4 18F8                       		dc.b  $18,  -8
0000F1E6 00F8                       		dc.b	0,  -8
0000F1E8 1000                       		dc.b  $10,   0
0000F1EA E808                       		dc.b -$18,   8
0000F1EC 1810                       		dc.b  $18, $10
0000F1EE                            ; ===========================================================================
0000F1EE                            
0000F1EE                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F1EE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F1F2 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F1F6 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F1FC 6600                       		bne.s	loc_EC70
0000F1FE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F204 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F20A 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F20C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F212 6000                       		bra.s	loc_EC70
0000F214                            
0000F214                            Obj0D_MoveLeft:
0000F214 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F21A                            
0000F21A                            loc_EC70:
0000F21A 4A38 D000                  		tst.b	($FFFFD000).w
0000F21E 6700                       		beq.s	loc_EC86
0000F220 3038 D008                  		move.w	($FFFFD008).w,d0
0000F224 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F228 0641 0128                  		addi.w	#$128,d1
0000F22C B041                       		cmp.w	d1,d0
0000F22E 6500                       		bcs.s	locret_ECEE
0000F230                            
0000F230                            loc_EC86:
0000F230 5428 0024                  		addq.b	#2,$24(a0)
0000F234                            
0000F234                            ; ---------------------------------------------------------------------------
0000F234                            ; Subroutine to	set up bonuses at the end of an	act
0000F234                            ; ---------------------------------------------------------------------------
0000F234                            
0000F234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F234                            
0000F234                            
0000F234                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F234 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F238 6600                       		bne.s	locret_ECEE
0000F23A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F240 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F244 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F248 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F24E 7010                       		moveq	#$10,d0
0000F250 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F256 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F25C 7000                       		moveq	#0,d0
0000F25E 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F262 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F266 7200                       		moveq	#0,d1
0000F268 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F26C D041                       		add.w	d1,d0		; add up your time
0000F26E 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F272 7214                       		moveq	#$14,d1
0000F274 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F276 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F278 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F27A                            
0000F27A                            loc_ECD0:
0000F27A D040                       		add.w	d0,d0
0000F27C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F282 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F286 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F28A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F28E 303C 008E                  		move.w	#$8E,d0
0000F292 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F298                            
0000F298                            locret_ECEE:
0000F298 4E75                       		rts	
0000F29A                            ; End of function GotThroughAct
0000F29A                            
0000F29A                            ; ===========================================================================
0000F29A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F2AE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F2C4                            ; ===========================================================================
0000F2C4                            
0000F2C4                            locret_ED1A:				; XREF: Obj0D_Index
0000F2C4 4E75                       		rts	
0000F2C6                            ; ===========================================================================
0000F2C6                            Ani_obj0D:
0000F2C6                            	include "_anim\obj0D.asm"
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6                            ; Animation script - signpost
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6 0000                       		dc.w byte_ED24-Ani_obj0D
0000F2C8 0000                       		dc.w byte_ED28-Ani_obj0D
0000F2CA 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F2CC 0000                       		dc.w byte_ED34-Ani_obj0D
0000F2CE 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F2D2 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F2D8 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F2DE 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F2E2 00                         		even
0000F2E2 00                         		even
0000F2E2                            
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2                            ; Sprite mappings - signpost
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2                            Map_obj0D:
0000F2E2                            	include "_maps\obj0D.asm"
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2                            ; Sprite mappings - signpost
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F2E6 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F2EA 0000                       		dc.w byte_ED73-Map_obj0D
0000F2EC 03                         byte_ED42:	dc.b 3
0000F2ED F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F2F2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F2F7 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2FC 02                         byte_ED52:	dc.b 2
0000F2FD F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F302 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F307 02                         byte_ED5D:	dc.b 2
0000F308 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F30D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F312 02                         byte_ED68:	dc.b 2
0000F313 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F318 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F31D 03                         byte_ED73:	dc.b 3
0000F31E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F323 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F328 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F32E 00                         		even
0000F32E 00                         		even
0000F32E                            
0000F32E                            ; ===========================================================================
0000F32E                            ; ---------------------------------------------------------------------------
0000F32E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F32E                            ; ---------------------------------------------------------------------------
0000F32E                            
0000F32E                            Obj4C:					; XREF: Obj_Index
0000F32E 7000                       		moveq	#0,d0
0000F330 1028 0024                  		move.b	$24(a0),d0
0000F334 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F338 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F33C 6000 0000                  		bra.w	Obj4D_ChkDel
0000F340                            ; ===========================================================================
0000F340 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F342 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F344 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F346 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F348 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F34A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F34C                            ; ===========================================================================
0000F34C                            
0000F34C                            Obj4C_Main:				; XREF: Obj4C_Index
0000F34C 5428 0024                  		addq.b	#2,$24(a0)
0000F350 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F358 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F35E 117C 0004 0001             		move.b	#4,1(a0)
0000F364 117C 0001 0018             		move.b	#1,$18(a0)
0000F36A 117C 0038 0019             		move.b	#$38,$19(a0)
0000F370 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F376                            
0000F376                            loc_EDCC:				; XREF: Obj4C_Index
0000F376 5368 0032                  		subq.w	#1,$32(a0)
0000F37A 6A00                       		bpl.s	locret_EDF0
0000F37C 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F382 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F386 3228 000C                  		move.w	$C(a0),d1
0000F38A B041                       		cmp.w	d1,d0
0000F38C 6400                       		bcc.s	locret_EDF0
0000F38E 0441 0170                  		subi.w	#$170,d1
0000F392 B041                       		cmp.w	d1,d0
0000F394 6500                       		bcs.s	locret_EDF0
0000F396 5428 0024                  		addq.b	#2,$24(a0)
0000F39A                            
0000F39A                            locret_EDF0:
0000F39A 4E75                       		rts	
0000F39C                            ; ===========================================================================
0000F39C                            
0000F39C                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F39C 5428 0024                  		addq.b	#2,$24(a0)
0000F3A0 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F3A4 6600                       		bne.s	loc_EE18
0000F3A6 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F3AA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F3B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F3B6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F3BC 2348 003C                  		move.l	a0,$3C(a1)
0000F3C0                            
0000F3C0                            loc_EE18:
0000F3C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F3C6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3CA 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F3CC 117C 0004 001C             		move.b	#4,$1C(a0)
0000F3D2 6000                       		bra.s	Obj4C_Display
0000F3D4                            ; ===========================================================================
0000F3D4                            
0000F3D4                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F3D4 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F3D8 08E9 0001 0022             		bset	#1,$22(a1)
0000F3DE 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F3E4 6000                       		bra.s	Obj4C_Display
0000F3E6                            ; ===========================================================================
0000F3E6                            
0000F3E6                            loc_EE3E:				; XREF: Obj4C_Index
0000F3E6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3EA 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F3EC 5428 0024                  		addq.b	#2,$24(a0)
0000F3F0 4E75                       		rts	
0000F3F2                            ; ===========================================================================
0000F3F2                            
0000F3F2                            Obj4C_Display:				; XREF: Obj4C_Index
0000F3F2 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F3F8 6100 B848                  		bsr.w	AnimateSprite
0000F3FC 6100 E7AA                  		bsr.w	DisplaySprite
0000F400 4E75                       		rts	
0000F402                            ; ===========================================================================
0000F402                            
0000F402                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F402 117C 0000 001C             		move.b	#0,$1C(a0)
0000F408 117C 0002 0024             		move.b	#2,$24(a0)
0000F40E 4A28 0028                  		tst.b	$28(a0)
0000F412 6700 E7D0                  		beq.w	DeleteObject
0000F416 4E75                       		rts	
0000F418                            ; ===========================================================================
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            ; Object 4D - lava geyser / lavafall (MZ)
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            
0000F418                            Obj4D:					; XREF: Obj_Index
0000F418 7000                       		moveq	#0,d0
0000F41A 1028 0024                  		move.b	$24(a0),d0
0000F41E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F422 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F426 6000 E780                  		bra.w	DisplaySprite
0000F42A                            ; ===========================================================================
0000F42A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F42C 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F42E 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F430 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F432                            
0000F432 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F436                            ; ===========================================================================
0000F436                            
0000F436                            Obj4D_Main:				; XREF: Obj4D_Index
0000F436 5428 0024                  		addq.b	#2,$24(a0)
0000F43A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F440 4A28 0028                  		tst.b	$28(a0)
0000F444 6700                       		beq.s	loc_EEA4
0000F446 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F44C                            
0000F44C                            loc_EEA4:
0000F44C 7000                       		moveq	#0,d0
0000F44E 1028 0028                  		move.b	$28(a0),d0
0000F452 D040                       		add.w	d0,d0
0000F454 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F45A 2248                       		movea.l	a0,a1
0000F45C 7201                       		moveq	#1,d1
0000F45E 6100                       		bsr.s	Obj4D_MakeLava
0000F460 6000                       		bra.s	loc_EF10
0000F462                            ; ===========================================================================
0000F462                            
0000F462                            Obj4D_Loop:
0000F462 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F466 6600                       		bne.s	loc_EF0A
0000F468                            
0000F468                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F468 12BC 004D                  		move.b	#$4D,0(a1)
0000F46C 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F474 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F47A 137C 0004 0001             		move.b	#4,1(a1)
0000F480 137C 0020 0019             		move.b	#$20,$19(a1)
0000F486 3368 0008 0008             		move.w	8(a0),8(a1)
0000F48C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F492 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F498 137C 0001 0018             		move.b	#1,$18(a1)
0000F49E 137C 0005 001C             		move.b	#5,$1C(a1)
0000F4A4 4A28 0028                  		tst.b	$28(a0)
0000F4A8 6700                       		beq.s	loc_EF0A
0000F4AA 137C 0002 001C             		move.b	#2,$1C(a1)
0000F4B0                            
0000F4B0                            loc_EF0A:
0000F4B0 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F4B4 4E75                       		rts	
0000F4B6                            ; ===========================================================================
0000F4B6                            
0000F4B6                            loc_EF10:				; XREF: Obj4D_Main
0000F4B6 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F4BC 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4C2 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F4C8 137C 0093 0020             		move.b	#$93,$20(a1)
0000F4CE 137C 0080 0016             		move.b	#$80,$16(a1)
0000F4D4 08E9 0004 0001             		bset	#4,1(a1)
0000F4DA 5829 0024                  		addq.b	#4,$24(a1)
0000F4DE 2348 003C                  		move.l	a0,$3C(a1)
0000F4E2 4A28 0028                  		tst.b	$28(a0)
0000F4E6 6700                       		beq.s	Obj4D_PlaySnd
0000F4E8 7200                       		moveq	#0,d1
0000F4EA 6100 FF76                  		bsr.w	Obj4D_Loop
0000F4EE 5429 0024                  		addq.b	#2,$24(a1)
0000F4F2 08E9 0004 0002             		bset	#4,2(a1)
0000F4F8 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F4FE 137C 0000 0018             		move.b	#0,$18(a1)
0000F504 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F50A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F510 117C 0000 0028             		move.b	#0,$28(a0)
0000F516                            
0000F516                            Obj4D_PlaySnd:
0000F516 303C 00C8                  		move.w	#$C8,d0
0000F51A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F520                            
0000F520                            Obj4D_Action:				; XREF: Obj4D_Index
0000F520 7000                       		moveq	#0,d0
0000F522 1028 0028                  		move.b	$28(a0),d0
0000F526 D040                       		add.w	d0,d0
0000F528 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F52C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F530 6100 E650                  		bsr.w	SpeedToPos
0000F534 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F53A 6100 B706                  		bsr.w	AnimateSprite
0000F53E                            
0000F53E                            Obj4D_ChkDel:				; XREF: Obj4C
0000F53E 3028 0008                  		move.w	8(a0),d0
0000F542 0240 FF80                  		andi.w	#$FF80,d0
0000F546 3238 F700                  		move.w	($FFFFF700).w,d1
0000F54A 0441 0080                  		subi.w	#$80,d1
0000F54E 0241 FF80                  		andi.w	#$FF80,d1
0000F552 9041                       		sub.w	d1,d0
0000F554 0C40 0280                  		cmpi.w	#$280,d0
0000F558 6200 E68A                  		bhi.w	DeleteObject
0000F55C 4E75                       		rts	
0000F55E                            ; ===========================================================================
0000F55E 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F560 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F562                            ; ===========================================================================
0000F562                            
0000F562                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F562 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F568 3028 0030                  		move.w	$30(a0),d0
0000F56C B068 000C                  		cmp.w	$C(a0),d0
0000F570 6400                       		bcc.s	locret_EFDA
0000F572 5828 0024                  		addq.b	#4,$24(a0)
0000F576 2268 003C                  		movea.l	$3C(a0),a1
0000F57A 137C 0003 001C             		move.b	#3,$1C(a1)
0000F580                            
0000F580                            locret_EFDA:
0000F580 4E75                       		rts	
0000F582                            ; ===========================================================================
0000F582                            
0000F582                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F582 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F588 3028 0030                  		move.w	$30(a0),d0
0000F58C B068 000C                  		cmp.w	$C(a0),d0
0000F590 6400                       		bcc.s	locret_EFFA
0000F592 5828 0024                  		addq.b	#4,$24(a0)
0000F596 2268 003C                  		movea.l	$3C(a0),a1
0000F59A 137C 0001 001C             		move.b	#1,$1C(a1)
0000F5A0                            
0000F5A0                            locret_EFFA:
0000F5A0 4E75                       		rts	
0000F5A2                            ; ===========================================================================
0000F5A2                            
0000F5A2                            loc_EFFC:				; XREF: Obj4D_Index
0000F5A2 2268 003C                  		movea.l	$3C(a0),a1
0000F5A6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F5AC 6700 0000                  		beq.w	Obj4D_Delete
0000F5B0 3029 000C                  		move.w	$C(a1),d0
0000F5B4 0640 0060                  		addi.w	#$60,d0
0000F5B8 3140 000C                  		move.w	d0,$C(a0)
0000F5BC 9068 0030                  		sub.w	$30(a0),d0
0000F5C0 4440                       		neg.w	d0
0000F5C2 7208                       		moveq	#8,d1
0000F5C4 0C40 0040                  		cmpi.w	#$40,d0
0000F5C8 6C00                       		bge.s	loc_F026
0000F5CA 720B                       		moveq	#$B,d1
0000F5CC                            
0000F5CC                            loc_F026:
0000F5CC 0C40 0080                  		cmpi.w	#$80,d0
0000F5D0 6F00                       		ble.s	loc_F02E
0000F5D2 720E                       		moveq	#$E,d1
0000F5D4                            
0000F5D4                            loc_F02E:
0000F5D4 5328 001E                  		subq.b	#1,$1E(a0)
0000F5D8 6A00                       		bpl.s	loc_F04C
0000F5DA 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5E0 5228 001B                  		addq.b	#1,$1B(a0)
0000F5E4 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F5EA 6500                       		bcs.s	loc_F04C
0000F5EC 117C 0000 001B             		move.b	#0,$1B(a0)
0000F5F2                            
0000F5F2                            loc_F04C:
0000F5F2 1028 001B                  		move.b	$1B(a0),d0
0000F5F6 D001                       		add.b	d1,d0
0000F5F8 1140 001A                  		move.b	d0,$1A(a0)
0000F5FC 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F600                            ; ===========================================================================
0000F600                            
0000F600                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F600 6000 E5E2                  		bra.w	DeleteObject
0000F604                            ; ===========================================================================
0000F604                            ; ---------------------------------------------------------------------------
0000F604                            ; Object 4E - advancing	wall of	lava (MZ)
0000F604                            ; ---------------------------------------------------------------------------
0000F604                            
0000F604                            Obj4E:					; XREF: Obj_Index
0000F604 7000                       		moveq	#0,d0
0000F606 1028 0024                  		move.b	$24(a0),d0
0000F60A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F60E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F612                            ; ===========================================================================
0000F612 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F614 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F616 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F618 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F61A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F61C                            ; ===========================================================================
0000F61C                            
0000F61C                            Obj4E_Main:				; XREF: Obj4E_Index
0000F61C 5828 0024                  		addq.b	#4,$24(a0)
0000F620 2248                       		movea.l	a0,a1
0000F622 7201                       		moveq	#1,d1
0000F624 6000                       		bra.s	Obj4E_Main2
0000F626                            ; ===========================================================================
0000F626                            
0000F626                            Obj4E_Loop:
0000F626 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F62A 6600                       		bne.s	loc_F0C8
0000F62C                            
0000F62C                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F62C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F630 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F638 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F63E 137C 0004 0001             		move.b	#4,1(a1)
0000F644 137C 0050 0019             		move.b	#$50,$19(a1)
0000F64A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F650 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F656 137C 0001 0018             		move.b	#1,$18(a1)
0000F65C 137C 0000 001C             		move.b	#0,$1C(a1)
0000F662 137C 0094 0020             		move.b	#$94,$20(a1)
0000F668 2348 003C                  		move.l	a0,$3C(a1)
0000F66C                            
0000F66C                            loc_F0C8:
0000F66C 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F670                            
0000F670 5C29 0024                  		addq.b	#6,$24(a1)
0000F674 137C 0004 001A             		move.b	#4,$1A(a1)
0000F67A                            
0000F67A                            Obj4E_Action:				; XREF: Obj4E_Index
0000F67A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F67E 9068 0008                  		sub.w	8(a0),d0
0000F682 6400                       		bcc.s	Obj4E_ChkSonic
0000F684 4440                       		neg.w	d0
0000F686                            
0000F686                            Obj4E_ChkSonic:
0000F686 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F68A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F68C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F690 9068 000C                  		sub.w	$C(a0),d0
0000F694 6400                       		bcc.s	loc_F0F4
0000F696 4440                       		neg.w	d0
0000F698                            
0000F698                            loc_F0F4:
0000F698 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F69C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F69E 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F6A4 6000                       		bra.s	Obj4E_Solid
0000F6A6                            ; ===========================================================================
0000F6A6                            
0000F6A6                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F6A6 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F6AA 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F6AC 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F6B2 5528 0024                  		subq.b	#2,$24(a0)
0000F6B6                            
0000F6B6                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F6B6 323C 002B                  		move.w	#$2B,d1
0000F6BA 343C 0018                  		move.w	#$18,d2
0000F6BE 3602                       		move.w	d2,d3
0000F6C0 5243                       		addq.w	#1,d3
0000F6C2 3828 0008                  		move.w	8(a0),d4
0000F6C6 1028 0024                  		move.b	$24(a0),d0
0000F6CA 3F00                       		move.w	d0,-(sp)
0000F6CC 6100 0000                  		bsr.w	SolidObject
0000F6D0 301F                       		move.w	(sp)+,d0
0000F6D2 1140 0024                  		move.b	d0,$24(a0)
0000F6D6 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F6DC 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F6DE 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F6E2 4228 0036                  		clr.b	$36(a0)
0000F6E6                            
0000F6E6                            Obj4E_Animate:
0000F6E6 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F6EC 6100 B554                  		bsr.w	AnimateSprite
0000F6F0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F6F6 6400                       		bcc.s	Obj4E_ChkDel
0000F6F8 6100 E488                  		bsr.w	SpeedToPos
0000F6FC                            
0000F6FC                            Obj4E_ChkDel:
0000F6FC 6100 E4AA                  		bsr.w	DisplaySprite
0000F700 4A28 0036                  		tst.b	$36(a0)
0000F704 6600                       		bne.s	locret_F17E
0000F706 3028 0008                  		move.w	8(a0),d0
0000F70A 0240 FF80                  		andi.w	#$FF80,d0
0000F70E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F712 0441 0080                  		subi.w	#$80,d1
0000F716 0241 FF80                  		andi.w	#$FF80,d1
0000F71A 9041                       		sub.w	d1,d0
0000F71C 0C40 0280                  		cmpi.w	#$280,d0
0000F720 6200                       		bhi.s	Obj4E_ChkGone
0000F722                            
0000F722                            locret_F17E:
0000F722 4E75                       		rts	
0000F724                            ; ===========================================================================
0000F724                            
0000F724                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F724 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F728 7000                       		moveq	#0,d0
0000F72A 1028 0023                  		move.b	$23(a0),d0
0000F72E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F734 117C 0008 0024             		move.b	#8,$24(a0)
0000F73A 4E75                       		rts	
0000F73C                            ; ===========================================================================
0000F73C                            
0000F73C                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F73C 2268 003C                  		movea.l	$3C(a0),a1
0000F740 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F746 6700                       		beq.s	Obj4E_Delete
0000F748 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F74E 0468 0080 0008             		subi.w	#$80,8(a0)
0000F754 6000 E452                  		bra.w	DisplaySprite
0000F758                            ; ===========================================================================
0000F758                            
0000F758                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F758 6000 E48A                  		bra.w	DeleteObject
0000F75C                            ; ===========================================================================
0000F75C                            ; ---------------------------------------------------------------------------
0000F75C                            ; Object 54 - invisible	lava tag (MZ)
0000F75C                            ; ---------------------------------------------------------------------------
0000F75C                            
0000F75C                            Obj54:					; XREF: Obj_Index
0000F75C 7000                       		moveq	#0,d0
0000F75E 1028 0024                  		move.b	$24(a0),d0
0000F762 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F766 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F76A                            ; ===========================================================================
0000F76A 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F76C 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F76E                            
0000F76E 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F772                            ; ===========================================================================
0000F772                            
0000F772                            Obj54_Main:				; XREF: Obj54_Index
0000F772 5428 0024                  		addq.b	#2,$24(a0)
0000F776 7000                       		moveq	#0,d0
0000F778 1028 0028                  		move.b	$28(a0),d0
0000F77C 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F782 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F78A 117C 0084 0001             		move.b	#$84,1(a0)
0000F790                            
0000F790                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F790 3028 0008                  		move.w	8(a0),d0
0000F794 0240 FF80                  		andi.w	#$FF80,d0
0000F798 3238 F700                  		move.w	($FFFFF700).w,d1
0000F79C 0441 0080                  		subi.w	#$80,d1
0000F7A0 0241 FF80                  		andi.w	#$FF80,d1
0000F7A4 9041                       		sub.w	d1,d0
0000F7A6 6B00 E43C                  		bmi.w	DeleteObject
0000F7AA 0C40 0280                  		cmpi.w	#$280,d0
0000F7AE 6200 E434                  		bhi.w	DeleteObject
0000F7B2 4E75                       		rts	
0000F7B4                            ; ===========================================================================
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4                            ; Sprite mappings - invisible lava tag (MZ)
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4                            Map_obj54:
0000F7B4                            	include "_maps\obj54.asm"
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4                            ; Sprite mappings - invisible lava tag (MZ)
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4 0000                       		dc.w byte_F212-Map_obj54
0000F7B6 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F7B8 00                         		even
0000F7B8 00                         		even
0000F7B8                            
0000F7B8                            Ani_obj4C:
0000F7B8                            	include "_anim\obj4C.asm"
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            ; Animation script - geyser of lava (MZ)
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8 0000                       		dc.w byte_F220-Ani_obj4C
0000F7BA 0000                       		dc.w byte_F22A-Ani_obj4C
0000F7BC 0000                       		dc.w byte_F22E-Ani_obj4C
0000F7BE 0000                       		dc.w byte_F232-Ani_obj4C
0000F7C0 0000                       		dc.w byte_F23A-Ani_obj4C
0000F7C2 0000                       		dc.w byte_F23E-Ani_obj4C
0000F7C4 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F7CE 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F7D2 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F7D6 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F7DE 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F7E2 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F7E6                            		even
0000F7E6                            		even
0000F7E6                            
0000F7E6                            Ani_obj4E:
0000F7E6                            	include "_anim\obj4E.asm"
0000F7E6                            ; ---------------------------------------------------------------------------
0000F7E6                            ; Animation script - advancing wall of lava (MZ)
0000F7E6                            ; ---------------------------------------------------------------------------
0000F7E6 0000                       		dc.w byte_F244-Ani_obj4E
0000F7E8 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F7EE                            		even
0000F7EE                            		even
0000F7EE                            
0000F7EE                            ; ---------------------------------------------------------------------------
0000F7EE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7EE                            ; ---------------------------------------------------------------------------
0000F7EE                            Map_obj4C:
0000F7EE                            	include "_maps\obj4C.asm"
0000F7EE                            ; ---------------------------------------------------------------------------
0000F7EE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7EE                            ; ---------------------------------------------------------------------------
0000F7EE 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F7F2 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F7F6 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F7FA 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F7FE 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F802 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F806 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F80A 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F80E 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F812 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F816 02                         byte_F272:	dc.b 2
0000F817 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F81C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F821 02                         byte_F27D:	dc.b 2
0000F822 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F827 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F82C 04                         byte_F288:	dc.b 4
0000F82D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F832 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F837 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F83C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F841 04                         byte_F29D:	dc.b 4
0000F842 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F847 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F84C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F851 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F856 06                         byte_F2B2:	dc.b 6
0000F857 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F85C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F861 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F866 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F86B E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F870 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F875 06                         byte_F2D1:	dc.b 6
0000F876 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F87B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F880 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F885 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F88A E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F88F E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F894 02                         byte_F2F0:	dc.b 2
0000F895 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F89A E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F89F 02                         byte_F2FB:	dc.b 2
0000F8A0 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F8A5 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F8AA 0A                         byte_F306:	dc.b $A
0000F8AB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F8B0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F8B5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F8BA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F8BF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F8C4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F8C9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F8CE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F8D3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F8D8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F8DD 0A                         byte_F339:	dc.b $A
0000F8DE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F8E3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F8E8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F8ED B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F8F2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F8F7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F8FC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F901 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F906 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F90B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F910 0A                         byte_F36C:	dc.b $A
0000F911 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F916 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F91B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F920 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F925 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F92A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F92F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F934 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F939 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F93E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F943 06                         byte_F39F:	dc.b 6
0000F944 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F949 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F94E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F953 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F958 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F95D D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F962 06                         byte_F3BE:	dc.b 6
0000F963 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F968 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F96D B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F972 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F977 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F97C D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F981 06                         byte_F3DD:	dc.b 6
0000F982 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F987 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F98C B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F991 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F996 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F99B D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F9A0 10                         byte_F3FC:	dc.b $10
0000F9A1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F9A6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9AB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F9B0 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F9B5 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9BA D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9BF F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F9C4 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F9C9 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F9CE 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F9D3 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F9D8 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F9DD 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F9E2 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F9E7 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F9EC 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F9F1 10                         byte_F44D:	dc.b $10
0000F9F2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9F7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9FC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA01 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA06 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA0B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA10 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FA15 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FA1A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA1F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA24 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FA29 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FA2E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FA33 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA38 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA3D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA42 10                         byte_F49E:	dc.b $10
0000FA43 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA48 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA4D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA52 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA57 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA5C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA61 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA66 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA6B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA70 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA75 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FA7A 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FA7F 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FA84 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FA89 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FA8E 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FA93 06                         byte_F4EF:	dc.b 6
0000FA94 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FA99 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FA9E E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FAA3 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FAA8 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FAAD D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FAB2 06                         byte_F50E:	dc.b 6
0000FAB3 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FAB8 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FABD E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FAC2 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FAC7 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FACC D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FAD1 00                         byte_F52D:	dc.b 0
0000FAD2                            		even
0000FAD2                            		even
0000FAD2                            
0000FAD2                            ; ---------------------------------------------------------------------------
0000FAD2                            ; Sprite mappings - advancing wall of lava (MZ)
0000FAD2                            ; ---------------------------------------------------------------------------
0000FAD2                            Map_obj4E:
0000FAD2                            	include "_maps\obj4E.asm"
0000FAD2                            ; ---------------------------------------------------------------------------
0000FAD2                            ; Sprite mappings - advancing wall of lava (MZ)
0000FAD2                            ; ---------------------------------------------------------------------------
0000FAD2 0000                       		dc.w byte_F538-Map_obj4E
0000FAD4 0000                       		dc.w byte_F566-Map_obj4E
0000FAD6 0000                       		dc.w byte_F594-Map_obj4E
0000FAD8 0000                       		dc.w byte_F5C2-Map_obj4E
0000FADA 0000                       		dc.w byte_F5F0-Map_obj4E
0000FADC 09                         byte_F538:	dc.b 9
0000FADD E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FAE2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FAE7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAEC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAF1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FAF6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FAFB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB00 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB05 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB0A 09                         byte_F566:	dc.b 9
0000FB0B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB10 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FB15 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB1A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB1F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB24 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB29 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB2E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB33 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB38 09                         byte_F594:	dc.b 9
0000FB39 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB3E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB43 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB48 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB4D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB52 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB57 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB5C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB61 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB66 09                         byte_F5C2:	dc.b 9
0000FB67 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB6C 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FB71 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB76 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB7B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB80 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB85 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB8A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB8F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB94 08                         byte_F5F0:	dc.b 8
0000FB95 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FB9A 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB9F E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBA4 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBA9 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBAE 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBB3 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBB8 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBBE 00                         		even
0000FBBE 00                         		even
0000FBBE                            
0000FBBE                            ; ===========================================================================
0000FBBE                            ; ---------------------------------------------------------------------------
0000FBBE                            ; Object 40 - Moto Bug enemy (GHZ)
0000FBBE                            ; ---------------------------------------------------------------------------
0000FBBE                            
0000FBBE                            Obj40:					; XREF: Obj_Index
0000FBBE 7000                       		moveq	#0,d0
0000FBC0 1028 0024                  		move.b	$24(a0),d0
0000FBC4 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FBC8 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FBCC                            ; ===========================================================================
0000FBCC 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FBCE 0000                       		dc.w Obj40_Action-Obj40_Index
0000FBD0 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FBD2 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FBD4                            ; ===========================================================================
0000FBD4                            
0000FBD4                            Obj40_Main:				; XREF: Obj40_Index
0000FBD4 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FBDC 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FBE2 117C 0004 0001             		move.b	#4,1(a0)
0000FBE8 117C 0004 0018             		move.b	#4,$18(a0)
0000FBEE 117C 0014 0019             		move.b	#$14,$19(a0)
0000FBF4 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FBF8 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FBFA 117C 000E 0016             		move.b	#$E,$16(a0)
0000FC00 117C 0008 0017             		move.b	#8,$17(a0)
0000FC06 117C 000C 0020             		move.b	#$C,$20(a0)
0000FC0C 6100 DF48                  		bsr.w	ObjectFall
0000FC10 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC16 4A41                       		tst.w	d1
0000FC18 6A00                       		bpl.s	locret_F68A
0000FC1A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC1E 317C 0000 0012             		move.w	#0,$12(a0)
0000FC24 5428 0024                  		addq.b	#2,$24(a0)
0000FC28 0868 0000 0022             		bchg	#0,$22(a0)
0000FC2E                            
0000FC2E                            locret_F68A:
0000FC2E 4E75                       		rts	
0000FC30                            ; ===========================================================================
0000FC30                            
0000FC30                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FC30 5828 0024                  		addq.b	#4,$24(a0)
0000FC34 6000 0000                  		bra.w	Obj40_Animate
0000FC38                            ; ===========================================================================
0000FC38                            
0000FC38                            Obj40_Action:				; XREF: Obj40_Index
0000FC38 7000                       		moveq	#0,d0
0000FC3A 1028 0025                  		move.b	$25(a0),d0
0000FC3E 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC42 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC46 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FC4C 6100 AFF4                  		bsr.w	AnimateSprite
0000FC50                            
0000FC50                            ; ---------------------------------------------------------------------------
0000FC50                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FC50                            ; ---------------------------------------------------------------------------
0000FC50                            
0000FC50                            MarkObjGone:
0000FC50 3028 0008                  		move.w	8(a0),d0
0000FC54 0240 FF80                  		andi.w	#$FF80,d0
0000FC58 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC5C 0441 0080                  		subi.w	#$80,d1
0000FC60 0241 FF80                  		andi.w	#$FF80,d1
0000FC64 9041                       		sub.w	d1,d0
0000FC66 0C40 0280                  		cmpi.w	#$280,d0
0000FC6A 6200 0000                  		bhi.w	Mark_ChkGone
0000FC6E 6000 DF38                  		bra.w	DisplaySprite
0000FC72                            ; ===========================================================================
0000FC72                            
0000FC72                            Mark_ChkGone:
0000FC72 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC76 7000                       		moveq	#0,d0
0000FC78 1028 0023                  		move.b	$23(a0),d0
0000FC7C 6700                       		beq.s	Mark_Delete
0000FC7E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC84                            
0000FC84                            Mark_Delete:
0000FC84 6000 DF5E                  		bra.w	DeleteObject
0000FC88                            
0000FC88                            ; ===========================================================================
0000FC88 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FC8A 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FC8C                            ; ===========================================================================
0000FC8C                            
0000FC8C                            Obj40_Move:				; XREF: Obj40_Index2
0000FC8C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FC90 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FC92 5428 0025                  		addq.b	#2,$25(a0)
0000FC96 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FC9C 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCA2 0868 0000 0022             		bchg	#0,$22(a0)
0000FCA8 6600                       		bne.s	locret_F70A
0000FCAA 4468 0010                  		neg.w	$10(a0)		; change direction
0000FCAE                            
0000FCAE                            locret_F70A:
0000FCAE 4E75                       		rts	
0000FCB0                            ; ===========================================================================
0000FCB0                            
0000FCB0                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FCB0 6100 DED0                  		bsr.w	SpeedToPos
0000FCB4 4EB9 0000 0000             		jsr	ObjHitFloor
0000FCBA 0C41 FFF8                  		cmpi.w	#-8,d1
0000FCBE 6D00                       		blt.s	Obj40_Pause
0000FCC0 0C41 000C                  		cmpi.w	#$C,d1
0000FCC4 6C00                       		bge.s	Obj40_Pause
0000FCC6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FCCA 5328 0033                  		subq.b	#1,$33(a0)
0000FCCE 6A00                       		bpl.s	locret_F756
0000FCD0 117C 000F 0033             		move.b	#$F,$33(a0)
0000FCD6 6100 E356                  		bsr.w	SingleObjLoad
0000FCDA 6600                       		bne.s	locret_F756
0000FCDC 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FCE0 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FCEC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FCF2 137C 0002 001C             		move.b	#2,$1C(a1)
0000FCF8                            
0000FCF8                            locret_F756:
0000FCF8 4E75                       		rts	
0000FCFA                            ; ===========================================================================
0000FCFA                            
0000FCFA                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FCFA 5528 0025                  		subq.b	#2,$25(a0)
0000FCFE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FD04 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FD0A 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD10 4E75                       		rts	
0000FD12                            ; ===========================================================================
0000FD12                            
0000FD12                            Obj40_Animate:				; XREF: Obj40_Index
0000FD12 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD18 6100 AF28                  		bsr.w	AnimateSprite
0000FD1C 6000 DE8A                  		bra.w	DisplaySprite
0000FD20                            ; ===========================================================================
0000FD20                            
0000FD20                            Obj40_Delete:				; XREF: Obj40_Index
0000FD20 6000 DEC2                  		bra.w	DeleteObject
0000FD24                            ; ===========================================================================
0000FD24                            Ani_obj40:
0000FD24                            	include "_anim\obj40.asm"
0000FD24                            ; ---------------------------------------------------------------------------
0000FD24                            ; Animation script - Motobug enemy
0000FD24                            ; ---------------------------------------------------------------------------
0000FD24 0000                       		dc.w byte_F788-Ani_obj40
0000FD26 0000                       		dc.w byte_F78C-Ani_obj40
0000FD28 0000                       		dc.w byte_F792-Ani_obj40
0000FD2A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FD2E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FD34 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD42                            		even
0000FD42                            		even
0000FD42                            
0000FD42                            ; ---------------------------------------------------------------------------
0000FD42                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD42                            ; ---------------------------------------------------------------------------
0000FD42                            Map_obj40:
0000FD42                            	include "_maps\obj40.asm"
0000FD42                            Map_cedc:
0000FD42 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD44 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD46 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD48 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FD4A 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FD4C 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FD4E 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FD50 04                         Map_cedc_E: 	dc.b $4
0000FD51 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD56 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FD5B F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD60 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FD65 04                         Map_cedc_23: 	dc.b $4
0000FD66 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FD6B 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FD70 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FD75 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FD7A 05                         Map_cedc_38: 	dc.b $5
0000FD7B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD80 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FD85 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD8A 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FD8F 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FD94 01                         Map_cedc_52: 	dc.b $1
0000FD95 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FD9A 01                         Map_cedc_58: 	dc.b $1
0000FD9B FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FDA0 01                         Map_cedc_5E: 	dc.b $1
0000FDA1 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FDA6 00                         Map_cedc_64: 	dc.b $0
0000FDA8 00                         	even
0000FDA8 00                         	even
0000FDA8                            
0000FDA8                            ; ===========================================================================
0000FDA8                            ; ---------------------------------------------------------------------------
0000FDA8                            ; Object 4F - blank
0000FDA8                            ; ---------------------------------------------------------------------------
0000FDA8                            
0000FDA8                            Obj4F:					; XREF: Obj_Index
0000FDA8 4E75                       		rts	
0000FDAA                            
0000FDAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDAA                            
0000FDAA                            
0000FDAA                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FDAA 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FDAE D047                       		add.w	d7,d0
0000FDB0 0240 0003                  		andi.w	#3,d0
0000FDB4 6600                       		bne.s	loc_F836
0000FDB6 7600                       		moveq	#0,d3
0000FDB8 1628 0019                  		move.b	$19(a0),d3
0000FDBC 4A68 0010                  		tst.w	$10(a0)
0000FDC0 6B00                       		bmi.s	loc_F82C
0000FDC2 6100 0000                  		bsr.w	ObjHitWallRight
0000FDC6 4A41                       		tst.w	d1
0000FDC8 6A00                       		bpl.s	loc_F836
0000FDCA                            
0000FDCA                            loc_F828:
0000FDCA 7001                       		moveq	#1,d0
0000FDCC 4E75                       		rts	
0000FDCE                            ; ===========================================================================
0000FDCE                            
0000FDCE                            loc_F82C:
0000FDCE 4643                       		not.w	d3
0000FDD0 6100 0000                  		bsr.w	ObjHitWallLeft
0000FDD4 4A41                       		tst.w	d1
0000FDD6 6BF2                       		bmi.s	loc_F828
0000FDD8                            
0000FDD8                            loc_F836:
0000FDD8 7000                       		moveq	#0,d0
0000FDDA 4E75                       		rts	
0000FDDC                            ; End of function Obj50_ChkWall
0000FDDC                            
0000FDDC                            ; ===========================================================================
0000FDDC                            ; ---------------------------------------------------------------------------
0000FDDC                            ; Object 50 - Yadrin enemy (SYZ)
0000FDDC                            ; ---------------------------------------------------------------------------
0000FDDC                            
0000FDDC                            Obj50:					; XREF: Obj_Index
0000FDDC 7000                       		moveq	#0,d0
0000FDDE 1028 0024                  		move.b	$24(a0),d0
0000FDE2 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FDE6 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FDEA                            ; ===========================================================================
0000FDEA 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FDEC 0000                       		dc.w Obj50_Action-Obj50_Index
0000FDEE                            ; ===========================================================================
0000FDEE                            
0000FDEE                            Obj50_Main:				; XREF: Obj50_Index
0000FDEE 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FDF6 317C 247B 0002             		move.w	#$247B,2(a0)
0000FDFC 117C 0004 0001             		move.b	#4,1(a0)
0000FE02 117C 0004 0018             		move.b	#4,$18(a0)
0000FE08 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE0E 117C 0011 0016             		move.b	#$11,$16(a0)
0000FE14 117C 0008 0017             		move.b	#8,$17(a0)
0000FE1A 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FE20 6100 DD34                  		bsr.w	ObjectFall
0000FE24 6100 0000                  		bsr.w	ObjHitFloor
0000FE28 4A41                       		tst.w	d1
0000FE2A 6A00                       		bpl.s	locret_F89E
0000FE2C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE30 317C 0000 0012             		move.w	#0,$12(a0)
0000FE36 5428 0024                  		addq.b	#2,$24(a0)
0000FE3A 0868 0000 0022             		bchg	#0,$22(a0)
0000FE40                            
0000FE40                            locret_F89E:
0000FE40 4E75                       		rts	
0000FE42                            ; ===========================================================================
0000FE42                            
0000FE42                            Obj50_Action:				; XREF: Obj50_Index
0000FE42 7000                       		moveq	#0,d0
0000FE44 1028 0025                  		move.b	$25(a0),d0
0000FE48 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FE4C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FE50 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FE56 6100 ADEA                  		bsr.w	AnimateSprite
0000FE5A 6000 FDF4                  		bra.w	MarkObjGone
0000FE5E                            ; ===========================================================================
0000FE5E 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FE60 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FE62                            ; ===========================================================================
0000FE62                            
0000FE62                            Obj50_Move:				; XREF: Obj50_Index2
0000FE62 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE66 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FE68 5428 0025                  		addq.b	#2,$25(a0)
0000FE6C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FE72 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE78 0868 0000 0022             		bchg	#0,$22(a0)
0000FE7E 6600                       		bne.s	locret_F8E2
0000FE80 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE84                            
0000FE84                            locret_F8E2:
0000FE84 4E75                       		rts	
0000FE86                            ; ===========================================================================
0000FE86                            
0000FE86                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FE86 6100 DCFA                  		bsr.w	SpeedToPos
0000FE8A 6100 0000                  		bsr.w	ObjHitFloor
0000FE8E 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE92 6D00                       		blt.s	Obj50_Pause
0000FE94 0C41 000C                  		cmpi.w	#$C,d1
0000FE98 6C00                       		bge.s	Obj50_Pause
0000FE9A D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FE9E 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FEA2 6600                       		bne.s	Obj50_Pause
0000FEA4 4E75                       		rts	
0000FEA6                            ; ===========================================================================
0000FEA6                            
0000FEA6                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FEA6 5528 0025                  		subq.b	#2,$25(a0)
0000FEAA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FEB0 317C 0000 0010             		move.w	#0,$10(a0)
0000FEB6 117C 0000 001C             		move.b	#0,$1C(a0)
0000FEBC 4E75                       		rts	
0000FEBE                            ; ===========================================================================
0000FEBE                            Ani_obj50:
0000FEBE                            	include "_anim\obj50.asm"
0000FEBE                            ; ---------------------------------------------------------------------------
0000FEBE                            ; Animation script - Yadrin enemy
0000FEBE                            ; ---------------------------------------------------------------------------
0000FEBE 0000                       		dc.w byte_F920-Ani_obj50
0000FEC0 0000                       		dc.w byte_F924-Ani_obj50
0000FEC2 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FEC6 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FED0                            		even
0000FED0                            		even
0000FED0                            
0000FED0                            ; ---------------------------------------------------------------------------
0000FED0                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FED0                            ; ---------------------------------------------------------------------------
0000FED0                            Map_obj50:
0000FED0                            	include "_maps\obj50.asm"
0000FED0                            ; ---------------------------------------------------------------------------
0000FED0                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FED0                            ; ---------------------------------------------------------------------------
0000FED0 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FED4 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FED8 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FEDC 05                         byte_F93A:	dc.b 5
0000FEDD F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FEE2 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FEE7 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEEC F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEF1 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEF6 05                         byte_F954:	dc.b 5
0000FEF7 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FEFC FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF01 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF06 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF0B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF10 05                         byte_F96E:	dc.b 5
0000FF11 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF16 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF1B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF20 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF25 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF2A 05                         byte_F988:	dc.b 5
0000FF2B F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF30 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF35 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF3A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF3F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF44 05                         byte_F9A2:	dc.b 5
0000FF45 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF4A FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF4F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF54 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF59 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF5E 05                         byte_F9BC:	dc.b 5
0000FF5F F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF64 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF69 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF6E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF73 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF78                            		even
0000FF78                            		even
0000FF78                            
0000FF78                            ; ---------------------------------------------------------------------------
0000FF78                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FF78                            ;
0000FF78                            ; variables:
0000FF78                            ; d1 = width
0000FF78                            ; d2 = height /	2 (when	jumping)
0000FF78                            ; d3 = height /	2 (when	walking)
0000FF78                            ; d4 = x-axis position
0000FF78                            ; ---------------------------------------------------------------------------
0000FF78                            
0000FF78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF78                            
0000FF78                            
0000FF78                            SolidObject:
0000FF78 4A28 0025                  		tst.b	$25(a0)
0000FF7C 6700 0000                  		beq.w	loc_FAC8
0000FF80 3401                       		move.w	d1,d2
0000FF82 D442                       		add.w	d2,d2
0000FF84 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF88 0829 0001 0022             		btst	#1,$22(a1)
0000FF8E 6600                       		bne.s	loc_F9FE
0000FF90 3029 0008                  		move.w	8(a1),d0
0000FF94 9068 0008                  		sub.w	8(a0),d0
0000FF98 D041                       		add.w	d1,d0
0000FF9A 6B00                       		bmi.s	loc_F9FE
0000FF9C B042                       		cmp.w	d2,d0
0000FF9E 6500                       		bcs.s	loc_FA12
0000FFA0                            
0000FFA0                            loc_F9FE:
0000FFA0 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFA6 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFAC 4228 0025                  		clr.b	$25(a0)
0000FFB0 7800                       		moveq	#0,d4
0000FFB2 4E75                       		rts	
0000FFB4                            ; ===========================================================================
0000FFB4                            
0000FFB4                            loc_FA12:
0000FFB4 3404                       		move.w	d4,d2
0000FFB6                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0000FFB6 7800                       		moveq	#0,d4
0000FFB8 4E75                       		rts	
0000FFBA                            ; ===========================================================================
0000FFBA                            
0000FFBA                            SolidObject71:				; XREF: Obj71_Solid
0000FFBA 4A28 0025                  		tst.b	$25(a0)
0000FFBE 6700 0000                  		beq.w	loc_FAD0
0000FFC2 3401                       		move.w	d1,d2
0000FFC4 D442                       		add.w	d2,d2
0000FFC6 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFCA 0829 0001 0022             		btst	#1,$22(a1)
0000FFD0 6600                       		bne.s	loc_FA44
0000FFD2 3029 0008                  		move.w	8(a1),d0
0000FFD6 9068 0008                  		sub.w	8(a0),d0
0000FFDA D041                       		add.w	d1,d0
0000FFDC 6B00                       		bmi.s	loc_FA44
0000FFDE B042                       		cmp.w	d2,d0
0000FFE0 6500                       		bcs.s	loc_FA58
0000FFE2                            
0000FFE2                            loc_FA44:
0000FFE2 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFE8 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFEE 4228 0025                  		clr.b	$25(a0)
0000FFF2 7800                       		moveq	#0,d4
0000FFF4 4E75                       		rts	
0000FFF6                            ; ===========================================================================
0000FFF6                            
0000FFF6                            loc_FA58:
0000FFF6 3404                       		move.w	d4,d2
0000FFF8                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0000FFF8 7800                       		moveq	#0,d4
0000FFFA 4E75                       		rts	
0000FFFC                            ; ===========================================================================
0000FFFC                            
0000FFFC                            SolidObject2F:				; XREF: Obj2F_Solid
0000FFFC 43F8 D000                  		lea	($FFFFD000).w,a1
00010000 4A28 0001                  		tst.b	1(a0)
00010004 6A00 0000                  		bpl.w	loc_FB92
00010008 3029 0008                  		move.w	8(a1),d0
0001000C 9068 0008                  		sub.w	8(a0),d0
00010010 D041                       		add.w	d1,d0
00010012 6B00 0000                  		bmi.w	loc_FB92
00010016 3601                       		move.w	d1,d3
00010018 D643                       		add.w	d3,d3
0001001A B043                       		cmp.w	d3,d0
0001001C 6200 0000                  		bhi.w	loc_FB92
00010020 3A00                       		move.w	d0,d5
00010022 0828 0000 0001             		btst	#0,1(a0)
00010028 6700                       		beq.s	loc_FA94
0001002A 4645                       		not.w	d5
0001002C DA43                       		add.w	d3,d5
0001002E                            
0001002E                            loc_FA94:
0001002E E24D                       		lsr.w	#1,d5
00010030 7600                       		moveq	#0,d3
00010032 1632 5000                  		move.b	(a2,d5.w),d3
00010036 9612                       		sub.b	(a2),d3
00010038 3A28 000C                  		move.w	$C(a0),d5
0001003C 9A43                       		sub.w	d3,d5
0001003E 1629 0016                  		move.b	$16(a1),d3
00010042 4883                       		ext.w	d3
00010044 D443                       		add.w	d3,d2
00010046 3629 000C                  		move.w	$C(a1),d3
0001004A 9645                       		sub.w	d5,d3
0001004C 5843                       		addq.w	#4,d3
0001004E D642                       		add.w	d2,d3
00010050 6B00 0000                  		bmi.w	loc_FB92
00010054 3802                       		move.w	d2,d4
00010056 D844                       		add.w	d4,d4
00010058 B644                       		cmp.w	d4,d3
0001005A 6400 0000                  		bcc.w	loc_FB92
0001005E 6000 0000                  		bra.w	loc_FB0E
00010062                            ; ===========================================================================
00010062                            
00010062                            loc_FAC8:
00010062 4A28 0001                  		tst.b	1(a0)
00010066 6A00 0000                  		bpl.w	loc_FB92
0001006A                            
0001006A                            loc_FAD0:
0001006A 43F8 D000                  		lea	($FFFFD000).w,a1
0001006E 3029 0008                  		move.w	8(a1),d0
00010072 9068 0008                  		sub.w	8(a0),d0
00010076 D041                       		add.w	d1,d0
00010078 6B00 0000                  		bmi.w	loc_FB92
0001007C 3601                       		move.w	d1,d3
0001007E D643                       		add.w	d3,d3
00010080 B043                       		cmp.w	d3,d0
00010082 6200 0000                  		bhi.w	loc_FB92
00010086 1629 0016                  		move.b	$16(a1),d3
0001008A 4883                       		ext.w	d3
0001008C D443                       		add.w	d3,d2
0001008E 3629 000C                  		move.w	$C(a1),d3
00010092 9668 000C                  		sub.w	$C(a0),d3
00010096 5843                       		addq.w	#4,d3
00010098 D642                       		add.w	d2,d3
0001009A 6B00 0000                  		bmi.w	loc_FB92
0001009E 3802                       		move.w	d2,d4
000100A0 D844                       		add.w	d4,d4
000100A2 B644                       		cmp.w	d4,d3
000100A4 6400 0000                  		bcc.w	loc_FB92
000100A8                            
000100A8                            loc_FB0E:
000100A8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000100AC 6B00 0000                  		bmi.w	loc_FB92
000100B0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000100B6 6400 0000                  		bcc.w	loc_FB92
000100BA 4A78 FE08                  		tst.w	($FFFFFE08).w
000100BE 6600 0000                  		bne.w	loc_FBAC
000100C2 3A00                       		move.w	d0,d5
000100C4 B240                       		cmp.w	d0,d1
000100C6 6400                       		bcc.s	loc_FB36
000100C8 D241                       		add.w	d1,d1
000100CA 9041                       		sub.w	d1,d0
000100CC 3A00                       		move.w	d0,d5
000100CE 4445                       		neg.w	d5
000100D0                            
000100D0                            loc_FB36:
000100D0 3203                       		move.w	d3,d1
000100D2 B443                       		cmp.w	d3,d2
000100D4 6400                       		bcc.s	loc_FB44
000100D6 5943                       		subq.w	#4,d3
000100D8 9644                       		sub.w	d4,d3
000100DA 3203                       		move.w	d3,d1
000100DC 4441                       		neg.w	d1
000100DE                            
000100DE                            loc_FB44:
000100DE BA41                       		cmp.w	d1,d5
000100E0 6200 0000                  		bhi.w	loc_FBB0
000100E4 0C41 0004                  		cmpi.w	#4,d1
000100E8 6300                       		bls.s	loc_FB8C
000100EA 4A40                       		tst.w	d0
000100EC 6700                       		beq.s	loc_FB70
000100EE 6B00                       		bmi.s	loc_FB5E
000100F0 4A69 0010                  		tst.w	$10(a1)
000100F4 6B00                       		bmi.s	loc_FB70
000100F6 6000                       		bra.s	loc_FB64
000100F8                            ; ===========================================================================
000100F8                            
000100F8                            loc_FB5E:
000100F8 4A69 0010                  		tst.w	$10(a1)
000100FC 6A00                       		bpl.s	loc_FB70
000100FE                            
000100FE                            loc_FB64:
000100FE 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010104 337C 0000 0010             		move.w	#0,$10(a1)
0001010A                            
0001010A                            loc_FB70:
0001010A 9169 0008                  		sub.w	d0,8(a1)
0001010E 0829 0001 0022             		btst	#1,$22(a1)
00010114 6600                       		bne.s	loc_FB8C
00010116 08E9 0005 0022             		bset	#5,$22(a1)
0001011C 08E8 0005 0022             		bset	#5,$22(a0)
00010122 7801                       		moveq	#1,d4
00010124 4E75                       		rts	
00010126                            ; ===========================================================================
00010126                            
00010126                            loc_FB8C:
00010126 6100                       		bsr.s	loc_FBA0
00010128 7801                       		moveq	#1,d4
0001012A 4E75                       		rts	
0001012C                            ; ===========================================================================
0001012C                            
0001012C                            loc_FB92:
0001012C 0828 0005 0022             		btst	#5,$22(a0)
00010132 6700                       		beq.s	loc_FBAC
00010134 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001013A                            
0001013A                            loc_FBA0:
0001013A 08A8 0005 0022             		bclr	#5,$22(a0)
00010140 08A9 0005 0022             		bclr	#5,$22(a1)
00010146                            
00010146                            loc_FBAC:
00010146 7800                       		moveq	#0,d4
00010148 4E75                       		rts	
0001014A                            ; ===========================================================================
0001014A                            
0001014A                            loc_FBB0:
0001014A 4A43                       		tst.w	d3
0001014C 6B00                       		bmi.s	loc_FBBC
0001014E 0C43 0010                  		cmpi.w	#$10,d3
00010152 6500                       		bcs.s	loc_FBEE
00010154 60D6                       		bra.s	loc_FB92
00010156                            ; ===========================================================================
00010156                            
00010156                            loc_FBBC:
00010156 4A69 0012                  		tst.w	$12(a1)
0001015A 6700                       		beq.s	loc_FBD6
0001015C 6A00                       		bpl.s	loc_FBD2
0001015E 4A43                       		tst.w	d3
00010160 6A00                       		bpl.s	loc_FBD2
00010162 9769 000C                  		sub.w	d3,$C(a1)
00010166 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001016C                            
0001016C                            loc_FBD2:
0001016C 78FF                       		moveq	#-1,d4
0001016E 4E75                       		rts	
00010170                            ; ===========================================================================
00010170                            
00010170                            loc_FBD6:
00010170 0829 0001 0022             		btst	#1,$22(a1)
00010176 66F4                       		bne.s	loc_FBD2
00010178 2F08                       		move.l	a0,-(sp)
0001017A 2049                       		movea.l	a1,a0
0001017C 4EB9 0000 0000             		jsr	KillSonic
00010182 205F                       		movea.l	(sp)+,a0
00010184 78FF                       		moveq	#-1,d4
00010186 4E75                       		rts	
00010188                            ; ===========================================================================
00010188                            
00010188                            loc_FBEE:
00010188 5943                       		subq.w	#4,d3
0001018A 7200                       		moveq	#0,d1
0001018C 1228 0019                  		move.b	$19(a0),d1
00010190 3401                       		move.w	d1,d2
00010192 D442                       		add.w	d2,d2
00010194 D269 0008                  		add.w	8(a1),d1
00010198 9268 0008                  		sub.w	8(a0),d1
0001019C 6B00                       		bmi.s	loc_FC28
0001019E B242                       		cmp.w	d2,d1
000101A0 6400                       		bcc.s	loc_FC28
000101A2 4A69 0012                  		tst.w	$12(a1)
000101A6 6B00                       		bmi.s	loc_FC28
000101A8 9769 000C                  		sub.w	d3,$C(a1)
000101AC 5369 000C                  		subq.w	#1,$C(a1)
000101B0 6100                       		bsr.s	sub_FC2C
000101B2 117C 0002 0025             		move.b	#2,$25(a0)
000101B8 08E8 0003 0022             		bset	#3,$22(a0)
000101BE 78FF                       		moveq	#-1,d4
000101C0 4E75                       		rts	
000101C2                            ; ===========================================================================
000101C2                            
000101C2                            loc_FC28:
000101C2 7800                       		moveq	#0,d4
000101C4 4E75                       		rts	
000101C6                            ; End of function SolidObject
000101C6                            
000101C6                            
000101C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101C6                            
000101C6                            
000101C6                            sub_FC2C:				; XREF: SolidObject
000101C6 0829 0003 0022             		btst	#3,$22(a1)
000101CC 6700                       		beq.s	loc_FC4E
000101CE 7000                       		moveq	#0,d0
000101D0 1029 003D                  		move.b	$3D(a1),d0
000101D4 ED48                       		lsl.w	#6,d0
000101D6 0680 00FF D000             		addi.l	#$FFD000,d0
000101DC 2440                       		movea.l	d0,a2
000101DE 08AA 0003 0022             		bclr	#3,$22(a2)
000101E4 422A 0025                  		clr.b	$25(a2)
000101E8                            
000101E8                            loc_FC4E:
000101E8 3008                       		move.w	a0,d0
000101EA 0440 D000                  		subi.w	#-$3000,d0
000101EE EC48                       		lsr.w	#6,d0
000101F0 0240 007F                  		andi.w	#$7F,d0
000101F4 1340 003D                  		move.b	d0,$3D(a1)
000101F8 137C 0000 0026             		move.b	#0,$26(a1)
000101FE 337C 0000 0012             		move.w	#0,$12(a1)
00010204 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001020A 0829 0001 0022             		btst	#1,$22(a1)
00010210 6700                       		beq.s	loc_FC84
00010212 2F08                       		move.l	a0,-(sp)
00010214 2049                       		movea.l	a1,a0
00010216 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001021C 205F                       		movea.l	(sp)+,a0
0001021E                            
0001021E                            loc_FC84:
0001021E 08E9 0003 0022             		bset	#3,$22(a1)
00010224 08E8 0003 0022             		bset	#3,$22(a0)
0001022A 4E75                       		rts	
0001022C                            ; End of function sub_FC2C
0001022C                            
0001022C                            ; ===========================================================================
0001022C                            ; ---------------------------------------------------------------------------
0001022C                            ; Object 51 - smashable	green block (MZ)
0001022C                            ; ---------------------------------------------------------------------------
0001022C                            
0001022C                            Obj51:					; XREF: Obj_Index
0001022C 7000                       		moveq	#0,d0
0001022E 1028 0024                  		move.b	$24(a0),d0
00010232 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010236 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001023A 6000 FA14                  		bra.w	MarkObjGone
0001023E                            ; ===========================================================================
0001023E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010240 0000                       		dc.w Obj51_Solid-Obj51_Index
00010242 0000                       		dc.w Obj51_Display-Obj51_Index
00010244                            ; ===========================================================================
00010244                            
00010244                            Obj51_Main:				; XREF: Obj51_Index
00010244 5428 0024                  		addq.b	#2,$24(a0)
00010248 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010250 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010256 117C 0004 0001             		move.b	#4,1(a0)
0001025C 117C 0010 0019             		move.b	#$10,$19(a0)
00010262 117C 0004 0018             		move.b	#4,$18(a0)
00010268 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001026E                            
0001026E                            Obj51_Solid:				; XREF: Obj51_Index
0001026E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010274 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001027A 323C 001B                  		move.w	#$1B,d1
0001027E 343C 0010                  		move.w	#$10,d2
00010282 363C 0011                  		move.w	#$11,d3
00010286 3828 0008                  		move.w	8(a0),d4
0001028A 6100 FCEC                  		bsr.w	SolidObject
0001028E 0828 0003 0022             		btst	#3,$22(a0)
00010294 6600                       		bne.s	Obj51_Smash
00010296                            
00010296                            locret_FCFC:
00010296 4E75                       		rts	
00010298                            ; ===========================================================================
00010298                            
00010298                            Obj51_Smash:				; XREF: Obj51_Solid
00010298 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001029E 66F6                       		bne.s	locret_FCFC	; if not, branch
000102A0 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000102A6 08E9 0002 0022             		bset	#2,$22(a1)
000102AC 137C 000E 0016             		move.b	#$E,$16(a1)
000102B2 137C 0007 0017             		move.b	#7,$17(a1)
000102B8 137C 0002 001C             		move.b	#2,$1C(a1)
000102BE 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000102C4 08E9 0001 0022             		bset	#1,$22(a1)
000102CA 08A9 0003 0022             		bclr	#3,$22(a1)
000102D0 137C 0002 0024             		move.b	#2,$24(a1)
000102D6 08A8 0003 0022             		bclr	#3,$22(a0)
000102DC 4228 0025                  		clr.b	$25(a0)
000102E0 117C 0001 001A             		move.b	#1,$1A(a0)
000102E6 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000102EC 7203                       		moveq	#3,d1		; set number of	fragments to 4
000102EE 343C 0038                  		move.w	#$38,d2
000102F2 6100 D4A2                  		bsr.w	SmashObject
000102F6 6100 DD36                  		bsr.w	SingleObjLoad
000102FA 6600                       		bne.s	Obj51_Display
000102FC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010300 3368 0008 0008             		move.w	8(a0),8(a1)
00010306 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001030C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010310 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010314 0C42 0006                  		cmpi.w	#6,d2
00010318 6500                       		bcs.s	Obj51_Bonus
0001031A 7406                       		moveq	#6,d2
0001031C                            
0001031C                            Obj51_Bonus:
0001031C 7000                       		moveq	#0,d0
0001031E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010322 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010328 6500                       		bcs.s	loc_FD98	; if not, branch
0001032A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001032E 740A                       		moveq	#10,d2
00010330                            
00010330                            loc_FD98:
00010330 4EB9 0000 0000             		jsr	AddPoints
00010336 E24A                       		lsr.w	#1,d2
00010338 1342 001A                  		move.b	d2,$1A(a1)
0001033C                            
0001033C                            Obj51_Display:				; XREF: Obj51_Index
0001033C 6100 D844                  		bsr.w	SpeedToPos
00010340 0668 0038 0012             		addi.w	#$38,$12(a0)
00010346 6100 D860                  		bsr.w	DisplaySprite
0001034A 4A28 0001                  		tst.b	1(a0)
0001034E 6A00 D894                  		bpl.w	DeleteObject
00010352 4E75                       		rts	
00010354                            ; ===========================================================================
00010354 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010358 FF00 FF00                  		dc.w $FF00, $FF00
0001035C 0200 FE00                  		dc.w $200, $FE00
00010360 0100 FF00                  		dc.w $100, $FF00
00010364                            
00010364 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001036C                            ; ---------------------------------------------------------------------------
0001036C                            ; Sprite mappings - smashable green block (MZ)
0001036C                            ; ---------------------------------------------------------------------------
0001036C                            Map_obj51:
0001036C                            	include "_maps\obj51.asm"
0001036C                            ; ---------------------------------------------------------------------------
0001036C                            ; Sprite mappings - smashable green block (MZ)
0001036C                            ; ---------------------------------------------------------------------------
0001036C 0000                       		dc.w byte_FDD8-Map_obj51
0001036E 0000                       		dc.w byte_FDE3-Map_obj51
00010370 02                         byte_FDD8:	dc.b 2
00010371 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010376 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001037B 04                         byte_FDE3:	dc.b 4
0001037C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010381 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010386 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001038B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010390                            		even
00010390                            		even
00010390                            
00010390                            ; ===========================================================================
00010390                            ; ---------------------------------------------------------------------------
00010390                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010390                            ; ---------------------------------------------------------------------------
00010390                            
00010390                            Obj52:					; XREF: Obj_Index
00010390 7000                       		moveq	#0,d0
00010392 1028 0024                  		move.b	$24(a0),d0
00010396 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001039A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001039E                            ; ===========================================================================
0001039E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000103A0 0000                       		dc.w Obj52_Platform-Obj52_Index
000103A2 0000                       		dc.w Obj52_StandOn-Obj52_Index
000103A4                            
000103A4 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000103A6 2001                       		dc.b $20, 1
000103A8 2002                       		dc.b $20, 2
000103AA 4003                       		dc.b $40, 3
000103AC 3004                       		dc.b $30, 4
000103AE                            ; ===========================================================================
000103AE                            
000103AE                            Obj52_Main:				; XREF: Obj52_Index
000103AE 5428 0024                  		addq.b	#2,$24(a0)
000103B2 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000103BA 317C 42B8 0002             		move.w	#$42B8,2(a0)
000103C0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000103C6 6600                       		bne.s	loc_FE44
000103C8 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000103D0 317C 43BC 0002             		move.w	#$43BC,2(a0)
000103D6 117C 0007 0016             		move.b	#7,$16(a0)
000103DC                            
000103DC                            loc_FE44:
000103DC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000103E2 6600                       		bne.s	loc_FE60
000103E4 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000103EA 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000103F0 6700                       		beq.s	loc_FE60	; if yes, branch
000103F2 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000103F8                            
000103F8                            loc_FE60:
000103F8 117C 0004 0001             		move.b	#4,1(a0)
000103FE 7000                       		moveq	#0,d0
00010400 1028 0028                  		move.b	$28(a0),d0
00010404 E648                       		lsr.w	#3,d0
00010406 0240 001E                  		andi.w	#$1E,d0
0001040A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001040E 115A 0019                  		move.b	(a2)+,$19(a0)
00010412 115A 001A                  		move.b	(a2)+,$1A(a0)
00010416 117C 0004 0018             		move.b	#4,$18(a0)
0001041C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010422 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010428 0228 000F 0028             		andi.b	#$F,$28(a0)
0001042E                            
0001042E                            Obj52_Platform:				; XREF: Obj52_Index
0001042E 6100 0000                  		bsr.w	Obj52_Move
00010432 7200                       		moveq	#0,d1
00010434 1228 0019                  		move.b	$19(a0),d1
00010438 4EB9 0000 789E             		jsr	(PlatformObject).l
0001043E 6000                       		bra.s	Obj52_ChkDel
00010440                            ; ===========================================================================
00010440                            
00010440                            Obj52_StandOn:				; XREF: Obj52_Index
00010440 7200                       		moveq	#0,d1
00010442 1228 0019                  		move.b	$19(a0),d1
00010446 4EB9 0000 7A12             		jsr	(ExitPlatform).l
0001044C 3F28 0008                  		move.w	8(a0),-(sp)
00010450 6100 0000                  		bsr.w	Obj52_Move
00010454 341F                       		move.w	(sp)+,d2
00010456 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
0001045C                            
0001045C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001045C 3028 0030                  		move.w	$30(a0),d0
00010460 0240 FF80                  		andi.w	#$FF80,d0
00010464 3238 F700                  		move.w	($FFFFF700).w,d1
00010468 0441 0080                  		subi.w	#$80,d1
0001046C 0241 FF80                  		andi.w	#$FF80,d1
00010470 9041                       		sub.w	d1,d0
00010472 0C40 0280                  		cmpi.w	#$280,d0
00010476 6200 D76C                  		bhi.w	DeleteObject
0001047A 6000 D72C                  		bra.w	DisplaySprite
0001047E                            ; ===========================================================================
0001047E                            
0001047E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001047E 7000                       		moveq	#0,d0
00010480 1028 0028                  		move.b	$28(a0),d0
00010484 0240 000F                  		andi.w	#$F,d0
00010488 D040                       		add.w	d0,d0
0001048A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001048E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010492                            ; ===========================================================================
00010492 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010496 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001049A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001049E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000104A2 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000104A6 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000104A8                            ; ===========================================================================
000104A8                            
000104A8                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000104A8 4E75                       		rts	
000104AA                            ; ===========================================================================
000104AA                            
000104AA                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000104AA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000104AE 323C 0060                  		move.w	#$60,d1
000104B2 0828 0000 0022             		btst	#0,$22(a0)
000104B8 6700                       		beq.s	loc_FF26
000104BA 4440                       		neg.w	d0
000104BC D041                       		add.w	d1,d0
000104BE                            
000104BE                            loc_FF26:
000104BE 3228 0030                  		move.w	$30(a0),d1
000104C2 9240                       		sub.w	d0,d1
000104C4 3141 0008                  		move.w	d1,8(a0)
000104C8 4E75                       		rts	
000104CA                            ; ===========================================================================
000104CA                            
000104CA                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000104CA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000104D0 6600                       		bne.s	Obj52_02_Wait
000104D2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000104D6                            
000104D6                            Obj52_02_Wait:
000104D6 4E75                       		rts	
000104D8                            ; ===========================================================================
000104D8                            
000104D8                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000104D8 7600                       		moveq	#0,d3
000104DA 1628 0019                  		move.b	$19(a0),d3
000104DE 6100 0000                  		bsr.w	ObjHitWallRight
000104E2 4A41                       		tst.w	d1		; has the platform hit a wall?
000104E4 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000104E6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104EA 3168 0008 0030             		move.w	8(a0),$30(a0)
000104F0 4E75                       		rts	
000104F2                            ; ===========================================================================
000104F2                            
000104F2                            Obj52_03_End:
000104F2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000104F6 4E75                       		rts	
000104F8                            ; ===========================================================================
000104F8                            
000104F8                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000104F8 7600                       		moveq	#0,d3
000104FA 1628 0019                  		move.b	$19(a0),d3
000104FE 6100 0000                  		bsr.w	ObjHitWallRight
00010502 4A41                       		tst.w	d1		; has the platform hit a wall?
00010504 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010506 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001050A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010510 4E75                       		rts	
00010512                            ; ===========================================================================
00010512                            
00010512                            Obj52_05_End:
00010512 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010516 4E75                       		rts	
00010518                            ; ===========================================================================
00010518                            
00010518                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010518 6100 D668                  		bsr.w	SpeedToPos
0001051C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010522 6100 0000                  		bsr.w	ObjHitFloor
00010526 4A41                       		tst.w	d1		; has platform hit the floor?
00010528 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001052C D368 000C                  		add.w	d1,$C(a0)
00010530 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010534 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010538                            
00010538                            locret_FFA0:
00010538 4E75                       		rts	
0001053A                            ; ===========================================================================
0001053A                            
0001053A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001053A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001053E 6700                       		beq.s	Obj52_07_ChkDel
00010540 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010544                            
00010544                            Obj52_07_ChkDel:
00010544 588F                       		addq.l	#4,sp
00010546 3028 0030                  		move.w	$30(a0),d0
0001054A 0240 FF80                  		andi.w	#$FF80,d0
0001054E 3238 F700                  		move.w	($FFFFF700).w,d1
00010552 0441 0080                  		subi.w	#$80,d1
00010556 0241 FF80                  		andi.w	#$FF80,d1
0001055A 9041                       		sub.w	d1,d0
0001055C 0C40 0280                  		cmpi.w	#$280,d0
00010560 6200 D682                  		bhi.w	DeleteObject
00010564 4E75                       		rts	
00010566                            ; ===========================================================================
00010566                            
00010566                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010566 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001056A 323C 0080                  		move.w	#$80,d1
0001056E 0828 0000 0022             		btst	#0,$22(a0)
00010574 6700                       		beq.s	loc_FFE2
00010576 4440                       		neg.w	d0
00010578 D041                       		add.w	d1,d0
0001057A                            
0001057A                            loc_FFE2:
0001057A 3228 0032                  		move.w	$32(a0),d1
0001057E 9240                       		sub.w	d0,d1
00010580 3141 000C                  		move.w	d1,$C(a0)
00010584 4E75                       		rts	
00010586                            ; ===========================================================================
00010586                            
00010586                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010586 7600                       		moveq	#0,d3
00010588 1628 0019                  		move.b	$19(a0),d3
0001058C D643                       		add.w	d3,d3
0001058E 7208                       		moveq	#8,d1
00010590 0828 0000 0022             		btst	#0,$22(a0)
00010596 6700                       		beq.s	loc_10004
00010598 4441                       		neg.w	d1
0001059A 4443                       		neg.w	d3
0001059C                            
0001059C                            loc_10004:
0001059C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000105A0 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000105A2 3028 0008                  		move.w	8(a0),d0
000105A6 9068 0030                  		sub.w	$30(a0),d0
000105AA B043                       		cmp.w	d3,d0
000105AC 6700                       		beq.s	Obj52_0A_Wait
000105AE D368 0008                  		add.w	d1,8(a0)	; move platform
000105B2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000105B8 4E75                       		rts	
000105BA                            ; ===========================================================================
000105BA                            
000105BA                            Obj52_0A_Wait:
000105BA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000105BE 6600                       		bne.s	locret_1002E	; if time remains, branch
000105C0 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000105C6                            
000105C6                            locret_1002E:
000105C6 4E75                       		rts	
000105C8                            ; ===========================================================================
000105C8                            
000105C8                            Obj52_0A_Back:
000105C8 3028 0008                  		move.w	8(a0),d0
000105CC 9068 0030                  		sub.w	$30(a0),d0
000105D0 6700                       		beq.s	Obj52_0A_Reset
000105D2 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000105D6 4E75                       		rts	
000105D8                            ; ===========================================================================
000105D8                            
000105D8                            Obj52_0A_Reset:
000105D8 4268 0036                  		clr.w	$36(a0)
000105DC 5328 0028                  		subq.b	#1,$28(a0)
000105E0 4E75                       		rts	
000105E2                            ; ===========================================================================
000105E2                            ; ---------------------------------------------------------------------------
000105E2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105E2                            ; ---------------------------------------------------------------------------
000105E2                            Map_obj52:
000105E2                            	include "_maps\obj52mz.asm"
000105E2                            ; ---------------------------------------------------------------------------
000105E2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105E2                            ; ---------------------------------------------------------------------------
000105E2 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000105E6 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000105EA 0000                       		dc.w byte_1008F-Map_obj52
000105EC 01                         byte_10054:	dc.b 1
000105ED F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105F2 02                         byte_1005A:	dc.b 2
000105F3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000105F8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000105FD 04                         byte_10065:	dc.b 4
000105FE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010603 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010608 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001060D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010612 04                         byte_1007A:	dc.b 4
00010613 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010618 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001061D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010622 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010627 03                         byte_1008F:	dc.b 3
00010628 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001062D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010632 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010638 00                         		even
00010638 00                         		even
00010638                            
00010638                            ; ---------------------------------------------------------------------------
00010638                            ; Sprite mappings - moving block (LZ)
00010638                            ; ---------------------------------------------------------------------------
00010638                            Map_obj52a:
00010638                            	include "_maps\obj52lz.asm"
00010638                            ; ---------------------------------------------------------------------------
00010638                            ; Sprite mappings - moving block (LZ)
00010638                            ; ---------------------------------------------------------------------------
00010638 0000                       		dc.w byte_100A2-Map_obj52a
0001063A 01                         byte_100A2:	dc.b 1
0001063B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010640                            		even
00010640                            		even
00010640                            
00010640                            ; ===========================================================================
00010640                            ; ---------------------------------------------------------------------------
00010640                            ; Object 55 - Basaran enemy (MZ)
00010640                            ; ---------------------------------------------------------------------------
00010640                            
00010640                            Obj55:					; XREF: Obj_Index
00010640 7000                       		moveq	#0,d0
00010642 1028 0024                  		move.b	$24(a0),d0
00010646 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001064A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001064E                            ; ===========================================================================
0001064E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010650 0000                       		dc.w Obj55_Action-Obj55_Index
00010652                            ; ===========================================================================
00010652                            
00010652                            Obj55_Main:				; XREF: Obj55_Index
00010652 5428 0024                  		addq.b	#2,$24(a0)
00010656 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001065E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010664 117C 0004 0001             		move.b	#4,1(a0)
0001066A 117C 000C 0016             		move.b	#$C,$16(a0)
00010670 117C 0002 0018             		move.b	#2,$18(a0)
00010676 117C 000B 0020             		move.b	#$B,$20(a0)
0001067C 117C 0010 0019             		move.b	#$10,$19(a0)
00010682                            
00010682                            Obj55_Action:				; XREF: Obj55_Index
00010682 7000                       		moveq	#0,d0
00010684 1028 0025                  		move.b	$25(a0),d0
00010688 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001068C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010690 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010696 6100 A5AA                  		bsr.w	AnimateSprite
0001069A 6000 F5B4                  		bra.w	MarkObjGone
0001069E                            ; ===========================================================================
0001069E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000106A0 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000106A2 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000106A4 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000106A6                            ; ===========================================================================
000106A6                            
000106A6                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000106A6 343C 0080                  		move.w	#$80,d2
000106AA 6100 0000                  		bsr.w	Obj55_ChkSonic
000106AE 6400                       		bcc.s	Obj55_NoDrop
000106B0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000106B4 3140 0036                  		move.w	d0,$36(a0)
000106B8 9068 000C                  		sub.w	$C(a0),d0
000106BC 6500                       		bcs.s	Obj55_NoDrop
000106BE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000106C2 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000106C4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000106C8 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000106CA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106CE D007                       		add.b	d7,d0
000106D0 0200 0007                  		andi.b	#7,d0
000106D4 6600                       		bne.s	Obj55_NoDrop
000106D6 117C 0001 001C             		move.b	#1,$1C(a0)
000106DC 5428 0025                  		addq.b	#2,$25(a0)
000106E0                            
000106E0                            Obj55_NoDrop:
000106E0 4E75                       		rts	
000106E2                            ; ===========================================================================
000106E2                            
000106E2                            Obj55_DropFly:				; XREF: Obj55_Index2
000106E2 6100 D49E                  		bsr.w	SpeedToPos
000106E6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000106EC 343C 0080                  		move.w	#$80,d2
000106F0 6100 0000                  		bsr.w	Obj55_ChkSonic
000106F4 3028 0036                  		move.w	$36(a0),d0
000106F8 9068 000C                  		sub.w	$C(a0),d0
000106FC 6500                       		bcs.s	Obj55_ChkDel
000106FE 0C40 0010                  		cmpi.w	#$10,d0
00010702 6400                       		bcc.s	locret_10180
00010704 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010708 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0001070E 117C 0002 001C             		move.b	#2,$1C(a0)
00010714 5428 0025                  		addq.b	#2,$25(a0)
00010718                            
00010718                            locret_10180:
00010718 4E75                       		rts	
0001071A                            ; ===========================================================================
0001071A                            
0001071A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001071A 4A28 0001                  		tst.b	1(a0)
0001071E 6A00 D4C4                  		bpl.w	DeleteObject
00010722 4E75                       		rts	
00010724                            ; ===========================================================================
00010724                            
00010724                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010724 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010728 0200 000F                  		andi.b	#$F,d0
0001072C 6600                       		bne.s	loc_101A0
0001072E 303C 00C0                  		move.w	#$C0,d0
00010732 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
00010738                            
00010738                            loc_101A0:
00010738 6100 D448                  		bsr.w	SpeedToPos
0001073C 3038 D008                  		move.w	($FFFFD008).w,d0
00010740 9068 0008                  		sub.w	8(a0),d0
00010744 6400                       		bcc.s	loc_101B0
00010746 4440                       		neg.w	d0
00010748                            
00010748                            loc_101B0:
00010748 0C40 0080                  		cmpi.w	#$80,d0
0001074C 6500                       		bcs.s	locret_101C6
0001074E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010752 D007                       		add.b	d7,d0
00010754 0200 0007                  		andi.b	#7,d0
00010758 6600                       		bne.s	locret_101C6
0001075A 5428 0025                  		addq.b	#2,$25(a0)
0001075E                            
0001075E                            locret_101C6:
0001075E 4E75                       		rts	
00010760                            ; ===========================================================================
00010760                            
00010760                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010760 6100 D420                  		bsr.w	SpeedToPos
00010764 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001076A 6100 0000                  		bsr.w	ObjHitCeiling
0001076E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010770 6A00                       		bpl.s	locret_101F4	; if not, branch
00010772 9368 000C                  		sub.w	d1,$C(a0)
00010776 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001077C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010780 4268 0012                  		clr.w	$12(a0)
00010784 4228 001C                  		clr.b	$1C(a0)
00010788 4228 0025                  		clr.b	$25(a0)
0001078C                            
0001078C                            locret_101F4:
0001078C 4E75                       		rts	
0001078E                            ; ===========================================================================
0001078E                            
0001078E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001078E 323C 0100                  		move.w	#$100,d1
00010792 08E8 0000 0022             		bset	#0,$22(a0)
00010798 3038 D008                  		move.w	($FFFFD008).w,d0
0001079C 9068 0008                  		sub.w	8(a0),d0
000107A0 6400                       		bcc.s	loc_10214
000107A2 4440                       		neg.w	d0
000107A4 4441                       		neg.w	d1
000107A6 08A8 0000 0022             		bclr	#0,$22(a0)
000107AC                            
000107AC                            loc_10214:
000107AC B042                       		cmp.w	d2,d0
000107AE 4E75                       		rts	
000107B0                            ; ===========================================================================
000107B0 6100 D3D0                  		bsr.w	SpeedToPos
000107B4 6100 D3F2                  		bsr.w	DisplaySprite
000107B8 4A28 0001                  		tst.b	1(a0)
000107BC 6A00 D426                  		bpl.w	DeleteObject
000107C0 4E75                       		rts	
000107C2                            ; ===========================================================================
000107C2                            Ani_obj55:
000107C2                            	include "_anim\obj55.asm"
000107C2                            ; ---------------------------------------------------------------------------
000107C2                            ; Animation script - Basaran enemy
000107C2                            ; ---------------------------------------------------------------------------
000107C2 0000                       		dc.w byte_10230-Ani_obj55
000107C4 0000                       		dc.w byte_10234-Ani_obj55
000107C6 0000                       		dc.w byte_10238-Ani_obj55
000107C8 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000107CC 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000107D0 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000107D6                            		even
000107D6                            		even
000107D6                            
000107D6                            ; ---------------------------------------------------------------------------
000107D6                            ; Sprite mappings - Basaran enemy (MZ)
000107D6                            ; ---------------------------------------------------------------------------
000107D6                            Map_obj55:
000107D6                            	include "_maps\obj55.asm"
000107D6                            ; ---------------------------------------------------------------------------
000107D6                            ; Sprite mappings - Basaran enemy (MZ)
000107D6                            ; ---------------------------------------------------------------------------
000107D6 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000107DA 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000107DE 01                         byte_10246:	dc.b 1
000107DF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000107E4 03                         byte_1024C:	dc.b 3
000107E5 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000107EA 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000107EF 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000107F4 04                         byte_1025C:	dc.b 4
000107F5 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000107FA 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000107FF 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010804 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010809 04                         byte_10271:	dc.b 4
0001080A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
0001080F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010814 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010819 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
0001081E                            		even
0001081E                            		even
0001081E                            
0001081E                            ; ===========================================================================
0001081E                            ; ---------------------------------------------------------------------------
0001081E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
0001081E                            ; ---------------------------------------------------------------------------
0001081E                            
0001081E                            Obj56:					; XREF: Obj_Index
0001081E 7000                       		moveq	#0,d0
00010820 1028 0024                  		move.b	$24(a0),d0
00010824 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010828 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
0001082C                            ; ===========================================================================
0001082C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001082E 0000                       		dc.w Obj56_Action-Obj56_Index
00010830                            
00010830 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010832 2020                       		dc.b  $20, $20
00010834 1020                       		dc.b  $10, $20
00010836 201A                       		dc.b  $20, $1A
00010838 1027                       		dc.b  $10, $27
0001083A 1010                       		dc.b  $10, $10
0001083C 0820                       		dc.b	8, $20
0001083E 4010                       		dc.b  $40, $10
00010840                            ; ===========================================================================
00010840                            
00010840                            Obj56_Main:				; XREF: Obj56_Index
00010840 5428 0024                  		addq.b	#2,$24(a0)
00010844 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
0001084C 317C 4000 0002             		move.w	#$4000,2(a0)
00010852 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010858 6600                       		bne.s	loc_102C8
0001085A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010860                            
00010860                            loc_102C8:
00010860 117C 0004 0001             		move.b	#4,1(a0)
00010866 117C 0003 0018             		move.b	#3,$18(a0)
0001086C 7000                       		moveq	#0,d0
0001086E 1028 0028                  		move.b	$28(a0),d0
00010872 E648                       		lsr.w	#3,d0
00010874 0240 000E                  		andi.w	#$E,d0
00010878 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001087C 115A 0019                  		move.b	(a2)+,$19(a0)
00010880 1152 0016                  		move.b	(a2),$16(a0)
00010884 E248                       		lsr.w	#1,d0
00010886 1140 001A                  		move.b	d0,$1A(a0)
0001088A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010890 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010896 7000                       		moveq	#0,d0
00010898 1012                       		move.b	(a2),d0
0001089A D040                       		add.w	d0,d0
0001089C 3140 003A                  		move.w	d0,$3A(a0)
000108A0 7000                       		moveq	#0,d0
000108A2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000108A8 6700                       		beq.s	loc_10332
000108AA 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000108AE 0240 000F                  		andi.w	#$F,d0
000108B2 5140                       		subq.w	#8,d0
000108B4 6500                       		bcs.s	loc_10332
000108B6 E548                       		lsl.w	#2,d0
000108B8 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000108BC 45F2 0000                  		lea	(a2,d0.w),a2
000108C0 4A52                       		tst.w	(a2)
000108C2 6A00                       		bpl.s	loc_10332
000108C4 0868 0000 0022             		bchg	#0,$22(a0)
000108CA                            
000108CA                            loc_10332:
000108CA 1028 0028                  		move.b	$28(a0),d0
000108CE 6A00                       		bpl.s	Obj56_Action
000108D0 0200 000F                  		andi.b	#$F,d0
000108D4 1140 003C                  		move.b	d0,$3C(a0)
000108D8 117C 0005 0028             		move.b	#5,$28(a0)
000108DE 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000108E4 6600                       		bne.s	Obj56_ChkGone
000108E6 117C 000C 0028             		move.b	#$C,$28(a0)
000108EC 317C 0080 003A             		move.w	#$80,$3A(a0)
000108F2                            
000108F2                            Obj56_ChkGone:
000108F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000108F6 7000                       		moveq	#0,d0
000108F8 1028 0023                  		move.b	$23(a0),d0
000108FC 6700                       		beq.s	Obj56_Action
000108FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010904 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001090A 6700                       		beq.s	Obj56_Action
0001090C 5228 0028                  		addq.b	#1,$28(a0)
00010910 4268 003A                  		clr.w	$3A(a0)
00010914                            
00010914                            Obj56_Action:				; XREF: Obj56_Index
00010914 3F28 0008                  		move.w	8(a0),-(sp)
00010918 7000                       		moveq	#0,d0
0001091A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001091E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010922 D040                       		add.w	d0,d0
00010924 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010928 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
0001092C 381F                       		move.w	(sp)+,d4
0001092E 4A28 0001                  		tst.b	1(a0)
00010932 6A00                       		bpl.s	Obj56_ChkDel
00010934 7200                       		moveq	#0,d1
00010936 1228 0019                  		move.b	$19(a0),d1
0001093A 0641 000B                  		addi.w	#$B,d1
0001093E 7400                       		moveq	#0,d2
00010940 1428 0016                  		move.b	$16(a0),d2
00010944 3602                       		move.w	d2,d3
00010946 5243                       		addq.w	#1,d3
00010948 6100 F62E                  		bsr.w	SolidObject
0001094C                            
0001094C                            Obj56_ChkDel:
0001094C 3028 0034                  		move.w	$34(a0),d0
00010950 0240 FF80                  		andi.w	#$FF80,d0
00010954 3238 F700                  		move.w	($FFFFF700).w,d1
00010958 0441 0080                  		subi.w	#$80,d1
0001095C 0241 FF80                  		andi.w	#$FF80,d1
00010960 9041                       		sub.w	d1,d0
00010962 0C40 0280                  		cmpi.w	#$280,d0
00010966 6200 D27C                  		bhi.w	DeleteObject
0001096A 6000 D23C                  		bra.w	DisplaySprite
0001096E                            ; ===========================================================================
0001096E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010972 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010976 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001097A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001097E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010982 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010986 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001098A                            ; ===========================================================================
0001098A                            
0001098A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001098A 4E75                       		rts	
0001098C                            ; ===========================================================================
0001098C                            
0001098C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001098C 323C 0040                  		move.w	#$40,d1
00010990 7000                       		moveq	#0,d0
00010992 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010996 6000                       		bra.s	Obj56_Move_LR
00010998                            ; ===========================================================================
00010998                            
00010998                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010998 323C 0080                  		move.w	#$80,d1
0001099C 7000                       		moveq	#0,d0
0001099E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109A2                            
000109A2                            Obj56_Move_LR:
000109A2 0828 0000 0022             		btst	#0,$22(a0)
000109A8 6700                       		beq.s	loc_10416
000109AA 4440                       		neg.w	d0
000109AC D041                       		add.w	d1,d0
000109AE                            
000109AE                            loc_10416:
000109AE 3228 0034                  		move.w	$34(a0),d1
000109B2 9240                       		sub.w	d0,d1
000109B4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000109B8 4E75                       		rts	
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000109BA 323C 0040                  		move.w	#$40,d1
000109BE 7000                       		moveq	#0,d0
000109C0 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109C4 6000                       		bra.s	Obj56_Move_UD
000109C6                            ; ===========================================================================
000109C6                            
000109C6                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000109C6 323C 0080                  		move.w	#$80,d1
000109CA 7000                       		moveq	#0,d0
000109CC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109D0                            
000109D0                            Obj56_Move_UD:
000109D0 0828 0000 0022             		btst	#0,$22(a0)
000109D6 6700                       		beq.s	loc_10444
000109D8 4440                       		neg.w	d0
000109DA D041                       		add.w	d1,d0
000109DC                            
000109DC                            loc_10444:
000109DC 3228 0030                  		move.w	$30(a0),d1
000109E0 9240                       		sub.w	d0,d1
000109E2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109E6 4E75                       		rts	
000109E8                            ; ===========================================================================
000109E8                            
000109E8                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000109E8 4A28 0038                  		tst.b	$38(a0)
000109EC 6600                       		bne.s	loc_104A4
000109EE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109F4 6600                       		bne.s	loc_1047A	; if not, branch
000109F6 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000109FC 6600                       		bne.s	loc_1047A
000109FE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A02 3038 D008                  		move.w	($FFFFD008).w,d0
00010A06 B068 0008                  		cmp.w	8(a0),d0
00010A0A 6400                       		bcc.s	loc_1047A
00010A0C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010A12                            
00010A12                            loc_1047A:
00010A12 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A16 7000                       		moveq	#0,d0
00010A18 1028 003C                  		move.b	$3C(a0),d0
00010A1C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010A22 6700                       		beq.s	loc_104AE
00010A24 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A2A 6600                       		bne.s	loc_1049E	; if not, branch
00010A2C 0C00 0003                  		cmpi.b	#3,d0
00010A30 6600                       		bne.s	loc_1049E
00010A32 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A36                            
00010A36                            loc_1049E:
00010A36 117C 0001 0038             		move.b	#1,$38(a0)
00010A3C                            
00010A3C                            loc_104A4:
00010A3C 4A68 003A                  		tst.w	$3A(a0)
00010A40 6700                       		beq.s	loc_104C8
00010A42 5568 003A                  		subq.w	#2,$3A(a0)
00010A46                            
00010A46                            loc_104AE:
00010A46 3028 003A                  		move.w	$3A(a0),d0
00010A4A 0828 0000 0022             		btst	#0,$22(a0)
00010A50 6700                       		beq.s	loc_104BC
00010A52 4440                       		neg.w	d0
00010A54                            
00010A54                            loc_104BC:
00010A54 3228 0030                  		move.w	$30(a0),d1
00010A58 D240                       		add.w	d0,d1
00010A5A 3141 000C                  		move.w	d1,$C(a0)
00010A5E 4E75                       		rts	
00010A60                            ; ===========================================================================
00010A60                            
00010A60                            loc_104C8:
00010A60 5228 0028                  		addq.b	#1,$28(a0)
00010A64 4228 0038                  		clr.b	$38(a0)
00010A68 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A6C 7000                       		moveq	#0,d0
00010A6E 1028 0023                  		move.b	$23(a0),d0
00010A72 67D2                       		beq.s	loc_104AE
00010A74 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A7A 60CA                       		bra.s	loc_104AE
00010A7C                            ; ===========================================================================
00010A7C                            
00010A7C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010A7C 4A28 0038                  		tst.b	$38(a0)
00010A80 6600                       		bne.s	loc_10500
00010A82 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A86 7000                       		moveq	#0,d0
00010A88 1028 003C                  		move.b	$3C(a0),d0
00010A8C 4A32 0000                  		tst.b	(a2,d0.w)
00010A90 6A00                       		bpl.s	loc_10512
00010A92 117C 0001 0038             		move.b	#1,$38(a0)
00010A98                            
00010A98                            loc_10500:
00010A98 7000                       		moveq	#0,d0
00010A9A 1028 0016                  		move.b	$16(a0),d0
00010A9E D040                       		add.w	d0,d0
00010AA0 B068 003A                  		cmp.w	$3A(a0),d0
00010AA4 6700                       		beq.s	loc_1052C
00010AA6 5468 003A                  		addq.w	#2,$3A(a0)
00010AAA                            
00010AAA                            loc_10512:
00010AAA 3028 003A                  		move.w	$3A(a0),d0
00010AAE 0828 0000 0022             		btst	#0,$22(a0)
00010AB4 6700                       		beq.s	loc_10520
00010AB6 4440                       		neg.w	d0
00010AB8                            
00010AB8                            loc_10520:
00010AB8 3228 0030                  		move.w	$30(a0),d1
00010ABC D240                       		add.w	d0,d1
00010ABE 3141 000C                  		move.w	d1,$C(a0)
00010AC2 4E75                       		rts	
00010AC4                            ; ===========================================================================
00010AC4                            
00010AC4                            loc_1052C:
00010AC4 5328 0028                  		subq.b	#1,$28(a0)
00010AC8 4228 0038                  		clr.b	$38(a0)
00010ACC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AD0 7000                       		moveq	#0,d0
00010AD2 1028 0023                  		move.b	$23(a0),d0
00010AD6 67D2                       		beq.s	loc_10512
00010AD8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010ADE 60CA                       		bra.s	loc_10512
00010AE0                            ; ===========================================================================
00010AE0                            
00010AE0                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010AE0 4A28 0038                  		tst.b	$38(a0)
00010AE4 6600                       		bne.s	loc_1055E
00010AE6 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010AEA 6700                       		beq.s	locret_10578
00010AEC 117C 0001 0038             		move.b	#1,$38(a0)
00010AF2 4268 003A                  		clr.w	$3A(a0)
00010AF6                            
00010AF6                            loc_1055E:
00010AF6 5268 0008                  		addq.w	#1,8(a0)
00010AFA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B00 5268 003A                  		addq.w	#1,$3A(a0)
00010B04 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010B0A 6600                       		bne.s	locret_10578
00010B0C 4228 0028                  		clr.b	$28(a0)
00010B10                            
00010B10                            locret_10578:
00010B10 4E75                       		rts	
00010B12                            ; ===========================================================================
00010B12                            
00010B12                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010B12 4A28 0038                  		tst.b	$38(a0)
00010B16 6600                       		bne.s	loc_10598
00010B18 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B1C 7000                       		moveq	#0,d0
00010B1E 1028 003C                  		move.b	$3C(a0),d0
00010B22 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B28 6700                       		beq.s	loc_105A2
00010B2A 117C 0001 0038             		move.b	#1,$38(a0)
00010B30                            
00010B30                            loc_10598:
00010B30 4A68 003A                  		tst.w	$3A(a0)
00010B34 6700                       		beq.s	loc_105C0
00010B36 5568 003A                  		subq.w	#2,$3A(a0)
00010B3A                            
00010B3A                            loc_105A2:
00010B3A 3028 003A                  		move.w	$3A(a0),d0
00010B3E 0828 0000 0022             		btst	#0,$22(a0)
00010B44 6700                       		beq.s	loc_105B4
00010B46 4440                       		neg.w	d0
00010B48 0640 0080                  		addi.w	#$80,d0
00010B4C                            
00010B4C                            loc_105B4:
00010B4C 3228 0034                  		move.w	$34(a0),d1
00010B50 D240                       		add.w	d0,d1
00010B52 3141 0008                  		move.w	d1,8(a0)
00010B56 4E75                       		rts	
00010B58                            ; ===========================================================================
00010B58                            
00010B58                            loc_105C0:
00010B58 5228 0028                  		addq.b	#1,$28(a0)
00010B5C 4228 0038                  		clr.b	$38(a0)
00010B60 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B64 7000                       		moveq	#0,d0
00010B66 1028 0023                  		move.b	$23(a0),d0
00010B6A 67CE                       		beq.s	loc_105A2
00010B6C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B72 60C6                       		bra.s	loc_105A2
00010B74                            ; ===========================================================================
00010B74                            
00010B74                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010B74 4A28 0038                  		tst.b	$38(a0)
00010B78 6600                       		bne.s	loc_105F8
00010B7A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B7E 7000                       		moveq	#0,d0
00010B80 1028 003C                  		move.b	$3C(a0),d0
00010B84 4A32 0000                  		tst.b	(a2,d0.w)
00010B88 6A00                       		bpl.s	loc_10606
00010B8A 117C 0001 0038             		move.b	#1,$38(a0)
00010B90                            
00010B90                            loc_105F8:
00010B90 303C 0080                  		move.w	#$80,d0
00010B94 B068 003A                  		cmp.w	$3A(a0),d0
00010B98 6700                       		beq.s	loc_10624
00010B9A 5468 003A                  		addq.w	#2,$3A(a0)
00010B9E                            
00010B9E                            loc_10606:
00010B9E 3028 003A                  		move.w	$3A(a0),d0
00010BA2 0828 0000 0022             		btst	#0,$22(a0)
00010BA8 6700                       		beq.s	loc_10618
00010BAA 4440                       		neg.w	d0
00010BAC 0640 0080                  		addi.w	#$80,d0
00010BB0                            
00010BB0                            loc_10618:
00010BB0 3228 0034                  		move.w	$34(a0),d1
00010BB4 D240                       		add.w	d0,d1
00010BB6 3141 0008                  		move.w	d1,8(a0)
00010BBA 4E75                       		rts	
00010BBC                            ; ===========================================================================
00010BBC                            
00010BBC                            loc_10624:
00010BBC 5328 0028                  		subq.b	#1,$28(a0)
00010BC0 4228 0038                  		clr.b	$38(a0)
00010BC4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BC8 7000                       		moveq	#0,d0
00010BCA 1028 0023                  		move.b	$23(a0),d0
00010BCE 67CE                       		beq.s	loc_10606
00010BD0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010BD6 60C6                       		bra.s	loc_10606
00010BD8                            ; ===========================================================================
00010BD8                            
00010BD8                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010BD8 323C 0010                  		move.w	#$10,d1
00010BDC 7000                       		moveq	#0,d0
00010BDE 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010BE2 E248                       		lsr.w	#1,d0
00010BE4 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010BE8 6000                       		bra.s	Obj56_Move_Sqr
00010BEA                            ; ===========================================================================
00010BEA                            
00010BEA                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010BEA 323C 0030                  		move.w	#$30,d1
00010BEE 7000                       		moveq	#0,d0
00010BF0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010BF4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010BF8 6000                       		bra.s	Obj56_Move_Sqr
00010BFA                            ; ===========================================================================
00010BFA                            
00010BFA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010BFA 323C 0050                  		move.w	#$50,d1
00010BFE 7000                       		moveq	#0,d0
00010C00 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010C04 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010C08 6000                       		bra.s	Obj56_Move_Sqr
00010C0A                            ; ===========================================================================
00010C0A                            
00010C0A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010C0A 323C 0070                  		move.w	#$70,d1
00010C0E 7000                       		moveq	#0,d0
00010C10 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010C14 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010C18                            
00010C18                            Obj56_Move_Sqr:
00010C18 4A43                       		tst.w	d3
00010C1A 6600                       		bne.s	loc_1068E
00010C1C 5228 0022                  		addq.b	#1,$22(a0)
00010C20 0228 0003 0022             		andi.b	#3,$22(a0)
00010C26                            
00010C26                            loc_1068E:
00010C26 1428 0022                  		move.b	$22(a0),d2
00010C2A 0202 0003                  		andi.b	#3,d2
00010C2E 6600                       		bne.s	loc_106AE
00010C30 9041                       		sub.w	d1,d0
00010C32 D068 0034                  		add.w	$34(a0),d0
00010C36 3140 0008                  		move.w	d0,8(a0)
00010C3A 4441                       		neg.w	d1
00010C3C D268 0030                  		add.w	$30(a0),d1
00010C40 3141 000C                  		move.w	d1,$C(a0)
00010C44 4E75                       		rts	
00010C46                            ; ===========================================================================
00010C46                            
00010C46                            loc_106AE:
00010C46 5302                       		subq.b	#1,d2
00010C48 6600                       		bne.s	loc_106CC
00010C4A 5341                       		subq.w	#1,d1
00010C4C 9041                       		sub.w	d1,d0
00010C4E 4440                       		neg.w	d0
00010C50 D068 0030                  		add.w	$30(a0),d0
00010C54 3140 000C                  		move.w	d0,$C(a0)
00010C58 5241                       		addq.w	#1,d1
00010C5A D268 0034                  		add.w	$34(a0),d1
00010C5E 3141 0008                  		move.w	d1,8(a0)
00010C62 4E75                       		rts	
00010C64                            ; ===========================================================================
00010C64                            
00010C64                            loc_106CC:
00010C64 5302                       		subq.b	#1,d2
00010C66 6600                       		bne.s	loc_106EA
00010C68 5341                       		subq.w	#1,d1
00010C6A 9041                       		sub.w	d1,d0
00010C6C 4440                       		neg.w	d0
00010C6E D068 0034                  		add.w	$34(a0),d0
00010C72 3140 0008                  		move.w	d0,8(a0)
00010C76 5241                       		addq.w	#1,d1
00010C78 D268 0030                  		add.w	$30(a0),d1
00010C7C 3141 000C                  		move.w	d1,$C(a0)
00010C80 4E75                       		rts	
00010C82                            ; ===========================================================================
00010C82                            
00010C82                            loc_106EA:
00010C82 9041                       		sub.w	d1,d0
00010C84 D068 0030                  		add.w	$30(a0),d0
00010C88 3140 000C                  		move.w	d0,$C(a0)
00010C8C 4441                       		neg.w	d1
00010C8E D268 0034                  		add.w	$34(a0),d1
00010C92 3141 0008                  		move.w	d1,8(a0)
00010C96 4E75                       		rts	
00010C98                            ; ===========================================================================
00010C98                            ; ---------------------------------------------------------------------------
00010C98                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C98                            ; ---------------------------------------------------------------------------
00010C98                            Map_obj56:
00010C98                            	include "_maps\obj56.asm"
00010C98                            ; ---------------------------------------------------------------------------
00010C98                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C98                            ; ---------------------------------------------------------------------------
00010C98 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010C9C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010CA0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010CA4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010CA8 01                         byte_10710:	dc.b 1
00010CA9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010CAE 04                         byte_10716:	dc.b 4
00010CAF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010CB4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010CB9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010CBE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010CC3 02                         byte_1072B:	dc.b 2
00010CC4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010CC9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010CCE 04                         byte_10736:	dc.b 4
00010CCF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010CD4 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010CD9 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010CDE 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010CE3 03                         byte_1074B:	dc.b 3
00010CE4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010CE9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010CEE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010CF3 01                         byte_1075B:	dc.b 1
00010CF4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010CF9 02                         byte_10761:	dc.b 2
00010CFA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010CFF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010D04 04                         byte_1076C:	dc.b 4
00010D05 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010D0A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010D0F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010D14 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010D1A 00                         		even
00010D1A 00                         		even
00010D1A                            
00010D1A                            ; ===========================================================================
00010D1A                            ; ---------------------------------------------------------------------------
00010D1A                            ; Object 57 - spiked balls (SYZ, LZ)
00010D1A                            ; ---------------------------------------------------------------------------
00010D1A                            
00010D1A                            Obj57:					; XREF: Obj_Index
00010D1A 7000                       		moveq	#0,d0
00010D1C 1028 0024                  		move.b	$24(a0),d0
00010D20 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010D24 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010D28                            ; ===========================================================================
00010D28 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010D2A 0000                       		dc.w Obj57_Move-Obj57_Index
00010D2C 0000                       		dc.w Obj57_Display-Obj57_Index
00010D2E                            ; ===========================================================================
00010D2E                            
00010D2E                            Obj57_Main:				; XREF: Obj57_Index
00010D2E 5428 0024                  		addq.b	#2,$24(a0)
00010D32 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D3A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D40 117C 0004 0001             		move.b	#4,1(a0)
00010D46 117C 0004 0018             		move.b	#4,$18(a0)
00010D4C 117C 0008 0019             		move.b	#8,$19(a0)
00010D52 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010D58 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010D5E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010D64 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D6A 6600                       		bne.s	loc_107E8
00010D6C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010D72 317C 0310 0002             		move.w	#$310,2(a0)
00010D78 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010D80                            
00010D80                            loc_107E8:
00010D80 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D84 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010D88 4881                       		ext.w	d1
00010D8A E741                       		asl.w	#3,d1		; multiply by 8
00010D8C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010D90 1028 0022                  		move.b	$22(a0),d0
00010D94 E418                       		ror.b	#2,d0
00010D96 0200 00C0                  		andi.b	#-$40,d0
00010D9A 1140 0026                  		move.b	d0,$26(a0)
00010D9E 45E8 0029                  		lea	$29(a0),a2
00010DA2 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DA6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010DAA 14FC 0000                  		move.b	#0,(a2)+
00010DAE 3601                       		move.w	d1,d3
00010DB0 E94B                       		lsl.w	#4,d3
00010DB2 1143 003C                  		move.b	d3,$3C(a0)
00010DB6 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010DB8 6500                       		bcs.s	loc_10894
00010DBA 0828 0003 0028             		btst	#3,$28(a0)
00010DC0 6700                       		beq.s	Obj57_MakeChain
00010DC2 5341                       		subq.w	#1,d1
00010DC4 6500                       		bcs.s	loc_10894
00010DC6                            
00010DC6                            Obj57_MakeChain:
00010DC6 6100 D266                  		bsr.w	SingleObjLoad
00010DCA 6600                       		bne.s	loc_10894
00010DCC 5228 0029                  		addq.b	#1,$29(a0)
00010DD0 3A09                       		move.w	a1,d5
00010DD2 0445 D000                  		subi.w	#-$3000,d5
00010DD6 EC4D                       		lsr.w	#6,d5
00010DD8 0245 007F                  		andi.w	#$7F,d5
00010DDC 14C5                       		move.b	d5,(a2)+
00010DDE 137C 0004 0024             		move.b	#4,$24(a1)
00010DE4 1290                       		move.b	0(a0),0(a1)
00010DE6 2368 0004 0004             		move.l	4(a0),4(a1)
00010DEC 3368 0002 0002             		move.w	2(a0),2(a1)
00010DF2 1368 0001 0001             		move.b	1(a0),1(a1)
00010DF8 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010DFE 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010E04 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010E0A 0403 0010                  		subi.b	#$10,d3
00010E0E 1343 003C                  		move.b	d3,$3C(a1)
00010E12 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010E18 6600                       		bne.s	loc_10890
00010E1A 4A03                       		tst.b	d3
00010E1C 6600                       		bne.s	loc_10890
00010E1E 137C 0002 001A             		move.b	#2,$1A(a1)
00010E24                            
00010E24                            loc_10890:
00010E24 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010E28                            
00010E28                            loc_10894:
00010E28 3A08                       		move.w	a0,d5
00010E2A 0445 D000                  		subi.w	#-$3000,d5
00010E2E EC4D                       		lsr.w	#6,d5
00010E30 0245 007F                  		andi.w	#$7F,d5
00010E34 14C5                       		move.b	d5,(a2)+
00010E36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E3C 6600                       		bne.s	Obj57_Move
00010E3E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E44 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010E4A                            
00010E4A                            Obj57_Move:				; XREF: Obj57_Index
00010E4A 6100 0000                  		bsr.w	Obj57_MoveSub
00010E4E 6000 0000                  		bra.w	Obj57_ChkDel
00010E52                            ; ===========================================================================
00010E52                            
00010E52                            Obj57_MoveSub:				; XREF: Obj57_Move
00010E52 3028 003E                  		move.w	$3E(a0),d0
00010E56 D168 0026                  		add.w	d0,$26(a0)
00010E5A 1028 0026                  		move.b	$26(a0),d0
00010E5E 4EB9 0000 2C22             		jsr	(CalcSine).l
00010E64 3428 0038                  		move.w	$38(a0),d2
00010E68 3628 003A                  		move.w	$3A(a0),d3
00010E6C 45E8 0029                  		lea	$29(a0),a2
00010E70 7C00                       		moveq	#0,d6
00010E72 1C1A                       		move.b	(a2)+,d6
00010E74                            
00010E74                            Obj57_MoveLoop:
00010E74 7800                       		moveq	#0,d4
00010E76 181A                       		move.b	(a2)+,d4
00010E78 ED4C                       		lsl.w	#6,d4
00010E7A 0684 00FF D000             		addi.l	#$FFD000,d4
00010E80 2244                       		movea.l	d4,a1
00010E82 7800                       		moveq	#0,d4
00010E84 1829 003C                  		move.b	$3C(a1),d4
00010E88 2A04                       		move.l	d4,d5
00010E8A C9C0                       		muls.w	d0,d4
00010E8C E084                       		asr.l	#8,d4
00010E8E CBC1                       		muls.w	d1,d5
00010E90 E085                       		asr.l	#8,d5
00010E92 D842                       		add.w	d2,d4
00010E94 DA43                       		add.w	d3,d5
00010E96 3344 000C                  		move.w	d4,$C(a1)
00010E9A 3345 0008                  		move.w	d5,8(a1)
00010E9E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010EA2 4E75                       		rts	
00010EA4                            ; ===========================================================================
00010EA4                            
00010EA4                            Obj57_ChkDel:				; XREF: Obj57_Move
00010EA4 3028 003A                  		move.w	$3A(a0),d0
00010EA8 0240 FF80                  		andi.w	#$FF80,d0
00010EAC 3238 F700                  		move.w	($FFFFF700).w,d1
00010EB0 0441 0080                  		subi.w	#$80,d1
00010EB4 0241 FF80                  		andi.w	#$FF80,d1
00010EB8 9041                       		sub.w	d1,d0
00010EBA 0C40 0280                  		cmpi.w	#$280,d0
00010EBE 6200 0000                  		bhi.w	Obj57_Delete
00010EC2 6000 CCE4                  		bra.w	DisplaySprite
00010EC6                            ; ===========================================================================
00010EC6                            
00010EC6                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010EC6 7400                       		moveq	#0,d2
00010EC8 45E8 0029                  		lea	$29(a0),a2
00010ECC 141A                       		move.b	(a2)+,d2
00010ECE                            
00010ECE                            Obj57_DelLoop:
00010ECE 7000                       		moveq	#0,d0
00010ED0 101A                       		move.b	(a2)+,d0
00010ED2 ED48                       		lsl.w	#6,d0
00010ED4 0680 00FF D000             		addi.l	#$FFD000,d0
00010EDA 2240                       		movea.l	d0,a1
00010EDC 6100 CD08                  		bsr.w	DeleteObject2
00010EE0 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010EE4                            
00010EE4 4E75                       		rts	
00010EE6                            ; ===========================================================================
00010EE6                            
00010EE6                            Obj57_Display:				; XREF: Obj57_Index
00010EE6 6000 CCC0                  		bra.w	DisplaySprite
00010EEA                            ; ===========================================================================
00010EEA                            ; ---------------------------------------------------------------------------
00010EEA                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EEA                            ; ---------------------------------------------------------------------------
00010EEA                            Map_obj57:
00010EEA                            	include "_maps\obj57syz.asm"
00010EEA                            ; ---------------------------------------------------------------------------
00010EEA                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EEA                            ; ---------------------------------------------------------------------------
00010EEA 0000                       		dc.w byte_10958-Map_obj57
00010EEC 01                         byte_10958:	dc.b 1
00010EED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EF2                            		even
00010EF2                            		even
00010EF2                            
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            Map_obj57a:
00010EF2                            	include "_maps\obj57lz.asm"
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2 0000                       		dc.w byte_10964-Map_obj57a
00010EF4 0000                       		dc.w byte_1096A-Map_obj57a
00010EF6 0000                       		dc.w byte_10970-Map_obj57a
00010EF8 01                         byte_10964:	dc.b 1
00010EF9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EFE 01                         byte_1096A:	dc.b 1
00010EFF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010F04 01                         byte_10970:	dc.b 1
00010F05 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010F0A                            		even
00010F0A                            		even
00010F0A                            
00010F0A                            ; ===========================================================================
00010F0A                            ; ---------------------------------------------------------------------------
00010F0A                            ; Object 58 - giant spiked balls (SYZ)
00010F0A                            ; ---------------------------------------------------------------------------
00010F0A                            
00010F0A                            Obj58:					; XREF: Obj_Index
00010F0A 7000                       		moveq	#0,d0
00010F0C 1028 0024                  		move.b	$24(a0),d0
00010F10 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010F14 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010F18                            ; ===========================================================================
00010F18 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010F1A 0000                       		dc.w Obj58_Move-Obj58_Index
00010F1C                            ; ===========================================================================
00010F1C                            
00010F1C                            Obj58_Main:				; XREF: Obj58_Index
00010F1C 5428 0024                  		addq.b	#2,$24(a0)
00010F20 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010F28 317C 0396 0002             		move.w	#$396,2(a0)
00010F2E 117C 0004 0001             		move.b	#4,1(a0)
00010F34 117C 0004 0018             		move.b	#4,$18(a0)
00010F3A 117C 0018 0019             		move.b	#$18,$19(a0)
00010F40 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F46 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F4C 117C 0086 0020             		move.b	#$86,$20(a0)
00010F52 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F56 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F5A 4881                       		ext.w	d1
00010F5C E741                       		asl.w	#3,d1		; multiply by 8
00010F5E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010F62 1028 0022                  		move.b	$22(a0),d0
00010F66 E418                       		ror.b	#2,d0
00010F68 0200 00C0                  		andi.b	#$C0,d0
00010F6C 1140 0026                  		move.b	d0,$26(a0)
00010F70 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010F76                            
00010F76                            Obj58_Move:				; XREF: Obj58_Index
00010F76 7000                       		moveq	#0,d0
00010F78 1028 0028                  		move.b	$28(a0),d0	; get object type
00010F7C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010F80 D040                       		add.w	d0,d0
00010F82 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010F86 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010F8A 3028 003A                  		move.w	$3A(a0),d0
00010F8E 0240 FF80                  		andi.w	#$FF80,d0
00010F92 3238 F700                  		move.w	($FFFFF700).w,d1
00010F96 0441 0080                  		subi.w	#$80,d1
00010F9A 0241 FF80                  		andi.w	#$FF80,d1
00010F9E 9041                       		sub.w	d1,d0
00010FA0 0C40 0280                  		cmpi.w	#$280,d0
00010FA4 6200 CC3E                  		bhi.w	DeleteObject
00010FA8 6000 CBFE                  		bra.w	DisplaySprite
00010FAC                            ; ===========================================================================
00010FAC 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010FAE 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010FB0 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010FB2 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010FB4                            ; ===========================================================================
00010FB4                            
00010FB4                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010FB4 4E75                       		rts	
00010FB6                            ; ===========================================================================
00010FB6                            
00010FB6                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010FB6 323C 0060                  		move.w	#$60,d1
00010FBA 7000                       		moveq	#0,d0
00010FBC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FC0 0828 0000 0022             		btst	#0,$22(a0)
00010FC6 6700                       		beq.s	loc_10A38
00010FC8 4440                       		neg.w	d0
00010FCA D041                       		add.w	d1,d0
00010FCC                            
00010FCC                            loc_10A38:
00010FCC 3228 003A                  		move.w	$3A(a0),d1
00010FD0 9240                       		sub.w	d0,d1
00010FD2 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010FD6 4E75                       		rts	
00010FD8                            ; ===========================================================================
00010FD8                            
00010FD8                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010FD8 323C 0060                  		move.w	#$60,d1
00010FDC 7000                       		moveq	#0,d0
00010FDE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FE2 0828 0000 0022             		btst	#0,$22(a0)
00010FE8 6700                       		beq.s	loc_10A5C
00010FEA 4440                       		neg.w	d0
00010FEC 0640 0080                  		addi.w	#$80,d0
00010FF0                            
00010FF0                            loc_10A5C:
00010FF0 3228 0038                  		move.w	$38(a0),d1
00010FF4 9240                       		sub.w	d0,d1
00010FF6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010FFA 4E75                       		rts	
00010FFC                            ; ===========================================================================
00010FFC                            
00010FFC                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010FFC 3028 003E                  		move.w	$3E(a0),d0
00011000 D168 0026                  		add.w	d0,$26(a0)
00011004 1028 0026                  		move.b	$26(a0),d0
00011008 4EB9 0000 2C22             		jsr	(CalcSine).l
0001100E 3428 0038                  		move.w	$38(a0),d2
00011012 3628 003A                  		move.w	$3A(a0),d3
00011016 7800                       		moveq	#0,d4
00011018 1828 003C                  		move.b	$3C(a0),d4
0001101C 2A04                       		move.l	d4,d5
0001101E C9C0                       		muls.w	d0,d4
00011020 E084                       		asr.l	#8,d4
00011022 CBC1                       		muls.w	d1,d5
00011024 E085                       		asr.l	#8,d5
00011026 D842                       		add.w	d2,d4
00011028 DA43                       		add.w	d3,d5
0001102A 3144 000C                  		move.w	d4,$C(a0)
0001102E 3145 0008                  		move.w	d5,8(a0)
00011032 4E75                       		rts	
00011034                            ; ===========================================================================
00011034                            ; ---------------------------------------------------------------------------
00011034                            ; Sprite mappings - SBZ	spiked ball on a chain
00011034                            ; ---------------------------------------------------------------------------
00011034                            Map_obj15b:
00011034                            	include "_maps\obj15sbz.asm"
00011034                            ; ---------------------------------------------------------------------------
00011034                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011034                            ; ---------------------------------------------------------------------------
00011034 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011038 0000                       		dc.w byte_10AC6-Map_obj15b
0001103A 05                         byte_10AA6:	dc.b 5
0001103B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011040 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011045 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001104A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001104F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011054 01                         byte_10AC0:	dc.b 1
00011055 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001105A 02                         byte_10AC6:	dc.b 2
0001105B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011060 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011066 00                         		even
00011066 00                         		even
00011066                            
00011066                            ; ===========================================================================
00011066                            ; ---------------------------------------------------------------------------
00011066                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011066                            ; ---------------------------------------------------------------------------
00011066                            
00011066                            Obj59:					; XREF: Obj_Index
00011066 7000                       		moveq	#0,d0
00011068 1028 0024                  		move.b	$24(a0),d0
0001106C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011070 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011074 3028 0032                  		move.w	$32(a0),d0
00011078 0240 FF80                  		andi.w	#$FF80,d0
0001107C 3238 F700                  		move.w	($FFFFF700).w,d1
00011080 0441 0080                  		subi.w	#$80,d1
00011084 0241 FF80                  		andi.w	#$FF80,d1
00011088 9041                       		sub.w	d1,d0
0001108A 0C40 0280                  		cmpi.w	#$280,d0
0001108E 6200 CB54                  		bhi.w	DeleteObject
00011092 6000 CB14                  		bra.w	DisplaySprite
00011096                            ; ===========================================================================
00011096 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011098 0000                       		dc.w Obj59_Platform-Obj59_Index
0001109A 0000                       		dc.w Obj59_Action-Obj59_Index
0001109C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001109E                            
0001109E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000110A0                            
000110A0 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000110A2 2001                       		dc.b $20, 1
000110A4 3401                       		dc.b $34, 1
000110A6 1003                       		dc.b $10, 3
000110A8 2003                       		dc.b $20, 3
000110AA 3403                       		dc.b $34, 3
000110AC 1401                       		dc.b $14, 1
000110AE 2401                       		dc.b $24, 1
000110B0 2C01                       		dc.b $2C, 1
000110B2 1403                       		dc.b $14, 3
000110B4 2403                       		dc.b $24, 3
000110B6 2C03                       		dc.b $2C, 3
000110B8 2005                       		dc.b $20, 5
000110BA 2007                       		dc.b $20, 7
000110BC 3009                       		dc.b $30, 9
000110BE                            ; ===========================================================================
000110BE                            
000110BE                            Obj59_Main:				; XREF: Obj59_Index
000110BE 5428 0024                  		addq.b	#2,$24(a0)
000110C2 7000                       		moveq	#0,d0
000110C4 1028 0028                  		move.b	$28(a0),d0
000110C8 6A00                       		bpl.s	Obj59_Main2
000110CA 5828 0024                  		addq.b	#4,$24(a0)
000110CE 0240 007F                  		andi.w	#$7F,d0
000110D2 C0FC 0006                  		mulu.w	#6,d0
000110D6 3140 003C                  		move.w	d0,$3C(a0)
000110DA 3140 003E                  		move.w	d0,$3E(a0)
000110DE 588F                       		addq.l	#4,sp
000110E0 4E75                       		rts	
000110E2                            ; ===========================================================================
000110E2                            
000110E2                            Obj59_Main2:
000110E2 E648                       		lsr.w	#3,d0
000110E4 0240 001E                  		andi.w	#$1E,d0
000110E8 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000110EC 115A 0019                  		move.b	(a2)+,$19(a0)
000110F0 115A 001A                  		move.b	(a2)+,$1A(a0)
000110F4 7000                       		moveq	#0,d0
000110F6 1028 0028                  		move.b	$28(a0),d0
000110FA D040                       		add.w	d0,d0
000110FC 0240 001E                  		andi.w	#$1E,d0
00011100 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011104 101A                       		move.b	(a2)+,d0
00011106 E548                       		lsl.w	#2,d0
00011108 3140 003C                  		move.w	d0,$3C(a0)
0001110C 115A 0028                  		move.b	(a2)+,$28(a0)
00011110 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011118 317C 4000 0002             		move.w	#$4000,2(a0)
0001111E 117C 0004 0001             		move.b	#4,1(a0)
00011124 117C 0004 0018             		move.b	#4,$18(a0)
0001112A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011130 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011136                            
00011136                            Obj59_Platform:				; XREF: Obj59_Index
00011136 7200                       		moveq	#0,d1
00011138 1228 0019                  		move.b	$19(a0),d1
0001113C 4EB9 0000 789E             		jsr	(PlatformObject).l
00011142 6000 0000                  		bra.w	Obj59_Types
00011146                            ; ===========================================================================
00011146                            
00011146                            Obj59_Action:				; XREF: Obj59_Index
00011146 7200                       		moveq	#0,d1
00011148 1228 0019                  		move.b	$19(a0),d1
0001114C 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011152 3F28 0008                  		move.w	8(a0),-(sp)
00011156 6100 0000                  		bsr.w	Obj59_Types
0001115A 341F                       		move.w	(sp)+,d2
0001115C 4A10                       		tst.b	0(a0)
0001115E 6700                       		beq.s	locret_10BD4
00011160 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00011166                            ; ===========================================================================
00011166                            
00011166                            locret_10BD4:
00011166 4E75                       		rts	
00011168                            ; ===========================================================================
00011168                            
00011168                            Obj59_Types:
00011168 7000                       		moveq	#0,d0
0001116A 1028 0028                  		move.b	$28(a0),d0
0001116E 0240 000F                  		andi.w	#$F,d0
00011172 D040                       		add.w	d0,d0
00011174 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011178 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001117C                            ; ===========================================================================
0001117C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011180 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011184 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011188 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001118C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011190                            ; ===========================================================================
00011190                            
00011190                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011190 4E75                       		rts	
00011192                            ; ===========================================================================
00011192                            
00011192                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011192 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011198 6600                       		bne.s	locret_10C0C
0001119A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001119E                            
0001119E                            locret_10C0C:
0001119E 4E75                       		rts	
000111A0                            ; ===========================================================================
000111A0                            
000111A0                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000111A0 6100 0000                  		bsr.w	Obj59_Move
000111A4 3028 0034                  		move.w	$34(a0),d0
000111A8 4440                       		neg.w	d0
000111AA D068 0030                  		add.w	$30(a0),d0
000111AE 3140 000C                  		move.w	d0,$C(a0)
000111B2 4E75                       		rts	
000111B4                            ; ===========================================================================
000111B4                            
000111B4                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000111B4 6100 0000                  		bsr.w	Obj59_Move
000111B8 3028 0034                  		move.w	$34(a0),d0
000111BC D068 0030                  		add.w	$30(a0),d0
000111C0 3140 000C                  		move.w	d0,$C(a0)
000111C4 4E75                       		rts	
000111C6                            ; ===========================================================================
000111C6                            
000111C6                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000111C6 6100 0000                  		bsr.w	Obj59_Move
000111CA 3028 0034                  		move.w	$34(a0),d0
000111CE E240                       		asr.w	#1,d0
000111D0 4440                       		neg.w	d0
000111D2 D068 0030                  		add.w	$30(a0),d0
000111D6 3140 000C                  		move.w	d0,$C(a0)
000111DA 3028 0034                  		move.w	$34(a0),d0
000111DE D068 0032                  		add.w	$32(a0),d0
000111E2 3140 0008                  		move.w	d0,8(a0)
000111E6 4E75                       		rts	
000111E8                            ; ===========================================================================
000111E8                            
000111E8                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000111E8 6100 0000                  		bsr.w	Obj59_Move
000111EC 3028 0034                  		move.w	$34(a0),d0
000111F0 E240                       		asr.w	#1,d0
000111F2 D068 0030                  		add.w	$30(a0),d0
000111F6 3140 000C                  		move.w	d0,$C(a0)
000111FA 3028 0034                  		move.w	$34(a0),d0
000111FE 4440                       		neg.w	d0
00011200 D068 0032                  		add.w	$32(a0),d0
00011204 3140 0008                  		move.w	d0,8(a0)
00011208 4E75                       		rts	
0001120A                            ; ===========================================================================
0001120A                            
0001120A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001120A 6100 0000                  		bsr.w	Obj59_Move
0001120E 3028 0034                  		move.w	$34(a0),d0
00011212 4440                       		neg.w	d0
00011214 D068 0030                  		add.w	$30(a0),d0
00011218 3140 000C                  		move.w	d0,$C(a0)
0001121C 4A28 0028                  		tst.b	$28(a0)
00011220 6700 0000                  		beq.w	loc_10C94
00011224 4E75                       		rts	
00011226                            ; ===========================================================================
00011226                            
00011226                            loc_10C94:
00011226 0828 0003 0022             		btst	#3,$22(a0)
0001122C 6700                       		beq.s	Obj59_Delete
0001122E 08E9 0001 0022             		bset	#1,$22(a1)
00011234 08A9 0003 0022             		bclr	#3,$22(a1)
0001123A 137C 0002 0024             		move.b	#2,$24(a1)
00011240                            
00011240                            Obj59_Delete:
00011240 6000 C9A2                  		bra.w	DeleteObject
00011244                            
00011244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011244                            
00011244                            
00011244                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011244 3028 0038                  		move.w	$38(a0),d0
00011248 4A28 003A                  		tst.b	$3A(a0)
0001124C 6600                       		bne.s	loc_10CC8
0001124E 0C40 0800                  		cmpi.w	#$800,d0
00011252 6400                       		bcc.s	loc_10CD0
00011254 0640 0010                  		addi.w	#$10,d0
00011258 6000                       		bra.s	loc_10CD0
0001125A                            ; ===========================================================================
0001125A                            
0001125A                            loc_10CC8:
0001125A 4A40                       		tst.w	d0
0001125C 6700                       		beq.s	loc_10CD0
0001125E 0440 0010                  		subi.w	#$10,d0
00011262                            
00011262                            loc_10CD0:
00011262 3140 0038                  		move.w	d0,$38(a0)
00011266 48C0                       		ext.l	d0
00011268 E180                       		asl.l	#8,d0
0001126A D0A8 0034                  		add.l	$34(a0),d0
0001126E 2140 0034                  		move.l	d0,$34(a0)
00011272 4840                       		swap	d0
00011274 3428 003C                  		move.w	$3C(a0),d2
00011278 B042                       		cmp.w	d2,d0
0001127A 6300                       		bls.s	loc_10CF0
0001127C 117C 0001 003A             		move.b	#1,$3A(a0)
00011282                            
00011282                            loc_10CF0:
00011282 D442                       		add.w	d2,d2
00011284 B042                       		cmp.w	d2,d0
00011286 6600                       		bne.s	locret_10CFA
00011288 4228 0028                  		clr.b	$28(a0)
0001128C                            
0001128C                            locret_10CFA:
0001128C 4E75                       		rts	
0001128E                            ; End of function Obj59_Move
0001128E                            
0001128E                            ; ===========================================================================
0001128E                            
0001128E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001128E 5368 003C                  		subq.w	#1,$3C(a0)
00011292 6600                       		bne.s	Obj59_ChkDel
00011294 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001129A 6100 CD92                  		bsr.w	SingleObjLoad
0001129E 6600                       		bne.s	Obj59_ChkDel
000112A0 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000112A4 3368 0008 0008             		move.w	8(a0),8(a1)
000112AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000112B0 137C 000E 0028             		move.b	#$E,$28(a1)
000112B6                            
000112B6                            Obj59_ChkDel:
000112B6 588F                       		addq.l	#4,sp
000112B8 3028 0008                  		move.w	8(a0),d0
000112BC 0240 FF80                  		andi.w	#$FF80,d0
000112C0 3238 F700                  		move.w	($FFFFF700).w,d1
000112C4 0441 0080                  		subi.w	#$80,d1
000112C8 0241 FF80                  		andi.w	#$FF80,d1
000112CC 9041                       		sub.w	d1,d0
000112CE 0C40 0280                  		cmpi.w	#$280,d0
000112D2 6200 C910                  		bhi.w	DeleteObject
000112D6 4E75                       		rts	
000112D8                            ; ===========================================================================
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            Map_obj59:
000112D8                            	include "_maps\obj59.asm"
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112D8                            ; ---------------------------------------------------------------------------
000112D8 0000                       		dc.w byte_10D4A-Map_obj59
000112DA 03                         byte_10D4A:	dc.b 3
000112DB F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000112E0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000112E5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000112EA                            		even
000112EA                            		even
000112EA                            
000112EA                            ; ===========================================================================
000112EA                            ; ---------------------------------------------------------------------------
000112EA                            ; Object 5A - platforms	moving in circles (SLZ)
000112EA                            ; ---------------------------------------------------------------------------
000112EA                            
000112EA                            Obj5A:					; XREF: Obj_Index
000112EA 7000                       		moveq	#0,d0
000112EC 1028 0024                  		move.b	$24(a0),d0
000112F0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000112F4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000112F8 3028 0032                  		move.w	$32(a0),d0
000112FC 0240 FF80                  		andi.w	#$FF80,d0
00011300 3238 F700                  		move.w	($FFFFF700).w,d1
00011304 0441 0080                  		subi.w	#$80,d1
00011308 0241 FF80                  		andi.w	#$FF80,d1
0001130C 9041                       		sub.w	d1,d0
0001130E 0C40 0280                  		cmpi.w	#$280,d0
00011312 6200 C8D0                  		bhi.w	DeleteObject
00011316 6000 C890                  		bra.w	DisplaySprite
0001131A                            ; ===========================================================================
0001131A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001131C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001131E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011320                            ; ===========================================================================
00011320                            
00011320                            Obj5A_Main:				; XREF: Obj5A_Index
00011320 5428 0024                  		addq.b	#2,$24(a0)
00011324 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001132C 317C 4000 0002             		move.w	#$4000,2(a0)
00011332 117C 0004 0001             		move.b	#4,1(a0)
00011338 117C 0004 0018             		move.b	#4,$18(a0)
0001133E 117C 0018 0019             		move.b	#$18,$19(a0)
00011344 3168 0008 0032             		move.w	8(a0),$32(a0)
0001134A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011350                            
00011350                            Obj5A_Platform:				; XREF: Obj5A_Index
00011350 7200                       		moveq	#0,d1
00011352 1228 0019                  		move.b	$19(a0),d1
00011356 4EB9 0000 789E             		jsr	(PlatformObject).l
0001135C 6000 0000                  		bra.w	Obj5A_Types
00011360                            ; ===========================================================================
00011360                            
00011360                            Obj5A_Action:				; XREF: Obj5A_Index
00011360 7200                       		moveq	#0,d1
00011362 1228 0019                  		move.b	$19(a0),d1
00011366 4EB9 0000 7A12             		jsr	(ExitPlatform).l
0001136C 3F28 0008                  		move.w	8(a0),-(sp)
00011370 6100 0000                  		bsr.w	Obj5A_Types
00011374 341F                       		move.w	(sp)+,d2
00011376 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
0001137C                            ; ===========================================================================
0001137C                            
0001137C                            Obj5A_Types:
0001137C 7000                       		moveq	#0,d0
0001137E 1028 0028                  		move.b	$28(a0),d0
00011382 0240 000C                  		andi.w	#$C,d0
00011386 E248                       		lsr.w	#1,d0
00011388 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001138C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011390                            ; ===========================================================================
00011390 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011392 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011394                            ; ===========================================================================
00011394                            
00011394                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011394 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011398 0401 0050                  		subi.b	#$50,d1
0001139C 4881                       		ext.w	d1
0001139E 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113A2 0402 0050                  		subi.b	#$50,d2
000113A6 4882                       		ext.w	d2
000113A8 0828 0000 0028             		btst	#0,$28(a0)
000113AE 6700                       		beq.s	loc_10E24
000113B0 4441                       		neg.w	d1
000113B2 4442                       		neg.w	d2
000113B4                            
000113B4                            loc_10E24:
000113B4 0828 0001 0028             		btst	#1,$28(a0)
000113BA 6700                       		beq.s	loc_10E30
000113BC 4441                       		neg.w	d1
000113BE C342                       		exg	d1,d2
000113C0                            
000113C0                            loc_10E30:
000113C0 D268 0032                  		add.w	$32(a0),d1
000113C4 3141 0008                  		move.w	d1,8(a0)
000113C8 D468 0030                  		add.w	$30(a0),d2
000113CC 3142 000C                  		move.w	d2,$C(a0)
000113D0 4E75                       		rts	
000113D2                            ; ===========================================================================
000113D2                            
000113D2                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000113D2 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113D6 0401 0050                  		subi.b	#$50,d1
000113DA 4881                       		ext.w	d1
000113DC 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113E0 0402 0050                  		subi.b	#$50,d2
000113E4 4882                       		ext.w	d2
000113E6 0828 0000 0028             		btst	#0,$28(a0)
000113EC 6700                       		beq.s	loc_10E62
000113EE 4441                       		neg.w	d1
000113F0 4442                       		neg.w	d2
000113F2                            
000113F2                            loc_10E62:
000113F2 0828 0001 0028             		btst	#1,$28(a0)
000113F8 6700                       		beq.s	loc_10E6E
000113FA 4441                       		neg.w	d1
000113FC C342                       		exg	d1,d2
000113FE                            
000113FE                            loc_10E6E:
000113FE 4441                       		neg.w	d1
00011400 D268 0032                  		add.w	$32(a0),d1
00011404 3141 0008                  		move.w	d1,8(a0)
00011408 D468 0030                  		add.w	$30(a0),d2
0001140C 3142 000C                  		move.w	d2,$C(a0)
00011410 4E75                       		rts	
00011412                            ; ===========================================================================
00011412                            ; ---------------------------------------------------------------------------
00011412                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011412                            ; ---------------------------------------------------------------------------
00011412                            Map_obj5A:
00011412                            	include "_maps\obj5A.asm"
00011412                            ; ---------------------------------------------------------------------------
00011412                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011412                            ; ---------------------------------------------------------------------------
00011412 0000                       		dc.w byte_10E84-Map_obj5A
00011414 02                         byte_10E84:	dc.b 2
00011415 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001141A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011420 00                         		even
00011420 00                         		even
00011420                            
00011420                            ; ===========================================================================
00011420                            ; ---------------------------------------------------------------------------
00011420                            ; Object 5B - blocks that form a staircase (SLZ)
00011420                            ; ---------------------------------------------------------------------------
00011420                            
00011420                            Obj5B:					; XREF: Obj_Index
00011420 7000                       		moveq	#0,d0
00011422 1028 0024                  		move.b	$24(a0),d0
00011426 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001142A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001142E 3028 0030                  		move.w	$30(a0),d0
00011432 0240 FF80                  		andi.w	#$FF80,d0
00011436 3238 F700                  		move.w	($FFFFF700).w,d1
0001143A 0441 0080                  		subi.w	#$80,d1
0001143E 0241 FF80                  		andi.w	#$FF80,d1
00011442 9041                       		sub.w	d1,d0
00011444 0C40 0280                  		cmpi.w	#$280,d0
00011448 6200 C79A                  		bhi.w	DeleteObject
0001144C 6000 C75A                  		bra.w	DisplaySprite
00011450                            ; ===========================================================================
00011450 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011452 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011454 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011456                            ; ===========================================================================
00011456                            
00011456                            Obj5B_Main:				; XREF: Obj5B_Index
00011456 5428 0024                  		addq.b	#2,$24(a0)
0001145A 7638                       		moveq	#$38,d3
0001145C 7801                       		moveq	#1,d4
0001145E 0828 0000 0022             		btst	#0,$22(a0)
00011464 6700                       		beq.s	loc_10EDA
00011466 763B                       		moveq	#$3B,d3
00011468 78FF                       		moveq	#-1,d4
0001146A                            
0001146A                            loc_10EDA:
0001146A 3428 0008                  		move.w	8(a0),d2
0001146E 2248                       		movea.l	a0,a1
00011470 7203                       		moveq	#3,d1
00011472 6000                       		bra.s	Obj5B_MakeBlocks
00011474                            ; ===========================================================================
00011474                            
00011474                            Obj5B_Loop:
00011474 6100 CBCE                  		bsr.w	SingleObjLoad2
00011478 6600 0000                  		bne.w	Obj5B_Move
0001147C 137C 0004 0024             		move.b	#4,$24(a1)
00011482                            
00011482                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011482 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011486 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001148E 337C 4000 0002             		move.w	#$4000,2(a1)
00011494 137C 0004 0001             		move.b	#4,1(a1)
0001149A 137C 0003 0018             		move.b	#3,$18(a1)
000114A0 137C 0010 0019             		move.b	#$10,$19(a1)
000114A6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000114AC 3342 0008                  		move.w	d2,8(a1)
000114B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000114B6 3368 0008 0030             		move.w	8(a0),$30(a1)
000114BC 3369 000C 0032             		move.w	$C(a1),$32(a1)
000114C2 0642 0020                  		addi.w	#$20,d2
000114C6 1343 0037                  		move.b	d3,$37(a1)
000114CA 2348 003C                  		move.l	a0,$3C(a1)
000114CE D604                       		add.b	d4,d3
000114D0 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000114D4                            
000114D4                            Obj5B_Move:				; XREF: Obj5B_Index
000114D4 7000                       		moveq	#0,d0
000114D6 1028 0028                  		move.b	$28(a0),d0
000114DA 0240 0007                  		andi.w	#7,d0
000114DE D040                       		add.w	d0,d0
000114E0 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000114E4 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000114E8                            
000114E8                            Obj5B_Solid:				; XREF: Obj5B_Index
000114E8 2468 003C                  		movea.l	$3C(a0),a2
000114EC 7000                       		moveq	#0,d0
000114EE 1028 0037                  		move.b	$37(a0),d0
000114F2 1032 0000                  		move.b	(a2,d0.w),d0
000114F6 D068 0032                  		add.w	$32(a0),d0
000114FA 3140 000C                  		move.w	d0,$C(a0)
000114FE 7200                       		moveq	#0,d1
00011500 1228 0019                  		move.b	$19(a0),d1
00011504 0641 000B                  		addi.w	#$B,d1
00011508 343C 0010                  		move.w	#$10,d2
0001150C 363C 0011                  		move.w	#$11,d3
00011510 3828 0008                  		move.w	8(a0),d4
00011514 6100 EA62                  		bsr.w	SolidObject
00011518 4A04                       		tst.b	d4
0001151A 6A00                       		bpl.s	loc_10F92
0001151C 1544 0036                  		move.b	d4,$36(a2)
00011520                            
00011520                            loc_10F92:
00011520 0828 0003 0022             		btst	#3,$22(a0)
00011526 6700                       		beq.s	locret_10FA0
00011528 157C 0001 0036             		move.b	#1,$36(a2)
0001152E                            
0001152E                            locret_10FA0:
0001152E 4E75                       		rts	
00011530                            ; ===========================================================================
00011530 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011532 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011534 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011536 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011538                            ; ===========================================================================
00011538                            
00011538                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011538 4A68 0034                  		tst.w	$34(a0)
0001153C 6600                       		bne.s	loc_10FC0
0001153E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011544 6600                       		bne.s	locret_10FBE
00011546 317C 001E 0034             		move.w	#$1E,$34(a0)
0001154C                            
0001154C                            locret_10FBE:
0001154C 4E75                       		rts	
0001154E                            ; ===========================================================================
0001154E                            
0001154E                            loc_10FC0:
0001154E 5368 0034                  		subq.w	#1,$34(a0)
00011552 66F8                       		bne.s	locret_10FBE
00011554 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011558 4E75                       		rts	
0001155A                            ; ===========================================================================
0001155A                            
0001155A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001155A 4A68 0034                  		tst.w	$34(a0)
0001155E 6600                       		bne.s	loc_10FE0
00011560 4A28 0036                  		tst.b	$36(a0)
00011564 6A00                       		bpl.s	locret_10FDE
00011566 317C 003C 0034             		move.w	#$3C,$34(a0)
0001156C                            
0001156C                            locret_10FDE:
0001156C 4E75                       		rts	
0001156E                            ; ===========================================================================
0001156E                            
0001156E                            loc_10FE0:
0001156E 5368 0034                  		subq.w	#1,$34(a0)
00011572 6600                       		bne.s	loc_10FEC
00011574 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011578 4E75                       		rts	
0001157A                            ; ===========================================================================
0001157A                            
0001157A                            loc_10FEC:
0001157A 43E8 0038                  		lea	$38(a0),a1
0001157E 3028 0034                  		move.w	$34(a0),d0
00011582 E408                       		lsr.b	#2,d0
00011584 0200 0001                  		andi.b	#1,d0
00011588 12C0                       		move.b	d0,(a1)+
0001158A 0A00 0001                  		eori.b	#1,d0
0001158E 12C0                       		move.b	d0,(a1)+
00011590 0A00 0001                  		eori.b	#1,d0
00011594 12C0                       		move.b	d0,(a1)+
00011596 0A00 0001                  		eori.b	#1,d0
0001159A 12C0                       		move.b	d0,(a1)+
0001159C 4E75                       		rts	
0001159E                            ; ===========================================================================
0001159E                            
0001159E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001159E 43E8 0038                  		lea	$38(a0),a1
000115A2 0C11 0080                  		cmpi.b	#$80,(a1)
000115A6 6700                       		beq.s	locret_11038
000115A8 5211                       		addq.b	#1,(a1)
000115AA 7200                       		moveq	#0,d1
000115AC 1219                       		move.b	(a1)+,d1
000115AE 4841                       		swap	d1
000115B0 E289                       		lsr.l	#1,d1
000115B2 2401                       		move.l	d1,d2
000115B4 E289                       		lsr.l	#1,d1
000115B6 2601                       		move.l	d1,d3
000115B8 D682                       		add.l	d2,d3
000115BA 4841                       		swap	d1
000115BC 4842                       		swap	d2
000115BE 4843                       		swap	d3
000115C0 12C3                       		move.b	d3,(a1)+
000115C2 12C2                       		move.b	d2,(a1)+
000115C4 12C1                       		move.b	d1,(a1)+
000115C6                            
000115C6                            locret_11038:
000115C6 4E75                       		rts	
000115C8 4E75                       		rts	
000115CA                            ; ===========================================================================
000115CA                            ; ---------------------------------------------------------------------------
000115CA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115CA                            ; ---------------------------------------------------------------------------
000115CA                            Map_obj5B:
000115CA                            	include "_maps\obj5B.asm"
000115CA                            ; ---------------------------------------------------------------------------
000115CA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115CA                            ; ---------------------------------------------------------------------------
000115CA 0000                       		dc.w byte_1103E-Map_obj5B
000115CC 01                         byte_1103E:	dc.b 1
000115CD F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000115D2                            		even
000115D2                            		even
000115D2                            
000115D2                            ; ===========================================================================
000115D2                            ; ---------------------------------------------------------------------------
000115D2                            ; Object 5C - metal girders in foreground (SLZ)
000115D2                            ; ---------------------------------------------------------------------------
000115D2                            
000115D2                            Obj5C:					; XREF: Obj_Index
000115D2 7000                       		moveq	#0,d0
000115D4 1028 0024                  		move.b	$24(a0),d0
000115D8 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000115DC 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000115E0                            ; ===========================================================================
000115E0 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000115E2 0000                       		dc.w Obj5C_Display-Obj5C_Index
000115E4                            ; ===========================================================================
000115E4                            
000115E4                            Obj5C_Main:				; XREF: Obj5C_Index
000115E4 5428 0024                  		addq.b	#2,$24(a0)
000115E8 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000115F0 317C 83CC 0002             		move.w	#$83CC,2(a0)
000115F6 117C 0010 0019             		move.b	#$10,$19(a0)
000115FC                            
000115FC                            Obj5C_Display:				; XREF: Obj5C_Index
000115FC 2238 F700                  		move.l	($FFFFF700).w,d1
00011600 D281                       		add.l	d1,d1
00011602 4841                       		swap	d1
00011604 4441                       		neg.w	d1
00011606 3141 0008                  		move.w	d1,8(a0)
0001160A 2238 F704                  		move.l	($FFFFF704).w,d1
0001160E D281                       		add.l	d1,d1
00011610 4841                       		swap	d1
00011612 0241 003F                  		andi.w	#$3F,d1
00011616 4441                       		neg.w	d1
00011618 0641 0100                  		addi.w	#$100,d1
0001161C 3141 000A                  		move.w	d1,$A(a0)
00011620 6000 C586                  		bra.w	DisplaySprite
00011624                            ; ===========================================================================
00011624                            ; ---------------------------------------------------------------------------
00011624                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011624                            ; ---------------------------------------------------------------------------
00011624                            Map_obj5C:
00011624                            	include "_maps\obj5C.asm"
00011624                            ; ---------------------------------------------------------------------------
00011624                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011624                            ; ---------------------------------------------------------------------------
00011624 0000                       		dc.w byte_11098-Map_obj5C
00011626 09                         byte_11098:	dc.b 9
00011627 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001162C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011631 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011636 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001163B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011640 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011645 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001164A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001164F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011654                            		even
00011654                            		even
00011654                            
00011654                            ; ===========================================================================
00011654                            ; ---------------------------------------------------------------------------
00011654                            ; Object 1B - water surface (LZ)
00011654                            ; ---------------------------------------------------------------------------
00011654                            
00011654                            Obj1B:					; XREF: Obj_Index
00011654 7000                       		moveq	#0,d0
00011656 1028 0024                  		move.b	$24(a0),d0
0001165A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001165E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011662                            ; ===========================================================================
00011662 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011664 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011666                            ; ===========================================================================
00011666                            
00011666                            Obj1B_Main:				; XREF: Obj1B_Index
00011666 5428 0024                  		addq.b	#2,$24(a0)
0001166A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011672 317C C300 0002             		move.w	#$C300,2(a0)
00011678 117C 0004 0001             		move.b	#4,1(a0)
0001167E 117C 0080 0019             		move.b	#$80,$19(a0)
00011684 3168 0008 0030             		move.w	8(a0),$30(a0)
0001168A                            
0001168A                            Obj1B_Action:				; XREF: Obj1B_Index
0001168A 3238 F700                  		move.w	($FFFFF700).w,d1
0001168E 0241 FFE0                  		andi.w	#$FFE0,d1
00011692 D268 0030                  		add.w	$30(a0),d1
00011696 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001169C 6700                       		beq.s	loc_11114
0001169E 0641 0020                  		addi.w	#$20,d1
000116A2                            
000116A2                            loc_11114:
000116A2 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000116A6 3238 F646                  		move.w	($FFFFF646).w,d1
000116AA 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000116AE 4A28 0032                  		tst.b	$32(a0)
000116B2 6600                       		bne.s	Obj1B_Animate
000116B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000116BA 6700                       		beq.s	loc_1114A	; if not, branch
000116BC 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000116C0 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000116C6 6000                       		bra.s	Obj1B_Display
000116C8                            ; ===========================================================================
000116C8                            
000116C8                            Obj1B_Animate:				; XREF: loc_11114
000116C8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000116CC 6600                       		bne.s	Obj1B_Display	; if yes, branch
000116CE 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000116D4 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000116D8                            
000116D8                            loc_1114A:				; XREF: loc_11114
000116D8 5328 001E                  		subq.b	#1,$1E(a0)
000116DC 6A00                       		bpl.s	Obj1B_Display
000116DE 117C 0007 001E             		move.b	#7,$1E(a0)
000116E4 5228 001A                  		addq.b	#1,$1A(a0)
000116E8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000116EE 6500                       		bcs.s	Obj1B_Display
000116F0 117C 0000 001A             		move.b	#0,$1A(a0)
000116F6                            
000116F6                            Obj1B_Display:
000116F6 6000 C4B0                  		bra.w	DisplaySprite
000116FA                            ; ===========================================================================
000116FA                            ; ---------------------------------------------------------------------------
000116FA                            ; Sprite mappings - water surface (LZ)
000116FA                            ; ---------------------------------------------------------------------------
000116FA                            Map_obj1B:
000116FA                            	include "_maps\obj1B.asm"
000116FA                            ; ---------------------------------------------------------------------------
000116FA                            ; Sprite mappings - water surface (LZ)
000116FA                            ; ---------------------------------------------------------------------------
000116FA 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000116FE 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011702 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011706 03                         byte_11178:	dc.b 3
00011707 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001170C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011711 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011716 03                         byte_11188:	dc.b 3
00011717 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001171C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011721 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011726 03                         byte_11198:	dc.b 3
00011727 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001172C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011731 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011736 06                         byte_111A8:	dc.b 6
00011737 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001173C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011741 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011746 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001174B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011750 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011755 06                         byte_111C7:	dc.b 6
00011756 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001175B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011760 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011765 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001176A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001176F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011774 06                         byte_111E6:	dc.b 6
00011775 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001177A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001177F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011784 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011789 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001178E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011794 00                         		even
00011794 00                         		even
00011794                            
00011794                            ; ===========================================================================
00011794                            ; ---------------------------------------------------------------------------
00011794                            ; Object 0B - pole that	breaks (LZ)
00011794                            ; ---------------------------------------------------------------------------
00011794                            
00011794                            Obj0B:					; XREF: Obj_Index
00011794 7000                       		moveq	#0,d0
00011796 1028 0024                  		move.b	$24(a0),d0
0001179A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001179E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000117A2                            ; ===========================================================================
000117A2 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000117A4 0000                       		dc.w Obj0B_Action-Obj0B_Index
000117A6 0000                       		dc.w Obj0B_Display-Obj0B_Index
000117A8                            ; ===========================================================================
000117A8                            
000117A8                            Obj0B_Main:				; XREF: Obj0B_Index
000117A8 5428 0024                  		addq.b	#2,$24(a0)
000117AC 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000117B4 317C 43DE 0002             		move.w	#$43DE,2(a0)
000117BA 117C 0004 0001             		move.b	#4,1(a0)
000117C0 117C 0008 0019             		move.b	#8,$19(a0)
000117C6 117C 0004 0018             		move.b	#4,$18(a0)
000117CC 117C 00E1 0020             		move.b	#$E1,$20(a0)
000117D2 7000                       		moveq	#0,d0
000117D4 1028 0028                  		move.b	$28(a0),d0	; get object type
000117D8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000117DC 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000117E0                            
000117E0                            Obj0B_Action:				; XREF: Obj0B_Index
000117E0 4A28 0032                  		tst.b	$32(a0)
000117E4 6700                       		beq.s	Obj0B_Grab
000117E6 4A68 0030                  		tst.w	$30(a0)
000117EA 6700                       		beq.s	Obj0B_MoveUp
000117EC 5368 0030                  		subq.w	#1,$30(a0)
000117F0 6600                       		bne.s	Obj0B_MoveUp
000117F2 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000117F8 6000                       		bra.s	Obj0B_Release
000117FA                            ; ===========================================================================
000117FA                            
000117FA                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000117FA 43F8 D000                  		lea	($FFFFD000).w,a1
000117FE 3028 000C                  		move.w	$C(a0),d0
00011802 0440 0018                  		subi.w	#$18,d0
00011806 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0001180C 6700                       		beq.s	Obj0B_MoveDown
0001180E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011812 B069 000C                  		cmp.w	$C(a1),d0
00011816 6500                       		bcs.s	Obj0B_MoveDown
00011818 3340 000C                  		move.w	d0,$C(a1)
0001181C                            
0001181C                            Obj0B_MoveDown:
0001181C 0640 0024                  		addi.w	#$24,d0
00011820 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011826 6700                       		beq.s	Obj0B_LetGo
00011828 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0001182C B069 000C                  		cmp.w	$C(a1),d0
00011830 6400                       		bcc.s	Obj0B_LetGo
00011832 3340 000C                  		move.w	d0,$C(a1)
00011836                            
00011836                            Obj0B_LetGo:
00011836 1038 F603                  		move.b	($FFFFF603).w,d0
0001183A 0240 0070                  		andi.w	#$70,d0
0001183E 6700                       		beq.s	Obj0B_Display
00011840                            
00011840                            Obj0B_Release:				; XREF: Obj0B_Action
00011840 4228 0020                  		clr.b	$20(a0)
00011844 5428 0024                  		addq.b	#2,$24(a0)
00011848 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001184C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011850 4228 0032                  		clr.b	$32(a0)
00011854 6000                       		bra.s	Obj0B_Display
00011856                            ; ===========================================================================
00011856                            
00011856                            Obj0B_Grab:				; XREF: Obj0B_Action
00011856 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0001185A 6700                       		beq.s	Obj0B_Display	; if not, branch
0001185C 43F8 D000                  		lea	($FFFFD000).w,a1
00011860 3028 0008                  		move.w	8(a0),d0
00011864 0640 0014                  		addi.w	#$14,d0
00011868 B069 0008                  		cmp.w	8(a1),d0
0001186C 6400                       		bcc.s	Obj0B_Display
0001186E 4228 0021                  		clr.b	$21(a0)
00011872 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011878 6400                       		bcc.s	Obj0B_Display
0001187A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001187E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011882 3028 0008                  		move.w	8(a0),d0
00011886 0640 0014                  		addi.w	#$14,d0
0001188A 3340 0008                  		move.w	d0,8(a1)
0001188E 08A9 0000 0022             		bclr	#0,$22(a1)
00011894 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001189A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000118A0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000118A6 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000118AC                            
000118AC                            Obj0B_Display:				; XREF: Obj0B_Index
000118AC 6000 E3A2                  		bra.w	MarkObjGone
000118B0                            ; ===========================================================================
000118B0                            ; ---------------------------------------------------------------------------
000118B0                            ; Sprite mappings - pole that breaks (LZ)
000118B0                            ; ---------------------------------------------------------------------------
000118B0                            Map_obj0B:
000118B0                            	include "_maps\obj0B.asm"
000118B0                            ; ---------------------------------------------------------------------------
000118B0                            ; Sprite mappings - pole that breaks (LZ)
000118B0                            ; ---------------------------------------------------------------------------
000118B0 0000                       		dc.w byte_11326-Map_obj0B
000118B2 0000                       		dc.w byte_11331-Map_obj0B
000118B4 02                         byte_11326:	dc.b 2			; normal pole
000118B5 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000118BA 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000118BF 04                         byte_11331:	dc.b 4			; broken pole
000118C0 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000118C5 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000118CA 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000118CF 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000118D4                            		even
000118D4                            		even
000118D4                            
000118D4                            ; ===========================================================================
000118D4                            ; ---------------------------------------------------------------------------
000118D4                            ; Object 0C - flapping door (LZ)
000118D4                            ; ---------------------------------------------------------------------------
000118D4                            
000118D4                            Obj0C:					; XREF: Obj_Index
000118D4 7000                       		moveq	#0,d0
000118D6 1028 0024                  		move.b	$24(a0),d0
000118DA 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000118DE 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000118E2                            ; ===========================================================================
000118E2 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000118E4 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000118E6                            ; ===========================================================================
000118E6                            
000118E6                            Obj0C_Main:				; XREF: Obj0C_Index
000118E6 5428 0024                  		addq.b	#2,$24(a0)
000118EA 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000118F2 317C 4328 0002             		move.w	#$4328,2(a0)
000118F8 0028 0004 0001             		ori.b	#4,1(a0)
000118FE 117C 0028 0019             		move.b	#$28,$19(a0)
00011904 7000                       		moveq	#0,d0
00011906 1028 0028                  		move.b	$28(a0),d0	; get object type
0001190A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001190E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011912                            
00011912                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011912 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011916 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011918 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001191E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011924 4A28 0001                  		tst.b	1(a0)
00011928 6A00                       		bpl.s	Obj0C_Solid
0001192A 303C 00BB                  		move.w	#$BB,d0
0001192E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00011934                            
00011934                            Obj0C_Solid:
00011934 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001193A 6100 9306                  		bsr.w	AnimateSprite
0001193E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011942 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011946 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011948 3038 D008                  		move.w	($FFFFD008).w,d0
0001194C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011950 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011952 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011958 323C 0013                  		move.w	#$13,d1
0001195C 343C 0020                  		move.w	#$20,d2
00011960 3602                       		move.w	d2,d3
00011962 5243                       		addq.w	#1,d3
00011964 3828 0008                  		move.w	8(a0),d4
00011968 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
0001196C                            
0001196C                            Obj0C_Display:
0001196C 6000 E2E2                  		bra.w	MarkObjGone
00011970                            ; ===========================================================================
00011970                            Ani_obj0C:
00011970                            	include "_anim\obj0C.asm"
00011970                            ; ---------------------------------------------------------------------------
00011970                            ; Animation script - flapping door (LZ)
00011970                            ; ---------------------------------------------------------------------------
00011970 0000                       		dc.w byte_113E6-Ani_obj0C
00011972 0000                       		dc.w byte_113EC-Ani_obj0C
00011974 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001197A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011980                            		even
00011980                            		even
00011980                            
00011980                            ; ---------------------------------------------------------------------------
00011980                            ; Sprite mappings - flapping door (LZ)
00011980                            ; ---------------------------------------------------------------------------
00011980                            Map_obj0C:
00011980                            	include "_maps\obj0C.asm"
00011980                            ; ---------------------------------------------------------------------------
00011980                            ; Sprite mappings - flapping door (LZ)
00011980                            ; ---------------------------------------------------------------------------
00011980 0000                       		dc.w byte_113F8-Map_obj0C
00011982 0000                       		dc.w byte_11403-Map_obj0C
00011984 0000                       		dc.w byte_1140E-Map_obj0C
00011986 02                         byte_113F8:	dc.b 2
00011987 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001198C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011991 02                         byte_11403:	dc.b 2
00011992 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011997 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001199C 02                         byte_1140E:	dc.b 2
0001199D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000119A2 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000119A8 00                         		even
000119A8 00                         		even
000119A8                            
000119A8                            ; ===========================================================================
000119A8                            ; ---------------------------------------------------------------------------
000119A8                            ; Object 71 - invisible	solid blocks
000119A8                            ; ---------------------------------------------------------------------------
000119A8                            
000119A8                            Obj71:					; XREF: Obj_Index
000119A8 7000                       		moveq	#0,d0
000119AA 1028 0024                  		move.b	$24(a0),d0
000119AE 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000119B2 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000119B6                            ; ===========================================================================
000119B6 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000119B8 0000                       		dc.w Obj71_Solid-Obj71_Index
000119BA                            ; ===========================================================================
000119BA                            
000119BA                            Obj71_Main:				; XREF: Obj71_Index
000119BA 5428 0024                  		addq.b	#2,$24(a0)
000119BE 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000119C6 317C 8680 0002             		move.w	#$8680,2(a0)
000119CC 0028 0004 0001             		ori.b	#4,1(a0)
000119D2 1028 0028                  		move.b	$28(a0),d0	; get object type
000119D6 1200                       		move.b	d0,d1
000119D8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000119DC 0640 0010                  		addi.w	#$10,d0
000119E0 E248                       		lsr.w	#1,d0
000119E2 1140 0019                  		move.b	d0,$19(a0)	; set object width
000119E6 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000119EA 5241                       		addq.w	#1,d1
000119EC E749                       		lsl.w	#3,d1
000119EE 1141 0016                  		move.b	d1,$16(a0)	; set object height
000119F2                            
000119F2                            Obj71_Solid:				; XREF: Obj71_Index
000119F2 6100 C42E                  		bsr.w	ChkObjOnScreen
000119F6 6600                       		bne.s	Obj71_ChkDel
000119F8 7200                       		moveq	#0,d1
000119FA 1228 0019                  		move.b	$19(a0),d1
000119FE 0641 000B                  		addi.w	#$B,d1
00011A02 7400                       		moveq	#0,d2
00011A04 1428 0016                  		move.b	$16(a0),d2
00011A08 3602                       		move.w	d2,d3
00011A0A 5243                       		addq.w	#1,d3
00011A0C 3828 0008                  		move.w	8(a0),d4
00011A10 6100 E5A8                  		bsr.w	SolidObject71
00011A14                            
00011A14                            Obj71_ChkDel:
00011A14 3028 0008                  		move.w	8(a0),d0
00011A18 0240 FF80                  		andi.w	#$FF80,d0
00011A1C 3238 F700                  		move.w	($FFFFF700).w,d1
00011A20 0441 0080                  		subi.w	#$80,d1
00011A24 0241 FF80                  		andi.w	#$FF80,d1
00011A28 9041                       		sub.w	d1,d0
00011A2A 0C40 0280                  		cmpi.w	#$280,d0
00011A2E 6200                       		bhi.s	Obj71_Delete
00011A30 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011A34 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A36 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A3A                            ; ===========================================================================
00011A3A                            
00011A3A                            Obj71_NoDisplay:
00011A3A 4E75                       		rts	
00011A3C                            ; ===========================================================================
00011A3C                            
00011A3C                            Obj71_Delete:
00011A3C 4EFA C1A6                  		jmp	DeleteObject
00011A40                            ; ===========================================================================
00011A40                            ; ---------------------------------------------------------------------------
00011A40                            ; Sprite mappings - invisible solid blocks
00011A40                            ; ---------------------------------------------------------------------------
00011A40                            Map_obj71:
00011A40                            	include "_maps\obj71.asm"
00011A40                            ; ---------------------------------------------------------------------------
00011A40                            ; Sprite mappings - invisible solid blocks
00011A40                            ; ---------------------------------------------------------------------------
00011A40 0000                       		dc.w byte_114BC-Map_obj71
00011A42 0000                       		dc.w byte_114D1-Map_obj71
00011A44 0000                       		dc.w byte_114E6-Map_obj71
00011A46 04                         byte_114BC:	dc.b 4
00011A47 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011A4C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011A51 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011A56 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011A5B 04                         byte_114D1:	dc.b 4
00011A5C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011A61 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011A66 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011A6B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011A70 04                         byte_114E6:	dc.b 4
00011A71 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011A76 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011A7B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011A80 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011A86 00                         		even
00011A86 00                         		even
00011A86                            
00011A86                            ; ===========================================================================
00011A86                            ; ---------------------------------------------------------------------------
00011A86                            ; Object 5D - fans (SLZ)
00011A86                            ; ---------------------------------------------------------------------------
00011A86                            
00011A86                            Obj5D:					; XREF: Obj_Index
00011A86 7000                       		moveq	#0,d0
00011A88 1028 0024                  		move.b	$24(a0),d0
00011A8C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011A90 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011A94                            ; ===========================================================================
00011A94 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011A96 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011A98                            ; ===========================================================================
00011A98                            
00011A98                            Obj5D_Main:				; XREF: Obj5D_Index
00011A98 5428 0024                  		addq.b	#2,$24(a0)
00011A9C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011AA4 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011AAA 0028 0004 0001             		ori.b	#4,1(a0)
00011AB0 117C 0010 0019             		move.b	#$10,$19(a0)
00011AB6 117C 0004 0018             		move.b	#4,$18(a0)
00011ABC                            
00011ABC                            Obj5D_Delay:				; XREF: Obj5D_Index
00011ABC 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011AC2 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011AC4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011AC8 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011ACA 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011AD0 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011AD6 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011AD8 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011ADE                            
00011ADE                            Obj5D_Blow:
00011ADE 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011AE2 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011AE6 43F8 D000                  		lea	($FFFFD000).w,a1
00011AEA 3029 0008                  		move.w	8(a1),d0
00011AEE 9068 0008                  		sub.w	8(a0),d0
00011AF2 0828 0000 0022             		btst	#0,$22(a0)
00011AF8 6600                       		bne.s	Obj5D_ChkSonic
00011AFA 4440                       		neg.w	d0
00011AFC                            
00011AFC                            Obj5D_ChkSonic:
00011AFC 0640 0050                  		addi.w	#$50,d0
00011B00 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011B04 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011B06 3229 000C                  		move.w	$C(a1),d1
00011B0A 0641 0060                  		addi.w	#$60,d1
00011B0E 9268 000C                  		sub.w	$C(a0),d1
00011B12 6500                       		bcs.s	Obj5D_Animate
00011B14 0C41 0070                  		cmpi.w	#$70,d1
00011B18 6400                       		bcc.s	Obj5D_Animate
00011B1A 0440 0050                  		subi.w	#$50,d0
00011B1E 6400                       		bcc.s	loc_1159A
00011B20 4640                       		not.w	d0
00011B22 D040                       		add.w	d0,d0
00011B24                            
00011B24                            loc_1159A:
00011B24 0640 0060                  		addi.w	#$60,d0
00011B28 0828 0000 0022             		btst	#0,$22(a0)
00011B2E 6600                       		bne.s	loc_115A8
00011B30 4440                       		neg.w	d0
00011B32                            
00011B32                            loc_115A8:
00011B32 4400                       		neg.b	d0
00011B34 E840                       		asr.w	#4,d0
00011B36 0828 0000 0028             		btst	#0,$28(a0)
00011B3C 6700                       		beq.s	Obj5D_MoveSonic
00011B3E 4440                       		neg.w	d0
00011B40                            
00011B40                            Obj5D_MoveSonic:
00011B40 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B44                            
00011B44                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B44 5328 001E                  		subq.b	#1,$1E(a0)
00011B48 6A00                       		bpl.s	Obj5D_ChkDel
00011B4A 117C 0000 001E             		move.b	#0,$1E(a0)
00011B50 5228 001B                  		addq.b	#1,$1B(a0)
00011B54 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011B5A 6500                       		bcs.s	loc_115D8
00011B5C 117C 0000 001B             		move.b	#0,$1B(a0)
00011B62                            
00011B62                            loc_115D8:
00011B62 7000                       		moveq	#0,d0
00011B64 0828 0000 0028             		btst	#0,$28(a0)
00011B6A 6700                       		beq.s	loc_115E4
00011B6C 7002                       		moveq	#2,d0
00011B6E                            
00011B6E                            loc_115E4:
00011B6E D028 001B                  		add.b	$1B(a0),d0
00011B72 1140 001A                  		move.b	d0,$1A(a0)
00011B76                            
00011B76                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011B76 6100 C030                  		bsr.w	DisplaySprite
00011B7A 3028 0008                  		move.w	8(a0),d0
00011B7E 0240 FF80                  		andi.w	#$FF80,d0
00011B82 3238 F700                  		move.w	($FFFFF700).w,d1
00011B86 0441 0080                  		subi.w	#$80,d1
00011B8A 0241 FF80                  		andi.w	#$FF80,d1
00011B8E 9041                       		sub.w	d1,d0
00011B90 0C40 0280                  		cmpi.w	#$280,d0
00011B94 6200 C04E                  		bhi.w	DeleteObject
00011B98 4E75                       		rts	
00011B9A                            ; ===========================================================================
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - fans (SLZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            Map_obj5D:
00011B9A                            	include "_maps\obj5D.asm"
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - fans (SLZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011B9E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011BA2 0000                       		dc.w byte_1161A-Map_obj5D
00011BA4 02                         byte_1161A:	dc.b 2
00011BA5 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011BAA 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011BAF 02                         byte_11625:	dc.b 2
00011BB0 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011BB5 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011BBA 02                         byte_11630:	dc.b 2
00011BBB F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011BC0 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011BC6 00                         		even
00011BC6 00                         		even
00011BC6                            
00011BC6                            ; ===========================================================================
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            ; Object 5E - seesaws (SLZ)
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            
00011BC6                            Obj5E:					; XREF: Obj_Index
00011BC6 7000                       		moveq	#0,d0
00011BC8 1028 0024                  		move.b	$24(a0),d0
00011BCC 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011BD0 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011BD4 3028 0030                  		move.w	$30(a0),d0
00011BD8 0240 FF80                  		andi.w	#$FF80,d0
00011BDC 3238 F700                  		move.w	($FFFFF700).w,d1
00011BE0 0441 0080                  		subi.w	#$80,d1
00011BE4 0241 FF80                  		andi.w	#$FF80,d1
00011BE8 9041                       		sub.w	d1,d0
00011BEA 6B00 BFF8                  		bmi.w	DeleteObject
00011BEE 0C40 0280                  		cmpi.w	#$280,d0
00011BF2 6200 BFF0                  		bhi.w	DeleteObject
00011BF6 6000 BFB0                  		bra.w	DisplaySprite
00011BFA                            ; ===========================================================================
00011BFA 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011BFC 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011BFE 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011C00 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011C02 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011C04 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011C06                            ; ===========================================================================
00011C06                            
00011C06                            Obj5E_Main:				; XREF: Obj5E_Index
00011C06 5428 0024                  		addq.b	#2,$24(a0)
00011C0A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011C12 317C 0374 0002             		move.w	#$374,2(a0)
00011C18 0028 0004 0001             		ori.b	#4,1(a0)
00011C1E 117C 0004 0018             		move.b	#4,$18(a0)
00011C24 117C 0030 0019             		move.b	#$30,$19(a0)
00011C2A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C30 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011C34 6600                       		bne.s	loc_116D2	; if not, branch
00011C36 6100 C40C                  		bsr.w	SingleObjLoad2
00011C3A 6600                       		bne.s	loc_116D2
00011C3C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C40 5C29 0024                  		addq.b	#6,$24(a1)
00011C44 3368 0008 0008             		move.w	8(a0),8(a1)
00011C4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C50 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C56 2348 003C                  		move.l	a0,$3C(a1)
00011C5A                            
00011C5A                            loc_116D2:
00011C5A 0828 0000 0022             		btst	#0,$22(a0)
00011C60 6700                       		beq.s	loc_116E0
00011C62 117C 0002 001A             		move.b	#2,$1A(a0)
00011C68                            
00011C68                            loc_116E0:
00011C68 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011C6E                            
00011C6E                            Obj5E_Slope:				; XREF: Obj5E_Index
00011C6E 1228 003A                  		move.b	$3A(a0),d1
00011C72 6100 0000                  		bsr.w	loc_11766
00011C76 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C7C 0828 0000 001A             		btst	#0,$1A(a0)
00011C82 6700                       		beq.s	loc_11702
00011C84 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C8A                            
00011C8A                            loc_11702:
00011C8A 43F8 D000                  		lea	($FFFFD000).w,a1
00011C8E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011C94 323C 0030                  		move.w	#$30,d1
00011C98 4EB9 0000 7972             		jsr	(SlopeObject).l
00011C9E 4E75                       		rts	
00011CA0                            ; ===========================================================================
00011CA0                            
00011CA0                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011CA0 6100 0000                  		bsr.w	loc_1174A
00011CA4 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011CAA 0828 0000 001A             		btst	#0,$1A(a0)
00011CB0 6700                       		beq.s	loc_11730
00011CB2 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011CB8                            
00011CB8                            loc_11730:
00011CB8 323C 0030                  		move.w	#$30,d1
00011CBC 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011CC2 323C 0030                  		move.w	#$30,d1
00011CC6 3428 0008                  		move.w	8(a0),d2
00011CCA 4EB9 0000 8970             		jsr	SlopeObject2
00011CD0 4E75                       		rts	
00011CD2                            ; ===========================================================================
00011CD2                            
00011CD2                            loc_1174A:				; XREF: Obj5E_Slope2
00011CD2 7202                       		moveq	#2,d1
00011CD4 43F8 D000                  		lea	($FFFFD000).w,a1
00011CD8 3028 0008                  		move.w	8(a0),d0
00011CDC 9069 0008                  		sub.w	8(a1),d0
00011CE0 6400                       		bcc.s	loc_1175E
00011CE2 4440                       		neg.w	d0
00011CE4 7200                       		moveq	#0,d1
00011CE6                            
00011CE6                            loc_1175E:
00011CE6 0C40 0008                  		cmpi.w	#8,d0
00011CEA 6400                       		bcc.s	loc_11766
00011CEC 7201                       		moveq	#1,d1
00011CEE                            
00011CEE                            loc_11766:
00011CEE 1028 001A                  		move.b	$1A(a0),d0
00011CF2 B001                       		cmp.b	d1,d0
00011CF4 6700                       		beq.s	locret_11790
00011CF6 6400                       		bcc.s	loc_11772
00011CF8 5400                       		addq.b	#2,d0
00011CFA                            
00011CFA                            loc_11772:
00011CFA 5300                       		subq.b	#1,d0
00011CFC 1140 001A                  		move.b	d0,$1A(a0)
00011D00 1141 003A                  		move.b	d1,$3A(a0)
00011D04 08A8 0000 0001             		bclr	#0,1(a0)
00011D0A 0828 0001 001A             		btst	#1,$1A(a0)
00011D10 6700                       		beq.s	locret_11790
00011D12 08E8 0000 0001             		bset	#0,1(a0)
00011D18                            
00011D18                            locret_11790:
00011D18 4E75                       		rts	
00011D1A                            ; ===========================================================================
00011D1A                            
00011D1A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011D1A 5428 0024                  		addq.b	#2,$24(a0)
00011D1E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011D26 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011D2C 0028 0004 0001             		ori.b	#4,1(a0)
00011D32 117C 0004 0018             		move.b	#4,$18(a0)
00011D38 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D3E 117C 000C 0019             		move.b	#$C,$19(a0)
00011D44 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D4A 0668 0028 0008             		addi.w	#$28,8(a0)
00011D50 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011D56 117C 0001 001A             		move.b	#1,$1A(a0)
00011D5C 0828 0000 0022             		btst	#0,$22(a0)
00011D62 6700                       		beq.s	Obj5E_MoveSpike
00011D64 0468 0050 0008             		subi.w	#$50,8(a0)
00011D6A 117C 0002 003A             		move.b	#2,$3A(a0)
00011D70                            
00011D70                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011D70 2268 003C                  		movea.l	$3C(a0),a1
00011D74 7000                       		moveq	#0,d0
00011D76 1028 003A                  		move.b	$3A(a0),d0
00011D7A 9029 003A                  		sub.b	$3A(a1),d0
00011D7E 6700                       		beq.s	loc_1183E
00011D80 6400                       		bcc.s	loc_117FC
00011D82 4400                       		neg.b	d0
00011D84                            
00011D84                            loc_117FC:
00011D84 323C F7E8                  		move.w	#-$818,d1
00011D88 343C FEEC                  		move.w	#-$114,d2
00011D8C 0C00 0001                  		cmpi.b	#1,d0
00011D90 6700                       		beq.s	loc_11822
00011D92 323C F510                  		move.w	#-$AF0,d1
00011D96 343C FF34                  		move.w	#-$CC,d2
00011D9A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011DA0 6D00                       		blt.s	loc_11822
00011DA2 323C F200                  		move.w	#-$E00,d1
00011DA6 343C FF60                  		move.w	#-$A0,d2
00011DAA                            
00011DAA                            loc_11822:
00011DAA 3141 0012                  		move.w	d1,$12(a0)
00011DAE 3142 0010                  		move.w	d2,$10(a0)
00011DB2 3028 0008                  		move.w	8(a0),d0
00011DB6 9068 0030                  		sub.w	$30(a0),d0
00011DBA 6400                       		bcc.s	loc_11838
00011DBC 4468 0010                  		neg.w	$10(a0)
00011DC0                            
00011DC0                            loc_11838:
00011DC0 5428 0024                  		addq.b	#2,$24(a0)
00011DC4 6000                       		bra.s	Obj5E_SpikeFall
00011DC6                            ; ===========================================================================
00011DC6                            
00011DC6                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011DC6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011DCC 7000                       		moveq	#0,d0
00011DCE 1029 001A                  		move.b	$1A(a1),d0
00011DD2 343C 0028                  		move.w	#$28,d2
00011DD6 3228 0008                  		move.w	8(a0),d1
00011DDA 9268 0030                  		sub.w	$30(a0),d1
00011DDE 6400                       		bcc.s	loc_1185C
00011DE0 4442                       		neg.w	d2
00011DE2 5440                       		addq.w	#2,d0
00011DE4                            
00011DE4                            loc_1185C:
00011DE4 D040                       		add.w	d0,d0
00011DE6 3228 0034                  		move.w	$34(a0),d1
00011DEA D272 0000                  		add.w	(a2,d0.w),d1
00011DEE 3141 000C                  		move.w	d1,$C(a0)
00011DF2 D468 0030                  		add.w	$30(a0),d2
00011DF6 3142 0008                  		move.w	d2,8(a0)
00011DFA 4268 000E                  		clr.w	$E(a0)
00011DFE 4268 000A                  		clr.w	$A(a0)
00011E02 4E75                       		rts	
00011E04                            ; ===========================================================================
00011E04                            
00011E04                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011E04 4A68 0012                  		tst.w	$12(a0)
00011E08 6A00                       		bpl.s	loc_1189A
00011E0A 6100 BD4A                  		bsr.w	ObjectFall
00011E0E 3028 0034                  		move.w	$34(a0),d0
00011E12 0440 002F                  		subi.w	#$2F,d0
00011E16 B068 000C                  		cmp.w	$C(a0),d0
00011E1A 6E00                       		bgt.s	locret_11898
00011E1C 6100 BD38                  		bsr.w	ObjectFall
00011E20                            
00011E20                            locret_11898:
00011E20 4E75                       		rts	
00011E22                            ; ===========================================================================
00011E22                            
00011E22                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011E22 6100 BD32                  		bsr.w	ObjectFall
00011E26 2268 003C                  		movea.l	$3C(a0),a1
00011E2A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E30 7000                       		moveq	#0,d0
00011E32 1029 001A                  		move.b	$1A(a1),d0
00011E36 3228 0008                  		move.w	8(a0),d1
00011E3A 9268 0030                  		sub.w	$30(a0),d1
00011E3E 6400                       		bcc.s	loc_118BA
00011E40 5440                       		addq.w	#2,d0
00011E42                            
00011E42                            loc_118BA:
00011E42 D040                       		add.w	d0,d0
00011E44 3228 0034                  		move.w	$34(a0),d1
00011E48 D272 0000                  		add.w	(a2,d0.w),d1
00011E4C B268 000C                  		cmp.w	$C(a0),d1
00011E50 6E00                       		bgt.s	locret_11938
00011E52 2268 003C                  		movea.l	$3C(a0),a1
00011E56 7202                       		moveq	#2,d1
00011E58 4A68 0010                  		tst.w	$10(a0)
00011E5C 6B00                       		bmi.s	Obj5E_Spring
00011E5E 7200                       		moveq	#0,d1
00011E60                            
00011E60                            Obj5E_Spring:
00011E60 1341 003A                  		move.b	d1,$3A(a1)
00011E64 1141 003A                  		move.b	d1,$3A(a0)
00011E68 B229 001A                  		cmp.b	$1A(a1),d1
00011E6C 6700                       		beq.s	loc_1192C
00011E6E 08A9 0003 0022             		bclr	#3,$22(a1)
00011E74 6700                       		beq.s	loc_1192C
00011E76 4229 0025                  		clr.b	$25(a1)
00011E7A 137C 0002 0024             		move.b	#2,$24(a1)
00011E80 45F8 D000                  		lea	($FFFFD000).w,a2
00011E84 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011E8A 446A 0012                  		neg.w	$12(a2)
00011E8E 08EA 0001 0022             		bset	#1,$22(a2)
00011E94 08AA 0003 0022             		bclr	#3,$22(a2)
00011E9A 422A 003C                  		clr.b	$3C(a2)
00011E9E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011EA4 157C 0002 0024             		move.b	#2,$24(a2)
00011EAA 303C 00CC                  		move.w	#$CC,d0
00011EAE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011EB4                            
00011EB4                            loc_1192C:
00011EB4 4268 0010                  		clr.w	$10(a0)
00011EB8 4268 0012                  		clr.w	$12(a0)
00011EBC 5528 0024                  		subq.b	#2,$24(a0)
00011EC0                            
00011EC0                            locret_11938:
00011EC0 4E75                       		rts	
00011EC2                            ; ===========================================================================
00011EC2 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011ECC                            
00011ECC                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011EFC                            		even
00011EFC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011F2C                            		even
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            ; Sprite mappings - seesaws (SLZ)
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            Map_obj5E:
00011F2C                            	include "_maps\obj5E.asm"
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            ; Sprite mappings - seesaws (SLZ)
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F30 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F34 07                         byte_119AC:	dc.b 7
00011F35 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F3A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F3F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F44 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F49 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011F4E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011F53 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011F58 04                         byte_119D0:	dc.b 4
00011F59 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011F5E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011F63 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011F68 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011F6E 00                         		even
00011F6E 00                         		even
00011F6E                            
00011F6E                            ; ---------------------------------------------------------------------------
00011F6E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F6E                            ; ---------------------------------------------------------------------------
00011F6E                            Map_obj5Ea:
00011F6E                            	include "_maps\obj5Eballs.asm"
00011F6E                            ; ---------------------------------------------------------------------------
00011F6E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F6E                            ; ---------------------------------------------------------------------------
00011F6E 0000                       		dc.w byte_119EA-Map_obj5Ea
00011F70 0000                       		dc.w byte_119F0-Map_obj5Ea
00011F72 01                         byte_119EA:	dc.b 1
00011F73 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F78 01                         byte_119F0:	dc.b 1
00011F79 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011F7E                            		even
00011F7E                            		even
00011F7E                            
00011F7E                            ; ===========================================================================
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E                            
00011F7E                            Obj5F:					; XREF: Obj_Index
00011F7E 7000                       		moveq	#0,d0
00011F80 1028 0024                  		move.b	$24(a0),d0
00011F84 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011F88 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011F8C                            ; ===========================================================================
00011F8C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011F8E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011F90 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011F92 0000                       		dc.w Obj5F_End-Obj5F_Index
00011F94                            ; ===========================================================================
00011F94                            
00011F94                            Obj5F_Main:				; XREF: Obj5F_Index
00011F94 5428 0024                  		addq.b	#2,$24(a0)
00011F98 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011FA0 317C 0400 0002             		move.w	#$400,2(a0)
00011FA6 0028 0004 0001             		ori.b	#4,1(a0)
00011FAC 117C 0003 0018             		move.b	#3,$18(a0)
00011FB2 117C 000C 0019             		move.b	#$C,$19(a0)
00011FB8 1028 0028                  		move.b	$28(a0),d0
00011FBC 6700                       		beq.s	loc_11A3C
00011FBE 1140 0024                  		move.b	d0,$24(a0)
00011FC2 4E75                       		rts	
00011FC4                            ; ===========================================================================
00011FC4                            
00011FC4                            loc_11A3C:
00011FC4 117C 009A 0020             		move.b	#$9A,$20(a0)
00011FCA 0868 0000 0022             		bchg	#0,$22(a0)
00011FD0                            
00011FD0                            Obj5F_Action:				; XREF: Obj5F_Index
00011FD0 7000                       		moveq	#0,d0
00011FD2 1028 0025                  		move.b	$25(a0),d0
00011FD6 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011FDA 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011FDE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011FE4 6100 8C5C                  		bsr.w	AnimateSprite
00011FE8 6000 DC66                  		bra.w	MarkObjGone
00011FEC                            ; ===========================================================================
00011FEC 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011FEE 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011FF0 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011FF2                            ; ===========================================================================
00011FF2                            
00011FF2                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011FF2 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FF6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FFA 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011FFC 5428 0025                  		addq.b	#2,$25(a0)
00012000 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012006 317C 0010 0010             		move.w	#$10,$10(a0)
0001200C 117C 0001 001C             		move.b	#1,$1C(a0)
00012012 0868 0000 0022             		bchg	#0,$22(a0)
00012018 6700                       		beq.s	locret_11A96
0001201A 4468 0010                  		neg.w	$10(a0)		; change direction
0001201E                            
0001201E                            locret_11A96:
0001201E 4E75                       		rts	
00012020                            ; ===========================================================================
00012020                            
00012020                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012020 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012024 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012028 6B00                       		bmi.s	loc_11AA8
0001202A 6100 BB56                  		bsr.w	SpeedToPos
0001202E 4E75                       		rts	
00012030                            ; ===========================================================================
00012030                            
00012030                            loc_11AA8:
00012030 5528 0025                  		subq.b	#2,$25(a0)
00012034 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001203A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001203E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012044 4E75                       		rts	
00012046                            ; ===========================================================================
00012046                            
00012046                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012046 5368 0030                  		subq.w	#1,$30(a0)
0001204A 6A00                       		bpl.s	locret_11AD0
0001204C 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012050 117C 0000 0024             		move.b	#0,$24(a0)
00012056                            
00012056                            locret_11AD0:
00012056 4E75                       		rts	
00012058                            ; ===========================================================================
00012058                            
00012058                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012058 3038 D008                  		move.w	($FFFFD008).w,d0
0001205C 9068 0008                  		sub.w	8(a0),d0
00012060 6400                       		bcc.s	loc_11ADE
00012062 4440                       		neg.w	d0
00012064                            
00012064                            loc_11ADE:
00012064 0C40 0060                  		cmpi.w	#$60,d0
00012068 6400                       		bcc.s	locret_11B5E
0001206A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001206E 9068 000C                  		sub.w	$C(a0),d0
00012072 6400                       		bcc.s	Obj5F_MakeFuse
00012074 4440                       		neg.w	d0
00012076                            
00012076                            Obj5F_MakeFuse:
00012076 0C40 0060                  		cmpi.w	#$60,d0
0001207A 6400                       		bcc.s	locret_11B5E
0001207C 4A78 FE08                  		tst.w	($FFFFFE08).w
00012080 6600                       		bne.s	locret_11B5E
00012082 117C 0004 0025             		move.b	#4,$25(a0)
00012088 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001208E 4268 0010                  		clr.w	$10(a0)
00012092 117C 0002 001C             		move.b	#2,$1C(a0)
00012098 6100 BFAA                  		bsr.w	SingleObjLoad2
0001209C 6600                       		bne.s	locret_11B5E
0001209E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000120A2 3368 0008 0008             		move.w	8(a0),8(a1)
000120A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120AE 3368 000C 0034             		move.w	$C(a0),$34(a1)
000120B4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120BA 137C 0004 0028             		move.b	#4,$28(a1)
000120C0 137C 0003 001C             		move.b	#3,$1C(a1)
000120C6 337C 0010 0012             		move.w	#$10,$12(a1)
000120CC 0828 0001 0022             		btst	#1,$22(a0)
000120D2 6700                       		beq.s	loc_11B54
000120D4 4469 0012                  		neg.w	$12(a1)
000120D8                            
000120D8                            loc_11B54:
000120D8 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000120DE 2348 003C                  		move.l	a0,$3C(a1)
000120E2                            
000120E2                            locret_11B5E:
000120E2 4E75                       		rts	
000120E4                            ; ===========================================================================
000120E4                            
000120E4                            Obj5F_Display:				; XREF: Obj5F_Index
000120E4 6100                       		bsr.s	loc_11B70
000120E6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000120EC 6100 8B54                  		bsr.w	AnimateSprite
000120F0 6000 DB5E                  		bra.w	MarkObjGone
000120F4                            ; ===========================================================================
000120F4                            
000120F4                            loc_11B70:
000120F4 5368 0030                  		subq.w	#1,$30(a0)
000120F8 6B00                       		bmi.s	loc_11B7C
000120FA 6100 BA86                  		bsr.w	SpeedToPos
000120FE 4E75                       		rts	
00012100                            ; ===========================================================================
00012100                            
00012100                            loc_11B7C:
00012100 4268 0030                  		clr.w	$30(a0)
00012104 4228 0024                  		clr.b	$24(a0)
00012108 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001210E 7203                       		moveq	#3,d1
00012110 2248                       		movea.l	a0,a1
00012112 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012118 6000                       		bra.s	Obj5F_MakeShrap
0001211A                            ; ===========================================================================
0001211A                            
0001211A                            Obj5F_Loop:
0001211A 6100 BF28                  		bsr.w	SingleObjLoad2
0001211E 6600                       		bne.s	loc_11BCE
00012120                            
00012120                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012120 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012124 3368 0008 0008             		move.w	8(a0),8(a1)
0001212A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012130 137C 0006 0028             		move.b	#6,$28(a1)
00012136 137C 0004 001C             		move.b	#4,$1C(a1)
0001213C 335A 0010                  		move.w	(a2)+,$10(a1)
00012140 335A 0012                  		move.w	(a2)+,$12(a1)
00012144 137C 0098 0020             		move.b	#$98,$20(a1)
0001214A 08E9 0007 0001             		bset	#7,1(a1)
00012150                            
00012150                            loc_11BCE:
00012150 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012154                            
00012154 117C 0006 0024             		move.b	#6,$24(a0)
0001215A                            
0001215A                            Obj5F_End:				; XREF: Obj5F_Index
0001215A 6100 BA26                  		bsr.w	SpeedToPos
0001215E 0668 0018 0012             		addi.w	#$18,$12(a0)
00012164 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001216A 6100 8AD6                  		bsr.w	AnimateSprite
0001216E 4A28 0001                  		tst.b	1(a0)
00012172 6A00 BA70                  		bpl.w	DeleteObject
00012176 6000 BA30                  		bra.w	DisplaySprite
0001217A                            ; ===========================================================================
0001217A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001218A                            
0001218A                            Ani_obj5F:
0001218A                            	include "_anim\obj5F.asm"
0001218A                            ; ---------------------------------------------------------------------------
0001218A                            ; Animation script - Bomb enemy
0001218A                            ; ---------------------------------------------------------------------------
0001218A 0000                       		dc.w byte_11C12-Ani_obj5F
0001218C 0000                       		dc.w byte_11C16-Ani_obj5F
0001218E 0000                       		dc.w byte_11C1C-Ani_obj5F
00012190 0000                       		dc.w byte_11C20-Ani_obj5F
00012192 0000                       		dc.w byte_11C24-Ani_obj5F
00012194 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012198 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001219E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000121A2 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000121A6 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000121AA                            		even
000121AA                            		even
000121AA                            
000121AA                            ; ---------------------------------------------------------------------------
000121AA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121AA                            ; ---------------------------------------------------------------------------
000121AA                            Map_obj5F:
000121AA                            	include "_maps\obj5F.asm"
000121AA                            ; ---------------------------------------------------------------------------
000121AA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121AA                            ; ---------------------------------------------------------------------------
000121AA 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000121AE 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000121B2 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000121B6 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000121BA 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000121BE 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000121C2 03                         byte_11C40:	dc.b 3
000121C3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000121C8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121CD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121D2 03                         byte_11C50:	dc.b 3
000121D3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121D8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121DD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121E2 03                         byte_11C60:	dc.b 3
000121E3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121E8 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000121ED E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121F2 03                         byte_11C70:	dc.b 3
000121F3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121F8 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000121FD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012202 03                         byte_11C80:	dc.b 3
00012203 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012208 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001220D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012212 03                         byte_11C90:	dc.b 3
00012213 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012218 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001221D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012222 02                         byte_11CA0:	dc.b 2
00012223 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012228 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001222D 02                         byte_11CAB:	dc.b 2
0001222E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012233 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012238 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012239 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001223E 01                         byte_11CBC:	dc.b 1			; fuse
0001223F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012244 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012245 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001224A 01                         byte_11CC8:	dc.b 1			; fireball
0001224B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012250                            		even
00012250                            		even
00012250                            
00012250                            ; ===========================================================================
00012250                            ; ---------------------------------------------------------------------------
00012250                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012250                            ; ---------------------------------------------------------------------------
00012250                            
00012250                            Obj60:					; XREF: Obj_Index
00012250 7000                       		moveq	#0,d0
00012252 1028 0024                  		move.b	$24(a0),d0
00012256 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001225A 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001225E                            ; ===========================================================================
0001225E 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012260 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012262 0000                       		dc.w Obj60_Display-Obj60_Index
00012264 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012266 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012268                            ; ===========================================================================
00012268                            
00012268                            Obj60_Main:				; XREF: Obj60_Index
00012268 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012270 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012276 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001227C 6700                       		beq.s	loc_11D02
0001227E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012284                            
00012284                            loc_11D02:
00012284 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001228A 6600                       		bne.s	loc_11D10
0001228C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012292                            
00012292                            loc_11D10:
00012292 0028 0004 0001             		ori.b	#4,1(a0)
00012298 117C 0004 0018             		move.b	#4,$18(a0)
0001229E 117C 000B 0020             		move.b	#$B,$20(a0)
000122A4 117C 000C 0019             		move.b	#$C,$19(a0)
000122AA 7400                       		moveq	#0,d2
000122AC 45E8 0037                  		lea	$37(a0),a2
000122B0 264A                       		movea.l	a2,a3
000122B2 524A                       		addq.w	#1,a2
000122B4 7203                       		moveq	#3,d1
000122B6                            
000122B6                            Obj60_MakeOrbs:
000122B6 6100 BD8C                  		bsr.w	SingleObjLoad2
000122BA 6600                       		bne.s	loc_11D90
000122BC 5213                       		addq.b	#1,(a3)
000122BE 3A09                       		move.w	a1,d5
000122C0 0445 D000                  		subi.w	#-$3000,d5
000122C4 EC4D                       		lsr.w	#6,d5
000122C6 0245 007F                  		andi.w	#$7F,d5
000122CA 14C5                       		move.b	d5,(a2)+
000122CC 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000122CE 137C 0006 0024             		move.b	#6,$24(a1)
000122D4 2368 0004 0004             		move.l	4(a0),4(a1)
000122DA 3368 0002 0002             		move.w	2(a0),2(a1)
000122E0 0029 0004 0001             		ori.b	#4,1(a1)
000122E6 137C 0004 0018             		move.b	#4,$18(a1)
000122EC 137C 0008 0019             		move.b	#8,$19(a1)
000122F2 137C 0003 001A             		move.b	#3,$1A(a1)
000122F8 137C 0098 0020             		move.b	#$98,$20(a1)
000122FE 1342 0026                  		move.b	d2,$26(a1)
00012302 0602 0040                  		addi.b	#$40,d2
00012306 2348 003C                  		move.l	a0,$3C(a1)
0001230A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001230E                            
0001230E                            loc_11D90:
0001230E 7001                       		moveq	#1,d0
00012310 0828 0000 0022             		btst	#0,$22(a0)
00012316 6700                       		beq.s	Obj60_Move
00012318 4440                       		neg.w	d0
0001231A                            
0001231A                            Obj60_Move:
0001231A 1140 0036                  		move.b	d0,$36(a0)
0001231E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012324 5428 0024                  		addq.b	#2,$24(a0)
00012328 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001232E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012334 6700                       		beq.s	locret_11DBC	; if not, branch
00012336 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001233A                            
0001233A                            locret_11DBC:
0001233A 4E75                       		rts	
0001233C                            ; ===========================================================================
0001233C                            
0001233C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001233C 3038 D008                  		move.w	($FFFFD008).w,d0
00012340 9068 0008                  		sub.w	8(a0),d0
00012344 6400                       		bcc.s	loc_11DCA
00012346 4440                       		neg.w	d0
00012348                            
00012348                            loc_11DCA:
00012348 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001234C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001234E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012352 9068 000C                  		sub.w	$C(a0),d0
00012356 6400                       		bcc.s	loc_11DDC
00012358 4440                       		neg.w	d0
0001235A                            
0001235A                            loc_11DDC:
0001235A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001235E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012360 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012364 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012366 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001236C                            
0001236C                            Obj60_Animate:
0001236C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012372 6100 88CE                  		bsr.w	AnimateSprite
00012376 6000 0000                  		bra.w	Obj60_ChkDel
0001237A                            ; ===========================================================================
0001237A                            
0001237A                            Obj60_Display:				; XREF: Obj60_Index
0001237A 6100 B806                  		bsr.w	SpeedToPos
0001237E                            
0001237E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001237E 3028 0008                  		move.w	8(a0),d0
00012382 0240 FF80                  		andi.w	#$FF80,d0
00012386 3238 F700                  		move.w	($FFFFF700).w,d1
0001238A 0441 0080                  		subi.w	#$80,d1
0001238E 0241 FF80                  		andi.w	#$FF80,d1
00012392 9041                       		sub.w	d1,d0
00012394 0C40 0280                  		cmpi.w	#$280,d0
00012398 6200 0000                  		bhi.w	Obj60_ChkGone
0001239C 6000 B80A                  		bra.w	DisplaySprite
000123A0                            ; ===========================================================================
000123A0                            
000123A0                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000123A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000123A4 7000                       		moveq	#0,d0
000123A6 1028 0023                  		move.b	$23(a0),d0
000123AA 6700                       		beq.s	loc_11E34
000123AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000123B2                            
000123B2                            loc_11E34:
000123B2 45E8 0037                  		lea	$37(a0),a2
000123B6 7400                       		moveq	#0,d2
000123B8 141A                       		move.b	(a2)+,d2
000123BA 5342                       		subq.w	#1,d2
000123BC 6500                       		bcs.s	Obj60_Delete
000123BE                            
000123BE                            loc_11E40:
000123BE 7000                       		moveq	#0,d0
000123C0 101A                       		move.b	(a2)+,d0
000123C2 ED48                       		lsl.w	#6,d0
000123C4 0680 00FF D000             		addi.l	#$FFD000,d0
000123CA 2240                       		movea.l	d0,a1
000123CC 6100 B818                  		bsr.w	DeleteObject2
000123D0 51CA FFEC                  		dbf	d2,loc_11E40
000123D4                            
000123D4                            Obj60_Delete:
000123D4 6000 B80E                  		bra.w	DeleteObject
000123D8                            ; ===========================================================================
000123D8                            
000123D8                            Obj60_MoveOrb:				; XREF: Obj60_Index
000123D8 2268 003C                  		movea.l	$3C(a0),a1
000123DC 0C11 0060                  		cmpi.b	#$60,0(a1)
000123E0 6600 B802                  		bne.w	DeleteObject
000123E4 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000123EA 6600                       		bne.s	Obj60_Circle
000123EC 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000123F2 6600                       		bne.s	Obj60_Circle
000123F4 5428 0024                  		addq.b	#2,$24(a0)
000123F8 5329 0037                  		subq.b	#1,$37(a1)
000123FC 6600                       		bne.s	Obj60_FireOrb
000123FE 5429 0024                  		addq.b	#2,$24(a1)
00012402                            
00012402                            Obj60_FireOrb:
00012402 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012408 0829 0000 0022             		btst	#0,$22(a1)
0001240E 6700                       		beq.s	Obj60_Display2
00012410 4468 0010                  		neg.w	$10(a0)
00012414                            
00012414                            Obj60_Display2:
00012414 6000 B792                  		bra.w	DisplaySprite
00012418                            ; ===========================================================================
00012418                            
00012418                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012418 1028 0026                  		move.b	$26(a0),d0
0001241C 4EB9 0000 2C22             		jsr	(CalcSine).l
00012422 E841                       		asr.w	#4,d1
00012424 D269 0008                  		add.w	8(a1),d1
00012428 3141 0008                  		move.w	d1,8(a0)
0001242C E840                       		asr.w	#4,d0
0001242E D069 000C                  		add.w	$C(a1),d0
00012432 3140 000C                  		move.w	d0,$C(a0)
00012436 1029 0036                  		move.b	$36(a1),d0
0001243A D128 0026                  		add.b	d0,$26(a0)
0001243E 6000 B768                  		bra.w	DisplaySprite
00012442                            ; ===========================================================================
00012442                            
00012442                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012442 6100 B73E                  		bsr.w	SpeedToPos
00012446 4A28 0001                  		tst.b	1(a0)
0001244A 6A00 B798                  		bpl.w	DeleteObject
0001244E 6000 B758                  		bra.w	DisplaySprite
00012452                            ; ===========================================================================
00012452                            Ani_obj60:
00012452                            	include "_anim\obj60.asm"
00012452                            ; ---------------------------------------------------------------------------
00012452                            ; Animation script - Orbinaut enemy
00012452                            ; ---------------------------------------------------------------------------
00012452 0000                       		dc.w byte_11EDA-Ani_obj60
00012454 0000                       		dc.w byte_11EDE-Ani_obj60
00012456 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001245A 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012460                            		even
00012460                            		even
00012460                            
00012460                            ; ---------------------------------------------------------------------------
00012460                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012460                            ; ---------------------------------------------------------------------------
00012460                            Map_obj60:
00012460                            	include "_maps\obj60.asm"
00012460                            ; ---------------------------------------------------------------------------
00012460                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012460                            ; ---------------------------------------------------------------------------
00012460 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012464 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012468 01                         byte_11EEC:	dc.b 1
00012469 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001246E 01                         byte_11EF2:	dc.b 1
0001246F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012474 01                         byte_11EF8:	dc.b 1
00012475 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001247A 01                         byte_11EFE:	dc.b 1
0001247B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012480                            		even
00012480                            		even
00012480                            
00012480                            ; ===========================================================================
00012480                            ; ---------------------------------------------------------------------------
00012480                            ; Object 16 - harpoon (LZ)
00012480                            ; ---------------------------------------------------------------------------
00012480                            
00012480                            Obj16:					; XREF: Obj_Index
00012480 7000                       		moveq	#0,d0
00012482 1028 0024                  		move.b	$24(a0),d0
00012486 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001248A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001248E                            ; ===========================================================================
0001248E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012490 0000                       		dc.w Obj16_Move-Obj16_Index
00012492 0000                       		dc.w Obj16_Wait-Obj16_Index
00012494                            ; ===========================================================================
00012494                            
00012494                            Obj16_Main:				; XREF: Obj16_Index
00012494 5428 0024                  		addq.b	#2,$24(a0)
00012498 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000124A0 317C 03CC 0002             		move.w	#$3CC,2(a0)
000124A6 0028 0004 0001             		ori.b	#4,1(a0)
000124AC 117C 0004 0018             		move.b	#4,$18(a0)
000124B2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000124B8 117C 0014 0019             		move.b	#$14,$19(a0)
000124BE 317C 003C 0030             		move.w	#60,$30(a0)
000124C4                            
000124C4                            Obj16_Move:				; XREF: Obj16_Index
000124C4 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000124CA 6100 8776                  		bsr.w	AnimateSprite
000124CE 7000                       		moveq	#0,d0
000124D0 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000124D4 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000124DA 6000 D774                  		bra.w	MarkObjGone
000124DE                            ; ===========================================================================
000124DE 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000124E4                            ; ===========================================================================
000124E4                            
000124E4                            Obj16_Wait:				; XREF: Obj16_Index
000124E4 5368 0030                  		subq.w	#1,$30(a0)
000124E8 6A00                       		bpl.s	Obj16_ChkDel
000124EA 317C 003C 0030             		move.w	#60,$30(a0)
000124F0 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000124F4 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000124FA                            
000124FA                            Obj16_ChkDel:
000124FA 6000 D754                  		bra.w	MarkObjGone
000124FE                            ; ===========================================================================
000124FE                            Ani_obj16:
000124FE                            	include "_anim\obj16.asm"
000124FE                            ; ---------------------------------------------------------------------------
000124FE                            ; Animation script - harpoon (LZ)
000124FE                            ; ---------------------------------------------------------------------------
000124FE 0000                       		dc.w byte_11F8A-Ani_obj16
00012500 0000                       		dc.w byte_11F8E-Ani_obj16
00012502 0000                       		dc.w byte_11F92-Ani_obj16
00012504 0000                       		dc.w byte_11F96-Ani_obj16
00012506 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001250A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001250E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012512 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012516                            		even
00012516                            		even
00012516                            
00012516                            ; ---------------------------------------------------------------------------
00012516                            ; Sprite mappings - harpoon (LZ)
00012516                            ; ---------------------------------------------------------------------------
00012516                            Map_obj16:
00012516                            	include "_maps\obj16.asm"
00012516                            ; ---------------------------------------------------------------------------
00012516                            ; Sprite mappings - harpoon (LZ)
00012516                            ; ---------------------------------------------------------------------------
00012516 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001251A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001251E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012522 01                         byte_11FA6:	dc.b 1
00012523 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012528 01                         byte_11FAC:	dc.b 1
00012529 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001252E 02                         byte_11FB2:	dc.b 2
0001252F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012534 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012539 01                         byte_11FBD:	dc.b 1
0001253A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001253F 01                         byte_11FC3:	dc.b 1
00012540 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012545 02                         byte_11FC9:	dc.b 2
00012546 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001254B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012550                            		even
00012550                            		even
00012550                            
00012550                            ; ===========================================================================
00012550                            ; ---------------------------------------------------------------------------
00012550                            ; Object 61 - blocks (LZ)
00012550                            ; ---------------------------------------------------------------------------
00012550                            
00012550                            Obj61:					; XREF: Obj_Index
00012550 7000                       		moveq	#0,d0
00012552 1028 0024                  		move.b	$24(a0),d0
00012556 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001255A 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001255E                            ; ===========================================================================
0001255E 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012560 0000                       		dc.w Obj61_Action-Obj61_Index
00012562                            
00012562 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012564 200C                       		dc.b $20, $C
00012566 1010                       		dc.b $10, $10
00012568 1010                       		dc.b $10, $10
0001256A                            ; ===========================================================================
0001256A                            
0001256A                            Obj61_Main:				; XREF: Obj61_Index
0001256A 5428 0024                  		addq.b	#2,$24(a0)
0001256E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012576 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001257C 117C 0004 0001             		move.b	#4,1(a0)
00012582 117C 0003 0018             		move.b	#3,$18(a0)
00012588 7000                       		moveq	#0,d0
0001258A 1028 0028                  		move.b	$28(a0),d0
0001258E E648                       		lsr.w	#3,d0
00012590 0240 000E                  		andi.w	#$E,d0
00012594 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012598 115A 0019                  		move.b	(a2)+,$19(a0)
0001259C 1152 0016                  		move.b	(a2),$16(a0)
000125A0 E248                       		lsr.w	#1,d0
000125A2 1140 001A                  		move.b	d0,$1A(a0)
000125A6 3168 0008 0034             		move.w	8(a0),$34(a0)
000125AC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000125B2 1028 0028                  		move.b	$28(a0),d0
000125B6 0200 000F                  		andi.b	#$F,d0
000125BA 6700                       		beq.s	Obj61_Action
000125BC 0C00 0007                  		cmpi.b	#7,d0
000125C0 6700                       		beq.s	Obj61_Action
000125C2 117C 0001 0038             		move.b	#1,$38(a0)
000125C8                            
000125C8                            Obj61_Action:				; XREF: Obj61_Index
000125C8 3F28 0008                  		move.w	8(a0),-(sp)
000125CC 7000                       		moveq	#0,d0
000125CE 1028 0028                  		move.b	$28(a0),d0
000125D2 0240 000F                  		andi.w	#$F,d0
000125D6 D040                       		add.w	d0,d0
000125D8 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000125DC 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000125E0 381F                       		move.w	(sp)+,d4
000125E2 4A28 0001                  		tst.b	1(a0)
000125E6 6A00                       		bpl.s	Obj61_ChkDel
000125E8 7200                       		moveq	#0,d1
000125EA 1228 0019                  		move.b	$19(a0),d1
000125EE 0641 000B                  		addi.w	#$B,d1
000125F2 7400                       		moveq	#0,d2
000125F4 1428 0016                  		move.b	$16(a0),d2
000125F8 3602                       		move.w	d2,d3
000125FA 5243                       		addq.w	#1,d3
000125FC 6100 D97A                  		bsr.w	SolidObject
00012600 1144 003F                  		move.b	d4,$3F(a0)
00012604 6100 0000                  		bsr.w	loc_12180
00012608                            
00012608                            Obj61_ChkDel:
00012608 3028 0034                  		move.w	$34(a0),d0
0001260C 0240 FF80                  		andi.w	#$FF80,d0
00012610 3238 F700                  		move.w	($FFFFF700).w,d1
00012614 0441 0080                  		subi.w	#$80,d1
00012618 0241 FF80                  		andi.w	#$FF80,d1
0001261C 9041                       		sub.w	d1,d0
0001261E 0C40 0280                  		cmpi.w	#$280,d0
00012622 6200 B5C0                  		bhi.w	DeleteObject
00012626 6000 B580                  		bra.w	DisplaySprite
0001262A                            ; ===========================================================================
0001262A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001262E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012632 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012636 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001263A                            ; ===========================================================================
0001263A                            
0001263A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001263A 4E75                       		rts	
0001263C                            ; ===========================================================================
0001263C                            
0001263C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001263C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012640 6600                       		bne.s	loc_120D6	; if yes, branch
00012642 0828 0003 0022             		btst	#3,$22(a0)
00012648 6700                       		beq.s	locret_120D4
0001264A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012650                            
00012650                            locret_120D4:
00012650 4E75                       		rts	
00012652                            ; ===========================================================================
00012652                            
00012652                            loc_120D6:
00012652 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012656 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012658 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001265C 4228 0038                  		clr.b	$38(a0)
00012660 4E75                       		rts	
00012662                            ; ===========================================================================
00012662                            
00012662                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012662 6100 B51E                  		bsr.w	SpeedToPos
00012666 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001266A 6100 0000                  		bsr.w	ObjHitFloor
0001266E 4A41                       		tst.w	d1
00012670 6A00 0000                  		bpl.w	locret_12106
00012674 5241                       		addq.w	#1,d1
00012676 D368 000C                  		add.w	d1,$C(a0)
0001267A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001267E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012682                            
00012682                            locret_12106:
00012682 4E75                       		rts	
00012684                            ; ===========================================================================
00012684                            
00012684                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012684 6100 B4FC                  		bsr.w	SpeedToPos
00012688 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001268C 6100 0000                  		bsr.w	ObjHitCeiling
00012690 4A41                       		tst.w	d1
00012692 6A00 0000                  		bpl.w	locret_12126
00012696 9368 000C                  		sub.w	d1,$C(a0)
0001269A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001269E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126A2                            
000126A2                            locret_12126:
000126A2 4E75                       		rts	
000126A4                            ; ===========================================================================
000126A4                            
000126A4                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000126A4 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000126AA 6600                       		bne.s	locret_12138	; if not, branch
000126AC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000126B0 4228 0038                  		clr.b	$38(a0)
000126B4                            
000126B4                            locret_12138:
000126B4 4E75                       		rts	
000126B6                            ; ===========================================================================
000126B6                            
000126B6                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000126B6 3038 F646                  		move.w	($FFFFF646).w,d0
000126BA 9068 000C                  		sub.w	$C(a0),d0
000126BE 6700                       		beq.s	locret_1217E
000126C0 6400                       		bcc.s	loc_12162
000126C2 0C40 FFFE                  		cmpi.w	#-2,d0
000126C6 6C00                       		bge.s	loc_1214E
000126C8 70FE                       		moveq	#-2,d0
000126CA                            
000126CA                            loc_1214E:
000126CA D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000126CE 6100 0000                  		bsr.w	ObjHitCeiling
000126D2 4A41                       		tst.w	d1
000126D4 6A00 0000                  		bpl.w	locret_12160
000126D8 9368 000C                  		sub.w	d1,$C(a0)
000126DC                            
000126DC                            locret_12160:
000126DC 4E75                       		rts	
000126DE                            ; ===========================================================================
000126DE                            
000126DE                            loc_12162:				; XREF: Obj61_Type07
000126DE 0C40 0002                  		cmpi.w	#2,d0
000126E2 6F00                       		ble.s	loc_1216A
000126E4 7002                       		moveq	#2,d0
000126E6                            
000126E6                            loc_1216A:
000126E6 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000126EA 6100 0000                  		bsr.w	ObjHitFloor
000126EE 4A41                       		tst.w	d1
000126F0 6A00 0000                  		bpl.w	locret_1217E
000126F4 5241                       		addq.w	#1,d1
000126F6 D368 000C                  		add.w	d1,$C(a0)
000126FA                            
000126FA                            locret_1217E:
000126FA 4E75                       		rts	
000126FC                            ; ===========================================================================
000126FC                            
000126FC                            loc_12180:				; XREF: Obj61_Action
000126FC 4A28 0038                  		tst.b	$38(a0)
00012700 6700                       		beq.s	locret_121C0
00012702 0828 0003 0022             		btst	#3,$22(a0)
00012708 6600                       		bne.s	loc_1219A
0001270A 4A28 003E                  		tst.b	$3E(a0)
0001270E 6700                       		beq.s	locret_121C0
00012710 5928 003E                  		subq.b	#4,$3E(a0)
00012714 6000                       		bra.s	loc_121A6
00012716                            ; ===========================================================================
00012716                            
00012716                            loc_1219A:
00012716 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001271C 6700                       		beq.s	locret_121C0
0001271E 5828 003E                  		addq.b	#4,$3E(a0)
00012722                            
00012722                            loc_121A6:
00012722 1028 003E                  		move.b	$3E(a0),d0
00012726 4EB9 0000 2C22             		jsr	(CalcSine).l
0001272C 323C 0400                  		move.w	#$400,d1
00012730 C1C1                       		muls.w	d1,d0
00012732 4840                       		swap	d0
00012734 D068 0030                  		add.w	$30(a0),d0
00012738 3140 000C                  		move.w	d0,$C(a0)
0001273C                            
0001273C                            locret_121C0:
0001273C 4E75                       		rts	
0001273E                            ; ===========================================================================
0001273E                            ; ---------------------------------------------------------------------------
0001273E                            ; Sprite mappings - blocks (LZ)
0001273E                            ; ---------------------------------------------------------------------------
0001273E                            Map_obj61:
0001273E                            	include "_maps\obj61.asm"
0001273E                            ; ---------------------------------------------------------------------------
0001273E                            ; Sprite mappings - blocks (LZ)
0001273E                            ; ---------------------------------------------------------------------------
0001273E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012742 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012746 01                         byte_121CA:	dc.b 1
00012747 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001274C 02                         byte_121D0:	dc.b 2
0001274D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012752 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012757 01                         byte_121DB:	dc.b 1
00012758 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001275D 01                         byte_121E1:	dc.b 1
0001275E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012764 00                         		even
00012764 00                         		even
00012764                            
00012764                            ; ===========================================================================
00012764                            ; ---------------------------------------------------------------------------
00012764                            ; Object 62 - gargoyle head (LZ)
00012764                            ; ---------------------------------------------------------------------------
00012764                            
00012764                            Obj62:					; XREF: Obj_Index
00012764 7000                       		moveq	#0,d0
00012766 1028 0024                  		move.b	$24(a0),d0
0001276A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001276E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012772 6000 D4DC                  		bra.w	MarkObjGone
00012776                            ; ===========================================================================
00012776 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012778 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001277A 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001277C 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001277E                            
0001277E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012786                            ; ===========================================================================
00012786                            
00012786                            Obj62_Main:				; XREF: Obj62_Index
00012786 5428 0024                  		addq.b	#2,$24(a0)
0001278A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012792 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012798 0028 0004 0001             		ori.b	#4,1(a0)
0001279E 117C 0003 0018             		move.b	#3,$18(a0)
000127A4 117C 0010 0019             		move.b	#$10,$19(a0)
000127AA 1028 0028                  		move.b	$28(a0),d0	; get object type
000127AE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000127B2 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000127B8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127BE 0228 000F 0028             		andi.b	#$F,$28(a0)
000127C4                            
000127C4                            Obj62_MakeFire:				; XREF: Obj62_Index
000127C4 5328 001E                  		subq.b	#1,$1E(a0)
000127C8 6600                       		bne.s	Obj62_NoFire
000127CA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127D0 6100 B650                  		bsr.w	ChkObjOnScreen
000127D4 6600                       		bne.s	Obj62_NoFire
000127D6 6100 B856                  		bsr.w	SingleObjLoad
000127DA 6600                       		bne.s	Obj62_NoFire
000127DC 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000127E0 5829 0024                  		addq.b	#4,$24(a1)
000127E4 3368 0008 0008             		move.w	8(a0),8(a1)
000127EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127F0 1368 0001 0001             		move.b	1(a0),1(a1)
000127F6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000127FC                            
000127FC                            Obj62_NoFire:
000127FC 4E75                       		rts	
000127FE                            ; ===========================================================================
000127FE                            
000127FE                            Obj62_FireBall:				; XREF: Obj62_Index
000127FE 5428 0024                  		addq.b	#2,$24(a0)
00012802 117C 0008 0016             		move.b	#8,$16(a0)
00012808 117C 0008 0017             		move.b	#8,$17(a0)
0001280E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012816 317C 02E9 0002             		move.w	#$2E9,2(a0)
0001281C 0028 0004 0001             		ori.b	#4,1(a0)
00012822 117C 0004 0018             		move.b	#4,$18(a0)
00012828 117C 0098 0020             		move.b	#$98,$20(a0)
0001282E 117C 0008 0019             		move.b	#8,$19(a0)
00012834 117C 0002 001A             		move.b	#2,$1A(a0)
0001283A 5068 000C                  		addq.w	#8,$C(a0)
0001283E 317C 0200 0010             		move.w	#$200,$10(a0)
00012844 0828 0000 0022             		btst	#0,$22(a0)
0001284A 6600                       		bne.s	Obj62_Sound
0001284C 4468 0010                  		neg.w	$10(a0)
00012850                            
00012850                            Obj62_Sound:
00012850 303C 00AE                  		move.w	#$AE,d0
00012854 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001285A                            
0001285A                            Obj62_AniFire:				; XREF: Obj62_Index
0001285A 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001285E 0200 0007                  		andi.b	#7,d0
00012862 6600                       		bne.s	Obj62_StopFire
00012864 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001286A                            
0001286A                            Obj62_StopFire:
0001286A 6100 B316                  		bsr.w	SpeedToPos
0001286E 0828 0000 0022             		btst	#0,$22(a0)
00012874 6600                       		bne.s	Obj62_StopFire2
00012876 76F8                       		moveq	#-8,d3
00012878 6100 0000                  		bsr.w	ObjHitWallLeft
0001287C 4A41                       		tst.w	d1
0001287E 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012882 4E75                       		rts	
00012884                            ; ===========================================================================
00012884                            
00012884                            Obj62_StopFire2:
00012884 7608                       		moveq	#8,d3
00012886 6100 0000                  		bsr.w	ObjHitWallRight
0001288A 4A41                       		tst.w	d1
0001288C 6B00 B356                  		bmi.w	DeleteObject
00012890 4E75                       		rts	
00012892                            ; ===========================================================================
00012892                            ; ---------------------------------------------------------------------------
00012892                            ; Sprite mappings - gargoyle head (LZ)
00012892                            ; ---------------------------------------------------------------------------
00012892                            Map_obj62:
00012892                            	include "_maps\obj62.asm"
00012892                            ; ---------------------------------------------------------------------------
00012892                            ; Sprite mappings - gargoyle head (LZ)
00012892                            ; ---------------------------------------------------------------------------
00012892 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012896 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001289A 03                         byte_12320:	dc.b 3
0001289B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000128A0 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000128A5 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000128AA 01                         byte_12330:	dc.b 1
000128AB FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000128B0 01                         byte_12336:	dc.b 1
000128B1 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000128B6                            		even
000128B6                            		even
000128B6                            
000128B6                            ; ===========================================================================
000128B6                            ; ---------------------------------------------------------------------------
000128B6                            ; Object 63 - platforms	on a conveyor belt (LZ)
000128B6                            ; ---------------------------------------------------------------------------
000128B6                            
000128B6                            Obj63:					; XREF: Obj_Index
000128B6 7000                       		moveq	#0,d0
000128B8 1028 0024                  		move.b	$24(a0),d0
000128BC 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000128C0 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000128C4 3028 0030                  		move.w	$30(a0),d0
000128C8 0240 FF80                  		andi.w	#$FF80,d0
000128CC 3238 F700                  		move.w	($FFFFF700).w,d1
000128D0 0441 0080                  		subi.w	#$80,d1
000128D4 0241 FF80                  		andi.w	#$FF80,d1
000128D8 9041                       		sub.w	d1,d0
000128DA 0C40 0280                  		cmpi.w	#$280,d0
000128DE 6200                       		bhi.s	loc_1236A
000128E0                            
000128E0                            Obj63_Display:				; XREF: loc_1236A
000128E0 6000 B2C6                  		bra.w	DisplaySprite
000128E4                            ; ===========================================================================
000128E4                            
000128E4                            loc_1236A:				; XREF: Obj63
000128E4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000128EA 6600                       		bne.s	loc_12378
000128EC 0C40 FF80                  		cmpi.w	#-$80,d0
000128F0 64EE                       		bcc.s	Obj63_Display
000128F2                            
000128F2                            loc_12378:
000128F2 1028 002F                  		move.b	$2F(a0),d0
000128F6 6A00 B2EC                  		bpl.w	DeleteObject
000128FA 0240 007F                  		andi.w	#$7F,d0
000128FE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012902 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012908 6000 B2DA                  		bra.w	DeleteObject
0001290C                            ; ===========================================================================
0001290C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001290E 0000                       		dc.w loc_124B2-Obj63_Index
00012910 0000                       		dc.w loc_124C2-Obj63_Index
00012912 0000                       		dc.w loc_124DE-Obj63_Index
00012914                            ; ===========================================================================
00012914                            
00012914                            Obj63_Main:				; XREF: Obj63_Index
00012914 1028 0028                  		move.b	$28(a0),d0
00012918 6B00 0000                  		bmi.w	loc_12460
0001291C 5428 0024                  		addq.b	#2,$24(a0)
00012920 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012928 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001292E 0028 0004 0001             		ori.b	#4,1(a0)
00012934 117C 0010 0019             		move.b	#$10,$19(a0)
0001293A 117C 0004 0018             		move.b	#4,$18(a0)
00012940 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012946 6600                       		bne.s	loc_123E2
00012948 5828 0024                  		addq.b	#4,$24(a0)
0001294C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012952 117C 0001 0018             		move.b	#1,$18(a0)
00012958 6000 0000                  		bra.w	loc_124DE
0001295C                            ; ===========================================================================
0001295C                            
0001295C                            loc_123E2:
0001295C 117C 0004 001A             		move.b	#4,$1A(a0)
00012962 7000                       		moveq	#0,d0
00012964 1028 0028                  		move.b	$28(a0),d0
00012968 3200                       		move.w	d0,d1
0001296A E648                       		lsr.w	#3,d0
0001296C 0240 001E                  		andi.w	#$1E,d0
00012970 45FA 0000                  		lea	Obj63_Data(pc),a2
00012974 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012978 315A 0038                  		move.w	(a2)+,$38(a0)
0001297C 315A 0030                  		move.w	(a2)+,$30(a0)
00012980 214A 003C                  		move.l	a2,$3C(a0)
00012984 0241 000F                  		andi.w	#$F,d1
00012988 E549                       		lsl.w	#2,d1
0001298A 1141 0038                  		move.b	d1,$38(a0)
0001298E 117C 0004 003A             		move.b	#4,$3A(a0)
00012994 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012998 6700                       		beq.s	loc_1244C
0001299A 117C 0001 003B             		move.b	#1,$3B(a0)
000129A0 4428 003A                  		neg.b	$3A(a0)
000129A4 7200                       		moveq	#0,d1
000129A6 1228 0038                  		move.b	$38(a0),d1
000129AA D228 003A                  		add.b	$3A(a0),d1
000129AE B228 0039                  		cmp.b	$39(a0),d1
000129B2 6500                       		bcs.s	loc_12448
000129B4 1001                       		move.b	d1,d0
000129B6 7200                       		moveq	#0,d1
000129B8 4A00                       		tst.b	d0
000129BA 6A00                       		bpl.s	loc_12448
000129BC 1228 0039                  		move.b	$39(a0),d1
000129C0 5901                       		subq.b	#4,d1
000129C2                            
000129C2                            loc_12448:
000129C2 1141 0038                  		move.b	d1,$38(a0)
000129C6                            
000129C6                            loc_1244C:
000129C6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000129CC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000129D2 6100 0000                  		bsr.w	Obj63_ChangeDir
000129D6 6000 0000                  		bra.w	loc_124B2
000129DA                            ; ===========================================================================
000129DA                            
000129DA                            loc_12460:				; XREF: Obj63_Main
000129DA 1140 002F                  		move.b	d0,$2F(a0)
000129DE 0240 007F                  		andi.w	#$7F,d0
000129E2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000129E6 08F2 0000 0000             		bset	#0,(a2,d0.w)
000129EC 6600 B1F6                  		bne.w	DeleteObject
000129F0 D040                       		add.w	d0,d0
000129F2 0240 001E                  		andi.w	#$1E,d0
000129F6 0640 0070                  		addi.w	#$70,d0
000129FA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012A00 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012A04 321A                       		move.w	(a2)+,d1
00012A06 2248                       		movea.l	a0,a1
00012A08 6000                       		bra.s	Obj63_MakePtfms
00012A0A                            ; ===========================================================================
00012A0A                            
00012A0A                            Obj63_Loop:
00012A0A 6100 B622                  		bsr.w	SingleObjLoad
00012A0E 6600                       		bne.s	loc_124AA
00012A10                            
00012A10                            Obj63_MakePtfms:			; XREF: loc_12460
00012A10 12BC 0063                  		move.b	#$63,0(a1)
00012A14 335A 0008                  		move.w	(a2)+,8(a1)
00012A18 335A 000C                  		move.w	(a2)+,$C(a1)
00012A1C 301A                       		move.w	(a2)+,d0
00012A1E 1340 0028                  		move.b	d0,$28(a1)
00012A22                            
00012A22                            loc_124AA:
00012A22 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012A26                            
00012A26 588F                       		addq.l	#4,sp
00012A28 4E75                       		rts	
00012A2A                            ; ===========================================================================
00012A2A                            
00012A2A                            loc_124B2:				; XREF: Obj63_Index
00012A2A 7200                       		moveq	#0,d1
00012A2C 1228 0019                  		move.b	$19(a0),d1
00012A30 4EB9 0000 789E             		jsr	(PlatformObject).l
00012A36 6000 0000                  		bra.w	sub_12502
00012A3A                            ; ===========================================================================
00012A3A                            
00012A3A                            loc_124C2:				; XREF: Obj63_Index
00012A3A 7200                       		moveq	#0,d1
00012A3C 1228 0019                  		move.b	$19(a0),d1
00012A40 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00012A46 3F28 0008                  		move.w	8(a0),-(sp)
00012A4A 6100 0000                  		bsr.w	sub_12502
00012A4E 341F                       		move.w	(sp)+,d2
00012A50 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00012A56                            ; ===========================================================================
00012A56                            
00012A56                            loc_124DE:				; XREF: Obj63_Index
00012A56 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012A5A 0240 0003                  		andi.w	#3,d0
00012A5E 6600                       		bne.s	loc_124FC
00012A60 7201                       		moveq	#1,d1
00012A62 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012A66 6700                       		beq.s	loc_124F2
00012A68 4401                       		neg.b	d1
00012A6A                            
00012A6A                            loc_124F2:
00012A6A D328 001A                  		add.b	d1,$1A(a0)
00012A6E 0228 0003 001A             		andi.b	#3,$1A(a0)
00012A74                            
00012A74                            loc_124FC:
00012A74 588F                       		addq.l	#4,sp
00012A76 6000 D1D8                  		bra.w	MarkObjGone
00012A7A                            
00012A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A7A                            
00012A7A                            
00012A7A                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012A7A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012A7E 6700                       		beq.s	loc_12520
00012A80 4A28 003B                  		tst.b	$3B(a0)
00012A84 6600                       		bne.s	loc_12520
00012A86 117C 0001 003B             		move.b	#1,$3B(a0)
00012A8C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012A92 4428 003A                  		neg.b	$3A(a0)
00012A96 6000                       		bra.s	loc_12534
00012A98                            ; ===========================================================================
00012A98                            
00012A98                            loc_12520:
00012A98 3028 0008                  		move.w	8(a0),d0
00012A9C B068 0034                  		cmp.w	$34(a0),d0
00012AA0 6600                       		bne.s	loc_1256A
00012AA2 3028 000C                  		move.w	$C(a0),d0
00012AA6 B068 0036                  		cmp.w	$36(a0),d0
00012AAA 6600                       		bne.s	loc_1256A
00012AAC                            
00012AAC                            loc_12534:
00012AAC 7200                       		moveq	#0,d1
00012AAE 1228 0038                  		move.b	$38(a0),d1
00012AB2 D228 003A                  		add.b	$3A(a0),d1
00012AB6 B228 0039                  		cmp.b	$39(a0),d1
00012ABA 6500                       		bcs.s	loc_12552
00012ABC 1001                       		move.b	d1,d0
00012ABE 7200                       		moveq	#0,d1
00012AC0 4A00                       		tst.b	d0
00012AC2 6A00                       		bpl.s	loc_12552
00012AC4 1228 0039                  		move.b	$39(a0),d1
00012AC8 5901                       		subq.b	#4,d1
00012ACA                            
00012ACA                            loc_12552:
00012ACA 1141 0038                  		move.b	d1,$38(a0)
00012ACE 2268 003C                  		movea.l	$3C(a0),a1
00012AD2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012AD8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012ADE 6100 0000                  		bsr.w	Obj63_ChangeDir
00012AE2                            
00012AE2                            loc_1256A:
00012AE2 6100 B09E                  		bsr.w	SpeedToPos
00012AE6 4E75                       		rts	
00012AE8                            ; End of function sub_12502
00012AE8                            
00012AE8                            
00012AE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012AE8                            
00012AE8                            
00012AE8                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012AE8 7000                       		moveq	#0,d0
00012AEA 343C FF00                  		move.w	#-$100,d2
00012AEE 3028 0008                  		move.w	8(a0),d0
00012AF2 9068 0034                  		sub.w	$34(a0),d0
00012AF6 6400                       		bcc.s	loc_12584
00012AF8 4440                       		neg.w	d0
00012AFA 4442                       		neg.w	d2
00012AFC                            
00012AFC                            loc_12584:
00012AFC 7200                       		moveq	#0,d1
00012AFE 363C FF00                  		move.w	#-$100,d3
00012B02 3228 000C                  		move.w	$C(a0),d1
00012B06 9268 0036                  		sub.w	$36(a0),d1
00012B0A 6400                       		bcc.s	loc_12598
00012B0C 4441                       		neg.w	d1
00012B0E 4443                       		neg.w	d3
00012B10                            
00012B10                            loc_12598:
00012B10 B240                       		cmp.w	d0,d1
00012B12 6500                       		bcs.s	loc_125C2
00012B14 3028 0008                  		move.w	8(a0),d0
00012B18 9068 0034                  		sub.w	$34(a0),d0
00012B1C 6700                       		beq.s	loc_125AE
00012B1E 48C0                       		ext.l	d0
00012B20 E180                       		asl.l	#8,d0
00012B22 81C1                       		divs.w	d1,d0
00012B24 4440                       		neg.w	d0
00012B26                            
00012B26                            loc_125AE:
00012B26 3140 0010                  		move.w	d0,$10(a0)
00012B2A 3143 0012                  		move.w	d3,$12(a0)
00012B2E 4840                       		swap	d0
00012B30 3140 000A                  		move.w	d0,$A(a0)
00012B34 4268 000E                  		clr.w	$E(a0)
00012B38 4E75                       		rts	
00012B3A                            ; ===========================================================================
00012B3A                            
00012B3A                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B3A 3228 000C                  		move.w	$C(a0),d1
00012B3E 9268 0036                  		sub.w	$36(a0),d1
00012B42 6700                       		beq.s	loc_125D4
00012B44 48C1                       		ext.l	d1
00012B46 E181                       		asl.l	#8,d1
00012B48 83C0                       		divs.w	d0,d1
00012B4A 4441                       		neg.w	d1
00012B4C                            
00012B4C                            loc_125D4:
00012B4C 3141 0012                  		move.w	d1,$12(a0)
00012B50 3142 0010                  		move.w	d2,$10(a0)
00012B54 4841                       		swap	d1
00012B56 3141 000E                  		move.w	d1,$E(a0)
00012B5A 4268 000A                  		clr.w	$A(a0)
00012B5E 4E75                       		rts	
00012B60                            ; End of function Obj63_ChangeDir
00012B60                            
00012B60                            ; ===========================================================================
00012B60 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012B62 0000                       		dc.w word_12610-Obj63_Data
00012B64 0000                       		dc.w word_12628-Obj63_Data
00012B66 0000                       		dc.w word_1263C-Obj63_Data
00012B68 0000                       		dc.w word_12650-Obj63_Data
00012B6A 0000                       		dc.w word_12668-Obj63_Data
00012B6C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012B7C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012B88 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012B98 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012BA0 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012BB4 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012BC8 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012BE0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012BF4                            
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4                            Map_obj63:
00012BF4                            	include "_maps\obj63.asm"
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012BF8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012BFC 0000                       		dc.w byte_1269E-Map_obj63
00012BFE 01                         byte_12686:	dc.b 1
00012BFF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012C04 01                         byte_1268C:	dc.b 1
00012C05 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012C0A 01                         byte_12692:	dc.b 1
00012C0B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012C10 01                         byte_12698:	dc.b 1
00012C11 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012C16 01                         byte_1269E:	dc.b 1
00012C17 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012C1C                            		even
00012C1C                            		even
00012C1C                            
00012C1C                            ; ===========================================================================
00012C1C                            ; ---------------------------------------------------------------------------
00012C1C                            ; Object 64 - bubbles (LZ)
00012C1C                            ; ---------------------------------------------------------------------------
00012C1C                            
00012C1C                            Obj64:					; XREF: Obj_Index
00012C1C 7000                       		moveq	#0,d0
00012C1E 1028 0024                  		move.b	$24(a0),d0
00012C22 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012C26 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012C2A                            ; ===========================================================================
00012C2A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012C2C 0000                       		dc.w Obj64_Animate-Obj64_Index
00012C2E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012C30 0000                       		dc.w Obj64_Display2-Obj64_Index
00012C32 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012C34 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C36                            ; ===========================================================================
00012C36                            
00012C36                            Obj64_Main:				; XREF: Obj64_Index
00012C36 5428 0024                  		addq.b	#2,$24(a0)
00012C3A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C42 317C 8348 0002             		move.w	#$8348,2(a0)
00012C48 117C 0084 0001             		move.b	#$84,1(a0)
00012C4E 117C 0010 0019             		move.b	#$10,$19(a0)
00012C54 117C 0001 0018             		move.b	#1,$18(a0)
00012C5A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C5E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012C60 5028 0024                  		addq.b	#8,$24(a0)
00012C64 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012C68 1140 0032                  		move.b	d0,$32(a0)
00012C6C 1140 0033                  		move.b	d0,$33(a0)
00012C70 117C 0006 001C             		move.b	#6,$1C(a0)
00012C76 6000 0000                  		bra.w	Obj64_BblMaker
00012C7A                            ; ===========================================================================
00012C7A                            
00012C7A                            Obj64_Bubble:				; XREF: Obj64_Main
00012C7A 1140 001C                  		move.b	d0,$1C(a0)
00012C7E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C84 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012C8A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012C90 1140 0026                  		move.b	d0,$26(a0)
00012C94                            
00012C94                            Obj64_Animate:				; XREF: Obj64_Index
00012C94 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012C9A 4EB9 0000 AC42             		jsr	AnimateSprite
00012CA0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012CA6 6600                       		bne.s	Obj64_ChkWater
00012CA8 117C 0001 002E             		move.b	#1,$2E(a0)
00012CAE                            
00012CAE                            Obj64_ChkWater:				; XREF: Obj64_Index
00012CAE 3038 F646                  		move.w	($FFFFF646).w,d0
00012CB2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012CB6 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012CB8                            
00012CB8                            Obj64_Burst:				; XREF: Obj64_Wobble
00012CB8 117C 0006 0024             		move.b	#6,$24(a0)
00012CBE 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012CC2 6000 0000                  		bra.w	Obj64_Display2
00012CC6                            ; ===========================================================================
00012CC6                            
00012CC6                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012CC6 1028 0026                  		move.b	$26(a0),d0
00012CCA 5228 0026                  		addq.b	#1,$26(a0)
00012CCE 0240 007F                  		andi.w	#$7F,d0
00012CD2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012CD8 1031 0000                  		move.b	(a1,d0.w),d0
00012CDC 4880                       		ext.w	d0
00012CDE D068 0030                  		add.w	$30(a0),d0
00012CE2 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012CE6 4A28 002E                  		tst.b	$2E(a0)
00012CEA 6700                       		beq.s	Obj64_Display
00012CEC 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012CF0 6700                       		beq.s	Obj64_Display	; if not, branch
00012CF2                            
00012CF2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012CF6 303C 00AD                  		move.w	#$AD,d0
00012CFA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012D00 43F8 D000                  		lea	($FFFFD000).w,a1
00012D04 4269 0010                  		clr.w	$10(a1)
00012D08 4269 0012                  		clr.w	$12(a1)
00012D0C 4269 0014                  		clr.w	$14(a1)
00012D10 137C 0015 001C             		move.b	#$15,$1C(a1)
00012D16 337C 0023 003E             		move.w	#$23,$3E(a1)
00012D1C 137C 0000 003C             		move.b	#0,$3C(a1)
00012D22 08A9 0005 0022             		bclr	#5,$22(a1)
00012D28 08A9 0004 0022             		bclr	#4,$22(a1)
00012D2E 0829 0002 0022             		btst	#2,$22(a1)
00012D34 6700 FF82                  		beq.w	Obj64_Burst
00012D38 08A9 0002 0022             		bclr	#2,$22(a1)
00012D3E 137C 0013 0016             		move.b	#$13,$16(a1)
00012D44 137C 0009 0017             		move.b	#9,$17(a1)
00012D4A 5B69 000C                  		subq.w	#5,$C(a1)
00012D4E 6000 FF68                  		bra.w	Obj64_Burst
00012D52                            ; ===========================================================================
00012D52                            
00012D52                            Obj64_Display:				; XREF: Obj64_Wobble
00012D52 6100 AE2E                  		bsr.w	SpeedToPos
00012D56 4A28 0001                  		tst.b	1(a0)
00012D5A 6A00                       		bpl.s	Obj64_Delete
00012D5C 4EFA AE4A                  		jmp	DisplaySprite
00012D60                            ; ===========================================================================
00012D60                            
00012D60                            Obj64_Delete:
00012D60 4EFA AE82                  		jmp	DeleteObject
00012D64                            ; ===========================================================================
00012D64                            
00012D64                            Obj64_Display2:				; XREF: Obj64_Index
00012D64 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D6A 4EB9 0000 AC42             		jsr	AnimateSprite
00012D70 4A28 0001                  		tst.b	1(a0)
00012D74 6A00                       		bpl.s	Obj64_Delete2
00012D76 4EFA AE30                  		jmp	DisplaySprite
00012D7A                            ; ===========================================================================
00012D7A                            
00012D7A                            Obj64_Delete2:
00012D7A 4EFA AE68                  		jmp	DeleteObject
00012D7E                            ; ===========================================================================
00012D7E                            
00012D7E                            Obj64_Delete3:				; XREF: Obj64_Index
00012D7E 6000 AE64                  		bra.w	DeleteObject
00012D82                            ; ===========================================================================
00012D82                            
00012D82                            Obj64_BblMaker:				; XREF: Obj64_Index
00012D82 4A68 0036                  		tst.w	$36(a0)
00012D86 6600                       		bne.s	loc_12874
00012D88 3038 F646                  		move.w	($FFFFF646).w,d0
00012D8C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012D90 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012D94 4A28 0001                  		tst.b	1(a0)
00012D98 6A00 0000                  		bpl.w	Obj64_ChkDel
00012D9C 5368 0038                  		subq.w	#1,$38(a0)
00012DA0 6A00 0000                  		bpl.w	loc_12914
00012DA4 317C 0001 0036             		move.w	#1,$36(a0)
00012DAA                            
00012DAA                            loc_1283A:
00012DAA 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DB0 3200                       		move.w	d0,d1
00012DB2 0240 0007                  		andi.w	#7,d0
00012DB6 0C40 0006                  		cmpi.w	#6,d0
00012DBA 64EE                       		bcc.s	loc_1283A
00012DBC                            
00012DBC 1140 0034                  		move.b	d0,$34(a0)
00012DC0 0241 000C                  		andi.w	#$C,d1
00012DC4 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012DCA D2C1                       		adda.w	d1,a1
00012DCC 2149 003C                  		move.l	a1,$3C(a0)
00012DD0 5328 0032                  		subq.b	#1,$32(a0)
00012DD4 6A00                       		bpl.s	loc_12872
00012DD6 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012DDC 08E8 0007 0036             		bset	#7,$36(a0)
00012DE2                            
00012DE2                            loc_12872:
00012DE2 6000                       		bra.s	loc_1287C
00012DE4                            ; ===========================================================================
00012DE4                            
00012DE4                            loc_12874:				; XREF: Obj64_BblMaker
00012DE4 5368 0038                  		subq.w	#1,$38(a0)
00012DE8 6A00 0000                  		bpl.w	loc_12914
00012DEC                            
00012DEC                            loc_1287C:
00012DEC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DF2 0240 001F                  		andi.w	#$1F,d0
00012DF6 3140 0038                  		move.w	d0,$38(a0)
00012DFA 6100 B232                  		bsr.w	SingleObjLoad
00012DFE 6600                       		bne.s	loc_128F8
00012E00 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012E04 3368 0008 0008             		move.w	8(a0),8(a1)
00012E0A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E10 0240 000F                  		andi.w	#$F,d0
00012E14 5140                       		subq.w	#8,d0
00012E16 D169 0008                  		add.w	d0,8(a1)
00012E1A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012E20 7000                       		moveq	#0,d0
00012E22 1028 0034                  		move.b	$34(a0),d0
00012E26 2468 003C                  		movea.l	$3C(a0),a2
00012E2A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012E30 0828 0007 0036             		btst	#7,$36(a0)
00012E36 6700                       		beq.s	loc_128F8
00012E38 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E3E 0240 0003                  		andi.w	#3,d0
00012E42 6600                       		bne.s	loc_128E4
00012E44 08E8 0006 0036             		bset	#6,$36(a0)
00012E4A 6600                       		bne.s	loc_128F8
00012E4C 137C 0002 0028             		move.b	#2,$28(a1)
00012E52                            
00012E52                            loc_128E4:
00012E52 4A28 0034                  		tst.b	$34(a0)
00012E56 6600                       		bne.s	loc_128F8
00012E58 08E8 0006 0036             		bset	#6,$36(a0)
00012E5E 6600                       		bne.s	loc_128F8
00012E60 137C 0002 0028             		move.b	#2,$28(a1)
00012E66                            
00012E66                            loc_128F8:
00012E66 5328 0034                  		subq.b	#1,$34(a0)
00012E6A 6A00                       		bpl.s	loc_12914
00012E6C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E72 0240 007F                  		andi.w	#$7F,d0
00012E76 0640 0080                  		addi.w	#$80,d0
00012E7A D168 0038                  		add.w	d0,$38(a0)
00012E7E 4268 0036                  		clr.w	$36(a0)
00012E82                            
00012E82                            loc_12914:
00012E82 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E88 4EB9 0000 AC42             		jsr	AnimateSprite
00012E8E                            
00012E8E                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012E8E 3028 0008                  		move.w	8(a0),d0
00012E92 0240 FF80                  		andi.w	#$FF80,d0
00012E96 3238 F700                  		move.w	($FFFFF700).w,d1
00012E9A 0441 0080                  		subi.w	#$80,d1
00012E9E 0241 FF80                  		andi.w	#$FF80,d1
00012EA2 9041                       		sub.w	d1,d0
00012EA4 0C40 0280                  		cmpi.w	#$280,d0
00012EA8 6200 AD3A                  		bhi.w	DeleteObject
00012EAC 3038 F646                  		move.w	($FFFFF646).w,d0
00012EB0 B068 000C                  		cmp.w	$C(a0),d0
00012EB4 6500 ACF2                  		bcs.w	DisplaySprite
00012EB8 4E75                       		rts	
00012EBA                            ; ===========================================================================
00012EBA                            ; bubble production sequence
00012EBA                            
00012EBA                            ; 0 = small bubble, 1 =	large bubble
00012EBA                            
00012EBA 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012ECC                            
00012ECC                            ; ===========================================================================
00012ECC                            
00012ECC                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012ECC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012ED0 6B00                       		bmi.s	loc_12998
00012ED2 43F8 D000                  		lea	($FFFFD000).w,a1
00012ED6 3029 0008                  		move.w	8(a1),d0
00012EDA 3228 0008                  		move.w	8(a0),d1
00012EDE 0441 0010                  		subi.w	#$10,d1
00012EE2 B240                       		cmp.w	d0,d1
00012EE4 6400                       		bcc.s	loc_12998
00012EE6 0641 0020                  		addi.w	#$20,d1
00012EEA B240                       		cmp.w	d0,d1
00012EEC 6500                       		bcs.s	loc_12998
00012EEE 3029 000C                  		move.w	$C(a1),d0
00012EF2 3228 000C                  		move.w	$C(a0),d1
00012EF6 B240                       		cmp.w	d0,d1
00012EF8 6400                       		bcc.s	loc_12998
00012EFA 0641 0010                  		addi.w	#$10,d1
00012EFE B240                       		cmp.w	d0,d1
00012F00 6500                       		bcs.s	loc_12998
00012F02 7001                       		moveq	#1,d0
00012F04 4E75                       		rts	
00012F06                            ; ===========================================================================
00012F06                            
00012F06                            loc_12998:
00012F06 7000                       		moveq	#0,d0
00012F08 4E75                       		rts	
00012F0A                            ; ===========================================================================
00012F0A                            Ani_obj64:
00012F0A                            	include "_anim\obj64.asm"
00012F0A                            ; ---------------------------------------------------------------------------
00012F0A                            ; Animation script - bubbles (LZ)
00012F0A                            ; ---------------------------------------------------------------------------
00012F0A 0000                       		dc.w byte_129AA-Ani_obj64
00012F0C 0000                       		dc.w byte_129B0-Ani_obj64
00012F0E 0000                       		dc.w byte_129B6-Ani_obj64
00012F10 0000                       		dc.w byte_129BE-Ani_obj64
00012F12 0000                       		dc.w byte_129BE-Ani_obj64
00012F14 0000                       		dc.w byte_129C0-Ani_obj64
00012F16 0000                       		dc.w byte_129C6-Ani_obj64
00012F18 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012F1E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012F24 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012F2C 04FC                       byte_129BE:	dc.b 4,	$FC
00012F2E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012F34 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F3A 00                         		even
00012F3A 00                         		even
00012F3A                            
00012F3A                            ; ---------------------------------------------------------------------------
00012F3A                            ; Sprite mappings - bubbles (LZ)
00012F3A                            ; ---------------------------------------------------------------------------
00012F3A                            Map_obj64:
00012F3A                            	include "_maps\obj64.asm"
00012F3A                            ; ---------------------------------------------------------------------------
00012F3A                            ; Sprite mappings - bubbles (LZ)
00012F3A                            ; ---------------------------------------------------------------------------
00012F3A 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F3E 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F42 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F46 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012F4A 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012F4E 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012F52 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012F56 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012F5A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012F5E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012F62 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012F66 0000                       		dc.w byte_12A9C-Map_obj64
00012F68 01                         byte_129FA:	dc.b 1
00012F69 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012F6E 01                         byte_12A00:	dc.b 1
00012F6F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012F74 01                         byte_12A06:	dc.b 1
00012F75 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012F7A 01                         byte_12A0C:	dc.b 1
00012F7B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012F80 01                         byte_12A12:	dc.b 1
00012F81 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012F86 01                         byte_12A18:	dc.b 1
00012F87 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012F8C 01                         byte_12A1E:	dc.b 1
00012F8D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012F92 04                         byte_12A24:	dc.b 4
00012F93 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012F98 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012F9D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012FA2 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012FA7 04                         byte_12A39:	dc.b 4
00012FA8 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012FAD F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012FB2 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012FB7 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012FBC 01                         byte_12A4E:	dc.b 1
00012FBD F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012FC2 01                         byte_12A54:	dc.b 1
00012FC3 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012FC8 01                         byte_12A5A:	dc.b 1
00012FC9 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012FCE 01                         byte_12A60:	dc.b 1
00012FCF F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012FD4 01                         byte_12A66:	dc.b 1
00012FD5 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012FDA 01                         byte_12A6C:	dc.b 1
00012FDB F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012FE0 01                         byte_12A72:	dc.b 1
00012FE1 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012FE6 01                         byte_12A78:	dc.b 1
00012FE7 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012FEC 01                         byte_12A7E:	dc.b 1
00012FED F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012FF2 01                         byte_12A84:	dc.b 1
00012FF3 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012FF8 01                         byte_12A8A:	dc.b 1
00012FF9 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012FFE 01                         byte_12A90:	dc.b 1
00012FFF F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013004 01                         byte_12A96:	dc.b 1
00013005 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001300A 00                         byte_12A9C:	dc.b 0
0001300C 00                         		even
0001300C 00                         		even
0001300C                            
0001300C                            ; ===========================================================================
0001300C                            ; ---------------------------------------------------------------------------
0001300C                            ; Object 65 - waterfalls (LZ)
0001300C                            ; ---------------------------------------------------------------------------
0001300C                            
0001300C                            Obj65:					; XREF: Obj_Index
0001300C 7000                       		moveq	#0,d0
0001300E 1028 0024                  		move.b	$24(a0),d0
00013012 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013016 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001301A                            ; ===========================================================================
0001301A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001301C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001301E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013020 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013022 0000                       		dc.w loc_12B36-Obj65_Index
00013024                            ; ===========================================================================
00013024                            
00013024                            Obj65_Main:				; XREF: Obj65_Index
00013024 5828 0024                  		addq.b	#4,$24(a0)
00013028 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013030 317C 4259 0002             		move.w	#$4259,2(a0)
00013036 0028 0004 0001             		ori.b	#4,1(a0)
0001303C 117C 0018 0019             		move.b	#$18,$19(a0)
00013042 117C 0001 0018             		move.b	#1,$18(a0)
00013048 1028 0028                  		move.b	$28(a0),d0	; get object type
0001304C 6A00                       		bpl.s	loc_12AE6
0001304E 08E8 0007 0002             		bset	#7,2(a0)
00013054                            
00013054                            loc_12AE6:
00013054 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013058 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001305C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013060 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013062 4228 0018                  		clr.b	$18(a0)
00013066 5528 0024                  		subq.b	#2,$24(a0)
0001306A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013070 6700                       		beq.s	loc_12B0A	; if not, branch
00013072 117C 0006 0024             		move.b	#6,$24(a0)
00013078                            
00013078                            loc_12B0A:
00013078 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001307E 6700                       		beq.s	Obj65_Animate	; if not, branch
00013080 117C 0008 0024             		move.b	#8,$24(a0)
00013086                            
00013086                            Obj65_Animate:				; XREF: Obj65_Index
00013086 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001308C 4EB9 0000 AC42             		jsr	AnimateSprite
00013092                            
00013092                            Obj65_ChkDel:				; XREF: Obj65_Index
00013092 6000 CBBC                  		bra.w	MarkObjGone
00013096                            ; ===========================================================================
00013096                            
00013096                            Obj65_FixHeight:			; XREF: Obj65_Index
00013096 3038 F646                  		move.w	($FFFFF646).w,d0
0001309A 0440 0010                  		subi.w	#$10,d0
0001309E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000130A2 60E2                       		bra.s	Obj65_Animate
000130A4                            ; ===========================================================================
000130A4                            
000130A4                            loc_12B36:				; XREF: Obj65_Index
000130A4 08A8 0007 0002             		bclr	#7,2(a0)
000130AA 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000130B0 6600                       		bne.s	Obj65_Animate2
000130B2 08E8 0007 0002             		bset	#7,2(a0)
000130B8                            
000130B8                            Obj65_Animate2:
000130B8 60CC                       		bra.s	Obj65_Animate
000130BA                            ; ===========================================================================
000130BA                            Ani_obj65:
000130BA                            	include "_anim\obj65.asm"
000130BA                            ; ---------------------------------------------------------------------------
000130BA                            ; Animation script - waterfall (LZ)
000130BA                            ; ---------------------------------------------------------------------------
000130BA 0000                       		dc.w byte_12B4E-Ani_obj65
000130BC 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000130C2 00                         		even
000130C2 00                         		even
000130C2                            
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            ; Sprite mappings - waterfalls (LZ)
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            Map_obj65:
000130C2                            	include "_maps\obj65.asm"
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            ; Sprite mappings - waterfalls (LZ)
000130C2                            ; ---------------------------------------------------------------------------
000130C2 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000130C6 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000130CA 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000130CE 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000130D2 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000130D6 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000130DA 01                         byte_12B6C:	dc.b 1
000130DB F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000130E0 02                         byte_12B72:	dc.b 2
000130E1 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000130E6 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000130EB 02                         byte_12B7D:	dc.b 2
000130EC F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130F1 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130F6 01                         byte_12B88:	dc.b 1
000130F7 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000130FC 02                         byte_12B8E:	dc.b 2
000130FD F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013102 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013107 01                         byte_12B99:	dc.b 1
00013108 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001310D 01                         byte_12B9F:	dc.b 1
0001310E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013113 01                         byte_12BA5:	dc.b 1
00013114 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013119 02                         byte_12BAB:	dc.b 2
0001311A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001311F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013124 02                         byte_12BB6:	dc.b 2
00013125 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001312A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001312F 02                         byte_12BC1:	dc.b 2
00013130 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013135 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001313A 02                         byte_12BCC:	dc.b 2
0001313B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013140 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013146 00                         		even
00013146 00                         		even
00013146                            
00013146                            ; ===========================================================================
00013146                            ; ---------------------------------------------------------------------------
00013146                            ; Object 01 - Sonic
00013146                            ; ---------------------------------------------------------------------------
00013146                            
00013146                            Obj01:					; XREF: Obj_Index
00013146 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001314A 6700                       		beq.s	Obj01_Normal	; if not, branch
0001314C 4EF9 0000 0000             		jmp	DebugMode
00013152                            ; ===========================================================================
00013152                            
00013152                            Obj01_Normal:
00013152 7000                       		moveq	#0,d0
00013154 1028 0024                  		move.b	$24(a0),d0
00013158 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001315C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013160                            ; ===========================================================================
00013160 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013162 0000                       		dc.w Obj01_Control-Obj01_Index
00013164 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013166 0000                       		dc.w Obj01_Death-Obj01_Index
00013168 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001316A                            ; ===========================================================================
0001316A                            
0001316A                            Obj01_Main:				; XREF: Obj01_Index
0001316A 5428 0024                  		addq.b	#2,$24(a0)
0001316E 117C 0013 0016             		move.b	#$13,$16(a0)
00013174 117C 0009 0017             		move.b	#9,$17(a0)
0001317A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00013182 317C 0780 0002             		move.w	#$780,2(a0)
00013188 117C 0002 0018             		move.b	#2,$18(a0)
0001318E 117C 0018 0019             		move.b	#$18,$19(a0)
00013194 117C 0004 0001             		move.b	#4,1(a0)
0001319A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000131A0 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000131A6 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000131AC                            
000131AC                            Obj01_Control:				; XREF: Obj01_Index
000131AC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000131B0 6700                       		beq.s	loc_12C58	; if not, branch
000131B2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000131B8 6700                       		beq.s	loc_12C58	; if not, branch
000131BA 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000131C0 4238 F7CC                  		clr.b	($FFFFF7CC).w
000131C4 4E75                       		rts	
000131C6                            ; ===========================================================================
000131C6                            
000131C6                            loc_12C58:
000131C6 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000131CA 6600                       		bne.s	loc_12C64	; if yes, branch
000131CC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000131D2                            
000131D2                            loc_12C64:
000131D2 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000131D8 6600                       		bne.s	loc_12C7E	; if yes, branch
000131DA 7000                       		moveq	#0,d0
000131DC 1028 0022                  		move.b	$22(a0),d0
000131E0 0240 0006                  		andi.w	#6,d0
000131E4 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000131E8 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000131EC                            
000131EC                            loc_12C7E:
000131EC 6100                       		bsr.s	Sonic_Display
000131EE 6100 0000                  		bsr.w	Sonic_RecordPos
000131F2 6100 0000                  		bsr.w	Sonic_Water
000131F6 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000131FC 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013202 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013206 6700                       		beq.s	loc_12CA6
00013208 4A28 001C                  		tst.b	$1C(a0)
0001320C 6600                       		bne.s	loc_12CA6
0001320E 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013214                            
00013214                            loc_12CA6:
00013214 6100 0000                  		bsr.w	Sonic_Animate
00013218 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001321C 6B00                       		bmi.s	loc_12CB6
0001321E 4EB9 0000 0000             		jsr	TouchResponse
00013224                            
00013224                            loc_12CB6:
00013224 6100 0000                  		bsr.w	Sonic_Loops
00013228 6100 0000                  		bsr.w	LoadSonicDynPLC
0001322C 4E75                       		rts	
0001322E                            ; ===========================================================================
0001322E 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013230 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013232 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013234 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013236                            ; ---------------------------------------------------------------------------
00013236                            ; Music	to play	after invincibility wears off
00013236                            ; ---------------------------------------------------------------------------
00013236                            ; ===========================================================================
00013236                            
00013236                            Sonic_Display:				; XREF: loc_12C7E
00013236 3028 0030                  		move.w	$30(a0),d0
0001323A 6700                       		beq.s	Obj01_Display
0001323C 5368 0030                  		subq.w	#1,$30(a0)
00013240 E648                       		lsr.w	#3,d0
00013242 6400                       		bcc.s	Obj01_ChkInvin
00013244                            
00013244                            Obj01_Display:
00013244 4EBA A962                  		jsr	DisplaySprite
00013248                            
00013248                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013248                             
00013248                            Obj01_ChkInvin:
00013248 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001324C 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013250 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013254 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013258 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001325C 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013260 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013264 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013268 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001326E 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013272 7000                       		moveq	#0,d0
00013274 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013278                             
00013278 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001327E 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013280 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013286 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013288                             
00013288                            Obj01_GetBgm2:
00013288 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001328E 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013290 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013296 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013298                             
00013298                            Obj01_GetBgm3:
00013298 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001329E 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
000132A0 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000132A6 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132A8                             
000132A8                            Obj01_GetBgm4:
000132A8 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000132AE 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
000132B0 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000132B6                             
000132B6                            Obj01_PlayMusic:
000132B6 1031 0000                  		move.b	(a1,d0.w),d0
000132BA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
000132C0                             
000132C0                            ; NineKode ends here.
000132C0                            
000132C0                            Obj01_RmvInvin:
000132C0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000132C6                            
000132C6                            Obj01_ChkShoes:
000132C6 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000132CA 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000132CC 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000132D0 6700                       		beq.s	Obj01_ExitChk
000132D2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000132D6 6600                       		bne.s	Obj01_ExitChk
000132D8 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000132DE 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000132E4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000132EA 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000132F0 303C 00E3                  		move.w	#$E3,d0
000132F4 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
000132FA                            ; ===========================================================================
000132FA                            
000132FA                            Obj01_ExitChk:
000132FA 4E75                       		rts	
000132FC                            
000132FC                            ; ---------------------------------------------------------------------------
000132FC                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000132FC                            ; ---------------------------------------------------------------------------
000132FC                            
000132FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132FC                            
000132FC                            
000132FC                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000132FC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013300 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013304 43F1 0000                  		lea	(a1,d0.w),a1
00013308 32E8 0008                  		move.w	8(a0),(a1)+
0001330C 32E8 000C                  		move.w	$C(a0),(a1)+
00013310 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013314 4E75                       		rts	
00013316                            ; End of function Sonic_RecordPos
00013316                            
00013316                            ; ---------------------------------------------------------------------------
00013316                            ; Subroutine for Sonic when he's underwater
00013316                            ; ---------------------------------------------------------------------------
00013316                            
00013316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013316                            
00013316                            
00013316                            Sonic_Water:				; XREF: loc_12C7E
00013316 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001331C 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001331E                            
0001331E                            locret_12D80:
0001331E 4E75                       		rts	
00013320                            ; ===========================================================================
00013320                            
00013320                            Obj01_InWater:
00013320 3038 F646                  		move.w	($FFFFF646).w,d0
00013324 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013328 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001332A 08E8 0006 0022             		bset	#6,$22(a0)
00013330 66EC                       		bne.s	locret_12D80
00013332 6100 0000                  		bsr.w	ResumeMusic
00013336 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001333C 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013342 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013348 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001334E 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013354 E0E8 0010                  		asr	$10(a0)
00013358 E0E8 0012                  		asr	$12(a0)
0001335C E0E8 0012                  		asr	$12(a0)
00013360 67BC                       		beq.s	locret_12D80
00013362 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013368 303C 00AA                  		move.w	#$AA,d0
0001336C 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013372                            ; ===========================================================================
00013372                            
00013372                            Obj01_OutWater:
00013372 08A8 0006 0022             		bclr	#6,$22(a0)
00013378 67A4                       		beq.s	locret_12D80
0001337A 6100 0000                  		bsr.w	ResumeMusic
0001337E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013384 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001338A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013390 E1E8 0012                  		asl	$12(a0)
00013394 6700 FF88                  		beq.w	locret_12D80
00013398 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001339E 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000133A4 6E00                       		bgt.s	loc_12E0E
000133A6 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000133AC                            
000133AC                            loc_12E0E:
000133AC 303C 00AA                  		move.w	#$AA,d0
000133B0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
000133B6                            ; End of function Sonic_Water
000133B6                            
000133B6                            ; ===========================================================================
000133B6                            ; ---------------------------------------------------------------------------
000133B6                            ; Modes	for controlling	Sonic
000133B6                            ; ---------------------------------------------------------------------------
000133B6                            
000133B6                            Obj01_MdNormal:				; XREF: Obj01_Modes
000133B6 6100 0000                  		bsr.w	Sonic_Jump
000133BA 6100 0000                  		bsr.w	Sonic_SlopeResist
000133BE 6100 0000                  		bsr.w	Sonic_Move
000133C2 6100 0000                  		bsr.w	Sonic_Roll
000133C6 6100 0000                  		bsr.w	Sonic_LevelBound
000133CA 4EBA A7B6                  		jsr	SpeedToPos
000133CE 6100 0000                  		bsr.w	Sonic_AnglePos
000133D2 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133D6 4E75                       		rts	
000133D8                            ; ===========================================================================
000133D8                            
000133D8                            Obj01_MdJump:				; XREF: Obj01_Modes
000133D8 6100 0000                  		bsr.w	Sonic_JumpHeight
000133DC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133E0 6100 0000                  		bsr.w	Sonic_LevelBound
000133E4 4EBA A770                  		jsr	ObjectFall
000133E8 0828 0006 0022             		btst	#6,$22(a0)
000133EE 6700                       		beq.s	loc_12E5C
000133F0 0468 0028 0012             		subi.w	#$28,$12(a0)
000133F6                            
000133F6                            loc_12E5C:
000133F6 6100 0000                  		bsr.w	Sonic_JumpAngle
000133FA 6100 0000                  		bsr.w	Sonic_Floor
000133FE 4E75                       		rts	
00013400                            ; ===========================================================================
00013400                            
00013400                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013400 6100 0000                  		bsr.w	Sonic_Jump
00013404 6100 0000                  		bsr.w	Sonic_RollRepel
00013408 6100 0000                  		bsr.w	Sonic_RollSpeed
0001340C 6100 0000                  		bsr.w	Sonic_LevelBound
00013410 4EBA A770                  		jsr	SpeedToPos
00013414 6100 0000                  		bsr.w	Sonic_AnglePos
00013418 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001341C 4E75                       		rts	
0001341E                            ; ===========================================================================
0001341E                            
0001341E                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001341E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013422 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013426 6100 0000                  		bsr.w	Sonic_LevelBound
0001342A 4EBA A72A                  		jsr	ObjectFall
0001342E 0828 0006 0022             		btst	#6,$22(a0)
00013434 6700                       		beq.s	loc_12EA6
00013436 0468 0028 0012             		subi.w	#$28,$12(a0)
0001343C                            
0001343C                            loc_12EA6:
0001343C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013440 6100 0000                  		bsr.w	Sonic_Floor
00013444 4E75                       		rts	
00013446                            ; ---------------------------------------------------------------------------
00013446                            ; Subroutine to	make Sonic walk/run
00013446                            ; ---------------------------------------------------------------------------
00013446                            
00013446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013446                            
00013446                            
00013446                            Sonic_Move:				; XREF: Obj01_MdNormal
00013446 3C38 F760                  		move.w	($FFFFF760).w,d6
0001344A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001344E 3838 F764                  		move.w	($FFFFF764).w,d4
00013452 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013456 6600 0000                  		bne.w	loc_12FEE
0001345A 4A68 003E                  		tst.w	$3E(a0)
0001345E 6600 0000                  		bne.w	Obj01_ResetScr
00013462 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013468 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001346A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013470 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013472 6100 0000                  		bsr.w	Sonic_MoveLeft
00013476                            
00013476                            Obj01_NotLeft:
00013476 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001347C 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001347E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013484 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013486 6100 0000                  		bsr.w	Sonic_MoveLeft
0001348A 6000                       		bra.s	Obj01_NotRight
0001348C                            
0001348C                            Obj01_MoveRight:
0001348C 6100 0000                  		bsr.w	Sonic_MoveRight
00013490                            
00013490                            Obj01_NotRight:
00013490 1028 0026                  		move.b	$26(a0),d0
00013494 0600 0020                  		addi.b	#$20,d0
00013498 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001349C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000134A0 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000134A4 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000134A8 08A8 0005 0022             		bclr	#5,$22(a0)
000134AE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000134B4 0828 0003 0022             		btst	#3,$22(a0)
000134BA 6700                       		beq.s	Sonic_Balance
000134BC 7000                       		moveq	#0,d0
000134BE 1028 003D                  		move.b	$3D(a0),d0
000134C2 ED48                       		lsl.w	#6,d0
000134C4 43F8 D000                  		lea	($FFFFD000).w,a1
000134C8 43F1 0000                  		lea	(a1,d0.w),a1
000134CC 4A29 0022                  		tst.b	$22(a1)
000134D0 6B00                       		bmi.s	Sonic_LookUp
000134D2 7200                       		moveq	#0,d1
000134D4 1229 0019                  		move.b	$19(a1),d1
000134D8 3401                       		move.w	d1,d2
000134DA D442                       		add.w	d2,d2
000134DC 5942                       		subq.w	#4,d2
000134DE D268 0008                  		add.w	8(a0),d1
000134E2 9269 0008                  		sub.w	8(a1),d1
000134E6 0C41 0004                  		cmpi.w	#4,d1
000134EA 6D00                       		blt.s	loc_12F6A
000134EC B242                       		cmp.w	d2,d1
000134EE 6C00                       		bge.s	loc_12F5A
000134F0 6000                       		bra.s	Sonic_LookUp
000134F2                            ; ===========================================================================
000134F2                            
000134F2                            Sonic_Balance:
000134F2 4EB9 0000 0000             		jsr	ObjHitFloor
000134F8 0C41 000C                  		cmpi.w	#$C,d1
000134FC 6D00                       		blt.s	Sonic_LookUp
000134FE 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013504 6600                       		bne.s	loc_12F62
00013506                            
00013506                            loc_12F5A:
00013506 08A8 0000 0022             		bclr	#0,$22(a0)
0001350C 6000                       		bra.s	loc_12F70
0001350E                            ; ===========================================================================
0001350E                            
0001350E                            loc_12F62:
0001350E 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013514 6600                       		bne.s	Sonic_LookUp
00013516                            
00013516                            loc_12F6A:
00013516 08E8 0000 0022             		bset	#0,$22(a0)
0001351C                            
0001351C                            loc_12F70:
0001351C 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013522 6000                       		bra.s	Obj01_ResetScr
00013524                            ; ===========================================================================
00013524                            
00013524                            Sonic_LookUp:
00013524 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001352A 6700                       		beq.s	Sonic_Duck	; if not, branch
0001352C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013532 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013538 6700                       		beq.s	loc_12FC2
0001353A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001353E 6000                       		bra.s	loc_12FC2
00013540                            ; ===========================================================================
00013540                            
00013540                            Sonic_Duck:
00013540 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013546 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013548 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001354E 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013554 6700                       		beq.s	loc_12FC2
00013556 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001355A 6000                       		bra.s	loc_12FC2
0001355C                            ; ===========================================================================
0001355C                            
0001355C                            Obj01_ResetScr:
0001355C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013562 6700                       		beq.s	loc_12FC2	; if yes, branch
00013564 6400                       		bcc.s	loc_12FBE
00013566 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001356A                            
0001356A                            loc_12FBE:
0001356A 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001356E                            
0001356E                            loc_12FC2:
0001356E 1038 F602                  		move.b	($FFFFF602).w,d0
00013572 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013576 6600                       		bne.s	loc_12FEE	; if yes, branch
00013578 3028 0014                  		move.w	$14(a0),d0
0001357C 6700                       		beq.s	loc_12FEE
0001357E 6B00                       		bmi.s	loc_12FE2
00013580 9045                       		sub.w	d5,d0
00013582 6400                       		bcc.s	loc_12FDC
00013584 303C 0000                  		move.w	#0,d0
00013588                            
00013588                            loc_12FDC:
00013588 3140 0014                  		move.w	d0,$14(a0)
0001358C 6000                       		bra.s	loc_12FEE
0001358E                            ; ===========================================================================
0001358E                            
0001358E                            loc_12FE2:
0001358E D045                       		add.w	d5,d0
00013590 6400                       		bcc.s	loc_12FEA
00013592 303C 0000                  		move.w	#0,d0
00013596                            
00013596                            loc_12FEA:
00013596 3140 0014                  		move.w	d0,$14(a0)
0001359A                            
0001359A                            loc_12FEE:
0001359A 1028 0026                  		move.b	$26(a0),d0
0001359E 4EB9 0000 2C22             		jsr	(CalcSine).l
000135A4 C3E8 0014                  		muls.w	$14(a0),d1
000135A8 E081                       		asr.l	#8,d1
000135AA 3141 0010                  		move.w	d1,$10(a0)
000135AE C1E8 0014                  		muls.w	$14(a0),d0
000135B2 E080                       		asr.l	#8,d0
000135B4 3140 0012                  		move.w	d0,$12(a0)
000135B8                            
000135B8                            loc_1300C:
000135B8 1028 0026                  		move.b	$26(a0),d0
000135BC 0600 0040                  		addi.b	#$40,d0
000135C0 6B00                       		bmi.s	locret_1307C
000135C2 123C 0040                  		move.b	#$40,d1
000135C6 4A68 0014                  		tst.w	$14(a0)
000135CA 6700                       		beq.s	locret_1307C
000135CC 6B00                       		bmi.s	loc_13024
000135CE 4441                       		neg.w	d1
000135D0                            
000135D0                            loc_13024:
000135D0 1028 0026                  		move.b	$26(a0),d0
000135D4 D001                       		add.b	d1,d0
000135D6 3F00                       		move.w	d0,-(sp)
000135D8 6100 0000                  		bsr.w	Sonic_WalkSpeed
000135DC 301F                       		move.w	(sp)+,d0
000135DE 4A41                       		tst.w	d1
000135E0 6A00                       		bpl.s	locret_1307C
000135E2 E141                       		asl.w	#8,d1
000135E4 0600 0020                  		addi.b	#$20,d0
000135E8 0200 00C0                  		andi.b	#$C0,d0
000135EC 6700                       		beq.s	loc_13078
000135EE 0C00 0040                  		cmpi.b	#$40,d0
000135F2 6700                       		beq.s	loc_13066
000135F4 0C00 0080                  		cmpi.b	#$80,d0
000135F8 6700                       		beq.s	loc_13060
000135FA D368 0010                  		add.w	d1,$10(a0)
000135FE 08E8 0005 0022             		bset	#5,$22(a0)
00013604 317C 0000 0014             		move.w	#0,$14(a0)
0001360A 4E75                       		rts	
0001360C                            ; ===========================================================================
0001360C                            
0001360C                            loc_13060:
0001360C 9368 0012                  		sub.w	d1,$12(a0)
00013610 4E75                       		rts	
00013612                            ; ===========================================================================
00013612                            
00013612                            loc_13066:
00013612 9368 0010                  		sub.w	d1,$10(a0)
00013616 08E8 0005 0022             		bset	#5,$22(a0)
0001361C 317C 0000 0014             		move.w	#0,$14(a0)
00013622 4E75                       		rts	
00013624                            ; ===========================================================================
00013624                            
00013624                            loc_13078:
00013624 D368 0012                  		add.w	d1,$12(a0)
00013628                            
00013628                            locret_1307C:
00013628 4E75                       		rts	
0001362A                            ; End of function Sonic_Move
0001362A                            
0001362A                            
0001362A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001362A                            
0001362A                            
0001362A                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001362A 3028 0014                  		move.w	$14(a0),d0
0001362E 6700                       		beq.s	loc_13086
00013630 6A00                       		bpl.s	loc_130B2
00013632                            
00013632                            loc_13086:
00013632 08E8 0000 0022             		bset	#0,$22(a0)
00013638 6600                       		bne.s	loc_1309A
0001363A 08A8 0005 0022             		bclr	#5,$22(a0)
00013640 117C 0001 001D             		move.b	#1,$1D(a0)
00013646                            
00013646                            loc_1309A:
00013646 9045                       		sub.w	d5,d0
00013648 3206                       		move.w	d6,d1
0001364A 4441                       		neg.w	d1
0001364C B041                       		cmp.w	d1,d0
0001364E 6E00                       		bgt.s	loc_130A6
00013650 3001                       		move.w	d1,d0
00013652                            
00013652                            loc_130A6:
00013652 3140 0014                  		move.w	d0,$14(a0)
00013656 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001365C 4E75                       		rts	
0001365E                            ; ===========================================================================
0001365E                            
0001365E                            loc_130B2:				; XREF: Sonic_MoveLeft
0001365E 9044                       		sub.w	d4,d0
00013660 6400                       		bcc.s	loc_130BA
00013662 303C FF80                  		move.w	#-$80,d0
00013666                            
00013666                            loc_130BA:
00013666 3140 0014                  		move.w	d0,$14(a0)
0001366A 1028 0026                  		move.b	$26(a0),d0
0001366E 0600 0020                  		addi.b	#$20,d0
00013672 0200 00C0                  		andi.b	#$C0,d0
00013676 6600                       		bne.s	locret_130E8
00013678 0C40 0400                  		cmpi.w	#$400,d0
0001367C 6D00                       		blt.s	locret_130E8
0001367E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013684 08A8 0000 0022             		bclr	#0,$22(a0)
0001368A 303C 00A4                  		move.w	#$A4,d0
0001368E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013694                            
00013694                            locret_130E8:
00013694 4E75                       		rts	
00013696                            ; End of function Sonic_MoveLeft
00013696                            
00013696                            
00013696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013696                            
00013696                            
00013696                            Sonic_MoveRight:			; XREF: Sonic_Move
00013696 3028 0014                  		move.w	$14(a0),d0
0001369A 6B00                       		bmi.s	loc_13118
0001369C 08A8 0000 0022             		bclr	#0,$22(a0)
000136A2 6700                       		beq.s	loc_13104
000136A4 08A8 0005 0022             		bclr	#5,$22(a0)
000136AA 117C 0001 001D             		move.b	#1,$1D(a0)
000136B0                            
000136B0                            loc_13104:
000136B0 D045                       		add.w	d5,d0
000136B2 B046                       		cmp.w	d6,d0
000136B4 6D00                       		blt.s	loc_1310C
000136B6 3006                       		move.w	d6,d0
000136B8                            
000136B8                            loc_1310C:
000136B8 3140 0014                  		move.w	d0,$14(a0)
000136BC 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000136C2 4E75                       		rts	
000136C4                            ; ===========================================================================
000136C4                            
000136C4                            loc_13118:				; XREF: Sonic_MoveRight
000136C4 D044                       		add.w	d4,d0
000136C6 6400                       		bcc.s	loc_13120
000136C8 303C 0080                  		move.w	#$80,d0
000136CC                            
000136CC                            loc_13120:
000136CC 3140 0014                  		move.w	d0,$14(a0)
000136D0 1028 0026                  		move.b	$26(a0),d0
000136D4 0600 0020                  		addi.b	#$20,d0
000136D8 0200 00C0                  		andi.b	#$C0,d0
000136DC 6600                       		bne.s	locret_1314E
000136DE 0C40 FC00                  		cmpi.w	#-$400,d0
000136E2 6E00                       		bgt.s	locret_1314E
000136E4 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136EA 08E8 0000 0022             		bset	#0,$22(a0)
000136F0 303C 00A4                  		move.w	#$A4,d0
000136F4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000136FA                            
000136FA                            locret_1314E:
000136FA 4E75                       		rts	
000136FC                            ; End of function Sonic_MoveRight
000136FC                            
000136FC                            ; ---------------------------------------------------------------------------
000136FC                            ; Subroutine to	change Sonic's speed as he rolls
000136FC                            ; ---------------------------------------------------------------------------
000136FC                            
000136FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136FC                            
000136FC                            
000136FC                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000136FC 3C38 F760                  		move.w	($FFFFF760).w,d6
00013700 E346                       		asl.w	#1,d6
00013702 3A38 F762                  		move.w	($FFFFF762).w,d5
00013706 E245                       		asr.w	#1,d5
00013708 3838 F764                  		move.w	($FFFFF764).w,d4
0001370C E444                       		asr.w	#2,d4
0001370E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013712 6600 0000                  		bne.w	loc_131CC
00013716 4A68 003E                  		tst.w	$3E(a0)
0001371A 6600                       		bne.s	loc_13188
0001371C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013722 6700                       		beq.s	loc_1317C	; if not, branch
00013724 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001372A 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
0001372C 6100 0000                  		bsr.w	Sonic_RollLeft
00013730                            
00013730                            loc_1317C:
00013730 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013736 6700                       		beq.s	loc_13188	; if not, branch
00013738 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001373E 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013740 6100 0000                  		bsr.w	Sonic_RollLeft
00013744 6000                       		bra.s	loc_13188
00013746                            
00013746                            SonicRS_RollRight:
00013746 6100 0000                  		bsr.w	Sonic_RollRight
0001374A                            
0001374A                            loc_13188:
0001374A 3028 0014                  		move.w	$14(a0),d0
0001374E 6700                       		beq.s	loc_131AA
00013750 6B00                       		bmi.s	loc_1319E
00013752 9045                       		sub.w	d5,d0
00013754 6400                       		bcc.s	loc_13198
00013756 303C 0000                  		move.w	#0,d0
0001375A                            
0001375A                            loc_13198:
0001375A 3140 0014                  		move.w	d0,$14(a0)
0001375E 6000                       		bra.s	loc_131AA
00013760                            ; ===========================================================================
00013760                            
00013760                            loc_1319E:				; XREF: Sonic_RollSpeed
00013760 D045                       		add.w	d5,d0
00013762 6400                       		bcc.s	loc_131A6
00013764 303C 0000                  		move.w	#0,d0
00013768                            
00013768                            loc_131A6:
00013768 3140 0014                  		move.w	d0,$14(a0)
0001376C                            
0001376C                            loc_131AA:
0001376C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013770 6600                       		bne.s	loc_131CC	; if yes, branch
00013772 08A8 0002 0022             		bclr	#2,$22(a0)
00013778 117C 0013 0016             		move.b	#$13,$16(a0)
0001377E 117C 0009 0017             		move.b	#9,$17(a0)
00013784 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001378A 5B68 000C                  		subq.w	#5,$C(a0)
0001378E                            
0001378E                            loc_131CC:
0001378E 1028 0026                  		move.b	$26(a0),d0
00013792 4EB9 0000 2C22             		jsr	(CalcSine).l
00013798 C1E8 0014                  		muls.w	$14(a0),d0
0001379C E080                       		asr.l	#8,d0
0001379E 3140 0012                  		move.w	d0,$12(a0)
000137A2 C3E8 0014                  		muls.w	$14(a0),d1
000137A6 E081                       		asr.l	#8,d1
000137A8 0C41 1000                  		cmpi.w	#$1000,d1
000137AC 6F00                       		ble.s	loc_131F0
000137AE 323C 1000                  		move.w	#$1000,d1
000137B2                            
000137B2                            loc_131F0:
000137B2 0C41 F000                  		cmpi.w	#-$1000,d1
000137B6 6C00                       		bge.s	loc_131FA
000137B8 323C F000                  		move.w	#-$1000,d1
000137BC                            
000137BC                            loc_131FA:
000137BC 3141 0010                  		move.w	d1,$10(a0)
000137C0 6000 FDF6                  		bra.w	loc_1300C
000137C4                            ; End of function Sonic_RollSpeed
000137C4                            
000137C4                            
000137C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137C4                            
000137C4                            
000137C4                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000137C4 3028 0014                  		move.w	$14(a0),d0
000137C8 6700                       		beq.s	loc_1320A
000137CA 6A00                       		bpl.s	loc_13218
000137CC                            
000137CC                            loc_1320A:
000137CC 08E8 0000 0022             		bset	#0,$22(a0)
000137D2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137D8 4E75                       		rts	
000137DA                            ; ===========================================================================
000137DA                            
000137DA                            loc_13218:
000137DA 9044                       		sub.w	d4,d0
000137DC 6400                       		bcc.s	loc_13220
000137DE 303C FF80                  		move.w	#-$80,d0
000137E2                            
000137E2                            loc_13220:
000137E2 3140 0014                  		move.w	d0,$14(a0)
000137E6 4E75                       		rts	
000137E8                            ; End of function Sonic_RollLeft
000137E8                            
000137E8                            
000137E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137E8                            
000137E8                            
000137E8                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000137E8 3028 0014                  		move.w	$14(a0),d0
000137EC 6B00                       		bmi.s	loc_1323A
000137EE 08A8 0000 0022             		bclr	#0,$22(a0)
000137F4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137FA 4E75                       		rts	
000137FC                            ; ===========================================================================
000137FC                            
000137FC                            loc_1323A:
000137FC D044                       		add.w	d4,d0
000137FE 6400                       		bcc.s	loc_13242
00013800 303C 0080                  		move.w	#$80,d0
00013804                            
00013804                            loc_13242:
00013804 3140 0014                  		move.w	d0,$14(a0)
00013808 4E75                       		rts	
0001380A                            ; End of function Sonic_RollRight
0001380A                            
0001380A                            ; ---------------------------------------------------------------------------
0001380A                            ; Subroutine to	change Sonic's direction while jumping
0001380A                            ; ---------------------------------------------------------------------------
0001380A                            
0001380A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001380A                            
0001380A                            
0001380A                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001380A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001380E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013812 E345                       		asl.w	#1,d5
00013814 0828 0004 0022             		btst	#4,$22(a0)
0001381A 6600                       		bne.s	Obj01_ResetScr2
0001381C 3028 0010                  		move.w	$10(a0),d0
00013820 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013826 6700                       		beq.s	loc_13278	; if not, branch
00013828 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001382E 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013830 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013834 6E00                       		bgt.s	loc_13278
00013836 3001                       		move.w	d1,d0
00013838                            
00013838                            loc_13278:
00013838 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001383E 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013840 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013846 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013848 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001384C 6E00                       		bgt.s	Obj01_JumpMove
0001384E 3001                       		move.w	d1,d0
00013850 6000                       		bra.s	Obj01_JumpMove
00013852                            
00013852                            SonicCJD_JumpLeft:
00013852 08E8 0000 0022             		bset	#0,$22(a0)
00013858 9045                       		sub.w	d5,d0
0001385A 3206                       		move.w	d6,d1
0001385C 4441                       		neg.w	d1
0001385E B041                       		cmp.w	d1,d0
00013860                            		; bgt.s	loc_13278
00013860                            		; move.w	d1,d0
00013860 4E75                       		rts
00013862                            
00013862                            SonicCJD_JumpRight:
00013862 08A8 0000 0022             		bclr	#0,$22(a0)
00013868 D045                       		add.w	d5,d0
0001386A B046                       		cmp.w	d6,d0
0001386C 6D00                       		blt.s	Obj01_JumpMove
0001386E 3006                       		move.w	d6,d0
00013870                            
00013870                            Obj01_JumpMove:
00013870 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013874                            
00013874                            Obj01_ResetScr2:
00013874 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001387A 6700                       		beq.s	loc_132A4	; if yes, branch
0001387C 6400                       		bcc.s	loc_132A0
0001387E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013882                            
00013882                            loc_132A0:
00013882 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013886                            
00013886                            loc_132A4:
00013886 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001388C 6500                       		bcs.s	locret_132D2	; if yes, branch
0001388E 3028 0010                  		move.w	$10(a0),d0
00013892 3200                       		move.w	d0,d1
00013894 EA41                       		asr.w	#5,d1
00013896 6700                       		beq.s	locret_132D2
00013898 6B00                       		bmi.s	loc_132C6
0001389A 9041                       		sub.w	d1,d0
0001389C 6400                       		bcc.s	loc_132C0
0001389E 303C 0000                  		move.w	#0,d0
000138A2                            
000138A2                            loc_132C0:
000138A2 3140 0010                  		move.w	d0,$10(a0)
000138A6 4E75                       		rts	
000138A8                            ; ===========================================================================
000138A8                            
000138A8                            loc_132C6:
000138A8 9041                       		sub.w	d1,d0
000138AA 6500                       		bcs.s	loc_132CE
000138AC 303C 0000                  		move.w	#0,d0
000138B0                            
000138B0                            loc_132CE:
000138B0 3140 0010                  		move.w	d0,$10(a0)
000138B4                            
000138B4                            locret_132D2:
000138B4 4E75                       		rts	
000138B6                            ; End of function Sonic_ChgJumpDir
000138B6                            
000138B6                            ; ===========================================================================
000138B6                            ; ---------------------------------------------------------------------------
000138B6                            ; Unused subroutine to squash Sonic
000138B6                            ; ---------------------------------------------------------------------------
000138B6 1028 0026                  		move.b	$26(a0),d0
000138BA 0600 0020                  		addi.b	#$20,d0
000138BE 0200 00C0                  		andi.b	#$C0,d0
000138C2 6600                       		bne.s	locret_13302
000138C4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138C8 4A41                       		tst.w	d1
000138CA 6A00                       		bpl.s	locret_13302
000138CC 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000138D2 317C 0000 0010             		move.w	#0,$10(a0)
000138D8 317C 0000 0012             		move.w	#0,$12(a0)
000138DE 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000138E4                            
000138E4                            locret_13302:
000138E4 4E75                       		rts	
000138E6                            ; ---------------------------------------------------------------------------
000138E6                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000138E6                            ; ---------------------------------------------------------------------------
000138E6                            
000138E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138E6                            
000138E6                            
000138E6                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000138E6 2228 0008                  		move.l	8(a0),d1
000138EA 3028 0010                  		move.w	$10(a0),d0
000138EE 48C0                       		ext.l	d0
000138F0 E180                       		asl.l	#8,d0
000138F2 D280                       		add.l	d0,d1
000138F4 4841                       		swap	d1
000138F6 3038 F728                  		move.w	($FFFFF728).w,d0
000138FA 0640 0010                  		addi.w	#$10,d0
000138FE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013900 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013902 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013906 0640 0128                  		addi.w	#$128,d0
0001390A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001390E 6600                       		bne.s	loc_13332
00013910 0640 0040                  		addi.w	#$40,d0
00013914                            
00013914                            loc_13332:
00013914 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013916 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013918                            
00013918                            loc_13336:
00013918 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001391C 0640 00E0                  		addi.w	#$E0,d0
00013920 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013924 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013926 4E75                       		rts	
00013928                            ; ===========================================================================
00013928                            
00013928                            Boundary_Bottom:
00013928 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
0001392E 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013932 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013938 6500 0000                  		bcs.w	KillSonic
0001393C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013940 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013946 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001394C 4E75                       		rts	
0001394E                            ; ===========================================================================
0001394E                            
0001394E                            Boundary_Sides:
0001394E 3140 0008                  		move.w	d0,8(a0)
00013952 317C 0000 000A             		move.w	#0,$A(a0)
00013958 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001395E 317C 0000 0014             		move.w	#0,$14(a0)
00013964 60B2                       		bra.s	loc_13336
00013966                            ; End of function Sonic_LevelBound
00013966                            
00013966                            ; ---------------------------------------------------------------------------
00013966                            ; Subroutine allowing Sonic to roll when he's moving
00013966                            ; ---------------------------------------------------------------------------
00013966                            
00013966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013966                            
00013966                            
00013966                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013966 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001396A 6600                       		bne.s	Obj01_NoRoll
0001396C 3028 0014                  		move.w	$14(a0),d0
00013970 6A00                       		bpl.s	loc_13392
00013972 4440                       		neg.w	d0
00013974                            
00013974                            loc_13392:
00013974 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013978 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
0001397A 1038 F602                  		move.b	($FFFFF602).w,d0
0001397E 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013982 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013984 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001398A 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
0001398C                            
0001398C                            Obj01_NoRoll:
0001398C 4E75                       		rts	
0001398E                            ; ===========================================================================
0001398E                            
0001398E                            Obj01_ChkRoll:
0001398E 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013994 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013996 4E75                       		rts	
00013998                            ; ===========================================================================
00013998                            
00013998                            Obj01_DoRoll:
00013998 08E8 0002 0022             		bset	#2,$22(a0)
0001399E 117C 000E 0016             		move.b	#$E,$16(a0)
000139A4 117C 0007 0017             		move.b	#7,$17(a0)
000139AA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139B0 5A68 000C                  		addq.w	#5,$C(a0)
000139B4 303C 00BE                  		move.w	#$BE,d0
000139B8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
000139BE 4A68 0014                  		tst.w	$14(a0)
000139C2 6600                       		bne.s	locret_133E8
000139C4 317C 0200 0014             		move.w	#$200,$14(a0)
000139CA                            
000139CA                            locret_133E8:
000139CA 4E75                       		rts	
000139CC                            ; End of function Sonic_Roll
000139CC                            
000139CC                            ; ---------------------------------------------------------------------------
000139CC                            ; Subroutine allowing Sonic to jump
000139CC                            ; ---------------------------------------------------------------------------
000139CC                            
000139CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139CC                            
000139CC                            
000139CC                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000139CC 1038 F603                  		move.b	($FFFFF603).w,d0
000139D0 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000139D4 6700 0000                  		beq.w	locret_1348E	; if not, branch
000139D8 7000                       		moveq	#0,d0
000139DA 1028 0026                  		move.b	$26(a0),d0
000139DE 0600 0080                  		addi.b	#$80,d0
000139E2 6100 0000                  		bsr.w	sub_14D48
000139E6 0C41 0006                  		cmpi.w	#6,d1
000139EA 6D00 0000                  		blt.w	locret_1348E
000139EE 343C 0680                  		move.w	#$680,d2
000139F2 0828 0006 0022             		btst	#6,$22(a0)
000139F8 6700                       		beq.s	loc_1341C
000139FA 343C 0380                  		move.w	#$380,d2
000139FE                            
000139FE                            loc_1341C:
000139FE 7000                       		moveq	#0,d0
00013A00 1028 0026                  		move.b	$26(a0),d0
00013A04 0400 0040                  		subi.b	#$40,d0
00013A08 4EB9 0000 2C22             		jsr	(CalcSine).l
00013A0E C3C2                       		muls.w	d2,d1
00013A10 E081                       		asr.l	#8,d1
00013A12 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013A16 C1C2                       		muls.w	d2,d0
00013A18 E080                       		asr.l	#8,d0
00013A1A D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013A1E 08E8 0001 0022             		bset	#1,$22(a0)
00013A24 08A8 0005 0022             		bclr	#5,$22(a0)
00013A2A 588F                       		addq.l	#4,sp
00013A2C 117C 0001 003C             		move.b	#1,$3C(a0)
00013A32 4228 0038                  		clr.b	$38(a0)
00013A36 303C 00A0                  		move.w	#$A0,d0
00013A3A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013A40 117C 0013 0016             		move.b	#$13,$16(a0)
00013A46 117C 0009 0017             		move.b	#9,$17(a0)
00013A4C 0828 0002 0022             		btst	#2,$22(a0)
00013A52 6600                       		bne.s	loc_13490
00013A54 117C 000E 0016             		move.b	#$E,$16(a0)
00013A5A 117C 0007 0017             		move.b	#7,$17(a0)
00013A60 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013A66 08E8 0002 0022             		bset	#2,$22(a0)
00013A6C 5A68 000C                  		addq.w	#5,$C(a0)
00013A70                            
00013A70                            locret_1348E:
00013A70 4E75                       		rts	
00013A72                            ; ===========================================================================
00013A72                            
00013A72                            loc_13490:
00013A72 08E8 0004 0022             		bset	#4,$22(a0)
00013A78 4E75                       		rts	
00013A7A                            ; End of function Sonic_Jump
00013A7A                            
00013A7A                            
00013A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A7A                            
00013A7A                            
00013A7A                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A7A 4A28 003C                  		tst.b	$3C(a0)
00013A7E 6700                       		beq.s	loc_134C4
00013A80 323C FC00                  		move.w	#-$400,d1
00013A84 0828 0006 0022             		btst	#6,$22(a0)
00013A8A 6700                       		beq.s	loc_134AE
00013A8C 323C FE00                  		move.w	#-$200,d1
00013A90                            
00013A90                            loc_134AE:
00013A90 B268 0012                  		cmp.w	$12(a0),d1
00013A94 6F00                       		ble.s	locret_134C2
00013A96 1038 F602                  		move.b	($FFFFF602).w,d0
00013A9A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013A9E 6600                       		bne.s	locret_134C2	; if yes, branch
00013AA0 3141 0012                  		move.w	d1,$12(a0)
00013AA4                            
00013AA4                            locret_134C2:
00013AA4 4E75                       		rts	
00013AA6                            ; ===========================================================================
00013AA6                            
00013AA6                            loc_134C4:
00013AA6 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013AAC 6C00                       		bge.s	locret_134D2
00013AAE 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013AB4                            
00013AB4                            locret_134D2:
00013AB4 4E75                       		rts	
00013AB6                            ; End of function Sonic_JumpHeight
00013AB6                            
00013AB6                            ; ---------------------------------------------------------------------------
00013AB6                            ; Subroutine to	slow Sonic walking up a	slope
00013AB6                            ; ---------------------------------------------------------------------------
00013AB6                            
00013AB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AB6                            
00013AB6                            
00013AB6                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013AB6 1028 0026                  		move.b	$26(a0),d0
00013ABA 0600 0060                  		addi.b	#$60,d0
00013ABE 0C00 00C0                  		cmpi.b	#$C0,d0
00013AC2 6400                       		bcc.s	locret_13508
00013AC4 1028 0026                  		move.b	$26(a0),d0
00013AC8 4EB9 0000 2C22             		jsr	(CalcSine).l
00013ACE C1FC 0020                  		muls.w	#$20,d0
00013AD2 E080                       		asr.l	#8,d0
00013AD4 4A68 0014                  		tst.w	$14(a0)
00013AD8 6700                       		beq.s	locret_13508
00013ADA 6B00                       		bmi.s	loc_13504
00013ADC 4A40                       		tst.w	d0
00013ADE 6700                       		beq.s	locret_13502
00013AE0 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013AE4                            
00013AE4                            locret_13502:
00013AE4 4E75                       		rts	
00013AE6                            ; ===========================================================================
00013AE6                            
00013AE6                            loc_13504:
00013AE6 D168 0014                  		add.w	d0,$14(a0)
00013AEA                            
00013AEA                            locret_13508:
00013AEA 4E75                       		rts	
00013AEC                            ; End of function Sonic_SlopeResist
00013AEC                            
00013AEC                            ; ---------------------------------------------------------------------------
00013AEC                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013AEC                            ; ---------------------------------------------------------------------------
00013AEC                            
00013AEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AEC                            
00013AEC                            
00013AEC                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013AEC 1028 0026                  		move.b	$26(a0),d0
00013AF0 0600 0060                  		addi.b	#$60,d0
00013AF4 0C00 00C0                  		cmpi.b	#-$40,d0
00013AF8 6400                       		bcc.s	locret_13544
00013AFA 1028 0026                  		move.b	$26(a0),d0
00013AFE 4EB9 0000 2C22             		jsr	(CalcSine).l
00013B04 C1FC 0050                  		muls.w	#$50,d0
00013B08 E080                       		asr.l	#8,d0
00013B0A 4A68 0014                  		tst.w	$14(a0)
00013B0E 6B00                       		bmi.s	loc_1353A
00013B10 4A40                       		tst.w	d0
00013B12 6A00                       		bpl.s	loc_13534
00013B14 E480                       		asr.l	#2,d0
00013B16                            
00013B16                            loc_13534:
00013B16 D168 0014                  		add.w	d0,$14(a0)
00013B1A 4E75                       		rts	
00013B1C                            ; ===========================================================================
00013B1C                            
00013B1C                            loc_1353A:
00013B1C 4A40                       		tst.w	d0
00013B1E 6B00                       		bmi.s	loc_13540
00013B20 E480                       		asr.l	#2,d0
00013B22                            
00013B22                            loc_13540:
00013B22 D168 0014                  		add.w	d0,$14(a0)
00013B26                            
00013B26                            locret_13544:
00013B26 4E75                       		rts	
00013B28                            ; End of function Sonic_RollRepel
00013B28                            
00013B28                            ; ---------------------------------------------------------------------------
00013B28                            ; Subroutine to	push Sonic down	a slope
00013B28                            ; ---------------------------------------------------------------------------
00013B28                            
00013B28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B28                            
00013B28                            
00013B28                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B28 4E71                       		nop	
00013B2A 4A28 0038                  		tst.b	$38(a0)
00013B2E 6600                       		bne.s	locret_13580
00013B30 4A68 003E                  		tst.w	$3E(a0)
00013B34 6600                       		bne.s	loc_13582
00013B36 1028 0026                  		move.b	$26(a0),d0
00013B3A 0600 0020                  		addi.b	#$20,d0
00013B3E 0200 00C0                  		andi.b	#$C0,d0
00013B42 6700                       		beq.s	locret_13580
00013B44 3028 0014                  		move.w	$14(a0),d0
00013B48 6A00                       		bpl.s	loc_1356A
00013B4A 4440                       		neg.w	d0
00013B4C                            
00013B4C                            loc_1356A:
00013B4C 0C40 0280                  		cmpi.w	#$280,d0
00013B50 6400                       		bcc.s	locret_13580
00013B52 4268 0014                  		clr.w	$14(a0)
00013B56 08E8 0001 0022             		bset	#1,$22(a0)
00013B5C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013B62                            
00013B62                            locret_13580:
00013B62 4E75                       		rts	
00013B64                            ; ===========================================================================
00013B64                            
00013B64                            loc_13582:
00013B64 5368 003E                  		subq.w	#1,$3E(a0)
00013B68 4E75                       		rts	
00013B6A                            ; End of function Sonic_SlopeRepel
00013B6A                            
00013B6A                            ; ---------------------------------------------------------------------------
00013B6A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013B6A                            ; ---------------------------------------------------------------------------
00013B6A                            
00013B6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B6A                            
00013B6A                            
00013B6A                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B6A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B6E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013B70 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013B72                            
00013B72 5400                       		addq.b	#2,d0		; increase angle
00013B74 6400                       		bcc.s	loc_13596
00013B76 7000                       		moveq	#0,d0
00013B78                            
00013B78                            loc_13596:
00013B78 6000                       		bra.s	loc_1359E
00013B7A                            ; ===========================================================================
00013B7A                            
00013B7A                            loc_13598:
00013B7A 5500                       		subq.b	#2,d0		; decrease angle
00013B7C 6400                       		bcc.s	loc_1359E
00013B7E 7000                       		moveq	#0,d0
00013B80                            
00013B80                            loc_1359E:
00013B80 1140 0026                  		move.b	d0,$26(a0)
00013B84                            
00013B84                            locret_135A2:
00013B84 4E75                       		rts	
00013B86                            ; End of function Sonic_JumpAngle
00013B86                            
00013B86                            ; ---------------------------------------------------------------------------
00013B86                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013B86                            ; ---------------------------------------------------------------------------
00013B86                            
00013B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B86                            
00013B86                            
00013B86                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013B86 3228 0010                  		move.w	$10(a0),d1
00013B8A 3428 0012                  		move.w	$12(a0),d2
00013B8E 4EB9 0000 2EF0             		jsr	(CalcAngle).l
00013B94 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013B98 0400 0020                  		subi.b	#$20,d0
00013B9C 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013BA0 0200 00C0                  		andi.b	#$C0,d0
00013BA4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013BA8 0C00 0040                  		cmpi.b	#$40,d0
00013BAC 6700 0000                  		beq.w	loc_13680
00013BB0 0C00 0080                  		cmpi.b	#$80,d0
00013BB4 6700 0000                  		beq.w	loc_136E2
00013BB8 0C00 00C0                  		cmpi.b	#-$40,d0
00013BBC 6700 0000                  		beq.w	loc_1373E
00013BC0 6100 0000                  		bsr.w	Sonic_HitWall
00013BC4 4A41                       		tst.w	d1
00013BC6 6A00                       		bpl.s	loc_135F0
00013BC8 9368 0008                  		sub.w	d1,8(a0)
00013BCC 317C 0000 0010             		move.w	#0,$10(a0)
00013BD2                            
00013BD2                            loc_135F0:
00013BD2 6100 0000                  		bsr.w	sub_14EB4
00013BD6 4A41                       		tst.w	d1
00013BD8 6A00                       		bpl.s	loc_13602
00013BDA D368 0008                  		add.w	d1,8(a0)
00013BDE 317C 0000 0010             		move.w	#0,$10(a0)
00013BE4                            
00013BE4                            loc_13602:
00013BE4 6100 0000                  		bsr.w	Sonic_HitFloor
00013BE8 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013BEC 4A41                       		tst.w	d1
00013BEE 6A00                       		bpl.s	locret_1367E
00013BF0 1428 0012                  		move.b	$12(a0),d2
00013BF4 5002                       		addq.b	#8,d2
00013BF6 4402                       		neg.b	d2
00013BF8 B202                       		cmp.b	d2,d1
00013BFA 6C00                       		bge.s	loc_1361E
00013BFC B002                       		cmp.b	d2,d0
00013BFE 6D00                       		blt.s	locret_1367E
00013C00                            
00013C00                            loc_1361E:
00013C00 D368 000C                  		add.w	d1,$C(a0)
00013C04 1143 0026                  		move.b	d3,$26(a0)
00013C08 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C0C 117C 0000 001C             		move.b	#0,$1C(a0)
00013C12 1003                       		move.b	d3,d0
00013C14 0600 0020                  		addi.b	#$20,d0
00013C18 0200 0040                  		andi.b	#$40,d0
00013C1C 6600                       		bne.s	loc_1365C
00013C1E 1003                       		move.b	d3,d0
00013C20 0600 0010                  		addi.b	#$10,d0
00013C24 0200 0020                  		andi.b	#$20,d0
00013C28 6700                       		beq.s	loc_1364E
00013C2A E0E8 0012                  		asr	$12(a0)
00013C2E 6000                       		bra.s	loc_13670
00013C30                            ; ===========================================================================
00013C30                            
00013C30                            loc_1364E:
00013C30 317C 0000 0012             		move.w	#0,$12(a0)
00013C36 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C3C 4E75                       		rts	
00013C3E                            ; ===========================================================================
00013C3E                            
00013C3E                            loc_1365C:
00013C3E 317C 0000 0010             		move.w	#0,$10(a0)
00013C44 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013C4A 6F00                       		ble.s	loc_13670
00013C4C 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013C52                            
00013C52                            loc_13670:
00013C52 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C58 4A03                       		tst.b	d3
00013C5A 6A00                       		bpl.s	locret_1367E
00013C5C 4468 0014                  		neg.w	$14(a0)
00013C60                            
00013C60                            locret_1367E:
00013C60 4E75                       		rts	
00013C62                            ; ===========================================================================
00013C62                            
00013C62                            loc_13680:
00013C62 6100 0000                  		bsr.w	Sonic_HitWall
00013C66 4A41                       		tst.w	d1
00013C68 6A00                       		bpl.s	loc_1369A
00013C6A 9368 0008                  		sub.w	d1,8(a0)
00013C6E 317C 0000 0010             		move.w	#0,$10(a0)
00013C74 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C7A 4E75                       		rts	
00013C7C                            ; ===========================================================================
00013C7C                            
00013C7C                            loc_1369A:
00013C7C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013C80 4A41                       		tst.w	d1
00013C82 6A00                       		bpl.s	loc_136B4
00013C84 9368 000C                  		sub.w	d1,$C(a0)
00013C88 4A68 0012                  		tst.w	$12(a0)
00013C8C 6A00                       		bpl.s	locret_136B2
00013C8E 317C 0000 0012             		move.w	#0,$12(a0)
00013C94                            
00013C94                            locret_136B2:
00013C94 4E75                       		rts	
00013C96                            ; ===========================================================================
00013C96                            
00013C96                            loc_136B4:
00013C96 4A68 0012                  		tst.w	$12(a0)
00013C9A 6B00                       		bmi.s	locret_136E0
00013C9C 6100 0000                  		bsr.w	Sonic_HitFloor
00013CA0 4A41                       		tst.w	d1
00013CA2 6A00                       		bpl.s	locret_136E0
00013CA4 D368 000C                  		add.w	d1,$C(a0)
00013CA8 1143 0026                  		move.b	d3,$26(a0)
00013CAC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CB0 117C 0000 001C             		move.b	#0,$1C(a0)
00013CB6 317C 0000 0012             		move.w	#0,$12(a0)
00013CBC 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CC2                            
00013CC2                            locret_136E0:
00013CC2 4E75                       		rts	
00013CC4                            ; ===========================================================================
00013CC4                            
00013CC4                            loc_136E2:
00013CC4 6100 0000                  		bsr.w	Sonic_HitWall
00013CC8 4A41                       		tst.w	d1
00013CCA 6A00                       		bpl.s	loc_136F4
00013CCC 9368 0008                  		sub.w	d1,8(a0)
00013CD0 317C 0000 0010             		move.w	#0,$10(a0)
00013CD6                            
00013CD6                            loc_136F4:
00013CD6 6100 0000                  		bsr.w	sub_14EB4
00013CDA 4A41                       		tst.w	d1
00013CDC 6A00                       		bpl.s	loc_13706
00013CDE D368 0008                  		add.w	d1,8(a0)
00013CE2 317C 0000 0010             		move.w	#0,$10(a0)
00013CE8                            
00013CE8                            loc_13706:
00013CE8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013CEC 4A41                       		tst.w	d1
00013CEE 6A00                       		bpl.s	locret_1373C
00013CF0 9368 000C                  		sub.w	d1,$C(a0)
00013CF4 1003                       		move.b	d3,d0
00013CF6 0600 0020                  		addi.b	#$20,d0
00013CFA 0200 0040                  		andi.b	#$40,d0
00013CFE 6600                       		bne.s	loc_13726
00013D00 317C 0000 0012             		move.w	#0,$12(a0)
00013D06 4E75                       		rts	
00013D08                            ; ===========================================================================
00013D08                            
00013D08                            loc_13726:
00013D08 1143 0026                  		move.b	d3,$26(a0)
00013D0C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D10 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D16 4A03                       		tst.b	d3
00013D18 6A00                       		bpl.s	locret_1373C
00013D1A 4468 0014                  		neg.w	$14(a0)
00013D1E                            
00013D1E                            locret_1373C:
00013D1E 4E75                       		rts	
00013D20                            ; ===========================================================================
00013D20                            
00013D20                            loc_1373E:
00013D20 6100 0000                  		bsr.w	sub_14EB4
00013D24 4A41                       		tst.w	d1
00013D26 6A00                       		bpl.s	loc_13758
00013D28 D368 0008                  		add.w	d1,8(a0)
00013D2C 317C 0000 0010             		move.w	#0,$10(a0)
00013D32 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D38 4E75                       		rts	
00013D3A                            ; ===========================================================================
00013D3A                            
00013D3A                            loc_13758:
00013D3A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D3E 4A41                       		tst.w	d1
00013D40 6A00                       		bpl.s	loc_13772
00013D42 9368 000C                  		sub.w	d1,$C(a0)
00013D46 4A68 0012                  		tst.w	$12(a0)
00013D4A 6A00                       		bpl.s	locret_13770
00013D4C 317C 0000 0012             		move.w	#0,$12(a0)
00013D52                            
00013D52                            locret_13770:
00013D52 4E75                       		rts	
00013D54                            ; ===========================================================================
00013D54                            
00013D54                            loc_13772:
00013D54 4A68 0012                  		tst.w	$12(a0)
00013D58 6B00                       		bmi.s	locret_1379E
00013D5A 6100 0000                  		bsr.w	Sonic_HitFloor
00013D5E 4A41                       		tst.w	d1
00013D60 6A00                       		bpl.s	locret_1379E
00013D62 D368 000C                  		add.w	d1,$C(a0)
00013D66 1143 0026                  		move.b	d3,$26(a0)
00013D6A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D6E 117C 0000 001C             		move.b	#0,$1C(a0)
00013D74 317C 0000 0012             		move.w	#0,$12(a0)
00013D7A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D80                            
00013D80                            locret_1379E:
00013D80 4E75                       		rts	
00013D82                            ; End of function Sonic_Floor
00013D82                            
00013D82                            ; ---------------------------------------------------------------------------
00013D82                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013D82                            ; ---------------------------------------------------------------------------
00013D82                            
00013D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D82                            
00013D82                            
00013D82                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013D82 0828 0004 0022             		btst	#4,$22(a0)
00013D88 6700                       		beq.s	loc_137AE
00013D8A 4E71                       		nop	
00013D8C 4E71                       		nop	
00013D8E 4E71                       		nop	
00013D90                            
00013D90                            loc_137AE:
00013D90 08A8 0005 0022             		bclr	#5,$22(a0)
00013D96 08A8 0001 0022             		bclr	#1,$22(a0)
00013D9C 08A8 0004 0022             		bclr	#4,$22(a0)
00013DA2 0828 0002 0022             		btst	#2,$22(a0)
00013DA8 6700                       		beq.s	loc_137E4
00013DAA 08A8 0002 0022             		bclr	#2,$22(a0)
00013DB0 117C 0013 0016             		move.b	#$13,$16(a0)
00013DB6 117C 0009 0017             		move.b	#9,$17(a0)
00013DBC 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013DC2 5B68 000C                  		subq.w	#5,$C(a0)
00013DC6                            
00013DC6                            loc_137E4:
00013DC6 117C 0000 003C             		move.b	#0,$3C(a0)
00013DCC 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013DD2 4E75                       		rts	
00013DD4                            ; End of function Sonic_ResetOnFloor
00013DD4                            
00013DD4                            ; ===========================================================================
00013DD4                            ; ---------------------------------------------------------------------------
00013DD4                            ; Sonic	when he	gets hurt
00013DD4                            ; ---------------------------------------------------------------------------
00013DD4                            
00013DD4                            Obj01_Hurt:				; XREF: Obj01_Index
00013DD4 4EBA 9DAC                  		jsr	SpeedToPos
00013DD8 0668 0030 0012             		addi.w	#$30,$12(a0)
00013DDE 0828 0006 0022             		btst	#6,$22(a0)
00013DE4 6700                       		beq.s	loc_1380C
00013DE6 0468 0020 0012             		subi.w	#$20,$12(a0)
00013DEC                            
00013DEC                            loc_1380C:
00013DEC 6100 0000                  		bsr.w	Sonic_HurtStop
00013DF0 6100 FAF4                  		bsr.w	Sonic_LevelBound
00013DF4 6100 F506                  		bsr.w	Sonic_RecordPos
00013DF8 6100 0000                  		bsr.w	Sonic_Animate
00013DFC 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E00 4EFA 9DA6                  		jmp	DisplaySprite
00013E04                            
00013E04                            ; ---------------------------------------------------------------------------
00013E04                            ; Subroutine to	stop Sonic falling after he's been hurt
00013E04                            ; ---------------------------------------------------------------------------
00013E04                            
00013E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E04                            
00013E04                            
00013E04                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013E04 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E08 0640 00E0                  		addi.w	#$E0,d0
00013E0C B068 000C                  		cmp.w	$C(a0),d0
00013E10 6500 0000                  		bcs.w	KillSonic
00013E14 6100 FD70                  		bsr.w	Sonic_Floor
00013E18 0828 0001 0022             		btst	#1,$22(a0)
00013E1E 6600                       		bne.s	locret_13860
00013E20 7000                       		moveq	#0,d0
00013E22 3140 0012                  		move.w	d0,$12(a0)
00013E26 3140 0010                  		move.w	d0,$10(a0)
00013E2A 3140 0014                  		move.w	d0,$14(a0)
00013E2E 117C 0000 001C             		move.b	#0,$1C(a0)
00013E34 5528 0024                  		subq.b	#2,$24(a0)
00013E38 317C 0078 0030             		move.w	#$78,$30(a0)
00013E3E                            
00013E3E                            locret_13860:
00013E3E 4E75                       		rts	
00013E40                            ; End of function Sonic_HurtStop
00013E40                            
00013E40                            ; ===========================================================================
00013E40                            ; ---------------------------------------------------------------------------
00013E40                            ; Sonic	when he	dies
00013E40                            ; ---------------------------------------------------------------------------
00013E40                            
00013E40                            Obj01_Death:				; XREF: Obj01_Index
00013E40 6100 0000                  		bsr.w	GameOver
00013E44 4EBA 9D10                  		jsr	ObjectFall
00013E48 6100 F4B2                  		bsr.w	Sonic_RecordPos
00013E4C 6100 0000                  		bsr.w	Sonic_Animate
00013E50 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E54 4EFA 9D52                  		jmp	DisplaySprite
00013E58                            
00013E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E58                            
00013E58                            
00013E58                            GameOver:				; XREF: Obj01_Death
00013E58 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E5C 0640 0100                  		addi.w	#$100,d0
00013E60 B068 000C                  		cmp.w	$C(a0),d0
00013E64 6400 0000                  		bcc.w	locret_13900
00013E68 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013E6E 5428 0024                  		addq.b	#2,$24(a0)
00013E72 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013E76 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013E7A 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013E7E 6600                       		bne.s	loc_138D4
00013E80 317C 0000 003A             		move.w	#0,$3A(a0)
00013E86 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013E8C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013E92 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013E98 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013E9C                            
00013E9C                            loc_138C2:
00013E9C 303C 008F                  		move.w	#$8F,d0
00013EA0 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013EA6 7003                       		moveq	#3,d0
00013EA8 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013EAE                            ; ===========================================================================
00013EAE                            
00013EAE                            loc_138D4:
00013EAE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013EB4 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013EB8 6700                       		beq.s	locret_13900	; if not, branch
00013EBA 317C 0000 003A             		move.w	#0,$3A(a0)
00013EC0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013EC6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013ECC 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013ED2 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013ED8 60C2                       		bra.s	loc_138C2
00013EDA                            ; ===========================================================================
00013EDA                            
00013EDA                            locret_13900:
00013EDA 4E75                       		rts	
00013EDC                            ; End of function GameOver
00013EDC                            
00013EDC                            ; ===========================================================================
00013EDC                            ; ---------------------------------------------------------------------------
00013EDC                            ; Sonic	when the level is restarted
00013EDC                            ; ---------------------------------------------------------------------------
00013EDC                            
00013EDC                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013EDC 4A68 003A                  		tst.w	$3A(a0)
00013EE0 6700                       		beq.s	locret_13914
00013EE2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013EE6 6600                       		bne.s	locret_13914
00013EE8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013EEE                            
00013EEE                            locret_13914:
00013EEE 4E75                       		rts	
00013EF0                            
00013EF0                            ; ---------------------------------------------------------------------------
00013EF0                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013EF0                            ; ---------------------------------------------------------------------------
00013EF0                            
00013EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EF0                            
00013EF0                            
00013EF0                            Sonic_Loops:				; XREF: Obj01_Control
00013EF0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013EF6 6700                       		beq.s	loc_13926	; if yes, branch
00013EF8 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013EFC 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013F00                            
00013F00                            loc_13926:
00013F00 3028 000C                  		move.w	$C(a0),d0
00013F04 E248                       		lsr.w	#1,d0
00013F06 0240 0380                  		andi.w	#$380,d0
00013F0A 1228 0008                  		move.b	8(a0),d1
00013F0E 0241 007F                  		andi.w	#$7F,d1
00013F12 D041                       		add.w	d1,d0
00013F14 43F8 A400                  		lea	($FFFFA400).w,a1
00013F18 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013F1C B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013F20 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013F24 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013F28 6700 FA64                  		beq.w	Obj01_ChkRoll
00013F2C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013F30 6700                       		beq.s	loc_13976
00013F32 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013F36 6700                       		beq.s	loc_13966
00013F38 08A8 0006 0001             		bclr	#6,1(a0)
00013F3E 4E75                       		rts	
00013F40                            ; ===========================================================================
00013F40                            
00013F40                            loc_13966:
00013F40 0828 0001 0022             		btst	#1,$22(a0)
00013F46 6700                       		beq.s	loc_13976
00013F48 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F4E 4E75                       		rts	
00013F50                            ; ===========================================================================
00013F50                            
00013F50                            loc_13976:
00013F50 3428 0008                  		move.w	8(a0),d2
00013F54 0C02 002C                  		cmpi.b	#$2C,d2
00013F58 6400                       		bcc.s	loc_13988
00013F5A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F60 4E75                       		rts	
00013F62                            ; ===========================================================================
00013F62                            
00013F62                            loc_13988:
00013F62 0C02 00E0                  		cmpi.b	#-$20,d2
00013F66 6500                       		bcs.s	loc_13996
00013F68 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F6E 4E75                       		rts	
00013F70                            ; ===========================================================================
00013F70                            
00013F70                            loc_13996:
00013F70 0828 0006 0001             		btst	#6,1(a0)
00013F76 6600                       		bne.s	loc_139B2
00013F78 1228 0026                  		move.b	$26(a0),d1
00013F7C 6700                       		beq.s	locret_139C2
00013F7E 0C01 0080                  		cmpi.b	#-$80,d1
00013F82 6200                       		bhi.s	locret_139C2
00013F84 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F8A 4E75                       		rts	
00013F8C                            ; ===========================================================================
00013F8C                            
00013F8C                            loc_139B2:
00013F8C 1228 0026                  		move.b	$26(a0),d1
00013F90 0C01 0080                  		cmpi.b	#-$80,d1
00013F94 6300                       		bls.s	locret_139C2
00013F96 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F9C                            
00013F9C                            locret_139C2:
00013F9C 4E75                       		rts	
00013F9E                            ; End of function Sonic_Loops
00013F9E                            
00013F9E                            ; ---------------------------------------------------------------------------
00013F9E                            ; Subroutine to	animate	Sonic's sprites
00013F9E                            ; ---------------------------------------------------------------------------
00013F9E                            
00013F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F9E                            
00013F9E                            
00013F9E                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013F9E 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013FA4 7000                       		moveq	#0,d0
00013FA6 1028 001C                  		move.b	$1C(a0),d0
00013FAA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013FAE 6700                       		beq.s	SAnim_Do	; if not, branch
00013FB0 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013FB4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013FBA 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013FC0                            
00013FC0                            SAnim_Do:
00013FC0 D040                       		add.w	d0,d0
00013FC2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013FC6 1011                       		move.b	(a1),d0
00013FC8 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013FCA 1228 0022                  		move.b	$22(a0),d1
00013FCE 0201 0001                  		andi.b	#1,d1
00013FD2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013FD8 8328 0001                  		or.b	d1,1(a0)
00013FDC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013FE0 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013FE2 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013FE6                            
00013FE6                            SAnim_Do2:
00013FE6 7200                       		moveq	#0,d1
00013FE8 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013FEC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013FF0 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013FF2                            
00013FF2                            SAnim_Next:
00013FF2 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013FF6 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013FFA                            
00013FFA                            SAnim_Delay:
00013FFA 4E75                       		rts	
00013FFC                            ; ===========================================================================
00013FFC                            
00013FFC                            SAnim_End_FF:
00013FFC 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013FFE 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014000 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014006 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001400A 60E6                       		bra.s	SAnim_Next
0001400C                            ; ===========================================================================
0001400C                            
0001400C                            SAnim_End_FE:
0001400C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001400E 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014010 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014014 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014018 9200                       		sub.b	d0,d1
0001401A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001401E 60D2                       		bra.s	SAnim_Next
00014020                            ; ===========================================================================
00014020                            
00014020                            SAnim_End_FD:
00014020 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014022 6600                       		bne.s	SAnim_End	; if not, branch
00014024 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001402A                            
0001402A                            SAnim_End:
0001402A 4E75                       		rts	
0001402C                            ; ===========================================================================
0001402C                            
0001402C                            SAnim_WalkRun:				; XREF: SAnim_Do
0001402C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014030 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014032 5200                       		addq.b	#1,d0		; is animation walking/running?
00014034 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014038 7200                       		moveq	#0,d1
0001403A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001403E 1428 0022                  		move.b	$22(a0),d2
00014042 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014046 6600                       		bne.s	loc_13A70	; if yes, branch
00014048 4600                       		not.b	d0		; reverse angle
0001404A                            
0001404A                            loc_13A70:
0001404A 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001404E 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014050 7203                       		moveq	#3,d1
00014052                            
00014052                            loc_13A78:
00014052 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014058 B302                       		eor.b	d1,d2
0001405A 8528 0001                  		or.b	d2,1(a0)
0001405E 0828 0005 0022             		btst	#5,$22(a0)
00014064 6600 0000                  		bne.w	SAnim_Push
00014068 E808                       		lsr.b	#4,d0		; divide angle by $10
0001406A 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001406E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014072 6A00                       		bpl.s	loc_13A9C
00014074 4442                       		neg.w	d2
00014076                            
00014076                            loc_13A9C:
00014076 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001407C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014080 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014082 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014088 1200                       		move.b	d0,d1
0001408A E209                       		lsr.b	#1,d1
0001408C D001                       		add.b	d1,d0
0001408E                            
0001408E                            loc_13AB4:
0001408E D000                       		add.b	d0,d0
00014090 1600                       		move.b	d0,d3
00014092 4442                       		neg.w	d2
00014094 0642 0800                  		addi.w	#$800,d2
00014098 6A00                       		bpl.s	loc_13AC2
0001409A 7400                       		moveq	#0,d2
0001409C                            
0001409C                            loc_13AC2:
0001409C E04A                       		lsr.w	#8,d2
0001409E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140A2 6100 FF42                  		bsr.w	SAnim_Do2
000140A6 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000140AA 4E75                       		rts	
000140AC                            ; ===========================================================================
000140AC                            
000140AC                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000140AC 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000140AE 6600                       		bne.s	SAnim_Push	; if not, branch
000140B0 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140B4 6A00                       		bpl.s	loc_13ADE
000140B6 4442                       		neg.w	d2
000140B8                            
000140B8                            loc_13ADE:
000140B8 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000140BE 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000140C2 6400                       		bcc.s	loc_13AF0	; if yes, branch
000140C4 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000140CA                            
000140CA                            loc_13AF0:
000140CA 4442                       		neg.w	d2
000140CC 0642 0400                  		addi.w	#$400,d2
000140D0 6A00                       		bpl.s	loc_13AFA
000140D2 7400                       		moveq	#0,d2
000140D4                            
000140D4                            loc_13AFA:
000140D4 E04A                       		lsr.w	#8,d2
000140D6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140DA 1228 0022                  		move.b	$22(a0),d1
000140DE 0201 0001                  		andi.b	#1,d1
000140E2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140E8 8328 0001                  		or.b	d1,1(a0)
000140EC 6000 FEF8                  		bra.w	SAnim_Do2
000140F0                            ; ===========================================================================
000140F0                            
000140F0                            SAnim_Push:				; XREF: SAnim_RollJump
000140F0 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140F4 6B00                       		bmi.s	loc_13B1E
000140F6 4442                       		neg.w	d2
000140F8                            
000140F8                            loc_13B1E:
000140F8 0642 0800                  		addi.w	#$800,d2
000140FC 6A00                       		bpl.s	loc_13B26
000140FE 7400                       		moveq	#0,d2
00014100                            
00014100                            loc_13B26:
00014100 EC4A                       		lsr.w	#6,d2
00014102 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014106 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001410C 1228 0022                  		move.b	$22(a0),d1
00014110 0201 0001                  		andi.b	#1,d1
00014114 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001411A 8328 0001                  		or.b	d1,1(a0)
0001411E 6000 FEC6                  		bra.w	SAnim_Do2
00014122                            ; End of function Sonic_Animate
00014122                            
00014122                            ; ===========================================================================
00014122                            SonicAniData:
00014122                            	include "_anim\Sonic.asm"
00014122                            ; ---------------------------------------------------------------------------
00014122                            ; Animation script - Sonic
00014122                            ; ---------------------------------------------------------------------------
00014122 0000                       		dc.w SonAni_Walk-SonicAniData
00014124 0000                       		dc.w SonAni_Run-SonicAniData
00014126 0000                       		dc.w SonAni_Roll-SonicAniData
00014128 0000                       		dc.w SonAni_Roll2-SonicAniData
0001412A 0000                       		dc.w SonAni_Push-SonicAniData
0001412C 0000                       		dc.w SonAni_Wait-SonicAniData
0001412E 0000                       		dc.w SonAni_Balance-SonicAniData
00014130 0000                       		dc.w SonAni_LookUp-SonicAniData
00014132 0000                       		dc.w SonAni_Duck-SonicAniData
00014134 0000                       		dc.w SonAni_Warp1-SonicAniData
00014136 0000                       		dc.w SonAni_Warp2-SonicAniData
00014138 0000                       		dc.w SonAni_Warp3-SonicAniData
0001413A 0000                       		dc.w SonAni_Warp4-SonicAniData
0001413C 0000                       		dc.w SonAni_Stop-SonicAniData
0001413E 0000                       		dc.w SonAni_Float1-SonicAniData
00014140 0000                       		dc.w SonAni_Float2-SonicAniData
00014142 0000                       		dc.w SonAni_Spring-SonicAniData
00014144 0000                       		dc.w SonAni_LZHang-SonicAniData
00014146 0000                       		dc.w SonAni_Leap1-SonicAniData
00014148 0000                       		dc.w SonAni_Leap2-SonicAniData
0001414A 0000                       		dc.w SonAni_Surf-SonicAniData
0001414C 0000                       		dc.w SonAni_Bubble-SonicAniData
0001414E 0000                       		dc.w SonAni_Death1-SonicAniData
00014150 0000                       		dc.w SonAni_Drown-SonicAniData
00014152 0000                       		dc.w SonAni_Death2-SonicAniData
00014154 0000                       		dc.w SonAni_Shrink-SonicAniData
00014156 0000                       		dc.w SonAni_Hurt-SonicAniData
00014158 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001415A 0000                       		dc.w SonAni_Blank-SonicAniData
0001415C 0000                       		dc.w SonAni_Float3-SonicAniData
0001415E 0000                       		dc.w SonAni_Float4-SonicAniData
00014160 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001416A FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014172 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001417A FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014182 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001418A 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000141A0 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000141A4 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000141A8 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000141AC 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000141B0 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000141B4 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000141B8 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000141BC 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000141C0 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000141C4 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000141CC 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000141D0 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000141D4 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000141DA 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000141E0 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000141E4 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000141EC 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000141F0 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000141F4 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000141F8 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014202 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00014206 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001420A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001420E 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014216 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001421A                            		even
0001421A                            		even
0001421A                            
0001421A                            ; ---------------------------------------------------------------------------
0001421A                            ; Sonic	pattern	loading	subroutine
0001421A                            ; ---------------------------------------------------------------------------
0001421A                            
0001421A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001421A                            
0001421A                            
0001421A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001421A 7000                       		moveq	#0,d0
0001421C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014220 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014224 6700                       		beq.s	locret_13C96
00014226 11C0 F766                  		move.b	d0,($FFFFF766).w
0001422A 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00014230 D040                       		add.w	d0,d0
00014232 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014236 7200                       		moveq	#0,d1
00014238 121A                       		move.b	(a2)+,d1	; read "number of entries" value
0001423A 5301                       		subq.b	#1,d1
0001423C 6B00                       		bmi.s	locret_13C96
0001423E 47F8 C800                  		lea	($FFFFC800).w,a3
00014242 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014248                            
00014248                            SPLC_ReadEntry:
00014248 7400                       		moveq	#0,d2
0001424A 141A                       		move.b	(a2)+,d2
0001424C 3002                       		move.w	d2,d0
0001424E E808                       		lsr.b	#4,d0
00014250 E14A                       		lsl.w	#8,d2
00014252 141A                       		move.b	(a2)+,d2
00014254 EB4A                       		lsl.w	#5,d2
00014256 43F9 0000 0000             		lea	(Art_Sonic).l,a1
0001425C D3C2                       		adda.l	d2,a1
0001425E                            
0001425E                            SPLC_LoadTile:
0001425E 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014262 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014266 47EB 0020                  		lea	$20(a3),a3	; next tile
0001426A 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
0001426E                            
0001426E 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014272                            
00014272                            locret_13C96:
00014272 4E75                       		rts	
00014274                            ; End of function LoadSonicDynPLC
00014274                            
00014274                            ; ===========================================================================
00014274                            ; ---------------------------------------------------------------------------
00014274                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014274                            ; ---------------------------------------------------------------------------
00014274                            
00014274                            Obj0A:					; XREF: Obj_Index
00014274 7000                       		moveq	#0,d0
00014276 1028 0024                  		move.b	$24(a0),d0
0001427A 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001427E 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014282                            ; ===========================================================================
00014282 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014286 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001428A 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001428E 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014292 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014294                            ; ===========================================================================
00014294                            
00014294                            Obj0A_Main:				; XREF: Obj0A_Index
00014294 5428 0024                  		addq.b	#2,$24(a0)
00014298 217C 0001 2F3A 0004        		move.l	#Map_obj64,4(a0)
000142A0 317C 8348 0002             		move.w	#$8348,2(a0)
000142A6 117C 0084 0001             		move.b	#$84,1(a0)
000142AC 117C 0010 0019             		move.b	#$10,$19(a0)
000142B2 117C 0001 0018             		move.b	#1,$18(a0)
000142B8 1028 0028                  		move.b	$28(a0),d0
000142BC 6A00                       		bpl.s	loc_13D00
000142BE 5028 0024                  		addq.b	#8,$24(a0)
000142C2 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000142CA 317C 0440 0002             		move.w	#$440,2(a0)
000142D0 0240 007F                  		andi.w	#$7F,d0
000142D4 1140 0033                  		move.b	d0,$33(a0)
000142D8 6000 0000                  		bra.w	Obj0A_Countdown
000142DC                            ; ===========================================================================
000142DC                            
000142DC                            loc_13D00:
000142DC 1140 001C                  		move.b	d0,$1C(a0)
000142E0 3168 0008 0030             		move.w	8(a0),$30(a0)
000142E6 317C FF78 0012             		move.w	#-$88,$12(a0)
000142EC                            
000142EC                            Obj0A_Animate:				; XREF: Obj0A_Index
000142EC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000142F2 4EB9 0000 AC42             		jsr	AnimateSprite
000142F8                            
000142F8                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000142F8 3038 F646                  		move.w	($FFFFF646).w,d0
000142FC B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014300 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014302 117C 0006 0024             		move.b	#6,$24(a0)
00014308 5E28 001C                  		addq.b	#7,$1C(a0)
0001430C 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014312 6700                       		beq.s	Obj0A_Display
00014314 6000                       		bra.s	Obj0A_Display
00014316                            ; ===========================================================================
00014316                            
00014316                            Obj0A_Wobble:
00014316 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001431A 6700                       		beq.s	loc_13D44
0001431C 5868 0030                  		addq.w	#4,$30(a0)
00014320                            
00014320                            loc_13D44:
00014320 1028 0026                  		move.b	$26(a0),d0
00014324 5228 0026                  		addq.b	#1,$26(a0)
00014328 0240 007F                  		andi.w	#$7F,d0
0001432C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014332 1031 0000                  		move.b	(a1,d0.w),d0
00014336 4880                       		ext.w	d0
00014338 D068 0030                  		add.w	$30(a0),d0
0001433C 3140 0008                  		move.w	d0,8(a0)
00014340 6100                       		bsr.s	Obj0A_ShowNumber
00014342 4EBA 983E                  		jsr	SpeedToPos
00014346 4A28 0001                  		tst.b	1(a0)
0001434A 6A00                       		bpl.s	Obj0A_Delete
0001434C 4EFA 985A                  		jmp	DisplaySprite
00014350                            ; ===========================================================================
00014350                            
00014350                            Obj0A_Delete:
00014350 4EFA 9892                  		jmp	DeleteObject
00014354                            ; ===========================================================================
00014354                            
00014354                            Obj0A_Display:				; XREF: Obj0A_Index
00014354 6100                       		bsr.s	Obj0A_ShowNumber
00014356 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001435C 4EB9 0000 AC42             		jsr	AnimateSprite
00014362 4EFA 9844                  		jmp	DisplaySprite
00014366                            ; ===========================================================================
00014366                            
00014366                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014366 4EFA 987C                  		jmp	DeleteObject
0001436A                            ; ===========================================================================
0001436A                            
0001436A                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001436A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014370 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014372 5368 0038                  		subq.w	#1,$38(a0)
00014376 6600                       		bne.s	Obj0A_Display2
00014378 117C 000E 0024             		move.b	#$E,$24(a0)
0001437E 5E28 001C                  		addq.b	#7,$1C(a0)
00014382 60D0                       		bra.s	Obj0A_Display
00014384                            ; ===========================================================================
00014384                            
00014384                            Obj0A_Display2:
00014384 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001438A 4EB9 0000 AC42             		jsr	AnimateSprite
00014390 4A28 0001                  		tst.b	1(a0)
00014394 6A00                       		bpl.s	Obj0A_Delete3
00014396 4EFA 9810                  		jmp	DisplaySprite
0001439A                            ; ===========================================================================
0001439A                            
0001439A                            Obj0A_Delete3:
0001439A 4EFA 9848                  		jmp	DeleteObject
0001439E                            ; ===========================================================================
0001439E                            
0001439E                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001439E 4A68 0038                  		tst.w	$38(a0)
000143A2 6700                       		beq.s	locret_13E1A
000143A4 5368 0038                  		subq.w	#1,$38(a0)
000143A8 6600                       		bne.s	locret_13E1A
000143AA 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000143B0 6400                       		bcc.s	locret_13E1A
000143B2 317C 000F 0038             		move.w	#$F,$38(a0)
000143B8 4268 0012                  		clr.w	$12(a0)
000143BC 117C 0080 0001             		move.b	#$80,1(a0)
000143C2 3028 0008                  		move.w	8(a0),d0
000143C6 9078 F700                  		sub.w	($FFFFF700).w,d0
000143CA 0640 0080                  		addi.w	#$80,d0
000143CE 3140 0008                  		move.w	d0,8(a0)
000143D2 3028 000C                  		move.w	$C(a0),d0
000143D6 9078 F704                  		sub.w	($FFFFF704).w,d0
000143DA 0640 0080                  		addi.w	#$80,d0
000143DE 3140 000A                  		move.w	d0,$A(a0)
000143E2 117C 000C 0024             		move.b	#$C,$24(a0)
000143E8                            
000143E8                            locret_13E1A:
000143E8 4E75                       		rts	
000143EA                            ; ===========================================================================
000143EA                            Obj0A_WobbleData:
000143EA 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000143FB 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001440C 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001441D 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001442D FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001443A FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014447 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014454 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014461 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001446A                            ; ===========================================================================
0001446A                            
0001446A                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001446A 4A68 002C                  		tst.w	$2C(a0)
0001446E 6600 0000                  		bne.w	loc_13F86
00014472 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014478 6400 0000                  		bcc.w	locret_1408C
0001447C 0838 0006 D022             		btst	#6,($FFFFD022).w
00014482 6700 0000                  		beq.w	locret_1408C
00014486 5368 0038                  		subq.w	#1,$38(a0)
0001448A 6A00 0000                  		bpl.w	loc_13FAC
0001448E 317C 003B 0038             		move.w	#59,$38(a0)
00014494 317C 0001 0036             		move.w	#1,$36(a0)
0001449A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000144A0 0240 0001                  		andi.w	#1,d0
000144A4 1140 0034                  		move.b	d0,$34(a0)
000144A8 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000144AC 0C40 0019                  		cmpi.w	#$19,d0
000144B0 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000144B2 0C40 0014                  		cmpi.w	#$14,d0
000144B6 6700                       		beq.s	Obj0A_WarnSound
000144B8 0C40 000F                  		cmpi.w	#$F,d0
000144BC 6700                       		beq.s	Obj0A_WarnSound
000144BE 0C40 000C                  		cmpi.w	#$C,d0
000144C2 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000144C4 6600                       		bne.s	loc_13F02
000144C6 303C 0092                  		move.w	#$92,d0
000144CA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
000144D0                            
000144D0                            loc_13F02:
000144D0 5328 0032                  		subq.b	#1,$32(a0)
000144D4 6A00                       		bpl.s	Obj0A_ReduceAir
000144D6 1168 0033 0032             		move.b	$33(a0),$32(a0)
000144DC 08E8 0007 0036             		bset	#7,$36(a0)
000144E2 6000                       		bra.s	Obj0A_ReduceAir
000144E4                            ; ===========================================================================
000144E4                            
000144E4                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000144E4 303C 00C2                  		move.w	#$C2,d0
000144E8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000144EE                            
000144EE                            Obj0A_ReduceAir:
000144EE 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000144F2 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000144F6 6100 0000                  		bsr.w	ResumeMusic
000144FA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014500 303C 00B2                  		move.w	#$B2,d0
00014504 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
0001450A 117C 000A 0034             		move.b	#$A,$34(a0)
00014510 317C 0001 0036             		move.w	#1,$36(a0)
00014516 317C 0078 002C             		move.w	#$78,$2C(a0)
0001451C 2F08                       		move.l	a0,-(sp)
0001451E 41F8 D000                  		lea	($FFFFD000).w,a0
00014522 6100 F85E                  		bsr.w	Sonic_ResetOnFloor
00014526 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001452C 08E8 0001 0022             		bset	#1,$22(a0)
00014532 08E8 0007 0002             		bset	#7,2(a0)
00014538 317C 0000 0012             		move.w	#0,$12(a0)
0001453E 317C 0000 0010             		move.w	#0,$10(a0)
00014544 317C 0000 0014             		move.w	#0,$14(a0)
0001454A 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014550 205F                       		movea.l	(sp)+,a0
00014552 4E75                       		rts	
00014554                            ; ===========================================================================
00014554                            
00014554                            loc_13F86:
00014554 5368 002C                  		subq.w	#1,$2C(a0)
00014558 6600                       		bne.s	loc_13F94
0001455A 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014560 4E75                       		rts	
00014562                            ; ===========================================================================
00014562                            
00014562                            loc_13F94:
00014562 2F08                       		move.l	a0,-(sp)
00014564 41F8 D000                  		lea	($FFFFD000).w,a0
00014568 4EBA 9618                  		jsr	SpeedToPos
0001456C 0668 0010 0012             		addi.w	#$10,$12(a0)
00014572 205F                       		movea.l	(sp)+,a0
00014574 6000                       		bra.s	loc_13FAC
00014576                            ; ===========================================================================
00014576                            
00014576                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014576 6000                       		bra.s	Obj0A_MakeItem
00014578                            ; ===========================================================================
00014578                            
00014578                            loc_13FAC:
00014578 4A68 0036                  		tst.w	$36(a0)
0001457C 6700 0000                  		beq.w	locret_1408C
00014580 5368 003A                  		subq.w	#1,$3A(a0)
00014584 6A00 0000                  		bpl.w	locret_1408C
00014588                            
00014588                            Obj0A_MakeItem:
00014588 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001458E 0240 000F                  		andi.w	#$F,d0
00014592 3140 003A                  		move.w	d0,$3A(a0)
00014596 4EBA 9A96                  		jsr	SingleObjLoad
0001459A 6600 0000                  		bne.w	locret_1408C
0001459E 12BC 000A                  		move.b	#$A,0(a1)	; load object
000145A2 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000145A8 7006                       		moveq	#6,d0
000145AA 0838 0000 D022             		btst	#0,($FFFFD022).w
000145B0 6700                       		beq.s	loc_13FF2
000145B2 4440                       		neg.w	d0
000145B4 137C 0040 0026             		move.b	#$40,$26(a1)
000145BA                            
000145BA                            loc_13FF2:
000145BA D169 0008                  		add.w	d0,8(a1)
000145BE 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000145C4 137C 0006 0028             		move.b	#6,$28(a1)
000145CA 4A68 002C                  		tst.w	$2C(a0)
000145CE 6700 0000                  		beq.w	loc_1403E
000145D2 0268 0007 003A             		andi.w	#7,$3A(a0)
000145D8 0668 0000 003A             		addi.w	#0,$3A(a0)
000145DE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000145E2 0440 000C                  		subi.w	#$C,d0
000145E6 3340 000C                  		move.w	d0,$C(a1)
000145EA 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000145F0 1340 0026                  		move.b	d0,$26(a1)
000145F4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000145F8 0200 0003                  		andi.b	#3,d0
000145FC 6600                       		bne.s	loc_14082
000145FE 137C 000E 0028             		move.b	#$E,$28(a1)
00014604 6000                       		bra.s	loc_14082
00014606                            ; ===========================================================================
00014606                            
00014606                            loc_1403E:
00014606 0828 0007 0036             		btst	#7,$36(a0)
0001460C 6700                       		beq.s	loc_14082
0001460E 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014612 E24A                       		lsr.w	#1,d2
00014614 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001461A 0240 0003                  		andi.w	#3,d0
0001461E 6600                       		bne.s	loc_1406A
00014620 08E8 0006 0036             		bset	#6,$36(a0)
00014626 6600                       		bne.s	loc_14082
00014628 1342 0028                  		move.b	d2,$28(a1)
0001462C 337C 001C 0038             		move.w	#$1C,$38(a1)
00014632                            
00014632                            loc_1406A:
00014632 4A28 0034                  		tst.b	$34(a0)
00014636 6600                       		bne.s	loc_14082
00014638 08E8 0006 0036             		bset	#6,$36(a0)
0001463E 6600                       		bne.s	loc_14082
00014640 1342 0028                  		move.b	d2,$28(a1)
00014644 337C 001C 0038             		move.w	#$1C,$38(a1)
0001464A                            
0001464A                            loc_14082:
0001464A 5328 0034                  		subq.b	#1,$34(a0)
0001464E 6A00                       		bpl.s	locret_1408C
00014650 4268 0036                  		clr.w	$36(a0)
00014654                            
00014654                            locret_1408C:
00014654 4E75                       		rts	
00014656                            
00014656                            ; ---------------------------------------------------------------------------
00014656                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014656                            ; ---------------------------------------------------------------------------
00014656                            
00014656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014656                            
00014656                            
00014656                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014656 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001465C                             
0001465C                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001465C                             
0001465C 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014660                             
00014660 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014666 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014668 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001466E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014670                             
00014670                            Air_GetBgm2:
00014670 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014676 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014678 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001467E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014680                             
00014680                            Air_GetBgm3:
00014680 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014686 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014688 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
0001468E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014690                             
00014690                            Air_GetBgm4:
00014690 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014696 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014698 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001469E                             
0001469E                            Air_PlayMusic:
0001469E 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000146A2                             
000146A2                            loc_140A6:
000146A2 4EB9 0000 15B6             		jsr	(PlaySound).l
000146A8                             
000146A8                            ; NineKode ends here
000146A8                            
000146A8                            loc_140AC:
000146A8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000146AE 4238 D372                  		clr.b	($FFFFD372).w
000146B2 4E75                       		rts	
000146B4                            ; End of function ResumeMusic
000146B4                            
000146B4                            ; ===========================================================================
000146B4                            Ani_obj0A:
000146B4                            	include "_anim\obj0A.asm"
000146B4                            ; ---------------------------------------------------------------------------
000146B4                            ; Animation script - countdown numbers and bubbles (LZ)
000146B4                            ; ---------------------------------------------------------------------------
000146B4 0000                       		dc.w byte_140D6-Ani_obj0A
000146B6 0000                       		dc.w byte_140E0-Ani_obj0A
000146B8 0000                       		dc.w byte_140EA-Ani_obj0A
000146BA 0000                       		dc.w byte_140F4-Ani_obj0A
000146BC 0000                       		dc.w byte_140FE-Ani_obj0A
000146BE 0000                       		dc.w byte_14108-Ani_obj0A
000146C0 0000                       		dc.w byte_14112-Ani_obj0A
000146C2 0000                       		dc.w byte_14118-Ani_obj0A
000146C4 0000                       		dc.w byte_14120-Ani_obj0A
000146C6 0000                       		dc.w byte_14128-Ani_obj0A
000146C8 0000                       		dc.w byte_14130-Ani_obj0A
000146CA 0000                       		dc.w byte_14138-Ani_obj0A
000146CC 0000                       		dc.w byte_14140-Ani_obj0A
000146CE 0000                       		dc.w byte_14148-Ani_obj0A
000146D0 0000                       		dc.w byte_1414A-Ani_obj0A
000146D2 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000146DC 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000146E6 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000146F0 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000146FA 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014704 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
0001470E 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014714 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001471C 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014724 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001472C 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014734 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001473C 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014744 0EFC                       byte_14148:	dc.b $E, $FC
00014746 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001474C                            		even
0001474C                            		even
0001474C                            
0001474C                            ; ---------------------------------------------------------------------------
0001474C                            ; Sprite mappings - drowning countdown numbers (LZ)
0001474C                            ; ---------------------------------------------------------------------------
0001474C                            Map_obj0A:
0001474C                            	include "_maps\obj0A.asm"
0001474C                            ; ---------------------------------------------------------------------------
0001474C                            ; Sprite mappings - drowning countdown numbers (LZ)
0001474C                            ; ---------------------------------------------------------------------------
0001474C 0000                       		dc.w byte_14152-Map_obj0A
0001474E 01                         byte_14152:	dc.b 1
0001474F E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014754                            		even
00014754                            		even
00014754                            
00014754                            ; ===========================================================================
00014754                            ; ---------------------------------------------------------------------------
00014754                            ; Object 38 - shield and invincibility stars
00014754                            ; ---------------------------------------------------------------------------
00014754                            
00014754                            Obj38:					; XREF: Obj_Index
00014754 7000                       		moveq	#0,d0
00014756 1028 0024                  		move.b	$24(a0),d0
0001475A 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
0001475E 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014762                            ; ===========================================================================
00014762 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014764 0000                       		dc.w Obj38_Shield-Obj38_Index
00014766 0000                       		dc.w Obj38_Stars-Obj38_Index
00014768                            ; ===========================================================================
00014768                            
00014768                            Obj38_Main:				; XREF: Obj38_Index
00014768 5428 0024                  		addq.b	#2,$24(a0)
0001476C 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014774 117C 0004 0001             		move.b	#4,1(a0)
0001477A 117C 0001 0018             		move.b	#1,$18(a0)
00014780 117C 0010 0019             		move.b	#$10,$19(a0)
00014786 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001478A 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001478C 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014792 4E75                       		rts	
00014794                            ; ===========================================================================
00014794                            
00014794                            Obj38_DoStars:
00014794 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014798 317C 055C 0002             		move.w	#$55C,2(a0)
0001479E 4E75                       		rts	
000147A0                            ; ===========================================================================
000147A0                            
000147A0                            Obj38_Shield:				; XREF: Obj38_Index
000147A0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147A4 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000147A6 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000147AA 6700                       		beq.s	Obj38_Delete	; if not, branch
000147AC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000147B2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000147B8 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000147BE 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000147C4 4EB9 0000 AC42             		jsr	AnimateSprite
000147CA 4EFA 93DC                  		jmp	DisplaySprite
000147CE                            ; ===========================================================================
000147CE                            
000147CE                            Obj38_RmvShield:
000147CE 4E75                       		rts	
000147D0                            ; ===========================================================================
000147D0                            
000147D0                            Obj38_Delete:
000147D0 4EFA 9412                  		jmp	DeleteObject
000147D4                            ; ===========================================================================
000147D4                            
000147D4                            Obj38_Stars:				; XREF: Obj38_Index
000147D4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147D8 6700                       		beq.s	Obj38_Delete2	; if not, branch
000147DA 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000147DE 1228 001C                  		move.b	$1C(a0),d1
000147E2 5301                       		subq.b	#1,d1
000147E4 6000                       		bra.s	Obj38_StarTrail
000147E6                            ; ===========================================================================
000147E6 E909                       		lsl.b	#4,d1
000147E8 5801                       		addq.b	#4,d1
000147EA 9001                       		sub.b	d1,d0
000147EC 1228 0030                  		move.b	$30(a0),d1
000147F0 9001                       		sub.b	d1,d0
000147F2 5801                       		addq.b	#4,d1
000147F4 0201 000F                  		andi.b	#$F,d1
000147F8 1141 0030                  		move.b	d1,$30(a0)
000147FC 6000                       		bra.s	Obj38_StarTrail2a
000147FE                            ; ===========================================================================
000147FE                            
000147FE                            Obj38_StarTrail:			; XREF: Obj38_Stars
000147FE E709                       		lsl.b	#3,d1
00014800 1401                       		move.b	d1,d2
00014802 D201                       		add.b	d1,d1
00014804 D202                       		add.b	d2,d1
00014806 5801                       		addq.b	#4,d1
00014808 9001                       		sub.b	d1,d0
0001480A 1228 0030                  		move.b	$30(a0),d1
0001480E 9001                       		sub.b	d1,d0
00014810 5801                       		addq.b	#4,d1
00014812 0C01 0018                  		cmpi.b	#$18,d1
00014816 6500                       		bcs.s	Obj38_StarTrail2
00014818 7200                       		moveq	#0,d1
0001481A                            
0001481A                            Obj38_StarTrail2:
0001481A 1141 0030                  		move.b	d1,$30(a0)
0001481E                            
0001481E                            Obj38_StarTrail2a:
0001481E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014822 43F1 0000                  		lea	(a1,d0.w),a1
00014826 3159 0008                  		move.w	(a1)+,8(a0)
0001482A 3159 000C                  		move.w	(a1)+,$C(a0)
0001482E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014834 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001483A 4EB9 0000 AC42             		jsr	AnimateSprite
00014840 4EFA 9366                  		jmp	DisplaySprite
00014844                            ; ===========================================================================
00014844                            
00014844                            Obj38_Delete2:				; XREF: Obj38_Stars
00014844 4EFA 939E                  		jmp	DeleteObject
00014848                            ; ===========================================================================
00014848                            ; ---------------------------------------------------------------------------
00014848                            ; Object 4A - special stage entry from beta
00014848                            ; ---------------------------------------------------------------------------
00014848                            
00014848                            Obj4A:					; XREF: Obj_Index
00014848 7000                       		moveq	#0,d0
0001484A 1028 0024                  		move.b	$24(a0),d0
0001484E 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014852 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014856                            ; ===========================================================================
00014856 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014858 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001485A 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001485C                            ; ===========================================================================
0001485C                            
0001485C                            Obj4A_Main:				; XREF: Obj4A_Index
0001485C 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014860 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014862 4E75                       		rts	
00014864                            ; ===========================================================================
00014864                            
00014864                            Obj4A_Main2:
00014864 5428 0024                  		addq.b	#2,$24(a0)
00014868 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014870 117C 0004 0001             		move.b	#4,1(a0)
00014876 117C 0001 0018             		move.b	#1,$18(a0)
0001487C 117C 0038 0019             		move.b	#$38,$19(a0)
00014882 317C 0541 0002             		move.w	#$541,2(a0)
00014888 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001488E                            
0001488E                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001488E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014894 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001489A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000148A0 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000148A6 4EB9 0000 AC42             		jsr	AnimateSprite
000148AC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000148B2 6600                       		bne.s	Obj4A_Display
000148B4 4A38 D000                  		tst.b	($FFFFD000).w
000148B8 6700                       		beq.s	Obj4A_Display
000148BA 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000148C0 303C 00A8                  		move.w	#$A8,d0
000148C4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000148CA                            
000148CA                            Obj4A_Display:
000148CA 4EFA 92DC                  		jmp	DisplaySprite
000148CE                            ; ===========================================================================
000148CE                            
000148CE                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000148CE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000148D2 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000148D4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000148DA 4EFA 9308                  		jmp	DeleteObject
000148DE                            ; ===========================================================================
000148DE                            
000148DE                            Obj4A_Wait:
000148DE 4E75                       		rts	
000148E0                            ; ===========================================================================
000148E0                            ; ---------------------------------------------------------------------------
000148E0                            ; Object 08 - water splash (LZ)
000148E0                            ; ---------------------------------------------------------------------------
000148E0                            
000148E0                            Obj08:					; XREF: Obj_Index
000148E0 7000                       		moveq	#0,d0
000148E2 1028 0024                  		move.b	$24(a0),d0
000148E6 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000148EA 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000148EE                            ; ===========================================================================
000148EE 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000148F0 0000                       		dc.w Obj08_Display-Obj08_Index
000148F2 0000                       		dc.w Obj08_Delete-Obj08_Index
000148F4                            ; ===========================================================================
000148F4                            
000148F4                            Obj08_Main:				; XREF: Obj08_Index
000148F4 5428 0024                  		addq.b	#2,$24(a0)
000148F8 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014900 0028 0004 0001             		ori.b	#4,1(a0)
00014906 117C 0001 0018             		move.b	#1,$18(a0)
0001490C 117C 0010 0019             		move.b	#$10,$19(a0)
00014912 317C 4259 0002             		move.w	#$4259,2(a0)
00014918 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001491E                            
0001491E                            Obj08_Display:				; XREF: Obj08_Index
0001491E 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014924 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001492A 4EB9 0000 AC42             		jsr	AnimateSprite
00014930 4EFA 9276                  		jmp	DisplaySprite
00014934                            ; ===========================================================================
00014934                            
00014934                            Obj08_Delete:				; XREF: Obj08_Index
00014934 4EFA 92AE                  		jmp	DeleteObject	; delete when animation	is complete
00014938                            ; ===========================================================================
00014938                            Ani_obj38:
00014938                            	include "_anim\obj38.asm"
00014938                            ; ---------------------------------------------------------------------------
00014938                            ; Animation script - shield and invincibility stars
00014938                            ; ---------------------------------------------------------------------------
00014938 0000                       		dc.w byte_14356-Ani_obj38
0001493A 0000                       		dc.w byte_1435E-Ani_obj38
0001493C 0000                       		dc.w byte_14364-Ani_obj38
0001493E 0000                       		dc.w byte_1437E-Ani_obj38
00014940 0000                       		dc.w byte_14398-Ani_obj38
00014942 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001494A 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014950 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014961 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001496A 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001497B 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014984 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014995 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001499E                            		even
0001499E                            		even
0001499E                            
0001499E                            ; ---------------------------------------------------------------------------
0001499E                            ; Sprite mappings - shield and invincibility stars
0001499E                            ; ---------------------------------------------------------------------------
0001499E                            Map_obj38:
0001499E                            	include "_maps\obj38.asm"
0001499E                            ; ---------------------------------------------------------------------------
0001499E                            ; Sprite mappings - shield and invincibility stars
0001499E                            ; ---------------------------------------------------------------------------
0001499E 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000149A2 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000149A6 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000149AA 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000149AE 04                         byte_143C2:	dc.b 4
000149AF E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149B4 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149B9 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000149BE 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149C3 04                         byte_143D7:	dc.b 4
000149C4 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000149C9 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000149CE 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000149D3 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000149D8 04                         byte_143EC:	dc.b 4
000149D9 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149DE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149E3 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149E8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000149ED 04                         byte_14401:	dc.b 4
000149EE E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149F3 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149F8 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149FD 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014A02 04                         byte_14416:	dc.b 4
00014A03 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014A08 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014A0D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014A12 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014A17 04                         byte_1442B:	dc.b 4
00014A18 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014A1D E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014A22 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014A27 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014A2C 04                         byte_14440:	dc.b 4
00014A2D E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014A32 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014A37 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014A3C 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014A42 00                         		even
00014A42 00                         		even
00014A42                            
00014A42                            Ani_obj4A:
00014A42                            	include "_anim\obj4A.asm"
00014A42                            ; ---------------------------------------------------------------------------
00014A42                            ; Animation script - special stage entry effect from beta
00014A42                            ; ---------------------------------------------------------------------------
00014A42 0000                       		dc.w byte_14458-Ani_obj4A
00014A44 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014A58                            		even
00014A58                            		even
00014A58                            
00014A58                            ; ---------------------------------------------------------------------------
00014A58                            ; Sprite mappings - special stage entry	from beta
00014A58                            ; ---------------------------------------------------------------------------
00014A58                            Map_obj4A:
00014A58                            	include "_maps\obj4A.asm"
00014A58                            ; ---------------------------------------------------------------------------
00014A58                            ; Sprite mappings - special stage entry	from beta
00014A58                            ; ---------------------------------------------------------------------------
00014A58 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014A5C 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014A60 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014A64 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014A68 03                         byte_1447C:	dc.b 3
00014A69 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014A6E 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014A73 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014A78 03                         byte_1448C:	dc.b 3
00014A79 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014A7E 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014A83 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014A88 05                         byte_1449C:	dc.b 5
00014A89 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014A8E EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014A93 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014A98 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014A9D 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014AA2 09                         byte_144B6:	dc.b 9
00014AA3 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014AA8 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014AAD 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014AB2 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014AB7 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014ABC F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014AC1 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014AC6 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014ACB F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014AD0 12                         byte_144E4:	dc.b $12
00014AD1 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014AD6 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014ADB F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014AE0 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014AE5 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014AEA 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014AEF 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014AF4 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014AF9 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014AFE 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014B03 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014B08 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014B0D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014B12 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014B17 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014B1C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014B21 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014B26 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014B2B 11                         byte_1453F:	dc.b $11
00014B2C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014B31 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014B36 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014B3B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014B40 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014B45 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B4A 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014B4F F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014B54 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014B59 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014B5E 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014B63 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014B68 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014B6D 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014B72 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014B77 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014B7C 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014B81 09                         byte_14595:	dc.b 9
00014B82 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014B87 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014B8C 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014B91 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014B96 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014B9B FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014BA0 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014BA5 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014BAA 04                         		dc.b 4
00014BAB 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014BB0                            		even
00014BB0                            		even
00014BB0                            
00014BB0                            Ani_obj08:
00014BB0                            	include "_anim\obj08.asm"
00014BB0                            ; ---------------------------------------------------------------------------
00014BB0                            ; Animation script - water splash (LZ)
00014BB0                            ; ---------------------------------------------------------------------------
00014BB0 0000                       		dc.w byte_145C6-Ani_obj08
00014BB2 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014BB8                            		even
00014BB8                            		even
00014BB8                            
00014BB8                            ; ---------------------------------------------------------------------------
00014BB8                            ; Sprite mappings - water splash (LZ)
00014BB8                            ; ---------------------------------------------------------------------------
00014BB8                            Map_obj08:
00014BB8                            	include "_maps\obj08.asm"
00014BB8                            ; ---------------------------------------------------------------------------
00014BB8                            ; Sprite mappings - water splash (LZ)
00014BB8                            ; ---------------------------------------------------------------------------
00014BB8 0000                       		dc.w byte_145D2-Map_obj08
00014BBA 0000                       		dc.w byte_145DD-Map_obj08
00014BBC 0000                       		dc.w byte_145E8-Map_obj08
00014BBE 02                         byte_145D2:	dc.b 2
00014BBF F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014BC4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014BC9 02                         byte_145DD:	dc.b 2
00014BCA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014BCF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014BD4 01                         byte_145E8:	dc.b 1
00014BD5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014BDA                            		even
00014BDA                            		even
00014BDA                            
00014BDA                            ; ---------------------------------------------------------------------------
00014BDA                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014BDA                            ; ---------------------------------------------------------------------------
00014BDA                            
00014BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BDA                            
00014BDA                            
00014BDA                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014BDA 0828 0003 0022             		btst	#3,$22(a0)
00014BE0 6700                       		beq.s	loc_14602
00014BE2 7000                       		moveq	#0,d0
00014BE4 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BE8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BEC 4E75                       		rts	
00014BEE                            ; ===========================================================================
00014BEE                            
00014BEE                            loc_14602:
00014BEE 7003                       		moveq	#3,d0
00014BF0 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BF4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BF8 1028 0026                  		move.b	$26(a0),d0
00014BFC 0600 0020                  		addi.b	#$20,d0
00014C00 6A00                       		bpl.s	loc_14624
00014C02 1028 0026                  		move.b	$26(a0),d0
00014C06 6A00                       		bpl.s	loc_1461E
00014C08 5300                       		subq.b	#1,d0
00014C0A                            
00014C0A                            loc_1461E:
00014C0A 0600 0020                  		addi.b	#$20,d0
00014C0E 6000                       		bra.s	loc_14630
00014C10                            ; ===========================================================================
00014C10                            
00014C10                            loc_14624:
00014C10 1028 0026                  		move.b	$26(a0),d0
00014C14 6A00                       		bpl.s	loc_1462C
00014C16 5200                       		addq.b	#1,d0
00014C18                            
00014C18                            loc_1462C:
00014C18 0600 001F                  		addi.b	#$1F,d0
00014C1C                            
00014C1C                            loc_14630:
00014C1C 0200 00C0                  		andi.b	#$C0,d0
00014C20 0C00 0040                  		cmpi.b	#$40,d0
00014C24 6700 0000                  		beq.w	Sonic_WalkVertL
00014C28 0C00 0080                  		cmpi.b	#$80,d0
00014C2C 6700 0000                  		beq.w	Sonic_WalkCeiling
00014C30 0C00 00C0                  		cmpi.b	#$C0,d0
00014C34 6700 0000                  		beq.w	Sonic_WalkVertR
00014C38 3428 000C                  		move.w	$C(a0),d2
00014C3C 3628 0008                  		move.w	8(a0),d3
00014C40 7000                       		moveq	#0,d0
00014C42 1028 0016                  		move.b	$16(a0),d0
00014C46 4880                       		ext.w	d0
00014C48 D440                       		add.w	d0,d2
00014C4A 1028 0017                  		move.b	$17(a0),d0
00014C4E 4880                       		ext.w	d0
00014C50 D640                       		add.w	d0,d3
00014C52 49F8 F768                  		lea	($FFFFF768).w,a4
00014C56 367C 0010                  		movea.w	#$10,a3
00014C5A 3C3C 0000                  		move.w	#0,d6
00014C5E 7A0D                       		moveq	#$D,d5
00014C60 6100 0000                  		bsr.w	FindFloor
00014C64 3F01                       		move.w	d1,-(sp)
00014C66 3428 000C                  		move.w	$C(a0),d2
00014C6A 3628 0008                  		move.w	8(a0),d3
00014C6E 7000                       		moveq	#0,d0
00014C70 1028 0016                  		move.b	$16(a0),d0
00014C74 4880                       		ext.w	d0
00014C76 D440                       		add.w	d0,d2
00014C78 1028 0017                  		move.b	$17(a0),d0
00014C7C 4880                       		ext.w	d0
00014C7E 4440                       		neg.w	d0
00014C80 D640                       		add.w	d0,d3
00014C82 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C86 367C 0010                  		movea.w	#$10,a3
00014C8A 3C3C 0000                  		move.w	#0,d6
00014C8E 7A0D                       		moveq	#$D,d5
00014C90 6100 0000                  		bsr.w	FindFloor
00014C94 301F                       		move.w	(sp)+,d0
00014C96 6100 0000                  		bsr.w	Sonic_Angle
00014C9A 4A41                       		tst.w	d1
00014C9C 6700                       		beq.s	locret_146BE
00014C9E 6A00                       		bpl.s	loc_146C0
00014CA0 0C41 FFF2                  		cmpi.w	#-$E,d1
00014CA4 6D00                       		blt.s	locret_146E6
00014CA6 D368 000C                  		add.w	d1,$C(a0)
00014CAA                            
00014CAA                            locret_146BE:
00014CAA 4E75                       		rts	
00014CAC                            ; ===========================================================================
00014CAC                            
00014CAC                            loc_146C0:
00014CAC 0C41 000E                  		cmpi.w	#$E,d1
00014CB0 6E00                       		bgt.s	loc_146CC
00014CB2                            
00014CB2                            loc_146C6:
00014CB2 D368 000C                  		add.w	d1,$C(a0)
00014CB6 4E75                       		rts	
00014CB8                            ; ===========================================================================
00014CB8                            
00014CB8                            loc_146CC:
00014CB8 4A28 0038                  		tst.b	$38(a0)
00014CBC 66F4                       		bne.s	loc_146C6
00014CBE 08E8 0001 0022             		bset	#1,$22(a0)
00014CC4 08A8 0005 0022             		bclr	#5,$22(a0)
00014CCA 117C 0001 001D             		move.b	#1,$1D(a0)
00014CD0 4E75                       		rts	
00014CD2                            ; ===========================================================================
00014CD2                            
00014CD2                            locret_146E6:
00014CD2 4E75                       		rts	
00014CD4                            ; End of function Sonic_AnglePos
00014CD4                            
00014CD4                            ; ===========================================================================
00014CD4 2428 0008                  		move.l	8(a0),d2
00014CD8 3028 0010                  		move.w	$10(a0),d0
00014CDC 48C0                       		ext.l	d0
00014CDE E180                       		asl.l	#8,d0
00014CE0 9480                       		sub.l	d0,d2
00014CE2 2142 0008                  		move.l	d2,8(a0)
00014CE6 303C 0038                  		move.w	#$38,d0
00014CEA 48C0                       		ext.l	d0
00014CEC E180                       		asl.l	#8,d0
00014CEE 9680                       		sub.l	d0,d3
00014CF0 2143 000C                  		move.l	d3,$C(a0)
00014CF4 4E75                       		rts	
00014CF6                            ; ===========================================================================
00014CF6                            
00014CF6                            locret_1470A:
00014CF6 4E75                       		rts	
00014CF8                            ; ===========================================================================
00014CF8 2628 000C                  		move.l	$C(a0),d3
00014CFC 3028 0012                  		move.w	$12(a0),d0
00014D00 0440 0038                  		subi.w	#$38,d0
00014D04 3140 0012                  		move.w	d0,$12(a0)
00014D08 48C0                       		ext.l	d0
00014D0A E180                       		asl.l	#8,d0
00014D0C 9680                       		sub.l	d0,d3
00014D0E 2143 000C                  		move.l	d3,$C(a0)
00014D12 4E75                       		rts	
00014D14 4E75                       		rts	
00014D16                            ; ===========================================================================
00014D16 2428 0008                  		move.l	8(a0),d2
00014D1A 2628 000C                  		move.l	$C(a0),d3
00014D1E 3028 0010                  		move.w	$10(a0),d0
00014D22 48C0                       		ext.l	d0
00014D24 E180                       		asl.l	#8,d0
00014D26 9480                       		sub.l	d0,d2
00014D28 3028 0012                  		move.w	$12(a0),d0
00014D2C 48C0                       		ext.l	d0
00014D2E E180                       		asl.l	#8,d0
00014D30 9680                       		sub.l	d0,d3
00014D32 2142 0008                  		move.l	d2,8(a0)
00014D36 2143 000C                  		move.l	d3,$C(a0)
00014D3A 4E75                       		rts	
00014D3C                            
00014D3C                            ; ---------------------------------------------------------------------------
00014D3C                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014D3C                            ; ---------------------------------------------------------------------------
00014D3C                            
00014D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D3C                            
00014D3C                            
00014D3C                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014D3C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014D40 B240                       		cmp.w	d0,d1
00014D42 6F00                       		ble.s	loc_1475E
00014D44 1438 F768                  		move.b	($FFFFF768).w,d2
00014D48 3200                       		move.w	d0,d1
00014D4A                            
00014D4A                            loc_1475E:
00014D4A 0802 0000                  		btst	#0,d2
00014D4E 6600                       		bne.s	loc_1476A
00014D50 1142 0026                  		move.b	d2,$26(a0)
00014D54 4E75                       		rts	
00014D56                            ; ===========================================================================
00014D56                            
00014D56                            loc_1476A:
00014D56 1428 0026                  		move.b	$26(a0),d2
00014D5A 0602 0020                  		addi.b	#$20,d2
00014D5E 0202 00C0                  		andi.b	#$C0,d2
00014D62 1142 0026                  		move.b	d2,$26(a0)
00014D66 4E75                       		rts	
00014D68                            ; End of function Sonic_Angle
00014D68                            
00014D68                            ; ---------------------------------------------------------------------------
00014D68                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014D68                            ; ---------------------------------------------------------------------------
00014D68                            
00014D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D68                            
00014D68                            
00014D68                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014D68 3428 000C                  		move.w	$C(a0),d2
00014D6C 3628 0008                  		move.w	8(a0),d3
00014D70 7000                       		moveq	#0,d0
00014D72 1028 0017                  		move.b	$17(a0),d0
00014D76 4880                       		ext.w	d0
00014D78 4440                       		neg.w	d0
00014D7A D440                       		add.w	d0,d2
00014D7C 1028 0016                  		move.b	$16(a0),d0
00014D80 4880                       		ext.w	d0
00014D82 D640                       		add.w	d0,d3
00014D84 49F8 F768                  		lea	($FFFFF768).w,a4
00014D88 367C 0010                  		movea.w	#$10,a3
00014D8C 3C3C 0000                  		move.w	#0,d6
00014D90 7A0D                       		moveq	#$D,d5
00014D92 6100 0000                  		bsr.w	FindWall
00014D96 3F01                       		move.w	d1,-(sp)
00014D98 3428 000C                  		move.w	$C(a0),d2
00014D9C 3628 0008                  		move.w	8(a0),d3
00014DA0 7000                       		moveq	#0,d0
00014DA2 1028 0017                  		move.b	$17(a0),d0
00014DA6 4880                       		ext.w	d0
00014DA8 D440                       		add.w	d0,d2
00014DAA 1028 0016                  		move.b	$16(a0),d0
00014DAE 4880                       		ext.w	d0
00014DB0 D640                       		add.w	d0,d3
00014DB2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014DB6 367C 0010                  		movea.w	#$10,a3
00014DBA 3C3C 0000                  		move.w	#0,d6
00014DBE 7A0D                       		moveq	#$D,d5
00014DC0 6100 0000                  		bsr.w	FindWall
00014DC4 301F                       		move.w	(sp)+,d0
00014DC6 6100 FF74                  		bsr.w	Sonic_Angle
00014DCA 4A41                       		tst.w	d1
00014DCC 6700                       		beq.s	locret_147F0
00014DCE 6A00                       		bpl.s	loc_147F2
00014DD0 0C41 FFF2                  		cmpi.w	#-$E,d1
00014DD4 6D00 FF20                  		blt.w	locret_1470A
00014DD8 D368 0008                  		add.w	d1,8(a0)
00014DDC                            
00014DDC                            locret_147F0:
00014DDC 4E75                       		rts	
00014DDE                            ; ===========================================================================
00014DDE                            
00014DDE                            loc_147F2:
00014DDE 0C41 000E                  		cmpi.w	#$E,d1
00014DE2 6E00                       		bgt.s	loc_147FE
00014DE4                            
00014DE4                            loc_147F8:
00014DE4 D368 0008                  		add.w	d1,8(a0)
00014DE8 4E75                       		rts	
00014DEA                            ; ===========================================================================
00014DEA                            
00014DEA                            loc_147FE:
00014DEA 4A28 0038                  		tst.b	$38(a0)
00014DEE 66F4                       		bne.s	loc_147F8
00014DF0 08E8 0001 0022             		bset	#1,$22(a0)
00014DF6 08A8 0005 0022             		bclr	#5,$22(a0)
00014DFC 117C 0001 001D             		move.b	#1,$1D(a0)
00014E02 4E75                       		rts	
00014E04                            ; End of function Sonic_WalkVertR
00014E04                            
00014E04                            ; ---------------------------------------------------------------------------
00014E04                            ; Subroutine allowing Sonic to walk upside-down
00014E04                            ; ---------------------------------------------------------------------------
00014E04                            
00014E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E04                            
00014E04                            
00014E04                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014E04 3428 000C                  		move.w	$C(a0),d2
00014E08 3628 0008                  		move.w	8(a0),d3
00014E0C 7000                       		moveq	#0,d0
00014E0E 1028 0016                  		move.b	$16(a0),d0
00014E12 4880                       		ext.w	d0
00014E14 9440                       		sub.w	d0,d2
00014E16 0A42 000F                  		eori.w	#$F,d2
00014E1A 1028 0017                  		move.b	$17(a0),d0
00014E1E 4880                       		ext.w	d0
00014E20 D640                       		add.w	d0,d3
00014E22 49F8 F768                  		lea	($FFFFF768).w,a4
00014E26 367C FFF0                  		movea.w	#-$10,a3
00014E2A 3C3C 1000                  		move.w	#$1000,d6
00014E2E 7A0D                       		moveq	#$D,d5
00014E30 6100 0000                  		bsr.w	FindFloor
00014E34 3F01                       		move.w	d1,-(sp)
00014E36 3428 000C                  		move.w	$C(a0),d2
00014E3A 3628 0008                  		move.w	8(a0),d3
00014E3E 7000                       		moveq	#0,d0
00014E40 1028 0016                  		move.b	$16(a0),d0
00014E44 4880                       		ext.w	d0
00014E46 9440                       		sub.w	d0,d2
00014E48 0A42 000F                  		eori.w	#$F,d2
00014E4C 1028 0017                  		move.b	$17(a0),d0
00014E50 4880                       		ext.w	d0
00014E52 9640                       		sub.w	d0,d3
00014E54 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E58 367C FFF0                  		movea.w	#-$10,a3
00014E5C 3C3C 1000                  		move.w	#$1000,d6
00014E60 7A0D                       		moveq	#$D,d5
00014E62 6100 0000                  		bsr.w	FindFloor
00014E66 301F                       		move.w	(sp)+,d0
00014E68 6100 FED2                  		bsr.w	Sonic_Angle
00014E6C 4A41                       		tst.w	d1
00014E6E 6700                       		beq.s	locret_14892
00014E70 6A00                       		bpl.s	loc_14894
00014E72 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E76 6D00 FE5A                  		blt.w	locret_146E6
00014E7A 9368 000C                  		sub.w	d1,$C(a0)
00014E7E                            
00014E7E                            locret_14892:
00014E7E 4E75                       		rts	
00014E80                            ; ===========================================================================
00014E80                            
00014E80                            loc_14894:
00014E80 0C41 000E                  		cmpi.w	#$E,d1
00014E84 6E00                       		bgt.s	loc_148A0
00014E86                            
00014E86                            loc_1489A:
00014E86 9368 000C                  		sub.w	d1,$C(a0)
00014E8A 4E75                       		rts	
00014E8C                            ; ===========================================================================
00014E8C                            
00014E8C                            loc_148A0:
00014E8C 4A28 0038                  		tst.b	$38(a0)
00014E90 66F4                       		bne.s	loc_1489A
00014E92 08E8 0001 0022             		bset	#1,$22(a0)
00014E98 08A8 0005 0022             		bclr	#5,$22(a0)
00014E9E 117C 0001 001D             		move.b	#1,$1D(a0)
00014EA4 4E75                       		rts	
00014EA6                            ; End of function Sonic_WalkCeiling
00014EA6                            
00014EA6                            ; ---------------------------------------------------------------------------
00014EA6                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014EA6                            ; ---------------------------------------------------------------------------
00014EA6                            
00014EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EA6                            
00014EA6                            
00014EA6                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014EA6 3428 000C                  		move.w	$C(a0),d2
00014EAA 3628 0008                  		move.w	8(a0),d3
00014EAE 7000                       		moveq	#0,d0
00014EB0 1028 0017                  		move.b	$17(a0),d0
00014EB4 4880                       		ext.w	d0
00014EB6 9440                       		sub.w	d0,d2
00014EB8 1028 0016                  		move.b	$16(a0),d0
00014EBC 4880                       		ext.w	d0
00014EBE 9640                       		sub.w	d0,d3
00014EC0 0A43 000F                  		eori.w	#$F,d3
00014EC4 49F8 F768                  		lea	($FFFFF768).w,a4
00014EC8 367C FFF0                  		movea.w	#-$10,a3
00014ECC 3C3C 0800                  		move.w	#$800,d6
00014ED0 7A0D                       		moveq	#$D,d5
00014ED2 6100 0000                  		bsr.w	FindWall
00014ED6 3F01                       		move.w	d1,-(sp)
00014ED8 3428 000C                  		move.w	$C(a0),d2
00014EDC 3628 0008                  		move.w	8(a0),d3
00014EE0 7000                       		moveq	#0,d0
00014EE2 1028 0017                  		move.b	$17(a0),d0
00014EE6 4880                       		ext.w	d0
00014EE8 D440                       		add.w	d0,d2
00014EEA 1028 0016                  		move.b	$16(a0),d0
00014EEE 4880                       		ext.w	d0
00014EF0 9640                       		sub.w	d0,d3
00014EF2 0A43 000F                  		eori.w	#$F,d3
00014EF6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EFA 367C FFF0                  		movea.w	#-$10,a3
00014EFE 3C3C 0800                  		move.w	#$800,d6
00014F02 7A0D                       		moveq	#$D,d5
00014F04 6100 0000                  		bsr.w	FindWall
00014F08 301F                       		move.w	(sp)+,d0
00014F0A 6100 FE30                  		bsr.w	Sonic_Angle
00014F0E 4A41                       		tst.w	d1
00014F10 6700                       		beq.s	locret_14934
00014F12 6A00                       		bpl.s	loc_14936
00014F14 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F18 6D00 FDDC                  		blt.w	locret_1470A
00014F1C 9368 0008                  		sub.w	d1,8(a0)
00014F20                            
00014F20                            locret_14934:
00014F20 4E75                       		rts	
00014F22                            ; ===========================================================================
00014F22                            
00014F22                            loc_14936:
00014F22 0C41 000E                  		cmpi.w	#$E,d1
00014F26 6E00                       		bgt.s	loc_14942
00014F28                            
00014F28                            loc_1493C:
00014F28 9368 0008                  		sub.w	d1,8(a0)
00014F2C 4E75                       		rts	
00014F2E                            ; ===========================================================================
00014F2E                            
00014F2E                            loc_14942:
00014F2E 4A28 0038                  		tst.b	$38(a0)
00014F32 66F4                       		bne.s	loc_1493C
00014F34 08E8 0001 0022             		bset	#1,$22(a0)
00014F3A 08A8 0005 0022             		bclr	#5,$22(a0)
00014F40 117C 0001 001D             		move.b	#1,$1D(a0)
00014F46 4E75                       		rts	
00014F48                            ; End of function Sonic_WalkVertL
00014F48                            
00014F48                            ; ---------------------------------------------------------------------------
00014F48                            ; Subroutine to	find which tile	the object is standing on
00014F48                            ; ---------------------------------------------------------------------------
00014F48                            
00014F48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F48                            
00014F48                            
00014F48                            Floor_ChkTile:				; XREF: FindFloor; et al
00014F48 3002                       		move.w	d2,d0
00014F4A E248                       		lsr.w	#1,d0
00014F4C 0240 0380                  		andi.w	#$380,d0
00014F50 3203                       		move.w	d3,d1
00014F52 E049                       		lsr.w	#8,d1
00014F54 0241 007F                  		andi.w	#$7F,d1
00014F58 D041                       		add.w	d1,d0
00014F5A 72FF                       		moveq	#-1,d1
00014F5C 43F8 A400                  		lea	($FFFFA400).w,a1
00014F60 1231 0000                  		move.b	(a1,d0.w),d1
00014F64 6700                       		beq.s	loc_14996
00014F66 6B00                       		bmi.s	loc_1499A
00014F68 5301                       		subq.b	#1,d1
00014F6A 4881                       		ext.w	d1
00014F6C EE59                       		ror.w	#7,d1
00014F6E 3002                       		move.w	d2,d0
00014F70 D040                       		add.w	d0,d0
00014F72 0240 01E0                  		andi.w	#$1E0,d0
00014F76 D240                       		add.w	d0,d1
00014F78 3003                       		move.w	d3,d0
00014F7A E648                       		lsr.w	#3,d0
00014F7C 0240 001E                  		andi.w	#$1E,d0
00014F80 D240                       		add.w	d0,d1
00014F82                            
00014F82                            loc_14996:
00014F82 2241                       		movea.l	d1,a1
00014F84 4E75                       		rts	
00014F86                            ; ===========================================================================
00014F86                            
00014F86                            loc_1499A:
00014F86 0241 007F                  		andi.w	#$7F,d1
00014F8A 0828 0006 0001             		btst	#6,1(a0)
00014F90 6700                       		beq.s	loc_149B2
00014F92 5241                       		addq.w	#1,d1
00014F94 0C41 0029                  		cmpi.w	#$29,d1
00014F98 6600                       		bne.s	loc_149B2
00014F9A 323C 0051                  		move.w	#$51,d1
00014F9E                            
00014F9E                            loc_149B2:
00014F9E 5301                       		subq.b	#1,d1
00014FA0 EE59                       		ror.w	#7,d1
00014FA2 3002                       		move.w	d2,d0
00014FA4 D040                       		add.w	d0,d0
00014FA6 0240 01E0                  		andi.w	#$1E0,d0
00014FAA D240                       		add.w	d0,d1
00014FAC 3003                       		move.w	d3,d0
00014FAE E648                       		lsr.w	#3,d0
00014FB0 0240 001E                  		andi.w	#$1E,d0
00014FB4 D240                       		add.w	d0,d1
00014FB6 2241                       		movea.l	d1,a1
00014FB8 4E75                       		rts	
00014FBA                            ; End of function Floor_ChkTile
00014FBA                            
00014FBA                            
00014FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FBA                            
00014FBA                            
00014FBA                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014FBA 618C                       		bsr.s	Floor_ChkTile
00014FBC 3011                       		move.w	(a1),d0
00014FBE 3800                       		move.w	d0,d4
00014FC0 0240 07FF                  		andi.w	#$7FF,d0
00014FC4 6700                       		beq.s	loc_149DE
00014FC6 0B04                       		btst	d5,d4
00014FC8 6600                       		bne.s	loc_149EC
00014FCA                            
00014FCA                            loc_149DE:
00014FCA D44B                       		add.w	a3,d2
00014FCC 6100 0000                  		bsr.w	FindFloor2
00014FD0 944B                       		sub.w	a3,d2
00014FD2 0641 0010                  		addi.w	#$10,d1
00014FD6 4E75                       		rts	
00014FD8                            ; ===========================================================================
00014FD8                            
00014FD8                            loc_149EC:
00014FD8 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014FDC 1032 0000                  		move.b	(a2,d0.w),d0
00014FE0 0240 00FF                  		andi.w	#$FF,d0
00014FE4 67E4                       		beq.s	loc_149DE
00014FE6 45F9 0000 0000             		lea	(AngleMap).l,a2
00014FEC 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014FF0 E948                       		lsl.w	#4,d0
00014FF2 3203                       		move.w	d3,d1
00014FF4 0804 000B                  		btst	#$B,d4
00014FF8 6700                       		beq.s	loc_14A12
00014FFA 4641                       		not.w	d1
00014FFC 4414                       		neg.b	(a4)
00014FFE                            
00014FFE                            loc_14A12:
00014FFE 0804 000C                  		btst	#$C,d4
00015002 6700                       		beq.s	loc_14A22
00015004 0614 0040                  		addi.b	#$40,(a4)
00015008 4414                       		neg.b	(a4)
0001500A 0414 0040                  		subi.b	#$40,(a4)
0001500E                            
0001500E                            loc_14A22:
0001500E 0241 000F                  		andi.w	#$F,d1
00015012 D240                       		add.w	d0,d1
00015014 45F9 0000 0000             		lea	(CollArray1).l,a2
0001501A 1032 1000                  		move.b	(a2,d1.w),d0
0001501E 4880                       		ext.w	d0
00015020 BD44                       		eor.w	d6,d4
00015022 0804 000C                  		btst	#$C,d4
00015026 6700                       		beq.s	loc_14A3E
00015028 4440                       		neg.w	d0
0001502A                            
0001502A                            loc_14A3E:
0001502A 4A40                       		tst.w	d0
0001502C 679C                       		beq.s	loc_149DE
0001502E 6B00                       		bmi.s	loc_14A5A
00015030 0C00 0010                  		cmpi.b	#$10,d0
00015034 6700                       		beq.s	loc_14A66
00015036 3202                       		move.w	d2,d1
00015038 0241 000F                  		andi.w	#$F,d1
0001503C D041                       		add.w	d1,d0
0001503E 323C 000F                  		move.w	#$F,d1
00015042 9240                       		sub.w	d0,d1
00015044 4E75                       		rts	
00015046                            ; ===========================================================================
00015046                            
00015046                            loc_14A5A:
00015046 3202                       		move.w	d2,d1
00015048 0241 000F                  		andi.w	#$F,d1
0001504C D041                       		add.w	d1,d0
0001504E 6A00 FF7A                  		bpl.w	loc_149DE
00015052                            
00015052                            loc_14A66:
00015052 944B                       		sub.w	a3,d2
00015054 6100 0000                  		bsr.w	FindFloor2
00015058 D44B                       		add.w	a3,d2
0001505A 0441 0010                  		subi.w	#$10,d1
0001505E 4E75                       		rts	
00015060                            ; End of function FindFloor
00015060                            
00015060                            
00015060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015060                            
00015060                            
00015060                            FindFloor2:				; XREF: FindFloor
00015060 6100 FEE6                  		bsr.w	Floor_ChkTile
00015064 3011                       		move.w	(a1),d0
00015066 3800                       		move.w	d0,d4
00015068 0240 07FF                  		andi.w	#$7FF,d0
0001506C 6700                       		beq.s	loc_14A86
0001506E 0B04                       		btst	d5,d4
00015070 6600                       		bne.s	loc_14A94
00015072                            
00015072                            loc_14A86:
00015072 323C 000F                  		move.w	#$F,d1
00015076 3002                       		move.w	d2,d0
00015078 0240 000F                  		andi.w	#$F,d0
0001507C 9240                       		sub.w	d0,d1
0001507E 4E75                       		rts	
00015080                            ; ===========================================================================
00015080                            
00015080                            loc_14A94:
00015080 2478 F796                  		movea.l	($FFFFF796).w,a2
00015084 1032 0000                  		move.b	(a2,d0.w),d0
00015088 0240 00FF                  		andi.w	#$FF,d0
0001508C 67E4                       		beq.s	loc_14A86
0001508E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015094 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015098 E948                       		lsl.w	#4,d0
0001509A 3203                       		move.w	d3,d1
0001509C 0804 000B                  		btst	#$B,d4
000150A0 6700                       		beq.s	loc_14ABA
000150A2 4641                       		not.w	d1
000150A4 4414                       		neg.b	(a4)
000150A6                            
000150A6                            loc_14ABA:
000150A6 0804 000C                  		btst	#$C,d4
000150AA 6700                       		beq.s	loc_14ACA
000150AC 0614 0040                  		addi.b	#$40,(a4)
000150B0 4414                       		neg.b	(a4)
000150B2 0414 0040                  		subi.b	#$40,(a4)
000150B6                            
000150B6                            loc_14ACA:
000150B6 0241 000F                  		andi.w	#$F,d1
000150BA D240                       		add.w	d0,d1
000150BC 45F9 0000 0000             		lea	(CollArray1).l,a2
000150C2 1032 1000                  		move.b	(a2,d1.w),d0
000150C6 4880                       		ext.w	d0
000150C8 BD44                       		eor.w	d6,d4
000150CA 0804 000C                  		btst	#$C,d4
000150CE 6700                       		beq.s	loc_14AE6
000150D0 4440                       		neg.w	d0
000150D2                            
000150D2                            loc_14AE6:
000150D2 4A40                       		tst.w	d0
000150D4 679C                       		beq.s	loc_14A86
000150D6 6B00                       		bmi.s	loc_14AFC
000150D8 3202                       		move.w	d2,d1
000150DA 0241 000F                  		andi.w	#$F,d1
000150DE D041                       		add.w	d1,d0
000150E0 323C 000F                  		move.w	#$F,d1
000150E4 9240                       		sub.w	d0,d1
000150E6 4E75                       		rts	
000150E8                            ; ===========================================================================
000150E8                            
000150E8                            loc_14AFC:
000150E8 3202                       		move.w	d2,d1
000150EA 0241 000F                  		andi.w	#$F,d1
000150EE D041                       		add.w	d1,d0
000150F0 6A00 FF80                  		bpl.w	loc_14A86
000150F4 4641                       		not.w	d1
000150F6 4E75                       		rts	
000150F8                            ; End of function FindFloor2
000150F8                            
000150F8                            
000150F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150F8                            
000150F8                            
000150F8                            FindWall:				; XREF: Sonic_WalkVertR; et al
000150F8 6100 FE4E                  		bsr.w	Floor_ChkTile
000150FC 3011                       		move.w	(a1),d0
000150FE 3800                       		move.w	d0,d4
00015100 0240 07FF                  		andi.w	#$7FF,d0
00015104 6700                       		beq.s	loc_14B1E
00015106 0B04                       		btst	d5,d4
00015108 6600                       		bne.s	loc_14B2C
0001510A                            
0001510A                            loc_14B1E:
0001510A D64B                       		add.w	a3,d3
0001510C 6100 0000                  		bsr.w	FindWall2
00015110 964B                       		sub.w	a3,d3
00015112 0641 0010                  		addi.w	#$10,d1
00015116 4E75                       		rts	
00015118                            ; ===========================================================================
00015118                            
00015118                            loc_14B2C:
00015118 2478 F796                  		movea.l	($FFFFF796).w,a2
0001511C 1032 0000                  		move.b	(a2,d0.w),d0
00015120 0240 00FF                  		andi.w	#$FF,d0
00015124 67E4                       		beq.s	loc_14B1E
00015126 45F9 0000 0000             		lea	(AngleMap).l,a2
0001512C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015130 E948                       		lsl.w	#4,d0
00015132 3202                       		move.w	d2,d1
00015134 0804 000C                  		btst	#$C,d4
00015138 6700                       		beq.s	loc_14B5A
0001513A 4641                       		not.w	d1
0001513C 0614 0040                  		addi.b	#$40,(a4)
00015140 4414                       		neg.b	(a4)
00015142 0414 0040                  		subi.b	#$40,(a4)
00015146                            
00015146                            loc_14B5A:
00015146 0804 000B                  		btst	#$B,d4
0001514A 6700                       		beq.s	loc_14B62
0001514C 4414                       		neg.b	(a4)
0001514E                            
0001514E                            loc_14B62:
0001514E 0241 000F                  		andi.w	#$F,d1
00015152 D240                       		add.w	d0,d1
00015154 45F9 0000 0000             		lea	(CollArray2).l,a2
0001515A 1032 1000                  		move.b	(a2,d1.w),d0
0001515E 4880                       		ext.w	d0
00015160 BD44                       		eor.w	d6,d4
00015162 0804 000B                  		btst	#$B,d4
00015166 6700                       		beq.s	loc_14B7E
00015168 4440                       		neg.w	d0
0001516A                            
0001516A                            loc_14B7E:
0001516A 4A40                       		tst.w	d0
0001516C 679C                       		beq.s	loc_14B1E
0001516E 6B00                       		bmi.s	loc_14B9A
00015170 0C00 0010                  		cmpi.b	#$10,d0
00015174 6700                       		beq.s	loc_14BA6
00015176 3203                       		move.w	d3,d1
00015178 0241 000F                  		andi.w	#$F,d1
0001517C D041                       		add.w	d1,d0
0001517E 323C 000F                  		move.w	#$F,d1
00015182 9240                       		sub.w	d0,d1
00015184 4E75                       		rts	
00015186                            ; ===========================================================================
00015186                            
00015186                            loc_14B9A:
00015186 3203                       		move.w	d3,d1
00015188 0241 000F                  		andi.w	#$F,d1
0001518C D041                       		add.w	d1,d0
0001518E 6A00 FF7A                  		bpl.w	loc_14B1E
00015192                            
00015192                            loc_14BA6:
00015192 964B                       		sub.w	a3,d3
00015194 6100 0000                  		bsr.w	FindWall2
00015198 D64B                       		add.w	a3,d3
0001519A 0441 0010                  		subi.w	#$10,d1
0001519E 4E75                       		rts	
000151A0                            ; End of function FindWall
000151A0                            
000151A0                            
000151A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151A0                            
000151A0                            
000151A0                            FindWall2:				; XREF: FindWall
000151A0 6100 FDA6                  		bsr.w	Floor_ChkTile
000151A4 3011                       		move.w	(a1),d0
000151A6 3800                       		move.w	d0,d4
000151A8 0240 07FF                  		andi.w	#$7FF,d0
000151AC 6700                       		beq.s	loc_14BC6
000151AE 0B04                       		btst	d5,d4
000151B0 6600                       		bne.s	loc_14BD4
000151B2                            
000151B2                            loc_14BC6:
000151B2 323C 000F                  		move.w	#$F,d1
000151B6 3003                       		move.w	d3,d0
000151B8 0240 000F                  		andi.w	#$F,d0
000151BC 9240                       		sub.w	d0,d1
000151BE 4E75                       		rts	
000151C0                            ; ===========================================================================
000151C0                            
000151C0                            loc_14BD4:
000151C0 2478 F796                  		movea.l	($FFFFF796).w,a2
000151C4 1032 0000                  		move.b	(a2,d0.w),d0
000151C8 0240 00FF                  		andi.w	#$FF,d0
000151CC 67E4                       		beq.s	loc_14BC6
000151CE 45F9 0000 0000             		lea	(AngleMap).l,a2
000151D4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000151D8 E948                       		lsl.w	#4,d0
000151DA 3202                       		move.w	d2,d1
000151DC 0804 000C                  		btst	#$C,d4
000151E0 6700                       		beq.s	loc_14C02
000151E2 4641                       		not.w	d1
000151E4 0614 0040                  		addi.b	#$40,(a4)
000151E8 4414                       		neg.b	(a4)
000151EA 0414 0040                  		subi.b	#$40,(a4)
000151EE                            
000151EE                            loc_14C02:
000151EE 0804 000B                  		btst	#$B,d4
000151F2 6700                       		beq.s	loc_14C0A
000151F4 4414                       		neg.b	(a4)
000151F6                            
000151F6                            loc_14C0A:
000151F6 0241 000F                  		andi.w	#$F,d1
000151FA D240                       		add.w	d0,d1
000151FC 45F9 0000 0000             		lea	(CollArray2).l,a2
00015202 1032 1000                  		move.b	(a2,d1.w),d0
00015206 4880                       		ext.w	d0
00015208 BD44                       		eor.w	d6,d4
0001520A 0804 000B                  		btst	#$B,d4
0001520E 6700                       		beq.s	loc_14C26
00015210 4440                       		neg.w	d0
00015212                            
00015212                            loc_14C26:
00015212 4A40                       		tst.w	d0
00015214 679C                       		beq.s	loc_14BC6
00015216 6B00                       		bmi.s	loc_14C3C
00015218 3203                       		move.w	d3,d1
0001521A 0241 000F                  		andi.w	#$F,d1
0001521E D041                       		add.w	d1,d0
00015220 323C 000F                  		move.w	#$F,d1
00015224 9240                       		sub.w	d0,d1
00015226 4E75                       		rts	
00015228                            ; ===========================================================================
00015228                            
00015228                            loc_14C3C:
00015228 3203                       		move.w	d3,d1
0001522A 0241 000F                  		andi.w	#$F,d1
0001522E D041                       		add.w	d1,d0
00015230 6A00 FF80                  		bpl.w	loc_14BC6
00015234 4641                       		not.w	d1
00015236 4E75                       		rts	
00015238                            ; End of function FindWall2
00015238                            
00015238                            ; ---------------------------------------------------------------------------
00015238                            ; Unused floor/wall subroutine - logs something	to do with collision
00015238                            ; ---------------------------------------------------------------------------
00015238                            
00015238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015238                            
00015238                            
00015238                            FloorLog_Unk:				; XREF: Level
00015238 4E75                       		rts	
0001523A                            
0001523A 43F9 0000 0000             		lea	(CollArray1).l,a1
00015240 45F9 0000 0000             		lea	(CollArray1).l,a2
00015246 363C 00FF                  		move.w	#$FF,d3
0001524A                            
0001524A                            loc_14C5E:
0001524A 7A10                       		moveq	#$10,d5
0001524C 343C 000F                  		move.w	#$F,d2
00015250                            
00015250                            loc_14C64:
00015250 7800                       		moveq	#0,d4
00015252 323C 000F                  		move.w	#$F,d1
00015256                            
00015256                            loc_14C6A:
00015256 3019                       		move.w	(a1)+,d0
00015258 EAA8                       		lsr.l	d5,d0
0001525A D944                       		addx.w	d4,d4
0001525C 51C9 FFF8                  		dbf	d1,loc_14C6A
00015260                            
00015260 34C4                       		move.w	d4,(a2)+
00015262 92FC 0020                  		suba.w	#$20,a1
00015266 5345                       		subq.w	#1,d5
00015268 51CA FFE6                  		dbf	d2,loc_14C64
0001526C                            
0001526C D2FC 0020                  		adda.w	#$20,a1
00015270 51CB FFD8                  		dbf	d3,loc_14C5E
00015274                            
00015274 43F9 0000 0000             		lea	(CollArray1).l,a1
0001527A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015280 6100                       		bsr.s	FloorLog_Unk2
00015282 43F9 0000 0000             		lea	(CollArray1).l,a1
00015288 45F9 0000 0000             		lea	(CollArray1).l,a2
0001528E                            
0001528E                            ; End of function FloorLog_Unk
0001528E                            
0001528E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001528E                            
0001528E                            
0001528E                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001528E 363C 0FFF                  		move.w	#$FFF,d3
00015292                            
00015292                            loc_14CA6:
00015292 7400                       		moveq	#0,d2
00015294 323C 000F                  		move.w	#$F,d1
00015298 3019                       		move.w	(a1)+,d0
0001529A 6700                       		beq.s	loc_14CD4
0001529C 6B00                       		bmi.s	loc_14CBE
0001529E                            
0001529E                            loc_14CB2:
0001529E E248                       		lsr.w	#1,d0
000152A0 6400                       		bcc.s	loc_14CB8
000152A2 5202                       		addq.b	#1,d2
000152A4                            
000152A4                            loc_14CB8:
000152A4 51C9 FFF8                  		dbf	d1,loc_14CB2
000152A8                            
000152A8 6000                       		bra.s	loc_14CD6
000152AA                            ; ===========================================================================
000152AA                            
000152AA                            loc_14CBE:
000152AA 0C40 FFFF                  		cmpi.w	#-1,d0
000152AE 6700                       		beq.s	loc_14CD0
000152B0                            
000152B0                            loc_14CC4:
000152B0 E348                       		lsl.w	#1,d0
000152B2 6400                       		bcc.s	loc_14CCA
000152B4 5302                       		subq.b	#1,d2
000152B6                            
000152B6                            loc_14CCA:
000152B6 51C9 FFF8                  		dbf	d1,loc_14CC4
000152BA                            
000152BA 6000                       		bra.s	loc_14CD6
000152BC                            ; ===========================================================================
000152BC                            
000152BC                            loc_14CD0:
000152BC 303C 0010                  		move.w	#$10,d0
000152C0                            
000152C0                            loc_14CD4:
000152C0 3400                       		move.w	d0,d2
000152C2                            
000152C2                            loc_14CD6:
000152C2 14C2                       		move.b	d2,(a2)+
000152C4 51CB FFCC                  		dbf	d3,loc_14CA6
000152C8                            
000152C8 4E75                       		rts	
000152CA                            
000152CA                            ; End of function FloorLog_Unk2
000152CA                            
000152CA                            
000152CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152CA                            
000152CA                            
000152CA                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000152CA 2628 0008                  		move.l	8(a0),d3
000152CE 2428 000C                  		move.l	$C(a0),d2
000152D2 3228 0010                  		move.w	$10(a0),d1
000152D6 48C1                       		ext.l	d1
000152D8 E181                       		asl.l	#8,d1
000152DA D681                       		add.l	d1,d3
000152DC 3228 0012                  		move.w	$12(a0),d1
000152E0 48C1                       		ext.l	d1
000152E2 E181                       		asl.l	#8,d1
000152E4 D481                       		add.l	d1,d2
000152E6 4842                       		swap	d2
000152E8 4843                       		swap	d3
000152EA 11C0 F768                  		move.b	d0,($FFFFF768).w
000152EE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000152F2 1200                       		move.b	d0,d1
000152F4 0600 0020                  		addi.b	#$20,d0
000152F8 6A00                       		bpl.s	loc_14D1A
000152FA 1001                       		move.b	d1,d0
000152FC 6A00                       		bpl.s	loc_14D14
000152FE 5300                       		subq.b	#1,d0
00015300                            
00015300                            loc_14D14:
00015300 0600 0020                  		addi.b	#$20,d0
00015304 6000                       		bra.s	loc_14D24
00015306                            ; ===========================================================================
00015306                            
00015306                            loc_14D1A:
00015306 1001                       		move.b	d1,d0
00015308 6A00                       		bpl.s	loc_14D20
0001530A 5200                       		addq.b	#1,d0
0001530C                            
0001530C                            loc_14D20:
0001530C 0600 001F                  		addi.b	#$1F,d0
00015310                            
00015310                            loc_14D24:
00015310 0200 00C0                  		andi.b	#$C0,d0
00015314 6700 0000                  		beq.w	loc_14DF0
00015318 0C00 0080                  		cmpi.b	#$80,d0
0001531C 6700 0000                  		beq.w	loc_14F7C
00015320 0201 0038                  		andi.b	#$38,d1
00015324 6600                       		bne.s	loc_14D3C
00015326 5042                       		addq.w	#8,d2
00015328                            
00015328                            loc_14D3C:
00015328 0C00 0040                  		cmpi.b	#$40,d0
0001532C 6700 0000                  		beq.w	loc_1504A
00015330 6000 0000                  		bra.w	loc_14EBC
00015334                            
00015334                            ; End of function Sonic_WalkSpeed
00015334                            
00015334                            
00015334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015334                            
00015334                            
00015334                            sub_14D48:				; XREF: Sonic_Jump
00015334 11C0 F768                  		move.b	d0,($FFFFF768).w
00015338 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001533C 0600 0020                  		addi.b	#$20,d0
00015340 0200 00C0                  		andi.b	#$C0,d0
00015344 0C00 0040                  		cmpi.b	#$40,d0
00015348 6700 0000                  		beq.w	loc_14FD6
0001534C 0C00 0080                  		cmpi.b	#$80,d0
00015350 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015354 0C00 00C0                  		cmpi.b	#$C0,d0
00015358 6700 0000                  		beq.w	sub_14E50
0001535C                            
0001535C                            ; End of function sub_14D48
0001535C                            
0001535C                            ; ---------------------------------------------------------------------------
0001535C                            ; Subroutine to	make Sonic land	on the floor after jumping
0001535C                            ; ---------------------------------------------------------------------------
0001535C                            
0001535C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001535C                            
0001535C                            
0001535C                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001535C 3428 000C                  		move.w	$C(a0),d2
00015360 3628 0008                  		move.w	8(a0),d3
00015364 7000                       		moveq	#0,d0
00015366 1028 0016                  		move.b	$16(a0),d0
0001536A 4880                       		ext.w	d0
0001536C D440                       		add.w	d0,d2
0001536E 1028 0017                  		move.b	$17(a0),d0
00015372 4880                       		ext.w	d0
00015374 D640                       		add.w	d0,d3
00015376 49F8 F768                  		lea	($FFFFF768).w,a4
0001537A 367C 0010                  		movea.w	#$10,a3
0001537E 3C3C 0000                  		move.w	#0,d6
00015382 7A0D                       		moveq	#$D,d5
00015384 6100 FC34                  		bsr.w	FindFloor
00015388 3F01                       		move.w	d1,-(sp)
0001538A 3428 000C                  		move.w	$C(a0),d2
0001538E 3628 0008                  		move.w	8(a0),d3
00015392 7000                       		moveq	#0,d0
00015394 1028 0016                  		move.b	$16(a0),d0
00015398 4880                       		ext.w	d0
0001539A D440                       		add.w	d0,d2
0001539C 1028 0017                  		move.b	$17(a0),d0
000153A0 4880                       		ext.w	d0
000153A2 9640                       		sub.w	d0,d3
000153A4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153A8 367C 0010                  		movea.w	#$10,a3
000153AC 3C3C 0000                  		move.w	#0,d6
000153B0 7A0D                       		moveq	#$D,d5
000153B2 6100 FC06                  		bsr.w	FindFloor
000153B6 301F                       		move.w	(sp)+,d0
000153B8 143C 0000                  		move.b	#0,d2
000153BC                            
000153BC                            loc_14DD0:
000153BC 1638 F76A                  		move.b	($FFFFF76A).w,d3
000153C0 B240                       		cmp.w	d0,d1
000153C2 6F00                       		ble.s	loc_14DDE
000153C4 1638 F768                  		move.b	($FFFFF768).w,d3
000153C8 C141                       		exg	d0,d1
000153CA                            
000153CA                            loc_14DDE:
000153CA 0803 0000                  		btst	#0,d3
000153CE 6700                       		beq.s	locret_14DE6
000153D0 1602                       		move.b	d2,d3
000153D2                            
000153D2                            locret_14DE6:
000153D2 4E75                       		rts	
000153D4                            
000153D4                            ; End of function Sonic_HitFloor
000153D4                            
000153D4                            ; ===========================================================================
000153D4 3428 000C                  		move.w	$C(a0),d2
000153D8 3628 0008                  		move.w	8(a0),d3
000153DC                            
000153DC                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000153DC 0642 000A                  		addi.w	#$A,d2
000153E0 49F8 F768                  		lea	($FFFFF768).w,a4
000153E4 367C 0010                  		movea.w	#$10,a3
000153E8 3C3C 0000                  		move.w	#0,d6
000153EC 7A0E                       		moveq	#$E,d5
000153EE 6100 FBCA                  		bsr.w	FindFloor
000153F2 143C 0000                  		move.b	#0,d2
000153F6                            
000153F6                            loc_14E0A:				; XREF: sub_14EB4
000153F6 1638 F768                  		move.b	($FFFFF768).w,d3
000153FA 0803 0000                  		btst	#0,d3
000153FE 6700                       		beq.s	locret_14E16
00015400 1602                       		move.b	d2,d3
00015402                            
00015402                            locret_14E16:
00015402 4E75                       		rts	
00015404                            
00015404                            ; ---------------------------------------------------------------------------
00015404                            ; Subroutine allowing objects to interact with the floor
00015404                            ; ---------------------------------------------------------------------------
00015404                            
00015404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015404                            
00015404                            
00015404                            ObjHitFloor:
00015404 3628 0008                  		move.w	8(a0),d3
00015408                            
00015408                            ; End of function ObjHitFloor
00015408                            
00015408                            
00015408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015408                            
00015408                            
00015408                            ObjHitFloor2:
00015408 3428 000C                  		move.w	$C(a0),d2
0001540C 7000                       		moveq	#0,d0
0001540E 1028 0016                  		move.b	$16(a0),d0
00015412 4880                       		ext.w	d0
00015414 D440                       		add.w	d0,d2
00015416 49F8 F768                  		lea	($FFFFF768).w,a4
0001541A 18BC 0000                  		move.b	#0,(a4)
0001541E 367C 0010                  		movea.w	#$10,a3
00015422 3C3C 0000                  		move.w	#0,d6
00015426 7A0D                       		moveq	#$D,d5
00015428 6100 FB90                  		bsr.w	FindFloor
0001542C 1638 F768                  		move.b	($FFFFF768).w,d3
00015430 0803 0000                  		btst	#0,d3
00015434 6700                       		beq.s	locret_14E4E
00015436 163C 0000                  		move.b	#0,d3
0001543A                            
0001543A                            locret_14E4E:
0001543A 4E75                       		rts	
0001543C                            ; End of function ObjHitFloor2
0001543C                            
0001543C                            
0001543C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001543C                            
0001543C                            
0001543C                            sub_14E50:				; XREF: sub_14D48
0001543C 3428 000C                  		move.w	$C(a0),d2
00015440 3628 0008                  		move.w	8(a0),d3
00015444 7000                       		moveq	#0,d0
00015446 1028 0017                  		move.b	$17(a0),d0
0001544A 4880                       		ext.w	d0
0001544C 9440                       		sub.w	d0,d2
0001544E 1028 0016                  		move.b	$16(a0),d0
00015452 4880                       		ext.w	d0
00015454 D640                       		add.w	d0,d3
00015456 49F8 F768                  		lea	($FFFFF768).w,a4
0001545A 367C 0010                  		movea.w	#$10,a3
0001545E 3C3C 0000                  		move.w	#0,d6
00015462 7A0E                       		moveq	#$E,d5
00015464 6100 FC92                  		bsr.w	FindWall
00015468 3F01                       		move.w	d1,-(sp)
0001546A 3428 000C                  		move.w	$C(a0),d2
0001546E 3628 0008                  		move.w	8(a0),d3
00015472 7000                       		moveq	#0,d0
00015474 1028 0017                  		move.b	$17(a0),d0
00015478 4880                       		ext.w	d0
0001547A D440                       		add.w	d0,d2
0001547C 1028 0016                  		move.b	$16(a0),d0
00015480 4880                       		ext.w	d0
00015482 D640                       		add.w	d0,d3
00015484 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015488 367C 0010                  		movea.w	#$10,a3
0001548C 3C3C 0000                  		move.w	#0,d6
00015490 7A0E                       		moveq	#$E,d5
00015492 6100 FC64                  		bsr.w	FindWall
00015496 301F                       		move.w	(sp)+,d0
00015498 143C 00C0                  		move.b	#-$40,d2
0001549C 6000 FF1E                  		bra.w	loc_14DD0
000154A0                            
000154A0                            ; End of function sub_14E50
000154A0                            
000154A0                            
000154A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154A0                            
000154A0                            
000154A0                            sub_14EB4:				; XREF: Sonic_Floor
000154A0 3428 000C                  		move.w	$C(a0),d2
000154A4 3628 0008                  		move.w	8(a0),d3
000154A8                            
000154A8                            loc_14EBC:
000154A8 0643 000A                  		addi.w	#$A,d3
000154AC 49F8 F768                  		lea	($FFFFF768).w,a4
000154B0 367C 0010                  		movea.w	#$10,a3
000154B4 3C3C 0000                  		move.w	#0,d6
000154B8 7A0E                       		moveq	#$E,d5
000154BA 6100 FC3C                  		bsr.w	FindWall
000154BE 143C 00C0                  		move.b	#-$40,d2
000154C2 6000 FF32                  		bra.w	loc_14E0A
000154C6                            
000154C6                            ; End of function sub_14EB4
000154C6                            
000154C6                            ; ---------------------------------------------------------------------------
000154C6                            ; Subroutine to	detect when an object hits a wall to its right
000154C6                            ; ---------------------------------------------------------------------------
000154C6                            
000154C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154C6                            
000154C6                            
000154C6                            ObjHitWallRight:
000154C6 D668 0008                  		add.w	8(a0),d3
000154CA 3428 000C                  		move.w	$C(a0),d2
000154CE 49F8 F768                  		lea	($FFFFF768).w,a4
000154D2 18BC 0000                  		move.b	#0,(a4)
000154D6 367C 0010                  		movea.w	#$10,a3
000154DA 3C3C 0000                  		move.w	#0,d6
000154DE 7A0E                       		moveq	#$E,d5
000154E0 6100 FC16                  		bsr.w	FindWall
000154E4 1638 F768                  		move.b	($FFFFF768).w,d3
000154E8 0803 0000                  		btst	#0,d3
000154EC 6700                       		beq.s	locret_14F06
000154EE 163C 00C0                  		move.b	#-$40,d3
000154F2                            
000154F2                            locret_14F06:
000154F2 4E75                       		rts	
000154F4                            
000154F4                            ; End of function ObjHitWallRight
000154F4                            
000154F4                            ; ---------------------------------------------------------------------------
000154F4                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000154F4                            ; touches them
000154F4                            ; ---------------------------------------------------------------------------
000154F4                            
000154F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F4                            
000154F4                            
000154F4                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000154F4 3428 000C                  		move.w	$C(a0),d2
000154F8 3628 0008                  		move.w	8(a0),d3
000154FC 7000                       		moveq	#0,d0
000154FE 1028 0016                  		move.b	$16(a0),d0
00015502 4880                       		ext.w	d0
00015504 9440                       		sub.w	d0,d2
00015506 0A42 000F                  		eori.w	#$F,d2
0001550A 1028 0017                  		move.b	$17(a0),d0
0001550E 4880                       		ext.w	d0
00015510 D640                       		add.w	d0,d3
00015512 49F8 F768                  		lea	($FFFFF768).w,a4
00015516 367C FFF0                  		movea.w	#-$10,a3
0001551A 3C3C 1000                  		move.w	#$1000,d6
0001551E 7A0E                       		moveq	#$E,d5
00015520 6100 FA98                  		bsr.w	FindFloor
00015524 3F01                       		move.w	d1,-(sp)
00015526 3428 000C                  		move.w	$C(a0),d2
0001552A 3628 0008                  		move.w	8(a0),d3
0001552E 7000                       		moveq	#0,d0
00015530 1028 0016                  		move.b	$16(a0),d0
00015534 4880                       		ext.w	d0
00015536 9440                       		sub.w	d0,d2
00015538 0A42 000F                  		eori.w	#$F,d2
0001553C 1028 0017                  		move.b	$17(a0),d0
00015540 4880                       		ext.w	d0
00015542 9640                       		sub.w	d0,d3
00015544 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015548 367C FFF0                  		movea.w	#-$10,a3
0001554C 3C3C 1000                  		move.w	#$1000,d6
00015550 7A0E                       		moveq	#$E,d5
00015552 6100 FA66                  		bsr.w	FindFloor
00015556 301F                       		move.w	(sp)+,d0
00015558 143C 0080                  		move.b	#-$80,d2
0001555C 6000 FE5E                  		bra.w	loc_14DD0
00015560                            ; End of function Sonic_DontRunOnWalls
00015560                            
00015560                            ; ===========================================================================
00015560 3428 000C                  		move.w	$C(a0),d2
00015564 3628 0008                  		move.w	8(a0),d3
00015568                            
00015568                            loc_14F7C:
00015568 0442 000A                  		subi.w	#$A,d2
0001556C 0A42 000F                  		eori.w	#$F,d2
00015570 49F8 F768                  		lea	($FFFFF768).w,a4
00015574 367C FFF0                  		movea.w	#-$10,a3
00015578 3C3C 1000                  		move.w	#$1000,d6
0001557C 7A0E                       		moveq	#$E,d5
0001557E 6100 FA3A                  		bsr.w	FindFloor
00015582 143C 0080                  		move.b	#-$80,d2
00015586 6000 FE6E                  		bra.w	loc_14E0A
0001558A                            
0001558A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001558A                            
0001558A                            
0001558A                            ObjHitCeiling:
0001558A 3428 000C                  		move.w	$C(a0),d2
0001558E 3628 0008                  		move.w	8(a0),d3
00015592 7000                       		moveq	#0,d0
00015594 1028 0016                  		move.b	$16(a0),d0
00015598 4880                       		ext.w	d0
0001559A 9440                       		sub.w	d0,d2
0001559C 0A42 000F                  		eori.w	#$F,d2
000155A0 49F8 F768                  		lea	($FFFFF768).w,a4
000155A4 367C FFF0                  		movea.w	#-$10,a3
000155A8 3C3C 1000                  		move.w	#$1000,d6
000155AC 7A0E                       		moveq	#$E,d5
000155AE 6100 FA0A                  		bsr.w	FindFloor
000155B2 1638 F768                  		move.b	($FFFFF768).w,d3
000155B6 0803 0000                  		btst	#0,d3
000155BA 6700                       		beq.s	locret_14FD4
000155BC 163C 0080                  		move.b	#-$80,d3
000155C0                            
000155C0                            locret_14FD4:
000155C0 4E75                       		rts	
000155C2                            ; End of function ObjHitCeiling
000155C2                            
000155C2                            ; ===========================================================================
000155C2                            
000155C2                            loc_14FD6:				; XREF: sub_14D48
000155C2 3428 000C                  		move.w	$C(a0),d2
000155C6 3628 0008                  		move.w	8(a0),d3
000155CA 7000                       		moveq	#0,d0
000155CC 1028 0017                  		move.b	$17(a0),d0
000155D0 4880                       		ext.w	d0
000155D2 9440                       		sub.w	d0,d2
000155D4 1028 0016                  		move.b	$16(a0),d0
000155D8 4880                       		ext.w	d0
000155DA 9640                       		sub.w	d0,d3
000155DC 0A43 000F                  		eori.w	#$F,d3
000155E0 49F8 F768                  		lea	($FFFFF768).w,a4
000155E4 367C FFF0                  		movea.w	#-$10,a3
000155E8 3C3C 0800                  		move.w	#$800,d6
000155EC 7A0E                       		moveq	#$E,d5
000155EE 6100 FB08                  		bsr.w	FindWall
000155F2 3F01                       		move.w	d1,-(sp)
000155F4 3428 000C                  		move.w	$C(a0),d2
000155F8 3628 0008                  		move.w	8(a0),d3
000155FC 7000                       		moveq	#0,d0
000155FE 1028 0017                  		move.b	$17(a0),d0
00015602 4880                       		ext.w	d0
00015604 D440                       		add.w	d0,d2
00015606 1028 0016                  		move.b	$16(a0),d0
0001560A 4880                       		ext.w	d0
0001560C 9640                       		sub.w	d0,d3
0001560E 0A43 000F                  		eori.w	#$F,d3
00015612 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015616 367C FFF0                  		movea.w	#-$10,a3
0001561A 3C3C 0800                  		move.w	#$800,d6
0001561E 7A0E                       		moveq	#$E,d5
00015620 6100 FAD6                  		bsr.w	FindWall
00015624 301F                       		move.w	(sp)+,d0
00015626 143C 0040                  		move.b	#$40,d2
0001562A 6000 FD90                  		bra.w	loc_14DD0
0001562E                            
0001562E                            ; ---------------------------------------------------------------------------
0001562E                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001562E                            ; ---------------------------------------------------------------------------
0001562E                            
0001562E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001562E                            
0001562E                            
0001562E                            Sonic_HitWall:				; XREF: Sonic_Floor
0001562E 3428 000C                  		move.w	$C(a0),d2
00015632 3628 0008                  		move.w	8(a0),d3
00015636                            
00015636                            loc_1504A:
00015636 0443 000A                  		subi.w	#$A,d3
0001563A 0A43 000F                  		eori.w	#$F,d3
0001563E 49F8 F768                  		lea	($FFFFF768).w,a4
00015642 367C FFF0                  		movea.w	#-$10,a3
00015646 3C3C 0800                  		move.w	#$800,d6
0001564A 7A0E                       		moveq	#$E,d5
0001564C 6100 FAAA                  		bsr.w	FindWall
00015650 143C 0040                  		move.b	#$40,d2
00015654 6000 FDA0                  		bra.w	loc_14E0A
00015658                            ; End of function Sonic_HitWall
00015658                            
00015658                            ; ---------------------------------------------------------------------------
00015658                            ; Subroutine to	detect when an object hits a wall to its left
00015658                            ; ---------------------------------------------------------------------------
00015658                            
00015658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015658                            
00015658                            
00015658                            ObjHitWallLeft:
00015658 D668 0008                  		add.w	8(a0),d3
0001565C 3428 000C                  		move.w	$C(a0),d2
00015660 49F8 F768                  		lea	($FFFFF768).w,a4
00015664 18BC 0000                  		move.b	#0,(a4)
00015668 367C FFF0                  		movea.w	#-$10,a3
0001566C 3C3C 0800                  		move.w	#$800,d6
00015670 7A0E                       		moveq	#$E,d5
00015672 6100 FA84                  		bsr.w	FindWall
00015676 1638 F768                  		move.b	($FFFFF768).w,d3
0001567A 0803 0000                  		btst	#0,d3
0001567E 6700                       		beq.s	locret_15098
00015680 163C 0040                  		move.b	#$40,d3
00015684                            
00015684                            locret_15098:
00015684 4E75                       		rts	
00015686                            ; End of function ObjHitWallLeft
00015686                            
00015686                            ; ===========================================================================
00015686                            ; ---------------------------------------------------------------------------
00015686                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015686                            ; ---------------------------------------------------------------------------
00015686                            
00015686                            Obj66:					; XREF: Obj_Index
00015686 7000                       		moveq	#0,d0
00015688 1028 0024                  		move.b	$24(a0),d0
0001568C 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015690 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015694                            ; ===========================================================================
00015694 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015696 0000                       		dc.w Obj66_Action-Obj66_Index
00015698 0000                       		dc.w Obj66_Display-Obj66_Index
0001569A 0000                       		dc.w Obj66_Release-Obj66_Index
0001569C                            ; ===========================================================================
0001569C                            
0001569C                            Obj66_Main:				; XREF: Obj66_Index
0001569C 5428 0024                  		addq.b	#2,$24(a0)
000156A0 323C 0001                  		move.w	#1,d1
000156A4 2248                       		movea.l	a0,a1
000156A6 6000                       		bra.s	Obj66_MakeItem
000156A8                            ; ===========================================================================
000156A8                            
000156A8                            Obj66_Loop:
000156A8 6100 8984                  		bsr.w	SingleObjLoad
000156AC 6600                       		bne.s	loc_150FE
000156AE 12BC 0066                  		move.b	#$66,0(a1)
000156B2 5829 0024                  		addq.b	#4,$24(a1)
000156B6 3368 0008 0008             		move.w	8(a0),8(a1)
000156BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000156C2 137C 0003 0018             		move.b	#3,$18(a1)
000156C8 137C 0010 001A             		move.b	#$10,$1A(a1)
000156CE                            
000156CE                            Obj66_MakeItem:				; XREF: Obj66_Main
000156CE 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000156D6 337C 4348 0002             		move.w	#$4348,2(a1)
000156DC 0029 0004 0001             		ori.b	#4,1(a1)
000156E2 137C 0038 0019             		move.b	#$38,$19(a1)
000156E8                            
000156E8                            loc_150FE:
000156E8 51C9 FFBE                  		dbf	d1,Obj66_Loop
000156EC                            
000156EC 117C 0030 0019             		move.b	#$30,$19(a0)
000156F2 117C 0004 0018             		move.b	#4,$18(a0)
000156F8 317C 003C 0030             		move.w	#$3C,$30(a0)
000156FE 117C 0001 0034             		move.b	#1,$34(a0)
00015704 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001570A                            
0001570A                            Obj66_Action:				; XREF: Obj66_Index
0001570A 6100 0000                  		bsr.w	Obj66_ChkSwitch
0001570E 4A28 0001                  		tst.b	1(a0)
00015712 6A00 0000                  		bpl.w	Obj66_Display
00015716 323C 0030                  		move.w	#$30,d1
0001571A 3401                       		move.w	d1,d2
0001571C 3602                       		move.w	d2,d3
0001571E 5243                       		addq.w	#1,d3
00015720 3828 0008                  		move.w	8(a0),d4
00015724 6100 A852                  		bsr.w	SolidObject
00015728 0828 0005 0022             		btst	#5,$22(a0)
0001572E 6700 0000                  		beq.w	Obj66_Display
00015732 43F8 D000                  		lea	($FFFFD000).w,a1
00015736 720E                       		moveq	#$E,d1
00015738 3029 0008                  		move.w	8(a1),d0
0001573C B068 0008                  		cmp.w	8(a0),d0
00015740 6500                       		bcs.s	Obj66_GrabSonic
00015742 7207                       		moveq	#7,d1
00015744                            
00015744                            Obj66_GrabSonic:
00015744 B228 001A                  		cmp.b	$1A(a0),d1
00015748 6600                       		bne.s	Obj66_Display
0001574A 1141 0032                  		move.b	d1,$32(a0)
0001574E 5828 0024                  		addq.b	#4,$24(a0)
00015752 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015758 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
0001575E 337C 0800 0014             		move.w	#$800,$14(a1)
00015764 337C 0000 0010             		move.w	#0,$10(a1)
0001576A 337C 0000 0012             		move.w	#0,$12(a1)
00015770 08A8 0005 0022             		bclr	#5,$22(a0)
00015776 08A9 0005 0022             		bclr	#5,$22(a1)
0001577C 08E9 0001 0022             		bset	#1,$22(a1)
00015782 3429 0008                  		move.w	8(a1),d2
00015786 3629 000C                  		move.w	$C(a1),d3
0001578A 6100 0000                  		bsr.w	Obj66_ChgPos
0001578E D569 0008                  		add.w	d2,8(a1)
00015792 D769 000C                  		add.w	d3,$C(a1)
00015796 E0E9 0008                  		asr	8(a1)
0001579A E0E9 000C                  		asr	$C(a1)
0001579E                            
0001579E                            Obj66_Display:				; XREF: Obj66_Index
0001579E 6000 A4B0                  		bra.w	MarkObjGone
000157A2                            ; ===========================================================================
000157A2                            
000157A2                            Obj66_Release:				; XREF: Obj66_Index
000157A2 1028 001A                  		move.b	$1A(a0),d0
000157A6 0C00 0004                  		cmpi.b	#4,d0
000157AA 6700                       		beq.s	loc_151C8
000157AC 0C00 0007                  		cmpi.b	#7,d0
000157B0 6600                       		bne.s	loc_151F8
000157B2                            
000157B2                            loc_151C8:
000157B2 B028 0032                  		cmp.b	$32(a0),d0
000157B6 6700                       		beq.s	loc_151F8
000157B8 43F8 D000                  		lea	($FFFFD000).w,a1
000157BC 337C 0000 0010             		move.w	#0,$10(a1)
000157C2 337C 0800 0012             		move.w	#$800,$12(a1)
000157C8 0C00 0004                  		cmpi.b	#4,d0
000157CC 6700                       		beq.s	loc_151F0
000157CE 337C 0800 0010             		move.w	#$800,$10(a1)
000157D4 337C 0800 0012             		move.w	#$800,$12(a1)
000157DA                            
000157DA                            loc_151F0:
000157DA 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000157DE 5928 0024                  		subq.b	#4,$24(a0)
000157E2                            
000157E2                            loc_151F8:
000157E2 6100                       		bsr.s	Obj66_ChkSwitch
000157E4 6100                       		bsr.s	Obj66_ChgPos
000157E6 6000 A468                  		bra.w	MarkObjGone
000157EA                            
000157EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157EA                            
000157EA                            
000157EA                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000157EA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000157EE 7000                       		moveq	#0,d0
000157F0 1028 0038                  		move.b	$38(a0),d0
000157F4 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000157FA 6700                       		beq.s	loc_15224	; if not, branch
000157FC 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015800 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015802 4428 0034                  		neg.b	$34(a0)
00015806 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
0001580C 6000                       		bra.s	Obj66_Animate
0001580E                            ; ===========================================================================
0001580E                            
0001580E                            loc_15224:
0001580E 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015812                            
00015812                            Obj66_Animate:
00015812 5328 001E                  		subq.b	#1,$1E(a0)
00015816 6A00                       		bpl.s	locret_15246
00015818 117C 0007 001E             		move.b	#7,$1E(a0)
0001581E 1228 0034                  		move.b	$34(a0),d1
00015822 1028 001A                  		move.b	$1A(a0),d0
00015826 D001                       		add.b	d1,d0
00015828 0200 000F                  		andi.b	#$F,d0
0001582C 1140 001A                  		move.b	d0,$1A(a0)
00015830                            
00015830                            locret_15246:
00015830 4E75                       		rts	
00015832                            ; End of function Obj66_ChkSwitch
00015832                            
00015832                            
00015832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015832                            
00015832                            
00015832                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015832 43F8 D000                  		lea	($FFFFD000).w,a1
00015836 7000                       		moveq	#0,d0
00015838 1028 001A                  		move.b	$1A(a0),d0
0001583C D040                       		add.w	d0,d0
0001583E 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015842 101A                       		move.b	(a2)+,d0
00015844 4880                       		ext.w	d0
00015846 D068 0008                  		add.w	8(a0),d0
0001584A 3340 0008                  		move.w	d0,8(a1)
0001584E 101A                       		move.b	(a2)+,d0
00015850 4880                       		ext.w	d0
00015852 D068 000C                  		add.w	$C(a0),d0
00015856 3340 000C                  		move.w	d0,$C(a1)
0001585A 4E75                       		rts	
0001585C                            ; End of function Obj66_ChgPos
0001585C                            
0001585C                            ; ===========================================================================
0001585C E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015860 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015864 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015868 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001586C 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015870 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015874 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015878 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001587C                            ; ---------------------------------------------------------------------------
0001587C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001587C                            ; ---------------------------------------------------------------------------
0001587C                            Map_obj66:
0001587C                            	include "_maps\obj66.asm"
0001587C                            ; ---------------------------------------------------------------------------
0001587C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001587C                            ; ---------------------------------------------------------------------------
0001587C 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015880 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015884 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015888 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001588C 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015890 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015894 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015898 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001589C 0000                       		dc.w byte_154A4-Map_obj66
0001589E 06                         byte_152B4:	dc.b 6
0001589F E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000158A4 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000158A9 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000158AE E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000158B3 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000158B8 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000158BD 06                         byte_152D3:	dc.b 6
000158BE F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000158C3 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000158C8 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000158CD F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000158D2 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000158D7 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000158DC 06                         byte_152F2:	dc.b 6
000158DD 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000158E2 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000158E7 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000158EC 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000158F1 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000158F6 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000158FB 06                         byte_15311:	dc.b 6
000158FC 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015901 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015906 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001590B 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015910 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015915 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001591A 06                         byte_15330:	dc.b 6
0001591B 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015920 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015925 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001592A 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001592F 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015934 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015939 06                         byte_1534F:	dc.b 6
0001593A 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001593F 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015944 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015949 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001594E 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015953 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015958 06                         byte_1536E:	dc.b 6
00015959 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001595E 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015963 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015968 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001596D 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015972 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015977 06                         byte_1538D:	dc.b 6
00015978 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001597D F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015982 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015987 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001598C 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015991 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015996 06                         byte_153AC:	dc.b 6
00015997 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001599C 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000159A1 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000159A6 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000159AB 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000159B0 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000159B5 06                         byte_153CB:	dc.b 6
000159B6 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000159BB E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000159C0 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000159C5 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000159CA F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000159CF F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000159D4 06                         byte_153EA:	dc.b 6
000159D5 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000159DA E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000159DF D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000159E4 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000159E9 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000159EE E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000159F3 06                         byte_15409:	dc.b 6
000159F4 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000159F9 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000159FE CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015A03 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015A08 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015A0D E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015A12 06                         byte_15428:	dc.b 6
00015A13 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015A18 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015A1D C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015A22 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015A27 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015A2C E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015A31 06                         byte_15447:	dc.b 6
00015A32 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015A37 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015A3C CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015A41 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015A46 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015A4B E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015A50 06                         byte_15466:	dc.b 6
00015A51 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015A56 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015A5B D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015A60 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015A65 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015A6A E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015A6F 06                         byte_15485:	dc.b 6
00015A70 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015A75 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015A7A DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015A7F DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015A84 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015A89 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015A8E 0C                         byte_154A4:	dc.b $C
00015A8F C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015A94 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015A99 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015A9E C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015AA3 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015AA8 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015AAD 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015AB2 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015AB7 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015ABC 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015AC1 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015AC6 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015ACC 00                         		even
00015ACC 00                         		even
00015ACC                            
00015ACC                            ; ===========================================================================
00015ACC                            ; ---------------------------------------------------------------------------
00015ACC                            ; Object 67 - disc that	you run	around (SBZ)
00015ACC                            ; ---------------------------------------------------------------------------
00015ACC                            
00015ACC                            Obj67:					; XREF: Obj_Index
00015ACC 7000                       		moveq	#0,d0
00015ACE 1028 0024                  		move.b	$24(a0),d0
00015AD2 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015AD6 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015ADA                            ; ===========================================================================
00015ADA 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015ADC 0000                       		dc.w Obj67_Action-Obj67_Index
00015ADE                            ; ===========================================================================
00015ADE                            
00015ADE                            Obj67_Main:				; XREF: Obj67_Index
00015ADE 5428 0024                  		addq.b	#2,$24(a0)
00015AE2 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015AEA 317C C344 0002             		move.w	#$C344,2(a0)
00015AF0 117C 0004 0001             		move.b	#4,1(a0)
00015AF6 117C 0004 0018             		move.b	#4,$18(a0)
00015AFC 117C 0008 0019             		move.b	#8,$19(a0)
00015B02 3168 0008 0032             		move.w	8(a0),$32(a0)
00015B08 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015B0E 117C 0018 0034             		move.b	#$18,$34(a0)
00015B14 117C 0048 0038             		move.b	#$48,$38(a0)
00015B1A 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B1E 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B22 6700                       		beq.s	loc_15546
00015B24 117C 0010 0034             		move.b	#$10,$34(a0)
00015B2A 117C 0038 0038             		move.b	#$38,$38(a0)
00015B30                            
00015B30                            loc_15546:
00015B30 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B34 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B38 4881                       		ext.w	d1
00015B3A E741                       		asl.w	#3,d1
00015B3C 3141 0036                  		move.w	d1,$36(a0)
00015B40 1028 0022                  		move.b	$22(a0),d0
00015B44 E418                       		ror.b	#2,d0
00015B46 0200 00C0                  		andi.b	#-$40,d0
00015B4A 1140 0026                  		move.b	d0,$26(a0)
00015B4E                            
00015B4E                            Obj67_Action:				; XREF: Obj67_Index
00015B4E 6100 0000                  		bsr.w	Obj67_MoveSonic
00015B52 6100 0000                  		bsr.w	Obj67_MoveSpot
00015B56 6000 0000                  		bra.w	Obj67_ChkDel
00015B5A                            ; ===========================================================================
00015B5A                            
00015B5A                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015B5A 7400                       		moveq	#0,d2
00015B5C 1428 0038                  		move.b	$38(a0),d2
00015B60 3602                       		move.w	d2,d3
00015B62 D643                       		add.w	d3,d3
00015B64 43F8 D000                  		lea	($FFFFD000).w,a1
00015B68 3029 0008                  		move.w	8(a1),d0
00015B6C 9068 0032                  		sub.w	$32(a0),d0
00015B70 D042                       		add.w	d2,d0
00015B72 B043                       		cmp.w	d3,d0
00015B74 6400                       		bcc.s	loc_155A8
00015B76 3229 000C                  		move.w	$C(a1),d1
00015B7A 9268 0030                  		sub.w	$30(a0),d1
00015B7E D242                       		add.w	d2,d1
00015B80 B243                       		cmp.w	d3,d1
00015B82 6400                       		bcc.s	loc_155A8
00015B84 0829 0001 0022             		btst	#1,$22(a1)
00015B8A 6700                       		beq.s	loc_155B8
00015B8C 4228 003A                  		clr.b	$3A(a0)
00015B90 4E75                       		rts	
00015B92                            ; ===========================================================================
00015B92                            
00015B92                            loc_155A8:
00015B92 4A28 003A                  		tst.b	$3A(a0)
00015B96 6700                       		beq.s	locret_155B6
00015B98 4229 0038                  		clr.b	$38(a1)
00015B9C 4228 003A                  		clr.b	$3A(a0)
00015BA0                            
00015BA0                            locret_155B6:
00015BA0 4E75                       		rts	
00015BA2                            ; ===========================================================================
00015BA2                            
00015BA2                            loc_155B8:
00015BA2 4A28 003A                  		tst.b	$3A(a0)
00015BA6 6600                       		bne.s	loc_155E2
00015BA8 117C 0001 003A             		move.b	#1,$3A(a0)
00015BAE 0829 0002 0022             		btst	#2,$22(a1)
00015BB4 6600                       		bne.s	loc_155D0
00015BB6 4229 001C                  		clr.b	$1C(a1)
00015BBA                            
00015BBA                            loc_155D0:
00015BBA 08A9 0005 0022             		bclr	#5,$22(a1)
00015BC0 137C 0001 001D             		move.b	#1,$1D(a1)
00015BC6 137C 0001 0038             		move.b	#1,$38(a1)
00015BCC                            
00015BCC                            loc_155E2:
00015BCC 3029 0014                  		move.w	$14(a1),d0
00015BD0 4A68 0036                  		tst.w	$36(a0)
00015BD4 6A00                       		bpl.s	loc_15608
00015BD6 0C40 FC00                  		cmpi.w	#-$400,d0
00015BDA 6F00                       		ble.s	loc_155FA
00015BDC 337C FC00 0014             		move.w	#-$400,$14(a1)
00015BE2 4E75                       		rts	
00015BE4                            ; ===========================================================================
00015BE4                            
00015BE4                            loc_155FA:
00015BE4 0C40 F100                  		cmpi.w	#-$F00,d0
00015BE8 6C00                       		bge.s	locret_15606
00015BEA 337C F100 0014             		move.w	#-$F00,$14(a1)
00015BF0                            
00015BF0                            locret_15606:
00015BF0 4E75                       		rts	
00015BF2                            ; ===========================================================================
00015BF2                            
00015BF2                            loc_15608:
00015BF2 0C40 0400                  		cmpi.w	#$400,d0
00015BF6 6C00                       		bge.s	loc_15616
00015BF8 337C 0400 0014             		move.w	#$400,$14(a1)
00015BFE 4E75                       		rts	
00015C00                            ; ===========================================================================
00015C00                            
00015C00                            loc_15616:
00015C00 0C40 0F00                  		cmpi.w	#$F00,d0
00015C04 6F00                       		ble.s	locret_15622
00015C06 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015C0C                            
00015C0C                            locret_15622:
00015C0C 4E75                       		rts	
00015C0E                            ; ===========================================================================
00015C0E                            
00015C0E                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015C0E 3028 0036                  		move.w	$36(a0),d0
00015C12 D168 0026                  		add.w	d0,$26(a0)
00015C16 1028 0026                  		move.b	$26(a0),d0
00015C1A 4EB9 0000 2C22             		jsr	(CalcSine).l
00015C20 3428 0030                  		move.w	$30(a0),d2
00015C24 3628 0032                  		move.w	$32(a0),d3
00015C28 7800                       		moveq	#0,d4
00015C2A 1828 0034                  		move.b	$34(a0),d4
00015C2E E14C                       		lsl.w	#8,d4
00015C30 2A04                       		move.l	d4,d5
00015C32 C9C0                       		muls.w	d0,d4
00015C34 4844                       		swap	d4
00015C36 CBC1                       		muls.w	d1,d5
00015C38 4845                       		swap	d5
00015C3A D842                       		add.w	d2,d4
00015C3C DA43                       		add.w	d3,d5
00015C3E 3144 000C                  		move.w	d4,$C(a0)
00015C42 3145 0008                  		move.w	d5,8(a0)
00015C46 4E75                       		rts	
00015C48                            ; ===========================================================================
00015C48                            
00015C48                            Obj67_ChkDel:				; XREF: Obj67_Action
00015C48 3028 0032                  		move.w	$32(a0),d0
00015C4C 0240 FF80                  		andi.w	#-$80,d0
00015C50 3238 F700                  		move.w	($FFFFF700).w,d1
00015C54 0441 0080                  		subi.w	#$80,d1
00015C58 0241 FF80                  		andi.w	#-$80,d1
00015C5C 9041                       		sub.w	d1,d0
00015C5E 0C40 0280                  		cmpi.w	#$280,d0
00015C62 6200                       		bhi.s	Obj67_Delete
00015C64 4EF9 0000 DBA8             		jmp	DisplaySprite
00015C6A                            ; ===========================================================================
00015C6A                            
00015C6A                            Obj67_Delete:
00015C6A 4EF9 0000 DBE4             		jmp	DeleteObject
00015C70                            ; ===========================================================================
00015C70                            ; ---------------------------------------------------------------------------
00015C70                            ; Sprite mappings - disc that you run around (SBZ)
00015C70                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C70                            ; part of the level tiles.)
00015C70                            ; ---------------------------------------------------------------------------
00015C70                            Map_obj67:
00015C70                            	include "_maps\obj67.asm"
00015C70                            ; ---------------------------------------------------------------------------
00015C70                            ; Sprite mappings - disc that you run around (SBZ)
00015C70                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C70                            ; part of the level tiles.)
00015C70                            ; ---------------------------------------------------------------------------
00015C70 0000                       		dc.w byte_15688-Map_obj67
00015C72 01                         byte_15688:	dc.b 1
00015C73 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015C78                            		even
00015C78                            		even
00015C78                            
00015C78                            ; ===========================================================================
00015C78                            ; ---------------------------------------------------------------------------
00015C78                            ; Object 68 - conveyor belts (SBZ)
00015C78                            ; ---------------------------------------------------------------------------
00015C78                            
00015C78                            Obj68:					; XREF: Obj_Index
00015C78 7000                       		moveq	#0,d0
00015C7A 1028 0024                  		move.b	$24(a0),d0
00015C7E 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015C82 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015C86                            ; ===========================================================================
00015C86 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015C88 0000                       		dc.w Obj68_Action-Obj68_Index
00015C8A                            ; ===========================================================================
00015C8A                            
00015C8A                            Obj68_Main:				; XREF: Obj68_Index
00015C8A 5428 0024                  		addq.b	#2,$24(a0)
00015C8E 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015C94 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C98 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015C9C 6700                       		beq.s	loc_156BA	; if zero, branch
00015C9E 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015CA4                            
00015CA4                            loc_156BA:
00015CA4 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CA8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015CAC 4881                       		ext.w	d1
00015CAE E841                       		asr.w	#4,d1
00015CB0 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015CB4                            
00015CB4                            Obj68_Action:				; XREF: Obj68_Index
00015CB4 6100                       		bsr.s	Obj68_MoveSonic
00015CB6 3028 0008                  		move.w	8(a0),d0
00015CBA 0240 FF80                  		andi.w	#$FF80,d0
00015CBE 3238 F700                  		move.w	($FFFFF700).w,d1
00015CC2 0441 0080                  		subi.w	#$80,d1
00015CC6 0241 FF80                  		andi.w	#$FF80,d1
00015CCA 9041                       		sub.w	d1,d0
00015CCC 0C40 0280                  		cmpi.w	#$280,d0
00015CD0 6200                       		bhi.s	Obj68_Delete
00015CD2 4E75                       		rts	
00015CD4                            ; ===========================================================================
00015CD4                            
00015CD4                            Obj68_Delete:
00015CD4 4EF9 0000 DBE4             		jmp	DeleteObject
00015CDA                            ; ===========================================================================
00015CDA                            
00015CDA                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015CDA 7400                       		moveq	#0,d2
00015CDC 1428 0038                  		move.b	$38(a0),d2
00015CE0 3602                       		move.w	d2,d3
00015CE2 D643                       		add.w	d3,d3
00015CE4 43F8 D000                  		lea	($FFFFD000).w,a1
00015CE8 3029 0008                  		move.w	8(a1),d0
00015CEC 9068 0008                  		sub.w	8(a0),d0
00015CF0 D042                       		add.w	d2,d0
00015CF2 B043                       		cmp.w	d3,d0
00015CF4 6400                       		bcc.s	locret_1572E
00015CF6 3229 000C                  		move.w	$C(a1),d1
00015CFA 9268 000C                  		sub.w	$C(a0),d1
00015CFE 0641 0030                  		addi.w	#$30,d1
00015D02 0C41 0030                  		cmpi.w	#$30,d1
00015D06 6400                       		bcc.s	locret_1572E
00015D08 0829 0001 0022             		btst	#1,$22(a1)
00015D0E 6600                       		bne.s	locret_1572E
00015D10 3028 0036                  		move.w	$36(a0),d0
00015D14 D169 0008                  		add.w	d0,8(a1)
00015D18                            
00015D18                            locret_1572E:
00015D18 4E75                       		rts	
00015D1A                            
00015D1A                            ; ===========================================================================
00015D1A                            ; ---------------------------------------------------------------------------
00015D1A                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015D1A                            ; ---------------------------------------------------------------------------
00015D1A                            
00015D1A                            Obj69:					; XREF: Obj_Index
00015D1A 7000                       		moveq	#0,d0
00015D1C 1028 0024                  		move.b	$24(a0),d0
00015D20 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015D24 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015D28                            ; ===========================================================================
00015D28 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015D2A 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015D2C 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015D2E                            ; ===========================================================================
00015D2E                            
00015D2E                            Obj69_Main:				; XREF: Obj69_Index
00015D2E 5428 0024                  		addq.b	#2,$24(a0)
00015D32 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015D3A 317C 4492 0002             		move.w	#$4492,2(a0)
00015D40 0028 0004 0001             		ori.b	#4,1(a0)
00015D46 117C 0080 0019             		move.b	#$80,$19(a0)
00015D4C 7000                       		moveq	#0,d0
00015D4E 1028 0028                  		move.b	$28(a0),d0
00015D52 0240 000F                  		andi.w	#$F,d0
00015D56 C0FC 003C                  		mulu.w	#$3C,d0
00015D5A 3140 0032                  		move.w	d0,$32(a0)
00015D5E 4A28 0028                  		tst.b	$28(a0)
00015D62 6A00                       		bpl.s	Obj69_Trapdoor
00015D64 5428 0024                  		addq.b	#2,$24(a0)
00015D68 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015D70 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015D76 117C 0010 0019             		move.b	#$10,$19(a0)
00015D7C 117C 0002 001C             		move.b	#2,$1C(a0)
00015D82 7000                       		moveq	#0,d0
00015D84 1028 0028                  		move.b	$28(a0),d0	; get object type
00015D88 3200                       		move.w	d0,d1
00015D8A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015D8E C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015D92 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015D96 3140 0032                  		move.w	d0,$32(a0)
00015D9A 0241 0070                  		andi.w	#$70,d1
00015D9E 0641 0010                  		addi.w	#$10,d1
00015DA2 E549                       		lsl.w	#2,d1
00015DA4 5341                       		subq.w	#1,d1
00015DA6 3141 0036                  		move.w	d1,$36(a0)
00015DAA 6000                       		bra.s	Obj69_Spinner
00015DAC                            ; ===========================================================================
00015DAC                            
00015DAC                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015DAC 5368 0030                  		subq.w	#1,$30(a0)
00015DB0 6A00                       		bpl.s	Obj69_Animate
00015DB2 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015DB8 0868 0000 001C             		bchg	#0,$1C(a0)
00015DBE 4A28 0001                  		tst.b	1(a0)
00015DC2 6A00                       		bpl.s	Obj69_Animate
00015DC4 303C 00BB                  		move.w	#$BB,d0
00015DC8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015DCE                            
00015DCE                            Obj69_Animate:
00015DCE 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015DD4 4EB9 0000 AC42             		jsr	AnimateSprite
00015DDA 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015DDE 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015DE0 323C 004B                  		move.w	#$4B,d1
00015DE4 343C 000C                  		move.w	#$C,d2
00015DE8 3602                       		move.w	d2,d3
00015DEA 5243                       		addq.w	#1,d3
00015DEC 3828 0008                  		move.w	8(a0),d4
00015DF0 6100 A186                  		bsr.w	SolidObject
00015DF4 6000 9E5A                  		bra.w	MarkObjGone
00015DF8                            ; ===========================================================================
00015DF8                            
00015DF8                            Obj69_NotSolid:
00015DF8 0828 0003 0022             		btst	#3,$22(a0)
00015DFE 6700                       		beq.s	Obj69_Display
00015E00 43F8 D000                  		lea	($FFFFD000).w,a1
00015E04 08A9 0003 0022             		bclr	#3,$22(a1)
00015E0A 08A8 0003 0022             		bclr	#3,$22(a0)
00015E10 4228 0025                  		clr.b	$25(a0)
00015E14                            
00015E14                            Obj69_Display:
00015E14 6000 9E3A                  		bra.w	MarkObjGone
00015E18                            ; ===========================================================================
00015E18                            
00015E18                            Obj69_Spinner:				; XREF: Obj69_Index
00015E18 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E1C C068 0036                  		and.w	$36(a0),d0
00015E20 6600                       		bne.s	Obj69_Delay
00015E22 117C 0001 0034             		move.b	#1,$34(a0)
00015E28                            
00015E28                            Obj69_Delay:
00015E28 4A28 0034                  		tst.b	$34(a0)
00015E2C 6700                       		beq.s	Obj69_Animate2
00015E2E 5368 0030                  		subq.w	#1,$30(a0)
00015E32 6A00                       		bpl.s	Obj69_Animate2
00015E34 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E3A 4228 0034                  		clr.b	$34(a0)
00015E3E 0868 0000 001C             		bchg	#0,$1C(a0)
00015E44                            
00015E44                            Obj69_Animate2:
00015E44 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E4A 4EB9 0000 AC42             		jsr	AnimateSprite
00015E50 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015E54 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015E56 323C 001B                  		move.w	#$1B,d1
00015E5A 343C 0007                  		move.w	#7,d2
00015E5E 3602                       		move.w	d2,d3
00015E60 5243                       		addq.w	#1,d3
00015E62 3828 0008                  		move.w	8(a0),d4
00015E66 6100 A110                  		bsr.w	SolidObject
00015E6A 6000 9DE4                  		bra.w	MarkObjGone
00015E6E                            ; ===========================================================================
00015E6E                            
00015E6E                            Obj69_NotSolid2:
00015E6E 0828 0003 0022             		btst	#3,$22(a0)
00015E74 6700                       		beq.s	Obj69_Display2
00015E76 43F8 D000                  		lea	($FFFFD000).w,a1
00015E7A 08A9 0003 0022             		bclr	#3,$22(a1)
00015E80 08A8 0003 0022             		bclr	#3,$22(a0)
00015E86 4228 0025                  		clr.b	$25(a0)
00015E8A                            
00015E8A                            Obj69_Display2:
00015E8A 6000 9DC4                  		bra.w	MarkObjGone
00015E8E                            ; ===========================================================================
00015E8E                            Ani_obj69:
00015E8E                            	include "_anim\obj69.asm"
00015E8E                            ; ---------------------------------------------------------------------------
00015E8E                            ; Animation script - trapdoor (SBZ)
00015E8E                            ; ---------------------------------------------------------------------------
00015E8E 0000                       		dc.w byte_158AC-Ani_obj69
00015E90 0000                       		dc.w byte_158B2-Ani_obj69
00015E92 0000                       		dc.w byte_158B8-Ani_obj69
00015E94 0000                       		dc.w byte_158CC-Ani_obj69
00015E96 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015E9C 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015EA2 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EAF 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EB6 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EC3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015ECA                            		even
00015ECA                            		even
00015ECA                            
00015ECA                            ; ---------------------------------------------------------------------------
00015ECA                            ; Sprite mappings - trapdoor (SBZ)
00015ECA                            ; ---------------------------------------------------------------------------
00015ECA                            Map_obj69:
00015ECA                            	include "_maps\obj69.asm"
00015ECA                            ; ---------------------------------------------------------------------------
00015ECA                            ; Sprite mappings - trapdoor (SBZ)
00015ECA                            ; ---------------------------------------------------------------------------
00015ECA 0000                       		dc.w byte_158E6-Map_obj69
00015ECC 0000                       		dc.w byte_158FB-Map_obj69
00015ECE 0000                       		dc.w byte_15924-Map_obj69
00015ED0 04                         byte_158E6:	dc.b 4
00015ED1 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015ED6 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015EDB F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015EE0 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015EE5 08                         byte_158FB:	dc.b 8
00015EE6 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015EEB 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015EF0 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015EF5 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015EFA F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015EFF 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015F04 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015F09 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015F0E 04                         byte_15924:	dc.b 4
00015F0F 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015F14 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015F19 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015F1E 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015F24 00                         		even
00015F24 00                         		even
00015F24                            
00015F24                            ; ---------------------------------------------------------------------------
00015F24                            ; Sprite mappings - spinning platforms (SBZ)
00015F24                            ; ---------------------------------------------------------------------------
00015F24                            Map_obj69a:
00015F24                            	include "_maps\obj69a.asm"
00015F24                            ; ---------------------------------------------------------------------------
00015F24                            ; Sprite mappings - spinning platforms (SBZ)
00015F24                            ; ---------------------------------------------------------------------------
00015F24 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015F28 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015F2C 0000                       		dc.w byte_15970-Map_obj69a
00015F2E 02                         byte_15944:	dc.b 2
00015F2F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015F34 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015F39 02                         byte_1594F:	dc.b 2
00015F3A F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015F3F 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015F44 02                         byte_1595A:	dc.b 2
00015F45 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015F4A 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015F4F 02                         byte_15965:	dc.b 2
00015F50 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015F55 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015F5A 02                         byte_15970:	dc.b 2
00015F5B F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015F60 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015F66 00                         		even
00015F66 00                         		even
00015F66                            
00015F66                            ; ===========================================================================
00015F66                            ; ---------------------------------------------------------------------------
00015F66                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015F66                            ; ---------------------------------------------------------------------------
00015F66                            
00015F66                            Obj6A:					; XREF: Obj_Index
00015F66 7000                       		moveq	#0,d0
00015F68 1028 0024                  		move.b	$24(a0),d0
00015F6C 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015F70 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015F74                            ; ===========================================================================
00015F74 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015F76 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015F78                            ; ===========================================================================
00015F78                            
00015F78                            Obj6A_Main:				; XREF: Obj6A_Index
00015F78 5428 0024                  		addq.b	#2,$24(a0)
00015F7C 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015F84 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015F8A 117C 0004 0001             		move.b	#4,1(a0)
00015F90 117C 0004 0018             		move.b	#4,$18(a0)
00015F96 117C 0020 0019             		move.b	#$20,$19(a0)
00015F9C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015FA2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015FA8 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015FAE 6400                       		bcc.s	Obj6A_Action
00015FB0 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015FB6                            
00015FB6                            Obj6A_Action:				; XREF: Obj6A_Index
00015FB6 7000                       		moveq	#0,d0
00015FB8 1028 0028                  		move.b	$28(a0),d0
00015FBC 0240 0007                  		andi.w	#7,d0
00015FC0 D040                       		add.w	d0,d0
00015FC2 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015FC6 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015FCA 3028 003A                  		move.w	$3A(a0),d0
00015FCE 0240 FF80                  		andi.w	#$FF80,d0
00015FD2 3238 F700                  		move.w	($FFFFF700).w,d1
00015FD6 0441 0080                  		subi.w	#$80,d1
00015FDA 0241 FF80                  		andi.w	#$FF80,d1
00015FDE 9041                       		sub.w	d1,d0
00015FE0 0C40 0280                  		cmpi.w	#$280,d0
00015FE4 6200                       		bhi.s	Obj6A_Delete
00015FE6 4EF9 0000 DBA8             		jmp	DisplaySprite
00015FEC                            ; ===========================================================================
00015FEC                            
00015FEC                            Obj6A_Delete:
00015FEC 4EF9 0000 DBE4             		jmp	DeleteObject
00015FF2                            ; ===========================================================================
00015FF2 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015FF6 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015FFA 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015FFC                            ; ===========================================================================
00015FFC                            
00015FFC                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015FFC 4E75                       		rts	
00015FFE                            ; ===========================================================================
00015FFE                            
00015FFE                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015FFE 323C 0060                  		move.w	#$60,d1
00016002 7000                       		moveq	#0,d0
00016004 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016008 0828 0000 0022             		btst	#0,$22(a0)
0001600E 6700                       		beq.s	Obj6A_Animate01
00016010 4440                       		neg.w	d0
00016012 D041                       		add.w	d1,d0
00016014                            
00016014                            Obj6A_Animate01:
00016014 3228 003A                  		move.w	$3A(a0),d1
00016018 9240                       		sub.w	d0,d1
0001601A 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001601E 5328 001E                  		subq.b	#1,$1E(a0)
00016022 6A00                       		bpl.s	loc_15A46
00016024 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001602A 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016030                            
00016030                            loc_15A46:
00016030 4A28 0001                  		tst.b	1(a0)
00016034 6A00                       		bpl.s	locret_15A60
00016036 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001603A 0240 000F                  		andi.w	#$F,d0
0001603E 6600                       		bne.s	locret_15A60
00016040 303C 00B0                  		move.w	#$B0,d0
00016044 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001604A                            
0001604A                            locret_15A60:
0001604A 4E75                       		rts	
0001604C                            ; ===========================================================================
0001604C                            
0001604C                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001604C 323C 0030                  		move.w	#$30,d1
00016050 7000                       		moveq	#0,d0
00016052 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016056 0828 0000 0022             		btst	#0,$22(a0)
0001605C 6700                       		beq.s	Obj6A_Animate02
0001605E 4440                       		neg.w	d0
00016060 0640 0080                  		addi.w	#$80,d0
00016064                            
00016064                            Obj6A_Animate02:
00016064 3228 0038                  		move.w	$38(a0),d1
00016068 9240                       		sub.w	d0,d1
0001606A 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001606E 5328 001E                  		subq.b	#1,$1E(a0)
00016072 6A00                       		bpl.s	loc_15A96
00016074 117C 0002 001E             		move.b	#2,$1E(a0)
0001607A 0868 0000 001A             		bchg	#0,$1A(a0)
00016080                            
00016080                            loc_15A96:
00016080 4A28 0001                  		tst.b	1(a0)
00016084 6A00                       		bpl.s	locret_15AB0
00016086 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001608A 0C00 0018                  		cmpi.b	#$18,d0
0001608E 6600                       		bne.s	locret_15AB0
00016090 303C 00B0                  		move.w	#$B0,d0
00016094 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001609A                            
0001609A                            locret_15AB0:
0001609A 4E75                       		rts	
0001609C                            ; ===========================================================================
0001609C                            
0001609C                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001609C 4A28 003D                  		tst.b	$3D(a0)
000160A0 6600                       		bne.s	Obj6A_Animate03
000160A2 3038 D008                  		move.w	($FFFFD008).w,d0
000160A6 0440 00C0                  		subi.w	#$C0,d0
000160AA 6500                       		bcs.s	loc_15B02
000160AC 9068 0008                  		sub.w	8(a0),d0
000160B0 6500                       		bcs.s	loc_15B02
000160B2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000160B6 0440 0080                  		subi.w	#$80,d0
000160BA B068 000C                  		cmp.w	$C(a0),d0
000160BE 6400                       		bcc.s	locret_15B04
000160C0 0640 0100                  		addi.w	#$100,d0
000160C4 B068 000C                  		cmp.w	$C(a0),d0
000160C8 6500                       		bcs.s	locret_15B04
000160CA 117C 0001 003D             		move.b	#1,$3D(a0)
000160D0 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000160D6 117C 00A2 0020             		move.b	#$A2,$20(a0)
000160DC 117C 0002 001A             		move.b	#2,$1A(a0)
000160E2 303C 00B0                  		move.w	#$B0,d0
000160E6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160EC                            
000160EC                            loc_15B02:
000160EC 588F                       		addq.l	#4,sp
000160EE                            
000160EE                            locret_15B04:
000160EE 4E75                       		rts	
000160F0                            ; ===========================================================================
000160F0                            
000160F0                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000160F0 4EB9 0000 DB82             		jsr	SpeedToPos
000160F6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000160FC 5328 001E                  		subq.b	#1,$1E(a0)
00016100 6A00                       		bpl.s	locret_15B24
00016102 117C 0002 001E             		move.b	#2,$1E(a0)
00016108 0868 0000 001A             		bchg	#0,$1A(a0)
0001610E                            
0001610E                            locret_15B24:
0001610E 4E75                       		rts	
00016110                            ; ===========================================================================
00016110                            
00016110                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016110 4A28 003D                  		tst.b	$3D(a0)
00016114 6600                       		bne.s	Obj6A_Animate04
00016116 3038 D008                  		move.w	($FFFFD008).w,d0
0001611A 0640 00E0                  		addi.w	#$E0,d0
0001611E 9068 0008                  		sub.w	8(a0),d0
00016122 6400                       		bcc.s	loc_15B74
00016124 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016128 0440 0080                  		subi.w	#$80,d0
0001612C B068 000C                  		cmp.w	$C(a0),d0
00016130 6400                       		bcc.s	locret_15B76
00016132 0640 0100                  		addi.w	#$100,d0
00016136 B068 000C                  		cmp.w	$C(a0),d0
0001613A 6500                       		bcs.s	locret_15B76
0001613C 117C 0001 003D             		move.b	#1,$3D(a0)
00016142 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016148 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001614E 117C 0002 001A             		move.b	#2,$1A(a0)
00016154 303C 00B0                  		move.w	#$B0,d0
00016158 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001615E                            
0001615E                            loc_15B74:
0001615E 588F                       		addq.l	#4,sp
00016160                            
00016160                            locret_15B76:
00016160 4E75                       		rts	
00016162                            ; ===========================================================================
00016162                            
00016162                            Obj6A_Animate04:
00016162 4EB9 0000 DB82             		jsr	SpeedToPos
00016168 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001616E 5328 001E                  		subq.b	#1,$1E(a0)
00016172 6A00                       		bpl.s	locret_15B96
00016174 117C 0002 001E             		move.b	#2,$1E(a0)
0001617A 0868 0000 001A             		bchg	#0,$1A(a0)
00016180                            
00016180                            locret_15B96:
00016180 4E75                       		rts	
00016182                            ; ===========================================================================
00016182                            ; ---------------------------------------------------------------------------
00016182                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016182                            ; ---------------------------------------------------------------------------
00016182                            Map_obj6A:
00016182                            	include "_maps\obj6A.asm"
00016182                            ; ---------------------------------------------------------------------------
00016182                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016182                            ; ---------------------------------------------------------------------------
00016182 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016186 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001618A 07                         byte_15BA0:	dc.b 7
0001618B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016190 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016195 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001619A E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001619F E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161A4 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161A9 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161AE 07                         byte_15BC4:	dc.b 7
000161AF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161B4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161B9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161BE E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161C3 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161C8 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161CD 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161D2 04                         byte_15BE8:	dc.b 4
000161D3 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161D8 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161DD 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161E2 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161E7 04                         byte_15BFD:	dc.b 4
000161E8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161ED E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161F2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161F7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161FC                            		even
000161FC                            		even
000161FC                            
000161FC                            ; ===========================================================================
000161FC                            ; ---------------------------------------------------------------------------
000161FC                            ; Object 6B - stomper (SBZ)
000161FC                            ; ---------------------------------------------------------------------------
000161FC                            
000161FC                            Obj6B:					; XREF: Obj_Index
000161FC 7000                       		moveq	#0,d0
000161FE 1028 0024                  		move.b	$24(a0),d0
00016202 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016206 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001620A                            ; ===========================================================================
0001620A 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001620C 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001620E                            
0001620E 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016212 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016216 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001621A 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001621E 8040 0005                  		dc.b  $80, $40,	  0,   5
00016222                            ; ===========================================================================
00016222                            
00016222                            Obj6B_Main:				; XREF: Obj6B_Index
00016222 5428 0024                  		addq.b	#2,$24(a0)
00016226 7000                       		moveq	#0,d0
00016228 1028 0028                  		move.b	$28(a0),d0
0001622C E448                       		lsr.w	#2,d0
0001622E 0240 001C                  		andi.w	#$1C,d0
00016232 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016236 115B 0019                  		move.b	(a3)+,$19(a0)
0001623A 115B 0016                  		move.b	(a3)+,$16(a0)
0001623E E448                       		lsr.w	#2,d0
00016240 1140 001A                  		move.b	d0,$1A(a0)
00016244 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001624C 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016252 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016258 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001625A 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016260 6700                       		beq.s	Obj6B_SBZ3
00016262                            
00016262                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016262 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016266 7000                       		moveq	#0,d0
00016268 1028 0023                  		move.b	$23(a0),d0
0001626C 6700                       		beq.s	Obj6B_Delete
0001626E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016274                            
00016274                            Obj6B_Delete:
00016274 4EF9 0000 DBE4             		jmp	DeleteObject
0001627A                            ; ===========================================================================
0001627A                            
0001627A                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001627A 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016280 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016286 6600                       		bne.s	Obj6B_SBZ12
00016288 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001628C 7000                       		moveq	#0,d0
0001628E 1028 0023                  		move.b	$23(a0),d0
00016292 6700                       		beq.s	Obj6B_SBZ12
00016294 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001629A 6700                       		beq.s	Obj6B_SBZ12
0001629C 4238 F7CB                  		clr.b	($FFFFF7CB).w
000162A0 60C0                       		bra.s	Obj6B_ChkGone
000162A2                            ; ===========================================================================
000162A2                            
000162A2                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000162A2 0028 0004 0001             		ori.b	#4,1(a0)
000162A8 117C 0004 0018             		move.b	#4,$18(a0)
000162AE 3168 0008 0034             		move.w	8(a0),$34(a0)
000162B4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000162BA 7000                       		moveq	#0,d0
000162BC 101B                       		move.b	(a3)+,d0
000162BE 3140 003C                  		move.w	d0,$3C(a0)
000162C2 7000                       		moveq	#0,d0
000162C4 1028 0028                  		move.b	$28(a0),d0
000162C8 6A00                       		bpl.s	Obj6B_Action
000162CA 0200 000F                  		andi.b	#$F,d0
000162CE 1140 003E                  		move.b	d0,$3E(a0)
000162D2 1153 0028                  		move.b	(a3),$28(a0)
000162D6 0C13 0005                  		cmpi.b	#5,(a3)
000162DA 6600                       		bne.s	Obj6B_ChkGone2
000162DC 08E8 0004 0001             		bset	#4,1(a0)
000162E2                            
000162E2                            Obj6B_ChkGone2:
000162E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162E6 7000                       		moveq	#0,d0
000162E8 1028 0023                  		move.b	$23(a0),d0
000162EC 6700                       		beq.s	Obj6B_Action
000162EE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000162F4                            
000162F4                            Obj6B_Action:				; XREF: Obj6B_Index
000162F4 3F28 0008                  		move.w	8(a0),-(sp)
000162F8 7000                       		moveq	#0,d0
000162FA 1028 0028                  		move.b	$28(a0),d0
000162FE 0240 000F                  		andi.w	#$F,d0
00016302 D040                       		add.w	d0,d0
00016304 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016308 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001630C 381F                       		move.w	(sp)+,d4
0001630E 4A28 0001                  		tst.b	1(a0)
00016312 6A00                       		bpl.s	Obj6B_ChkDel
00016314 7200                       		moveq	#0,d1
00016316 1228 0019                  		move.b	$19(a0),d1
0001631A 0641 000B                  		addi.w	#$B,d1
0001631E 7400                       		moveq	#0,d2
00016320 1428 0016                  		move.b	$16(a0),d2
00016324 3602                       		move.w	d2,d3
00016326 5243                       		addq.w	#1,d3
00016328 6100 9C4E                  		bsr.w	SolidObject
0001632C                            
0001632C                            Obj6B_ChkDel:
0001632C 3028 0034                  		move.w	$34(a0),d0
00016330 0240 FF80                  		andi.w	#$FF80,d0
00016334 3238 F700                  		move.w	($FFFFF700).w,d1
00016338 0441 0080                  		subi.w	#$80,d1
0001633C 0241 FF80                  		andi.w	#$FF80,d1
00016340 9041                       		sub.w	d1,d0
00016342 0C40 0280                  		cmpi.w	#$280,d0
00016346 6200                       		bhi.s	loc_15D64
00016348 4EF9 0000 DBA8             		jmp	DisplaySprite
0001634E                            ; ===========================================================================
0001634E                            
0001634E                            loc_15D64:
0001634E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016354 6600                       		bne.s	Obj6B_Delete2
00016356 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001635A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001635E 7000                       		moveq	#0,d0
00016360 1028 0023                  		move.b	$23(a0),d0
00016364 6700                       		beq.s	Obj6B_Delete2
00016366 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001636C                            
0001636C                            Obj6B_Delete2:
0001636C 4EF9 0000 DBE4             		jmp	DeleteObject
00016372                            ; ===========================================================================
00016372 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016376 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001637A 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001637E                            ; ===========================================================================
0001637E                            
0001637E                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001637E 4E75                       		rts	
00016380                            ; ===========================================================================
00016380                            
00016380                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016380 4A28 0038                  		tst.b	$38(a0)
00016384 6600                       		bne.s	loc_15DB4
00016386 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001638A 7000                       		moveq	#0,d0
0001638C 1028 003E                  		move.b	$3E(a0),d0
00016390 0832 0000 0000             		btst	#0,(a2,d0.w)
00016396 6700                       		beq.s	loc_15DC2
00016398 117C 0001 0038             		move.b	#1,$38(a0)
0001639E                            
0001639E                            loc_15DB4:
0001639E 3028 003C                  		move.w	$3C(a0),d0
000163A2 B068 003A                  		cmp.w	$3A(a0),d0
000163A6 6700                       		beq.s	loc_15DE0
000163A8 5468 003A                  		addq.w	#2,$3A(a0)
000163AC                            
000163AC                            loc_15DC2:
000163AC 3028 003A                  		move.w	$3A(a0),d0
000163B0 0828 0000 0022             		btst	#0,$22(a0)
000163B6 6700                       		beq.s	loc_15DD4
000163B8 4440                       		neg.w	d0
000163BA 0640 0080                  		addi.w	#$80,d0
000163BE                            
000163BE                            loc_15DD4:
000163BE 3228 0034                  		move.w	$34(a0),d1
000163C2 9240                       		sub.w	d0,d1
000163C4 3141 0008                  		move.w	d1,8(a0)
000163C8 4E75                       		rts	
000163CA                            ; ===========================================================================
000163CA                            
000163CA                            loc_15DE0:
000163CA 5228 0028                  		addq.b	#1,$28(a0)
000163CE 317C 00B4 0036             		move.w	#$B4,$36(a0)
000163D4 4228 0038                  		clr.b	$38(a0)
000163D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163DC 7000                       		moveq	#0,d0
000163DE 1028 0023                  		move.b	$23(a0),d0
000163E2 67C8                       		beq.s	loc_15DC2
000163E4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000163EA 60C0                       		bra.s	loc_15DC2
000163EC                            ; ===========================================================================
000163EC                            
000163EC                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000163EC 4A28 0038                  		tst.b	$38(a0)
000163F0 6600                       		bne.s	loc_15E14
000163F2 5368 0036                  		subq.w	#1,$36(a0)
000163F6 6600                       		bne.s	loc_15E1E
000163F8 117C 0001 0038             		move.b	#1,$38(a0)
000163FE                            
000163FE                            loc_15E14:
000163FE 4A68 003A                  		tst.w	$3A(a0)
00016402 6700                       		beq.s	loc_15E3C
00016404 5568 003A                  		subq.w	#2,$3A(a0)
00016408                            
00016408                            loc_15E1E:
00016408 3028 003A                  		move.w	$3A(a0),d0
0001640C 0828 0000 0022             		btst	#0,$22(a0)
00016412 6700                       		beq.s	loc_15E30
00016414 4440                       		neg.w	d0
00016416 0640 0080                  		addi.w	#$80,d0
0001641A                            
0001641A                            loc_15E30:
0001641A 3228 0034                  		move.w	$34(a0),d1
0001641E 9240                       		sub.w	d0,d1
00016420 3141 0008                  		move.w	d1,8(a0)
00016424 4E75                       		rts	
00016426                            ; ===========================================================================
00016426                            
00016426                            loc_15E3C:
00016426 5328 0028                  		subq.b	#1,$28(a0)
0001642A 4228 0038                  		clr.b	$38(a0)
0001642E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016432 7000                       		moveq	#0,d0
00016434 1028 0023                  		move.b	$23(a0),d0
00016438 67CE                       		beq.s	loc_15E1E
0001643A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016440 60C6                       		bra.s	loc_15E1E
00016442                            ; ===========================================================================
00016442                            
00016442                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016442 4A28 0038                  		tst.b	$38(a0)
00016446 6600                       		bne.s	loc_15E7C
00016448 4A68 003A                  		tst.w	$3A(a0)
0001644C 6700                       		beq.s	loc_15E6A
0001644E 5368 003A                  		subq.w	#1,$3A(a0)
00016452 6000                       		bra.s	loc_15E8E
00016454                            ; ===========================================================================
00016454                            
00016454                            loc_15E6A:
00016454 5368 0036                  		subq.w	#1,$36(a0)
00016458 6A00                       		bpl.s	loc_15E8E
0001645A 317C 003C 0036             		move.w	#$3C,$36(a0)
00016460 117C 0001 0038             		move.b	#1,$38(a0)
00016466                            
00016466                            loc_15E7C:
00016466 5068 003A                  		addq.w	#8,$3A(a0)
0001646A 3028 003A                  		move.w	$3A(a0),d0
0001646E B068 003C                  		cmp.w	$3C(a0),d0
00016472 6600                       		bne.s	loc_15E8E
00016474 4228 0038                  		clr.b	$38(a0)
00016478                            
00016478                            loc_15E8E:
00016478 3028 003A                  		move.w	$3A(a0),d0
0001647C 0828 0000 0022             		btst	#0,$22(a0)
00016482 6700                       		beq.s	loc_15EA0
00016484 4440                       		neg.w	d0
00016486 0640 0038                  		addi.w	#$38,d0
0001648A                            
0001648A                            loc_15EA0:
0001648A 3228 0030                  		move.w	$30(a0),d1
0001648E D240                       		add.w	d0,d1
00016490 3141 000C                  		move.w	d1,$C(a0)
00016494 4E75                       		rts	
00016496                            ; ===========================================================================
00016496                            
00016496                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016496 4A28 0038                  		tst.b	$38(a0)
0001649A 6600                       		bne.s	loc_15ED0
0001649C 4A68 003A                  		tst.w	$3A(a0)
000164A0 6700                       		beq.s	loc_15EBE
000164A2 5168 003A                  		subq.w	#8,$3A(a0)
000164A6 6000                       		bra.s	loc_15EF0
000164A8                            ; ===========================================================================
000164A8                            
000164A8                            loc_15EBE:
000164A8 5368 0036                  		subq.w	#1,$36(a0)
000164AC 6A00                       		bpl.s	loc_15EF0
000164AE 317C 003C 0036             		move.w	#$3C,$36(a0)
000164B4 117C 0001 0038             		move.b	#1,$38(a0)
000164BA                            
000164BA                            loc_15ED0:
000164BA 3028 003A                  		move.w	$3A(a0),d0
000164BE B068 003C                  		cmp.w	$3C(a0),d0
000164C2 6700                       		beq.s	loc_15EE0
000164C4 5068 003A                  		addq.w	#8,$3A(a0)
000164C8 6000                       		bra.s	loc_15EF0
000164CA                            ; ===========================================================================
000164CA                            
000164CA                            loc_15EE0:
000164CA 5368 0036                  		subq.w	#1,$36(a0)
000164CE 6A00                       		bpl.s	loc_15EF0
000164D0 317C 003C 0036             		move.w	#$3C,$36(a0)
000164D6 4228 0038                  		clr.b	$38(a0)
000164DA                            
000164DA                            loc_15EF0:
000164DA 3028 003A                  		move.w	$3A(a0),d0
000164DE 0828 0000 0022             		btst	#0,$22(a0)
000164E4 6700                       		beq.s	loc_15F02
000164E6 4440                       		neg.w	d0
000164E8 0640 0038                  		addi.w	#$38,d0
000164EC                            
000164EC                            loc_15F02:
000164EC 3228 0030                  		move.w	$30(a0),d1
000164F0 D240                       		add.w	d0,d1
000164F2 3141 000C                  		move.w	d1,$C(a0)
000164F6 4E75                       		rts	
000164F8                            ; ===========================================================================
000164F8                            
000164F8                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000164F8 4A28 0038                  		tst.b	$38(a0)
000164FC 6600                       		bne.s	loc_15F3E
000164FE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016502 7000                       		moveq	#0,d0
00016504 1028 003E                  		move.b	$3E(a0),d0
00016508 0832 0000 0000             		btst	#0,(a2,d0.w)
0001650E 6700                       		beq.s	locret_15F5C
00016510 117C 0001 0038             		move.b	#1,$38(a0)
00016516 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001651A 7000                       		moveq	#0,d0
0001651C 1028 0023                  		move.b	$23(a0),d0
00016520 6700                       		beq.s	loc_15F3E
00016522 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016528                            
00016528                            loc_15F3E:
00016528 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016530 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016538 3168 0008 0034             		move.w	8(a0),$34(a0)
0001653E 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016544 6700                       		beq.s	loc_15F5E
00016546                            
00016546                            locret_15F5C:
00016546 4E75                       		rts	
00016548                            ; ===========================================================================
00016548                            
00016548                            loc_15F5E:
00016548 4228 0028                  		clr.b	$28(a0)
0001654C 4228 0038                  		clr.b	$38(a0)
00016550 4E75                       		rts	
00016552                            ; ===========================================================================
00016552                            ; ---------------------------------------------------------------------------
00016552                            ; Sprite mappings - stomper and	platforms (SBZ)
00016552                            ; ---------------------------------------------------------------------------
00016552                            Map_obj6B:
00016552                            	include "_maps\obj6B.asm"
00016552                            ; ---------------------------------------------------------------------------
00016552                            ; Sprite mappings - stomper and	platforms (SBZ)
00016552                            ; ---------------------------------------------------------------------------
00016552 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016556 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001655A 0000                       		dc.w byte_15FB0-Map_obj6B
0001655C 04                         byte_15F72:	dc.b 4
0001655D F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016562 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016567 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001656C F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016571 08                         byte_15F87:	dc.b 8
00016572 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016577 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001657C E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016581 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016586 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001658B 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016590 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016595 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001659A 0E                         byte_15FB0:	dc.b $E
0001659B C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000165A0 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000165A5 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000165AA C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000165AF C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000165B4 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000165B9 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000165BE C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000165C3 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000165C8 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000165CD E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000165D2 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000165D7 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000165DC 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000165E2 00                         		even
000165E2 00                         		even
000165E2                            
000165E2                            ; ===========================================================================
000165E2                            ; ---------------------------------------------------------------------------
000165E2                            ; Object 6C - vanishing	platforms (SBZ)
000165E2                            ; ---------------------------------------------------------------------------
000165E2                            
000165E2                            Obj6C:					; XREF: Obj_Index
000165E2 7000                       		moveq	#0,d0
000165E4 1028 0024                  		move.b	$24(a0),d0
000165E8 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000165EC 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000165F0                            ; ===========================================================================
000165F0 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000165F2 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000165F4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000165F6 0000                       		dc.w loc_16068-Obj6C_Index
000165F8                            ; ===========================================================================
000165F8                            
000165F8                            Obj6C_Main:				; XREF: Obj6C_Index
000165F8 5C28 0024                  		addq.b	#6,$24(a0)
000165FC 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016604 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001660A 0028 0004 0001             		ori.b	#4,1(a0)
00016610 117C 0010 0019             		move.b	#$10,$19(a0)
00016616 117C 0004 0018             		move.b	#4,$18(a0)
0001661C 7000                       		moveq	#0,d0
0001661E 1028 0028                  		move.b	$28(a0),d0	; get object type
00016622 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016626 5240                       		addq.w	#1,d0		; add 1
00016628 EF48                       		lsl.w	#7,d0		; multiply by $80
0001662A 3200                       		move.w	d0,d1
0001662C 5340                       		subq.w	#1,d0
0001662E 3140 0030                  		move.w	d0,$30(a0)
00016632 3140 0032                  		move.w	d0,$32(a0)
00016636 7000                       		moveq	#0,d0
00016638 1028 0028                  		move.b	$28(a0),d0	; get object type
0001663C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016640 0641 0080                  		addi.w	#$80,d1
00016644 C0C1                       		mulu.w	d1,d0
00016646 E088                       		lsr.l	#8,d0
00016648 3140 0036                  		move.w	d0,$36(a0)
0001664C 5341                       		subq.w	#1,d1
0001664E 3141 0038                  		move.w	d1,$38(a0)
00016652                            
00016652                            loc_16068:				; XREF: Obj6C_Index
00016652 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016656 9068 0036                  		sub.w	$36(a0),d0
0001665A C068 0038                  		and.w	$38(a0),d0
0001665E 6600                       		bne.s	Obj6C_Animate
00016660 5928 0024                  		subq.b	#4,$24(a0)
00016664 6000                       		bra.s	Obj6C_Vanish
00016666                            ; ===========================================================================
00016666                            
00016666                            Obj6C_Animate:
00016666 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001666C 4EB9 0000 AC42             		jsr	AnimateSprite
00016672 6000 95DC                  		bra.w	MarkObjGone
00016676                            ; ===========================================================================
00016676                            
00016676                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016676 5368 0030                  		subq.w	#1,$30(a0)
0001667A 6A00                       		bpl.s	loc_160AA
0001667C 317C 007F 0030             		move.w	#127,$30(a0)
00016682 4A28 001C                  		tst.b	$1C(a0)
00016686 6700                       		beq.s	loc_160A4
00016688 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001668E                            
0001668E                            loc_160A4:
0001668E 0868 0000 001C             		bchg	#0,$1C(a0)
00016694                            
00016694                            loc_160AA:
00016694 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001669A 4EB9 0000 AC42             		jsr	AnimateSprite
000166A0 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000166A6 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000166A8 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000166AE 6600                       		bne.s	loc_160D6
000166B0 7200                       		moveq	#0,d1
000166B2 1228 0019                  		move.b	$19(a0),d1
000166B6 4EB9 0000 789E             		jsr	(PlatformObject).l
000166BC 6000 9592                  		bra.w	MarkObjGone
000166C0                            ; ===========================================================================
000166C0                            
000166C0                            loc_160D6:
000166C0 7200                       		moveq	#0,d1
000166C2 1228 0019                  		move.b	$19(a0),d1
000166C6 4EB9 0000 7A12             		jsr	(ExitPlatform).l
000166CC 3428 0008                  		move.w	8(a0),d2
000166D0 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
000166D6 6000 9578                  		bra.w	MarkObjGone
000166DA                            ; ===========================================================================
000166DA                            
000166DA                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000166DA 0828 0003 0022             		btst	#3,$22(a0)
000166E0 6700                       		beq.s	Obj6C_Display
000166E2 43F8 D000                  		lea	($FFFFD000).w,a1
000166E6 08A9 0003 0022             		bclr	#3,$22(a1)
000166EC 08A8 0003 0022             		bclr	#3,$22(a0)
000166F2 117C 0002 0024             		move.b	#2,$24(a0)
000166F8 4228 0025                  		clr.b	$25(a0)
000166FC                            
000166FC                            Obj6C_Display:
000166FC 6000 9552                  		bra.w	MarkObjGone
00016700                            ; ===========================================================================
00016700                            Ani_obj6C:
00016700                            	include "_anim\obj6C.asm"
00016700                            ; ---------------------------------------------------------------------------
00016700                            ; Animation script - vanishing platforms (SBZ)
00016700                            ; ---------------------------------------------------------------------------
00016700 0000                       		dc.w byte_1611A-Ani_obj6C
00016702 0000                       		dc.w byte_16122-Ani_obj6C
00016704 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001670C 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016714                            		even
00016714                            		even
00016714                            
00016714                            ; ---------------------------------------------------------------------------
00016714                            ; Sprite mappings - vanishing platforms	(SBZ)
00016714                            ; ---------------------------------------------------------------------------
00016714                            Map_obj6C:
00016714                            	include "_maps\obj6C.asm"
00016714                            ; ---------------------------------------------------------------------------
00016714                            ; Sprite mappings - vanishing platforms	(SBZ)
00016714                            ; ---------------------------------------------------------------------------
00016714 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016718 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001671C 01                         byte_16132:	dc.b 1
0001671D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016722 01                         byte_16138:	dc.b 1
00016723 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016728 01                         byte_1613E:	dc.b 1
00016729 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001672E 00                         byte_16144:	dc.b 0
00016730 00                         		even
00016730 00                         		even
00016730                            
00016730                            ; ===========================================================================
00016730                            ; ---------------------------------------------------------------------------
00016730                            ; Object 6E - electrocution orbs (SBZ)
00016730                            ; ---------------------------------------------------------------------------
00016730                            
00016730                            Obj6E:					; XREF: Obj_Index
00016730 7000                       		moveq	#0,d0
00016732 1028 0024                  		move.b	$24(a0),d0
00016736 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001673A 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001673E                            ; ===========================================================================
0001673E 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016740 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016742                            ; ===========================================================================
00016742                            
00016742                            Obj6E_Main:				; XREF: Obj6E_Index
00016742 5428 0024                  		addq.b	#2,$24(a0)
00016746 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001674E 317C 047E 0002             		move.w	#$47E,2(a0)
00016754 0028 0004 0001             		ori.b	#4,1(a0)
0001675A 117C 0028 0019             		move.b	#$28,$19(a0)
00016760 7000                       		moveq	#0,d0
00016762 1028 0028                  		move.b	$28(a0),d0	; read object type
00016766 E948                       		lsl.w	#4,d0		; multiply by $10
00016768 5340                       		subq.w	#1,d0
0001676A 3140 0034                  		move.w	d0,$34(a0)
0001676E                            
0001676E                            Obj6E_Shock:				; XREF: Obj6E_Index
0001676E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016772 C068 0034                  		and.w	$34(a0),d0
00016776 6600                       		bne.s	Obj6E_Animate
00016778 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001677E 4A28 0001                  		tst.b	1(a0)
00016782 6A00                       		bpl.s	Obj6E_Animate
00016784 303C 00B1                  		move.w	#$B1,d0
00016788 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
0001678E                            
0001678E                            Obj6E_Animate:
0001678E 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016794 4EB9 0000 AC42             		jsr	AnimateSprite
0001679A 117C 0000 0020             		move.b	#0,$20(a0)
000167A0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000167A6 6600                       		bne.s	Obj6E_Display	; if not, branch
000167A8 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000167AE                            
000167AE                            Obj6E_Display:
000167AE 6000 94A0                  		bra.w	MarkObjGone
000167B2                            ; ===========================================================================
000167B2                            Ani_obj6E:
000167B2                            	include "_anim\obj6E.asm"
000167B2                            ; ---------------------------------------------------------------------------
000167B2                            ; Animation script - electrocution orbs (SBZ)
000167B2                            ; ---------------------------------------------------------------------------
000167B2 0000                       		dc.w byte_161CC-Ani_obj6E
000167B4 0000                       		dc.w byte_161D0-Ani_obj6E
000167B6 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000167BA 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000167CA                            		even
000167CA                            		even
000167CA                            
000167CA                            ; ---------------------------------------------------------------------------
000167CA                            ; Sprite mappings - electrocution orbs (SBZ)
000167CA                            ; ---------------------------------------------------------------------------
000167CA                            Map_obj6E:
000167CA                            	include "_maps\obj6E.asm"
000167CA                            Map_26ed:
000167CA 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
000167CC 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
000167CE 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
000167D0 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
000167D2 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
000167D4 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
000167D6 01                         Map_26ed_C: 	dc.b $1
000167D7 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000167DC 02                         Map_26ed_12: 	dc.b $2
000167DD F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000167E2 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000167E7 06                         Map_26ed_1D: 	dc.b $6
000167E8 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000167ED 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000167F2 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000167F7 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000167FC F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016801 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016806 08                         Map_26ed_3C: 	dc.b $8
00016807 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001680C 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016811 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016816 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001681B F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016820 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016825 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001682A F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001682F 06                         Map_26ed_65: 	dc.b $6
00016830 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016835 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001683A F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001683F F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016844 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016849 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001684E 04                         Map_26ed_84: 	dc.b $4
0001684F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016854 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016859 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001685E F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016864 00                         	even
00016864 00                         	even
00016864                            
00016864                            ; ===========================================================================
00016864                            ; ---------------------------------------------------------------------------
00016864                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016864                            ; ---------------------------------------------------------------------------
00016864                            
00016864                            Obj6F:					; XREF: Obj_Index
00016864 7000                       		moveq	#0,d0
00016866 1028 0024                  		move.b	$24(a0),d0
0001686A 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001686E 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016872 3028 0030                  		move.w	$30(a0),d0
00016876 0240 FF80                  		andi.w	#$FF80,d0
0001687A 3238 F700                  		move.w	($FFFFF700).w,d1
0001687E 0441 0080                  		subi.w	#$80,d1
00016882 0241 FF80                  		andi.w	#$FF80,d1
00016886 9041                       		sub.w	d1,d0
00016888 0C40 0280                  		cmpi.w	#$280,d0
0001688C 6200                       		bhi.s	loc_1629A
0001688E                            
0001688E                            Obj6F_Display:
0001688E 4EF9 0000 DBA8             		jmp	DisplaySprite
00016894                            ; ===========================================================================
00016894                            
00016894                            loc_1629A:
00016894 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001689A 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001689C 0C40 FF80                  		cmpi.w	#-$80,d0
000168A0 64EC                       		bcc.s	Obj6F_Display
000168A2                            
000168A2                            Obj6F_Act1or2:
000168A2 1028 002F                  		move.b	$2F(a0),d0
000168A6 6A00                       		bpl.s	Obj6F_Delete
000168A8 0240 007F                  		andi.w	#$7F,d0
000168AC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000168B0 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000168B6                            
000168B6                            Obj6F_Delete:
000168B6 4EF9 0000 DBE4             		jmp	DeleteObject
000168BC                            ; ===========================================================================
000168BC 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000168BE 0000                       		dc.w loc_163D8-Obj6F_Index
000168C0                            ; ===========================================================================
000168C0                            
000168C0                            Obj6F_Main:				; XREF: Obj6F_Index
000168C0 1028 0028                  		move.b	$28(a0),d0
000168C4 6B00 0000                  		bmi.w	loc_16380
000168C8 5428 0024                  		addq.b	#2,$24(a0)
000168CC 217C 0001 5F24 0004        		move.l	#Map_obj69a,4(a0)
000168D4 317C 04DF 0002             		move.w	#$4DF,2(a0)
000168DA 117C 0010 0019             		move.b	#$10,$19(a0)
000168E0 0028 0004 0001             		ori.b	#4,1(a0)
000168E6 117C 0004 0018             		move.b	#4,$18(a0)
000168EC 7000                       		moveq	#0,d0
000168EE 1028 0028                  		move.b	$28(a0),d0
000168F2 3200                       		move.w	d0,d1
000168F4 E648                       		lsr.w	#3,d0
000168F6 0240 001E                  		andi.w	#$1E,d0
000168FA 45FA 0000                  		lea	off_164A6(pc),a2
000168FE D4F2 0000                  		adda.w	(a2,d0.w),a2
00016902 315A 0038                  		move.w	(a2)+,$38(a0)
00016906 315A 0030                  		move.w	(a2)+,$30(a0)
0001690A 214A 003C                  		move.l	a2,$3C(a0)
0001690E 0241 000F                  		andi.w	#$F,d1
00016912 E549                       		lsl.w	#2,d1
00016914 1141 0038                  		move.b	d1,$38(a0)
00016918 117C 0004 003A             		move.b	#4,$3A(a0)
0001691E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016922 6700                       		beq.s	loc_16356
00016924 117C 0001 003B             		move.b	#1,$3B(a0)
0001692A 4428 003A                  		neg.b	$3A(a0)
0001692E 7200                       		moveq	#0,d1
00016930 1228 0038                  		move.b	$38(a0),d1
00016934 D228 003A                  		add.b	$3A(a0),d1
00016938 B228 0039                  		cmp.b	$39(a0),d1
0001693C 6500                       		bcs.s	loc_16352
0001693E 1001                       		move.b	d1,d0
00016940 7200                       		moveq	#0,d1
00016942 4A00                       		tst.b	d0
00016944 6A00                       		bpl.s	loc_16352
00016946 1228 0039                  		move.b	$39(a0),d1
0001694A 5901                       		subq.b	#4,d1
0001694C                            
0001694C                            loc_16352:
0001694C 1141 0038                  		move.b	d1,$38(a0)
00016950                            
00016950                            loc_16356:
00016950 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016956 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001695C 4A41                       		tst.w	d1
0001695E 6600                       		bne.s	loc_1636C
00016960 117C 0001 001C             		move.b	#1,$1C(a0)
00016966                            
00016966                            loc_1636C:
00016966 0C41 0008                  		cmpi.w	#8,d1
0001696A 6600                       		bne.s	loc_16378
0001696C 117C 0000 001C             		move.b	#0,$1C(a0)
00016972                            
00016972                            loc_16378:
00016972 6100 C174                  		bsr.w	Obj63_ChangeDir
00016976 6000 0000                  		bra.w	loc_163D8
0001697A                            ; ===========================================================================
0001697A                            
0001697A                            loc_16380:				; XREF: Obj6F_Main
0001697A 1140 002F                  		move.b	d0,$2F(a0)
0001697E 0240 007F                  		andi.w	#$7F,d0
00016982 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016986 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001698C 6700                       		beq.s	loc_1639A
0001698E 4EF9 0000 DBE4             		jmp	DeleteObject
00016994                            ; ===========================================================================
00016994                            
00016994                            loc_1639A:
00016994 D040                       		add.w	d0,d0
00016996 0240 001E                  		andi.w	#$1E,d0
0001699A 0640 0080                  		addi.w	#$80,d0
0001699E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000169A4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000169A8 321A                       		move.w	(a2)+,d1
000169AA 2248                       		movea.l	a0,a1
000169AC 6000                       		bra.s	Obj6F_LoadPform
000169AE                            ; ===========================================================================
000169AE                            
000169AE                            Obj6F_Loop:
000169AE 4EB9 0000 E02E             		jsr	SingleObjLoad
000169B4 6600                       		bne.s	loc_163D0
000169B6                            
000169B6                            Obj6F_LoadPform:			; XREF: loc_1639A
000169B6 12BC 006F                  		move.b	#$6F,0(a1)
000169BA 335A 0008                  		move.w	(a2)+,8(a1)
000169BE 335A 000C                  		move.w	(a2)+,$C(a1)
000169C2 301A                       		move.w	(a2)+,d0
000169C4 1340 0028                  		move.b	d0,$28(a1)
000169C8                            
000169C8                            loc_163D0:
000169C8 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000169CC                            
000169CC 588F                       		addq.l	#4,sp
000169CE 4E75                       		rts	
000169D0                            ; ===========================================================================
000169D0                            
000169D0                            loc_163D8:				; XREF: Obj6F_Index
000169D0 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000169D6 4EB9 0000 AC42             		jsr	AnimateSprite
000169DC 4A28 001A                  		tst.b	$1A(a0)
000169E0 6600                       		bne.s	loc_16404
000169E2 3F28 0008                  		move.w	8(a0),-(sp)
000169E6 6100 0000                  		bsr.w	loc_16424
000169EA 323C 001B                  		move.w	#$1B,d1
000169EE 343C 0007                  		move.w	#7,d2
000169F2 3602                       		move.w	d2,d3
000169F4 5243                       		addq.w	#1,d3
000169F6 381F                       		move.w	(sp)+,d4
000169F8 6000 957E                  		bra.w	SolidObject
000169FC                            ; ===========================================================================
000169FC                            
000169FC                            loc_16404:
000169FC 0828 0003 0022             		btst	#3,$22(a0)
00016A02 6700                       		beq.s	loc_16420
00016A04 43F8 D000                  		lea	($FFFFD000).w,a1
00016A08 08A9 0003 0022             		bclr	#3,$22(a1)
00016A0E 08A8 0003 0022             		bclr	#3,$22(a0)
00016A14 4228 0025                  		clr.b	$25(a0)
00016A18                            
00016A18                            loc_16420:
00016A18 6000 0002                  		bra.w	*+4
00016A1C                            
00016A1C                            loc_16424:
00016A1C 3028 0008                  		move.w	8(a0),d0
00016A20 B068 0034                  		cmp.w	$34(a0),d0
00016A24 6600                       		bne.s	loc_16484
00016A26 3028 000C                  		move.w	$C(a0),d0
00016A2A B068 0036                  		cmp.w	$36(a0),d0
00016A2E 6600                       		bne.s	loc_16484
00016A30 7200                       		moveq	#0,d1
00016A32 1228 0038                  		move.b	$38(a0),d1
00016A36 D228 003A                  		add.b	$3A(a0),d1
00016A3A B228 0039                  		cmp.b	$39(a0),d1
00016A3E 6500                       		bcs.s	loc_16456
00016A40 1001                       		move.b	d1,d0
00016A42 7200                       		moveq	#0,d1
00016A44 4A00                       		tst.b	d0
00016A46 6A00                       		bpl.s	loc_16456
00016A48 1228 0039                  		move.b	$39(a0),d1
00016A4C 5901                       		subq.b	#4,d1
00016A4E                            
00016A4E                            loc_16456:
00016A4E 1141 0038                  		move.b	d1,$38(a0)
00016A52 2268 003C                  		movea.l	$3C(a0),a1
00016A56 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016A5C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016A62 4A41                       		tst.w	d1
00016A64 6600                       		bne.s	loc_16474
00016A66 117C 0001 001C             		move.b	#1,$1C(a0)
00016A6C                            
00016A6C                            loc_16474:
00016A6C 0C41 0008                  		cmpi.w	#8,d1
00016A70 6600                       		bne.s	loc_16480
00016A72 117C 0000 001C             		move.b	#0,$1C(a0)
00016A78                            
00016A78                            loc_16480:
00016A78 6100 C06E                  		bsr.w	Obj63_ChangeDir
00016A7C                            
00016A7C                            loc_16484:
00016A7C 4EF9 0000 DB82             		jmp	SpeedToPos
00016A82                            ; ===========================================================================
00016A82                            Ani_obj6F:
00016A82                            	include "_anim\obj6F.asm"
00016A82                            ; ---------------------------------------------------------------------------
00016A82                            ; Animation script - platform on conveyor belt (SBZ)
00016A82                            ; ---------------------------------------------------------------------------
00016A82 0000                       		dc.w byte_1648E-Ani_obj6F
00016A84 0000                       		dc.w byte_164A2-Ani_obj6F
00016A86 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016A93 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016A9A 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016A9E 00                         		even
00016A9E 00                         		even
00016A9E                            
00016A9E 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016AA4 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016AAA 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016ABE 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016AD2 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016AE6 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016AFA 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016B0E 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016B22                            ; ===========================================================================
00016B22                            ; ---------------------------------------------------------------------------
00016B22                            ; Object 70 - large girder block (SBZ)
00016B22                            ; ---------------------------------------------------------------------------
00016B22                            
00016B22                            Obj70:					; XREF: Obj_Index
00016B22 7000                       		moveq	#0,d0
00016B24 1028 0024                  		move.b	$24(a0),d0
00016B28 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016B2C 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016B30                            ; ===========================================================================
00016B30 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016B32 0000                       		dc.w Obj70_Action-Obj70_Index
00016B34                            ; ===========================================================================
00016B34                            
00016B34                            Obj70_Main:				; XREF: Obj70_Index
00016B34 5428 0024                  		addq.b	#2,$24(a0)
00016B38 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016B40 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016B46 0028 0004 0001             		ori.b	#4,1(a0)
00016B4C 117C 0004 0018             		move.b	#4,$18(a0)
00016B52 117C 0060 0019             		move.b	#$60,$19(a0)
00016B58 117C 0018 0016             		move.b	#$18,$16(a0)
00016B5E 3168 0008 0032             		move.w	8(a0),$32(a0)
00016B64 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016B6A 6100 0000                  		bsr.w	Obj70_Move2
00016B6E                            
00016B6E                            Obj70_Action:				; XREF: Obj70_Index
00016B6E 3F28 0008                  		move.w	8(a0),-(sp)
00016B72 4A68 003A                  		tst.w	$3A(a0)
00016B76 6700                       		beq.s	Obj70_Move
00016B78 5368 003A                  		subq.w	#1,$3A(a0)
00016B7C 6600                       		bne.s	Obj70_Solid
00016B7E                            
00016B7E                            Obj70_Move:
00016B7E 4EB9 0000 DB82             		jsr	SpeedToPos
00016B84 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016B88 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016B8A 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016B8E                            
00016B8E                            Obj70_Solid:
00016B8E 381F                       		move.w	(sp)+,d4
00016B90 4A28 0001                  		tst.b	1(a0)
00016B94 6A00                       		bpl.s	Obj70_ChkDel
00016B96 7200                       		moveq	#0,d1
00016B98 1228 0019                  		move.b	$19(a0),d1
00016B9C 0641 000B                  		addi.w	#$B,d1
00016BA0 7400                       		moveq	#0,d2
00016BA2 1428 0016                  		move.b	$16(a0),d2
00016BA6 3602                       		move.w	d2,d3
00016BA8 5243                       		addq.w	#1,d3
00016BAA 6100 93CC                  		bsr.w	SolidObject
00016BAE                            
00016BAE                            Obj70_ChkDel:
00016BAE 3028 0032                  		move.w	$32(a0),d0
00016BB2 0240 FF80                  		andi.w	#$FF80,d0
00016BB6 3238 F700                  		move.w	($FFFFF700).w,d1
00016BBA 0441 0080                  		subi.w	#$80,d1
00016BBE 0241 FF80                  		andi.w	#$FF80,d1
00016BC2 9041                       		sub.w	d1,d0
00016BC4 0C40 0280                  		cmpi.w	#$280,d0
00016BC8 6200                       		bhi.s	Obj70_Delete
00016BCA 4EF9 0000 DBA8             		jmp	DisplaySprite
00016BD0                            ; ===========================================================================
00016BD0                            
00016BD0                            Obj70_Delete:
00016BD0 4EF9 0000 DBE4             		jmp	DeleteObject
00016BD6                            ; ===========================================================================
00016BD6                            
00016BD6                            Obj70_Move2:				; XREF: Obj70_Main
00016BD6 1028 0038                  		move.b	$38(a0),d0
00016BDA 0240 0018                  		andi.w	#$18,d0
00016BDE 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016BE4 43F1 0000                  		lea	(a1,d0.w),a1
00016BE8 3159 0010                  		move.w	(a1)+,$10(a0)
00016BEC 3159 0012                  		move.w	(a1)+,$12(a0)
00016BF0 3159 0034                  		move.w	(a1)+,$34(a0)
00016BF4 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016BF8 317C 0007 003A             		move.w	#7,$3A(a0)
00016BFE 4E75                       		rts	
00016C00                            ; ===========================================================================
00016C00 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016C08 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016C10 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016C18 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016C20                            ; ---------------------------------------------------------------------------
00016C20                            ; Sprite mappings - large girder block (SBZ)
00016C20                            ; ---------------------------------------------------------------------------
00016C20                            Map_obj70:
00016C20                            	include "_maps\obj70.asm"
00016C20                            ; ---------------------------------------------------------------------------
00016C20                            ; Sprite mappings - large girder block (SBZ)
00016C20                            ; ---------------------------------------------------------------------------
00016C20 0000                       		dc.w byte_1662A-Map_obj70
00016C22 0C                         byte_1662A:	dc.b $C
00016C23 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016C28 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016C2D E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016C32 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016C37 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016C3C 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016C41 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016C46 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016C4B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016C50 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016C55 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016C5A 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016C60 00                         		even
00016C60 00                         		even
00016C60                            
00016C60                            ; ===========================================================================
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            ; Object 72 - teleporter (SBZ)
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            
00016C60                            Obj72:					; XREF: Obj_Index
00016C60 7000                       		moveq	#0,d0
00016C62 1028 0024                  		move.b	$24(a0),d0
00016C66 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016C6A 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016C6E 3028 0008                  		move.w	8(a0),d0
00016C72 0240 FF80                  		andi.w	#$FF80,d0
00016C76 3238 F700                  		move.w	($FFFFF700).w,d1
00016C7A 0441 0080                  		subi.w	#$80,d1
00016C7E 0241 FF80                  		andi.w	#$FF80,d1
00016C82 9041                       		sub.w	d1,d0
00016C84 0C40 0280                  		cmpi.w	#$280,d0
00016C88 6200                       		bhi.s	Obj72_Delete
00016C8A 4E75                       		rts	
00016C8C                            ; ===========================================================================
00016C8C                            
00016C8C                            Obj72_Delete:
00016C8C 4EF9 0000 DBE4             		jmp	DeleteObject
00016C92                            ; ===========================================================================
00016C92 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016C94 0000                       		dc.w loc_166C8-Obj72_Index
00016C96 0000                       		dc.w loc_1675E-Obj72_Index
00016C98 0000                       		dc.w loc_16798-Obj72_Index
00016C9A                            ; ===========================================================================
00016C9A                            
00016C9A                            Obj72_Main:				; XREF: Obj72_Index
00016C9A 5428 0024                  		addq.b	#2,$24(a0)
00016C9E 1028 0028                  		move.b	$28(a0),d0
00016CA2 D040                       		add.w	d0,d0
00016CA4 0240 001E                  		andi.w	#$1E,d0
00016CA8 45FA 0000                  		lea	Obj72_Data(pc),a2
00016CAC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CB0 315A 003A                  		move.w	(a2)+,$3A(a0)
00016CB4 214A 003C                  		move.l	a2,$3C(a0)
00016CB8 315A 0036                  		move.w	(a2)+,$36(a0)
00016CBC 315A 0038                  		move.w	(a2)+,$38(a0)
00016CC0                            
00016CC0                            loc_166C8:				; XREF: Obj72_Index
00016CC0 43F8 D000                  		lea	($FFFFD000).w,a1
00016CC4 3029 0008                  		move.w	8(a1),d0
00016CC8 9068 0008                  		sub.w	8(a0),d0
00016CCC 0828 0000 0022             		btst	#0,$22(a0)
00016CD2 6700                       		beq.s	loc_166E0
00016CD4 0640 000F                  		addi.w	#$F,d0
00016CD8                            
00016CD8                            loc_166E0:
00016CD8 0C40 0010                  		cmpi.w	#$10,d0
00016CDC 6400                       		bcc.s	locret_1675C
00016CDE 3229 000C                  		move.w	$C(a1),d1
00016CE2 9268 000C                  		sub.w	$C(a0),d1
00016CE6 0641 0020                  		addi.w	#$20,d1
00016CEA 0C41 0040                  		cmpi.w	#$40,d1
00016CEE 6400                       		bcc.s	locret_1675C
00016CF0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016CF4 6600                       		bne.s	locret_1675C
00016CF6 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016CFC 6600                       		bne.s	loc_1670E
00016CFE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016D04 6500                       		bcs.s	locret_1675C
00016D06                            
00016D06                            loc_1670E:
00016D06 5428 0024                  		addq.b	#2,$24(a0)
00016D0A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016D10 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016D16 337C 0800 0014             		move.w	#$800,$14(a1)
00016D1C 337C 0000 0010             		move.w	#0,$10(a1)
00016D22 337C 0000 0012             		move.w	#0,$12(a1)
00016D28 08A8 0005 0022             		bclr	#5,$22(a0)
00016D2E 08A9 0005 0022             		bclr	#5,$22(a1)
00016D34 08E9 0001 0022             		bset	#1,$22(a1)
00016D3A 3368 0008 0008             		move.w	8(a0),8(a1)
00016D40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016D46 4228 0032                  		clr.b	$32(a0)
00016D4A 303C 00BE                  		move.w	#$BE,d0
00016D4E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016D54                            
00016D54                            locret_1675C:
00016D54 4E75                       		rts	
00016D56                            ; ===========================================================================
00016D56                            
00016D56                            loc_1675E:				; XREF: Obj72_Index
00016D56 43F8 D000                  		lea	($FFFFD000).w,a1
00016D5A 1028 0032                  		move.b	$32(a0),d0
00016D5E 5428 0032                  		addq.b	#2,$32(a0)
00016D62 4EB9 0000 2C22             		jsr	(CalcSine).l
00016D68 EA40                       		asr.w	#5,d0
00016D6A 3428 000C                  		move.w	$C(a0),d2
00016D6E 9440                       		sub.w	d0,d2
00016D70 3342 000C                  		move.w	d2,$C(a1)
00016D74 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016D7A 6600                       		bne.s	locret_16796
00016D7C 6100 0000                  		bsr.w	sub_1681C
00016D80 5428 0024                  		addq.b	#2,$24(a0)
00016D84 303C 00BC                  		move.w	#$BC,d0
00016D88 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016D8E                            
00016D8E                            locret_16796:
00016D8E 4E75                       		rts	
00016D90                            ; ===========================================================================
00016D90                            
00016D90                            loc_16798:				; XREF: Obj72_Index
00016D90 588F                       		addq.l	#4,sp
00016D92 43F8 D000                  		lea	($FFFFD000).w,a1
00016D96 5328 002E                  		subq.b	#1,$2E(a0)
00016D9A 6A00                       		bpl.s	loc_167DA
00016D9C 3368 0036 0008             		move.w	$36(a0),8(a1)
00016DA2 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016DA8 7200                       		moveq	#0,d1
00016DAA 1228 003A                  		move.b	$3A(a0),d1
00016DAE 5801                       		addq.b	#4,d1
00016DB0 B228 003B                  		cmp.b	$3B(a0),d1
00016DB4 6500                       		bcs.s	loc_167C2
00016DB6 7200                       		moveq	#0,d1
00016DB8 6000                       		bra.s	loc_16800
00016DBA                            ; ===========================================================================
00016DBA                            
00016DBA                            loc_167C2:
00016DBA 1141 003A                  		move.b	d1,$3A(a0)
00016DBE 2468 003C                  		movea.l	$3C(a0),a2
00016DC2 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016DC8 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016DCE 6000 0000                  		bra.w	sub_1681C
00016DD2                            ; ===========================================================================
00016DD2                            
00016DD2                            loc_167DA:
00016DD2 2429 0008                  		move.l	8(a1),d2
00016DD6 2629 000C                  		move.l	$C(a1),d3
00016DDA 3029 0010                  		move.w	$10(a1),d0
00016DDE 48C0                       		ext.l	d0
00016DE0 E180                       		asl.l	#8,d0
00016DE2 D480                       		add.l	d0,d2
00016DE4 3029 0012                  		move.w	$12(a1),d0
00016DE8 48C0                       		ext.l	d0
00016DEA E180                       		asl.l	#8,d0
00016DEC D680                       		add.l	d0,d3
00016DEE 2342 0008                  		move.l	d2,8(a1)
00016DF2 2343 000C                  		move.l	d3,$C(a1)
00016DF6 4E75                       		rts	
00016DF8                            ; ===========================================================================
00016DF8                            
00016DF8                            loc_16800:
00016DF8 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016DFE 4228 0024                  		clr.b	$24(a0)
00016E02 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016E06 337C 0000 0010             		move.w	#0,$10(a1)
00016E0C 337C 0200 0012             		move.w	#$200,$12(a1)
00016E12 4E75                       		rts	
00016E14                            
00016E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E14                            
00016E14                            
00016E14                            sub_1681C:
00016E14 7000                       		moveq	#0,d0
00016E16 343C 1000                  		move.w	#$1000,d2
00016E1A 3028 0036                  		move.w	$36(a0),d0
00016E1E 9069 0008                  		sub.w	8(a1),d0
00016E22 6C00                       		bge.s	loc_16830
00016E24 4440                       		neg.w	d0
00016E26 4442                       		neg.w	d2
00016E28                            
00016E28                            loc_16830:
00016E28 7200                       		moveq	#0,d1
00016E2A 363C 1000                  		move.w	#$1000,d3
00016E2E 3228 0038                  		move.w	$38(a0),d1
00016E32 9269 000C                  		sub.w	$C(a1),d1
00016E36 6C00                       		bge.s	loc_16844
00016E38 4441                       		neg.w	d1
00016E3A 4443                       		neg.w	d3
00016E3C                            
00016E3C                            loc_16844:
00016E3C B240                       		cmp.w	d0,d1
00016E3E 6500                       		bcs.s	loc_1687A
00016E40 7200                       		moveq	#0,d1
00016E42 3228 0038                  		move.w	$38(a0),d1
00016E46 9269 000C                  		sub.w	$C(a1),d1
00016E4A 4841                       		swap	d1
00016E4C 83C3                       		divs.w	d3,d1
00016E4E 7000                       		moveq	#0,d0
00016E50 3028 0036                  		move.w	$36(a0),d0
00016E54 9069 0008                  		sub.w	8(a1),d0
00016E58 6700                       		beq.s	loc_16866
00016E5A 4840                       		swap	d0
00016E5C 81C1                       		divs.w	d1,d0
00016E5E                            
00016E5E                            loc_16866:
00016E5E 3340 0010                  		move.w	d0,$10(a1)
00016E62 3343 0012                  		move.w	d3,$12(a1)
00016E66 4A41                       		tst.w	d1
00016E68 6A00                       		bpl.s	loc_16874
00016E6A 4441                       		neg.w	d1
00016E6C                            
00016E6C                            loc_16874:
00016E6C 3141 002E                  		move.w	d1,$2E(a0)
00016E70 4E75                       		rts	
00016E72                            ; ===========================================================================
00016E72                            
00016E72                            loc_1687A:
00016E72 7000                       		moveq	#0,d0
00016E74 3028 0036                  		move.w	$36(a0),d0
00016E78 9069 0008                  		sub.w	8(a1),d0
00016E7C 4840                       		swap	d0
00016E7E 81C2                       		divs.w	d2,d0
00016E80 7200                       		moveq	#0,d1
00016E82 3228 0038                  		move.w	$38(a0),d1
00016E86 9269 000C                  		sub.w	$C(a1),d1
00016E8A 6700                       		beq.s	loc_16898
00016E8C 4841                       		swap	d1
00016E8E 83C0                       		divs.w	d0,d1
00016E90                            
00016E90                            loc_16898:
00016E90 3341 0012                  		move.w	d1,$12(a1)
00016E94 3342 0010                  		move.w	d2,$10(a1)
00016E98 4A40                       		tst.w	d0
00016E9A 6A00                       		bpl.s	loc_168A6
00016E9C 4440                       		neg.w	d0
00016E9E                            
00016E9E                            loc_168A6:
00016E9E 3140 002E                  		move.w	d0,$2E(a0)
00016EA2 4E75                       		rts	
00016EA4                            ; End of function sub_1681C
00016EA4                            
00016EA4                            ; ===========================================================================
00016EA4 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016EAA 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016EB0 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016EB4 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016EBA 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016EC0 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016EC6 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016ECC 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016ED2 0884 0298 0894             		dc.w $884, $298, $894
00016ED8 0270 0894 0190             		dc.w $270, $894, $190
00016EDE 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016EE4 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016EEA 1184 0498 1158             		dc.w $1184, $498, $1158
00016EF0 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016EF6 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016EFC 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016F02 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016F08 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016F0E 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016F14 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016F1A 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016F20 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016F26 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016F2C                            ; ===========================================================================
00016F2C                            ; ---------------------------------------------------------------------------
00016F2C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016F2C                            ; ---------------------------------------------------------------------------
00016F2C                            
00016F2C                            Obj78:					; XREF: Obj_Index
00016F2C 7000                       		moveq	#0,d0
00016F2E 1028 0024                  		move.b	$24(a0),d0
00016F32 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016F36 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016F3A                            ; ===========================================================================
00016F3A 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016F3C 0000                       		dc.w Obj78_Action-Obj78_Index
00016F3E 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F40 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016F42 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F44 0000                       		dc.w Obj78_Delete-Obj78_Index
00016F46 0000                       		dc.w loc_16CC0-Obj78_Index
00016F48                            ; ===========================================================================
00016F48                            
00016F48                            locret_16950:
00016F48 4E75                       		rts	
00016F4A                            ; ===========================================================================
00016F4A                            
00016F4A                            Obj78_Main:				; XREF: Obj78_Index
00016F4A 117C 0007 0016             		move.b	#7,$16(a0)
00016F50 117C 0008 0017             		move.b	#8,$17(a0)
00016F56 4EB9 0000 DB56             		jsr	ObjectFall
00016F5C 4EBA E4A6                  		jsr	ObjHitFloor
00016F60 4A41                       		tst.w	d1
00016F62 6AE4                       		bpl.s	locret_16950
00016F64 D368 000C                  		add.w	d1,$C(a0)
00016F68 4268 0012                  		clr.w	$12(a0)
00016F6C 5428 0024                  		addq.b	#2,$24(a0)
00016F70 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016F78 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016F7E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016F84 6700                       		beq.s	loc_16996
00016F86 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016F8C                            
00016F8C                            loc_16996:
00016F8C 0228 0003 0001             		andi.b	#3,1(a0)
00016F92 0028 0004 0001             		ori.b	#4,1(a0)
00016F98 1168 0001 0022             		move.b	1(a0),$22(a0)
00016F9E 117C 0004 0018             		move.b	#4,$18(a0)
00016FA4 117C 0008 0019             		move.b	#8,$19(a0)
00016FAA 117C 000B 0020             		move.b	#$B,$20(a0)
00016FB0 3428 0008                  		move.w	8(a0),d2
00016FB4 7A0C                       		moveq	#$C,d5
00016FB6 0828 0000 0022             		btst	#0,$22(a0)
00016FBC 6700                       		beq.s	loc_169CA
00016FBE 4445                       		neg.w	d5
00016FC0                            
00016FC0                            loc_169CA:
00016FC0 1C3C 0004                  		move.b	#4,d6
00016FC4 7600                       		moveq	#0,d3
00016FC6 7804                       		moveq	#4,d4
00016FC8 2448                       		movea.l	a0,a2
00016FCA 7202                       		moveq	#2,d1
00016FCC                            
00016FCC                            Obj78_LoadBody:
00016FCC 4EB9 0000 E044             		jsr	SingleObjLoad2
00016FD2 6600                       		bne.s	Obj78_QuitLoad
00016FD4 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016FD8 1346 0024                  		move.b	d6,$24(a1)
00016FDC 5406                       		addq.b	#2,d6
00016FDE 2368 0004 0004             		move.l	4(a0),4(a1)
00016FE4 3368 0002 0002             		move.w	2(a0),2(a1)
00016FEA 137C 0005 0018             		move.b	#5,$18(a1)
00016FF0 137C 0008 0019             		move.b	#8,$19(a1)
00016FF6 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016FFC D445                       		add.w	d5,d2
00016FFE 3342 0008                  		move.w	d2,8(a1)
00017002 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017008 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001700E 1368 0022 0001             		move.b	$22(a0),1(a1)
00017014 137C 0008 001A             		move.b	#8,$1A(a1)
0001701A 234A 003C                  		move.l	a2,$3C(a1)
0001701E 1344 003C                  		move.b	d4,$3C(a1)
00017022 5804                       		addq.b	#4,d4
00017024 2449                       		movea.l	a1,a2
00017026                            
00017026                            Obj78_QuitLoad:
00017026 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001702A                            
0001702A 117C 0007 002A             		move.b	#7,$2A(a0)
00017030 4228 003C                  		clr.b	$3C(a0)
00017034                            
00017034                            Obj78_Action:				; XREF: Obj78_Index
00017034 4A28 0022                  		tst.b	$22(a0)
00017038 6B00 0000                  		bmi.w	loc_16C96
0001703C 7000                       		moveq	#0,d0
0001703E 1028 0025                  		move.b	$25(a0),d0
00017042 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017046 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001704A 1228 002B                  		move.b	$2B(a0),d1
0001704E 6A00                       		bpl.s	Obj78_Display
00017050 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017056 1028 0026                  		move.b	$26(a0),d0
0001705A 0240 007F                  		andi.w	#$7F,d0
0001705E 5828 0026                  		addq.b	#4,$26(a0)
00017062 1031 0000                  		move.b	(a1,d0.w),d0
00017066 6A00                       		bpl.s	Obj78_AniHead
00017068 08A8 0007 002B             		bclr	#7,$2B(a0)
0001706E 6000                       		bra.s	Obj78_Display
00017070                            ; ===========================================================================
00017070                            
00017070                            Obj78_AniHead:
00017070 0201 0010                  		andi.b	#$10,d1
00017074 D001                       		add.b	d1,d0
00017076 1140 001A                  		move.b	d0,$1A(a0)
0001707A                            
0001707A                            Obj78_Display:
0001707A 3028 0008                  		move.w	8(a0),d0
0001707E 0240 FF80                  		andi.w	#$FF80,d0
00017082 3238 F700                  		move.w	($FFFFF700).w,d1
00017086 0441 0080                  		subi.w	#$80,d1
0001708A 0241 FF80                  		andi.w	#$FF80,d1
0001708E 9041                       		sub.w	d1,d0
00017090 0C40 0280                  		cmpi.w	#$280,d0
00017094 6200 0000                  		bhi.w	Obj78_ChkGone
00017098 4EF9 0000 DBA8             		jmp	DisplaySprite
0001709E                            ; ===========================================================================
0001709E                            
0001709E                            Obj78_ChkGone:
0001709E 45F8 FC00                  		lea	($FFFFFC00).w,a2
000170A2 7000                       		moveq	#0,d0
000170A4 1028 0023                  		move.b	$23(a0),d0
000170A8 6700                       		beq.s	loc_16ABC
000170AA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000170B0                            
000170B0                            loc_16ABC:
000170B0 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000170B6 4E75                       		rts	
000170B8                            ; ===========================================================================
000170B8                            
000170B8                            Obj78_Delete:				; XREF: Obj78_Index
000170B8 4EF9 0000 DBE4             		jmp	DeleteObject
000170BE                            ; ===========================================================================
000170BE 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000170C0 0000                       		dc.w loc_16B02-Obj78_Index2
000170C2                            ; ===========================================================================
000170C2                            
000170C2                            Obj78_Move:				; XREF: Obj78_Index2
000170C2 5328 002A                  		subq.b	#1,$2A(a0)
000170C6 6B00                       		bmi.s	Obj78_Move2
000170C8 4E75                       		rts	
000170CA                            ; ===========================================================================
000170CA                            
000170CA                            Obj78_Move2:
000170CA 5428 0025                  		addq.b	#2,$25(a0)
000170CE 117C 0010 002A             		move.b	#$10,$2A(a0)
000170D4 317C FF40 0010             		move.w	#-$C0,$10(a0)
000170DA 317C 0040 0014             		move.w	#$40,$14(a0)
000170E0 0868 0004 002B             		bchg	#4,$2B(a0)
000170E6 6600                       		bne.s	loc_16AFC
000170E8 4268 0010                  		clr.w	$10(a0)
000170EC 4468 0014                  		neg.w	$14(a0)
000170F0                            
000170F0                            loc_16AFC:
000170F0 08E8 0007 002B             		bset	#7,$2B(a0)
000170F6                            
000170F6                            loc_16B02:				; XREF: Obj78_Index2
000170F6 5328 002A                  		subq.b	#1,$2A(a0)
000170FA 6B00                       		bmi.s	loc_16B5E
000170FC 2F28 0008                  		move.l	8(a0),-(sp)
00017100 2428 0008                  		move.l	8(a0),d2
00017104 3028 0010                  		move.w	$10(a0),d0
00017108 0828 0000 0022             		btst	#0,$22(a0)
0001710E 6700                       		beq.s	loc_16B1E
00017110 4440                       		neg.w	d0
00017112                            
00017112                            loc_16B1E:
00017112 48C0                       		ext.l	d0
00017114 E180                       		asl.l	#8,d0
00017116 D480                       		add.l	d0,d2
00017118 2142 0008                  		move.l	d2,8(a0)
0001711C 4EBA E2E6                  		jsr	ObjHitFloor
00017120 241F                       		move.l	(sp)+,d2
00017122 0C41 FFF8                  		cmpi.w	#-8,d1
00017126 6D00                       		blt.s	loc_16B70
00017128 0C41 000C                  		cmpi.w	#$C,d1
0001712C 6C00                       		bge.s	loc_16B70
0001712E D368 000C                  		add.w	d1,$C(a0)
00017132 4842                       		swap	d2
00017134 B468 0008                  		cmp.w	8(a0),d2
00017138 6700                       		beq.s	locret_16B5C
0001713A 7000                       		moveq	#0,d0
0001713C 1028 003C                  		move.b	$3C(a0),d0
00017140 5228 003C                  		addq.b	#1,$3C(a0)
00017144 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001714A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001714E                            
0001714E                            locret_16B5C:
0001714E 4E75                       		rts	
00017150                            ; ===========================================================================
00017150                            
00017150                            loc_16B5E:
00017150 5528 0025                  		subq.b	#2,$25(a0)
00017154 117C 0007 002A             		move.b	#7,$2A(a0)
0001715A 317C 0000 0010             		move.w	#0,$10(a0)
00017160 4E75                       		rts	
00017162                            ; ===========================================================================
00017162                            
00017162                            loc_16B70:
00017162 2142 0008                  		move.l	d2,8(a0)
00017166 0868 0000 0022             		bchg	#0,$22(a0)
0001716C 1168 0022 0001             		move.b	$22(a0),1(a0)
00017172 7000                       		moveq	#0,d0
00017174 1028 003C                  		move.b	$3C(a0),d0
00017178 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001717E 5228 003C                  		addq.b	#1,$3C(a0)
00017182 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017188 4E75                       		rts	
0001718A                            ; ===========================================================================
0001718A                            
0001718A                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001718A 2268 003C                  		movea.l	$3C(a0),a1
0001718E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017194 6A00                       		bpl.s	Obj78_BodySeg1
00017196 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001719C 1028 0026                  		move.b	$26(a0),d0
000171A0 0240 007F                  		andi.w	#$7F,d0
000171A4 5828 0026                  		addq.b	#4,$26(a0)
000171A8 4A31 0004                  		tst.b	4(a1,d0.w)
000171AC 6A00                       		bpl.s	Obj78_AniBody
000171AE 5828 0026                  		addq.b	#4,$26(a0)
000171B2                            
000171B2                            Obj78_AniBody:
000171B2 1031 0000                  		move.b	(a1,d0.w),d0
000171B6 5000                       		addq.b	#8,d0
000171B8 1140 001A                  		move.b	d0,$1A(a0)
000171BC                            
000171BC                            Obj78_BodySeg1:				; XREF: Obj78_Index
000171BC 2268 003C                  		movea.l	$3C(a0),a1
000171C0 4A28 0022                  		tst.b	$22(a0)
000171C4 6B00 0000                  		bmi.w	loc_16C90
000171C8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171CE 1169 0025 0025             		move.b	$25(a1),$25(a0)
000171D4 6700 0000                  		beq.w	loc_16C64
000171D8 3169 0014 0014             		move.w	$14(a1),$14(a0)
000171DE 3029 0010                  		move.w	$10(a1),d0
000171E2 D069 0014                  		add.w	$14(a1),d0
000171E6 3140 0010                  		move.w	d0,$10(a0)
000171EA 2428 0008                  		move.l	8(a0),d2
000171EE 2602                       		move.l	d2,d3
000171F0 3028 0010                  		move.w	$10(a0),d0
000171F4 0828 0000 0022             		btst	#0,$22(a0)
000171FA 6700                       		beq.s	loc_16C0C
000171FC 4440                       		neg.w	d0
000171FE                            
000171FE                            loc_16C0C:
000171FE 48C0                       		ext.l	d0
00017200 E180                       		asl.l	#8,d0
00017202 D480                       		add.l	d0,d2
00017204 2142 0008                  		move.l	d2,8(a0)
00017208 4843                       		swap	d3
0001720A B668 0008                  		cmp.w	8(a0),d3
0001720E 6700                       		beq.s	loc_16C64
00017210 7000                       		moveq	#0,d0
00017212 1028 003C                  		move.b	$3C(a0),d0
00017216 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001721A 0C01 0080                  		cmpi.b	#-$80,d1
0001721E 6600                       		bne.s	loc_16C50
00017220 4843                       		swap	d3
00017222 2143 0008                  		move.l	d3,8(a0)
00017226 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001722A 0868 0000 0022             		bchg	#0,$22(a0)
00017230 1168 0022 0001             		move.b	$22(a0),1(a0)
00017236 5228 003C                  		addq.b	#1,$3C(a0)
0001723A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017240 6000                       		bra.s	loc_16C64
00017242                            ; ===========================================================================
00017242                            
00017242                            loc_16C50:
00017242 4881                       		ext.w	d1
00017244 D368 000C                  		add.w	d1,$C(a0)
00017248 5228 003C                  		addq.b	#1,$3C(a0)
0001724C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017252 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017256                            
00017256                            loc_16C64:
00017256 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001725C 6700                       		beq.s	loc_16C90
0001725E 0C11 0027                  		cmpi.b	#$27,0(a1)
00017262 6700                       		beq.s	loc_16C7C
00017264 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001726A 6600                       		bne.s	loc_16C82
0001726C                            
0001726C                            loc_16C7C:
0001726C 117C 000A 0024             		move.b	#$A,$24(a0)
00017272                            
00017272                            loc_16C82:
00017272 4EF9 0000 DBA8             		jmp	DisplaySprite
00017278                            
00017278                            ; ===========================================================================
00017278 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017280                            ; ===========================================================================
00017280                            
00017280                            loc_16C90:
00017280 08E9 0007 0022             		bset	#7,$22(a1)
00017286                            
00017286                            loc_16C96:
00017286 7000                       		moveq	#0,d0
00017288 1028 0024                  		move.b	$24(a0),d0
0001728C 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017290 0828 0000 0022             		btst	#0,$22(a0)
00017296 6700                       		beq.s	loc_16CAA
00017298 4440                       		neg.w	d0
0001729A                            
0001729A                            loc_16CAA:
0001729A 3140 0010                  		move.w	d0,$10(a0)
0001729E 317C FC00 0012             		move.w	#-$400,$12(a0)
000172A4 117C 000C 0024             		move.b	#$C,$24(a0)
000172AA 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000172B0                            
000172B0                            loc_16CC0:				; XREF: Obj78_Index
000172B0 4EB9 0000 DB56             		jsr	ObjectFall
000172B6 4A68 0012                  		tst.w	$12(a0)
000172BA 6B00                       		bmi.s	loc_16CE0
000172BC 4EBA E146                  		jsr	ObjHitFloor
000172C0 4A41                       		tst.w	d1
000172C2 6A00                       		bpl.s	loc_16CE0
000172C4 D368 000C                  		add.w	d1,$C(a0)
000172C8 317C FC00 0012             		move.w	#-$400,$12(a0)
000172CE                            
000172CE                            loc_16CE0:
000172CE 4A28 0001                  		tst.b	1(a0)
000172D2 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000172D6 4EF9 0000 DBA8             		jmp	DisplaySprite
000172DC                            ; ===========================================================================
000172DC                            Ani_obj78:
000172DC                            	include "_anim\obj78.asm"
000172DC                            ; ---------------------------------------------------------------------------
000172DC                            ; Animation script - Caterkiller enemy (uses non-standard format)
000172DC                            ; ---------------------------------------------------------------------------
000172DC 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000172EC 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000172FC 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001730C 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001731C 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001732C 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001733C 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001734C 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001735C                            	even
0001735C                            	even
0001735C                            
0001735C                            ; ---------------------------------------------------------------------------
0001735C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001735C                            ; ---------------------------------------------------------------------------
0001735C                            Map_obj78:
0001735C                            	include "_maps\obj78.asm"
0001735C                            ; ---------------------------------------------------------------------------
0001735C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001735C                            ; ---------------------------------------------------------------------------
0001735C 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017360 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017364 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017368 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001736C 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017370 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017374 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017378 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001737C 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017380 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017384 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017388 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001738C 01                         byte_16D9E:	dc.b 1
0001738D F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017392 01                         byte_16DA4:	dc.b 1
00017393 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017398 01                         byte_16DAA:	dc.b 1
00017399 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001739E 01                         byte_16DB0:	dc.b 1
0001739F EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000173A4 01                         byte_16DB6:	dc.b 1
000173A5 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000173AA 01                         byte_16DBC:	dc.b 1
000173AB ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000173B0 01                         byte_16DC2:	dc.b 1
000173B1 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000173B6 01                         byte_16DC8:	dc.b 1
000173B7 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000173BC 01                         byte_16DCE:	dc.b 1
000173BD F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000173C2 01                         byte_16DD4:	dc.b 1
000173C3 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000173C8 01                         byte_16DDA:	dc.b 1
000173C9 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000173CE 01                         byte_16DE0:	dc.b 1
000173CF F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000173D4 01                         byte_16DE6:	dc.b 1
000173D5 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000173DA 01                         byte_16DEC:	dc.b 1
000173DB F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000173E0 01                         byte_16DF2:	dc.b 1
000173E1 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000173E6 01                         byte_16DF8:	dc.b 1
000173E7 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000173EC 01                         byte_16DFE:	dc.b 1
000173ED F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000173F2 01                         byte_16E04:	dc.b 1
000173F3 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000173F8 01                         byte_16E0A:	dc.b 1
000173F9 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000173FE 01                         byte_16E10:	dc.b 1
000173FF EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017404 01                         byte_16E16:	dc.b 1
00017405 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001740A 01                         byte_16E1C:	dc.b 1
0001740B ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017410 01                         byte_16E22:	dc.b 1
00017411 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017416 01                         byte_16E28:	dc.b 1
00017417 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001741C                            		even
0001741C                            		even
0001741C                            
0001741C                            ; ===========================================================================
0001741C                            ; ---------------------------------------------------------------------------
0001741C                            ; Object 79 - lamppost
0001741C                            ; ---------------------------------------------------------------------------
0001741C                            
0001741C                            Obj79:					; XREF: Obj_Index
0001741C 7000                       		moveq	#0,d0
0001741E 1028 0024                  		move.b	$24(a0),d0
00017422 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017426 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001742A 4EFA 8824                  		jmp	MarkObjGone
0001742E                            ; ===========================================================================
0001742E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017430 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017432 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017434 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017436                            ; ===========================================================================
00017436                            
00017436                            Obj79_Main:				; XREF: Obj79_Index
00017436 5428 0024                  		addq.b	#2,$24(a0)
0001743A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017442 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017448 117C 0004 0001             		move.b	#4,1(a0)
0001744E 117C 0008 0019             		move.b	#8,$19(a0)
00017454 117C 0005 0018             		move.b	#5,$18(a0)
0001745A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001745E 7000                       		moveq	#0,d0
00017460 1028 0023                  		move.b	$23(a0),d0
00017464 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001746A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017470 6600                       		bne.s	Obj79_RedLamp
00017472 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017476 0201 007F                  		andi.b	#$7F,d1
0001747A 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001747E 0202 007F                  		andi.b	#$7F,d2
00017482 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017484 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017486                            
00017486                            Obj79_RedLamp:
00017486 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001748C 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017492 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017498 4E75                       		rts	
0001749A                            ; ===========================================================================
0001749A                            
0001749A                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001749A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001749E 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000174A2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000174A6 6B00 0000                  		bmi.w	locret_16F90
000174AA 1238 FE30                  		move.b	($FFFFFE30).w,d1
000174AE 0201 007F                  		andi.b	#$7F,d1
000174B2 1428 0028                  		move.b	$28(a0),d2
000174B6 0202 007F                  		andi.b	#$7F,d2
000174BA B202                       		cmp.b	d2,d1
000174BC 6500                       		bcs.s	Obj79_HitLamp
000174BE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000174C2 7000                       		moveq	#0,d0
000174C4 1028 0023                  		move.b	$23(a0),d0
000174C8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174CE 117C 0004 0024             		move.b	#4,$24(a0)
000174D4 117C 0003 001A             		move.b	#3,$1A(a0)
000174DA 6000 0000                  		bra.w	locret_16F90
000174DE                            ; ===========================================================================
000174DE                            
000174DE                            Obj79_HitLamp:
000174DE 3038 D008                  		move.w	($FFFFD008).w,d0
000174E2 9068 0008                  		sub.w	8(a0),d0
000174E6 5040                       		addq.w	#8,d0
000174E8 0C40 0010                  		cmpi.w	#$10,d0
000174EC 6400 0000                  		bcc.w	locret_16F90
000174F0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174F4 9068 000C                  		sub.w	$C(a0),d0
000174F8 0640 0040                  		addi.w	#$40,d0
000174FC 0C40 0068                  		cmpi.w	#$68,d0
00017500 6400                       		bcc.s	locret_16F90
00017502 303C 00A1                  		move.w	#$A1,d0
00017506 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001750C 5428 0024                  		addq.b	#2,$24(a0)
00017510 4EB9 0000 E02E             		jsr	SingleObjLoad
00017516 6600                       		bne.s	loc_16F76
00017518 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001751C 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017522 3368 0008 0030             		move.w	8(a0),$30(a1)
00017528 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001752E 0469 0018 0032             		subi.w	#$18,$32(a1)
00017534 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001753C 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017542 137C 0004 0001             		move.b	#4,1(a1)
00017548 137C 0008 0019             		move.b	#8,$19(a1)
0001754E 137C 0004 0018             		move.b	#4,$18(a1)
00017554 137C 0002 001A             		move.b	#2,$1A(a1)
0001755A 337C 0020 0036             		move.w	#$20,$36(a1)
00017560                            
00017560                            loc_16F76:
00017560 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017566 6100 0000                  		bsr.w	Obj79_StoreInfo
0001756A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001756E 7000                       		moveq	#0,d0
00017570 1028 0023                  		move.b	$23(a0),d0
00017574 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001757A                            
0001757A                            locret_16F90:
0001757A 4E75                       		rts	
0001757C                            ; ===========================================================================
0001757C                            
0001757C                            Obj79_AfterHit:				; XREF: Obj79_Index
0001757C 4E75                       		rts	
0001757E                            ; ===========================================================================
0001757E                            
0001757E                            Obj79_Twirl:				; XREF: Obj79_Index
0001757E 5368 0036                  		subq.w	#1,$36(a0)
00017582 6A00                       		bpl.s	loc_16FA0
00017584 117C 0004 0024             		move.b	#4,$24(a0)
0001758A                            
0001758A                            loc_16FA0:
0001758A 1028 0026                  		move.b	$26(a0),d0
0001758E 0428 0010 0026             		subi.b	#$10,$26(a0)
00017594 0400 0040                  		subi.b	#$40,d0
00017598 4EB9 0000 2C22             		jsr	(CalcSine).l
0001759E C3FC 0C00                  		muls.w	#$C00,d1
000175A2 4841                       		swap	d1
000175A4 D268 0030                  		add.w	$30(a0),d1
000175A8 3141 0008                  		move.w	d1,8(a0)
000175AC C1FC 0C00                  		muls.w	#$C00,d0
000175B0 4840                       		swap	d0
000175B2 D068 0032                  		add.w	$32(a0),d0
000175B6 3140 000C                  		move.w	d0,$C(a0)
000175BA 4E75                       		rts	
000175BC                            ; ===========================================================================
000175BC                            ; ---------------------------------------------------------------------------
000175BC                            ; Subroutine to	store information when you hit a lamppost
000175BC                            ; ---------------------------------------------------------------------------
000175BC                            
000175BC                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000175BC 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000175C2 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000175C8 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000175CE 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000175D4 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000175DA 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000175E0 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000175E6 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000175EC 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000175F2 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000175F8 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000175FE 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017604 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001760A 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017610 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017616 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001761C 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017622 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017628 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001762E 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017634 4E75                       		rts	
00017636                            
00017636                            ; ---------------------------------------------------------------------------
00017636                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017636                            ; ---------------------------------------------------------------------------
00017636                            
00017636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017636                            
00017636                            
00017636                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017636 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001763C 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017642 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017648 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001764E 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017654 4278 FE20                  		clr.w	($FFFFFE20).w
00017658 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001765C 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017662 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017668 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001766C 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017672 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017678 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001767E 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017684 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001768A 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017690 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017696 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001769C 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000176A2 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000176A8 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000176AE 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000176B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000176BA 6600                       		bne.s	loc_170E4
000176BC 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000176C2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000176C8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000176CE                            
000176CE                            loc_170E4:
000176CE 4A38 FE30                  		tst.b	($FFFFFE30).w
000176D2 6A00                       		bpl.s	locret_170F6
000176D4 3038 FE32                  		move.w	($FFFFFE32).w,d0
000176D8 0440 00A0                  		subi.w	#$A0,d0
000176DC 31C0 F728                  		move.w	d0,($FFFFF728).w
000176E0                            
000176E0                            locret_170F6:
000176E0 4E75                       		rts	
000176E2                            ; End of function Obj79_LoadInfo
000176E2                            
000176E2                            ; ===========================================================================
000176E2                            ; ---------------------------------------------------------------------------
000176E2                            ; Sprite mappings - lamppost
000176E2                            ; ---------------------------------------------------------------------------
000176E2                            Map_obj79:
000176E2                            	include "_maps\obj79.asm"
000176E2                            ; ---------------------------------------------------------------------------
000176E2                            ; Sprite mappings - lamppost
000176E2                            ; ---------------------------------------------------------------------------
000176E2 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000176E6 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000176EA 06                         byte_17100:	dc.b 6
000176EB E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000176F0 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000176F5 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000176FA F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000176FF D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017704 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017709 04                         byte_1711F:	dc.b 4
0001770A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001770F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017714 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017719 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001771E 02                         byte_17134:	dc.b 2
0001771F F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017724 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017729 06                         byte_1713F:	dc.b 6
0001772A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001772F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017734 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017739 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001773E D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017743 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017748                            		even
00017748                            		even
00017748                            
00017748                            ; ===========================================================================
00017748                            ; ---------------------------------------------------------------------------
00017748                            ; Object 7D - hidden points at the end of a level
00017748                            ; ---------------------------------------------------------------------------
00017748                            
00017748                            Obj7D:					; XREF: Obj_Index
00017748 7000                       		moveq	#0,d0
0001774A 1028 0024                  		move.b	$24(a0),d0
0001774E 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017752 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017756                            ; ===========================================================================
00017756 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017758 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001775A                            ; ===========================================================================
0001775A                            
0001775A                            Obj7D_Main:				; XREF: Obj7D_Index
0001775A 7410                       		moveq	#$10,d2
0001775C 3602                       		move.w	d2,d3
0001775E D643                       		add.w	d3,d3
00017760 43F8 D000                  		lea	($FFFFD000).w,a1
00017764 3029 0008                  		move.w	8(a1),d0
00017768 9068 0008                  		sub.w	8(a0),d0
0001776C D042                       		add.w	d2,d0
0001776E B043                       		cmp.w	d3,d0
00017770 6400                       		bcc.s	Obj7D_ChkDel
00017772 3229 000C                  		move.w	$C(a1),d1
00017776 9268 000C                  		sub.w	$C(a0),d1
0001777A D242                       		add.w	d2,d1
0001777C B243                       		cmp.w	d3,d1
0001777E 6400                       		bcc.s	Obj7D_ChkDel
00017780 4A78 FE08                  		tst.w	($FFFFFE08).w
00017784 6600                       		bne.s	Obj7D_ChkDel
00017786 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001778A 6600                       		bne.s	Obj7D_ChkDel
0001778C 5428 0024                  		addq.b	#2,$24(a0)
00017790 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017798 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001779E 0028 0004 0001             		ori.b	#4,1(a0)
000177A4 117C 0000 0018             		move.b	#0,$18(a0)
000177AA 117C 0010 0019             		move.b	#$10,$19(a0)
000177B0 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000177B6 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000177BC 303C 00C9                  		move.w	#$C9,d0
000177C0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
000177C6 7000                       		moveq	#0,d0
000177C8 1028 0028                  		move.b	$28(a0),d0
000177CC D040                       		add.w	d0,d0
000177CE 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000177D2 4EB9 0000 0000             		jsr	AddPoints
000177D8                            
000177D8                            Obj7D_ChkDel:
000177D8 3028 0008                  		move.w	8(a0),d0
000177DC 0240 FF80                  		andi.w	#$FF80,d0
000177E0 3238 F700                  		move.w	($FFFFF700).w,d1
000177E4 0441 0080                  		subi.w	#$80,d1
000177E8 0241 FF80                  		andi.w	#$FF80,d1
000177EC 9041                       		sub.w	d1,d0
000177EE 0C40 0280                  		cmpi.w	#$280,d0
000177F2 6200                       		bhi.s	Obj7D_Delete
000177F4 4E75                       		rts	
000177F6                            ; ===========================================================================
000177F6                            
000177F6                            Obj7D_Delete:
000177F6 4EF9 0000 DBE4             		jmp	DeleteObject
000177FC                            ; ===========================================================================
000177FC 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000177FE 03E8                       		dc.w 1000
00017800 0064                       		dc.w 100
00017802 0001                       		dc.w 1
00017804                            ; ===========================================================================
00017804                            
00017804                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017804 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017808 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001780A 3028 0008                  		move.w	8(a0),d0
0001780E 0240 FF80                  		andi.w	#-$80,d0
00017812 3238 F700                  		move.w	($FFFFF700).w,d1
00017816 0441 0080                  		subi.w	#$80,d1
0001781A 0241 FF80                  		andi.w	#-$80,d1
0001781E 9041                       		sub.w	d1,d0
00017820 0C40 0280                  		cmpi.w	#$280,d0
00017824 6200                       		bhi.s	Obj7D_Delete2
00017826 4EF9 0000 DBA8             		jmp	DisplaySprite
0001782C                            ; ===========================================================================
0001782C                            
0001782C                            Obj7D_Delete2:
0001782C 4EF9 0000 DBE4             		jmp	DeleteObject
00017832                            ; ===========================================================================
00017832                            ; ---------------------------------------------------------------------------
00017832                            ; Sprite mappings - hidden points at the end of	a level
00017832                            ; ---------------------------------------------------------------------------
00017832                            Map_obj7D:
00017832                            	include "_maps\obj7D.asm"
00017832                            ; ---------------------------------------------------------------------------
00017832                            ; Sprite mappings - hidden points at the end of	a level
00017832                            ; ---------------------------------------------------------------------------
00017832 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017836 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001783A 00                         byte_17250:	dc.b 0
0001783B 01                         byte_17251:	dc.b 1
0001783C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017841 01                         byte_17257:	dc.b 1
00017842 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017847 01                         byte_1725D:	dc.b 1
00017848 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001784E 00                         		even
0001784E 00                         		even
0001784E                            
0001784E                            ; ===========================================================================
0001784E                            ; ---------------------------------------------------------------------------
0001784E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001784E                            ; ---------------------------------------------------------------------------
0001784E                            
0001784E                            Obj8A:					; XREF: Obj_Index
0001784E 7000                       		moveq	#0,d0
00017850 1028 0024                  		move.b	$24(a0),d0
00017854 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017858 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001785C                            ; ===========================================================================
0001785C 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001785E 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017860                            ; ===========================================================================
00017860                            
00017860                            Obj8A_Main:				; XREF: Obj8A_Index
00017860 5428 0024                  		addq.b	#2,$24(a0)
00017864 317C 0120 0008             		move.w	#$120,8(a0)
0001786A 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017870 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017878 317C 05A0 0002             		move.w	#$5A0,2(a0)
0001787E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017882 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017886 117C 0000 0001             		move.b	#0,1(a0)
0001788C 117C 0000 0018             		move.b	#0,$18(a0)
00017892 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017898 6600                       		bne.s	Obj8A_Display	; if not, branch
0001789A 317C 00A6 0002             		move.w	#$A6,2(a0)
000178A0 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000178A6 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000178AA 6700                       		beq.s	Obj8A_Display	; if not, branch
000178AC 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000178B2 6600                       		bne.s	Obj8A_Display	; if not, branch
000178B4 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000178BA 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000178C0 4EF9 0000 DBE4             		jmp	DeleteObject
000178C6                            ; ===========================================================================
000178C6                            
000178C6                            Obj8A_Display:				; XREF: Obj8A_Index
000178C6 4EF9 0000 DBA8             		jmp	DisplaySprite
000178CC                            ; ===========================================================================
000178CC                            ; ---------------------------------------------------------------------------
000178CC                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000178CC                            ; ---------------------------------------------------------------------------
000178CC                            Map_obj8A:
000178CC                            	include "_maps\obj8A.asm"
000178CC                            ; --------------------------------------------------------------------------------
000178CC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000178CC                            ; --------------------------------------------------------------------------------
000178CC                            
000178CC                            SME_MD8yg:	
000178CC 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000178D0 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000178D4 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000178D8 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
000178DC 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000178E0 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000178E2 0E                         SME_MD8yg_16:	dc.b $E	
000178E3 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
000178E8 F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
000178ED F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
000178F2 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
000178F7 F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
000178FC F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
00017901 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
00017906 F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
0001790B F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
00017910 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
00017915 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
0001791A F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
0001791F F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
00017924 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
00017929 10                         SME_MD8yg_5D:	dc.b $10	
0001792A D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
0001792F D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
00017934 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
00017939 D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
0001793E D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
00017943 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
00017948 D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
0001794D D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
00017952 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
00017957 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
0001795C 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017961 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
00017966 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
0001796B 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017970 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017975 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
0001797A 0A                         SME_MD8yg_AE:	dc.b $A	
0001797B D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017980 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017985 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
0001798A D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
0001798F D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
00017994 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
00017999 D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
0001799E 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
000179A3 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
000179A8 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
000179AD 18                         SME_MD8yg_E1:	dc.b $18	
000179AE D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
000179B3 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
000179B8 D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
000179BD D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
000179C2 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
000179C7 D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
000179CC D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
000179D1 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
000179D6 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
000179DB D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
000179E0 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
000179E5 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
000179EA D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
000179EF D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
000179F4 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
000179F9 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
000179FE 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017A03 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
00017A08 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017A0D 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017A12 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
00017A17 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017A1C 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017A21 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
00017A26 14                         SME_MD8yg_15A:	dc.b $14	
00017A27 D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017A2C D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017A31 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017A36 D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017A3B D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017A40 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017A45 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017A4A 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017A4F 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017A54 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017A59 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017A5E 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017A63 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017A68 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017A6D 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017A72 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017A77 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017A7C 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017A81 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017A86 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017A8B 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017A8C D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017A91 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017A96 D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017A9B D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017AA0 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017AA5 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017AAA D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017AAF D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017AB4 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017AB9 D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017ABE D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017AC3 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017AC8 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017ACD 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017AD2 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017AD7 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017ADC 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017AE1 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017AE6 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017AEB 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017AF0 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017AF5 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017AFA 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017AFF 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017B04 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017B09 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017B0E 17                         SME_MD8yg_242:	dc.b $17	
00017B0F D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017B14 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017B19 D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017B1E D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017B23 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017B28 D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017B2D D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017B32 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017B37 D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017B3C D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017B41 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017B46 D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017B4B 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B50 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B55 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017B5A 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017B5F 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017B64 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017B69 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017B6E 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017B73 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017B78 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017B7D 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017B82 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017B83 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017B88 D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017B8D D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017B92 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017B97 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017B9C D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017BA1 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017BA6 D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017BAB D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017BB0 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017BB5 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017BBA D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017BBF D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017BC4 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017BC9 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017BCE 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017BD3 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017BD8 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017BDD 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017BE2 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017BE7 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017BEC 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017BF1 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017BF6 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017BFB 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017C00 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017C05 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017C0A 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017C0F 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017C14 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017C19 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017C1E 0F                         SME_MD8yg_352:	dc.b $F	
00017C1F F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017C24 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017C29 F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017C2E F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017C33 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017C38 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017C3D F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017C42 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017C47 F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017C4C F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017C51 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017C56 F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017C5B F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017C60 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017C65 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017C6A 08                         SME_MD8yg_39E:	dc.b 8	
00017C6B 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017C70 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017C75 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017C7A 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017C7F 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017C84 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017C89 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017C8E 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017C93 17                         SME_MD8yg_3C7:	dc.b $17	
00017C94 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017C99 D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017C9E E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017CA3 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017CA8 D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017CAD D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017CB2 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017CB7 E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017CBC D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017CC1 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017CC6 D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017CCB D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017CD0 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017CD5 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017CDA E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017CDF E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017CE4 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017CE9 E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017CEE F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017CF3 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017CF8 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017CFD D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017D02 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017D08 00                         		even
00017D08 00                         		even
00017D08                            
00017D08                            ; ===========================================================================
00017D08                            ; ---------------------------------------------------------------------------
00017D08                            ; Object 3D - Eggman (GHZ)
00017D08                            ; ---------------------------------------------------------------------------
00017D08                            
00017D08                            Obj3D:					; XREF: Obj_Index
00017D08 7000                       		moveq	#0,d0
00017D0A 1028 0024                  		move.b	$24(a0),d0
00017D0E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017D12 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017D16                            ; ===========================================================================
00017D16 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017D18 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017D1A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017D1C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017D1E                            
00017D1E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017D20 0401                       		dc.b 4,	1
00017D22 0607                       		dc.b 6,	7
00017D24                            ; ===========================================================================
00017D24                            
00017D24                            Obj3D_Main:				; XREF: Obj3D_Index
00017D24 45F9 0001 7D1E             		lea	(Obj3D_ObjData).l,a2
00017D2A 2248                       		movea.l	a0,a1
00017D2C 7202                       		moveq	#2,d1
00017D2E 6000                       		bra.s	Obj3D_LoadBoss
00017D30                            ; ===========================================================================
00017D30                            
00017D30                            Obj3D_Loop:
00017D30 4EB9 0000 E044             		jsr	SingleObjLoad2
00017D36 6600                       		bne.s	loc_17772
00017D38                            
00017D38                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017D38 135A 0024                  		move.b	(a2)+,$24(a1)
00017D3C 12BC 003D                  		move.b	#$3D,0(a1)
00017D40 3368 0008 0008             		move.w	8(a0),8(a1)
00017D46 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D4C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017D54 337C 0400 0002             		move.w	#$400,2(a1)
00017D5A 137C 0004 0001             		move.b	#4,1(a1)
00017D60 137C 0020 0019             		move.b	#$20,$19(a1)
00017D66 137C 0003 0018             		move.b	#3,$18(a1)
00017D6C 135A 001C                  		move.b	(a2)+,$1C(a1)
00017D70 2348 0034                  		move.l	a0,$34(a1)
00017D74 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017D78                            
00017D78                            loc_17772:
00017D78 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D7E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D84 117C 000F 0020             		move.b	#$F,$20(a0)
00017D8A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017D90                            
00017D90                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017D90 7000                       		moveq	#0,d0
00017D92 1028 0025                  		move.b	$25(a0),d0
00017D96 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017D9A 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017D9E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017DA4 4EB9 0000 AC42             		jsr	AnimateSprite
00017DAA 1028 0022                  		move.b	$22(a0),d0
00017DAE 0200 0003                  		andi.b	#3,d0
00017DB2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017DB8 8128 0001                  		or.b	d0,1(a0)
00017DBC 4EF9 0000 DBA8             		jmp	DisplaySprite
00017DC2                            ; ===========================================================================
00017DC2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017DC4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017DC6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017DC8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017DCA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017DCC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017DCE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017DD0                            ; ===========================================================================
00017DD0                            
00017DD0                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017DD0 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017DD6 6100 0000                  		bsr.w	BossMove
00017DDA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017DE0 6600                       		bne.s	loc_177E6
00017DE2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017DE8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017DEC                            
00017DEC                            loc_177E6:
00017DEC 1028 003F                  		move.b	$3F(a0),d0
00017DF0 4EB9 0000 2C22             		jsr	(CalcSine).l
00017DF6 EC40                       		asr.w	#6,d0
00017DF8 D068 0038                  		add.w	$38(a0),d0
00017DFC 3140 000C                  		move.w	d0,$C(a0)
00017E00 3168 0030 0008             		move.w	$30(a0),8(a0)
00017E06 5428 003F                  		addq.b	#2,$3F(a0)
00017E0A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017E10 6400                       		bcc.s	locret_1784A
00017E12 4A28 0022                  		tst.b	$22(a0)
00017E16 6B00                       		bmi.s	loc_1784C
00017E18 4A28 0020                  		tst.b	$20(a0)
00017E1C 6600                       		bne.s	locret_1784A
00017E1E 4A28 003E                  		tst.b	$3E(a0)
00017E22 6600                       		bne.s	Obj3D_ShipFlash
00017E24 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017E2A 303C 00AC                  		move.w	#$AC,d0
00017E2E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017E34                            
00017E34                            Obj3D_ShipFlash:
00017E34 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017E38 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017E3A 4A51                       		tst.w	(a1)
00017E3C 6600                       		bne.s	loc_1783C
00017E3E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017E42                            
00017E42                            loc_1783C:
00017E42 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017E44 5328 003E                  		subq.b	#1,$3E(a0)
00017E48 6600                       		bne.s	locret_1784A
00017E4A 117C 000F 0020             		move.b	#$F,$20(a0)
00017E50                            
00017E50                            locret_1784A:
00017E50 4E75                       		rts	
00017E52                            ; ===========================================================================
00017E52                            
00017E52                            loc_1784C:				; XREF: loc_177E6
00017E52 7064                       		moveq	#100,d0
00017E54 6100 0000                  		bsr.w	AddPoints
00017E58 117C 0008 0025             		move.b	#8,$25(a0)
00017E5E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017E64 4E75                       		rts	
00017E66                            
00017E66                            ; ---------------------------------------------------------------------------
00017E66                            ; Defeated boss	subroutine
00017E66                            ; ---------------------------------------------------------------------------
00017E66                            
00017E66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E66                            
00017E66                            
00017E66                            BossDefeated:
00017E66 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017E6A 0200 0007                  		andi.b	#7,d0
00017E6E 6600                       		bne.s	locret_178A2
00017E70 4EB9 0000 E02E             		jsr	SingleObjLoad
00017E76 6600                       		bne.s	locret_178A2
00017E78 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017E7C 3368 0008 0008             		move.w	8(a0),8(a1)
00017E82 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E88 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00017E8E 3200                       		move.w	d0,d1
00017E90 7200                       		moveq	#0,d1
00017E92 1200                       		move.b	d0,d1
00017E94 E409                       		lsr.b	#2,d1
00017E96 0441 0020                  		subi.w	#$20,d1
00017E9A D369 0008                  		add.w	d1,8(a1)
00017E9E E048                       		lsr.w	#8,d0
00017EA0 E608                       		lsr.b	#3,d0
00017EA2 D169 000C                  		add.w	d0,$C(a1)
00017EA6                            
00017EA6                            locret_178A2:
00017EA6 4E75                       		rts	
00017EA8                            ; End of function BossDefeated
00017EA8                            
00017EA8                            ; ---------------------------------------------------------------------------
00017EA8                            ; Subroutine to	move a boss
00017EA8                            ; ---------------------------------------------------------------------------
00017EA8                            
00017EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EA8                            
00017EA8                            
00017EA8                            BossMove:
00017EA8 2428 0030                  		move.l	$30(a0),d2
00017EAC 2628 0038                  		move.l	$38(a0),d3
00017EB0 3028 0010                  		move.w	$10(a0),d0
00017EB4 48C0                       		ext.l	d0
00017EB6 E180                       		asl.l	#8,d0
00017EB8 D480                       		add.l	d0,d2
00017EBA 3028 0012                  		move.w	$12(a0),d0
00017EBE 48C0                       		ext.l	d0
00017EC0 E180                       		asl.l	#8,d0
00017EC2 D680                       		add.l	d0,d3
00017EC4 2142 0030                  		move.l	d2,$30(a0)
00017EC8 2143 0038                  		move.l	d3,$38(a0)
00017ECC 4E75                       		rts	
00017ECE                            ; End of function BossMove
00017ECE                            
00017ECE                            ; ===========================================================================
00017ECE                            
00017ECE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017ECE 317C FF00 0010             		move.w	#-$100,$10(a0)
00017ED4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017EDA 6100 FFCC                  		bsr.w	BossMove
00017EDE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017EE4 6600                       		bne.s	loc_17916
00017EE6 317C 0000 0010             		move.w	#0,$10(a0)
00017EEC 317C 0000 0012             		move.w	#0,$12(a0)
00017EF2 5428 0025                  		addq.b	#2,$25(a0)
00017EF6 4EB9 0000 E044             		jsr	SingleObjLoad2
00017EFC 6600                       		bne.s	loc_17910
00017EFE 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017F02 3368 0030 0008             		move.w	$30(a0),8(a1)
00017F08 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017F0E 2348 0034                  		move.l	a0,$34(a1)
00017F12                            
00017F12                            loc_17910:
00017F12 317C 0077 003C             		move.w	#$77,$3C(a0)
00017F18                            
00017F18                            loc_17916:
00017F18 6000 FED2                  		bra.w	loc_177E6
00017F1C                            ; ===========================================================================
00017F1C                            
00017F1C                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017F1C 5368 003C                  		subq.w	#1,$3C(a0)
00017F20 6A00                       		bpl.s	Obj3D_Reverse
00017F22 5428 0025                  		addq.b	#2,$25(a0)
00017F26 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F2C 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017F32 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017F38 6600                       		bne.s	Obj3D_Reverse
00017F3A 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017F40 317C 0040 0010             		move.w	#$40,$10(a0)
00017F46                            
00017F46                            Obj3D_Reverse:
00017F46 0828 0000 0022             		btst	#0,$22(a0)
00017F4C 6600                       		bne.s	loc_17950
00017F4E 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017F52                            
00017F52                            loc_17950:
00017F52 6000 FE98                  		bra.w	loc_177E6
00017F56                            ; ===========================================================================
00017F56                            
00017F56                            loc_17954:				; XREF: Obj3D_ShipIndex
00017F56 5368 003C                  		subq.w	#1,$3C(a0)
00017F5A 6B00                       		bmi.s	loc_17960
00017F5C 6100 FF4A                  		bsr.w	BossMove
00017F60 6000                       		bra.s	loc_17976
00017F62                            ; ===========================================================================
00017F62                            
00017F62                            loc_17960:
00017F62 0868 0000 0022             		bchg	#0,$22(a0)
00017F68 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F6E 5528 0025                  		subq.b	#2,$25(a0)
00017F72 317C 0000 0010             		move.w	#0,$10(a0)
00017F78                            
00017F78                            loc_17976:
00017F78 6000 FE72                  		bra.w	loc_177E6
00017F7C                            ; ===========================================================================
00017F7C                            
00017F7C                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017F7C 5368 003C                  		subq.w	#1,$3C(a0)
00017F80 6B00                       		bmi.s	loc_17984
00017F82 6000 FEE2                  		bra.w	BossDefeated
00017F86                            ; ===========================================================================
00017F86                            
00017F86                            loc_17984:
00017F86 08E8 0000 0022             		bset	#0,$22(a0)
00017F8C 08A8 0007 0022             		bclr	#7,$22(a0)
00017F92 4268 0010                  		clr.w	$10(a0)
00017F96 5428 0025                  		addq.b	#2,$25(a0)
00017F9A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017FA0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017FA4 6600                       		bne.s	locret_179AA
00017FA6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017FAC                            
00017FAC                            locret_179AA:
00017FAC 4E75                       		rts	
00017FAE                            ; ===========================================================================
00017FAE                            
00017FAE                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017FAE 5268 003C                  		addq.w	#1,$3C(a0)
00017FB2 6700                       		beq.s	loc_179BC
00017FB4 6A00                       		bpl.s	loc_179C2
00017FB6 0668 0018 0012             		addi.w	#$18,$12(a0)
00017FBC 6000                       		bra.s	loc_179EE
00017FBE                            ; ===========================================================================
00017FBE                            
00017FBE                            loc_179BC:
00017FBE 4268 0012                  		clr.w	$12(a0)
00017FC2 6000                       		bra.s	loc_179EE
00017FC4                            ; ===========================================================================
00017FC4                            
00017FC4                            loc_179C2:
00017FC4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017FCA 6500                       		bcs.s	loc_179DA
00017FCC 6700                       		beq.s	loc_179E0
00017FCE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017FD4 6500                       		bcs.s	loc_179EE
00017FD6 5428 0025                  		addq.b	#2,$25(a0)
00017FDA 6000                       		bra.s	loc_179EE
00017FDC                            ; ===========================================================================
00017FDC                            
00017FDC                            loc_179DA:
00017FDC 5168 0012                  		subq.w	#8,$12(a0)
00017FE0 6000                       		bra.s	loc_179EE
00017FE2                            ; ===========================================================================
00017FE2                            
00017FE2                            loc_179E0:
00017FE2 4268 0012                  		clr.w	$12(a0)
00017FE6 303C 0081                  		move.w	#$81,d0
00017FEA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00017FF0                            
00017FF0                            loc_179EE:
00017FF0 6100 FEB6                  		bsr.w	BossMove
00017FF4 6000 FDF6                  		bra.w	loc_177E6
00017FF8                            ; ===========================================================================
00017FF8                            
00017FF8                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017FF8 317C 0400 0010             		move.w	#$400,$10(a0)
00017FFE 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018004 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001800A 6700                       		beq.s	loc_17A10
0001800C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018010 6000                       		bra.s	loc_17A16
00018012                            ; ===========================================================================
00018012                            
00018012                            loc_17A10:
00018012 4A28 0001                  		tst.b	1(a0)
00018016 6A00                       		bpl.s	Obj3D_ShipDel
00018018                            
00018018                            loc_17A16:
00018018 6100 FE8E                  		bsr.w	BossMove
0001801C 6000 FDCE                  		bra.w	loc_177E6
00018020                            ; ===========================================================================
00018020                            
00018020                            Obj3D_ShipDel:
00018020 4EF9 0000 DBE4             		jmp	DeleteObject
00018026                            ; ===========================================================================
00018026                            
00018026                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018026 7000                       		moveq	#0,d0
00018028 7201                       		moveq	#1,d1
0001802A 2268 0034                  		movea.l	$34(a0),a1
0001802E 1029 0025                  		move.b	$25(a1),d0
00018032 5900                       		subq.b	#4,d0
00018034 6600                       		bne.s	loc_17A3E
00018036 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001803C 6600                       		bne.s	loc_17A46
0001803E 7204                       		moveq	#4,d1
00018040                            
00018040                            loc_17A3E:
00018040 5D00                       		subq.b	#6,d0
00018042 6B00                       		bmi.s	loc_17A46
00018044 720A                       		moveq	#$A,d1
00018046 6000                       		bra.s	loc_17A5A
00018048                            ; ===========================================================================
00018048                            
00018048                            loc_17A46:
00018048 4A29 0020                  		tst.b	$20(a1)
0001804C 6600                       		bne.s	loc_17A50
0001804E 7205                       		moveq	#5,d1
00018050 6000                       		bra.s	loc_17A5A
00018052                            ; ===========================================================================
00018052                            
00018052                            loc_17A50:
00018052 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018058 6500                       		bcs.s	loc_17A5A
0001805A 7204                       		moveq	#4,d1
0001805C                            
0001805C                            loc_17A5A:
0001805C 1141 001C                  		move.b	d1,$1C(a0)
00018060 5500                       		subq.b	#2,d0
00018062 6600                       		bne.s	Obj3D_FaceDisp
00018064 117C 0006 001C             		move.b	#6,$1C(a0)
0001806A 4A28 0001                  		tst.b	1(a0)
0001806E 6A00                       		bpl.s	Obj3D_FaceDel
00018070                            
00018070                            Obj3D_FaceDisp:
00018070 6000                       		bra.s	Obj3D_Display
00018072                            ; ===========================================================================
00018072                            
00018072                            Obj3D_FaceDel:
00018072 4EF9 0000 DBE4             		jmp	DeleteObject
00018078                            ; ===========================================================================
00018078                            
00018078                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018078 117C 0007 001C             		move.b	#7,$1C(a0)
0001807E 2268 0034                  		movea.l	$34(a0),a1
00018082 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018088 6600                       		bne.s	loc_17A96
0001808A 117C 000B 001C             		move.b	#$B,$1C(a0)
00018090 4A28 0001                  		tst.b	1(a0)
00018094 6A00                       		bpl.s	Obj3D_FlameDel
00018096 6000                       		bra.s	Obj3D_FlameDisp
00018098                            ; ===========================================================================
00018098                            
00018098                            loc_17A96:
00018098 3029 0010                  		move.w	$10(a1),d0
0001809C 6700                       		beq.s	Obj3D_FlameDisp
0001809E 117C 0008 001C             		move.b	#8,$1C(a0)
000180A4                            
000180A4                            Obj3D_FlameDisp:
000180A4 6000                       		bra.s	Obj3D_Display
000180A6                            ; ===========================================================================
000180A6                            
000180A6                            Obj3D_FlameDel:
000180A6 4EF9 0000 DBE4             		jmp	DeleteObject
000180AC                            ; ===========================================================================
000180AC                            
000180AC                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000180AC 2268 0034                  		movea.l	$34(a0),a1
000180B0 3169 0008 0008             		move.w	8(a1),8(a0)
000180B6 3169 000C 000C             		move.w	$C(a1),$C(a0)
000180BC 1169 0022 0022             		move.b	$22(a1),$22(a0)
000180C2 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180C8 4EB9 0000 AC42             		jsr	AnimateSprite
000180CE 1028 0022                  		move.b	$22(a0),d0
000180D2 0200 0003                  		andi.b	#3,d0
000180D6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180DC 8128 0001                  		or.b	d0,1(a0)
000180E0 4EF9 0000 DBA8             		jmp	DisplaySprite
000180E6                            ; ===========================================================================
000180E6                            ; ---------------------------------------------------------------------------
000180E6                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000180E6                            ; ---------------------------------------------------------------------------
000180E6                            
000180E6                            Obj48:					; XREF: Obj_Index
000180E6 7000                       		moveq	#0,d0
000180E8 1028 0024                  		move.b	$24(a0),d0
000180EC 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000180F0 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000180F4                            ; ===========================================================================
000180F4 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000180F6 0000                       		dc.w Obj48_Base-Obj48_Index
000180F8 0000                       		dc.w Obj48_Display2-Obj48_Index
000180FA 0000                       		dc.w loc_17C68-Obj48_Index
000180FC 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000180FE                            ; ===========================================================================
000180FE                            
000180FE                            Obj48_Main:				; XREF: Obj48_Index
000180FE 5428 0024                  		addq.b	#2,$24(a0)
00018102 317C 4080 0026             		move.w	#$4080,$26(a0)
00018108 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001810E 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018116 317C 046C 0002             		move.w	#$46C,2(a0)
0001811C 45E8 0028                  		lea	$28(a0),a2
00018120 14FC 0000                  		move.b	#0,(a2)+
00018124 7205                       		moveq	#5,d1
00018126 2248                       		movea.l	a0,a1
00018128 6000                       		bra.s	loc_17B60
0001812A                            ; ===========================================================================
0001812A                            
0001812A                            Obj48_MakeLinks:
0001812A 4EB9 0000 E044             		jsr	SingleObjLoad2
00018130 6600                       		bne.s	Obj48_MakeBall
00018132 3368 0008 0008             		move.w	8(a0),8(a1)
00018138 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001813E 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018142 137C 0006 0024             		move.b	#6,$24(a1)
00018148 237C 0000 8096 0004        		move.l	#Map_obj15,4(a1)
00018150 337C 0380 0002             		move.w	#$380,2(a1)
00018156 137C 0001 001A             		move.b	#1,$1A(a1)
0001815C 5228 0028                  		addq.b	#1,$28(a0)
00018160                            
00018160                            loc_17B60:				; XREF: Obj48_Main
00018160 3A09                       		move.w	a1,d5
00018162 0445 D000                  		subi.w	#$D000,d5
00018166 EC4D                       		lsr.w	#6,d5
00018168 0245 007F                  		andi.w	#$7F,d5
0001816C 14C5                       		move.b	d5,(a2)+
0001816E 137C 0004 0001             		move.b	#4,1(a1)
00018174 137C 0008 0019             		move.b	#8,$19(a1)
0001817A 137C 0006 0018             		move.b	#6,$18(a1)
00018180 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018186 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001818A                            
0001818A                            Obj48_MakeBall:
0001818A 137C 0008 0024             		move.b	#8,$24(a1)
00018190 237C 0000 85F4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018198 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001819E 137C 0001 001A             		move.b	#1,$1A(a1)
000181A4 137C 0005 0018             		move.b	#5,$18(a1)
000181AA 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000181B0 4E75                       		rts	
000181B2                            ; ===========================================================================
000181B2                            
000181B2 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000181B8                            
000181B8                            ; ===========================================================================
000181B8                            
000181B8                            Obj48_Base:				; XREF: Obj48_Index
000181B8 47F9 0001 81B2             		lea	(Obj48_PosData).l,a3
000181BE 45E8 0028                  		lea	$28(a0),a2
000181C2 7C00                       		moveq	#0,d6
000181C4 1C1A                       		move.b	(a2)+,d6
000181C6                            
000181C6                            loc_17BC6:
000181C6 7800                       		moveq	#0,d4
000181C8 181A                       		move.b	(a2)+,d4
000181CA ED4C                       		lsl.w	#6,d4
000181CC 0684 00FF D000             		addi.l	#$FFD000,d4
000181D2 2244                       		movea.l	d4,a1
000181D4 101B                       		move.b	(a3)+,d0
000181D6 B029 003C                  		cmp.b	$3C(a1),d0
000181DA 6700                       		beq.s	loc_17BE0
000181DC 5229 003C                  		addq.b	#1,$3C(a1)
000181E0                            
000181E0                            loc_17BE0:
000181E0 51CE FFE4                  		dbf	d6,loc_17BC6
000181E4                            
000181E4 B029 003C                  		cmp.b	$3C(a1),d0
000181E8 6600                       		bne.s	loc_17BFA
000181EA 2268 0034                  		movea.l	$34(a0),a1
000181EE 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000181F4 6600                       		bne.s	loc_17BFA
000181F6 5428 0024                  		addq.b	#2,$24(a0)
000181FA                            
000181FA                            loc_17BFA:
000181FA 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018200 6700                       		beq.s	Obj48_Display
00018202 5268 0032                  		addq.w	#1,$32(a0)
00018206                            
00018206                            Obj48_Display:
00018206 6100 0000                  		bsr.w	sub_17C2A
0001820A 1028 0026                  		move.b	$26(a0),d0
0001820E 4EB9 0000 8008             		jsr	(Obj15_Move2).l
00018214 4EF9 0000 DBA8             		jmp	DisplaySprite
0001821A                            ; ===========================================================================
0001821A                            
0001821A                            Obj48_Display2:				; XREF: Obj48_Index
0001821A 6100 0000                  		bsr.w	sub_17C2A
0001821E 4EB9 0000 7FC8             		jsr	(Obj48_Move).l
00018224 4EF9 0000 DBA8             		jmp	DisplaySprite
0001822A                            
0001822A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001822A                            
0001822A                            
0001822A                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001822A 2268 0034                  		movea.l	$34(a0),a1
0001822E 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018234 6400                       		bcc.s	loc_17C3C
00018236 0868 0000 001A             		bchg	#0,$1A(a0)
0001823C                            
0001823C                            loc_17C3C:
0001823C 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018242 3029 000C                  		move.w	$C(a1),d0
00018246 D068 0032                  		add.w	$32(a0),d0
0001824A 3140 0038                  		move.w	d0,$38(a0)
0001824E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018254 4A29 0022                  		tst.b	$22(a1)
00018258 6A00                       		bpl.s	locret_17C66
0001825A 10BC 003F                  		move.b	#$3F,0(a0)
0001825E 117C 0000 0024             		move.b	#0,$24(a0)
00018264                            
00018264                            locret_17C66:
00018264 4E75                       		rts	
00018266                            ; End of function sub_17C2A
00018266                            
00018266                            ; ===========================================================================
00018266                            
00018266                            loc_17C68:				; XREF: Obj48_Index
00018266 2268 0034                  		movea.l	$34(a0),a1
0001826A 4A29 0022                  		tst.b	$22(a1)
0001826E 6A00                       		bpl.s	Obj48_Display3
00018270 10BC 003F                  		move.b	#$3F,0(a0)
00018274 117C 0000 0024             		move.b	#0,$24(a0)
0001827A                            
0001827A                            Obj48_Display3:
0001827A 4EF9 0000 DBA8             		jmp	DisplaySprite
00018280                            ; ===========================================================================
00018280                            
00018280                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018280 7000                       		moveq	#0,d0
00018282 4A28 001A                  		tst.b	$1A(a0)
00018286 6600                       		bne.s	Obj48_Vanish
00018288 5200                       		addq.b	#1,d0
0001828A                            
0001828A                            Obj48_Vanish:
0001828A 1140 001A                  		move.b	d0,$1A(a0)
0001828E 2268 0034                  		movea.l	$34(a0),a1
00018292 4A29 0022                  		tst.b	$22(a1)
00018296 6A00                       		bpl.s	Obj48_Display4
00018298 117C 0000 0020             		move.b	#0,$20(a0)
0001829E 6100 FBC6                  		bsr.w	BossDefeated
000182A2 5328 003C                  		subq.b	#1,$3C(a0)
000182A6 6A00                       		bpl.s	Obj48_Display4
000182A8 10BC 003F                  		move.b	#$3F,(a0)
000182AC 117C 0000 0024             		move.b	#0,$24(a0)
000182B2                            
000182B2                            Obj48_Display4:
000182B2 4EF9 0000 DBA8             		jmp	DisplaySprite
000182B8                            ; ===========================================================================
000182B8                            Ani_Eggman:
000182B8                            	include "_anim\Eggman.asm"
000182B8                            ; ---------------------------------------------------------------------------
000182B8                            ; Animation script - Eggman (bosses)
000182B8                            ; ---------------------------------------------------------------------------
000182B8 0000                       		dc.w byte_17CD4-Ani_Eggman
000182BA 0000                       		dc.w byte_17CD8-Ani_Eggman
000182BC 0000                       		dc.w byte_17CDC-Ani_Eggman
000182BE 0000                       		dc.w byte_17CE0-Ani_Eggman
000182C0 0000                       		dc.w byte_17CE4-Ani_Eggman
000182C2 0000                       		dc.w byte_17CE8-Ani_Eggman
000182C4 0000                       		dc.w byte_17CEC-Ani_Eggman
000182C6 0000                       		dc.w byte_17CF0-Ani_Eggman
000182C8 0000                       		dc.w byte_17CF4-Ani_Eggman
000182CA 0000                       		dc.w byte_17CF8-Ani_Eggman
000182CC 0000                       		dc.w byte_17CFC-Ani_Eggman
000182CE 0000                       		dc.w byte_17D00-Ani_Eggman
000182D0 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000182D4 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000182D8 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000182DC 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000182E0 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000182E4 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000182E8 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000182EC 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000182F0 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000182F4 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000182F8 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000182FC 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018308                            		even
00018308                            		even
00018308                            
00018308                            ; ---------------------------------------------------------------------------
00018308                            ; Sprite mappings - Eggman (boss levels)
00018308                            ; ---------------------------------------------------------------------------
00018308                            Map_Eggman:
00018308                            	include "_maps\Eggman.asm"
00018308                            Map_dc7e:
00018308 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001830A 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001830C 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
0001830E 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018310 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018312 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018314 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018316 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018318 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001831A 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001831C 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
0001831E 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018320 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018322 06                         Map_dc7e_1A: 	dc.b $6
00018323 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018328 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001832D FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018332 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018337 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001833C 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018341 02                         Map_dc7e_39: 	dc.b $2
00018342 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018347 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001834C 02                         Map_dc7e_44: 	dc.b $2
0001834D E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018352 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018357 03                         Map_dc7e_4F: 	dc.b $3
00018358 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001835D EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018362 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018367 03                         Map_dc7e_5F: 	dc.b $3
00018368 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
0001836D EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018372 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018377 03                         Map_dc7e_6F: 	dc.b $3
00018378 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001837D EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018382 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018387 03                         Map_dc7e_7F: 	dc.b $3
00018388 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
0001838D E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018392 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018397 04                         Map_dc7e_8F: 	dc.b $4
00018398 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
0001839D E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000183A2 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000183A7 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000183AC 01                         Map_dc7e_A4: 	dc.b $1
000183AD 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000183B2 01                         Map_dc7e_AA: 	dc.b $1
000183B3 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000183B8 00                         Map_dc7e_B0: 	dc.b $0
000183B9 02                         Map_dc7e_B1: 	dc.b $2
000183BA 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000183BF 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000183C4 02                         Map_dc7e_BC: 	dc.b $2
000183C5 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000183CA 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000183D0 00                         	even
000183D0 00                         	even
000183D0                            
000183D0                            ; ---------------------------------------------------------------------------
000183D0                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183D0                            ; ---------------------------------------------------------------------------
000183D0                            Map_BossItems:
000183D0                            	include "_maps\Boss items.asm"
000183D0                            ; ---------------------------------------------------------------------------
000183D0                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183D0                            ; ---------------------------------------------------------------------------
000183D0 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000183D4 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000183D8 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000183DC 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000183E0 01                         byte_17DE4:	dc.b 1
000183E1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183E6 02                         byte_17DEA:	dc.b 2
000183E7 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000183EC F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183F1 00                         		dc.b 0
000183F2 01                         byte_17DF6:	dc.b 1
000183F3 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000183F8 01                         byte_17DFC:	dc.b 1
000183F9 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000183FE 01                         byte_17E02:	dc.b 1
000183FF 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018404 04                         byte_17E08:	dc.b 4
00018405 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001840A F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001840F F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018414 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018419 00                         		dc.b 0
0001841A 02                         byte_17E1E:	dc.b 2
0001841B 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018420 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018425 00                         		dc.b 0
00018426 02                         byte_17E2A:	dc.b 2
00018427 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001842C 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018432 00                         		even
00018432 00                         		even
00018432                            
00018432                            ; ===========================================================================
00018432                            ; ---------------------------------------------------------------------------
00018432                            ; Object 77 - Eggman (LZ)
00018432                            ; ---------------------------------------------------------------------------
00018432                            
00018432                            Obj77:					; XREF: Obj_Index
00018432 7000                       		moveq	#0,d0
00018434 1028 0024                  		move.b	$24(a0),d0
00018438 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001843C 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018440                            ; ===========================================================================
00018440 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018442 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018444 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018446 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018448                            
00018448 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001844A 0401                       		dc.b 4,	1
0001844C 0607                       		dc.b 6,	7
0001844E                            ; ===========================================================================
0001844E                            
0001844E                            Obj77_Main:				; XREF: Obj77_Index
0001844E 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018454 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001845A 3168 0008 0030             		move.w	8(a0),$30(a0)
00018460 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018466 117C 000F 0020             		move.b	#$F,$20(a0)
0001846C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018472 117C 0004 0018             		move.b	#4,$18(a0)
00018478 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001847C 2248                       		movea.l	a0,a1
0001847E 7202                       		moveq	#2,d1
00018480 6000                       		bra.s	Obj77_LoadBoss
00018482                            ; ===========================================================================
00018482                            
00018482                            Obj77_Loop:
00018482 4EB9 0000 E044             		jsr	SingleObjLoad2
00018488 6600                       		bne.s	Obj77_ShipMain
0001848A 12BC 0077                  		move.b	#$77,0(a1)
0001848E 3368 0008 0008             		move.w	8(a0),8(a1)
00018494 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001849A                            
0001849A                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001849A 08A8 0000 0022             		bclr	#0,$22(a0)
000184A0 4229 0025                  		clr.b	$25(a1)
000184A4 135A 0024                  		move.b	(a2)+,$24(a1)
000184A8 135A 001C                  		move.b	(a2)+,$1C(a1)
000184AC 1368 0018 0018             		move.b	$18(a0),$18(a1)
000184B2 237C 0001 8308 0004        		move.l	#Map_Eggman,4(a1)
000184BA 337C 0400 0002             		move.w	#$400,2(a1)
000184C0 137C 0004 0001             		move.b	#4,1(a1)
000184C6 137C 0020 0019             		move.b	#$20,$19(a1)
000184CC 2348 0034                  		move.l	a0,$34(a1)
000184D0 51C9 FFB0                  		dbf	d1,Obj77_Loop
000184D4                            
000184D4                            Obj77_ShipMain:
000184D4 43F8 D000                  		lea	($FFFFD000).w,a1
000184D8 7000                       		moveq	#0,d0
000184DA 1028 0025                  		move.b	$25(a0),d0
000184DE 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000184E2 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000184E6 43F9 0001 82B8             		lea	(Ani_Eggman).l,a1
000184EC 4EB9 0000 AC42             		jsr	AnimateSprite
000184F2 7003                       		moveq	#3,d0
000184F4 C028 0022                  		and.b	$22(a0),d0
000184F8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000184FE 8128 0001                  		or.b	d0,1(a0)
00018502 4EF9 0000 DBA8             		jmp	DisplaySprite
00018508                            ; ===========================================================================
00018508 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001850C 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018510 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018514 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00018518                            ; ===========================================================================
00018518                            
00018518                            loc_17F1E:				; XREF: Obj77_ShipIndex
00018518 3029 0008                  		move.w	8(a1),d0
0001851C 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018520 6500                       		bcs.s	loc_17F38
00018522 317C FE80 0012             		move.w	#-$180,$12(a0)
00018528 317C 0060 0010             		move.w	#$60,$10(a0)
0001852E 5428 0025                  		addq.b	#2,$25(a0)
00018532                            
00018532                            loc_17F38:
00018532 6100 F974                  		bsr.w	BossMove
00018536 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001853C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018542                            
00018542                            loc_17F48:
00018542 4A28 003D                  		tst.b	$3D(a0)
00018546 6600                       		bne.s	loc_17F8E
00018548 4A28 0022                  		tst.b	$22(a0)
0001854C 6B00                       		bmi.s	loc_17F92
0001854E 4A28 0020                  		tst.b	$20(a0)
00018552 6600                       		bne.s	locret_17F8C
00018554 4A28 003E                  		tst.b	$3E(a0)
00018558 6600                       		bne.s	loc_17F70
0001855A 117C 0020 003E             		move.b	#$20,$3E(a0)
00018560 303C 00AC                  		move.w	#$AC,d0
00018564 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001856A                            
0001856A                            loc_17F70:
0001856A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001856E 7000                       		moveq	#0,d0
00018570 4A51                       		tst.w	(a1)
00018572 6600                       		bne.s	loc_17F7E
00018574 303C 0EEE                  		move.w	#$EEE,d0
00018578                            
00018578                            loc_17F7E:
00018578 3280                       		move.w	d0,(a1)
0001857A 5328 003E                  		subq.b	#1,$3E(a0)
0001857E 6600                       		bne.s	locret_17F8C
00018580 117C 000F 0020             		move.b	#$F,$20(a0)
00018586                            
00018586                            locret_17F8C:
00018586 4E75                       		rts	
00018588                            ; ===========================================================================
00018588                            
00018588                            loc_17F8E:				; XREF: loc_17F48
00018588 6000 F8DC                  		bra.w	BossDefeated
0001858C                            ; ===========================================================================
0001858C                            
0001858C                            loc_17F92:				; XREF: loc_17F48
0001858C 7064                       		moveq	#100,d0
0001858E 6100 0000                  		bsr.w	AddPoints
00018592 117C 00FF 003D             		move.b	#-1,$3D(a0)
00018598 4E75                       		rts	
0001859A                            ; ===========================================================================
0001859A                            
0001859A                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001859A 70FE                       		moveq	#-2,d0
0001859C 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000185A2 6500                       		bcs.s	loc_17FB6
000185A4 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000185AA 4268 0010                  		clr.w	$10(a0)
000185AE 5240                       		addq.w	#1,d0
000185B0                            
000185B0                            loc_17FB6:
000185B0 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000185B6 6E00                       		bgt.s	loc_17FCA
000185B8 317C 0500 0038             		move.w	#$500,$38(a0)
000185BE 4268 0012                  		clr.w	$12(a0)
000185C2 5240                       		addq.w	#1,d0
000185C4                            
000185C4                            loc_17FCA:
000185C4 6600                       		bne.s	loc_17FDC
000185C6 317C 0140 0010             		move.w	#$140,$10(a0)
000185CC 317C FE00 0012             		move.w	#-$200,$12(a0)
000185D2 5428 0025                  		addq.b	#2,$25(a0)
000185D6                            
000185D6                            loc_17FDC:
000185D6 6000 FF5A                  		bra.w	loc_17F38
000185DA                            ; ===========================================================================
000185DA                            
000185DA                            loc_17FE0:				; XREF: Obj77_ShipIndex
000185DA 70FE                       		moveq	#-2,d0
000185DC 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000185E2 6500                       		bcs.s	loc_17FF6
000185E4 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000185EA 4268 0010                  		clr.w	$10(a0)
000185EE 5240                       		addq.w	#1,d0
000185F0                            
000185F0                            loc_17FF6:
000185F0 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000185F6 6E00                       		bgt.s	loc_1800A
000185F8 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000185FE 4268 0012                  		clr.w	$12(a0)
00018602 5240                       		addq.w	#1,d0
00018604                            
00018604                            loc_1800A:
00018604 6600                       		bne.s	loc_1801A
00018606 317C FE80 0012             		move.w	#-$180,$12(a0)
0001860C 5428 0025                  		addq.b	#2,$25(a0)
00018610 4228 003F                  		clr.b	$3F(a0)
00018614                            
00018614                            loc_1801A:
00018614 6000 FF1C                  		bra.w	loc_17F38
00018618                            ; ===========================================================================
00018618                            
00018618                            loc_1801E:				; XREF: Obj77_ShipIndex
00018618 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001861E 6E00                       		bgt.s	loc_1804E
00018620 317C 0100 0038             		move.w	#$100,$38(a0)
00018626 317C 0140 0010             		move.w	#$140,$10(a0)
0001862C 317C FF80 0012             		move.w	#-$80,$12(a0)
00018632 4A28 003D                  		tst.b	$3D(a0)
00018636 6700                       		beq.s	loc_18046
00018638 E1E8 0010                  		asl	$10(a0)
0001863C E1E8 0012                  		asl	$12(a0)
00018640                            
00018640                            loc_18046:
00018640 5428 0025                  		addq.b	#2,$25(a0)
00018644 6000 FEEC                  		bra.w	loc_17F38
00018648                            ; ===========================================================================
00018648                            
00018648                            loc_1804E:
00018648 08E8 0000 0022             		bset	#0,$22(a0)
0001864E 5428 003F                  		addq.b	#2,$3F(a0)
00018652 1028 003F                  		move.b	$3F(a0),d0
00018656 4EB9 0000 2C22             		jsr	(CalcSine).l
0001865C 4A41                       		tst.w	d1
0001865E 6A00                       		bpl.s	loc_1806C
00018660 08A8 0000 0022             		bclr	#0,$22(a0)
00018666                            
00018666                            loc_1806C:
00018666 E840                       		asr.w	#4,d0
00018668 4840                       		swap	d0
0001866A 4240                       		clr.w	d0
0001866C D0A8 0030                  		add.l	$30(a0),d0
00018670 4840                       		swap	d0
00018672 3140 0008                  		move.w	d0,8(a0)
00018676 3028 0012                  		move.w	$12(a0),d0
0001867A 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001867E 9268 000C                  		sub.w	$C(a0),d1
00018682 6500                       		bcs.s	loc_180A2
00018684 0441 0048                  		subi.w	#$48,d1
00018688 6500                       		bcs.s	loc_180A2
0001868A E240                       		asr.w	#1,d0
0001868C 0441 0028                  		subi.w	#$28,d1
00018690 6500                       		bcs.s	loc_180A2
00018692 E240                       		asr.w	#1,d0
00018694 0441 0028                  		subi.w	#$28,d1
00018698 6500                       		bcs.s	loc_180A2
0001869A 7000                       		moveq	#0,d0
0001869C                            
0001869C                            loc_180A2:
0001869C 48C0                       		ext.l	d0
0001869E E180                       		asl.l	#8,d0
000186A0 4A28 003D                  		tst.b	$3D(a0)
000186A4 6700                       		beq.s	loc_180AE
000186A6 D080                       		add.l	d0,d0
000186A8                            
000186A8                            loc_180AE:
000186A8 D1A8 0038                  		add.l	d0,$38(a0)
000186AC 3168 0038 000C             		move.w	$38(a0),$C(a0)
000186B2 6000 FE8E                  		bra.w	loc_17F48
000186B6                            ; ===========================================================================
000186B6                            
000186B6                            loc_180BC:				; XREF: Obj77_ShipIndex
000186B6 70FE                       		moveq	#-2,d0
000186B8 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000186BE 6500                       		bcs.s	loc_180D2
000186C0 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000186C6 4268 0010                  		clr.w	$10(a0)
000186CA 5240                       		addq.w	#1,d0
000186CC                            
000186CC                            loc_180D2:
000186CC 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000186D2 6E00                       		bgt.s	loc_180E6
000186D4 317C 00C0 0038             		move.w	#$C0,$38(a0)
000186DA 4268 0012                  		clr.w	$12(a0)
000186DE 5240                       		addq.w	#1,d0
000186E0                            
000186E0                            loc_180E6:
000186E0 6600                       		bne.s	loc_180F2
000186E2 5428 0025                  		addq.b	#2,$25(a0)
000186E6 08A8 0000 0022             		bclr	#0,$22(a0)
000186EC                            
000186EC                            loc_180F2:
000186EC 6000 FE44                  		bra.w	loc_17F38
000186F0                            ; ===========================================================================
000186F0                            
000186F0                            loc_180F6:				; XREF: Obj77_ShipIndex
000186F0 4A28 003D                  		tst.b	$3D(a0)
000186F4 6600                       		bne.s	loc_18112
000186F6 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000186FC 6D00                       		blt.s	loc_18126
000186FE 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018704 6E00                       		bgt.s	loc_18126
00018706 117C 0032 003C             		move.b	#$32,$3C(a0)
0001870C                            
0001870C                            loc_18112:
0001870C 303C 0082                  		move.w	#$82,d0
00018710 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
00018716 08E8 0000 0022             		bset	#0,$22(a0)
0001871C 5428 0025                  		addq.b	#2,$25(a0)
00018720                            
00018720                            loc_18126:
00018720 6000 FE10                  		bra.w	loc_17F38
00018724                            ; ===========================================================================
00018724                            
00018724                            loc_1812A:				; XREF: Obj77_ShipIndex
00018724 4A28 003D                  		tst.b	$3D(a0)
00018728 6600                       		bne.s	loc_18136
0001872A 5328 003C                  		subq.b	#1,$3C(a0)
0001872E 6600                       		bne.s	loc_1814E
00018730                            
00018730                            loc_18136:
00018730 4228 003C                  		clr.b	$3C(a0)
00018734 317C 0400 0010             		move.w	#$400,$10(a0)
0001873A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018740 4228 003D                  		clr.b	$3D(a0)
00018744 5428 0025                  		addq.b	#2,$25(a0)
00018748                            
00018748                            loc_1814E:
00018748 6000 FDE8                  		bra.w	loc_17F38
0001874C                            ; ===========================================================================
0001874C                            
0001874C                            loc_18152:				; XREF: Obj77_ShipIndex
0001874C 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018752 6400                       		bcc.s	loc_18160
00018754 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018758 6000                       		bra.s	loc_18166
0001875A                            ; ===========================================================================
0001875A                            
0001875A                            loc_18160:
0001875A 4A28 0001                  		tst.b	1(a0)
0001875E 6A00                       		bpl.s	Obj77_ShipDel
00018760                            
00018760                            loc_18166:
00018760 6000 FDD0                  		bra.w	loc_17F38
00018764                            ; ===========================================================================
00018764                            
00018764                            Obj77_ShipDel:
00018764 4EF9 0000 DBE4             		jmp	DeleteObject
0001876A                            ; ===========================================================================
0001876A                            
0001876A                            Obj77_FaceMain:				; XREF: Obj77_Index
0001876A 2268 0034                  		movea.l	$34(a0),a1
0001876E 1011                       		move.b	(a1),d0
00018770 B010                       		cmp.b	(a0),d0
00018772 6600                       		bne.s	Obj77_FaceDel
00018774 7000                       		moveq	#0,d0
00018776 1029 0025                  		move.b	$25(a1),d0
0001877A 7201                       		moveq	#1,d1
0001877C 4A28 003D                  		tst.b	$3D(a0)
00018780 6700                       		beq.s	loc_1818C
00018782 720A                       		moveq	#$A,d1
00018784 6000                       		bra.s	loc_181A0
00018786                            ; ===========================================================================
00018786                            
00018786                            loc_1818C:
00018786 4A29 0020                  		tst.b	$20(a1)
0001878A 6600                       		bne.s	loc_18196
0001878C 7205                       		moveq	#5,d1
0001878E 6000                       		bra.s	loc_181A0
00018790                            ; ===========================================================================
00018790                            
00018790                            loc_18196:
00018790 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018796 6500                       		bcs.s	loc_181A0
00018798 7204                       		moveq	#4,d1
0001879A                            
0001879A                            loc_181A0:
0001879A 1141 001C                  		move.b	d1,$1C(a0)
0001879E 0C00 000E                  		cmpi.b	#$E,d0
000187A2 6600                       		bne.s	loc_181B6
000187A4 117C 0006 001C             		move.b	#6,$1C(a0)
000187AA 4A28 0001                  		tst.b	1(a0)
000187AE 6A00                       		bpl.s	Obj77_FaceDel
000187B0                            
000187B0                            loc_181B6:
000187B0 6000                       		bra.s	Obj77_Display
000187B2                            ; ===========================================================================
000187B2                            
000187B2                            Obj77_FaceDel:
000187B2 4EF9 0000 DBE4             		jmp	DeleteObject
000187B8                            ; ===========================================================================
000187B8                            
000187B8                            Obj77_FlameMain:			; XREF: Obj77_Index
000187B8 117C 0007 001C             		move.b	#7,$1C(a0)
000187BE 2268 0034                  		movea.l	$34(a0),a1
000187C2 1011                       		move.b	(a1),d0
000187C4 B010                       		cmp.b	(a0),d0
000187C6 6600                       		bne.s	Obj77_FlameDel
000187C8 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000187CE 6600                       		bne.s	loc_181F0
000187D0 117C 000B 001C             		move.b	#$B,$1C(a0)
000187D6 4A28 0001                  		tst.b	1(a0)
000187DA 6A00                       		bpl.s	Obj77_FlameDel
000187DC 6000                       		bra.s	loc_181F0
000187DE                            ; ===========================================================================
000187DE 4A69 0010                  		tst.w	$10(a1)
000187E2 6700                       		beq.s	loc_181F0
000187E4 117C 0008 001C             		move.b	#8,$1C(a0)
000187EA                            
000187EA                            loc_181F0:
000187EA 6000                       		bra.s	Obj77_Display
000187EC                            ; ===========================================================================
000187EC                            
000187EC                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000187EC 4EF9 0000 DBE4             		jmp	DeleteObject
000187F2                            ; ===========================================================================
000187F2                            
000187F2                            Obj77_Display:
000187F2 43F9 0001 82B8             		lea	(Ani_Eggman).l,a1
000187F8 4EB9 0000 AC42             		jsr	AnimateSprite
000187FE 2268 0034                  		movea.l	$34(a0),a1
00018802 3169 0008 0008             		move.w	8(a1),8(a0)
00018808 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001880E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018814 7003                       		moveq	#3,d0
00018816 C028 0022                  		and.b	$22(a0),d0
0001881A 0228 00FC 0001             		andi.b	#-4,1(a0)
00018820 8128 0001                  		or.b	d0,1(a0)
00018824 4EF9 0000 DBA8             		jmp	DisplaySprite
0001882A                            ; ===========================================================================
0001882A                            ; ---------------------------------------------------------------------------
0001882A                            ; Object 73 - Eggman (MZ)
0001882A                            ; ---------------------------------------------------------------------------
0001882A                            
0001882A                            Obj73:					; XREF: Obj_Index
0001882A 7000                       		moveq	#0,d0
0001882C 1028 0024                  		move.b	$24(a0),d0
00018830 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018834 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018838                            ; ===========================================================================
00018838 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001883A 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001883C 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001883E 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018840 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018842                            
00018842 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018845 0401 04                    		dc.b 4,	1, 4
00018848 0607 04                    		dc.b 6,	7, 4
0001884B 0800 03                    		dc.b 8,	0, 3
0001884E                            ; ===========================================================================
0001884E                            
0001884E                            Obj73_Main:				; XREF: Obj73_Index
0001884E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018854 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001885A 117C 000F 0020             		move.b	#$F,$20(a0)
00018860 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018866 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001886A 2248                       		movea.l	a0,a1
0001886C 7203                       		moveq	#3,d1
0001886E 6000                       		bra.s	Obj73_LoadBoss
00018870                            ; ===========================================================================
00018870                            
00018870                            Obj73_Loop:
00018870 4EB9 0000 E044             		jsr	SingleObjLoad2
00018876 6600                       		bne.s	Obj73_ShipMain
00018878 12BC 0073                  		move.b	#$73,0(a1)
0001887C 3368 0008 0008             		move.w	8(a0),8(a1)
00018882 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018888                            
00018888                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018888 08A8 0000 0022             		bclr	#0,$22(a0)
0001888E 4229 0025                  		clr.b	$25(a1)
00018892 135A 0024                  		move.b	(a2)+,$24(a1)
00018896 135A 001C                  		move.b	(a2)+,$1C(a1)
0001889A 135A 0018                  		move.b	(a2)+,$18(a1)
0001889E 237C 0001 8308 0004        		move.l	#Map_Eggman,4(a1)
000188A6 337C 0400 0002             		move.w	#$400,2(a1)
000188AC 137C 0004 0001             		move.b	#4,1(a1)
000188B2 137C 0020 0019             		move.b	#$20,$19(a1)
000188B8 2348 0034                  		move.l	a0,$34(a1)
000188BC 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000188C0                            
000188C0                            Obj73_ShipMain:
000188C0 7000                       		moveq	#0,d0
000188C2 1028 0025                  		move.b	$25(a0),d0
000188C6 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000188CA 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000188CE 43F9 0001 82B8             		lea	(Ani_Eggman).l,a1
000188D4 4EB9 0000 AC42             		jsr	AnimateSprite
000188DA 7003                       		moveq	#3,d0
000188DC C028 0022                  		and.b	$22(a0),d0
000188E0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000188E6 8128 0001                  		or.b	d0,1(a0)
000188EA 4EF9 0000 DBA8             		jmp	DisplaySprite
000188F0                            ; ===========================================================================
000188F0 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000188F2 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000188F4 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000188F6 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000188F8 0000                       		dc.w loc_18582-Obj73_ShipIndex
000188FA                            ; ===========================================================================
000188FA                            
000188FA                            loc_18302:				; XREF: Obj73_ShipIndex
000188FA 1028 003F                  		move.b	$3F(a0),d0
000188FE 5428 003F                  		addq.b	#2,$3F(a0)
00018902 4EB9 0000 2C22             		jsr	(CalcSine).l
00018908 E440                       		asr.w	#2,d0
0001890A 3140 0012                  		move.w	d0,$12(a0)
0001890E 317C FF00 0010             		move.w	#-$100,$10(a0)
00018914 6100 F592                  		bsr.w	BossMove
00018918 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001891E 6600                       		bne.s	loc_18334
00018920 5428 0025                  		addq.b	#2,$25(a0)
00018924 4228 0028                  		clr.b	$28(a0)
00018928 42A8 0010                  		clr.l	$10(a0)
0001892C                            
0001892C                            loc_18334:
0001892C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018932 1140 0034                  		move.b	d0,$34(a0)
00018936                            
00018936                            loc_1833E:
00018936 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001893C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018942 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018948 6400                       		bcc.s	locret_18390
0001894A 4A28 0022                  		tst.b	$22(a0)
0001894E 6B00                       		bmi.s	loc_18392
00018950 4A28 0020                  		tst.b	$20(a0)
00018954 6600                       		bne.s	locret_18390
00018956 4A28 003E                  		tst.b	$3E(a0)
0001895A 6600                       		bne.s	loc_18374
0001895C 117C 0028 003E             		move.b	#$28,$3E(a0)
00018962 303C 00AC                  		move.w	#$AC,d0
00018966 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001896C                            
0001896C                            loc_18374:
0001896C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018970 7000                       		moveq	#0,d0
00018972 4A51                       		tst.w	(a1)
00018974 6600                       		bne.s	loc_18382
00018976 303C 0EEE                  		move.w	#$EEE,d0
0001897A                            
0001897A                            loc_18382:
0001897A 3280                       		move.w	d0,(a1)
0001897C 5328 003E                  		subq.b	#1,$3E(a0)
00018980 6600                       		bne.s	locret_18390
00018982 117C 000F 0020             		move.b	#$F,$20(a0)
00018988                            
00018988                            locret_18390:
00018988 4E75                       		rts	
0001898A                            ; ===========================================================================
0001898A                            
0001898A                            loc_18392:				; XREF: loc_1833E
0001898A 7064                       		moveq	#100,d0
0001898C 6100 0000                  		bsr.w	AddPoints
00018990 117C 0004 0025             		move.b	#4,$25(a0)
00018996 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001899C 4268 0010                  		clr.w	$10(a0)
000189A0 4E75                       		rts	
000189A2                            ; ===========================================================================
000189A2                            
000189A2                            loc_183AA:				; XREF: Obj73_ShipIndex
000189A2 7000                       		moveq	#0,d0
000189A4 1028 0028                  		move.b	$28(a0),d0
000189A8 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000189AC 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000189B0 0228 0006 0028             		andi.b	#6,$28(a0)
000189B6 6000 FF7E                  		bra.w	loc_1833E
000189BA                            ; ===========================================================================
000189BA 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000189BC 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189BE 0000                       		dc.w loc_183CA-off_183C2
000189C0 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189C2                            ; ===========================================================================
000189C2                            
000189C2                            loc_183CA:				; XREF: off_183C2
000189C2 4A68 0010                  		tst.w	$10(a0)
000189C6 6600                       		bne.s	loc_183FE
000189C8 7040                       		moveq	#$40,d0
000189CA 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000189D0 6700                       		beq.s	loc_183E6
000189D2 6500                       		bcs.s	loc_183DE
000189D4 4440                       		neg.w	d0
000189D6                            
000189D6                            loc_183DE:
000189D6 3140 0012                  		move.w	d0,$12(a0)
000189DA 6000 F4CC                  		bra.w	BossMove
000189DE                            ; ===========================================================================
000189DE                            
000189DE                            loc_183E6:
000189DE 317C 0200 0010             		move.w	#$200,$10(a0)
000189E4 317C 0100 0012             		move.w	#$100,$12(a0)
000189EA 0828 0000 0022             		btst	#0,$22(a0)
000189F0 6600                       		bne.s	loc_183FE
000189F2 4468 0010                  		neg.w	$10(a0)
000189F6                            
000189F6                            loc_183FE:
000189F6 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000189FC 6400                       		bcc.s	Obj73_MakeLava
000189FE 6100 F4A8                  		bsr.w	BossMove
00018A02 5968 0012                  		subq.w	#4,$12(a0)
00018A06                            
00018A06                            Obj73_MakeLava:
00018A06 5328 0034                  		subq.b	#1,$34(a0)
00018A0A 6400                       		bcc.s	loc_1845C
00018A0C 4EB9 0000 E02E             		jsr	SingleObjLoad
00018A12 6600                       		bne.s	loc_1844A
00018A14 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018A18 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018A1E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A24 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018A2A 80FC 0050                  		divu.w	#$50,d0
00018A2E 4840                       		swap	d0
00018A30 0640 1878                  		addi.w	#$1878,d0
00018A34 3340 0008                  		move.w	d0,8(a1)
00018A38 EE09                       		lsr.b	#7,d1
00018A3A 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018A40                            
00018A40                            loc_1844A:
00018A40 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A46 0200 001F                  		andi.b	#$1F,d0
00018A4A 0600 0040                  		addi.b	#$40,d0
00018A4E 1140 0034                  		move.b	d0,$34(a0)
00018A52                            
00018A52                            loc_1845C:
00018A52 0828 0000 0022             		btst	#0,$22(a0)
00018A58 6700                       		beq.s	loc_18474
00018A5A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A60 6D00                       		blt.s	locret_1849C
00018A62 317C 1910 0030             		move.w	#$1910,$30(a0)
00018A68 6000                       		bra.s	loc_18482
00018A6A                            ; ===========================================================================
00018A6A                            
00018A6A                            loc_18474:
00018A6A 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018A70 6E00                       		bgt.s	locret_1849C
00018A72 317C 1830 0030             		move.w	#$1830,$30(a0)
00018A78                            
00018A78                            loc_18482:
00018A78 4268 0010                  		clr.w	$10(a0)
00018A7C 317C FE80 0012             		move.w	#-$180,$12(a0)
00018A82 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018A88 6400                       		bcc.s	loc_18498
00018A8A 4468 0012                  		neg.w	$12(a0)
00018A8E                            
00018A8E                            loc_18498:
00018A8E 5428 0028                  		addq.b	#2,$28(a0)
00018A92                            
00018A92                            locret_1849C:
00018A92 4E75                       		rts	
00018A94                            ; ===========================================================================
00018A94                            
00018A94                            Obj73_MakeLava2:			; XREF: off_183C2
00018A94 6100 F412                  		bsr.w	BossMove
00018A98 3028 0038                  		move.w	$38(a0),d0
00018A9C 0440 022C                  		subi.w	#$22C,d0
00018AA0 6E00                       		bgt.s	locret_184F4
00018AA2 303C 022C                  		move.w	#$22C,d0
00018AA6 4A68 0012                  		tst.w	$12(a0)
00018AAA 6700                       		beq.s	loc_184EA
00018AAC 4268 0012                  		clr.w	$12(a0)
00018AB0 317C 0050 003C             		move.w	#$50,$3C(a0)
00018AB6 0868 0000 0022             		bchg	#0,$22(a0)
00018ABC 4EB9 0000 E02E             		jsr	SingleObjLoad
00018AC2 6600                       		bne.s	loc_184EA
00018AC4 3368 0030 0008             		move.w	$30(a0),8(a1)
00018ACA 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018AD0 0669 0018 000C             		addi.w	#$18,$C(a1)
00018AD6 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018ADA 137C 0001 0028             		move.b	#1,$28(a1)
00018AE0                            
00018AE0                            loc_184EA:
00018AE0 5368 003C                  		subq.w	#1,$3C(a0)
00018AE4 6600                       		bne.s	locret_184F4
00018AE6 5428 0028                  		addq.b	#2,$28(a0)
00018AEA                            
00018AEA                            locret_184F4:
00018AEA 4E75                       		rts	
00018AEC                            ; ===========================================================================
00018AEC                            
00018AEC                            loc_184F6:				; XREF: Obj73_ShipIndex
00018AEC 5368 003C                  		subq.w	#1,$3C(a0)
00018AF0 6B00                       		bmi.s	loc_18500
00018AF2 6000 F372                  		bra.w	BossDefeated
00018AF6                            ; ===========================================================================
00018AF6                            
00018AF6                            loc_18500:
00018AF6 08E8 0000 0022             		bset	#0,$22(a0)
00018AFC 08A8 0007 0022             		bclr	#7,$22(a0)
00018B02 4268 0010                  		clr.w	$10(a0)
00018B06 5428 0025                  		addq.b	#2,$25(a0)
00018B0A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018B10 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B14 6600                       		bne.s	locret_1852A
00018B16 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018B1C 4268 0012                  		clr.w	$12(a0)
00018B20                            
00018B20                            locret_1852A:
00018B20 4E75                       		rts	
00018B22                            ; ===========================================================================
00018B22                            
00018B22                            loc_1852C:				; XREF: Obj73_ShipIndex
00018B22 5268 003C                  		addq.w	#1,$3C(a0)
00018B26 6700                       		beq.s	loc_18544
00018B28 6A00                       		bpl.s	loc_1854E
00018B2A 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018B30 6400                       		bcc.s	loc_18544
00018B32 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B38 6000                       		bra.s	loc_1857A
00018B3A                            ; ===========================================================================
00018B3A                            
00018B3A                            loc_18544:
00018B3A 4268 0012                  		clr.w	$12(a0)
00018B3E 4268 003C                  		clr.w	$3C(a0)
00018B42 6000                       		bra.s	loc_1857A
00018B44                            ; ===========================================================================
00018B44                            
00018B44                            loc_1854E:
00018B44 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B4A 6500                       		bcs.s	loc_18566
00018B4C 6700                       		beq.s	loc_1856C
00018B4E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B54 6500                       		bcs.s	loc_1857A
00018B56 5428 0025                  		addq.b	#2,$25(a0)
00018B5A 6000                       		bra.s	loc_1857A
00018B5C                            ; ===========================================================================
00018B5C                            
00018B5C                            loc_18566:
00018B5C 5168 0012                  		subq.w	#8,$12(a0)
00018B60 6000                       		bra.s	loc_1857A
00018B62                            ; ===========================================================================
00018B62                            
00018B62                            loc_1856C:
00018B62 4268 0012                  		clr.w	$12(a0)
00018B66 303C 0083                  		move.w	#$83,d0
00018B6A 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018B70                            
00018B70                            loc_1857A:
00018B70 6100 F336                  		bsr.w	BossMove
00018B74 6000 FDC0                  		bra.w	loc_1833E
00018B78                            ; ===========================================================================
00018B78                            
00018B78                            loc_18582:				; XREF: Obj73_ShipIndex
00018B78 317C 0500 0010             		move.w	#$500,$10(a0)
00018B7E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B84 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018B8A 6400                       		bcc.s	loc_1859C
00018B8C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018B90 6000                       		bra.s	loc_185A2
00018B92                            ; ===========================================================================
00018B92                            
00018B92                            loc_1859C:
00018B92 4A28 0001                  		tst.b	1(a0)
00018B96 6A00                       		bpl.s	Obj73_ShipDel
00018B98                            
00018B98                            loc_185A2:
00018B98 6100 F30E                  		bsr.w	BossMove
00018B9C 6000 FD98                  		bra.w	loc_1833E
00018BA0                            ; ===========================================================================
00018BA0                            
00018BA0                            Obj73_ShipDel:
00018BA0 4EF9 0000 DBE4             		jmp	DeleteObject
00018BA6                            ; ===========================================================================
00018BA6                            
00018BA6                            Obj73_FaceMain:				; XREF: Obj73_Index
00018BA6 7000                       		moveq	#0,d0
00018BA8 7201                       		moveq	#1,d1
00018BAA 2268 0034                  		movea.l	$34(a0),a1
00018BAE 1029 0025                  		move.b	$25(a1),d0
00018BB2 5540                       		subq.w	#2,d0
00018BB4 6600                       		bne.s	loc_185D2
00018BB6 0829 0001 0028             		btst	#1,$28(a1)
00018BBC 6700                       		beq.s	loc_185DA
00018BBE 4A69 0012                  		tst.w	$12(a1)
00018BC2 6600                       		bne.s	loc_185DA
00018BC4 7204                       		moveq	#4,d1
00018BC6 6000                       		bra.s	loc_185EE
00018BC8                            ; ===========================================================================
00018BC8                            
00018BC8                            loc_185D2:
00018BC8 5500                       		subq.b	#2,d0
00018BCA 6B00                       		bmi.s	loc_185DA
00018BCC 720A                       		moveq	#$A,d1
00018BCE 6000                       		bra.s	loc_185EE
00018BD0                            ; ===========================================================================
00018BD0                            
00018BD0                            loc_185DA:
00018BD0 4A29 0020                  		tst.b	$20(a1)
00018BD4 6600                       		bne.s	loc_185E4
00018BD6 7205                       		moveq	#5,d1
00018BD8 6000                       		bra.s	loc_185EE
00018BDA                            ; ===========================================================================
00018BDA                            
00018BDA                            loc_185E4:
00018BDA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018BE0 6500                       		bcs.s	loc_185EE
00018BE2 7204                       		moveq	#4,d1
00018BE4                            
00018BE4                            loc_185EE:
00018BE4 1141 001C                  		move.b	d1,$1C(a0)
00018BE8 5900                       		subq.b	#4,d0
00018BEA 6600                       		bne.s	loc_18602
00018BEC 117C 0006 001C             		move.b	#6,$1C(a0)
00018BF2 4A28 0001                  		tst.b	1(a0)
00018BF6 6A00                       		bpl.s	Obj73_FaceDel
00018BF8                            
00018BF8                            loc_18602:
00018BF8 6000                       		bra.s	Obj73_Display
00018BFA                            ; ===========================================================================
00018BFA                            
00018BFA                            Obj73_FaceDel:
00018BFA 4EF9 0000 DBE4             		jmp	DeleteObject
00018C00                            ; ===========================================================================
00018C00                            
00018C00                            Obj73_FlameMain:			; XREF: Obj73_Index
00018C00 117C 0007 001C             		move.b	#7,$1C(a0)
00018C06 2268 0034                  		movea.l	$34(a0),a1
00018C0A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C10 6D00                       		blt.s	loc_1862A
00018C12 117C 000B 001C             		move.b	#$B,$1C(a0)
00018C18 4A28 0001                  		tst.b	1(a0)
00018C1C 6A00                       		bpl.s	Obj73_FlameDel
00018C1E 6000                       		bra.s	loc_18636
00018C20                            ; ===========================================================================
00018C20                            
00018C20                            loc_1862A:
00018C20 4A69 0010                  		tst.w	$10(a1)
00018C24 6700                       		beq.s	loc_18636
00018C26 117C 0008 001C             		move.b	#8,$1C(a0)
00018C2C                            
00018C2C                            loc_18636:
00018C2C 6000                       		bra.s	Obj73_Display
00018C2E                            ; ===========================================================================
00018C2E                            
00018C2E                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018C2E 4EF9 0000 DBE4             		jmp	DeleteObject
00018C34                            ; ===========================================================================
00018C34                            
00018C34                            Obj73_Display:
00018C34 43F9 0001 82B8             		lea	(Ani_Eggman).l,a1
00018C3A 4EB9 0000 AC42             		jsr	AnimateSprite
00018C40                            
00018C40                            loc_1864A:
00018C40 2268 0034                  		movea.l	$34(a0),a1
00018C44 3169 0008 0008             		move.w	8(a1),8(a0)
00018C4A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018C50 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018C56 7003                       		moveq	#3,d0
00018C58 C028 0022                  		and.b	$22(a0),d0
00018C5C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018C62 8128 0001                  		or.b	d0,1(a0)
00018C66 4EF9 0000 DBA8             		jmp	DisplaySprite
00018C6C                            ; ===========================================================================
00018C6C                            
00018C6C                            Obj73_TubeMain:				; XREF: Obj73_Index
00018C6C 2268 0034                  		movea.l	$34(a0),a1
00018C70 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C76 6600                       		bne.s	loc_18688
00018C78 4A28 0001                  		tst.b	1(a0)
00018C7C 6A00                       		bpl.s	Obj73_TubeDel
00018C7E                            
00018C7E                            loc_18688:
00018C7E 217C 0001 83D0 0004        		move.l	#Map_BossItems,4(a0)
00018C86 317C 246C 0002             		move.w	#$246C,2(a0)
00018C8C 117C 0004 001A             		move.b	#4,$1A(a0)
00018C92 60AC                       		bra.s	loc_1864A
00018C94                            ; ===========================================================================
00018C94                            
00018C94                            Obj73_TubeDel:
00018C94 4EF9 0000 DBE4             		jmp	DeleteObject
00018C9A                            ; ===========================================================================
00018C9A                            ; ---------------------------------------------------------------------------
00018C9A                            ; Object 74 - lava that	Eggman drops (MZ)
00018C9A                            ; ---------------------------------------------------------------------------
00018C9A                            
00018C9A                            Obj74:					; XREF: Obj_Index
00018C9A 7000                       		moveq	#0,d0
00018C9C 1028 0024                  		move.b	$24(a0),d0
00018CA0 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018CA4 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018CA8 4EF9 0000 DBA8             		jmp	DisplaySprite
00018CAE                            ; ===========================================================================
00018CAE 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018CB0 0000                       		dc.w Obj74_Action-Obj74_Index
00018CB2 0000                       		dc.w loc_18886-Obj74_Index
00018CB4 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018CB6                            ; ===========================================================================
00018CB6                            
00018CB6                            Obj74_Main:				; XREF: Obj74_Index
00018CB6 117C 0008 0016             		move.b	#8,$16(a0)
00018CBC 117C 0008 0017             		move.b	#8,$17(a0)
00018CC2 217C 0000 B86C 0004        		move.l	#Map_obj14,4(a0)
00018CCA 317C 0345 0002             		move.w	#$345,2(a0)
00018CD0 117C 0004 0001             		move.b	#4,1(a0)
00018CD6 117C 0005 0018             		move.b	#5,$18(a0)
00018CDC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CE2 117C 0008 0019             		move.b	#8,$19(a0)
00018CE8 5428 0024                  		addq.b	#2,$24(a0)
00018CEC 4A28 0028                  		tst.b	$28(a0)
00018CF0 6600                       		bne.s	loc_1870A
00018CF2 117C 008B 0020             		move.b	#$8B,$20(a0)
00018CF8 5428 0024                  		addq.b	#2,$24(a0)
00018CFC 6000 0000                  		bra.w	loc_18886
00018D00                            ; ===========================================================================
00018D00                            
00018D00                            loc_1870A:
00018D00 117C 001E 0029             		move.b	#$1E,$29(a0)
00018D06 303C 00AE                  		move.w	#$AE,d0
00018D0A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018D10                            
00018D10                            Obj74_Action:				; XREF: Obj74_Index
00018D10 7000                       		moveq	#0,d0
00018D12 1028 0025                  		move.b	$25(a0),d0
00018D16 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018D1A 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018D1E 4EB9 0000 DB82             		jsr	SpeedToPos
00018D24 43F9 0000 EA62             		lea	(Ani_obj14).l,a1
00018D2A 4EB9 0000 AC42             		jsr	AnimateSprite
00018D30 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018D36 6200                       		bhi.s	Obj74_Delete
00018D38 4E75                       		rts	
00018D3A                            ; ===========================================================================
00018D3A                            
00018D3A                            Obj74_Delete:
00018D3A 4EF9 0000 DBE4             		jmp	DeleteObject
00018D40                            ; ===========================================================================
00018D40 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018D42 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018D44 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018D46 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018D48                            ; ===========================================================================
00018D48                            
00018D48                            Obj74_Drop:				; XREF: Obj74_Index2
00018D48 08E8 0001 0022             		bset	#1,$22(a0)
00018D4E 5328 0029                  		subq.b	#1,$29(a0)
00018D52 6A00                       		bpl.s	locret_18780
00018D54 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D5A 4228 0028                  		clr.b	$28(a0)
00018D5E 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D64 08A8 0001 0022             		bclr	#1,$22(a0)
00018D6A 6100 C698                  		bsr.w	ObjHitFloor
00018D6E 4A41                       		tst.w	d1
00018D70 6A00                       		bpl.s	locret_18780
00018D72 5428 0025                  		addq.b	#2,$25(a0)
00018D76                            
00018D76                            locret_18780:
00018D76 4E75                       		rts	
00018D78                            ; ===========================================================================
00018D78                            
00018D78                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018D78 5568 000C                  		subq.w	#2,$C(a0)
00018D7C 08E8 0007 0002             		bset	#7,2(a0)
00018D82 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018D88 4268 0012                  		clr.w	$12(a0)
00018D8C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D92 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D98 117C 0003 0029             		move.b	#3,$29(a0)
00018D9E 4EB9 0000 E044             		jsr	SingleObjLoad2
00018DA4 6600                       		bne.s	loc_187CA
00018DA6 47D1                       		lea	(a1),a3
00018DA8 45D0                       		lea	(a0),a2
00018DAA 7003                       		moveq	#3,d0
00018DAC                            
00018DAC                            Obj74_Loop:
00018DAC 26DA                       		move.l	(a2)+,(a3)+
00018DAE 26DA                       		move.l	(a2)+,(a3)+
00018DB0 26DA                       		move.l	(a2)+,(a3)+
00018DB2 26DA                       		move.l	(a2)+,(a3)+
00018DB4 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018DB8                            
00018DB8 4469 0010                  		neg.w	$10(a1)
00018DBC 5429 0025                  		addq.b	#2,$25(a1)
00018DC0                            
00018DC0                            loc_187CA:
00018DC0 5428 0025                  		addq.b	#2,$25(a0)
00018DC4 4E75                       		rts	
00018DC6                            
00018DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DC6                            
00018DC6                            
00018DC6                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018DC6 4EB9 0000 E044             		jsr	SingleObjLoad2
00018DCC 6600                       		bne.s	locret_187EE
00018DCE 3368 0008 0008             		move.w	8(a0),8(a1)
00018DD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DDA 12BC 0074                  		move.b	#$74,(a1)
00018DDE 337C 0067 0028             		move.w	#$67,$28(a1)
00018DE4                            
00018DE4                            locret_187EE:
00018DE4 4E75                       		rts	
00018DE6                            ; End of function Obj74_Duplicate2
00018DE6                            
00018DE6                            ; ===========================================================================
00018DE6                            
00018DE6                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018DE6 6100 C61C                  		bsr.w	ObjHitFloor
00018DEA 4A41                       		tst.w	d1
00018DEC 6A00                       		bpl.s	loc_18826
00018DEE 3028 0008                  		move.w	8(a0),d0
00018DF2 0C40 1940                  		cmpi.w	#$1940,d0
00018DF6 6E00                       		bgt.s	loc_1882C
00018DF8 3228 0030                  		move.w	$30(a0),d1
00018DFC B240                       		cmp.w	d0,d1
00018DFE 6700                       		beq.s	loc_1881E
00018E00 0240 0010                  		andi.w	#$10,d0
00018E04 0241 0010                  		andi.w	#$10,d1
00018E08 B240                       		cmp.w	d0,d1
00018E0A 6700                       		beq.s	loc_1881E
00018E0C 61B8                       		bsr.s	Obj74_Duplicate2
00018E0E 3168 0008 0032             		move.w	8(a0),$32(a0)
00018E14                            
00018E14                            loc_1881E:
00018E14 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E1A 4E75                       		rts	
00018E1C                            ; ===========================================================================
00018E1C                            
00018E1C                            loc_18826:
00018E1C 5428 0025                  		addq.b	#2,$25(a0)
00018E20 4E75                       		rts	
00018E22                            ; ===========================================================================
00018E22                            
00018E22                            loc_1882C:
00018E22 5428 0024                  		addq.b	#2,$24(a0)
00018E26 4E75                       		rts	
00018E28                            ; ===========================================================================
00018E28                            
00018E28                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018E28 08A8 0001 0022             		bclr	#1,$22(a0)
00018E2E 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018E34 3028 0008                  		move.w	8(a0),d0
00018E38 9068 0032                  		sub.w	$32(a0),d0
00018E3C 6A00                       		bpl.s	loc_1884A
00018E3E 4440                       		neg.w	d0
00018E40                            
00018E40                            loc_1884A:
00018E40 0C40 0012                  		cmpi.w	#$12,d0
00018E44 6600                       		bne.s	loc_18856
00018E46 08A8 0007 0002             		bclr	#7,2(a0)
00018E4C                            
00018E4C                            loc_18856:
00018E4C 6100 C5B6                  		bsr.w	ObjHitFloor
00018E50 4A41                       		tst.w	d1
00018E52 6A00                       		bpl.s	locret_1887E
00018E54 5328 0029                  		subq.b	#1,$29(a0)
00018E58 6700                       		beq.s	Obj74_Delete2
00018E5A 4268 0012                  		clr.w	$12(a0)
00018E5E 3168 0032 0008             		move.w	$32(a0),8(a0)
00018E64 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E6A 08E8 0007 0002             		bset	#7,2(a0)
00018E70 5528 0025                  		subq.b	#2,$25(a0)
00018E74                            
00018E74                            locret_1887E:
00018E74 4E75                       		rts	
00018E76                            ; ===========================================================================
00018E76                            
00018E76                            Obj74_Delete2:
00018E76 4EF9 0000 DBE4             		jmp	DeleteObject
00018E7C                            ; ===========================================================================
00018E7C                            
00018E7C                            loc_18886:				; XREF: Obj74_Index
00018E7C 08E8 0007 0002             		bset	#7,2(a0)
00018E82 5328 0029                  		subq.b	#1,$29(a0)
00018E86 6600                       		bne.s	Obj74_Animate
00018E88 117C 0001 001C             		move.b	#1,$1C(a0)
00018E8E 5968 000C                  		subq.w	#4,$C(a0)
00018E92 4228 0020                  		clr.b	$20(a0)
00018E96                            
00018E96                            Obj74_Animate:
00018E96 43F9 0000 EA62             		lea	(Ani_obj14).l,a1
00018E9C 4EF9 0000 AC42             		jmp	AnimateSprite
00018EA2                            ; ===========================================================================
00018EA2                            
00018EA2                            Obj74_Delete3:				; XREF: Obj74_Index
00018EA2 4EF9 0000 DBE4             		jmp	DeleteObject
00018EA8                            ; ===========================================================================
00018EA8                            
00018EA8                            Obj7A_Delete:
00018EA8 4EF9 0000 DBE4             		jmp	DeleteObject
00018EAE                            ; ===========================================================================
00018EAE                            ; ---------------------------------------------------------------------------
00018EAE                            ; Object 7A - Eggman (SLZ)
00018EAE                            ; ---------------------------------------------------------------------------
00018EAE                            
00018EAE                            Obj7A:					; XREF: Obj_Index
00018EAE 7000                       		moveq	#0,d0
00018EB0 1028 0024                  		move.b	$24(a0),d0
00018EB4 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018EB8 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018EBC                            ; ===========================================================================
00018EBC 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018EBE 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018EC0 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018EC2 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018EC4 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018EC6                            
00018EC6 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018EC9 0401 04                    		dc.b 4,	1, 4
00018ECC 0607 04                    		dc.b 6,	7, 4
00018ECF 0800 03                    		dc.b 8,	0, 3
00018ED2                            ; ===========================================================================
00018ED2                            
00018ED2                            Obj7A_Main:				; XREF: Obj7A_Index
00018ED2 317C 2188 0008             		move.w	#$2188,8(a0)
00018ED8 317C 0228 000C             		move.w	#$228,$C(a0)
00018EDE 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EE4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EEA 117C 000F 0020             		move.b	#$F,$20(a0)
00018EF0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018EF6 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018EFA 2248                       		movea.l	a0,a1
00018EFC 7203                       		moveq	#3,d1
00018EFE 6000                       		bra.s	Obj7A_LoadBoss
00018F00                            ; ===========================================================================
00018F00                            
00018F00                            Obj7A_Loop:
00018F00 4EB9 0000 E044             		jsr	SingleObjLoad2
00018F06 6600                       		bne.s	loc_1895C
00018F08 12BC 007A                  		move.b	#$7A,0(a1)
00018F0C 3368 0008 0008             		move.w	8(a0),8(a1)
00018F12 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F18                            
00018F18                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018F18 08A8 0000 0022             		bclr	#0,$22(a0)
00018F1E 4229 0025                  		clr.b	$25(a1)
00018F22 135A 0024                  		move.b	(a2)+,$24(a1)
00018F26 135A 001C                  		move.b	(a2)+,$1C(a1)
00018F2A 135A 0018                  		move.b	(a2)+,$18(a1)
00018F2E 237C 0001 8308 0004        		move.l	#Map_Eggman,4(a1)
00018F36 337C 0400 0002             		move.w	#$400,2(a1)
00018F3C 137C 0004 0001             		move.b	#4,1(a1)
00018F42 137C 0020 0019             		move.b	#$20,$19(a1)
00018F48 2348 0034                  		move.l	a0,$34(a1)
00018F4C 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018F50                            
00018F50                            loc_1895C:
00018F50 43F8 D040                  		lea	($FFFFD040).w,a1
00018F54 45E8 002A                  		lea	$2A(a0),a2
00018F58 705E                       		moveq	#$5E,d0
00018F5A 723E                       		moveq	#$3E,d1
00018F5C                            
00018F5C                            loc_18968:
00018F5C B011                       		cmp.b	(a1),d0
00018F5E 6600                       		bne.s	loc_18974
00018F60 4A29 0028                  		tst.b	$28(a1)
00018F64 6700                       		beq.s	loc_18974
00018F66 34C9                       		move.w	a1,(a2)+
00018F68                            
00018F68                            loc_18974:
00018F68 D2FC 0040                  		adda.w	#$40,a1
00018F6C 51C9 FFEE                  		dbf	d1,loc_18968
00018F70                            
00018F70                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018F70 7000                       		moveq	#0,d0
00018F72 1028 0025                  		move.b	$25(a0),d0
00018F76 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018F7A 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018F7E 43F9 0001 82B8             		lea	(Ani_Eggman).l,a1
00018F84 4EB9 0000 AC42             		jsr	AnimateSprite
00018F8A 7003                       		moveq	#3,d0
00018F8C C028 0022                  		and.b	$22(a0),d0
00018F90 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018F96 8128 0001                  		or.b	d0,1(a0)
00018F9A 4EF9 0000 DBA8             		jmp	DisplaySprite
00018FA0                            ; ===========================================================================
00018FA0 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018FA2 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018FA4 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018FA6 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018FA8 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018FAA 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018FAC                            ; ===========================================================================
00018FAC                            
00018FAC                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018FAC 317C FF00 0010             		move.w	#-$100,$10(a0)
00018FB2 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018FB8 6400                       		bcc.s	loc_189CA
00018FBA 5428 0025                  		addq.b	#2,$25(a0)
00018FBE                            
00018FBE                            loc_189CA:
00018FBE 6100 EEE8                  		bsr.w	BossMove
00018FC2 1028 003F                  		move.b	$3F(a0),d0
00018FC6 5428 003F                  		addq.b	#2,$3F(a0)
00018FCA 4EB9 0000 2C22             		jsr	(CalcSine).l
00018FD0 EC40                       		asr.w	#6,d0
00018FD2 D068 0038                  		add.w	$38(a0),d0
00018FD6 3140 000C                  		move.w	d0,$C(a0)
00018FDA 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FE0 6000                       		bra.s	loc_189FE
00018FE2                            ; ===========================================================================
00018FE2                            
00018FE2                            loc_189EE:
00018FE2 6100 EEC4                  		bsr.w	BossMove
00018FE6 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018FEC 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FF2                            
00018FF2                            loc_189FE:
00018FF2 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018FF8 6400                       		bcc.s	locret_18A44
00018FFA 4A28 0022                  		tst.b	$22(a0)
00018FFE 6B00                       		bmi.s	loc_18A46
00019000 4A28 0020                  		tst.b	$20(a0)
00019004 6600                       		bne.s	locret_18A44
00019006 4A28 003E                  		tst.b	$3E(a0)
0001900A 6600                       		bne.s	loc_18A28
0001900C 117C 0020 003E             		move.b	#$20,$3E(a0)
00019012 303C 00AC                  		move.w	#$AC,d0
00019016 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001901C                            
0001901C                            loc_18A28:
0001901C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019020 7000                       		moveq	#0,d0
00019022 4A51                       		tst.w	(a1)
00019024 6600                       		bne.s	loc_18A36
00019026 303C 0EEE                  		move.w	#$EEE,d0
0001902A                            
0001902A                            loc_18A36:
0001902A 3280                       		move.w	d0,(a1)
0001902C 5328 003E                  		subq.b	#1,$3E(a0)
00019030 6600                       		bne.s	locret_18A44
00019032 117C 000F 0020             		move.b	#$F,$20(a0)
00019038                            
00019038                            locret_18A44:
00019038 4E75                       		rts	
0001903A                            ; ===========================================================================
0001903A                            
0001903A                            loc_18A46:
0001903A 7064                       		moveq	#100,d0
0001903C 6100 0000                  		bsr.w	AddPoints
00019040 117C 0006 0025             		move.b	#6,$25(a0)
00019046 117C 0078 003C             		move.b	#$78,$3C(a0)
0001904C 4268 0010                  		clr.w	$10(a0)
00019050 4E75                       		rts	
00019052                            ; ===========================================================================
00019052                            
00019052                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019052 3028 0030                  		move.w	$30(a0),d0
00019056 317C 0200 0010             		move.w	#$200,$10(a0)
0001905C 0828 0000 0022             		btst	#0,$22(a0)
00019062 6600                       		bne.s	loc_18A7C
00019064 4468 0010                  		neg.w	$10(a0)
00019068 0C40 2008                  		cmpi.w	#$2008,d0
0001906C 6E00                       		bgt.s	loc_18A88
0001906E 6000                       		bra.s	loc_18A82
00019070                            ; ===========================================================================
00019070                            
00019070                            loc_18A7C:
00019070 0C40 2138                  		cmpi.w	#$2138,d0
00019074 6D00                       		blt.s	loc_18A88
00019076                            
00019076                            loc_18A82:
00019076 0868 0000 0022             		bchg	#0,$22(a0)
0001907C                            
0001907C                            loc_18A88:
0001907C 3028 0008                  		move.w	8(a0),d0
00019080 72FF                       		moveq	#-1,d1
00019082 7402                       		moveq	#2,d2
00019084 45E8 002A                  		lea	$2A(a0),a2
00019088 7828                       		moveq	#$28,d4
0001908A 4A68 0010                  		tst.w	$10(a0)
0001908E 6A00                       		bpl.s	loc_18A9E
00019090 4444                       		neg.w	d4
00019092                            
00019092                            loc_18A9E:
00019092 321A                       		move.w	(a2)+,d1
00019094 2641                       		movea.l	d1,a3
00019096 082B 0003 0022             		btst	#3,$22(a3)
0001909C 6600                       		bne.s	loc_18AB4
0001909E 362B 0008                  		move.w	8(a3),d3
000190A2 D644                       		add.w	d4,d3
000190A4 9640                       		sub.w	d0,d3
000190A6 6700                       		beq.s	loc_18AC0
000190A8                            
000190A8                            loc_18AB4:
000190A8 51CA FFE8                  		dbf	d2,loc_18A9E
000190AC                            
000190AC 1142 0028                  		move.b	d2,$28(a0)
000190B0 6000 FF0C                  		bra.w	loc_189CA
000190B4                            ; ===========================================================================
000190B4                            
000190B4                            loc_18AC0:
000190B4 1142 0028                  		move.b	d2,$28(a0)
000190B8 5428 0025                  		addq.b	#2,$25(a0)
000190BC 117C 0028 003C             		move.b	#$28,$3C(a0)
000190C2 6000 FEFA                  		bra.w	loc_189CA
000190C6                            ; ===========================================================================
000190C6                            
000190C6                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000190C6 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000190CC 6600                       		bne.s	loc_18B36
000190CE 70FF                       		moveq	#-1,d0
000190D0 1028 0028                  		move.b	$28(a0),d0
000190D4 4880                       		ext.w	d0
000190D6 6B00                       		bmi.s	loc_18B40
000190D8 5540                       		subq.w	#2,d0
000190DA 4440                       		neg.w	d0
000190DC D040                       		add.w	d0,d0
000190DE 43E8 002A                  		lea	$2A(a0),a1
000190E2 3031 0000                  		move.w	(a1,d0.w),d0
000190E6 2440                       		movea.l	d0,a2
000190E8 43F8 D040                  		lea	($FFFFD040).w,a1
000190EC 723E                       		moveq	#$3E,d1
000190EE                            
000190EE                            loc_18AFA:
000190EE B0A9 003C                  		cmp.l	$3C(a1),d0
000190F2 6700                       		beq.s	loc_18B40
000190F4 D2FC 0040                  		adda.w	#$40,a1
000190F8 51C9 FFF4                  		dbf	d1,loc_18AFA
000190FC                            
000190FC 2F08                       		move.l	a0,-(sp)
000190FE 41D2                       		lea	(a2),a0
00019100 4EB9 0000 E044             		jsr	SingleObjLoad2
00019106 205F                       		movea.l	(sp)+,a0
00019108 6600                       		bne.s	loc_18B40
0001910A 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001910E 3368 0008 0008             		move.w	8(a0),8(a1)
00019114 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001911A 0669 0020 000C             		addi.w	#$20,$C(a1)
00019120 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019126 234A 003C                  		move.l	a2,$3C(a1)
0001912A                            
0001912A                            loc_18B36:
0001912A 5328 003C                  		subq.b	#1,$3C(a0)
0001912E 6700                       		beq.s	loc_18B40
00019130 6000 FEC0                  		bra.w	loc_189FE
00019134                            ; ===========================================================================
00019134                            
00019134                            loc_18B40:
00019134 5528 0025                  		subq.b	#2,$25(a0)
00019138 6000 FE84                  		bra.w	loc_189CA
0001913C                            ; ===========================================================================
0001913C                            
0001913C                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001913C 5328 003C                  		subq.b	#1,$3C(a0)
00019140 6B00                       		bmi.s	loc_18B52
00019142 6000 ED22                  		bra.w	BossDefeated
00019146                            ; ===========================================================================
00019146                            
00019146                            loc_18B52:
00019146 5428 0025                  		addq.b	#2,$25(a0)
0001914A 4268 0012                  		clr.w	$12(a0)
0001914E 08E8 0000 0022             		bset	#0,$22(a0)
00019154 08A8 0007 0022             		bclr	#7,$22(a0)
0001915A 4268 0010                  		clr.w	$10(a0)
0001915E 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019164 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019168 6600                       		bne.s	loc_18B7C
0001916A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019170                            
00019170                            loc_18B7C:
00019170 6000 FE80                  		bra.w	loc_189FE
00019174                            ; ===========================================================================
00019174                            
00019174                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019174 5228 003C                  		addq.b	#1,$3C(a0)
00019178 6700                       		beq.s	loc_18B90
0001917A 6A00                       		bpl.s	loc_18B96
0001917C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019182 6000                       		bra.s	loc_18BC2
00019184                            ; ===========================================================================
00019184                            
00019184                            loc_18B90:
00019184 4268 0012                  		clr.w	$12(a0)
00019188 6000                       		bra.s	loc_18BC2
0001918A                            ; ===========================================================================
0001918A                            
0001918A                            loc_18B96:
0001918A 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019190 6500                       		bcs.s	loc_18BAE
00019192 6700                       		beq.s	loc_18BB4
00019194 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001919A 6500                       		bcs.s	loc_18BC2
0001919C 5428 0025                  		addq.b	#2,$25(a0)
000191A0 6000                       		bra.s	loc_18BC2
000191A2                            ; ===========================================================================
000191A2                            
000191A2                            loc_18BAE:
000191A2 5168 0012                  		subq.w	#8,$12(a0)
000191A6 6000                       		bra.s	loc_18BC2
000191A8                            ; ===========================================================================
000191A8                            
000191A8                            loc_18BB4:
000191A8 4268 0012                  		clr.w	$12(a0)
000191AC 303C 0084                  		move.w	#$84,d0
000191B0 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
000191B6                            
000191B6                            loc_18BC2:
000191B6 6000 FE2A                  		bra.w	loc_189EE
000191BA                            ; ===========================================================================
000191BA                            
000191BA                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000191BA 317C 0400 0010             		move.w	#$400,$10(a0)
000191C0 317C FFC0 0012             		move.w	#-$40,$12(a0)
000191C6 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000191CC 6400                       		bcc.s	loc_18BE0
000191CE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000191D2 6000                       		bra.s	loc_18BE8
000191D4                            ; ===========================================================================
000191D4                            
000191D4                            loc_18BE0:
000191D4 4A28 0001                  		tst.b	1(a0)
000191D8 6A00 FCCE                  		bpl.w	Obj7A_Delete
000191DC                            
000191DC                            loc_18BE8:
000191DC 6100 ECCA                  		bsr.w	BossMove
000191E0 6000 FDDC                  		bra.w	loc_189CA
000191E4                            ; ===========================================================================
000191E4                            
000191E4                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000191E4 7000                       		moveq	#0,d0
000191E6 7201                       		moveq	#1,d1
000191E8 2268 0034                  		movea.l	$34(a0),a1
000191EC 1029 0025                  		move.b	$25(a1),d0
000191F0 0C00 0006                  		cmpi.b	#6,d0
000191F4 6B00                       		bmi.s	loc_18C06
000191F6 720A                       		moveq	#$A,d1
000191F8 6000                       		bra.s	loc_18C1A
000191FA                            ; ===========================================================================
000191FA                            
000191FA                            loc_18C06:
000191FA 4A29 0020                  		tst.b	$20(a1)
000191FE 6600                       		bne.s	loc_18C10
00019200 7205                       		moveq	#5,d1
00019202 6000                       		bra.s	loc_18C1A
00019204                            ; ===========================================================================
00019204                            
00019204                            loc_18C10:
00019204 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001920A 6500                       		bcs.s	loc_18C1A
0001920C 7204                       		moveq	#4,d1
0001920E                            
0001920E                            loc_18C1A:
0001920E 1141 001C                  		move.b	d1,$1C(a0)
00019212 0C00 000A                  		cmpi.b	#$A,d0
00019216 6600                       		bne.s	loc_18C32
00019218 117C 0006 001C             		move.b	#6,$1C(a0)
0001921E 4A28 0001                  		tst.b	1(a0)
00019222 6A00 FC84                  		bpl.w	Obj7A_Delete
00019226                            
00019226                            loc_18C32:
00019226 6000                       		bra.s	loc_18C6C
00019228                            ; ===========================================================================
00019228                            
00019228                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019228 117C 0008 001C             		move.b	#8,$1C(a0)
0001922E 2268 0034                  		movea.l	$34(a0),a1
00019232 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019238 6600                       		bne.s	loc_18C56
0001923A 4A28 0001                  		tst.b	1(a0)
0001923E 6A00 FC68                  		bpl.w	Obj7A_Delete
00019242 117C 000B 001C             		move.b	#$B,$1C(a0)
00019248 6000                       		bra.s	loc_18C6C
0001924A                            ; ===========================================================================
0001924A                            
0001924A                            loc_18C56:
0001924A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019250 6E00                       		bgt.s	loc_18C6C
00019252 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019258 6D00                       		blt.s	loc_18C6C
0001925A 117C 0007 001C             		move.b	#7,$1C(a0)
00019260                            
00019260                            loc_18C6C:
00019260 43F9 0001 82B8             		lea	(Ani_Eggman).l,a1
00019266 4EB9 0000 AC42             		jsr	AnimateSprite
0001926C                            
0001926C                            loc_18C78:
0001926C 2268 0034                  		movea.l	$34(a0),a1
00019270 3169 0008 0008             		move.w	8(a1),8(a0)
00019276 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001927C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019282 7003                       		moveq	#3,d0
00019284 C028 0022                  		and.b	$22(a0),d0
00019288 0228 00FC 0001             		andi.b	#-4,1(a0)
0001928E 8128 0001                  		or.b	d0,1(a0)
00019292 4EF9 0000 DBA8             		jmp	DisplaySprite
00019298                            ; ===========================================================================
00019298                            
00019298                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019298 2268 0034                  		movea.l	$34(a0),a1
0001929C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000192A2 6600                       		bne.s	loc_18CB8
000192A4 4A28 0001                  		tst.b	1(a0)
000192A8 6A00 FBFE                  		bpl.w	Obj7A_Delete
000192AC                            
000192AC                            loc_18CB8:
000192AC 217C 0001 83D0 0004        		move.l	#Map_BossItems,4(a0)
000192B4 317C 246C 0002             		move.w	#$246C,2(a0)
000192BA 117C 0003 001A             		move.b	#3,$1A(a0)
000192C0 60AA                       		bra.s	loc_18C78
000192C2                            ; ===========================================================================
000192C2                            ; ---------------------------------------------------------------------------
000192C2                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000192C2                            ; ---------------------------------------------------------------------------
000192C2                            
000192C2                            Obj7B:					; XREF: Obj_Index
000192C2 7000                       		moveq	#0,d0
000192C4 1028 0024                  		move.b	$24(a0),d0
000192C8 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000192CC 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000192D0 3028 0030                  		move.w	$30(a0),d0
000192D4 0240 FF80                  		andi.w	#$FF80,d0
000192D8 3238 F700                  		move.w	($FFFFF700).w,d1
000192DC 0441 0080                  		subi.w	#$80,d1
000192E0 0241 FF80                  		andi.w	#$FF80,d1
000192E4 9041                       		sub.w	d1,d0
000192E6 6B00 FBC0                  		bmi.w	Obj7A_Delete
000192EA 0C40 0280                  		cmpi.w	#$280,d0
000192EE 6200 FBB8                  		bhi.w	Obj7A_Delete
000192F2 4EF9 0000 DBA8             		jmp	DisplaySprite
000192F8                            ; ===========================================================================
000192F8 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000192FA 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000192FC 0000                       		dc.w loc_18DC6-Obj7B_Index
000192FE 0000                       		dc.w loc_18EAA-Obj7B_Index
00019300 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019302 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019304                            ; ===========================================================================
00019304                            
00019304                            Obj7B_Main:				; XREF: Obj7B_Index
00019304 217C 0001 1F6E 0004        		move.l	#Map_obj5Ea,4(a0)
0001930C 317C 0518 0002             		move.w	#$518,2(a0)
00019312 117C 0001 001A             		move.b	#1,$1A(a0)
00019318 0028 0004 0001             		ori.b	#4,1(a0)
0001931E 117C 0004 0018             		move.b	#4,$18(a0)
00019324 117C 008B 0020             		move.b	#$8B,$20(a0)
0001932A 117C 000C 0019             		move.b	#$C,$19(a0)
00019330 2268 003C                  		movea.l	$3C(a0),a1
00019334 3169 0008 0030             		move.w	8(a1),$30(a0)
0001933A 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019340 08E8 0000 0022             		bset	#0,$22(a0)
00019346 3028 0008                  		move.w	8(a0),d0
0001934A B069 0008                  		cmp.w	8(a1),d0
0001934E 6E00                       		bgt.s	loc_18D68
00019350 08A8 0000 0022             		bclr	#0,$22(a0)
00019356 117C 0002 003A             		move.b	#2,$3A(a0)
0001935C                            
0001935C                            loc_18D68:
0001935C 5428 0024                  		addq.b	#2,$24(a0)
00019360                            
00019360                            Obj7B_Fall:				; XREF: Obj7B_Index
00019360 4EB9 0000 DB56             		jsr	ObjectFall
00019366 2268 003C                  		movea.l	$3C(a0),a1
0001936A 45F9 0000 0000             		lea	(word_19018).l,a2
00019370 7000                       		moveq	#0,d0
00019372 1029 001A                  		move.b	$1A(a1),d0
00019376 3228 0008                  		move.w	8(a0),d1
0001937A 9268 0030                  		sub.w	$30(a0),d1
0001937E 6400                       		bcc.s	loc_18D8E
00019380 5440                       		addq.w	#2,d0
00019382                            
00019382                            loc_18D8E:
00019382 D040                       		add.w	d0,d0
00019384 3228 0034                  		move.w	$34(a0),d1
00019388 D272 0000                  		add.w	(a2,d0.w),d1
0001938C B268 000C                  		cmp.w	$C(a0),d1
00019390 6E00                       		bgt.s	locret_18DC4
00019392 2268 003C                  		movea.l	$3C(a0),a1
00019396 7202                       		moveq	#2,d1
00019398 0828 0000 0022             		btst	#0,$22(a0)
0001939E 6700                       		beq.s	loc_18DAE
000193A0 7200                       		moveq	#0,d1
000193A2                            
000193A2                            loc_18DAE:
000193A2 317C 00F0 0028             		move.w	#$F0,$28(a0)
000193A8 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000193AE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000193B4 6000 0000                  		bra.w	loc_18FA2
000193B8                            ; ===========================================================================
000193B8                            
000193B8                            locret_18DC4:
000193B8 4E75                       		rts	
000193BA                            ; ===========================================================================
000193BA                            
000193BA                            loc_18DC6:				; XREF: Obj7B_Index
000193BA 2268 003C                  		movea.l	$3C(a0),a1
000193BE 7000                       		moveq	#0,d0
000193C0 1028 003A                  		move.b	$3A(a0),d0
000193C4 9029 003A                  		sub.b	$3A(a1),d0
000193C8 6700                       		beq.s	loc_18E2A
000193CA 6400                       		bcc.s	loc_18DDA
000193CC 4400                       		neg.b	d0
000193CE                            
000193CE                            loc_18DDA:
000193CE 323C F7E8                  		move.w	#-$818,d1
000193D2 343C FEEC                  		move.w	#-$114,d2
000193D6 0C00 0001                  		cmpi.b	#1,d0
000193DA 6700                       		beq.s	loc_18E00
000193DC 323C F6A0                  		move.w	#-$960,d1
000193E0 343C FF0C                  		move.w	#-$F4,d2
000193E4 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000193EA 6D00                       		blt.s	loc_18E00
000193EC 323C F5E0                  		move.w	#-$A20,d1
000193F0 343C FF80                  		move.w	#-$80,d2
000193F4                            
000193F4                            loc_18E00:
000193F4 3141 0012                  		move.w	d1,$12(a0)
000193F8 3142 0010                  		move.w	d2,$10(a0)
000193FC 3028 0008                  		move.w	8(a0),d0
00019400 9068 0030                  		sub.w	$30(a0),d0
00019404 6400                       		bcc.s	loc_18E16
00019406 4468 0010                  		neg.w	$10(a0)
0001940A                            
0001940A                            loc_18E16:
0001940A 117C 0001 001A             		move.b	#1,$1A(a0)
00019410 317C 0020 0028             		move.w	#$20,$28(a0)
00019416 5428 0024                  		addq.b	#2,$24(a0)
0001941A 6000 0000                  		bra.w	loc_18EAA
0001941E                            ; ===========================================================================
0001941E                            
0001941E                            loc_18E2A:				; XREF: loc_18DC6
0001941E 45F9 0000 0000             		lea	(word_19018).l,a2
00019424 7000                       		moveq	#0,d0
00019426 1029 001A                  		move.b	$1A(a1),d0
0001942A 343C 0028                  		move.w	#$28,d2
0001942E 3228 0008                  		move.w	8(a0),d1
00019432 9268 0030                  		sub.w	$30(a0),d1
00019436 6400                       		bcc.s	loc_18E48
00019438 4442                       		neg.w	d2
0001943A 5440                       		addq.w	#2,d0
0001943C                            
0001943C                            loc_18E48:
0001943C D040                       		add.w	d0,d0
0001943E 3228 0034                  		move.w	$34(a0),d1
00019442 D272 0000                  		add.w	(a2,d0.w),d1
00019446 3141 000C                  		move.w	d1,$C(a0)
0001944A D468 0030                  		add.w	$30(a0),d2
0001944E 3142 0008                  		move.w	d2,8(a0)
00019452 4268 000E                  		clr.w	$E(a0)
00019456 4268 000A                  		clr.w	$A(a0)
0001945A 5368 0028                  		subq.w	#1,$28(a0)
0001945E 6600                       		bne.s	loc_18E7A
00019460 317C 0020 0028             		move.w	#$20,$28(a0)
00019466 117C 0008 0024             		move.b	#8,$24(a0)
0001946C 4E75                       		rts	
0001946E                            ; ===========================================================================
0001946E                            
0001946E                            loc_18E7A:
0001946E 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019474 6600                       		bne.s	loc_18E88
00019476 117C 0005 001F             		move.b	#5,$1F(a0)
0001947C                            
0001947C                            loc_18E88:
0001947C 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019482 6600                       		bne.s	loc_18E96
00019484 117C 0002 001F             		move.b	#2,$1F(a0)
0001948A                            
0001948A                            loc_18E96:
0001948A 5328 001E                  		subq.b	#1,$1E(a0)
0001948E 6E00                       		bgt.s	locret_18EA8
00019490 0868 0000 001A             		bchg	#0,$1A(a0)
00019496 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001949C                            
0001949C                            locret_18EA8:
0001949C 4E75                       		rts	
0001949E                            ; ===========================================================================
0001949E                            
0001949E                            loc_18EAA:				; XREF: Obj7B_Index
0001949E 43F8 D040                  		lea	($FFFFD040).w,a1
000194A2 707A                       		moveq	#$7A,d0
000194A4 7240                       		moveq	#$40,d1
000194A6 743E                       		moveq	#$3E,d2
000194A8                            
000194A8                            loc_18EB4:
000194A8 B011                       		cmp.b	(a1),d0
000194AA 6700                       		beq.s	loc_18EC0
000194AC D2C1                       		adda.w	d1,a1
000194AE 51CA FFF8                  		dbf	d2,loc_18EB4
000194B2                            
000194B2 6000                       		bra.s	loc_18F38
000194B4                            ; ===========================================================================
000194B4                            
000194B4                            loc_18EC0:
000194B4 3029 0008                  		move.w	8(a1),d0
000194B8 3229 000C                  		move.w	$C(a1),d1
000194BC 3428 0008                  		move.w	8(a0),d2
000194C0 3628 000C                  		move.w	$C(a0),d3
000194C4 45FA 0000                  		lea	byte_19022(pc),a2
000194C8 47FA 0000                  		lea	byte_19026(pc),a3
000194CC 181A                       		move.b	(a2)+,d4
000194CE 4884                       		ext.w	d4
000194D0 D044                       		add.w	d4,d0
000194D2 181B                       		move.b	(a3)+,d4
000194D4 4884                       		ext.w	d4
000194D6 D444                       		add.w	d4,d2
000194D8 B440                       		cmp.w	d0,d2
000194DA 6500                       		bcs.s	loc_18F38
000194DC 181A                       		move.b	(a2)+,d4
000194DE 4884                       		ext.w	d4
000194E0 D044                       		add.w	d4,d0
000194E2 181B                       		move.b	(a3)+,d4
000194E4 4884                       		ext.w	d4
000194E6 D444                       		add.w	d4,d2
000194E8 B042                       		cmp.w	d2,d0
000194EA 6500                       		bcs.s	loc_18F38
000194EC 181A                       		move.b	(a2)+,d4
000194EE 4884                       		ext.w	d4
000194F0 D244                       		add.w	d4,d1
000194F2 181B                       		move.b	(a3)+,d4
000194F4 4884                       		ext.w	d4
000194F6 D644                       		add.w	d4,d3
000194F8 B641                       		cmp.w	d1,d3
000194FA 6500                       		bcs.s	loc_18F38
000194FC 181A                       		move.b	(a2)+,d4
000194FE 4884                       		ext.w	d4
00019500 D244                       		add.w	d4,d1
00019502 181B                       		move.b	(a3)+,d4
00019504 4884                       		ext.w	d4
00019506 D644                       		add.w	d4,d3
00019508 B243                       		cmp.w	d3,d1
0001950A 6500                       		bcs.s	loc_18F38
0001950C 5428 0024                  		addq.b	#2,$24(a0)
00019510 4268 0028                  		clr.w	$28(a0)
00019514 4229 0020                  		clr.b	$20(a1)
00019518 5329 0021                  		subq.b	#1,$21(a1)
0001951C 6600                       		bne.s	loc_18F38
0001951E 08E9 0007 0022             		bset	#7,$22(a1)
00019524 4268 0010                  		clr.w	$10(a0)
00019528 4268 0012                  		clr.w	$12(a0)
0001952C                            
0001952C                            loc_18F38:
0001952C 4A68 0012                  		tst.w	$12(a0)
00019530 6A00                       		bpl.s	loc_18F5C
00019532 4EB9 0000 DB56             		jsr	ObjectFall
00019538 3028 0034                  		move.w	$34(a0),d0
0001953C 0440 002F                  		subi.w	#$2F,d0
00019540 B068 000C                  		cmp.w	$C(a0),d0
00019544 6E00                       		bgt.s	loc_18F58
00019546 4EB9 0000 DB56             		jsr	ObjectFall
0001954C                            
0001954C                            loc_18F58:
0001954C 6000 FF20                  		bra.w	loc_18E7A
00019550                            ; ===========================================================================
00019550                            
00019550                            loc_18F5C:
00019550 4EB9 0000 DB56             		jsr	ObjectFall
00019556 2268 003C                  		movea.l	$3C(a0),a1
0001955A 45F9 0000 0000             		lea	(word_19018).l,a2
00019560 7000                       		moveq	#0,d0
00019562 1029 001A                  		move.b	$1A(a1),d0
00019566 3228 0008                  		move.w	8(a0),d1
0001956A 9268 0030                  		sub.w	$30(a0),d1
0001956E 6400                       		bcc.s	loc_18F7E
00019570 5440                       		addq.w	#2,d0
00019572                            
00019572                            loc_18F7E:
00019572 D040                       		add.w	d0,d0
00019574 3228 0034                  		move.w	$34(a0),d1
00019578 D272 0000                  		add.w	(a2,d0.w),d1
0001957C B268 000C                  		cmp.w	$C(a0),d1
00019580 6ECA                       		bgt.s	loc_18F58
00019582 2268 003C                  		movea.l	$3C(a0),a1
00019586 7202                       		moveq	#2,d1
00019588 4A68 0010                  		tst.w	$10(a0)
0001958C 6B00                       		bmi.s	loc_18F9C
0001958E 7200                       		moveq	#0,d1
00019590                            
00019590                            loc_18F9C:
00019590 317C 0000 0028             		move.w	#0,$28(a0)
00019596                            
00019596                            loc_18FA2:
00019596 1341 003A                  		move.b	d1,$3A(a1)
0001959A 1141 003A                  		move.b	d1,$3A(a0)
0001959E B229 001A                  		cmp.b	$1A(a1),d1
000195A2 6700                       		beq.s	loc_19008
000195A4 08A9 0003 0022             		bclr	#3,$22(a1)
000195AA 6700                       		beq.s	loc_19008
000195AC 4229 0025                  		clr.b	$25(a1)
000195B0 137C 0002 0024             		move.b	#2,$24(a1)
000195B6 45F8 D000                  		lea	($FFFFD000).w,a2
000195BA 3568 0012 0012             		move.w	$12(a0),$12(a2)
000195C0 446A 0012                  		neg.w	$12(a2)
000195C4 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000195CA 6600                       		bne.s	loc_18FDC
000195CC E0EA 0012                  		asr	$12(a2)
000195D0                            
000195D0                            loc_18FDC:
000195D0 08EA 0001 0022             		bset	#1,$22(a2)
000195D6 08AA 0003 0022             		bclr	#3,$22(a2)
000195DC 422A 003C                  		clr.b	$3C(a2)
000195E0 2F08                       		move.l	a0,-(sp)
000195E2 41D2                       		lea	(a2),a0
000195E4 4EBA A3A8                  		jsr	Obj01_ChkRoll
000195E8 205F                       		movea.l	(sp)+,a0
000195EA 157C 0002 0024             		move.b	#2,$24(a2)
000195F0 303C 00CC                  		move.w	#$CC,d0
000195F4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
000195FA                            
000195FA                            loc_19008:
000195FA 4268 0010                  		clr.w	$10(a0)
000195FE 4268 0012                  		clr.w	$12(a0)
00019602 5428 0024                  		addq.b	#2,$24(a0)
00019606 6000 FE66                  		bra.w	loc_18E7A
0001960A                            ; ===========================================================================
0001960A FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019614                            		even
00019614 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019618                            		even
00019618 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001961C                            		even
0001961C                            ; ===========================================================================
0001961C                            
0001961C                            Obj7B_Explode:				; XREF: Obj7B_Index
0001961C 10BC 003F                  		move.b	#$3F,(a0)
00019620 4228 0024                  		clr.b	$24(a0)
00019624 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001962A 6700                       		beq.s	Obj7B_MakeFrag
0001962C 4E75                       		rts	
0001962E                            ; ===========================================================================
0001962E                            
0001962E                            Obj7B_MakeFrag:
0001962E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019634 7203                       		moveq	#3,d1
00019636 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001963A                            
0001963A                            Obj7B_Loop:
0001963A 4EB9 0000 E02E             		jsr	SingleObjLoad
00019640 6600                       		bne.s	loc_1909A
00019642 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019646 137C 000A 0024             		move.b	#$A,$24(a1)
0001964C 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019654 137C 0003 0018             		move.b	#3,$18(a1)
0001965A 337C 0518 0002             		move.w	#$518,2(a1)
00019660 3368 0008 0008             		move.w	8(a0),8(a1)
00019666 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001966C 335A 0010                  		move.w	(a2)+,$10(a1)
00019670 335A 0012                  		move.w	(a2)+,$12(a1)
00019674 137C 0098 0020             		move.b	#$98,$20(a1)
0001967A 0029 0004 0001             		ori.b	#4,1(a1)
00019680 08E9 0007 0001             		bset	#7,1(a1)
00019686 137C 000C 0019             		move.b	#$C,$19(a1)
0001968C                            
0001968C                            loc_1909A:
0001968C 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019690                            
00019690 4E75                       		rts	
00019692                            ; ===========================================================================
00019692 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019696 FF60 FDC0                  		dc.w $FF60, $FDC0
0001969A 0100 FCC0                  		dc.w $100, $FCC0
0001969E 00A0 FDC0                  		dc.w $A0, $FDC0
000196A2                            ; ===========================================================================
000196A2                            
000196A2                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000196A2 4EB9 0000 DB82             		jsr	SpeedToPos
000196A8 3168 0008 0030             		move.w	8(a0),$30(a0)
000196AE 3168 000C 0034             		move.w	$C(a0),$34(a0)
000196B4 0668 0018 0012             		addi.w	#$18,$12(a0)
000196BA 7004                       		moveq	#4,d0
000196BC C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000196C0 E448                       		lsr.w	#2,d0
000196C2 1140 001A                  		move.b	d0,$1A(a0)
000196C6 4A28 0001                  		tst.b	1(a0)
000196CA 6A00 F7DC                  		bpl.w	Obj7A_Delete
000196CE 4E75                       		rts	
000196D0                            ; ===========================================================================
000196D0                            ; ---------------------------------------------------------------------------
000196D0                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196D0                            ; ---------------------------------------------------------------------------
000196D0                            Map_obj7B:
000196D0                            	include "_maps\obj7B.asm"
000196D0                            ; ---------------------------------------------------------------------------
000196D0                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196D0                            ; ---------------------------------------------------------------------------
000196D0 0000                       		dc.w byte_190E2-Map_obj7B
000196D2 0000                       		dc.w byte_190E8-Map_obj7B
000196D4 01                         byte_190E2:	dc.b 1
000196D5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000196DA 01                         byte_190E8:	dc.b 1
000196DB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000196E0                            		even
000196E0                            		even
000196E0                            
000196E0                            ; ===========================================================================
000196E0                            ; ---------------------------------------------------------------------------
000196E0                            ; Object 75 - Eggman (SYZ)
000196E0                            ; ---------------------------------------------------------------------------
000196E0                            
000196E0                            Obj75:					; XREF: Obj_Index
000196E0 7000                       		moveq	#0,d0
000196E2 1028 0024                  		move.b	$24(a0),d0
000196E6 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000196EA 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000196EE                            ; ===========================================================================
000196EE 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000196F0 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000196F2 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000196F4 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000196F6 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000196F8                            
000196F8 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000196FB 0401 05                    		dc.b 4,	1, 5
000196FE 0607 05                    		dc.b 6,	7, 5
00019701 0800 05                    		dc.b 8,	0, 5
00019704                            ; ===========================================================================
00019704                            
00019704                            Obj75_Main:				; XREF: Obj75_Index
00019704 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001970A 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019710 3168 0008 0030             		move.w	8(a0),$30(a0)
00019716 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001971C 117C 000F 0020             		move.b	#$F,$20(a0)
00019722 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019728 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001972C 2248                       		movea.l	a0,a1
0001972E 7203                       		moveq	#3,d1
00019730 6000                       		bra.s	Obj75_LoadBoss
00019732                            ; ===========================================================================
00019732                            
00019732                            Obj75_Loop:
00019732 4EB9 0000 E044             		jsr	SingleObjLoad2
00019738 6600                       		bne.s	Obj75_ShipMain
0001973A 12BC 0075                  		move.b	#$75,(a1)
0001973E 3368 0008 0008             		move.w	8(a0),8(a1)
00019744 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001974A                            
0001974A                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001974A 08A8 0000 0022             		bclr	#0,$22(a0)
00019750 4229 0025                  		clr.b	$25(a1)
00019754 135A 0024                  		move.b	(a2)+,$24(a1)
00019758 135A 001C                  		move.b	(a2)+,$1C(a1)
0001975C 135A 0018                  		move.b	(a2)+,$18(a1)
00019760 237C 0001 8308 0004        		move.l	#Map_Eggman,4(a1)
00019768 337C 0400 0002             		move.w	#$400,2(a1)
0001976E 137C 0004 0001             		move.b	#4,1(a1)
00019774 137C 0020 0019             		move.b	#$20,$19(a1)
0001977A 2348 0034                  		move.l	a0,$34(a1)
0001977E 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019782                            
00019782                            Obj75_ShipMain:				; XREF: Obj75_Index
00019782 7000                       		moveq	#0,d0
00019784 1028 0025                  		move.b	$25(a0),d0
00019788 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001978C 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019790 43F9 0001 82B8             		lea	(Ani_Eggman).l,a1
00019796 4EB9 0000 AC42             		jsr	AnimateSprite
0001979C 7003                       		moveq	#3,d0
0001979E C028 0022                  		and.b	$22(a0),d0
000197A2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000197A8 8128 0001                  		or.b	d0,1(a0)
000197AC 4EF9 0000 DBA8             		jmp	DisplaySprite
000197B2                            ; ===========================================================================
000197B2 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000197B6 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000197BA 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000197BE                            ; ===========================================================================
000197BE                            
000197BE                            loc_191CC:				; XREF: Obj75_ShipIndex
000197BE 317C FF00 0010             		move.w	#-$100,$10(a0)
000197C4 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000197CA 6400                       		bcc.s	loc_191DE
000197CC 5428 0025                  		addq.b	#2,$25(a0)
000197D0                            
000197D0                            loc_191DE:
000197D0 1028 003F                  		move.b	$3F(a0),d0
000197D4 5428 003F                  		addq.b	#2,$3F(a0)
000197D8 4EB9 0000 2C22             		jsr	(CalcSine).l
000197DE E440                       		asr.w	#2,d0
000197E0 3140 0012                  		move.w	d0,$12(a0)
000197E4                            
000197E4                            loc_191F2:
000197E4 6100 E6C2                  		bsr.w	BossMove
000197E8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000197EE 3168 0030 0008             		move.w	$30(a0),8(a0)
000197F4                            
000197F4                            loc_19202:
000197F4 3028 0008                  		move.w	8(a0),d0
000197F8 0440 2C00                  		subi.w	#$2C00,d0
000197FC EA48                       		lsr.w	#5,d0
000197FE 1140 0034                  		move.b	d0,$34(a0)
00019802 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019808 6400                       		bcc.s	locret_19256
0001980A 4A28 0022                  		tst.b	$22(a0)
0001980E 6B00                       		bmi.s	loc_19258
00019810 4A28 0020                  		tst.b	$20(a0)
00019814 6600                       		bne.s	locret_19256
00019816 4A28 003E                  		tst.b	$3E(a0)
0001981A 6600                       		bne.s	loc_1923A
0001981C 117C 0020 003E             		move.b	#$20,$3E(a0)
00019822 303C 00AC                  		move.w	#$AC,d0
00019826 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001982C                            
0001982C                            loc_1923A:
0001982C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019830 7000                       		moveq	#0,d0
00019832 4A51                       		tst.w	(a1)
00019834 6600                       		bne.s	loc_19248
00019836 303C 0EEE                  		move.w	#$EEE,d0
0001983A                            
0001983A                            loc_19248:
0001983A 3280                       		move.w	d0,(a1)
0001983C 5328 003E                  		subq.b	#1,$3E(a0)
00019840 6600                       		bne.s	locret_19256
00019842 117C 000F 0020             		move.b	#$F,$20(a0)
00019848                            
00019848                            locret_19256:
00019848 4E75                       		rts	
0001984A                            ; ===========================================================================
0001984A                            
0001984A                            loc_19258:				; XREF: loc_19202
0001984A 7064                       		moveq	#100,d0
0001984C 6100 0000                  		bsr.w	AddPoints
00019850 117C 0006 0025             		move.b	#6,$25(a0)
00019856 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001985C 4268 0010                  		clr.w	$10(a0)
00019860 4E75                       		rts	
00019862                            ; ===========================================================================
00019862                            
00019862                            loc_19270:				; XREF: Obj75_ShipIndex
00019862 3028 0030                  		move.w	$30(a0),d0
00019866 317C 0140 0010             		move.w	#$140,$10(a0)
0001986C 0828 0000 0022             		btst	#0,$22(a0)
00019872 6600                       		bne.s	loc_1928E
00019874 4468 0010                  		neg.w	$10(a0)
00019878 0C40 2C08                  		cmpi.w	#$2C08,d0
0001987C 6E00                       		bgt.s	loc_1929E
0001987E 6000                       		bra.s	loc_19294
00019880                            ; ===========================================================================
00019880                            
00019880                            loc_1928E:
00019880 0C40 2D38                  		cmpi.w	#$2D38,d0
00019884 6D00                       		blt.s	loc_1929E
00019886                            
00019886                            loc_19294:
00019886 0868 0000 0022             		bchg	#0,$22(a0)
0001988C 4228 003D                  		clr.b	$3D(a0)
00019890                            
00019890                            loc_1929E:
00019890 0440 2C10                  		subi.w	#$2C10,d0
00019894 0240 001F                  		andi.w	#$1F,d0
00019898 0440 001F                  		subi.w	#$1F,d0
0001989C 6A00                       		bpl.s	loc_192AE
0001989E 4440                       		neg.w	d0
000198A0                            
000198A0                            loc_192AE:
000198A0 5340                       		subq.w	#1,d0
000198A2 6E00                       		bgt.s	loc_192E8
000198A4 4A28 003D                  		tst.b	$3D(a0)
000198A8 6600                       		bne.s	loc_192E8
000198AA 3238 D008                  		move.w	($FFFFD008).w,d1
000198AE 0441 2C00                  		subi.w	#$2C00,d1
000198B2 EA41                       		asr.w	#5,d1
000198B4 B228 0034                  		cmp.b	$34(a0),d1
000198B8 6600                       		bne.s	loc_192E8
000198BA 7000                       		moveq	#0,d0
000198BC 1028 0034                  		move.b	$34(a0),d0
000198C0 EB40                       		asl.w	#5,d0
000198C2 0640 2C10                  		addi.w	#$2C10,d0
000198C6 3140 0030                  		move.w	d0,$30(a0)
000198CA 6100 0000                  		bsr.w	Obj75_FindBlocks
000198CE 5428 0025                  		addq.b	#2,$25(a0)
000198D2 4268 0028                  		clr.w	$28(a0)
000198D6 4268 0010                  		clr.w	$10(a0)
000198DA                            
000198DA                            loc_192E8:
000198DA 6000 FEF4                  		bra.w	loc_191DE
000198DE                            ; ===========================================================================
000198DE                            
000198DE                            loc_192EC:				; XREF: Obj75_ShipIndex
000198DE 7000                       		moveq	#0,d0
000198E0 1028 0028                  		move.b	$28(a0),d0
000198E4 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000198E8 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000198EC                            ; ===========================================================================
000198EC 0000                       off_192FA:	dc.w loc_19302-off_192FA
000198EE 0000                       		dc.w loc_19348-off_192FA
000198F0 0000                       		dc.w loc_1938E-off_192FA
000198F2 0000                       		dc.w loc_193D0-off_192FA
000198F4                            ; ===========================================================================
000198F4                            
000198F4                            loc_19302:				; XREF: off_192FA
000198F4 317C 0180 0012             		move.w	#$180,$12(a0)
000198FA 3028 0038                  		move.w	$38(a0),d0
000198FE 0C40 0556                  		cmpi.w	#$556,d0
00019902 6500                       		bcs.s	loc_19344
00019904 317C 0556 0038             		move.w	#$556,$38(a0)
0001990A 4268 003C                  		clr.w	$3C(a0)
0001990E 70FF                       		moveq	#-1,d0
00019910 3028 0036                  		move.w	$36(a0),d0
00019914 6700                       		beq.s	loc_1933C
00019916 2240                       		movea.l	d0,a1
00019918 137C 00FF 0029             		move.b	#-1,$29(a1)
0001991E 117C 00FF 0029             		move.b	#-1,$29(a0)
00019924 2348 0034                  		move.l	a0,$34(a1)
00019928 317C 0032 003C             		move.w	#$32,$3C(a0)
0001992E                            
0001992E                            loc_1933C:
0001992E 4268 0012                  		clr.w	$12(a0)
00019932 5428 0028                  		addq.b	#2,$28(a0)
00019936                            
00019936                            loc_19344:
00019936 6000 FEAC                  		bra.w	loc_191F2
0001993A                            ; ===========================================================================
0001993A                            
0001993A                            loc_19348:				; XREF: off_192FA
0001993A 5368 003C                  		subq.w	#1,$3C(a0)
0001993E 6A00                       		bpl.s	loc_19366
00019940 5428 0028                  		addq.b	#2,$28(a0)
00019944 317C F800 0012             		move.w	#-$800,$12(a0)
0001994A 4A68 0036                  		tst.w	$36(a0)
0001994E 6600                       		bne.s	loc_19362
00019950 E0E8 0012                  		asr	$12(a0)
00019954                            
00019954                            loc_19362:
00019954 7000                       		moveq	#0,d0
00019956 6000                       		bra.s	loc_1937C
00019958                            ; ===========================================================================
00019958                            
00019958                            loc_19366:
00019958 7000                       		moveq	#0,d0
0001995A 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019960 6E00                       		bgt.s	loc_1937C
00019962 7002                       		moveq	#2,d0
00019964 0828 0001 003D             		btst	#1,$3D(a0)
0001996A 6700                       		beq.s	loc_1937C
0001996C 4440                       		neg.w	d0
0001996E                            
0001996E                            loc_1937C:
0001996E D068 0038                  		add.w	$38(a0),d0
00019972 3140 000C                  		move.w	d0,$C(a0)
00019976 3168 0030 0008             		move.w	$30(a0),8(a0)
0001997C 6000 FE76                  		bra.w	loc_19202
00019980                            ; ===========================================================================
00019980                            
00019980                            loc_1938E:				; XREF: off_192FA
00019980 303C 04DA                  		move.w	#$4DA,d0
00019984 4A68 0036                  		tst.w	$36(a0)
00019988 6700                       		beq.s	loc_1939C
0001998A 0440 0018                  		subi.w	#$18,d0
0001998E                            
0001998E                            loc_1939C:
0001998E B068 0038                  		cmp.w	$38(a0),d0
00019992 6D00                       		blt.s	loc_193BE
00019994 317C 0008 003C             		move.w	#8,$3C(a0)
0001999A 4A68 0036                  		tst.w	$36(a0)
0001999E 6700                       		beq.s	loc_193B4
000199A0 317C 002D 003C             		move.w	#$2D,$3C(a0)
000199A6                            
000199A6                            loc_193B4:
000199A6 5428 0028                  		addq.b	#2,$28(a0)
000199AA 4268 0012                  		clr.w	$12(a0)
000199AE 6000                       		bra.s	loc_193CC
000199B0                            ; ===========================================================================
000199B0                            
000199B0                            loc_193BE:
000199B0 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000199B6 6C00                       		bge.s	loc_193CC
000199B8 0668 000C 0012             		addi.w	#$C,$12(a0)
000199BE                            
000199BE                            loc_193CC:
000199BE 6000 FE24                  		bra.w	loc_191F2
000199C2                            ; ===========================================================================
000199C2                            
000199C2                            loc_193D0:				; XREF: off_192FA
000199C2 5368 003C                  		subq.w	#1,$3C(a0)
000199C6 6E00                       		bgt.s	loc_19406
000199C8 6B00                       		bmi.s	loc_193EE
000199CA 70FF                       		moveq	#-1,d0
000199CC 3028 0036                  		move.w	$36(a0),d0
000199D0 6700                       		beq.s	loc_193E8
000199D2 2240                       		movea.l	d0,a1
000199D4 137C 000A 0029             		move.b	#$A,$29(a1)
000199DA                            
000199DA                            loc_193E8:
000199DA 4268 0036                  		clr.w	$36(a0)
000199DE 6000                       		bra.s	loc_19406
000199E0                            ; ===========================================================================
000199E0                            
000199E0                            loc_193EE:
000199E0 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000199E6 6600                       		bne.s	loc_19406
000199E8 4228 0029                  		clr.b	$29(a0)
000199EC 5528 0025                  		subq.b	#2,$25(a0)
000199F0 117C 00FF 003D             		move.b	#-1,$3D(a0)
000199F6 6000                       		bra.s	loc_19446
000199F8                            ; ===========================================================================
000199F8                            
000199F8                            loc_19406:
000199F8 7001                       		moveq	#1,d0
000199FA 4A68 0036                  		tst.w	$36(a0)
000199FE 6700                       		beq.s	loc_19410
00019A00 7002                       		moveq	#2,d0
00019A02                            
00019A02                            loc_19410:
00019A02 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019A08 6700                       		beq.s	loc_19424
00019A0A 6D00                       		blt.s	loc_1941C
00019A0C 4440                       		neg.w	d0
00019A0E                            
00019A0E                            loc_1941C:
00019A0E 4A68 0036                  		tst.w	$36(a0)
00019A12 D168 0038                  		add.w	d0,$38(a0)
00019A16                            
00019A16                            loc_19424:
00019A16 7000                       		moveq	#0,d0
00019A18 4A68 0036                  		tst.w	$36(a0)
00019A1C 6700                       		beq.s	loc_19438
00019A1E 7002                       		moveq	#2,d0
00019A20 0828 0000 003D             		btst	#0,$3D(a0)
00019A26 6700                       		beq.s	loc_19438
00019A28 4440                       		neg.w	d0
00019A2A                            
00019A2A                            loc_19438:
00019A2A D068 0038                  		add.w	$38(a0),d0
00019A2E 3140 000C                  		move.w	d0,$C(a0)
00019A32 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A38                            
00019A38                            loc_19446:
00019A38 6000 FDBA                  		bra.w	loc_19202
00019A3C                            
00019A3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A3C                            
00019A3C                            
00019A3C                            Obj75_FindBlocks:			; XREF: loc_192AE
00019A3C 4268 0036                  		clr.w	$36(a0)
00019A40 43F8 D040                  		lea	($FFFFD040).w,a1
00019A44 703E                       		moveq	#$3E,d0
00019A46 7276                       		moveq	#$76,d1
00019A48 1428 0034                  		move.b	$34(a0),d2
00019A4C                            
00019A4C                            Obj75_FindLoop:
00019A4C B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019A4E 6600                       		bne.s	loc_1946A	; if not, branch
00019A50 B429 0028                  		cmp.b	$28(a1),d2
00019A54 6600                       		bne.s	loc_1946A
00019A56 3149 0036                  		move.w	a1,$36(a0)
00019A5A 6000                       		bra.s	locret_19472
00019A5C                            ; ===========================================================================
00019A5C                            
00019A5C                            loc_1946A:
00019A5C 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019A60 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019A64                            
00019A64                            locret_19472:
00019A64 4E75                       		rts	
00019A66                            ; End of function Obj75_FindBlocks
00019A66                            
00019A66                            ; ===========================================================================
00019A66                            
00019A66                            loc_19474:				; XREF: Obj75_ShipIndex
00019A66 5368 003C                  		subq.w	#1,$3C(a0)
00019A6A 6B00                       		bmi.s	loc_1947E
00019A6C 6000 E3F8                  		bra.w	BossDefeated
00019A70                            ; ===========================================================================
00019A70                            
00019A70                            loc_1947E:
00019A70 5428 0025                  		addq.b	#2,$25(a0)
00019A74 4268 0012                  		clr.w	$12(a0)
00019A78 08E8 0000 0022             		bset	#0,$22(a0)
00019A7E 08A8 0007 0022             		bclr	#7,$22(a0)
00019A84 4268 0010                  		clr.w	$10(a0)
00019A88 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019A8E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019A92 6600                       		bne.s	loc_194A8
00019A94 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019A9A                            
00019A9A                            loc_194A8:
00019A9A 6000 FD58                  		bra.w	loc_19202
00019A9E                            ; ===========================================================================
00019A9E                            
00019A9E                            loc_194AC:				; XREF: Obj75_ShipIndex
00019A9E 5268 003C                  		addq.w	#1,$3C(a0)
00019AA2 6700                       		beq.s	loc_194BC
00019AA4 6A00                       		bpl.s	loc_194C2
00019AA6 0668 0018 0012             		addi.w	#$18,$12(a0)
00019AAC 6000                       		bra.s	loc_194EE
00019AAE                            ; ===========================================================================
00019AAE                            
00019AAE                            loc_194BC:
00019AAE 4268 0012                  		clr.w	$12(a0)
00019AB2 6000                       		bra.s	loc_194EE
00019AB4                            ; ===========================================================================
00019AB4                            
00019AB4                            loc_194C2:
00019AB4 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019ABA 6500                       		bcs.s	loc_194DA
00019ABC 6700                       		beq.s	loc_194E0
00019ABE 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019AC4 6500                       		bcs.s	loc_194EE
00019AC6 5428 0025                  		addq.b	#2,$25(a0)
00019ACA 6000                       		bra.s	loc_194EE
00019ACC                            ; ===========================================================================
00019ACC                            
00019ACC                            loc_194DA:
00019ACC 5168 0012                  		subq.w	#8,$12(a0)
00019AD0 6000                       		bra.s	loc_194EE
00019AD2                            ; ===========================================================================
00019AD2                            
00019AD2                            loc_194E0:
00019AD2 4268 0012                  		clr.w	$12(a0)
00019AD6 303C 0085                  		move.w	#$85,d0
00019ADA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019AE0                            
00019AE0                            loc_194EE:
00019AE0 6000 FD02                  		bra.w	loc_191F2
00019AE4                            ; ===========================================================================
00019AE4                            
00019AE4                            loc_194F2:				; XREF: Obj75_ShipIndex
00019AE4 317C 0400 0010             		move.w	#$400,$10(a0)
00019AEA 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019AF0 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019AF6 6400                       		bcc.s	loc_1950C
00019AF8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019AFC 6000                       		bra.s	loc_19512
00019AFE                            ; ===========================================================================
00019AFE                            
00019AFE                            loc_1950C:
00019AFE 4A28 0001                  		tst.b	1(a0)
00019B02 6A00                       		bpl.s	Obj75_ShipDelete
00019B04                            
00019B04                            loc_19512:
00019B04 6100 E3A2                  		bsr.w	BossMove
00019B08 6000 FCC6                  		bra.w	loc_191DE
00019B0C                            ; ===========================================================================
00019B0C                            
00019B0C                            Obj75_ShipDelete:
00019B0C 4EF9 0000 DBE4             		jmp	DeleteObject
00019B12                            ; ===========================================================================
00019B12                            
00019B12                            Obj75_FaceMain:				; XREF: Obj75_Index
00019B12 7201                       		moveq	#1,d1
00019B14 2268 0034                  		movea.l	$34(a0),a1
00019B18 7000                       		moveq	#0,d0
00019B1A 1029 0025                  		move.b	$25(a1),d0
00019B1E 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019B22 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019B26 1141 001C                  		move.b	d1,$1C(a0)
00019B2A 1010                       		move.b	(a0),d0
00019B2C B011                       		cmp.b	(a1),d0
00019B2E 6600                       		bne.s	Obj75_FaceDelete
00019B30 6000                       		bra.s	loc_195BE
00019B32                            ; ===========================================================================
00019B32                            
00019B32                            Obj75_FaceDelete:
00019B32 4EF9 0000 DBE4             		jmp	DeleteObject
00019B38                            ; ===========================================================================
00019B38 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019B3C 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019B40 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019B44                            ; ===========================================================================
00019B44                            
00019B44                            loc_19552:				; XREF: off_19546
00019B44 720A                       		moveq	#$A,d1
00019B46 4E75                       		rts	
00019B48                            ; ===========================================================================
00019B48                            
00019B48                            loc_19556:				; XREF: off_19546
00019B48 7206                       		moveq	#6,d1
00019B4A 4E75                       		rts	
00019B4C                            ; ===========================================================================
00019B4C                            
00019B4C                            loc_1955A:				; XREF: off_19546
00019B4C 7000                       		moveq	#0,d0
00019B4E 1029 0028                  		move.b	$28(a1),d0
00019B52 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019B56 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019B5A                            ; ===========================================================================
00019B5A 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019B5E 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019B62                            ; ===========================================================================
00019B62                            
00019B62                            loc_19570:				; XREF: off_19568
00019B62 6000                       		bra.s	loc_19574
00019B64                            ; ===========================================================================
00019B64                            
00019B64                            loc_19572:				; XREF: off_19568
00019B64 7206                       		moveq	#6,d1
00019B66                            
00019B66                            loc_19574:				; XREF: off_19546
00019B66 4A29 0020                  		tst.b	$20(a1)
00019B6A 6600                       		bne.s	loc_1957E
00019B6C 7205                       		moveq	#5,d1
00019B6E 4E75                       		rts	
00019B70                            ; ===========================================================================
00019B70                            
00019B70                            loc_1957E:
00019B70 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B76 6500                       		bcs.s	locret_19588
00019B78 7204                       		moveq	#4,d1
00019B7A                            
00019B7A                            locret_19588:
00019B7A 4E75                       		rts	
00019B7C                            ; ===========================================================================
00019B7C                            
00019B7C                            Obj75_FlameMain:			; XREF: Obj75_Index
00019B7C 117C 0007 001C             		move.b	#7,$1C(a0)
00019B82 2268 0034                  		movea.l	$34(a0),a1
00019B86 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019B8C 6600                       		bne.s	loc_195AA
00019B8E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B94 4A28 0001                  		tst.b	1(a0)
00019B98 6A00                       		bpl.s	Obj75_FlameDelete
00019B9A 6000                       		bra.s	loc_195B6
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            loc_195AA:
00019B9C 4A69 0010                  		tst.w	$10(a1)
00019BA0 6700                       		beq.s	loc_195B6
00019BA2 117C 0008 001C             		move.b	#8,$1C(a0)
00019BA8                            
00019BA8                            loc_195B6:
00019BA8 6000                       		bra.s	loc_195BE
00019BAA                            ; ===========================================================================
00019BAA                            
00019BAA                            Obj75_FlameDelete:
00019BAA 4EF9 0000 DBE4             		jmp	DeleteObject
00019BB0                            ; ===========================================================================
00019BB0                            
00019BB0                            loc_195BE:
00019BB0 43F9 0001 82B8             		lea	(Ani_Eggman).l,a1
00019BB6 4EB9 0000 AC42             		jsr	AnimateSprite
00019BBC 2268 0034                  		movea.l	$34(a0),a1
00019BC0 3169 0008 0008             		move.w	8(a1),8(a0)
00019BC6 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BCC                            
00019BCC                            loc_195DA:
00019BCC 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BD2 7003                       		moveq	#3,d0
00019BD4 C028 0022                  		and.b	$22(a0),d0
00019BD8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BDE 8128 0001                  		or.b	d0,1(a0)
00019BE2 4EF9 0000 DBA8             		jmp	DisplaySprite
00019BE8                            ; ===========================================================================
00019BE8                            
00019BE8                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019BE8 217C 0001 83D0 0004        		move.l	#Map_BossItems,4(a0)
00019BF0 317C 246C 0002             		move.w	#$246C,2(a0)
00019BF6 117C 0005 001A             		move.b	#5,$1A(a0)
00019BFC 2268 0034                  		movea.l	$34(a0),a1
00019C00 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019C06 6600                       		bne.s	loc_1961C
00019C08 4A28 0001                  		tst.b	1(a0)
00019C0C 6A00                       		bpl.s	Obj75_SpikeDelete
00019C0E                            
00019C0E                            loc_1961C:
00019C0E 3169 0008 0008             		move.w	8(a1),8(a0)
00019C14 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019C1A 3028 003C                  		move.w	$3C(a0),d0
00019C1E 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019C24 6600                       		bne.s	loc_19652
00019C26 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019C2C 6700                       		beq.s	loc_1964C
00019C2E 4A29 0028                  		tst.b	$28(a1)
00019C32 6600                       		bne.s	loc_19658
00019C34 0C40 0094                  		cmpi.w	#$94,d0
00019C38 6C00                       		bge.s	loc_19658
00019C3A 5E40                       		addq.w	#7,d0
00019C3C 6000                       		bra.s	loc_19658
00019C3E                            ; ===========================================================================
00019C3E                            
00019C3E                            loc_1964C:
00019C3E 4A69 003C                  		tst.w	$3C(a1)
00019C42 6A00                       		bpl.s	loc_19658
00019C44                            
00019C44                            loc_19652:
00019C44 4A40                       		tst.w	d0
00019C46 6F00                       		ble.s	loc_19658
00019C48 5B40                       		subq.w	#5,d0
00019C4A                            
00019C4A                            loc_19658:
00019C4A 3140 003C                  		move.w	d0,$3C(a0)
00019C4E E440                       		asr.w	#2,d0
00019C50 D168 000C                  		add.w	d0,$C(a0)
00019C54 117C 0008 0019             		move.b	#8,$19(a0)
00019C5A 117C 000C 0016             		move.b	#$C,$16(a0)
00019C60 4228 0020                  		clr.b	$20(a0)
00019C64 2268 0034                  		movea.l	$34(a0),a1
00019C68 4A29 0020                  		tst.b	$20(a1)
00019C6C 6700                       		beq.s	loc_19688
00019C6E 4A29 0029                  		tst.b	$29(a1)
00019C72 6600                       		bne.s	loc_19688
00019C74 117C 0084 0020             		move.b	#$84,$20(a0)
00019C7A                            
00019C7A                            loc_19688:
00019C7A 6000 FF50                  		bra.w	loc_195DA
00019C7E                            ; ===========================================================================
00019C7E                            
00019C7E                            Obj75_SpikeDelete:
00019C7E 4EF9 0000 DBE4             		jmp	DeleteObject
00019C84                            ; ===========================================================================
00019C84                            ; ---------------------------------------------------------------------------
00019C84                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019C84                            ; ---------------------------------------------------------------------------
00019C84                            
00019C84                            Obj76:					; XREF: Obj_Index
00019C84 7000                       		moveq	#0,d0
00019C86 1028 0024                  		move.b	$24(a0),d0
00019C8A 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019C8E 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019C92                            ; ===========================================================================
00019C92 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019C94 0000                       		dc.w Obj76_Action-Obj76_Index
00019C96 0000                       		dc.w loc_19762-Obj76_Index
00019C98                            ; ===========================================================================
00019C98                            
00019C98                            Obj76_Main:				; XREF: Obj76_Index
00019C98 7800                       		moveq	#0,d4
00019C9A 3A3C 2C10                  		move.w	#$2C10,d5
00019C9E 7C09                       		moveq	#9,d6
00019CA0 43D0                       		lea	(a0),a1
00019CA2 6000                       		bra.s	Obj76_MakeBlock
00019CA4                            ; ===========================================================================
00019CA4                            
00019CA4                            Obj76_Loop:
00019CA4 4EB9 0000 E02E             		jsr	SingleObjLoad
00019CAA 6600                       		bne.s	Obj76_ExitLoop
00019CAC                            
00019CAC                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019CAC 12BC 0076                  		move.b	#$76,(a1)
00019CB0 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019CB8 337C 4000 0002             		move.w	#$4000,2(a1)
00019CBE 137C 0004 0001             		move.b	#4,1(a1)
00019CC4 137C 0010 0019             		move.b	#$10,$19(a1)
00019CCA 137C 0010 0016             		move.b	#$10,$16(a1)
00019CD0 137C 0003 0018             		move.b	#3,$18(a1)
00019CD6 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019CDA 337C 0582 000C             		move.w	#$582,$C(a1)
00019CE0 3344 0028                  		move.w	d4,$28(a1)
00019CE4 0644 0101                  		addi.w	#$101,d4
00019CE8 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019CEC 5429 0024                  		addq.b	#2,$24(a1)
00019CF0 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019CF4                            
00019CF4                            Obj76_ExitLoop:
00019CF4 4E75                       		rts	
00019CF6                            ; ===========================================================================
00019CF6                            
00019CF6                            Obj76_Action:				; XREF: Obj76_Index
00019CF6 1028 0029                  		move.b	$29(a0),d0
00019CFA B028 0028                  		cmp.b	$28(a0),d0
00019CFE 6700                       		beq.s	Obj76_Solid
00019D00 4A00                       		tst.b	d0
00019D02 6B00                       		bmi.s	loc_19718
00019D04                            
00019D04                            loc_19712:
00019D04 6100 0000                  		bsr.w	Obj76_Break
00019D08 6000                       		bra.s	Obj76_Display
00019D0A                            ; ===========================================================================
00019D0A                            
00019D0A                            loc_19718:
00019D0A 2268 0034                  		movea.l	$34(a0),a1
00019D0E 4A29 0021                  		tst.b	$21(a1)
00019D12 67F0                       		beq.s	loc_19712
00019D14 3169 0008 0008             		move.w	8(a1),8(a0)
00019D1A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D20 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019D26 B2C8                       		cmpa.w	a0,a1
00019D28 6500                       		bcs.s	Obj76_Display
00019D2A 3029 0012                  		move.w	$12(a1),d0
00019D2E 48C0                       		ext.l	d0
00019D30 E080                       		asr.l	#8,d0
00019D32 D168 000C                  		add.w	d0,$C(a0)
00019D36 6000                       		bra.s	Obj76_Display
00019D38                            ; ===========================================================================
00019D38                            
00019D38                            Obj76_Solid:				; XREF: Obj76_Action
00019D38 323C 001B                  		move.w	#$1B,d1
00019D3C 343C 0010                  		move.w	#$10,d2
00019D40 363C 0011                  		move.w	#$11,d3
00019D44 3828 0008                  		move.w	8(a0),d4
00019D48 4EB9 0000 FF78             		jsr	SolidObject
00019D4E                            
00019D4E                            Obj76_Display:				; XREF: Obj76_Action
00019D4E 4EF9 0000 DBA8             		jmp	DisplaySprite
00019D54                            ; ===========================================================================
00019D54                            
00019D54                            loc_19762:				; XREF: Obj76_Index
00019D54 4A28 0001                  		tst.b	1(a0)
00019D58 6A00                       		bpl.s	Obj76_Delete
00019D5A 4EB9 0000 DB56             		jsr	ObjectFall
00019D60 4EF9 0000 DBA8             		jmp	DisplaySprite
00019D66                            ; ===========================================================================
00019D66                            
00019D66                            Obj76_Delete:
00019D66 4EF9 0000 DBE4             		jmp	DeleteObject
00019D6C                            
00019D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D6C                            
00019D6C                            
00019D6C                            Obj76_Break:				; XREF: Obj76_Action
00019D6C 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019D70 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019D74 7801                       		moveq	#1,d4
00019D76 7203                       		moveq	#3,d1
00019D78 7438                       		moveq	#$38,d2
00019D7A 5428 0024                  		addq.b	#2,$24(a0)
00019D7E 117C 0008 0019             		move.b	#8,$19(a0)
00019D84 117C 0008 0016             		move.b	#8,$16(a0)
00019D8A 43D0                       		lea	(a0),a1
00019D8C 6000                       		bra.s	Obj76_MakeFrag
00019D8E                            ; ===========================================================================
00019D8E                            
00019D8E                            Obj76_LoopFrag:
00019D8E 4EB9 0000 E044             		jsr	SingleObjLoad2
00019D94 6600                       		bne.s	loc_197D4
00019D96                            
00019D96                            Obj76_MakeFrag:
00019D96 45D0                       		lea	(a0),a2
00019D98 47D1                       		lea	(a1),a3
00019D9A 7603                       		moveq	#3,d3
00019D9C                            
00019D9C                            loc_197AA:
00019D9C 26DA                       		move.l	(a2)+,(a3)+
00019D9E 26DA                       		move.l	(a2)+,(a3)+
00019DA0 26DA                       		move.l	(a2)+,(a3)+
00019DA2 26DA                       		move.l	(a2)+,(a3)+
00019DA4 51CB FFF6                  		dbf	d3,loc_197AA
00019DA8                            
00019DA8 335C 0010                  		move.w	(a4)+,$10(a1)
00019DAC 335C 0012                  		move.w	(a4)+,$12(a1)
00019DB0 361D                       		move.w	(a5)+,d3
00019DB2 D769 0008                  		add.w	d3,8(a1)
00019DB6 361D                       		move.w	(a5)+,d3
00019DB8 D769 000C                  		add.w	d3,$C(a1)
00019DBC 1344 001A                  		move.b	d4,$1A(a1)
00019DC0 5244                       		addq.w	#1,d4
00019DC2 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019DC6                            
00019DC6                            loc_197D4:
00019DC6 303C 00CB                  		move.w	#$CB,d0
00019DCA 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019DD0                            ; End of function Obj76_Break
00019DD0                            
00019DD0                            ; ===========================================================================
00019DD0 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019DD4 0180 FE00                  		dc.w $180, $FE00
00019DD8 FF00 FF00                  		dc.w $FF00, $FF00
00019DDC 0100 FF00                  		dc.w $100, $FF00
00019DE0 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019DE4 0010 0000                  		dc.w $10, 0
00019DE8 0000 0010                  		dc.w 0,	$10
00019DEC 0010 0010                  		dc.w $10, $10
00019DF0                            ; ---------------------------------------------------------------------------
00019DF0                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019DF0                            ; ---------------------------------------------------------------------------
00019DF0                            Map_obj76:
00019DF0                            	include "_maps\obj76.asm"
00019DF0                            ; ---------------------------------------------------------------------------
00019DF0                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019DF0                            ; ---------------------------------------------------------------------------
00019DF0 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019DF4 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019DF8 0000                       		dc.w byte_19826-Map_obj76
00019DFA 02                         byte_19808:	dc.b 2
00019DFB F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019E00 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019E05 00                         		dc.b 0
00019E06 01                         byte_19814:	dc.b 1
00019E07 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019E0C 01                         byte_1981A:	dc.b 1
00019E0D F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019E12 01                         byte_19820:	dc.b 1
00019E13 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019E18 01                         byte_19826:	dc.b 1
00019E19 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019E1E                            		even
00019E1E                            		even
00019E1E                            
00019E1E                            ; ===========================================================================
00019E1E                            
00019E1E                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019E1E 4EF9 0000 DBE4             		jmp	DeleteObject
00019E24                            ; ===========================================================================
00019E24                            ; ---------------------------------------------------------------------------
00019E24                            ; Object 82 - Eggman (SBZ2)
00019E24                            ; ---------------------------------------------------------------------------
00019E24                            
00019E24                            Obj82:					; XREF: Obj_Index
00019E24 7000                       		moveq	#0,d0
00019E26 1028 0024                  		move.b	$24(a0),d0
00019E2A 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019E2E 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019E32                            ; ===========================================================================
00019E32 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019E34 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019E36 0000                       		dc.w Obj82_Switch-Obj82_Index
00019E38                            
00019E38 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019E3B 0400 03                    		dc.b 4,	0, 3
00019E3E                            ; ===========================================================================
00019E3E                            
00019E3E                            Obj82_Main:				; XREF: Obj82_Index
00019E3E 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019E42 317C 2160 0008             		move.w	#$2160,8(a0)
00019E48 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019E4E 117C 000F 0020             		move.b	#$F,$20(a0)
00019E54 117C 0010 0021             		move.b	#$10,$21(a0)
00019E5A 08A8 0000 0022             		bclr	#0,$22(a0)
00019E60 4228 0025                  		clr.b	$25(a0)
00019E64 115A 0024                  		move.b	(a2)+,$24(a0)
00019E68 115A 001C                  		move.b	(a2)+,$1C(a0)
00019E6C 115A 0018                  		move.b	(a2)+,$18(a0)
00019E70 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019E78 317C 0400 0002             		move.w	#$400,2(a0)
00019E7E 117C 0004 0001             		move.b	#4,1(a0)
00019E84 08E8 0007 0001             		bset	#7,1(a0)
00019E8A 117C 0020 0019             		move.b	#$20,$19(a0)
00019E90 4EB9 0000 E044             		jsr	SingleObjLoad2
00019E96 6600                       		bne.s	Obj82_Eggman
00019E98 2348 0034                  		move.l	a0,$34(a1)
00019E9C 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019EA0 337C 2130 0008             		move.w	#$2130,8(a1)
00019EA6 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019EAC 4228 0025                  		clr.b	$25(a0)
00019EB0 135A 0024                  		move.b	(a2)+,$24(a1)
00019EB4 135A 001C                  		move.b	(a2)+,$1C(a1)
00019EB8 135A 0018                  		move.b	(a2)+,$18(a1)
00019EBC 237C 0000 C39C 0004        		move.l	#Map_obj32,4(a1)
00019EC4 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019ECA 137C 0004 0001             		move.b	#4,1(a1)
00019ED0 08E9 0007 0001             		bset	#7,1(a1)
00019ED6 137C 0010 0019             		move.b	#$10,$19(a1)
00019EDC 137C 0000 001A             		move.b	#0,$1A(a1)
00019EE2                            
00019EE2                            Obj82_Eggman:				; XREF: Obj82_Index
00019EE2 7000                       		moveq	#0,d0
00019EE4 1028 0025                  		move.b	$25(a0),d0
00019EE8 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019EEC 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019EF0 43FA 0000                  		lea	Ani_obj82(pc),a1
00019EF4 4EB9 0000 AC42             		jsr	AnimateSprite
00019EFA 4EF9 0000 DBA8             		jmp	DisplaySprite
00019F00                            ; ===========================================================================
00019F00 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019F02 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019F04 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019F06 0000                       		dc.w loc_19934-Obj82_EggIndex
00019F08                            ; ===========================================================================
00019F08                            
00019F08                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019F08 3028 0008                  		move.w	8(a0),d0
00019F0C 9078 D008                  		sub.w	($FFFFD008).w,d0
00019F10 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019F14 6400                       		bcc.s	loc_19934	; if not, branch
00019F16 5428 0025                  		addq.b	#2,$25(a0)
00019F1A 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019F20 117C 0001 001C             		move.b	#1,$1C(a0)
00019F26                            
00019F26                            loc_19934:				; XREF: Obj82_EggIndex
00019F26 4EF9 0000 DB82             		jmp	SpeedToPos
00019F2C                            ; ===========================================================================
00019F2C                            
00019F2C                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019F2C 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019F30 6600                       		bne.s	loc_19954	; if time remains, branch
00019F32 5428 0025                  		addq.b	#2,$25(a0)
00019F36 117C 0002 001C             		move.b	#2,$1C(a0)
00019F3C 5868 000C                  		addq.w	#4,$C(a0)
00019F40 317C 000F 003C             		move.w	#15,$3C(a0)
00019F46                            
00019F46                            loc_19954:
00019F46 60DE                       		bra.s	loc_19934
00019F48                            ; ===========================================================================
00019F48                            
00019F48                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019F48 5368 003C                  		subq.w	#1,$3C(a0)
00019F4C 6E00                       		bgt.s	loc_199D0
00019F4E 6600                       		bne.s	loc_1996A
00019F50 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019F56 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019F5C                            
00019F5C                            loc_1996A:
00019F5C 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019F62 6E00                       		bgt.s	loc_19976
00019F64 4268 0010                  		clr.w	$10(a0)
00019F68                            
00019F68                            loc_19976:
00019F68 0668 0024 0012             		addi.w	#$24,$12(a0)
00019F6E 4A68 0012                  		tst.w	$12(a0)
00019F72 6B00                       		bmi.s	Obj82_FindBlocks
00019F74 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019F7A 6500                       		bcs.s	Obj82_FindBlocks
00019F7C 317C 5357 0028             		move.w	#$5357,$28(a0)
00019F82 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019F88 6500                       		bcs.s	Obj82_FindBlocks
00019F8A 317C 059B 000C             		move.w	#$59B,$C(a0)
00019F90 4268 0012                  		clr.w	$12(a0)
00019F94                            
00019F94                            Obj82_FindBlocks:
00019F94 3028 0010                  		move.w	$10(a0),d0
00019F98 8068 0012                  		or.w	$12(a0),d0
00019F9C 6600                       		bne.s	loc_199D0
00019F9E 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019FA2 703E                       		moveq	#$3E,d0
00019FA4 7240                       		moveq	#$40,d1
00019FA6                            
00019FA6                            Obj82_FindLoop:	
00019FA6 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019FA8 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019FAC 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019FB0                            
00019FB0 6600                       		bne.s	loc_199D0
00019FB2 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019FB8 5428 0025                  		addq.b	#2,$25(a0)
00019FBC 117C 0001 001C             		move.b	#1,$1C(a0)
00019FC2                            
00019FC2                            loc_199D0:
00019FC2 6000 FF62                  		bra.w	loc_19934
00019FC6                            ; ===========================================================================
00019FC6                            
00019FC6                            Obj82_Switch:				; XREF: Obj82_Index
00019FC6 7000                       		moveq	#0,d0
00019FC8 1028 0025                  		move.b	$25(a0),d0
00019FCC 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019FD0 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019FD4                            ; ===========================================================================
00019FD4 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019FD6 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019FD8                            ; ===========================================================================
00019FD8                            
00019FD8                            loc_199E6:				; XREF: Obj82_SwIndex
00019FD8 2268 0034                  		movea.l	$34(a0),a1
00019FDC 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019FE2 6600                       		bne.s	Obj82_SwDisplay
00019FE4 117C 0001 001A             		move.b	#1,$1A(a0)
00019FEA 5428 0025                  		addq.b	#2,$25(a0)
00019FEE                            
00019FEE                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019FEE 4EF9 0000 DBA8             		jmp	DisplaySprite
00019FF4                            ; ===========================================================================
00019FF4                            Ani_obj82:
00019FF4                            	include "_anim\obj82.asm"
00019FF4                            ; ---------------------------------------------------------------------------
00019FF4                            ; Animation script - Eggman (SBZ2)
00019FF4                            ; ---------------------------------------------------------------------------
00019FF4 0000                       		dc.w byte_19A10-Ani_obj82
00019FF6 0000                       		dc.w byte_19A14-Ani_obj82
00019FF8 0000                       		dc.w byte_19A18-Ani_obj82
00019FFA 0000                       		dc.w byte_19A20-Ani_obj82
00019FFC 0000                       		dc.w byte_19A24-Ani_obj82
00019FFE 0000                       		dc.w byte_19A2A-Ani_obj82
0001A000 0000                       		dc.w byte_19A30-Ani_obj82
0001A002 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A006 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A00A 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A012 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A016 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A01C 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A022 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A026                            		even
0001A026                            		even
0001A026                            
0001A026                            ; ---------------------------------------------------------------------------
0001A026                            ; Sprite mappings - Eggman (SBZ2)
0001A026                            ; ---------------------------------------------------------------------------
0001A026                            Map_obj82:
0001A026                            	include "_maps\obj82.asm"
0001A026                            ; ================================================================================
0001A026                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A026                            ; ================================================================================
0001A026                            
0001A026                            DATAA16Z12RYSAF:
0001A026 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A02A 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A02E 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A032 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A036 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A03A 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A03C 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A03D FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A042 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A047 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A04C 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A04D E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A052 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A057 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A05C FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A061 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A062 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A067 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A06C 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A071 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A076 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A077 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A07C 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A081 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A086 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A087 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A08C 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A091 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A096 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A09B 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A09C E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0A1 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0A6 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A0AB 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0B0 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A0B1 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0B6 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0BB 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A0C0 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A0C5 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A0CA F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A0CF F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A0D4 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A0D5 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A0DA E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A0DF 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A0E4 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A0E9 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A0EA 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A0EF E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A0F4 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A0F9 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A0FE EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A103 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A104 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A109 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A10E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A113 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A118 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A11D F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A122 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A127 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A12C 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A12D EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A132 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A137 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A13C                            	even
0001A13C                            	even
0001A13C                            
0001A13C                            ; ===========================================================================
0001A13C                            ; ---------------------------------------------------------------------------
0001A13C                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A13C                            ; ---------------------------------------------------------------------------
0001A13C                            
0001A13C                            Obj83:					; XREF: Obj_Index
0001A13C 7000                       		moveq	#0,d0
0001A13E 1028 0024                  		move.b	$24(a0),d0
0001A142 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A146 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A14A                            ; ===========================================================================
0001A14A 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A14C 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A14E 0000                       		dc.w loc_19C36-Obj83_Index
0001A150 0000                       		dc.w loc_19C62-Obj83_Index
0001A152 0000                       		dc.w loc_19C72-Obj83_Index
0001A154 0000                       		dc.w loc_19C80-Obj83_Index
0001A156                            ; ===========================================================================
0001A156                            
0001A156                            Obj83_Main:				; XREF: Obj83_Index
0001A156 317C 2080 0008             		move.w	#$2080,8(a0)
0001A15C 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A162 117C 0080 0019             		move.b	#$80,$19(a0)
0001A168 117C 0010 0016             		move.b	#$10,$16(a0)
0001A16E 117C 0004 0001             		move.b	#4,1(a0)
0001A174 08E8 0007 0001             		bset	#7,1(a0)
0001A17A 7800                       		moveq	#0,d4
0001A17C 3A3C 2010                  		move.w	#$2010,d5
0001A180 7C07                       		moveq	#7,d6
0001A182 45E8 0030                  		lea	$30(a0),a2
0001A186                            
0001A186                            Obj83_MakeBlock:
0001A186 4EB9 0000 E02E             		jsr	SingleObjLoad
0001A18C 6600                       		bne.s	Obj83_ExitMake
0001A18E 34C9                       		move.w	a1,(a2)+
0001A190 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A194 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A19C 337C 4518 0002             		move.w	#$4518,2(a1)
0001A1A2 137C 0004 0001             		move.b	#4,1(a1)
0001A1A8 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1AE 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1B4 137C 0003 0018             		move.b	#3,$18(a1)
0001A1BA 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A1BE 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A1C4 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A1C8 137C 0008 0024             		move.b	#8,$24(a1)
0001A1CE 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A1D2                            
0001A1D2                            Obj83_ExitMake:
0001A1D2 5428 0024                  		addq.b	#2,$24(a0)
0001A1D6 4E75                       		rts	
0001A1D8                            ; ===========================================================================
0001A1D8                            
0001A1D8                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A1D8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A1DE 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A1E0 4228 001A                  		clr.b	$1A(a0)
0001A1E4 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A1E8                            
0001A1E8                            Obj83_Solid:
0001A1E8 7000                       		moveq	#0,d0
0001A1EA 1028 001A                  		move.b	$1A(a0),d0
0001A1EE 4400                       		neg.b	d0
0001A1F0 4880                       		ext.w	d0
0001A1F2 5040                       		addq.w	#8,d0
0001A1F4 E940                       		asl.w	#4,d0
0001A1F6 383C 2100                  		move.w	#$2100,d4
0001A1FA 9840                       		sub.w	d0,d4
0001A1FC 1140 0019                  		move.b	d0,$19(a0)
0001A200 3144 0008                  		move.w	d4,8(a0)
0001A204 720B                       		moveq	#$B,d1
0001A206 D240                       		add.w	d0,d1
0001A208 7410                       		moveq	#$10,d2
0001A20A 7611                       		moveq	#$11,d3
0001A20C 4EF9 0000 FF78             		jmp	SolidObject
0001A212                            ; ===========================================================================
0001A212                            
0001A212                            loc_19C36:				; XREF: Obj83_Index
0001A212 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A218 6400                       		bcc.s	Obj83_Solid2
0001A21A 70FF                       		moveq	#-1,d0
0001A21C 1028 001A                  		move.b	$1A(a0),d0
0001A220 4880                       		ext.w	d0
0001A222 D040                       		add.w	d0,d0
0001A224 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A228 2240                       		movea.l	d0,a1
0001A22A 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A230 5228 001A                  		addq.b	#1,$1A(a0)
0001A234 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A23A 6700                       		beq.s	loc_19C62
0001A23C                            
0001A23C                            Obj83_Solid2:
0001A23C 60AA                       		bra.s	Obj83_Solid
0001A23E                            ; ===========================================================================
0001A23E                            
0001A23E                            loc_19C62:				; XREF: Obj83_Index
0001A23E 08A8 0003 0022             		bclr	#3,$22(a0)
0001A244 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A24A 6000 FBD2                  		bra.w	loc_1982C
0001A24E                            ; ===========================================================================
0001A24E                            
0001A24E                            loc_19C72:				; XREF: Obj83_Index
0001A24E 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A254 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A256 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A25C                            ; ===========================================================================
0001A25C                            
0001A25C                            loc_19C80:				; XREF: Obj83_Index
0001A25C 4A28 0001                  		tst.b	1(a0)
0001A260 6A00 FBBC                  		bpl.w	loc_1982C
0001A264 4EB9 0000 DB56             		jsr	ObjectFall
0001A26A 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A270                            ; ===========================================================================
0001A270                            
0001A270                            Obj83_Break:				; XREF: loc_19C72
0001A270 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A274 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A278 7801                       		moveq	#1,d4
0001A27A 7203                       		moveq	#3,d1
0001A27C 7438                       		moveq	#$38,d2
0001A27E 5428 0024                  		addq.b	#2,$24(a0)
0001A282 117C 0008 0019             		move.b	#8,$19(a0)
0001A288 117C 0008 0016             		move.b	#8,$16(a0)
0001A28E 43D0                       		lea	(a0),a1
0001A290 6000                       		bra.s	Obj83_MakeFrag
0001A292                            ; ===========================================================================
0001A292                            
0001A292                            Obj83_LoopFrag:
0001A292 4EB9 0000 E044             		jsr	SingleObjLoad2
0001A298 6600                       		bne.s	Obj83_BreakSnd
0001A29A                            
0001A29A                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A29A 45D0                       		lea	(a0),a2
0001A29C 47D1                       		lea	(a1),a3
0001A29E 7603                       		moveq	#3,d3
0001A2A0                            
0001A2A0                            loc_19CC4:
0001A2A0 26DA                       		move.l	(a2)+,(a3)+
0001A2A2 26DA                       		move.l	(a2)+,(a3)+
0001A2A4 26DA                       		move.l	(a2)+,(a3)+
0001A2A6 26DA                       		move.l	(a2)+,(a3)+
0001A2A8 51CB FFF6                  		dbf	d3,loc_19CC4
0001A2AC                            
0001A2AC 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2B0 361D                       		move.w	(a5)+,d3
0001A2B2 D769 0008                  		add.w	d3,8(a1)
0001A2B6 361D                       		move.w	(a5)+,d3
0001A2B8 D769 000C                  		add.w	d3,$C(a1)
0001A2BC 1344 001A                  		move.b	d4,$1A(a1)
0001A2C0 5244                       		addq.w	#1,d4
0001A2C2 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A2C6                            
0001A2C6                            Obj83_BreakSnd:
0001A2C6 303C 00CB                  		move.w	#$CB,d0
0001A2CA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A2D0 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A2D6                            ; ===========================================================================
0001A2D6 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A2DA 0120 00C0                  		dc.w $120, $C0
0001A2DE FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A2E2 0010 0000                  		dc.w $10, 0
0001A2E6 0000 0010                  		dc.w 0,	$10
0001A2EA 0010 0010                  		dc.w $10, $10
0001A2EE                            ; ---------------------------------------------------------------------------
0001A2EE                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A2EE                            ; ---------------------------------------------------------------------------
0001A2EE                            Map_obj83:
0001A2EE                            	include "_maps\obj83.asm"
0001A2EE                            ; ---------------------------------------------------------------------------
0001A2EE                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A2EE                            ; ---------------------------------------------------------------------------
0001A2EE 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A2F2 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A2F6 0000                       		dc.w byte_19D46-Map_obj83
0001A2F8 01                         byte_19D1C:	dc.b 1
0001A2F9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A2FE 02                         byte_19D22:	dc.b 2
0001A2FF F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A304 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A309 00                         		dc.b 0
0001A30A 02                         byte_19D2E:	dc.b 2
0001A30B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A310 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A315 00                         		dc.b 0
0001A316 02                         byte_19D3A:	dc.b 2
0001A317 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A31C F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A321 00                         		dc.b 0
0001A322 02                         byte_19D46:	dc.b 2
0001A323 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A328 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A32E 00                         		even
0001A32E 00                         		even
0001A32E                            
0001A32E                            ; ===========================================================================
0001A32E                            ; ---------------------------------------------------------------------------
0001A32E                            ; Object 85 - Eggman (FZ)
0001A32E                            ; ---------------------------------------------------------------------------
0001A32E                            
0001A32E                            Obj85_Delete:
0001A32E 4EF9 0000 DBE4             		jmp	DeleteObject
0001A334                            ; ===========================================================================
0001A334                            
0001A334                            Obj85:					; XREF: Obj_Index
0001A334 7000                       		moveq	#0,d0
0001A336 1028 0024                  		move.b	$24(a0),d0
0001A33A 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A33E 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A342                            ; ===========================================================================
0001A342 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A344 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A346 0000                       		dc.w loc_1A38E-Obj85_Index
0001A348 0000                       		dc.w loc_1A346-Obj85_Index
0001A34A 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A34C 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A34E 0000                       		dc.w loc_1A264-Obj85_Index
0001A350                            
0001A350 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A356 0001 A026                  		dc.l Map_obj82		; mappings pointer
0001A35A 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A360 0000 0000                  		dc.l Map_obj84
0001A364 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A36A 0000 0000                  		dc.l Map_FZBoss
0001A36E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A374 0001 A026                  		dc.l Map_obj82
0001A378 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A37E 0001 8308                  		dc.l Map_Eggman
0001A382 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A388 0001 8308                  		dc.l Map_Eggman
0001A38C                            
0001A38C 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A391 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A396 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A39B 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A3A0 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A3A5 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A3AA                            ; ===========================================================================
0001A3AA                            
0001A3AA                            Obj85_Main:				; XREF: Obj85_Index
0001A3AA 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A3AE 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A3B2 2248                       		movea.l	a0,a1
0001A3B4 7205                       		moveq	#5,d1
0001A3B6 6000                       		bra.s	Obj85_LoadBoss
0001A3B8                            ; ===========================================================================
0001A3B8                            
0001A3B8                            Obj85_Loop:
0001A3B8 4EB9 0000 E044             		jsr	SingleObjLoad2
0001A3BE 6600                       		bne.s	loc_19E20
0001A3C0                            
0001A3C0                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A3C0 12BC 0085                  		move.b	#$85,(a1)
0001A3C4 335A 0008                  		move.w	(a2)+,8(a1)
0001A3C8 335A 000C                  		move.w	(a2)+,$C(a1)
0001A3CC 335A 0002                  		move.w	(a2)+,2(a1)
0001A3D0 235A 0004                  		move.l	(a2)+,4(a1)
0001A3D4 135B 0024                  		move.b	(a3)+,$24(a1)
0001A3D8 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A3DC 135B 0018                  		move.b	(a3)+,$18(a1)
0001A3E0 135B 0017                  		move.b	(a3)+,$17(a1)
0001A3E4 135B 0016                  		move.b	(a3)+,$16(a1)
0001A3E8 137C 0004 0001             		move.b	#4,1(a1)
0001A3EE 08E8 0007 0001             		bset	#7,1(a0)
0001A3F4 2348 0034                  		move.l	a0,$34(a1)
0001A3F8 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A3FC                            
0001A3FC                            loc_19E20:
0001A3FC 45E8 0036                  		lea	$36(a0),a2
0001A400 4EB9 0000 E02E             		jsr	SingleObjLoad
0001A406 6600                       		bne.s	loc_19E5A
0001A408 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A40C 3489                       		move.w	a1,(a2)
0001A40E 2348 0034                  		move.l	a0,$34(a1)
0001A412 45E8 0038                  		lea	$38(a0),a2
0001A416 7400                       		moveq	#0,d2
0001A418 7203                       		moveq	#3,d1
0001A41A                            
0001A41A                            loc_19E3E:
0001A41A 4EB9 0000 E044             		jsr	SingleObjLoad2
0001A420 6600                       		bne.s	loc_19E5A
0001A422 34C9                       		move.w	a1,(a2)+
0001A424 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A428 2348 0034                  		move.l	a0,$34(a1)
0001A42C 1342 0028                  		move.b	d2,$28(a1)
0001A430 5442                       		addq.w	#2,d2
0001A432 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A436                            
0001A436                            loc_19E5A:
0001A436 317C 0000 0034             		move.w	#0,$34(a0)
0001A43C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A442 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A448                            
0001A448                            Obj85_Eggman:				; XREF: Obj85_Index
0001A448 7000                       		moveq	#0,d0
0001A44A 1028 0034                  		move.b	$34(a0),d0
0001A44E 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A452 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A456 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A45C                            ; ===========================================================================
0001A45C 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A460 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A464 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A468 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A46C                            ; ===========================================================================
0001A46C                            
0001A46C                            loc_19E90:				; XREF: off_19E80
0001A46C 4AB8 F680                  		tst.l	($FFFFF680).w
0001A470 6600                       		bne.s	loc_19EA2
0001A472 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A478 6500                       		bcs.s	loc_19EA2
0001A47A 5428 0034                  		addq.b	#2,$34(a0)
0001A47E                            
0001A47E                            loc_19EA2:
0001A47E 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A482 4E75                       		rts	
0001A484                            ; ===========================================================================
0001A484                            
0001A484                            loc_19EA8:				; XREF: off_19E80
0001A484 4A68 0030                  		tst.w	$30(a0)
0001A488 6A00                       		bpl.s	loc_19F10
0001A48A 4268 0030                  		clr.w	$30(a0)
0001A48E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001A494 0240 000C                  		andi.w	#$C,d0
0001A498 3200                       		move.w	d0,d1
0001A49A 5441                       		addq.w	#2,d1
0001A49C 4A80                       		tst.l	d0
0001A49E 6A00                       		bpl.s	loc_19EC6
0001A4A0 C141                       		exg	d1,d0
0001A4A2                            
0001A4A2                            loc_19EC6:
0001A4A2 43FA 0000                  		lea	word_19FD6(pc),a1
0001A4A6 3031 0000                  		move.w	(a1,d0.w),d0
0001A4AA 3231 1000                  		move.w	(a1,d1.w),d1
0001A4AE 3140 0030                  		move.w	d0,$30(a0)
0001A4B2 74FF                       		moveq	#-1,d2
0001A4B4 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A4B8 2242                       		movea.l	d2,a1
0001A4BA 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A4C0 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A4C6 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A4CA 2242                       		movea.l	d2,a1
0001A4CC 137C 0001 0029             		move.b	#1,$29(a1)
0001A4D2 337C 0000 0030             		move.w	#0,$30(a1)
0001A4D8 317C 0001 0032             		move.w	#1,$32(a0)
0001A4DE 4228 0035                  		clr.b	$35(a0)
0001A4E2 303C 00B7                  		move.w	#$B7,d0
0001A4E6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A4EC                            
0001A4EC                            loc_19F10:
0001A4EC 4A68 0032                  		tst.w	$32(a0)
0001A4F0 6B00 0000                  		bmi.w	loc_19FA6
0001A4F4 08A8 0000 0022             		bclr	#0,$22(a0)
0001A4FA 3038 D008                  		move.w	($FFFFD008).w,d0
0001A4FE 9068 0008                  		sub.w	8(a0),d0
0001A502 6500                       		bcs.s	loc_19F2E
0001A504 08E8 0000 0022             		bset	#0,$22(a0)
0001A50A                            
0001A50A                            loc_19F2E:
0001A50A 323C 002B                  		move.w	#$2B,d1
0001A50E 343C 0014                  		move.w	#$14,d2
0001A512 363C 0014                  		move.w	#$14,d3
0001A516 3828 0008                  		move.w	8(a0),d4
0001A51A 4EB9 0000 FF78             		jsr	SolidObject
0001A520 4A44                       		tst.w	d4
0001A522 6E00                       		bgt.s	loc_19F50
0001A524                            
0001A524                            loc_19F48:
0001A524 4A28 0035                  		tst.b	$35(a0)
0001A528 6600                       		bne.s	loc_19F88
0001A52A 6000                       		bra.s	loc_19F96
0001A52C                            ; ===========================================================================
0001A52C                            
0001A52C                            loc_19F50:
0001A52C 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A530 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A536 66EC                       		bne.s	loc_19F48
0001A538 303C 0300                  		move.w	#$300,d0
0001A53C 0828 0000 0022             		btst	#0,$22(a0)
0001A542 6600                       		bne.s	loc_19F6A
0001A544 4440                       		neg.w	d0
0001A546                            
0001A546                            loc_19F6A:
0001A546 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A54A 4A28 0035                  		tst.b	$35(a0)
0001A54E 6600                       		bne.s	loc_19F88
0001A550 5328 0021                  		subq.b	#1,$21(a0)
0001A554 117C 0064 0035             		move.b	#$64,$35(a0)
0001A55A 303C 00AC                  		move.w	#$AC,d0
0001A55E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A564                            
0001A564                            loc_19F88:
0001A564 5328 0035                  		subq.b	#1,$35(a0)
0001A568 6700                       		beq.s	loc_19F96
0001A56A 117C 0003 001C             		move.b	#3,$1C(a0)
0001A570 6000                       		bra.s	loc_19F9C
0001A572                            ; ===========================================================================
0001A572                            
0001A572                            loc_19F96:
0001A572 117C 0001 001C             		move.b	#1,$1C(a0)
0001A578                            
0001A578                            loc_19F9C:
0001A578 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A57C 4EF9 0000 AC42             		jmp	AnimateSprite
0001A582                            ; ===========================================================================
0001A582                            
0001A582                            loc_19FA6:
0001A582 4A28 0021                  		tst.b	$21(a0)
0001A586 6700                       		beq.s	loc_19FBC
0001A588 5428 0034                  		addq.b	#2,$34(a0)
0001A58C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A592 4268 0032                  		clr.w	$32(a0)
0001A596 4E75                       		rts	
0001A598                            ; ===========================================================================
0001A598                            
0001A598                            loc_19FBC:
0001A598 117C 0006 0034             		move.b	#6,$34(a0)
0001A59E 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A5A4 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A5AA 117C 0014 0016             		move.b	#$14,$16(a0)
0001A5B0 4E75                       		rts	
0001A5B2                            ; ===========================================================================
0001A5B2 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A5C2                            ; ===========================================================================
0001A5C2                            
0001A5C2                            loc_19FE6:				; XREF: off_19E80
0001A5C2 70FF                       		moveq	#-1,d0
0001A5C4 3028 0036                  		move.w	$36(a0),d0
0001A5C8 2240                       		movea.l	d0,a1
0001A5CA 4A68 0030                  		tst.w	$30(a0)
0001A5CE 6A00                       		bpl.s	loc_1A000
0001A5D0 4268 0030                  		clr.w	$30(a0)
0001A5D4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5DA 6100                       		bsr.s	loc_1A020
0001A5DC                            
0001A5DC                            loc_1A000:
0001A5DC 700F                       		moveq	#$F,d0
0001A5DE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A5E2 6600                       		bne.s	loc_1A00A
0001A5E4 6100                       		bsr.s	loc_1A020
0001A5E6                            
0001A5E6                            loc_1A00A:
0001A5E6 4A68 0032                  		tst.w	$32(a0)
0001A5EA 6700                       		beq.s	locret_1A01E
0001A5EC 5528 0034                  		subq.b	#2,$34(a0)
0001A5F0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A5F6 4268 0032                  		clr.w	$32(a0)
0001A5FA                            
0001A5FA                            locret_1A01E:
0001A5FA 4E75                       		rts	
0001A5FC                            ; ===========================================================================
0001A5FC                            
0001A5FC                            loc_1A020:
0001A5FC 303C 00B1                  		move.w	#$B1,d0
0001A600 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A606                            ; ===========================================================================
0001A606                            
0001A606                            loc_1A02A:				; XREF: off_19E80
0001A606 117C 0030 0017             		move.b	#$30,$17(a0)
0001A60C 08E8 0000 0022             		bset	#0,$22(a0)
0001A612 4EB9 0000 DB82             		jsr	SpeedToPos
0001A618 117C 0006 001A             		move.b	#6,$1A(a0)
0001A61E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A624 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A62A 6500                       		bcs.s	loc_1A070
0001A62C 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A632 5428 0034                  		addq.b	#2,$34(a0)
0001A636 117C 0020 0017             		move.b	#$20,$17(a0)
0001A63C 317C 0100 0010             		move.w	#$100,$10(a0)
0001A642 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A648 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A64C                            
0001A64C                            loc_1A070:
0001A64C 6000 0000                  		bra.w	loc_1A166
0001A650                            ; ===========================================================================
0001A650                            
0001A650                            loc_1A074:				; XREF: off_19E80
0001A650 08E8 0000 0022             		bset	#0,$22(a0)
0001A656 117C 0004 001C             		move.b	#4,$1C(a0)
0001A65C 4EB9 0000 DB82             		jsr	SpeedToPos
0001A662 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A668 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A66E 6500                       		bcs.s	loc_1A09A
0001A670 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A676                            
0001A676                            loc_1A09A:
0001A676 317C 0400 0010             		move.w	#$400,$10(a0)
0001A67C 3028 0008                  		move.w	8(a0),d0
0001A680 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A684 6A00                       		bpl.s	loc_1A0B4
0001A686 317C 0500 0010             		move.w	#$500,$10(a0)
0001A68C 6000 0000                  		bra.w	loc_1A0F2
0001A690                            ; ===========================================================================
0001A690                            
0001A690                            loc_1A0B4:
0001A690 0440 0070                  		subi.w	#$70,d0
0001A694 6500                       		bcs.s	loc_1A0F2
0001A696 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A69C 5140                       		subq.w	#8,d0
0001A69E 6500                       		bcs.s	loc_1A0F2
0001A6A0 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6A6 5140                       		subq.w	#8,d0
0001A6A8 6500                       		bcs.s	loc_1A0F2
0001A6AA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6B0 5140                       		subq.w	#8,d0
0001A6B2 6500                       		bcs.s	loc_1A0F2
0001A6B4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6BA 5140                       		subq.w	#8,d0
0001A6BC 6500                       		bcs.s	loc_1A0F2
0001A6BE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6C4 0440 0038                  		subi.w	#$38,d0
0001A6C8 6500                       		bcs.s	loc_1A0F2
0001A6CA 4268 0010                  		clr.w	$10(a0)
0001A6CE                            
0001A6CE                            loc_1A0F2:
0001A6CE 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A6D4 6500                       		bcs.s	loc_1A110
0001A6D6 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A6DC 317C 0240 0010             		move.w	#$240,$10(a0)
0001A6E2 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A6E8 5428 0034                  		addq.b	#2,$34(a0)
0001A6EC                            
0001A6EC                            loc_1A110:
0001A6EC 6000                       		bra.s	loc_1A15C
0001A6EE                            ; ===========================================================================
0001A6EE                            
0001A6EE                            loc_1A112:				; XREF: off_19E80
0001A6EE 4EB9 0000 DB82             		jsr	SpeedToPos
0001A6F4 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A6FA 6500                       		bcs.s	loc_1A124
0001A6FC 4268 0010                  		clr.w	$10(a0)
0001A700                            
0001A700                            loc_1A124:
0001A700 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A706 4A68 0012                  		tst.w	$12(a0)
0001A70A 6B00                       		bmi.s	loc_1A142
0001A70C 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A712 6500                       		bcs.s	loc_1A142
0001A714 317C 0592 000C             		move.w	#$592,$C(a0)
0001A71A 4268 0012                  		clr.w	$12(a0)
0001A71E                            
0001A71E                            loc_1A142:
0001A71E 3028 0010                  		move.w	$10(a0),d0
0001A722 8068 0012                  		or.w	$12(a0),d0
0001A726 6600                       		bne.s	loc_1A15C
0001A728 5428 0034                  		addq.b	#2,$34(a0)
0001A72C 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A732 117C 0001 0021             		move.b	#1,$21(a0)
0001A738                            
0001A738                            loc_1A15C:
0001A738 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A73C 4EB9 0000 AC42             		jsr	AnimateSprite
0001A742                            
0001A742                            loc_1A166:
0001A742 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A748 6C00                       		bge.s	loc_1A172
0001A74A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A74E                            
0001A74E                            loc_1A172:
0001A74E 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A754 6C00                       		bge.s	locret_1A190
0001A756 323C 001B                  		move.w	#$1B,d1
0001A75A 343C 0070                  		move.w	#$70,d2
0001A75E 363C 0071                  		move.w	#$71,d3
0001A762 3828 0008                  		move.w	8(a0),d4
0001A766 4EF9 0000 FF78             		jmp	SolidObject
0001A76C                            ; ===========================================================================
0001A76C                            
0001A76C                            locret_1A190:
0001A76C 4E75                       		rts	
0001A76E                            ; ===========================================================================
0001A76E                            
0001A76E                            loc_1A192:				; XREF: off_19E80
0001A76E 217C 0001 8308 0004        		move.l	#Map_Eggman,4(a0)
0001A776 317C 0400 0002             		move.w	#$400,2(a0)
0001A77C 117C 0000 001C             		move.b	#0,$1C(a0)
0001A782 08E8 0000 0022             		bset	#0,$22(a0)
0001A788 4EB9 0000 DB82             		jsr	SpeedToPos
0001A78E 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A794 6400                       		bcc.s	loc_1A1D0
0001A796 317C 0180 0010             		move.w	#$180,$10(a0)
0001A79C 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A7A2 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7A8 5428 0034                  		addq.b	#2,$34(a0)
0001A7AC                            
0001A7AC                            loc_1A1D0:
0001A7AC 6000 FF8A                  		bra.w	loc_1A15C
0001A7B0                            ; ===========================================================================
0001A7B0                            
0001A7B0                            loc_1A1D4:				; XREF: off_19E80
0001A7B0 08E8 0000 0022             		bset	#0,$22(a0)
0001A7B6 4EB9 0000 DB82             		jsr	SpeedToPos
0001A7BC 4A68 0030                  		tst.w	$30(a0)
0001A7C0 6600                       		bne.s	loc_1A1FC
0001A7C2 4A28 0020                  		tst.b	$20(a0)
0001A7C6 6600                       		bne.s	loc_1A216
0001A7C8 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A7CE 303C 00AC                  		move.w	#$AC,d0
0001A7D2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7D8                            
0001A7D8                            loc_1A1FC:
0001A7D8 5368 0030                  		subq.w	#1,$30(a0)
0001A7DC 6600                       		bne.s	loc_1A216
0001A7DE 4A28 0022                  		tst.b	$22(a0)
0001A7E2 6A00                       		bpl.s	loc_1A210
0001A7E4 317C 0060 0012             		move.w	#$60,$12(a0)
0001A7EA 6000                       		bra.s	loc_1A216
0001A7EC                            ; ===========================================================================
0001A7EC                            
0001A7EC                            loc_1A210:
0001A7EC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7F2                            
0001A7F2                            loc_1A216:
0001A7F2 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A7F8 6D00                       		blt.s	loc_1A23A
0001A7FA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A800 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A806 4278 D014                  		clr.w	($FFFFD014).w
0001A80A 4A68 0012                  		tst.w	$12(a0)
0001A80E 6A00                       		bpl.s	loc_1A248
0001A810 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A816                            
0001A816                            loc_1A23A:
0001A816 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A81C 6D00                       		blt.s	loc_1A248
0001A81E 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A824                            
0001A824                            loc_1A248:
0001A824 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A82A 6500                       		bcs.s	loc_1A260
0001A82C 4A28 0001                  		tst.b	1(a0)
0001A830 6B00                       		bmi.s	loc_1A260
0001A832 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A838 6000 FAF4                  		bra.w	Obj85_Delete
0001A83C                            ; ===========================================================================
0001A83C                            
0001A83C                            loc_1A260:
0001A83C 6000 FEFA                  		bra.w	loc_1A15C
0001A840                            ; ===========================================================================
0001A840                            
0001A840                            loc_1A264:				; XREF: Obj85_Index
0001A840 2268 0034                  		movea.l	$34(a0),a1
0001A844 1011                       		move.b	(a1),d0
0001A846 B010                       		cmp.b	(a0),d0
0001A848 6600 FAE4                  		bne.w	Obj85_Delete
0001A84C 117C 0007 001C             		move.b	#7,$1C(a0)
0001A852 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A858 6C00                       		bge.s	loc_1A280
0001A85A 6000                       		bra.s	loc_1A2A6
0001A85C                            ; ===========================================================================
0001A85C                            
0001A85C                            loc_1A280:
0001A85C 4A69 0010                  		tst.w	$10(a1)
0001A860 6700                       		beq.s	loc_1A28C
0001A862 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A868                            
0001A868                            loc_1A28C:
0001A868 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A86C 4EB9 0000 AC42             		jsr	AnimateSprite
0001A872                            
0001A872                            loc_1A296:
0001A872 2268 0034                  		movea.l	$34(a0),a1
0001A876 3169 0008 0008             		move.w	8(a1),8(a0)
0001A87C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A882                            
0001A882                            loc_1A2A6:
0001A882 2268 0034                  		movea.l	$34(a0),a1
0001A886 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A88C 7003                       		moveq	#3,d0
0001A88E C028 0022                  		and.b	$22(a0),d0
0001A892 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A898 8128 0001                  		or.b	d0,1(a0)
0001A89C 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A8A2                            ; ===========================================================================
0001A8A2                            
0001A8A2                            loc_1A2C6:				; XREF: Obj85_Index
0001A8A2 2268 0034                  		movea.l	$34(a0),a1
0001A8A6 1011                       		move.b	(a1),d0
0001A8A8 B010                       		cmp.b	(a0),d0
0001A8AA 6600 FA82                  		bne.w	Obj85_Delete
0001A8AE 0CA9 0001 8308 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A8B6 6700                       		beq.s	loc_1A2E4
0001A8B8 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A8BE 60C2                       		bra.s	loc_1A2A6
0001A8C0                            ; ===========================================================================
0001A8C0                            
0001A8C0                            loc_1A2E4:
0001A8C0 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8C6 4A29 0021                  		tst.b	$21(a1)
0001A8CA 6F00                       		ble.s	loc_1A312
0001A8CC 117C 0006 001C             		move.b	#6,$1C(a0)
0001A8D2 217C 0001 8308 0004        		move.l	#Map_Eggman,4(a0)
0001A8DA 317C 0400 0002             		move.w	#$400,2(a0)
0001A8E0 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A8E4 4EB9 0000 AC42             		jsr	AnimateSprite
0001A8EA 6000 FF86                  		bra.w	loc_1A296
0001A8EE                            ; ===========================================================================
0001A8EE                            
0001A8EE                            loc_1A312:
0001A8EE 4A28 0001                  		tst.b	1(a0)
0001A8F2 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A8F6 6100 D56E                  		bsr.w	BossDefeated
0001A8FA 117C 0002 0018             		move.b	#2,$18(a0)
0001A900 117C 0000 001C             		move.b	#0,$1C(a0)
0001A906 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A90E 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A914 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A918 4EB9 0000 AC42             		jsr	AnimateSprite
0001A91E 6000 FF52                  		bra.w	loc_1A296
0001A922                            ; ===========================================================================
0001A922                            
0001A922                            loc_1A346:				; XREF: Obj85_Index
0001A922 08E8 0000 0022             		bset	#0,$22(a0)
0001A928 2268 0034                  		movea.l	$34(a0),a1
0001A92C 0CA9 0001 8308 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A934 6700                       		beq.s	loc_1A35E
0001A936 6000 FF4A                  		bra.w	loc_1A2A6
0001A93A                            ; ===========================================================================
0001A93A                            
0001A93A                            loc_1A35E:
0001A93A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A940 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A946 4A28 001E                  		tst.b	$1E(a0)
0001A94A 6600                       		bne.s	loc_1A376
0001A94C 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A952                            
0001A952                            loc_1A376:
0001A952 5328 001E                  		subq.b	#1,$1E(a0)
0001A956 6E00                       		bgt.s	loc_1A38A
0001A958 5228 001A                  		addq.b	#1,$1A(a0)
0001A95C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A962 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A966                            
0001A966                            loc_1A38A:
0001A966 6000 FF0A                  		bra.w	loc_1A296
0001A96A                            ; ===========================================================================
0001A96A                            
0001A96A                            loc_1A38E:				; XREF: Obj85_Index
0001A96A 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A970 3038 D008                  		move.w	($FFFFD008).w,d0
0001A974 9068 0008                  		sub.w	8(a0),d0
0001A978 6500                       		bcs.s	loc_1A3A6
0001A97A 4A28 0001                  		tst.b	1(a0)
0001A97E 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A982                            
0001A982                            loc_1A3A6:
0001A982 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A988                            ; ===========================================================================
0001A988                            
0001A988                            loc_1A3AC:				; XREF: Obj85_Index
0001A988 117C 0000 001A             		move.b	#0,$1A(a0)
0001A98E 08E8 0000 0022             		bset	#0,$22(a0)
0001A994 2268 0034                  		movea.l	$34(a0),a1
0001A998 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A99E 6600                       		bne.s	loc_1A3D0
0001A9A0 0CA9 0001 8308 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A9A8 6700 F984                  		beq.w	Obj85_Delete
0001A9AC                            
0001A9AC                            loc_1A3D0:
0001A9AC 6000 FED4                  		bra.w	loc_1A2A6
0001A9B0                            ; ===========================================================================
0001A9B0                            Ani_obj85:
0001A9B0                            	include "_anim\obj85.asm"
0001A9B0                            ; ---------------------------------------------------------------------------
0001A9B0                            ; Animation script - Eggman (FZ)
0001A9B0                            ; ---------------------------------------------------------------------------
0001A9B0 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A9B2 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A9B6                            		even
0001A9B6                            		even
0001A9B6                            
0001A9B6                            Map_Eggman2:
0001A9B6                            	include "_maps\Eggman2.asm"
0001A9B6                            ; ---------------------------------------------------------------------------
0001A9B6                            ; Sprite mappings - Eggman (FZ)
0001A9B6                            ; ---------------------------------------------------------------------------
0001A9B6 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A9B8 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A9BA 06                         byte_1A3DE:	dc.b 6
0001A9BB E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A9C0 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A9C5 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9CA FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9CF FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9D4 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9D9 06                         byte_1A3FD:	dc.b 6
0001A9DA E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A9DF EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A9E4 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9E9 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9EE FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9F3 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9F8                            		even
0001A9F8                            		even
0001A9F8                            
0001A9F8                            Map_FZBoss:
0001A9F8                            	include "_maps\FZ boss.asm"
0001A9F8                            ; ---------------------------------------------------------------------------
0001A9F8                            ; Sprite mappings - boss (FZ)
0001A9F8                            ; ---------------------------------------------------------------------------
0001A9F8 0000                       		dc.w byte_1A422-Map_FZBoss
0001A9FA 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A9FC 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A9FE 02                         byte_1A422:	dc.b 2
0001A9FF 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AA04 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AA09 03                         byte_1A42D:	dc.b 3
0001AA0A 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AA0F 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AA14 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AA19 02                         byte_1A43D:	dc.b 2
0001AA1A 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AA1F 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AA24                            		even
0001AA24                            		even
0001AA24                            
0001AA24                            ; ===========================================================================
0001AA24                            
0001AA24                            Obj84_Delete:
0001AA24 4EF9 0000 DBE4             		jmp	DeleteObject
0001AA2A                            ; ===========================================================================
0001AA2A                            ; ---------------------------------------------------------------------------
0001AA2A                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AA2A                            ; ---------------------------------------------------------------------------
0001AA2A                            
0001AA2A                            Obj84:					; XREF: Obj_Index
0001AA2A 7000                       		moveq	#0,d0
0001AA2C 1028 0024                  		move.b	$24(a0),d0
0001AA30 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AA34 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AA38                            ; ===========================================================================
0001AA38 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AA3A 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AA3C 0000                       		dc.w loc_1A57E-Obj84_Index
0001AA3E                            
0001AA3E 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AA42 2550 0620                  		dc.w $2550, $620
0001AA46 2490 04C0                  		dc.w $2490, $4C0
0001AA4A 2510 04C0                  		dc.w $2510, $4C0
0001AA4E                            ; ===========================================================================
0001AA4E                            
0001AA4E                            Obj84_Main:				; XREF: Obj84_Index
0001AA4E 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AA52 7000                       		moveq	#0,d0
0001AA54 1028 0028                  		move.b	$28(a0),d0
0001AA58 D040                       		add.w	d0,d0
0001AA5A D2C0                       		adda.w	d0,a1
0001AA5C 117C 0004 0001             		move.b	#4,1(a0)
0001AA62 08E8 0007 0001             		bset	#7,1(a0)
0001AA68 08E8 0004 0001             		bset	#4,1(a0)
0001AA6E 317C 0300 0002             		move.w	#$300,2(a0)
0001AA74 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AA7C 3159 0008                  		move.w	(a1)+,8(a0)
0001AA80 3151 000C                  		move.w	(a1),$C(a0)
0001AA84 3159 0038                  		move.w	(a1)+,$38(a0)
0001AA88 117C 0020 0016             		move.b	#$20,$16(a0)
0001AA8E 117C 0060 0017             		move.b	#$60,$17(a0)
0001AA94 117C 0020 0019             		move.b	#$20,$19(a0)
0001AA9A 117C 0060 0016             		move.b	#$60,$16(a0)
0001AAA0 117C 0003 0018             		move.b	#3,$18(a0)
0001AAA6 5428 0024                  		addq.b	#2,$24(a0)
0001AAAA                            
0001AAAA                            loc_1A4CE:				; XREF: Obj84_Index
0001AAAA 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAB0 6F00                       		ble.s	loc_1A4DC
0001AAB2 08E8 0001 0001             		bset	#1,1(a0)
0001AAB8                            
0001AAB8                            loc_1A4DC:
0001AAB8 42A8 003C                  		clr.l	$3C(a0)
0001AABC 4A28 0029                  		tst.b	$29(a0)
0001AAC0 6700                       		beq.s	loc_1A4EA
0001AAC2 5428 0024                  		addq.b	#2,$24(a0)
0001AAC6                            
0001AAC6                            loc_1A4EA:
0001AAC6 2028 003C                  		move.l	$3C(a0),d0
0001AACA 2228 0038                  		move.l	$38(a0),d1
0001AACE D280                       		add.l	d0,d1
0001AAD0 4841                       		swap	d1
0001AAD2 3141 000C                  		move.w	d1,$C(a0)
0001AAD6 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AADC 6600                       		bne.s	loc_1A524
0001AADE 4A68 0030                  		tst.w	$30(a0)
0001AAE2 6A00                       		bpl.s	loc_1A524
0001AAE4 70F6                       		moveq	#-$A,d0
0001AAE6 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAEC 6F00                       		ble.s	loc_1A514
0001AAEE 700E                       		moveq	#$E,d0
0001AAF0                            
0001AAF0                            loc_1A514:
0001AAF0 D240                       		add.w	d0,d1
0001AAF2 2268 0034                  		movea.l	$34(a0),a1
0001AAF6 3341 000C                  		move.w	d1,$C(a1)
0001AAFA 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB00                            
0001AB00                            loc_1A524:
0001AB00 323C 002B                  		move.w	#$2B,d1
0001AB04 343C 0060                  		move.w	#$60,d2
0001AB08 363C 0061                  		move.w	#$61,d3
0001AB0C 3828 0008                  		move.w	8(a0),d4
0001AB10 4EB9 0000 FF78             		jsr	SolidObject
0001AB16 7000                       		moveq	#0,d0
0001AB18 3228 003C                  		move.w	$3C(a0),d1
0001AB1C 6A00                       		bpl.s	loc_1A550
0001AB1E 4441                       		neg.w	d1
0001AB20 5141                       		subq.w	#8,d1
0001AB22 6500                       		bcs.s	loc_1A55C
0001AB24 5200                       		addq.b	#1,d0
0001AB26 E841                       		asr.w	#4,d1
0001AB28 D041                       		add.w	d1,d0
0001AB2A 6000                       		bra.s	loc_1A55C
0001AB2C                            ; ===========================================================================
0001AB2C                            
0001AB2C                            loc_1A550:
0001AB2C 0441 0027                  		subi.w	#$27,d1
0001AB30 6500                       		bcs.s	loc_1A55C
0001AB32 5200                       		addq.b	#1,d0
0001AB34 E841                       		asr.w	#4,d1
0001AB36 D041                       		add.w	d1,d0
0001AB38                            
0001AB38                            loc_1A55C:
0001AB38 1140 001A                  		move.b	d0,$1A(a0)
0001AB3C 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB40 9068 0008                  		sub.w	8(a0),d0
0001AB44 6B00                       		bmi.s	loc_1A578
0001AB46 0440 0140                  		subi.w	#$140,d0
0001AB4A 6B00                       		bmi.s	loc_1A578
0001AB4C 4A28 0001                  		tst.b	1(a0)
0001AB50 6A00 FED2                  		bpl.w	Obj84_Delete
0001AB54                            
0001AB54                            loc_1A578:
0001AB54 4EF9 0000 DBA8             		jmp	DisplaySprite
0001AB5A                            ; ===========================================================================
0001AB5A                            
0001AB5A                            loc_1A57E:				; XREF: Obj84_Index
0001AB5A 7000                       		moveq	#0,d0
0001AB5C 1028 0028                  		move.b	$28(a0),d0
0001AB60 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AB64 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AB68 6000 FF5C                  		bra.w	loc_1A4EA
0001AB6C                            ; ===========================================================================
0001AB6C 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AB6E 0000                       		dc.w loc_1A598-off_1A590
0001AB70 0000                       		dc.w loc_1A604-off_1A590
0001AB72 0000                       		dc.w loc_1A604-off_1A590
0001AB74                            ; ===========================================================================
0001AB74                            
0001AB74                            loc_1A598:				; XREF: off_1A590
0001AB74 4A28 0029                  		tst.b	$29(a0)
0001AB78 6600                       		bne.s	loc_1A5D4
0001AB7A 2268 0034                  		movea.l	$34(a0),a1
0001AB7E 4A29 0021                  		tst.b	$21(a1)
0001AB82 6600                       		bne.s	loc_1A5B4
0001AB84 6100 D2E0                  		bsr.w	BossDefeated
0001AB88 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AB90                            
0001AB90                            loc_1A5B4:
0001AB90 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AB98 6400                       		bcc.s	locret_1A602
0001AB9A 42A8 003C                  		clr.l	$3C(a0)
0001AB9E 2268 0034                  		movea.l	$34(a0),a1
0001ABA2 5369 0032                  		subq.w	#1,$32(a1)
0001ABA6 4269 0030                  		clr.w	$30(a1)
0001ABAA 5528 0024                  		subq.b	#2,$24(a0)
0001ABAE 4E75                       		rts	
0001ABB0                            ; ===========================================================================
0001ABB0                            
0001ABB0                            loc_1A5D4:
0001ABB0 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ABB6 6C00                       		bge.s	loc_1A5E4
0001ABB8 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ABC0                            
0001ABC0                            loc_1A5E4:
0001ABC0 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ABC8 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ABCE 6E00                       		bgt.s	locret_1A602
0001ABD0 4268 003E                  		clr.w	$3E(a0)
0001ABD4 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ABDA 4228 0029                  		clr.b	$29(a0)
0001ABDE                            
0001ABDE                            locret_1A602:
0001ABDE 4E75                       		rts	
0001ABE0                            ; ===========================================================================
0001ABE0                            
0001ABE0                            loc_1A604:				; XREF: off_1A590
0001ABE0 08E8 0001 0001             		bset	#1,1(a0)
0001ABE6 4A28 0029                  		tst.b	$29(a0)
0001ABEA 6600                       		bne.s	loc_1A646
0001ABEC 2268 0034                  		movea.l	$34(a0),a1
0001ABF0 4A29 0021                  		tst.b	$21(a1)
0001ABF4 6600                       		bne.s	loc_1A626
0001ABF6 6100 D26E                  		bsr.w	BossDefeated
0001ABFA 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AC02                            
0001AC02                            loc_1A626:
0001AC02 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AC0A 6400                       		bcc.s	locret_1A674
0001AC0C 42A8 003C                  		clr.l	$3C(a0)
0001AC10 2268 0034                  		movea.l	$34(a0),a1
0001AC14 5369 0032                  		subq.w	#1,$32(a1)
0001AC18 4269 0030                  		clr.w	$30(a1)
0001AC1C 5528 0024                  		subq.b	#2,$24(a0)
0001AC20 4E75                       		rts	
0001AC22                            ; ===========================================================================
0001AC22                            
0001AC22                            loc_1A646:
0001AC22 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AC28 6D00                       		blt.s	loc_1A656
0001AC2A 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AC32                            
0001AC32                            loc_1A656:
0001AC32 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AC3A 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AC40 6D00                       		blt.s	locret_1A674
0001AC42 4268 003E                  		clr.w	$3E(a0)
0001AC46 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AC4C 4228 0029                  		clr.b	$29(a0)
0001AC50                            
0001AC50                            locret_1A674:
0001AC50 4E75                       		rts	
0001AC52                            ; ===========================================================================
0001AC52                            ; ---------------------------------------------------------------------------
0001AC52                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC52                            ; ---------------------------------------------------------------------------
0001AC52                            Map_obj84:
0001AC52                            	include "_maps\obj84.asm"
0001AC52                            ; ---------------------------------------------------------------------------
0001AC52                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC52                            ; ---------------------------------------------------------------------------
0001AC52 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AC56 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AC5A 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AC5E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC62 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC66 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AC6A 06                         byte_1A68E:	dc.b 6
0001AC6B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC70 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC75 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC7A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC7F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC84 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC89 08                         byte_1A6AD:	dc.b 8
0001AC8A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC8F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC94 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC99 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC9E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACA3 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACA8 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACAD D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACB2 0A                         byte_1A6D6:	dc.b $A
0001ACB3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACB8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACBD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACC2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACC7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACCC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACD1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACD6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACDB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ACE0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ACE5 0C                         byte_1A709:	dc.b $C
0001ACE6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACEB A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACF0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACF5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACFA B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACFF B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD04 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD09 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD0E F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD13 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD18 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD1D 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD22 0D                         byte_1A746:	dc.b $D
0001AD23 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD28 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD2D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD32 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD37 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD3C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD41 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD46 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD4B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD50 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD55 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD5A 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD5F 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD64 0E                         byte_1A788:	dc.b $E
0001AD65 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD6A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD6F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD74 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD79 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD7E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD83 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD88 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD8D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD92 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD97 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD9C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ADA1 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ADA6 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001ADAB 02                         byte_1A7CF:	dc.b 2
0001ADAC F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001ADB1 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001ADB6                            		even
0001ADB6                            		even
0001ADB6                            
0001ADB6                            ; ===========================================================================
0001ADB6                            ; ---------------------------------------------------------------------------
0001ADB6                            ; Object 86 - energy balls (FZ)
0001ADB6                            ; ---------------------------------------------------------------------------
0001ADB6                            
0001ADB6                            Obj86:					; XREF: Obj_Index
0001ADB6 7000                       		moveq	#0,d0
0001ADB8 1028 0024                  		move.b	$24(a0),d0
0001ADBC 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001ADC0 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001ADC4                            ; ===========================================================================
0001ADC4 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001ADC6 0000                       		dc.w Obj86_Generator-Obj86_Index
0001ADC8 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001ADCA 0000                       		dc.w loc_1A962-Obj86_Index
0001ADCC 0000                       		dc.w loc_1A982-Obj86_Index
0001ADCE                            ; ===========================================================================
0001ADCE                            
0001ADCE                            Obj86_Main:				; XREF: Obj86_Index
0001ADCE 317C 2588 0008             		move.w	#$2588,8(a0)
0001ADD4 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ADDA 317C 0300 0002             		move.w	#$300,2(a0)
0001ADE0 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001ADE8 117C 0000 001C             		move.b	#0,$1C(a0)
0001ADEE 117C 0003 0018             		move.b	#3,$18(a0)
0001ADF4 117C 0008 0017             		move.b	#8,$17(a0)
0001ADFA 117C 0008 0016             		move.b	#8,$16(a0)
0001AE00 117C 0004 0001             		move.b	#4,1(a0)
0001AE06 08E8 0007 0001             		bset	#7,1(a0)
0001AE0C 5428 0024                  		addq.b	#2,$24(a0)
0001AE10                            
0001AE10                            Obj86_Generator:			; XREF: Obj86_Index
0001AE10 2268 0034                  		movea.l	$34(a0),a1
0001AE14 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AE1A 6600                       		bne.s	loc_1A850
0001AE1C 10BC 003F                  		move.b	#$3F,(a0)
0001AE20 117C 0000 0024             		move.b	#0,$24(a0)
0001AE26 4EF9 0000 DBA8             		jmp	DisplaySprite
0001AE2C                            ; ===========================================================================
0001AE2C                            
0001AE2C                            loc_1A850:
0001AE2C 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE32 4A28 0029                  		tst.b	$29(a0)
0001AE36 6700                       		beq.s	loc_1A86C
0001AE38 5428 0024                  		addq.b	#2,$24(a0)
0001AE3C 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE42 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AE48                            
0001AE48                            loc_1A86C:
0001AE48 323C 0013                  		move.w	#$13,d1
0001AE4C 343C 0008                  		move.w	#8,d2
0001AE50 363C 0011                  		move.w	#$11,d3
0001AE54 3828 0008                  		move.w	8(a0),d4
0001AE58 4EB9 0000 FF78             		jsr	SolidObject
0001AE5E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE62 9068 0008                  		sub.w	8(a0),d0
0001AE66 6B00                       		bmi.s	loc_1A89A
0001AE68 0440 0140                  		subi.w	#$140,d0
0001AE6C 6B00                       		bmi.s	loc_1A89A
0001AE6E 4A28 0001                  		tst.b	1(a0)
0001AE72 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AE76                            
0001AE76                            loc_1A89A:
0001AE76 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AE7A 4EB9 0000 AC42             		jsr	AnimateSprite
0001AE80 4EF9 0000 DBA8             		jmp	DisplaySprite
0001AE86                            ; ===========================================================================
0001AE86                            
0001AE86                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AE86 4A28 0029                  		tst.b	$29(a0)
0001AE8A 6700 0000                  		beq.w	loc_1A954
0001AE8E 4228 0029                  		clr.b	$29(a0)
0001AE92 D068 0030                  		add.w	$30(a0),d0
0001AE96 0240 001E                  		andi.w	#$1E,d0
0001AE9A D4C0                       		adda.w	d0,a2
0001AE9C 5868 0030                  		addq.w	#4,$30(a0)
0001AEA0 4268 0032                  		clr.w	$32(a0)
0001AEA4 7403                       		moveq	#3,d2
0001AEA6                            
0001AEA6                            Obj86_Loop:
0001AEA6 4EB9 0000 E044             		jsr	SingleObjLoad2
0001AEAC 6600 0000                  		bne.w	loc_1A954
0001AEB0 12BC 0086                  		move.b	#$86,(a1)
0001AEB4 3368 0008 0008             		move.w	8(a0),8(a1)
0001AEBA 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AEC0 137C 0008 0024             		move.b	#8,$24(a1)
0001AEC6 337C 2300 0002             		move.w	#$2300,2(a1)
0001AECC 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AED4 137C 000C 0016             		move.b	#$C,$16(a1)
0001AEDA 137C 000C 0017             		move.b	#$C,$17(a1)
0001AEE0 137C 0000 0020             		move.b	#0,$20(a1)
0001AEE6 137C 0003 0018             		move.b	#3,$18(a1)
0001AEEC 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AEF2 137C 0004 0001             		move.b	#4,1(a1)
0001AEF8 08E9 0007 0001             		bset	#7,1(a1)
0001AEFE 2348 0034                  		move.l	a0,$34(a1)
0001AF02 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001AF08 3228 0032                  		move.w	$32(a0),d1
0001AF0C C3FC FFB1                  		muls.w	#-$4F,d1
0001AF10 0641 2578                  		addi.w	#$2578,d1
0001AF14 0240 001F                  		andi.w	#$1F,d0
0001AF18 0440 0010                  		subi.w	#$10,d0
0001AF1C D041                       		add.w	d1,d0
0001AF1E 3340 0030                  		move.w	d0,$30(a1)
0001AF22 5268 0032                  		addq.w	#1,$32(a0)
0001AF26 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AF2C 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AF30                            
0001AF30                            loc_1A954:
0001AF30 4A68 0032                  		tst.w	$32(a0)
0001AF34 6600                       		bne.s	loc_1A95E
0001AF36 5428 0024                  		addq.b	#2,$24(a0)
0001AF3A                            
0001AF3A                            loc_1A95E:
0001AF3A 6000 FF0C                  		bra.w	loc_1A86C
0001AF3E                            ; ===========================================================================
0001AF3E                            
0001AF3E                            loc_1A962:				; XREF: Obj86_Index
0001AF3E 117C 0002 001C             		move.b	#2,$1C(a0)
0001AF44 4A68 0038                  		tst.w	$38(a0)
0001AF48 6600                       		bne.s	loc_1A97E
0001AF4A 117C 0002 0024             		move.b	#2,$24(a0)
0001AF50 2268 0034                  		movea.l	$34(a0),a1
0001AF54 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AF5A                            
0001AF5A                            loc_1A97E:
0001AF5A 6000 FEEC                  		bra.w	loc_1A86C
0001AF5E                            ; ===========================================================================
0001AF5E                            
0001AF5E                            loc_1A982:				; XREF: Obj86_Index
0001AF5E 7000                       		moveq	#0,d0
0001AF60 1028 0025                  		move.b	$25(a0),d0
0001AF64 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AF68 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AF6C 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AF70 4EB9 0000 AC42             		jsr	AnimateSprite
0001AF76 4EF9 0000 DBA8             		jmp	DisplaySprite
0001AF7C                            ; ===========================================================================
0001AF7C 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AF7E 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AF80 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AF82                            ; ===========================================================================
0001AF82                            
0001AF82                            loc_1A9A6:				; XREF: Obj86_Index2
0001AF82 3028 0030                  		move.w	$30(a0),d0
0001AF86 9068 0008                  		sub.w	8(a0),d0
0001AF8A E940                       		asl.w	#4,d0
0001AF8C 3140 0010                  		move.w	d0,$10(a0)
0001AF90 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AF96 5428 0025                  		addq.b	#2,$25(a0)
0001AF9A 4E75                       		rts	
0001AF9C                            ; ===========================================================================
0001AF9C                            
0001AF9C                            loc_1A9C0:				; XREF: Obj86_Index2
0001AF9C 4A68 0010                  		tst.w	$10(a0)
0001AFA0 6700                       		beq.s	loc_1A9E6
0001AFA2 4EB9 0000 DB82             		jsr	SpeedToPos
0001AFA8 3028 0008                  		move.w	8(a0),d0
0001AFAC 9068 0030                  		sub.w	$30(a0),d0
0001AFB0 6400                       		bcc.s	loc_1A9E6
0001AFB2 4268 0010                  		clr.w	$10(a0)
0001AFB6 D168 0008                  		add.w	d0,8(a0)
0001AFBA 2268 0034                  		movea.l	$34(a0),a1
0001AFBE 5369 0032                  		subq.w	#1,$32(a1)
0001AFC2                            
0001AFC2                            loc_1A9E6:
0001AFC2 117C 0000 001C             		move.b	#0,$1C(a0)
0001AFC8 5368 0028                  		subq.w	#1,$28(a0)
0001AFCC 6600                       		bne.s	locret_1AA1C
0001AFCE 5428 0025                  		addq.b	#2,$25(a0)
0001AFD2 117C 0001 001C             		move.b	#1,$1C(a0)
0001AFD8 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AFDE 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFE4 7000                       		moveq	#0,d0
0001AFE6 3038 D008                  		move.w	($FFFFD008).w,d0
0001AFEA 9068 0008                  		sub.w	8(a0),d0
0001AFEE 3140 0010                  		move.w	d0,$10(a0)
0001AFF2 317C 0140 0012             		move.w	#$140,$12(a0)
0001AFF8                            
0001AFF8                            locret_1AA1C:
0001AFF8 4E75                       		rts	
0001AFFA                            ; ===========================================================================
0001AFFA                            
0001AFFA                            loc_1AA1E:				; XREF: Obj86_Index2
0001AFFA 4EB9 0000 DB82             		jsr	SpeedToPos
0001B000 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B006 6400                       		bcc.s	loc_1AA34
0001B008 5368 0028                  		subq.w	#1,$28(a0)
0001B00C 6700                       		beq.s	loc_1AA34
0001B00E 4E75                       		rts	
0001B010                            ; ===========================================================================
0001B010                            
0001B010                            loc_1AA34:
0001B010 2268 0034                  		movea.l	$34(a0),a1
0001B014 5369 0038                  		subq.w	#1,$38(a1)
0001B018 6000 FA0A                  		bra.w	Obj84_Delete
0001B01C                            ; ===========================================================================
0001B01C                            Ani_obj86:
0001B01C                            	include "_anim\obj86.asm"
0001B01C                            ; ---------------------------------------------------------------------------
0001B01C                            ; Animation script - energy ball launcher (FZ)
0001B01C                            ; ---------------------------------------------------------------------------
0001B01C 0000                       		dc.w byte_1AA46-Ani_obj86
0001B01E 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B020 0000                       		dc.w byte_1AA50-Ani_obj86
0001B022 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B026 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B02C 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B032                            		even
0001B032                            		even
0001B032                            
0001B032                            ; ---------------------------------------------------------------------------
0001B032                            ; Sprite mappings - energy ball	launcher (FZ)
0001B032                            ; ---------------------------------------------------------------------------
0001B032                            Map_obj86:
0001B032                            	include "_maps\obj86.asm"
0001B032                            ; ---------------------------------------------------------------------------
0001B032                            ; Sprite mappings - energy ball	launcher (FZ)
0001B032                            ; ---------------------------------------------------------------------------
0001B032 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B036 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B03A 01                         byte_1AA5E:	dc.b 1
0001B03B F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B040 01                         byte_1AA64:	dc.b 1
0001B041 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B046 01                         byte_1AA6A:	dc.b 1
0001B047 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B04C 01                         byte_1AA70:	dc.b 1
0001B04D F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B052                            		even
0001B052                            		even
0001B052                            
0001B052                            Ani_obj86a:
0001B052                            	include "_anim\obj86a.asm"
0001B052                            ; ---------------------------------------------------------------------------
0001B052                            ; Animation script - energy balls (FZ)
0001B052                            ; ---------------------------------------------------------------------------
0001B052 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B054 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B056 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B065 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B074 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B078 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B082                            		even
0001B082                            		even
0001B082                            
0001B082                            ; ---------------------------------------------------------------------------
0001B082                            ; Sprite mappings - energy balls (FZ)
0001B082                            ; ---------------------------------------------------------------------------
0001B082                            Map_obj86a:
0001B082                            	include "_maps\obj86a.asm"
0001B082                            ; ---------------------------------------------------------------------------
0001B082                            ; Sprite mappings - energy balls (FZ)
0001B082                            ; ---------------------------------------------------------------------------
0001B082 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B086 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B08A 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B08E 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B092 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B096 0000                       		dc.w byte_1AB20-Map_obj86a
0001B098 02                         byte_1AABC:	dc.b 2
0001B099 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B09E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B0A3 02                         byte_1AAC7:	dc.b 2
0001B0A4 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B0A9 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B0AE 02                         byte_1AAD2:	dc.b 2
0001B0AF F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B0B4 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B0B9 02                         byte_1AADD:	dc.b 2
0001B0BA F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B0BF 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B0C4 02                         byte_1AAE8:	dc.b 2
0001B0C5 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B0CA 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B0CF 02                         byte_1AAF3:	dc.b 2
0001B0D0 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B0D5 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B0DA 01                         byte_1AAFE:	dc.b 1
0001B0DB F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B0E0 01                         byte_1AB04:	dc.b 1
0001B0E1 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B0E6 02                         byte_1AB0A:	dc.b 2
0001B0E7 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B0EC 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B0F1 02                         byte_1AB15:	dc.b 2
0001B0F2 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B0F7 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B0FC 00                         byte_1AB20:	dc.b 0
0001B0FE 00                         		even
0001B0FE 00                         		even
0001B0FE                            
0001B0FE                            ; ===========================================================================
0001B0FE                            ; ---------------------------------------------------------------------------
0001B0FE                            ; Object 3E - prison capsule
0001B0FE                            ; ---------------------------------------------------------------------------
0001B0FE                            
0001B0FE                            Obj3E:					; XREF: Obj_Index
0001B0FE 7000                       		moveq	#0,d0
0001B100 1028 0024                  		move.b	$24(a0),d0
0001B104 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B108 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B10C 3028 0008                  		move.w	8(a0),d0
0001B110 0240 FF80                  		andi.w	#$FF80,d0
0001B114 3238 F700                  		move.w	($FFFFF700).w,d1
0001B118 0441 0080                  		subi.w	#$80,d1
0001B11C 0241 FF80                  		andi.w	#$FF80,d1
0001B120 9041                       		sub.w	d1,d0
0001B122 0C40 0280                  		cmpi.w	#$280,d0
0001B126 6200                       		bhi.s	Obj3E_Delete
0001B128 4EF9 0000 DBA8             		jmp	DisplaySprite
0001B12E                            ; ===========================================================================
0001B12E                            
0001B12E                            Obj3E_Delete:
0001B12E 4EF9 0000 DBE4             		jmp	DeleteObject
0001B134                            ; ===========================================================================
0001B134 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B136 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B138 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B13A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B13C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B13E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B140 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B142 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B144                            
0001B144 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B148 040C 0501                  		dc.b 4,	$C, 5, 1
0001B14C 0610 0403                  		dc.b 6,	$10, 4,	3
0001B150 0810 0305                  		dc.b 8,	$10, 3,	5
0001B154                            ; ===========================================================================
0001B154                            
0001B154                            Obj3E_Main:				; XREF: Obj3E_Index
0001B154 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B15C 317C 049D 0002             		move.w	#$49D,2(a0)
0001B162 117C 0004 0001             		move.b	#4,1(a0)
0001B168 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B16E 7000                       		moveq	#0,d0
0001B170 1028 0028                  		move.b	$28(a0),d0
0001B174 E548                       		lsl.w	#2,d0
0001B176 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B17A 1159 0024                  		move.b	(a1)+,$24(a0)
0001B17E 1159 0019                  		move.b	(a1)+,$19(a0)
0001B182 1159 0018                  		move.b	(a1)+,$18(a0)
0001B186 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B18A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B18E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B190 117C 0006 0020             		move.b	#6,$20(a0)
0001B196 117C 0008 0021             		move.b	#8,$21(a0)
0001B19C                            
0001B19C                            Obj3E_Not02:
0001B19C 4E75                       		rts	
0001B19E                            ; ===========================================================================
0001B19E                            
0001B19E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B19E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B1A4 6700                       		beq.s	Obj3E_ChkOpened
0001B1A6 323C 002B                  		move.w	#$2B,d1
0001B1AA 343C 0018                  		move.w	#$18,d2
0001B1AE 363C 0018                  		move.w	#$18,d3
0001B1B2 3828 0008                  		move.w	8(a0),d4
0001B1B6 4EF9 0000 FF78             		jmp	SolidObject
0001B1BC                            ; ===========================================================================
0001B1BC                            
0001B1BC                            Obj3E_ChkOpened:
0001B1BC 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B1C0 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B1C2 4228 0025                  		clr.b	$25(a0)
0001B1C6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B1CC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B1D2                            
0001B1D2                            Obj3E_DoOpen:
0001B1D2 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B1D8 4E75                       		rts	
0001B1DA                            ; ===========================================================================
0001B1DA                            
0001B1DA                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B1DA 323C 0017                  		move.w	#$17,d1
0001B1DE 343C 0008                  		move.w	#8,d2
0001B1E2 363C 0008                  		move.w	#8,d3
0001B1E6 3828 0008                  		move.w	8(a0),d4
0001B1EA 4EB9 0000 FF78             		jsr	SolidObject
0001B1F0 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B1F6 4EB9 0000 AC42             		jsr	AnimateSprite
0001B1FC 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B202 4A28 0025                  		tst.b	$25(a0)
0001B206 6700                       		beq.s	locret_1AC60
0001B208 5068 000C                  		addq.w	#8,$C(a0)
0001B20C 117C 000A 0024             		move.b	#$A,$24(a0)
0001B212 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B218 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B21C 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B220 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B226 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B22C 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B22E 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B234 6000                       		bra.s	Obj3E_ContinueCode
0001B236                            
0001B236                            Obj3E_MoveLeft:
0001B236 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B23C                            
0001B23C                            Obj3E_ContinueCode:
0001B23C 4228 0025                  		clr.b	$25(a0)
0001B240 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B246 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B24C                            
0001B24C                            locret_1AC60:
0001B24C 4E75                       		rts	
0001B24E                            ; ===========================================================================
0001B24E                            
0001B24E                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B24E 7007                       		moveq	#7,d0
0001B250 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B254 6600                       		bne.s	loc_1ACA0
0001B256 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B25C 6600                       		bne.s	loc_1ACA0
0001B25E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B262 3368 0008 0008             		move.w	8(a0),8(a1)
0001B268 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B26E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B274 7200                       		moveq	#0,d1
0001B276 1200                       		move.b	d0,d1
0001B278 E409                       		lsr.b	#2,d1
0001B27A 0441 0020                  		subi.w	#$20,d1
0001B27E D369 0008                  		add.w	d1,8(a1)
0001B282 E048                       		lsr.w	#8,d0
0001B284 E608                       		lsr.b	#3,d0
0001B286 D169 000C                  		add.w	d0,$C(a1)
0001B28A                            
0001B28A                            loc_1ACA0:
0001B28A 5368 001E                  		subq.w	#1,$1E(a0)
0001B28E 6700                       		beq.s	Obj3E_MakeAnimal
0001B290 4E75                       		rts	
0001B292                            ; ===========================================================================
0001B292                            
0001B292                            Obj3E_MakeAnimal:
0001B292 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B298 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B29E 117C 0006 001A             		move.b	#6,$1A(a0)
0001B2A4 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B2AA 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B2B0 7C07                       		moveq	#7,d6
0001B2B2 3A3C 009A                  		move.w	#$9A,d5
0001B2B6 78E4                       		moveq	#-$1C,d4
0001B2B8                            
0001B2B8                            Obj3E_Loop:
0001B2B8 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B2BE 6600                       		bne.s	locret_1ACF8
0001B2C0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2C4 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2D0 D969 0008                  		add.w	d4,8(a1)
0001B2D4 5E44                       		addq.w	#7,d4
0001B2D6 3345 0036                  		move.w	d5,$36(a1)
0001B2DA 5145                       		subq.w	#8,d5
0001B2DC 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B2E0                            
0001B2E0                            locret_1ACF8:
0001B2E0 4E75                       		rts	
0001B2E2                            ; ===========================================================================
0001B2E2                            
0001B2E2                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B2E2 7007                       		moveq	#7,d0
0001B2E4 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B2E8 6600                       		bne.s	loc_1AD38
0001B2EA 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B2F0 6600                       		bne.s	loc_1AD38
0001B2F2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2F6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B302 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B308 0240 001F                  		andi.w	#$1F,d0
0001B30C 5D40                       		subq.w	#6,d0
0001B30E 4A41                       		tst.w	d1
0001B310 6A00                       		bpl.s	loc_1AD2E
0001B312 4440                       		neg.w	d0
0001B314                            
0001B314                            loc_1AD2E:
0001B314 D169 0008                  		add.w	d0,8(a1)
0001B318 337C 000C 0036             		move.w	#$C,$36(a1)
0001B31E                            
0001B31E                            loc_1AD38:
0001B31E 5368 001E                  		subq.w	#1,$1E(a0)
0001B322 6600                       		bne.s	locret_1AD48
0001B324 5428 0024                  		addq.b	#2,$24(a0)
0001B328 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B32E                            
0001B32E                            locret_1AD48:
0001B32E 4E75                       		rts	
0001B330                            ; ===========================================================================
0001B330                            
0001B330                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B330 703E                       		moveq	#$3E,d0
0001B332 7228                       		moveq	#$28,d1
0001B334 7440                       		moveq	#$40,d2
0001B336 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B33A                            
0001B33A                            Obj3E_FindObj28:
0001B33A B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B33C 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B33E D2C2                       		adda.w	d2,a1		; next object RAM
0001B340 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B344                            
0001B344 4EB9 0000 F234             		jsr	GotThroughAct
0001B34A 4EF9 0000 DBE4             		jmp	DeleteObject
0001B350                            ; ===========================================================================
0001B350                            
0001B350                            Obj3E_Obj28Found:
0001B350 4E75                       		rts	
0001B352                            ; ===========================================================================
0001B352                            Ani_obj3E:
0001B352                            	include "_anim\obj3E.asm"
0001B352                            ; ---------------------------------------------------------------------------
0001B352                            ; Animation script - prison capsule
0001B352                            ; ---------------------------------------------------------------------------
0001B352 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B354 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B356 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B35A                            		even
0001B35A                            		even
0001B35A                            
0001B35A                            ; ---------------------------------------------------------------------------
0001B35A                            ; Sprite mappings - prison capsule
0001B35A                            ; ---------------------------------------------------------------------------
0001B35A                            Map_obj3E:
0001B35A                            	include "_maps\obj3E.asm"
0001B35A                            ; ---------------------------------------------------------------------------
0001B35A                            ; Sprite mappings - prison capsule
0001B35A                            ; ---------------------------------------------------------------------------
0001B35A 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B35E 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B362 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B366 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B368 07                         byte_1AD82:	dc.b 7
0001B369 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B36E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B373 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B378 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B37D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B382 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B387 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B38C 01                         byte_1ADA6:	dc.b 1
0001B38D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B392 06                         byte_1ADAC:	dc.b 6
0001B393 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B398 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B39D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B3A2 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B3A7 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B3AC 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3B1 01                         byte_1ADCB:	dc.b 1
0001B3B2 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B3B7 02                         byte_1ADD1:	dc.b 2
0001B3B8 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B3BD 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B3C2 01                         byte_1ADDC:	dc.b 1
0001B3C3 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B3C8 00                         byte_1ADE2:	dc.b 0
0001B3CA 00                         		even
0001B3CA 00                         		even
0001B3CA                            
0001B3CA                            ; ---------------------------------------------------------------------------
0001B3CA                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B3CA                            ; ---------------------------------------------------------------------------
0001B3CA                            
0001B3CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3CA                            
0001B3CA                            
0001B3CA                            TouchResponse:				; XREF: Obj01
0001B3CA 4E71                       		nop	
0001B3CC 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B3D0 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B3D4 5142                       		subq.w	#8,d2
0001B3D6 7A00                       		moveq	#0,d5
0001B3D8 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B3DC 5705                       		subq.b	#3,d5
0001B3DE 9645                       		sub.w	d5,d3
0001B3E0 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B3E6 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B3E8 0643 000C                  		addi.w	#$C,d3
0001B3EC 7A0A                       		moveq	#$A,d5
0001B3EE                            
0001B3EE                            Touch_NoDuck:
0001B3EE 383C 0010                  		move.w	#$10,d4
0001B3F2 DA45                       		add.w	d5,d5
0001B3F4 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B3F8 3C3C 005F                  		move.w	#$5F,d6
0001B3FC                            
0001B3FC                            Touch_Loop:
0001B3FC 4A29 0001                  		tst.b	1(a1)
0001B400 6A00                       		bpl.s	Touch_NextObj
0001B402 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B406 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B408                            
0001B408                            Touch_NextObj:
0001B408 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B40C 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B410                            
0001B410 7000                       		moveq	#0,d0
0001B412 4E75                       		rts	
0001B414                            ; ===========================================================================
0001B414 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B416 0C14                       		dc.b   $C, $14
0001B418 140C                       		dc.b  $14,  $C
0001B41A 0410                       		dc.b	4, $10
0001B41C 0C12                       		dc.b   $C, $12
0001B41E 1010                       		dc.b  $10, $10
0001B420 0606                       		dc.b	6,   6
0001B422 180C                       		dc.b  $18,  $C
0001B424 0C10                       		dc.b   $C, $10
0001B426 100C                       		dc.b  $10,  $C
0001B428 0808                       		dc.b	8,   8
0001B42A 1410                       		dc.b  $14, $10
0001B42C 1408                       		dc.b  $14,   8
0001B42E 0E0E                       		dc.b   $E,  $E
0001B430 1818                       		dc.b  $18, $18
0001B432 2810                       		dc.b  $28, $10
0001B434 1018                       		dc.b  $10, $18
0001B436 0810                       		dc.b	8, $10
0001B438 2070                       		dc.b  $20, $70
0001B43A 4020                       		dc.b  $40, $20
0001B43C 8020                       		dc.b  $80, $20
0001B43E 2020                       		dc.b  $20, $20
0001B440 0808                       		dc.b	8,   8
0001B442 0404                       		dc.b	4,   4
0001B444 2008                       		dc.b  $20,   8
0001B446 0C0C                       		dc.b   $C,  $C
0001B448 0804                       		dc.b	8,   4
0001B44A 1804                       		dc.b  $18,   4
0001B44C 2804                       		dc.b  $28,   4
0001B44E 0408                       		dc.b	4,   8
0001B450 0418                       		dc.b	4, $18
0001B452 0428                       		dc.b	4, $28
0001B454 0420                       		dc.b	4, $20
0001B456 1818                       		dc.b  $18, $18
0001B458 0C18                       		dc.b   $C, $18
0001B45A 4808                       		dc.b  $48,   8
0001B45C                            ; ===========================================================================
0001B45C                            
0001B45C                            Touch_Height:				; XREF: TouchResponse
0001B45C 0240 003F                  		andi.w	#$3F,d0
0001B460 D040                       		add.w	d0,d0
0001B462 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B466 7200                       		moveq	#0,d1
0001B468 121A                       		move.b	(a2)+,d1
0001B46A 3029 0008                  		move.w	8(a1),d0
0001B46E 9041                       		sub.w	d1,d0
0001B470 9042                       		sub.w	d2,d0
0001B472 6400                       		bcc.s	loc_1AE98
0001B474 D241                       		add.w	d1,d1
0001B476 D041                       		add.w	d1,d0
0001B478 6500                       		bcs.s	Touch_Width
0001B47A 6000 FF8C                  		bra.w	Touch_NextObj
0001B47E                            ; ===========================================================================
0001B47E                            
0001B47E                            loc_1AE98:
0001B47E B044                       		cmp.w	d4,d0
0001B480 6200 FF86                  		bhi.w	Touch_NextObj
0001B484                            
0001B484                            Touch_Width:
0001B484 7200                       		moveq	#0,d1
0001B486 121A                       		move.b	(a2)+,d1
0001B488 3029 000C                  		move.w	$C(a1),d0
0001B48C 9041                       		sub.w	d1,d0
0001B48E 9043                       		sub.w	d3,d0
0001B490 6400                       		bcc.s	loc_1AEB6
0001B492 D241                       		add.w	d1,d1
0001B494 D240                       		add.w	d0,d1
0001B496 6500                       		bcs.s	Touch_ChkValue
0001B498 6000 FF6E                  		bra.w	Touch_NextObj
0001B49C                            ; ===========================================================================
0001B49C                            
0001B49C                            loc_1AEB6:
0001B49C B045                       		cmp.w	d5,d0
0001B49E 6200 FF68                  		bhi.w	Touch_NextObj
0001B4A2                            
0001B4A2                            Touch_ChkValue:
0001B4A2 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B4A6 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B4AA 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B4AE 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B4B2 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B4B6 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B4B8 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B4BC                            
0001B4BC                            ; touch	response is $40-$7F
0001B4BC                            
0001B4BC 1029 0020                  		move.b	$20(a1),d0
0001B4C0 0200 003F                  		andi.b	#$3F,d0
0001B4C4 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B4C8 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B4CA 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B4D0 6400 0000                  		bcc.w	locret_1AEF2
0001B4D4 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B4D8                            
0001B4D8                            locret_1AEF2:
0001B4D8 4E75                       		rts	
0001B4DA                            ; ===========================================================================
0001B4DA                            
0001B4DA                            Touch_Monitor:
0001B4DA 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B4DE 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B4E0 3028 000C                  		move.w	$C(a0),d0
0001B4E4 0440 0010                  		subi.w	#$10,d0
0001B4E8 B069 000C                  		cmp.w	$C(a1),d0
0001B4EC 6500                       		bcs.s	locret_1AF2E
0001B4EE 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B4F2 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B4F8 4A29 0025                  		tst.b	$25(a1)
0001B4FC 6600                       		bne.s	locret_1AF2E
0001B4FE 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B502 4E75                       		rts	
0001B504                            ; ===========================================================================
0001B504                            
0001B504                            loc_1AF1E:
0001B504 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B50A 6600                       		bne.s	locret_1AF2E
0001B50C 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B510 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B514                            
0001B514                            locret_1AF2E:
0001B514 4E75                       		rts	
0001B516                            ; ===========================================================================
0001B516                            
0001B516                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B516 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B51A 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B51C 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B522 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B526                            
0001B526                            loc_1AF40:
0001B526 4A29 0021                  		tst.b	$21(a1)
0001B52A 6700                       		beq.s	Touch_KillEnemy
0001B52C 4468 0010                  		neg.w	$10(a0)
0001B530 4468 0012                  		neg.w	$12(a0)
0001B534 E0E8 0010                  		asr	$10(a0)
0001B538 E0E8 0012                  		asr	$12(a0)
0001B53C 137C 0000 0020             		move.b	#0,$20(a1)
0001B542 5329 0021                  		subq.b	#1,$21(a1)
0001B546 6600                       		bne.s	locret_1AF68
0001B548 08E9 0007 0022             		bset	#7,$22(a1)
0001B54E                            
0001B54E                            locret_1AF68:
0001B54E 4E75                       		rts	
0001B550                            ; ===========================================================================
0001B550                            
0001B550                            Touch_KillEnemy:
0001B550 08E9 0007 0022             		bset	#7,$22(a1)
0001B556 7000                       		moveq	#0,d0
0001B558 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B55C 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B560 0C40 0006                  		cmpi.w	#6,d0
0001B564 6500                       		bcs.s	loc_1AF82
0001B566 7006                       		moveq	#6,d0
0001B568                            
0001B568                            loc_1AF82:
0001B568 3340 003E                  		move.w	d0,$3E(a1)
0001B56C 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B570 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B576 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B578 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B57C 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B582                            
0001B582                            loc_1AF9C:
0001B582 6100 0000                  		bsr.w	AddPoints
0001B586 7400                       		moveq	#0,d2	; GMZ
0001B588 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B58A 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B58C                            
0001B58C                            TouchKE_Explode:
0001B58C 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B590 137C 0000 0024             		move.b	#0,$24(a1)
0001B596 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B59A                            
0001B59A                            TouchKE_NextExplosion:
0001B59A 5802                       		addq.b	#4,d2
0001B59C 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B5A2 6600                       		bne.s	TouchKE_NoExplosion
0001B5A4 336A 0008 0008             		move.w	8(a2),8(a1)
0001B5AA 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B5B0 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B5B4                            
0001B5B4                            TouchKE_NoExplosion:
0001B5B4 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B5B6 4A68 0012                  		tst.w	$12(a0)
0001B5BA 6B00                       		bmi.s	loc_1AFC2
0001B5BC 3028 000C                  		move.w	$C(a0),d0
0001B5C0 B069 000C                  		cmp.w	$C(a1),d0
0001B5C4 6400                       		bcc.s	loc_1AFCA
0001B5C6 4468 0012                  		neg.w	$12(a0)
0001B5CA 4E75                       		rts	
0001B5CC                            ; ===========================================================================
0001B5CC                            
0001B5CC                            loc_1AFC2:
0001B5CC 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B5D2 4E75                       		rts	
0001B5D4                            ; ===========================================================================
0001B5D4                            
0001B5D4                            loc_1AFCA:
0001B5D4 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B5DA 4E75                       		rts	
0001B5DC                            ; ===========================================================================
0001B5DC 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B5E4                            ; ===========================================================================
0001B5E4                            
0001B5E4                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B5E4 08E9 0007 0022             		bset	#7,$22(a1)
0001B5EA                            
0001B5EA                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B5EA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B5EE 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B5F0                            
0001B5F0                            loc_1AFE6:				; XREF: Touch_Hurt
0001B5F0 70FF                       		moveq	#-1,d0
0001B5F2 4E75                       		rts	
0001B5F4                            ; ===========================================================================
0001B5F4                            
0001B5F4                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B5F4 4E71                       		nop	
0001B5F6 4A68 0030                  		tst.w	$30(a0)
0001B5FA 66F4                       		bne.s	loc_1AFE6
0001B5FC 2449                       		movea.l	a1,a2
0001B5FE                            
0001B5FE                            ; End of function TouchResponse
0001B5FE                            ; continue straight to HurtSonic
0001B5FE                            
0001B5FE                            ; ---------------------------------------------------------------------------
0001B5FE                            ; Hurting Sonic	subroutine
0001B5FE                            ; ---------------------------------------------------------------------------
0001B5FE                            
0001B5FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5FE                            
0001B5FE                            
0001B5FE                            HurtSonic:
0001B5FE 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B602 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B604 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B608 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B60C 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B612 6600                       		bne.s	Hurt_Shield
0001B614 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B618 3368 0008 0008             		move.w	8(a0),8(a1)
0001B61E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B624                            
0001B624                            Hurt_Shield:
0001B624 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B62A 117C 0004 0024             		move.b	#4,$24(a0)
0001B630 6100 8750                  		bsr.w	Sonic_ResetOnFloor
0001B634 08E8 0001 0022             		bset	#1,$22(a0)
0001B63A 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B640 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B646 0828 0006 0022             		btst	#6,$22(a0)
0001B64C 6700                       		beq.s	Hurt_Reverse
0001B64E 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B654 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B65A                            
0001B65A                            Hurt_Reverse:
0001B65A 3028 0008                  		move.w	8(a0),d0
0001B65E B06A 0008                  		cmp.w	8(a2),d0
0001B662 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B664 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B668                            
0001B668                            Hurt_ChkSpikes:
0001B668 317C 0000 0014             		move.w	#0,$14(a0)
0001B66E 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B674 317C 0078 0030             		move.w	#$78,$30(a0)
0001B67A 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B67E 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B682 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B684 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B688 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B68A 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B68E                            
0001B68E                            Hurt_Sound:
0001B68E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B694 70FF                       		moveq	#-1,d0
0001B696 4E75                       		rts	
0001B698                            ; ===========================================================================
0001B698                            
0001B698                            Hurt_NoRings:
0001B698 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B69C 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B6A0                            ; End of function HurtSonic
0001B6A0                            
0001B6A0                            ; ---------------------------------------------------------------------------
0001B6A0                            ; Subroutine to	kill Sonic
0001B6A0                            ; ---------------------------------------------------------------------------
0001B6A0                            
0001B6A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6A0                            
0001B6A0                            
0001B6A0                            KillSonic:
0001B6A0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B6A4 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B6A6 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B6AC 117C 0006 0024             		move.b	#6,$24(a0)
0001B6B2 6100 86CE                  		bsr.w	Sonic_ResetOnFloor
0001B6B6 08E8 0001 0022             		bset	#1,$22(a0)
0001B6BC 317C F900 0012             		move.w	#-$700,$12(a0)
0001B6C2 317C 0000 0010             		move.w	#0,$10(a0)
0001B6C8 317C 0000 0014             		move.w	#0,$14(a0)
0001B6CE 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B6D4 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B6DA 08E8 0007 0002             		bset	#7,2(a0)
0001B6E0 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B6E4 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B6E8 6600                       		bne.s	Kill_Sound
0001B6EA 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B6EE                            
0001B6EE                            Kill_Sound:
0001B6EE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B6F4                            
0001B6F4                            Kill_NoDeath:
0001B6F4 70FF                       		moveq	#-1,d0
0001B6F6 4E75                       		rts	
0001B6F8                            ; End of function KillSonic
0001B6F8                            
0001B6F8                            
0001B6F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6F8                            
0001B6F8                            
0001B6F8                            Touch_Special:				; XREF: Touch_ChkValue
0001B6F8 1229 0020                  		move.b	$20(a1),d1
0001B6FC 0201 003F                  		andi.b	#$3F,d1
0001B700 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B704 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B706 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B70A 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B70C 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B710 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B712 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B716 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B718 4E75                       		rts	
0001B71A                            ; ===========================================================================
0001B71A                            
0001B71A                            Touch_CatKiller:			; XREF: Touch_Special
0001B71A 6000 FEC8                  		bra.w	loc_1AFDA
0001B71E                            ; ===========================================================================
0001B71E                            
0001B71E                            Touch_Yadrin:				; XREF: Touch_Special
0001B71E 9A40                       		sub.w	d0,d5
0001B720 0C45 0008                  		cmpi.w	#8,d5
0001B724 6400                       		bcc.s	loc_1B144
0001B726 3029 0008                  		move.w	8(a1),d0
0001B72A 5940                       		subq.w	#4,d0
0001B72C 0829 0000 0022             		btst	#0,$22(a1)
0001B732 6700                       		beq.s	loc_1B130
0001B734 0440 0010                  		subi.w	#$10,d0
0001B738                            
0001B738                            loc_1B130:
0001B738 9042                       		sub.w	d2,d0
0001B73A 6400                       		bcc.s	loc_1B13C
0001B73C 0640 0018                  		addi.w	#$18,d0
0001B740 6500                       		bcs.s	loc_1B140
0001B742 6000                       		bra.s	loc_1B144
0001B744                            ; ===========================================================================
0001B744                            
0001B744                            loc_1B13C:
0001B744 B044                       		cmp.w	d4,d0
0001B746 6200                       		bhi.s	loc_1B144
0001B748                            
0001B748                            loc_1B140:
0001B748 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B74C                            ; ===========================================================================
0001B74C                            
0001B74C                            loc_1B144:
0001B74C 6000 FDC8                  		bra.w	Touch_Enemy
0001B750                            ; ===========================================================================
0001B750                            
0001B750                            Touch_D7orE1:				; XREF: Touch_Special
0001B750 5229 0021                  		addq.b	#1,$21(a1)
0001B754 4E75                       		rts	
0001B756                            ; End of function Touch_Special
0001B756                            
0001B756                            ; ---------------------------------------------------------------------------
0001B756                            ; Subroutine to	show the special stage layout
0001B756                            ; ---------------------------------------------------------------------------
0001B756                            
0001B756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B756                            
0001B756                            
0001B756                            SS_ShowLayout:				; XREF: SpecialStage
0001B756 6100 0000                  		bsr.w	SS_AniWallsRings
0001B75A 6100 0000                  		bsr.w	SS_AniItems
0001B75E 3F05                       		move.w	d5,-(sp)
0001B760 43F8 8000                  		lea	($FFFF8000).w,a1
0001B764 1038 F780                  		move.b	($FFFFF780).w,d0
0001B768 0200 00FC                  		andi.b	#$FC,d0
0001B76C 4EB9 0000 2C22             		jsr	(CalcSine).l
0001B772 3800                       		move.w	d0,d4
0001B774 3A01                       		move.w	d1,d5
0001B776 C9FC 0018                  		muls.w	#$18,d4
0001B77A CBFC 0018                  		muls.w	#$18,d5
0001B77E 7400                       		moveq	#0,d2
0001B780 3438 F700                  		move.w	($FFFFF700).w,d2
0001B784 84FC 0018                  		divu.w	#$18,d2
0001B788 4842                       		swap	d2
0001B78A 4442                       		neg.w	d2
0001B78C 0642 FF4C                  		addi.w	#-$B4,d2
0001B790 7600                       		moveq	#0,d3
0001B792 3638 F704                  		move.w	($FFFFF704).w,d3
0001B796 86FC 0018                  		divu.w	#$18,d3
0001B79A 4843                       		swap	d3
0001B79C 4443                       		neg.w	d3
0001B79E 0643 FF4C                  		addi.w	#-$B4,d3
0001B7A2 3E3C 000F                  		move.w	#$F,d7
0001B7A6                            
0001B7A6                            loc_1B19E:
0001B7A6 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B7AA 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B7AE 4440                       		neg.w	d0
0001B7B0 C3C2                       		muls.w	d2,d1
0001B7B2 C1C3                       		muls.w	d3,d0
0001B7B4 2C00                       		move.l	d0,d6
0001B7B6 DC81                       		add.l	d1,d6
0001B7B8 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B7BC C1C2                       		muls.w	d2,d0
0001B7BE C3C3                       		muls.w	d3,d1
0001B7C0 D280                       		add.l	d0,d1
0001B7C2 2406                       		move.l	d6,d2
0001B7C4 3C3C 000F                  		move.w	#$F,d6
0001B7C8                            
0001B7C8                            loc_1B1C0:
0001B7C8 2002                       		move.l	d2,d0
0001B7CA E080                       		asr.l	#8,d0
0001B7CC 32C0                       		move.w	d0,(a1)+
0001B7CE 2001                       		move.l	d1,d0
0001B7D0 E080                       		asr.l	#8,d0
0001B7D2 32C0                       		move.w	d0,(a1)+
0001B7D4 D485                       		add.l	d5,d2
0001B7D6 D284                       		add.l	d4,d1
0001B7D8 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B7DC                            
0001B7DC 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B7E0 0643 0018                  		addi.w	#$18,d3
0001B7E4 51CF FFC0                  		dbf	d7,loc_1B19E
0001B7E8                            
0001B7E8 3A1F                       		move.w	(sp)+,d5
0001B7EA 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B7F0 7000                       		moveq	#0,d0
0001B7F2 3038 F704                  		move.w	($FFFFF704).w,d0
0001B7F6 80FC 0018                  		divu.w	#$18,d0
0001B7FA C0FC 0080                  		mulu.w	#$80,d0
0001B7FE D1C0                       		adda.l	d0,a0
0001B800 7000                       		moveq	#0,d0
0001B802 3038 F700                  		move.w	($FFFFF700).w,d0
0001B806 80FC 0018                  		divu.w	#$18,d0
0001B80A D0C0                       		adda.w	d0,a0
0001B80C 49F8 8000                  		lea	($FFFF8000).w,a4
0001B810 3E3C 000F                  		move.w	#$F,d7
0001B814                            
0001B814                            loc_1B20C:
0001B814 3C3C 000F                  		move.w	#$F,d6
0001B818                            
0001B818                            loc_1B210:
0001B818 7000                       		moveq	#0,d0
0001B81A 1018                       		move.b	(a0)+,d0
0001B81C 6700                       		beq.s	loc_1B268
0001B81E 0C00 004E                  		cmpi.b	#$4E,d0
0001B822 6200                       		bhi.s	loc_1B268
0001B824 3614                       		move.w	(a4),d3
0001B826 0643 0120                  		addi.w	#$120,d3
0001B82A 0C43 0070                  		cmpi.w	#$70,d3
0001B82E 6500                       		bcs.s	loc_1B268
0001B830 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B834 6400                       		bcc.s	loc_1B268
0001B836 342C 0002                  		move.w	2(a4),d2
0001B83A 0642 00F0                  		addi.w	#$F0,d2
0001B83E 0C42 0070                  		cmpi.w	#$70,d2
0001B842 6500                       		bcs.s	loc_1B268
0001B844 0C42 0170                  		cmpi.w	#$170,d2
0001B848 6400                       		bcc.s	loc_1B268
0001B84A 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B850 E748                       		lsl.w	#3,d0
0001B852 4BF5 0000                  		lea	(a5,d0.w),a5
0001B856 225D                       		movea.l	(a5)+,a1
0001B858 321D                       		move.w	(a5)+,d1
0001B85A D241                       		add.w	d1,d1
0001B85C D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B860 365D                       		movea.w	(a5)+,a3
0001B862 7200                       		moveq	#0,d1
0001B864 1219                       		move.b	(a1)+,d1
0001B866 5301                       		subq.b	#1,d1
0001B868 6B00                       		bmi.s	loc_1B268
0001B86A 4EB9 0000 DD06             		jsr	sub_D762
0001B870                            
0001B870                            loc_1B268:
0001B870 584C                       		addq.w	#4,a4
0001B872 51CE FFA4                  		dbf	d6,loc_1B210
0001B876                            
0001B876 41E8 0070                  		lea	$70(a0),a0
0001B87A 51CF FF98                  		dbf	d7,loc_1B20C
0001B87E                            
0001B87E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B882 0C05 0050                  		cmpi.b	#$50,d5
0001B886 6700                       		beq.s	loc_1B288
0001B888 24BC 0000 0000             		move.l	#0,(a2)
0001B88E 4E75                       		rts	
0001B890                            ; ===========================================================================
0001B890                            
0001B890                            loc_1B288:
0001B890 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B896 4E75                       		rts	
0001B898                            ; End of function SS_ShowLayout
0001B898                            
0001B898                            ; ---------------------------------------------------------------------------
0001B898                            ; Subroutine to	animate	walls and rings	in the special stage
0001B898                            ; ---------------------------------------------------------------------------
0001B898                            
0001B898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B898                            
0001B898                            
0001B898                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B898 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B89E 7000                       		moveq	#0,d0
0001B8A0 1038 F780                  		move.b	($FFFFF780).w,d0
0001B8A4 E408                       		lsr.b	#2,d0
0001B8A6 0240 000F                  		andi.w	#$F,d0
0001B8AA 7223                       		moveq	#$23,d1
0001B8AC                            
0001B8AC                            loc_1B2A4:
0001B8AC 3280                       		move.w	d0,(a1)
0001B8AE 5049                       		addq.w	#8,a1
0001B8B0 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B8B4                            
0001B8B4 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B8BA 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B8BE 6A00                       		bpl.s	loc_1B2C8
0001B8C0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B8C6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B8CA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B8D0                            
0001B8D0                            loc_1B2C8:
0001B8D0 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B8D6 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B8DA 6A00                       		bpl.s	loc_1B2E4
0001B8DC 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B8E2 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B8E6 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B8EC                            
0001B8EC                            loc_1B2E4:
0001B8EC 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B8F0 1340 0138                  		move.b	d0,$138(a1)
0001B8F4 1340 0160                  		move.b	d0,$160(a1)
0001B8F8 1340 0148                  		move.b	d0,$148(a1)
0001B8FC 1340 0150                  		move.b	d0,$150(a1)
0001B900 1340 01D8                  		move.b	d0,$1D8(a1)
0001B904 1340 01E0                  		move.b	d0,$1E0(a1)
0001B908 1340 01E8                  		move.b	d0,$1E8(a1)
0001B90C 1340 01F0                  		move.b	d0,$1F0(a1)
0001B910 1340 01F8                  		move.b	d0,$1F8(a1)
0001B914 1340 0200                  		move.b	d0,$200(a1)
0001B918 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B91C 6A00                       		bpl.s	loc_1B326
0001B91E 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B924 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B928 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B92E                            
0001B92E                            loc_1B326:
0001B92E 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B932 1340 0168                  		move.b	d0,$168(a1)
0001B936 1340 0170                  		move.b	d0,$170(a1)
0001B93A 1340 0178                  		move.b	d0,$178(a1)
0001B93E 1340 0180                  		move.b	d0,$180(a1)
0001B942 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B946 6A00                       		bpl.s	loc_1B350
0001B948 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B94E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B952 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B958                            
0001B958                            loc_1B350:
0001B958 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B95E 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B964 7000                       		moveq	#0,d0
0001B966 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B96A D040                       		add.w	d0,d0
0001B96C 41F0 0000                  		lea	(a0,d0.w),a0
0001B970 3290                       		move.w	(a0),(a1)
0001B972 3368 0002 0008             		move.w	2(a0),8(a1)
0001B978 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B97E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B984 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B98A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B990 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B996 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B99C D0FC 0020                  		adda.w	#$20,a0
0001B9A0 D2FC 0048                  		adda.w	#$48,a1
0001B9A4 3290                       		move.w	(a0),(a1)
0001B9A6 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9AC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9B2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9B8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9BE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9C4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9CA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9D0 D0FC 0020                  		adda.w	#$20,a0
0001B9D4 D2FC 0048                  		adda.w	#$48,a1
0001B9D8 3290                       		move.w	(a0),(a1)
0001B9DA 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9E0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9E6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9EC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9F2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9F8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9FE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA04 D0FC 0020                  		adda.w	#$20,a0
0001BA08 D2FC 0048                  		adda.w	#$48,a1
0001BA0C 3290                       		move.w	(a0),(a1)
0001BA0E 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA14 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA1A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA20 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA26 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA2C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA32 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA38 D0FC 0020                  		adda.w	#$20,a0
0001BA3C D2FC 0048                  		adda.w	#$48,a1
0001BA40 4E75                       		rts	
0001BA42                            ; End of function SS_AniWallsRings
0001BA42                            
0001BA42                            ; ===========================================================================
0001BA42 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA52 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA62 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA72 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA82 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BA92 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BAA2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAB2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAC2                            ; ---------------------------------------------------------------------------
0001BAC2                            ; Subroutine to	remove items when you collect them in the special stage
0001BAC2                            ; ---------------------------------------------------------------------------
0001BAC2                            
0001BAC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAC2                            
0001BAC2                            
0001BAC2                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BAC2 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BAC8 303C 001F                  		move.w	#$1F,d0
0001BACC                            
0001BACC                            loc_1B4C4:
0001BACC 4A12                       		tst.b	(a2)
0001BACE 6700                       		beq.s	locret_1B4CE
0001BAD0 504A                       		addq.w	#8,a2
0001BAD2 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BAD6                            
0001BAD6                            locret_1B4CE:
0001BAD6 4E75                       		rts	
0001BAD8                            ; End of function SS_RemoveCollectedItem
0001BAD8                            
0001BAD8                            ; ---------------------------------------------------------------------------
0001BAD8                            ; Subroutine to	animate	special	stage items when you touch them
0001BAD8                            ; ---------------------------------------------------------------------------
0001BAD8                            
0001BAD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAD8                            
0001BAD8                            
0001BAD8                            SS_AniItems:				; XREF: SS_ShowLayout
0001BAD8 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BADE 3E3C 001F                  		move.w	#$1F,d7
0001BAE2                            
0001BAE2                            loc_1B4DA:
0001BAE2 7000                       		moveq	#0,d0
0001BAE4 1010                       		move.b	(a0),d0
0001BAE6 6700                       		beq.s	loc_1B4E8
0001BAE8 E548                       		lsl.w	#2,d0
0001BAEA 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BAEE 4E91                       		jsr	(a1)
0001BAF0                            
0001BAF0                            loc_1B4E8:
0001BAF0 5048                       		addq.w	#8,a0
0001BAF2                            
0001BAF2                            loc_1B4EA:
0001BAF2 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BAF6                            
0001BAF6 4E75                       		rts	
0001BAF8                            ; End of function SS_AniItems
0001BAF8                            
0001BAF8                            ; ===========================================================================
0001BAF8 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BAFC 0000 0000                  		dc.l SS_AniBumper
0001BB00 0000 0000                  		dc.l SS_Ani1Up
0001BB04 0000 0000                  		dc.l SS_AniReverse
0001BB08 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BB0C 0000 0000                  		dc.l SS_AniGlassBlock
0001BB10                            ; ===========================================================================
0001BB10                            
0001BB10                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BB10 5328 0002                  		subq.b	#1,2(a0)
0001BB14 6A00                       		bpl.s	locret_1B530
0001BB16 117C 0005 0002             		move.b	#5,2(a0)
0001BB1C 7000                       		moveq	#0,d0
0001BB1E 1028 0003                  		move.b	3(a0),d0
0001BB22 5228 0003                  		addq.b	#1,3(a0)
0001BB26 2268 0004                  		movea.l	4(a0),a1
0001BB2A 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BB2E 1280                       		move.b	d0,(a1)
0001BB30 6600                       		bne.s	locret_1B530
0001BB32 4290                       		clr.l	(a0)
0001BB34 42A8 0004                  		clr.l	4(a0)
0001BB38                            
0001BB38                            locret_1B530:
0001BB38 4E75                       		rts	
0001BB3A                            ; ===========================================================================
0001BB3A 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BB40                            ; ===========================================================================
0001BB40                            
0001BB40                            SS_AniBumper:				; XREF: SS_AniIndex
0001BB40 5328 0002                  		subq.b	#1,2(a0)
0001BB44 6A00                       		bpl.s	locret_1B566
0001BB46 117C 0007 0002             		move.b	#7,2(a0)
0001BB4C 7000                       		moveq	#0,d0
0001BB4E 1028 0003                  		move.b	3(a0),d0
0001BB52 5228 0003                  		addq.b	#1,3(a0)
0001BB56 2268 0004                  		movea.l	4(a0),a1
0001BB5A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BB5E 6600                       		bne.s	loc_1B564
0001BB60 4290                       		clr.l	(a0)
0001BB62 42A8 0004                  		clr.l	4(a0)
0001BB66 12BC 0025                  		move.b	#$25,(a1)
0001BB6A 4E75                       		rts	
0001BB6C                            ; ===========================================================================
0001BB6C                            
0001BB6C                            loc_1B564:
0001BB6C 1280                       		move.b	d0,(a1)
0001BB6E                            
0001BB6E                            locret_1B566:
0001BB6E 4E75                       		rts	
0001BB70                            ; ===========================================================================
0001BB70 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BB76                            ; ===========================================================================
0001BB76                            
0001BB76                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BB76 5328 0002                  		subq.b	#1,2(a0)
0001BB7A 6A00                       		bpl.s	locret_1B596
0001BB7C 117C 0005 0002             		move.b	#5,2(a0)
0001BB82 7000                       		moveq	#0,d0
0001BB84 1028 0003                  		move.b	3(a0),d0
0001BB88 5228 0003                  		addq.b	#1,3(a0)
0001BB8C 2268 0004                  		movea.l	4(a0),a1
0001BB90 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BB94 1280                       		move.b	d0,(a1)
0001BB96 6600                       		bne.s	locret_1B596
0001BB98 4290                       		clr.l	(a0)
0001BB9A 42A8 0004                  		clr.l	4(a0)
0001BB9E                            
0001BB9E                            locret_1B596:
0001BB9E 4E75                       		rts	
0001BBA0                            ; ===========================================================================
0001BBA0 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            SS_AniReverse:				; XREF: SS_AniIndex
0001BBA6 5328 0002                  		subq.b	#1,2(a0)
0001BBAA 6A00                       		bpl.s	locret_1B5CC
0001BBAC 117C 0007 0002             		move.b	#7,2(a0)
0001BBB2 7000                       		moveq	#0,d0
0001BBB4 1028 0003                  		move.b	3(a0),d0
0001BBB8 5228 0003                  		addq.b	#1,3(a0)
0001BBBC 2268 0004                  		movea.l	4(a0),a1
0001BBC0 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BBC4 6600                       		bne.s	loc_1B5CA
0001BBC6 4290                       		clr.l	(a0)
0001BBC8 42A8 0004                  		clr.l	4(a0)
0001BBCC 12BC 002B                  		move.b	#$2B,(a1)
0001BBD0 4E75                       		rts	
0001BBD2                            ; ===========================================================================
0001BBD2                            
0001BBD2                            loc_1B5CA:
0001BBD2 1280                       		move.b	d0,(a1)
0001BBD4                            
0001BBD4                            locret_1B5CC:
0001BBD4 4E75                       		rts	
0001BBD6                            ; ===========================================================================
0001BBD6 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BBDC                            ; ===========================================================================
0001BBDC                            
0001BBDC                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BBDC 5328 0002                  		subq.b	#1,2(a0)
0001BBE0 6A00                       		bpl.s	locret_1B60C
0001BBE2 117C 0005 0002             		move.b	#5,2(a0)
0001BBE8 7000                       		moveq	#0,d0
0001BBEA 1028 0003                  		move.b	3(a0),d0
0001BBEE 5228 0003                  		addq.b	#1,3(a0)
0001BBF2 2268 0004                  		movea.l	4(a0),a1
0001BBF6 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BBFA 1280                       		move.b	d0,(a1)
0001BBFC 6600                       		bne.s	locret_1B60C
0001BBFE 4290                       		clr.l	(a0)
0001BC00 42A8 0004                  		clr.l	4(a0)
0001BC04 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BC0A 303C 00A8                  		move.w	#$A8,d0
0001BC0E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BC14                            
0001BC14                            locret_1B60C:
0001BC14 4E75                       		rts	
0001BC16                            ; ===========================================================================
0001BC16 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BC1C                            ; ===========================================================================
0001BC1C                            
0001BC1C                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BC1C 5328 0002                  		subq.b	#1,2(a0)
0001BC20 6A00                       		bpl.s	locret_1B640
0001BC22 117C 0001 0002             		move.b	#1,2(a0)
0001BC28 7000                       		moveq	#0,d0
0001BC2A 1028 0003                  		move.b	3(a0),d0
0001BC2E 5228 0003                  		addq.b	#1,3(a0)
0001BC32 2268 0004                  		movea.l	4(a0),a1
0001BC36 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BC3A 1280                       		move.b	d0,(a1)
0001BC3C 6600                       		bne.s	locret_1B640
0001BC3E 12A8 0004                  		move.b	4(a0),(a1)
0001BC42 4290                       		clr.l	(a0)
0001BC44 42A8 0004                  		clr.l	4(a0)
0001BC48                            
0001BC48                            locret_1B640:
0001BC48 4E75                       		rts	
0001BC4A                            ; ===========================================================================
0001BC4A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BC54                            ; ---------------------------------------------------------------------------
0001BC54                            ; Special stage	layout pointers
0001BC54                            ; ---------------------------------------------------------------------------
0001BC54                            SS_LayoutIndex:
0001BC54                            	include "_inc\Special stage layout pointers.asm"
0001BC54                            ; ---------------------------------------------------------------------------
0001BC54                            ; Special stage	layout pointers
0001BC54                            ; ---------------------------------------------------------------------------
0001BC54 0000 0000                  	dc.l SS_1
0001BC58 0000 0000                  	dc.l SS_2
0001BC5C 0000 0000                  	dc.l SS_3
0001BC60 0000 0000                  	dc.l SS_4
0001BC64 0000 0000                  	dc.l SS_5
0001BC68 0000 0000                  	dc.l SS_6
0001BC6C                            	even
0001BC6C                            	even
0001BC6C                            
0001BC6C                            ; ---------------------------------------------------------------------------
0001BC6C                            ; Special stage	start locations
0001BC6C                            ; ---------------------------------------------------------------------------
0001BC6C                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BC84                            		even
0001BC84                            
0001BC84                            ; ---------------------------------------------------------------------------
0001BC84                            ; Subroutine to	load special stage layout
0001BC84                            ; ---------------------------------------------------------------------------
0001BC84                            
0001BC84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC84                            
0001BC84                            
0001BC84                            SS_Load:				; XREF: SpecialStage
0001BC84 7000                       		moveq	#0,d0
0001BC86 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BC8A 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BC8E 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BC94 6500                       		bcs.s	SS_ChkEmldNum
0001BC96 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BC9C                            
0001BC9C                            SS_ChkEmldNum:
0001BC9C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BCA2 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BCA4 7200                       		moveq	#0,d1
0001BCA6 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BCAA 5301                       		subq.b	#1,d1
0001BCAC 6500                       		bcs.s	SS_LoadData
0001BCAE 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BCB2                            
0001BCB2                            SS_ChkEmldLoop:	
0001BCB2 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BCB6 6600                       		bne.s	SS_ChkEmldRepeat
0001BCB8 60CA                       		bra.s	SS_Load
0001BCBA                            ; ===========================================================================
0001BCBA                            
0001BCBA                            SS_ChkEmldRepeat:
0001BCBA 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BCBE                            
0001BCBE                            SS_LoadData:
0001BCBE E548                       		lsl.w	#2,d0
0001BCC0 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BCC4 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BCC8 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BCCC 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BCD0 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BCD6 303C 0000                  		move.w	#0,d0
0001BCDA 4EB9 0000 193E             		jsr	(EniDec).l
0001BCE0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BCE6 303C 0FFF                  		move.w	#$FFF,d0
0001BCEA                            
0001BCEA                            SS_ClrRAM3:
0001BCEA 4299                       		clr.l	(a1)+
0001BCEC 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BCF0                            
0001BCF0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BCF6 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BCFC 723F                       		moveq	#$3F,d1
0001BCFE                            
0001BCFE                            loc_1B6F6:
0001BCFE 743F                       		moveq	#$3F,d2
0001BD00                            
0001BD00                            loc_1B6F8:
0001BD00 12D8                       		move.b	(a0)+,(a1)+
0001BD02 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BD06                            
0001BD06 43E9 0040                  		lea	$40(a1),a1
0001BD0A 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BD0E                            
0001BD0E 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BD14 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BD1A 724D                       		moveq	#$4D,d1
0001BD1C                            
0001BD1C                            loc_1B714:
0001BD1C 22D8                       		move.l	(a0)+,(a1)+
0001BD1E 32FC 0000                  		move.w	#0,(a1)+
0001BD22 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BD28 32D8                       		move.w	(a0)+,(a1)+
0001BD2A 51C9 FFF0                  		dbf	d1,loc_1B714
0001BD2E                            
0001BD2E 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BD34 323C 003F                  		move.w	#$3F,d1
0001BD38                            
0001BD38                            loc_1B730:
0001BD38                            
0001BD38 4299                       		clr.l	(a1)+
0001BD3A 51C9 FFFC                  		dbf	d1,loc_1B730
0001BD3E                            
0001BD3E 4E75                       		rts	
0001BD40                            ; End of function SS_Load
0001BD40                            
0001BD40                            ; ===========================================================================
0001BD40                            ; ---------------------------------------------------------------------------
0001BD40                            ; Special stage	mappings and VRAM pointers
0001BD40                            ; ---------------------------------------------------------------------------
0001BD40                            SS_MapIndex:
0001BD40                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BD40                            ; ---------------------------------------------------------------------------
0001BD40                            ; Special stage	mappings and VRAM pointers
0001BD40                            ; ---------------------------------------------------------------------------
0001BD40 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BD44 0142                       	dc.w $142		; VRAM setting
0001BD46 0000 0000                  	dc.l Map_SSWalls
0001BD4A 0142                       	dc.w $142
0001BD4C 0000 0000                  	dc.l Map_SSWalls
0001BD50 0142                       	dc.w $142
0001BD52 0000 0000                  	dc.l Map_SSWalls
0001BD56 0142                       	dc.w $142
0001BD58 0000 0000                  	dc.l Map_SSWalls
0001BD5C 0142                       	dc.w $142
0001BD5E 0000 0000                  	dc.l Map_SSWalls
0001BD62 0142                       	dc.w $142
0001BD64 0000 0000                  	dc.l Map_SSWalls
0001BD68 0142                       	dc.w $142
0001BD6A 0000 0000                  	dc.l Map_SSWalls
0001BD6E 0142                       	dc.w $142
0001BD70 0000 0000                  	dc.l Map_SSWalls
0001BD74 0142                       	dc.w $142
0001BD76 0000 0000                  	dc.l Map_SSWalls
0001BD7A 2142                       	dc.w $2142
0001BD7C 0000 0000                  	dc.l Map_SSWalls
0001BD80 2142                       	dc.w $2142
0001BD82 0000 0000                  	dc.l Map_SSWalls
0001BD86 2142                       	dc.w $2142
0001BD88 0000 0000                  	dc.l Map_SSWalls
0001BD8C 2142                       	dc.w $2142
0001BD8E 0000 0000                  	dc.l Map_SSWalls
0001BD92 2142                       	dc.w $2142
0001BD94 0000 0000                  	dc.l Map_SSWalls
0001BD98 2142                       	dc.w $2142
0001BD9A 0000 0000                  	dc.l Map_SSWalls
0001BD9E 2142                       	dc.w $2142
0001BDA0 0000 0000                  	dc.l Map_SSWalls
0001BDA4 2142                       	dc.w $2142
0001BDA6 0000 0000                  	dc.l Map_SSWalls
0001BDAA 2142                       	dc.w $2142
0001BDAC 0000 0000                  	dc.l Map_SSWalls
0001BDB0 4142                       	dc.w $4142
0001BDB2 0000 0000                  	dc.l Map_SSWalls
0001BDB6 4142                       	dc.w $4142
0001BDB8 0000 0000                  	dc.l Map_SSWalls
0001BDBC 4142                       	dc.w $4142
0001BDBE 0000 0000                  	dc.l Map_SSWalls
0001BDC2 4142                       	dc.w $4142
0001BDC4 0000 0000                  	dc.l Map_SSWalls
0001BDC8 4142                       	dc.w $4142
0001BDCA 0000 0000                  	dc.l Map_SSWalls
0001BDCE 4142                       	dc.w $4142
0001BDD0 0000 0000                  	dc.l Map_SSWalls
0001BDD4 4142                       	dc.w $4142
0001BDD6 0000 0000                  	dc.l Map_SSWalls
0001BDDA 4142                       	dc.w $4142
0001BDDC 0000 0000                  	dc.l Map_SSWalls
0001BDE0 4142                       	dc.w $4142
0001BDE2 0000 0000                  	dc.l Map_SSWalls
0001BDE6 6142                       	dc.w $6142
0001BDE8 0000 0000                  	dc.l Map_SSWalls
0001BDEC 6142                       	dc.w $6142
0001BDEE 0000 0000                  	dc.l Map_SSWalls
0001BDF2 6142                       	dc.w $6142
0001BDF4 0000 0000                  	dc.l Map_SSWalls
0001BDF8 6142                       	dc.w $6142
0001BDFA 0000 0000                  	dc.l Map_SSWalls
0001BDFE 6142                       	dc.w $6142
0001BE00 0000 0000                  	dc.l Map_SSWalls
0001BE04 6142                       	dc.w $6142
0001BE06 0000 0000                  	dc.l Map_SSWalls
0001BE0A 6142                       	dc.w $6142
0001BE0C 0000 0000                  	dc.l Map_SSWalls
0001BE10 6142                       	dc.w $6142
0001BE12 0000 0000                  	dc.l Map_SSWalls
0001BE16 6142                       	dc.w $6142
0001BE18 0000 F09C                  	dc.l Map_obj47
0001BE1C 023B                       	dc.w $23B
0001BE1E 0000 0000                  	dc.l Map_SS_R
0001BE22 0570                       	dc.w $570
0001BE24 0000 0000                  	dc.l Map_SS_R
0001BE28 0251                       	dc.w $251
0001BE2A 0000 0000                  	dc.l Map_SS_R
0001BE2E 0370                       	dc.w $370
0001BE30 0000 0000                  	dc.l Map_SS_Up
0001BE34 0263                       	dc.w $263
0001BE36 0000 0000                  	dc.l Map_SS_Down
0001BE3A 0263                       	dc.w $263
0001BE3C 0000 0000                  	dc.l Map_SS_R
0001BE40 22F0                       	dc.w $22F0
0001BE42 0000 0000                  	dc.l Map_SS_Glass
0001BE46 0470                       	dc.w $470
0001BE48 0000 0000                  	dc.l Map_SS_Glass
0001BE4C 05F0                       	dc.w $5F0
0001BE4E 0000 0000                  	dc.l Map_SS_Glass
0001BE52 65F0                       	dc.w $65F0
0001BE54 0000 0000                  	dc.l Map_SS_Glass
0001BE58 25F0                       	dc.w $25F0
0001BE5A 0000 0000                  	dc.l Map_SS_Glass
0001BE5E 45F0                       	dc.w $45F0
0001BE60 0000 0000                  	dc.l Map_SS_R
0001BE64 02F0                       	dc.w $2F0
0001BE66 0100 F09C                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BE6A 023B                       	dc.w $23B
0001BE6C 0200 F09C                  	dc.l Map_obj47+$2000000
0001BE70 023B                       	dc.w $23B
0001BE72 0000 0000                  	dc.l Map_SS_R
0001BE76 0797                       	dc.w $797
0001BE78 0000 0000                  	dc.l Map_SS_R
0001BE7C 07A0                       	dc.w $7A0
0001BE7E 0000 0000                  	dc.l Map_SS_R
0001BE82 07A9                       	dc.w $7A9
0001BE84 0000 0000                  	dc.l Map_SS_R
0001BE88 0797                       	dc.w $797
0001BE8A 0000 0000                  	dc.l Map_SS_R
0001BE8E 07A0                       	dc.w $7A0
0001BE90 0000 0000                  	dc.l Map_SS_R
0001BE94 07A9                       	dc.w $7A9
0001BE96 0000 A3E0                  	dc.l Map_obj25
0001BE9A 27B2                       	dc.w $27B2
0001BE9C 0000 0000                  	dc.l Map_SS_Chaos3
0001BEA0 0770                       	dc.w $770
0001BEA2 0000 0000                  	dc.l Map_SS_Chaos3
0001BEA6 2770                       	dc.w $2770
0001BEA8 0000 0000                  	dc.l Map_SS_Chaos3
0001BEAC 4770                       	dc.w $4770
0001BEAE 0000 0000                  	dc.l Map_SS_Chaos3
0001BEB2 6770                       	dc.w $6770
0001BEB4 0000 0000                  	dc.l Map_SS_Chaos1
0001BEB8 0770                       	dc.w $770
0001BEBA 0000 0000                  	dc.l Map_SS_Chaos2
0001BEBE 0770                       	dc.w $770
0001BEC0 0000 0000                  	dc.l Map_SS_R
0001BEC4 04F0                       	dc.w $4F0
0001BEC6 0400 A3E0                  	dc.l Map_obj25+$4000000
0001BECA 27B2                       	dc.w $27B2
0001BECC 0500 A3E0                  	dc.l Map_obj25+$5000000
0001BED0 27B2                       	dc.w $27B2
0001BED2 0600 A3E0                  	dc.l Map_obj25+$6000000
0001BED6 27B2                       	dc.w $27B2
0001BED8 0700 A3E0                  	dc.l Map_obj25+$7000000
0001BEDC 27B2                       	dc.w $27B2
0001BEDE 0000 0000                  	dc.l Map_SS_Glass
0001BEE2 23F0                       	dc.w $23F0
0001BEE4 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BEE8 23F0                       	dc.w $23F0
0001BEEA 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BEEE 23F0                       	dc.w $23F0
0001BEF0 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BEF4 23F0                       	dc.w $23F0
0001BEF6 0000 0000                  	dc.l Map_SS_R+$2000000
0001BEFA 04F0                       	dc.w $4F0
0001BEFC 0000 0000                  	dc.l Map_SS_Glass
0001BF00 05F0                       	dc.w $5F0
0001BF02 0000 0000                  	dc.l Map_SS_Glass
0001BF06 65F0                       	dc.w $65F0
0001BF08 0000 0000                  	dc.l Map_SS_Glass
0001BF0C 25F0                       	dc.w $25F0
0001BF0E 0000 0000                  	dc.l Map_SS_Glass
0001BF12 45F0                       	dc.w $45F0
0001BF12 45F0                       	dc.w $45F0
0001BF14                            
0001BF14                            ; ---------------------------------------------------------------------------
0001BF14                            ; Sprite mappings - special stage "R" block
0001BF14                            ; ---------------------------------------------------------------------------
0001BF14                            Map_SS_R:
0001BF14                            	include "_maps\SSRblock.asm"
0001BF14                            ; ---------------------------------------------------------------------------
0001BF14                            ; Sprite mappings - special stage "R" block
0001BF14                            ; ---------------------------------------------------------------------------
0001BF14 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BF18 0000                       		dc.w byte_1B91E-Map_SS_R
0001BF1A 01                         byte_1B912:	dc.b 1
0001BF1B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF20 01                         byte_1B918:	dc.b 1
0001BF21 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF26 00                         byte_1B91E:	dc.b 0
0001BF28 00                         		even
0001BF28 00                         		even
0001BF28                            
0001BF28                            ; ---------------------------------------------------------------------------
0001BF28                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF28                            ; ---------------------------------------------------------------------------
0001BF28                            Map_SS_Glass:
0001BF28                            	include "_maps\SSglassblock.asm"
0001BF28                            ; ---------------------------------------------------------------------------
0001BF28                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF28                            ; ---------------------------------------------------------------------------
0001BF28 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BF2C 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BF30 01                         byte_1B928:	dc.b 1
0001BF31 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF36 01                         byte_1B92E:	dc.b 1
0001BF37 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BF3C 01                         byte_1B934:	dc.b 1
0001BF3D F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BF42 01                         byte_1B93A:	dc.b 1
0001BF43 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BF48                            		even
0001BF48                            		even
0001BF48                            
0001BF48                            ; ---------------------------------------------------------------------------
0001BF48                            ; Sprite mappings - special stage "UP" block
0001BF48                            ; ---------------------------------------------------------------------------
0001BF48                            Map_SS_Up:
0001BF48                            	include "_maps\SSUPblock.asm"
0001BF48                            ; ---------------------------------------------------------------------------
0001BF48                            ; Sprite mappings - special stage "UP" block
0001BF48                            ; ---------------------------------------------------------------------------
0001BF48 0000                       		dc.w byte_1B944-Map_SS_Up
0001BF4A 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BF4C 01                         byte_1B944:	dc.b 1
0001BF4D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF52 01                         byte_1B94A:	dc.b 1
0001BF53 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF58                            		even
0001BF58                            		even
0001BF58                            
0001BF58                            ; ---------------------------------------------------------------------------
0001BF58                            ; Sprite mappings - special stage "DOWN" block
0001BF58                            ; ---------------------------------------------------------------------------
0001BF58                            Map_SS_Down:
0001BF58                            	include "_maps\SSDOWNblock.asm"
0001BF58                            ; ---------------------------------------------------------------------------
0001BF58                            ; Sprite mappings - special stage "DOWN" block
0001BF58                            ; ---------------------------------------------------------------------------
0001BF58 0000                       		dc.w byte_1B954-Map_SS_Down
0001BF5A 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BF5C 01                         byte_1B954:	dc.b 1
0001BF5D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF62 01                         byte_1B95A:	dc.b 1
0001BF63 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF68                            		even
0001BF68                            		even
0001BF68                            
0001BF68                            ; ---------------------------------------------------------------------------
0001BF68                            ; Sprite mappings - special stage chaos	emeralds
0001BF68                            ; ---------------------------------------------------------------------------
0001BF68 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BF6A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BF6C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BF6E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BF70 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BF72 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BF74 01                         byte_1B96C:	dc.b 1
0001BF75 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BF7A 01                         byte_1B972:	dc.b 1
0001BF7B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BF80 01                         byte_1B978:	dc.b 1
0001BF81 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BF86 01                         byte_1B97E:	dc.b 1
0001BF87 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BF8C                            		even
0001BF8C                            ; ===========================================================================
0001BF8C                            ; ---------------------------------------------------------------------------
0001BF8C                            ; Object 09 - Sonic (special stage)
0001BF8C                            ; ---------------------------------------------------------------------------
0001BF8C                            
0001BF8C                            Obj09:					; XREF: Obj_Index
0001BF8C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BF90 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BF92 6100 0000                  		bsr.w	SS_FixCamera
0001BF96 6000 0000                  		bra.w	DebugMode
0001BF9A                            ; ===========================================================================
0001BF9A                            
0001BF9A                            Obj09_Normal:
0001BF9A 7000                       		moveq	#0,d0
0001BF9C 1028 0024                  		move.b	$24(a0),d0
0001BFA0 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BFA4 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BFA8                            ; ===========================================================================
0001BFA8 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BFAA 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BFAC 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BFAE 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BFB0                            ; ===========================================================================
0001BFB0                            
0001BFB0                            Obj09_Main:				; XREF: Obj09_Index
0001BFB0 5428 0024                  		addq.b	#2,$24(a0)
0001BFB4 117C 000E 0016             		move.b	#$E,$16(a0)
0001BFBA 117C 0007 0017             		move.b	#7,$17(a0)
0001BFC0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BFC8 317C 0780 0002             		move.w	#$780,2(a0)
0001BFCE 117C 0004 0001             		move.b	#4,1(a0)
0001BFD4 117C 0000 0018             		move.b	#0,$18(a0)
0001BFDA 117C 0002 001C             		move.b	#2,$1C(a0)
0001BFE0 08E8 0002 0022             		bset	#2,$22(a0)
0001BFE6 08E8 0001 0022             		bset	#1,$22(a0)
0001BFEC                            
0001BFEC                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BFEC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BFF0 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BFF2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BFF8 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BFFA 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C000                            
0001C000                            Obj09_NoDebug:
0001C000 117C 0000 0030             		move.b	#0,$30(a0)
0001C006 7000                       		moveq	#0,d0
0001C008 1028 0022                  		move.b	$22(a0),d0
0001C00C 0240 0002                  		andi.w	#2,d0
0001C010 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C014 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C018 4EBA 8200                  		jsr	LoadSonicDynPLC
0001C01C 4EF9 0000 DBA8             		jmp	DisplaySprite
0001C022                            ; ===========================================================================
0001C022 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C024 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C026                            ; ===========================================================================
0001C026                            
0001C026                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C026 6100 0000                  		bsr.w	Obj09_Jump
0001C02A 6100 0000                  		bsr.w	Obj09_Move
0001C02E 6100 0000                  		bsr.w	Obj09_Fall
0001C032 6000                       		bra.s	Obj09_Display
0001C034                            ; ===========================================================================
0001C034                            
0001C034                            Obj09_InAir:				; XREF: Obj09_Modes
0001C034 6100 0000                  		bsr.w	nullsub_2
0001C038 6100 0000                  		bsr.w	Obj09_Move
0001C03C 6100 0000                  		bsr.w	Obj09_Fall
0001C040                            
0001C040                            Obj09_Display:				; XREF: Obj09_OnWall
0001C040 6100 0000                  		bsr.w	Obj09_ChkItems
0001C044 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C048 4EB9 0000 DB82             		jsr	SpeedToPos
0001C04E 6100 0000                  		bsr.w	SS_FixCamera
0001C052 3038 F780                  		move.w	($FFFFF780).w,d0
0001C056 D078 F782                  		add.w	($FFFFF782).w,d0
0001C05A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C05E 4EB9 0001 3F9E             		jsr	Sonic_Animate
0001C064 4E75                       		rts	
0001C066                            
0001C066                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C066                            
0001C066                            
0001C066                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C066 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C06C 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C06E 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C072                            
0001C072                            Obj09_ChkRight:
0001C072 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C078 6700                       		beq.s	loc_1BA78	; if not, branch
0001C07A 6100 0000                  		bsr.w	Obj09_MoveRight
0001C07E                            
0001C07E                            loc_1BA78:
0001C07E 1038 F602                  		move.b	($FFFFF602).w,d0
0001C082 0200 000C                  		andi.b	#$C,d0
0001C086 6600                       		bne.s	loc_1BAA8
0001C088 3028 0014                  		move.w	$14(a0),d0
0001C08C 6700                       		beq.s	loc_1BAA8
0001C08E 6B00                       		bmi.s	loc_1BA9A
0001C090 0440 000C                  		subi.w	#$C,d0
0001C094 6400                       		bcc.s	loc_1BA94
0001C096 303C 0000                  		move.w	#0,d0
0001C09A                            
0001C09A                            loc_1BA94:
0001C09A 3140 0014                  		move.w	d0,$14(a0)
0001C09E 6000                       		bra.s	loc_1BAA8
0001C0A0                            ; ===========================================================================
0001C0A0                            
0001C0A0                            loc_1BA9A:
0001C0A0 0640 000C                  		addi.w	#$C,d0
0001C0A4 6400                       		bcc.s	loc_1BAA4
0001C0A6 303C 0000                  		move.w	#0,d0
0001C0AA                            
0001C0AA                            loc_1BAA4:
0001C0AA 3140 0014                  		move.w	d0,$14(a0)
0001C0AE                            
0001C0AE                            loc_1BAA8:
0001C0AE 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0B2 0600 0020                  		addi.b	#$20,d0
0001C0B6 0200 00C0                  		andi.b	#$C0,d0
0001C0BA 4400                       		neg.b	d0
0001C0BC 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C0C2 C3E8 0014                  		muls.w	$14(a0),d1
0001C0C6 D3A8 0008                  		add.l	d1,8(a0)
0001C0CA C1E8 0014                  		muls.w	$14(a0),d0
0001C0CE D1A8 000C                  		add.l	d0,$C(a0)
0001C0D2 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C0D6 2428 000C                  		move.l	$C(a0),d2
0001C0DA 2628 0008                  		move.l	8(a0),d3
0001C0DE 6100 0000                  		bsr.w	sub_1BCE8
0001C0E2 6700                       		beq.s	loc_1BAF2
0001C0E4 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0E8 93A8 0008                  		sub.l	d1,8(a0)
0001C0EC 91A8 000C                  		sub.l	d0,$C(a0)
0001C0F0 317C 0000 0014             		move.w	#0,$14(a0)
0001C0F6 4E75                       		rts	
0001C0F8                            ; ===========================================================================
0001C0F8                            
0001C0F8                            loc_1BAF2:
0001C0F8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0FC 4E75                       		rts	
0001C0FE                            ; End of function Obj09_Move
0001C0FE                            
0001C0FE                            
0001C0FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0FE                            
0001C0FE                            
0001C0FE                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C0FE 08E8 0000 0022             		bset	#0,$22(a0)
0001C104 3028 0014                  		move.w	$14(a0),d0
0001C108 6700                       		beq.s	loc_1BB06
0001C10A 6A00                       		bpl.s	loc_1BB1A
0001C10C                            
0001C10C                            loc_1BB06:
0001C10C 0440 000C                  		subi.w	#$C,d0
0001C110 0C40 F800                  		cmpi.w	#-$800,d0
0001C114 6E00                       		bgt.s	loc_1BB14
0001C116 303C F800                  		move.w	#-$800,d0
0001C11A                            
0001C11A                            loc_1BB14:
0001C11A 3140 0014                  		move.w	d0,$14(a0)
0001C11E 4E75                       		rts	
0001C120                            ; ===========================================================================
0001C120                            
0001C120                            loc_1BB1A:
0001C120 0440 0040                  		subi.w	#$40,d0
0001C124 6400                       		bcc.s	loc_1BB22
0001C126 4E71                       		nop	
0001C128                            
0001C128                            loc_1BB22:
0001C128 3140 0014                  		move.w	d0,$14(a0)
0001C12C 4E75                       		rts	
0001C12E                            ; End of function Obj09_MoveLeft
0001C12E                            
0001C12E                            
0001C12E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C12E                            
0001C12E                            
0001C12E                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C12E 08A8 0000 0022             		bclr	#0,$22(a0)
0001C134 3028 0014                  		move.w	$14(a0),d0
0001C138 6B00                       		bmi.s	loc_1BB48
0001C13A 0640 000C                  		addi.w	#$C,d0
0001C13E 0C40 0800                  		cmpi.w	#$800,d0
0001C142 6D00                       		blt.s	loc_1BB42
0001C144 303C 0800                  		move.w	#$800,d0
0001C148                            
0001C148                            loc_1BB42:
0001C148 3140 0014                  		move.w	d0,$14(a0)
0001C14C 6000                       		bra.s	locret_1BB54
0001C14E                            ; ===========================================================================
0001C14E                            
0001C14E                            loc_1BB48:
0001C14E 0640 0040                  		addi.w	#$40,d0
0001C152 6400                       		bcc.s	loc_1BB50
0001C154 4E71                       		nop	
0001C156                            
0001C156                            loc_1BB50:
0001C156 3140 0014                  		move.w	d0,$14(a0)
0001C15A                            
0001C15A                            locret_1BB54:
0001C15A 4E75                       		rts	
0001C15C                            ; End of function Obj09_MoveRight
0001C15C                            
0001C15C                            
0001C15C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C15C                            
0001C15C                            
0001C15C                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C15C 1038 F603                  		move.b	($FFFFF603).w,d0
0001C160 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C164 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C166 1038 F780                  		move.b	($FFFFF780).w,d0
0001C16A 0200 00FC                  		andi.b	#$FC,d0
0001C16E 4400                       		neg.b	d0
0001C170 0400 0040                  		subi.b	#$40,d0
0001C174 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C17A C3FC 0680                  		muls.w	#$680,d1
0001C17E E081                       		asr.l	#8,d1
0001C180 3141 0010                  		move.w	d1,$10(a0)
0001C184 C1FC 0680                  		muls.w	#$680,d0
0001C188 E080                       		asr.l	#8,d0
0001C18A 3140 0012                  		move.w	d0,$12(a0)
0001C18E 08E8 0001 0022             		bset	#1,$22(a0)
0001C194 303C 00A0                  		move.w	#$A0,d0
0001C198 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C19E                            
0001C19E                            Obj09_NoJump:
0001C19E 4E75                       		rts	
0001C1A0                            ; End of function Obj09_Jump
0001C1A0                            
0001C1A0                            
0001C1A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1A0                            
0001C1A0                            
0001C1A0                            nullsub_2:				; XREF: Obj09_InAir
0001C1A0 4E75                       		rts	
0001C1A2                            ; End of function nullsub_2
0001C1A2                            
0001C1A2                            ; ===========================================================================
0001C1A2                            ; ---------------------------------------------------------------------------
0001C1A2                            ; unused subroutine to limit Sonic's upward vertical speed
0001C1A2                            ; ---------------------------------------------------------------------------
0001C1A2 323C FC00                  		move.w	#-$400,d1
0001C1A6 B268 0012                  		cmp.w	$12(a0),d1
0001C1AA 6F00                       		ble.s	locret_1BBB4
0001C1AC 1038 F602                  		move.b	($FFFFF602).w,d0
0001C1B0 0200 0070                  		andi.b	#$70,d0
0001C1B4 6600                       		bne.s	locret_1BBB4
0001C1B6 3141 0012                  		move.w	d1,$12(a0)
0001C1BA                            
0001C1BA                            locret_1BBB4:
0001C1BA 4E75                       		rts	
0001C1BC                            ; ---------------------------------------------------------------------------
0001C1BC                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C1BC                            ; ---------------------------------------------------------------------------
0001C1BC                            
0001C1BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1BC                            
0001C1BC                            
0001C1BC                            SS_FixCamera:				; XREF: Obj09
0001C1BC 3428 000C                  		move.w	$C(a0),d2
0001C1C0 3628 0008                  		move.w	8(a0),d3
0001C1C4 3038 F700                  		move.w	($FFFFF700).w,d0
0001C1C8 0443 00A0                  		subi.w	#$A0,d3
0001C1CC 6500                       		bcs.s	loc_1BBCE
0001C1CE 9043                       		sub.w	d3,d0
0001C1D0 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C1D4                            
0001C1D4                            loc_1BBCE:
0001C1D4 3038 F704                  		move.w	($FFFFF704).w,d0
0001C1D8 0442 0070                  		subi.w	#$70,d2
0001C1DC 6500                       		bcs.s	locret_1BBDE
0001C1DE 9042                       		sub.w	d2,d0
0001C1E0 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C1E4                            
0001C1E4                            locret_1BBDE:
0001C1E4 4E75                       		rts	
0001C1E6                            ; End of function SS_FixCamera
0001C1E6                            
0001C1E6                            ; ===========================================================================
0001C1E6                            
0001C1E6                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C1E6 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C1EC 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C1F2 6600                       		bne.s	loc_1BBF4
0001C1F4 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C1FA                            
0001C1FA                            loc_1BBF4:
0001C1FA 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C200 6D00                       		blt.s	loc_1BC12
0001C202 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C208 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C20E 5428 0024                  		addq.b	#2,$24(a0)
0001C212 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C218                            
0001C218                            loc_1BC12:
0001C218 3038 F780                  		move.w	($FFFFF780).w,d0
0001C21C D078 F782                  		add.w	($FFFFF782).w,d0
0001C220 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C224 4EB9 0001 3F9E             		jsr	Sonic_Animate
0001C22A 4EB9 0001 421A             		jsr	LoadSonicDynPLC
0001C230 6100 FF8A                  		bsr.w	SS_FixCamera
0001C234 4EF9 0000 DBA8             		jmp	DisplaySprite
0001C23A                            ; ===========================================================================
0001C23A                            
0001C23A                            Obj09_Exit2:				; XREF: Obj09_Index
0001C23A 5368 0038                  		subq.w	#1,$38(a0)
0001C23E 6600                       		bne.s	loc_1BC40
0001C240 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C246                            
0001C246                            loc_1BC40:
0001C246 4EB9 0001 3F9E             		jsr	Sonic_Animate
0001C24C 4EB9 0001 421A             		jsr	LoadSonicDynPLC
0001C252 6100 FF68                  		bsr.w	SS_FixCamera
0001C256 4EF9 0000 DBA8             		jmp	DisplaySprite
0001C25C                            
0001C25C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C25C                            
0001C25C                            
0001C25C                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C25C 2428 000C                  		move.l	$C(a0),d2
0001C260 2628 0008                  		move.l	8(a0),d3
0001C264 1038 F780                  		move.b	($FFFFF780).w,d0
0001C268 0200 00FC                  		andi.b	#$FC,d0
0001C26C 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C272 3828 0010                  		move.w	$10(a0),d4
0001C276 48C4                       		ext.l	d4
0001C278 E184                       		asl.l	#8,d4
0001C27A C1FC 002A                  		muls.w	#$2A,d0
0001C27E D084                       		add.l	d4,d0
0001C280 3828 0012                  		move.w	$12(a0),d4
0001C284 48C4                       		ext.l	d4
0001C286 E184                       		asl.l	#8,d4
0001C288 C3FC 002A                  		muls.w	#$2A,d1
0001C28C D284                       		add.l	d4,d1
0001C28E D680                       		add.l	d0,d3
0001C290 6100 0000                  		bsr.w	sub_1BCE8
0001C294 6700                       		beq.s	loc_1BCB0
0001C296 9680                       		sub.l	d0,d3
0001C298 7000                       		moveq	#0,d0
0001C29A 3140 0010                  		move.w	d0,$10(a0)
0001C29E 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2A4 D481                       		add.l	d1,d2
0001C2A6 6100 0000                  		bsr.w	sub_1BCE8
0001C2AA 6700                       		beq.s	loc_1BCC6
0001C2AC 9481                       		sub.l	d1,d2
0001C2AE 7200                       		moveq	#0,d1
0001C2B0 3141 0012                  		move.w	d1,$12(a0)
0001C2B4 4E75                       		rts	
0001C2B6                            ; ===========================================================================
0001C2B6                            
0001C2B6                            loc_1BCB0:
0001C2B6 D481                       		add.l	d1,d2
0001C2B8 6100 0000                  		bsr.w	sub_1BCE8
0001C2BC 6700                       		beq.s	loc_1BCD4
0001C2BE 9481                       		sub.l	d1,d2
0001C2C0 7200                       		moveq	#0,d1
0001C2C2 3141 0012                  		move.w	d1,$12(a0)
0001C2C6 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2CC                            
0001C2CC                            loc_1BCC6:
0001C2CC E080                       		asr.l	#8,d0
0001C2CE E081                       		asr.l	#8,d1
0001C2D0 3140 0010                  		move.w	d0,$10(a0)
0001C2D4 3141 0012                  		move.w	d1,$12(a0)
0001C2D8 4E75                       		rts	
0001C2DA                            ; ===========================================================================
0001C2DA                            
0001C2DA                            loc_1BCD4:
0001C2DA E080                       		asr.l	#8,d0
0001C2DC E081                       		asr.l	#8,d1
0001C2DE 3140 0010                  		move.w	d0,$10(a0)
0001C2E2 3141 0012                  		move.w	d1,$12(a0)
0001C2E6 08E8 0001 0022             		bset	#1,$22(a0)
0001C2EC 4E75                       		rts	
0001C2EE                            ; End of function Obj09_Fall
0001C2EE                            
0001C2EE                            
0001C2EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2EE                            
0001C2EE                            
0001C2EE                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C2EE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C2F4 7800                       		moveq	#0,d4
0001C2F6 4842                       		swap	d2
0001C2F8 3802                       		move.w	d2,d4
0001C2FA 4842                       		swap	d2
0001C2FC 0644 0044                  		addi.w	#$44,d4
0001C300 88FC 0018                  		divu.w	#$18,d4
0001C304 C8FC 0080                  		mulu.w	#$80,d4
0001C308 D3C4                       		adda.l	d4,a1
0001C30A 7800                       		moveq	#0,d4
0001C30C 4843                       		swap	d3
0001C30E 3803                       		move.w	d3,d4
0001C310 4843                       		swap	d3
0001C312 0644 0014                  		addi.w	#$14,d4
0001C316 88FC 0018                  		divu.w	#$18,d4
0001C31A D2C4                       		adda.w	d4,a1
0001C31C 7A00                       		moveq	#0,d5
0001C31E 1819                       		move.b	(a1)+,d4
0001C320 6100                       		bsr.s	sub_1BD30
0001C322 1819                       		move.b	(a1)+,d4
0001C324 6100                       		bsr.s	sub_1BD30
0001C326 D2FC 007E                  		adda.w	#$7E,a1
0001C32A 1819                       		move.b	(a1)+,d4
0001C32C 6100                       		bsr.s	sub_1BD30
0001C32E 1819                       		move.b	(a1)+,d4
0001C330 6100                       		bsr.s	sub_1BD30
0001C332 4A05                       		tst.b	d5
0001C334 4E75                       		rts	
0001C336                            ; End of function sub_1BCE8
0001C336                            
0001C336                            
0001C336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C336                            
0001C336                            
0001C336                            sub_1BD30:				; XREF: sub_1BCE8
0001C336 6700                       		beq.s	locret_1BD44
0001C338 0C04 0028                  		cmpi.b	#$28,d4
0001C33C 6700                       		beq.s	locret_1BD44
0001C33E 0C04 003A                  		cmpi.b	#$3A,d4
0001C342 6500                       		bcs.s	loc_1BD46
0001C344 0C04 004B                  		cmpi.b	#$4B,d4
0001C348 6400                       		bcc.s	loc_1BD46
0001C34A                            
0001C34A                            locret_1BD44:
0001C34A 4E75                       		rts	
0001C34C                            ; ===========================================================================
0001C34C                            
0001C34C                            loc_1BD46:
0001C34C 1144 0030                  		move.b	d4,$30(a0)
0001C350 2149 0032                  		move.l	a1,$32(a0)
0001C354 7AFF                       		moveq	#-1,d5
0001C356 4E75                       		rts	
0001C358                            ; End of function sub_1BD30
0001C358                            
0001C358                            
0001C358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C358                            
0001C358                            
0001C358                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C358 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C35E 7800                       		moveq	#0,d4
0001C360 3828 000C                  		move.w	$C(a0),d4
0001C364 0644 0050                  		addi.w	#$50,d4
0001C368 88FC 0018                  		divu.w	#$18,d4
0001C36C C8FC 0080                  		mulu.w	#$80,d4
0001C370 D3C4                       		adda.l	d4,a1
0001C372 7800                       		moveq	#0,d4
0001C374 3828 0008                  		move.w	8(a0),d4
0001C378 0644 0020                  		addi.w	#$20,d4
0001C37C 88FC 0018                  		divu.w	#$18,d4
0001C380 D2C4                       		adda.w	d4,a1
0001C382 1811                       		move.b	(a1),d4
0001C384 6600                       		bne.s	Obj09_ChkCont
0001C386 4A28 003A                  		tst.b	$3A(a0)
0001C38A 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C38E 7800                       		moveq	#0,d4
0001C390 4E75                       		rts	
0001C392                            ; ===========================================================================
0001C392                            
0001C392                            Obj09_ChkCont:
0001C392 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C396 6600                       		bne.s	Obj09_Chk1Up
0001C398 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C39C 6600                       		bne.s	Obj09_GetCont
0001C39E 14BC 0001                  		move.b	#1,(a2)
0001C3A2 2549 0004                  		move.l	a1,4(a2)
0001C3A6                            
0001C3A6                            Obj09_GetCont:
0001C3A6 4EB9 0000 A0C8             		jsr	CollectRing
0001C3AC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C3B2 6500                       		bcs.s	Obj09_NoCont
0001C3B4 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C3BA 6600                       		bne.s	Obj09_NoCont
0001C3BC 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C3C0 303C 00BF                  		move.w	#$BF,d0
0001C3C4 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C3CA                            
0001C3CA                            Obj09_NoCont:
0001C3CA 7800                       		moveq	#0,d4
0001C3CC 4E75                       		rts	
0001C3CE                            ; ===========================================================================
0001C3CE                            
0001C3CE                            Obj09_Chk1Up:
0001C3CE 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C3D2 6600                       		bne.s	Obj09_ChkEmer
0001C3D4 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C3D8 6600                       		bne.s	Obj09_Get1Up
0001C3DA 14BC 0003                  		move.b	#3,(a2)
0001C3DE 2549 0004                  		move.l	a1,4(a2)
0001C3E2                            
0001C3E2                            Obj09_Get1Up:
0001C3E2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C3E6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C3EA 303C 0088                  		move.w	#$88,d0
0001C3EE 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C3F4 7800                       		moveq	#0,d4
0001C3F6 4E75                       		rts	
0001C3F8                            ; ===========================================================================
0001C3F8                            
0001C3F8                            Obj09_ChkEmer:
0001C3F8 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C3FC 6500                       		bcs.s	Obj09_ChkGhost
0001C3FE 0C04 0040                  		cmpi.b	#$40,d4
0001C402 6200                       		bhi.s	Obj09_ChkGhost
0001C404 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C408 6600                       		bne.s	Obj09_GetEmer
0001C40A 14BC 0005                  		move.b	#5,(a2)
0001C40E 2549 0004                  		move.l	a1,4(a2)
0001C412                            
0001C412                            Obj09_GetEmer:
0001C412 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C418 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C41A 0404 003B                  		subi.b	#$3B,d4
0001C41E 7000                       		moveq	#0,d0
0001C420 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C424 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C428 1584 0000                  		move.b	d4,(a2,d0.w)
0001C42C 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C430                            
0001C430                            Obj09_NoEmer:
0001C430 303C 0093                  		move.w	#$93,d0
0001C434 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C43A 7800                       		moveq	#0,d4
0001C43C 4E75                       		rts	
0001C43E                            ; ===========================================================================
0001C43E                            
0001C43E                            Obj09_ChkGhost:
0001C43E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C442 6600                       		bne.s	Obj09_ChkGhostTag
0001C444 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C44A                            
0001C44A                            Obj09_ChkGhostTag:
0001C44A 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C44E 6600                       		bne.s	Obj09_NoGhost
0001C450 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C456 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C458 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C45E                            
0001C45E                            Obj09_NoGhost:
0001C45E 78FF                       		moveq	#-1,d4
0001C460 4E75                       		rts	
0001C462                            ; ===========================================================================
0001C462                            
0001C462                            Obj09_MakeGhostSolid:
0001C462 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C468 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C46A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C470 723F                       		moveq	#$3F,d1
0001C472                            
0001C472                            Obj09_GhostLoop2:
0001C472 743F                       		moveq	#$3F,d2
0001C474                            
0001C474                            Obj09_GhostLoop:
0001C474 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C478 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C47A 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C47E                            
0001C47E                            Obj09_NoReplace:
0001C47E 5249                       		addq.w	#1,a1
0001C480 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C484 43E9 0040                  		lea	$40(a1),a1
0001C488 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C48C                            
0001C48C                            Obj09_GhostNotSolid:
0001C48C 4228 003A                  		clr.b	$3A(a0)
0001C490 7800                       		moveq	#0,d4
0001C492 4E75                       		rts	
0001C494                            ; End of function Obj09_ChkItems
0001C494                            
0001C494                            
0001C494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C494                            
0001C494                            
0001C494                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C494 1028 0030                  		move.b	$30(a0),d0
0001C498 6600                       		bne.s	Obj09_ChkBumper
0001C49A 5328 0036                  		subq.b	#1,$36(a0)
0001C49E 6A00                       		bpl.s	loc_1BEA0
0001C4A0 117C 0000 0036             		move.b	#0,$36(a0)
0001C4A6                            
0001C4A6                            loc_1BEA0:
0001C4A6 5328 0037                  		subq.b	#1,$37(a0)
0001C4AA 6A00                       		bpl.s	locret_1BEAC
0001C4AC 117C 0000 0037             		move.b	#0,$37(a0)
0001C4B2                            
0001C4B2                            locret_1BEAC:
0001C4B2 4E75                       		rts	
0001C4B4                            ; ===========================================================================
0001C4B4                            
0001C4B4                            Obj09_ChkBumper:
0001C4B4 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C4B8 6600                       		bne.s	Obj09_GOAL
0001C4BA 2228 0032                  		move.l	$32(a0),d1
0001C4BE 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C4C4 3401                       		move.w	d1,d2
0001C4C6 0241 007F                  		andi.w	#$7F,d1
0001C4CA C2FC 0018                  		mulu.w	#$18,d1
0001C4CE 0441 0014                  		subi.w	#$14,d1
0001C4D2 EE4A                       		lsr.w	#7,d2
0001C4D4 0242 007F                  		andi.w	#$7F,d2
0001C4D8 C4FC 0018                  		mulu.w	#$18,d2
0001C4DC 0442 0044                  		subi.w	#$44,d2
0001C4E0 9268 0008                  		sub.w	8(a0),d1
0001C4E4 9468 000C                  		sub.w	$C(a0),d2
0001C4E8 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0001C4EE 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C4F4 C3FC F900                  		muls.w	#-$700,d1
0001C4F8 E081                       		asr.l	#8,d1
0001C4FA 3141 0010                  		move.w	d1,$10(a0)
0001C4FE C1FC F900                  		muls.w	#-$700,d0
0001C502 E080                       		asr.l	#8,d0
0001C504 3140 0012                  		move.w	d0,$12(a0)
0001C508 08E8 0001 0022             		bset	#1,$22(a0)
0001C50E 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C512 6600                       		bne.s	Obj09_BumpSnd
0001C514 14BC 0002                  		move.b	#2,(a2)
0001C518 2028 0032                  		move.l	$32(a0),d0
0001C51C 5380                       		subq.l	#1,d0
0001C51E 2540 0004                  		move.l	d0,4(a2)
0001C522                            
0001C522                            Obj09_BumpSnd:
0001C522 303C 00B4                  		move.w	#$B4,d0
0001C526 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C52C                            ; ===========================================================================
0001C52C                            
0001C52C                            Obj09_GOAL:
0001C52C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C530 6600                       		bne.s	Obj09_UPblock
0001C532 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C536 303C 00A8                  		move.w	#$A8,d0		; change item
0001C53A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C540 4E75                       		rts	
0001C542                            ; ===========================================================================
0001C542                            
0001C542                            Obj09_UPblock:
0001C542 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C546 6600                       		bne.s	Obj09_DOWNblock
0001C548 4A28 0036                  		tst.b	$36(a0)
0001C54C 6600 0000                  		bne.w	Obj09_NoGlass
0001C550 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C556 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C55C 6700                       		beq.s	Obj09_UPsnd
0001C55E E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C562 2268 0032                  		movea.l	$32(a0),a1
0001C566 5389                       		subq.l	#1,a1
0001C568 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C56C                            
0001C56C                            Obj09_UPsnd:
0001C56C 303C 00A9                  		move.w	#$A9,d0
0001C570 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C576                            ; ===========================================================================
0001C576                            
0001C576                            Obj09_DOWNblock:
0001C576 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C57A 6600                       		bne.s	Obj09_Rblock
0001C57C 4A28 0036                  		tst.b	$36(a0)
0001C580 6600 0000                  		bne.w	Obj09_NoGlass
0001C584 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C58A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C590 6600                       		bne.s	Obj09_DOWNsnd
0001C592 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C596 2268 0032                  		movea.l	$32(a0),a1
0001C59A 5389                       		subq.l	#1,a1
0001C59C 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C5A0                            
0001C5A0                            Obj09_DOWNsnd:
0001C5A0 303C 00A9                  		move.w	#$A9,d0
0001C5A4 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C5AA                            ; ===========================================================================
0001C5AA                            
0001C5AA                            Obj09_Rblock:
0001C5AA 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C5AE 6600                       		bne.s	Obj09_ChkGlass
0001C5B0 4A28 0037                  		tst.b	$37(a0)
0001C5B4 6600 0000                  		bne.w	Obj09_NoGlass
0001C5B8 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C5BE 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C5C2 6600                       		bne.s	Obj09_RevStage
0001C5C4 14BC 0004                  		move.b	#4,(a2)
0001C5C8 2028 0032                  		move.l	$32(a0),d0
0001C5CC 5380                       		subq.l	#1,d0
0001C5CE 2540 0004                  		move.l	d0,4(a2)
0001C5D2                            
0001C5D2                            Obj09_RevStage:
0001C5D2 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C5D6 303C 00A9                  		move.w	#$A9,d0
0001C5DA 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C5E0                            ; ===========================================================================
0001C5E0                            
0001C5E0                            Obj09_ChkGlass:
0001C5E0 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C5E4 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C5E6 0C00 002E                  		cmpi.b	#$2E,d0
0001C5EA 6700                       		beq.s	Obj09_Glass
0001C5EC 0C00 002F                  		cmpi.b	#$2F,d0
0001C5F0 6700                       		beq.s	Obj09_Glass
0001C5F2 0C00 0030                  		cmpi.b	#$30,d0
0001C5F6 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C5F8                            
0001C5F8                            Obj09_Glass:
0001C5F8 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C5FC 6600                       		bne.s	Obj09_GlassSnd
0001C5FE 14BC 0006                  		move.b	#6,(a2)
0001C602 2268 0032                  		movea.l	$32(a0),a1
0001C606 5389                       		subq.l	#1,a1
0001C608 2549 0004                  		move.l	a1,4(a2)
0001C60C 1011                       		move.b	(a1),d0
0001C60E 5200                       		addq.b	#1,d0		; change glass type when touched
0001C610 0C00 0030                  		cmpi.b	#$30,d0
0001C614 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C616 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C618                            
0001C618                            Obj09_GlassUpdate:
0001C618 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C61C                            
0001C61C                            Obj09_GlassSnd:
0001C61C 303C 00BA                  		move.w	#$BA,d0
0001C620 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C626                            ; ===========================================================================
0001C626                            
0001C626                            Obj09_NoGlass:
0001C626 4E75                       		rts	
0001C628                            ; End of function Obj09_ChkItems2
0001C628                            
0001C628                            ; ===========================================================================
0001C628                            ; ---------------------------------------------------------------------------
0001C628                            ; Object 10 - blank
0001C628                            ; ---------------------------------------------------------------------------
0001C628                            
0001C628                            Obj10:					; XREF: Obj_Index
0001C628 4E75                       		rts	
0001C62A                            ; ---------------------------------------------------------------------------
0001C62A                            ; Subroutine to	animate	level graphics
0001C62A                            ; ---------------------------------------------------------------------------
0001C62A                            
0001C62A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C62A                            
0001C62A                            
0001C62A                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C62A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C62E 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C630 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C636 6100 0000                  		bsr.w	AniArt_GiantRing
0001C63A 7000                       		moveq	#0,d0
0001C63C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C640 D040                       		add.w	d0,d0
0001C642 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C646 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C64A                            ; ===========================================================================
0001C64A                            
0001C64A                            AniArt_Pause:
0001C64A 4E75                       		rts	
0001C64C                            ; End of function AniArt_Load
0001C64C                            
0001C64C                            ; ===========================================================================
0001C64C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C650 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C654 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C658 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C65A                            ; ===========================================================================
0001C65A                            ; ---------------------------------------------------------------------------
0001C65A                            ; Animated pattern routine - Green Hill
0001C65A                            ; ---------------------------------------------------------------------------
0001C65A                            
0001C65A                            AniArt_GHZ:				; XREF: AniArt_Index
0001C65A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C65E 6A00                       		bpl.s	loc_1C08A
0001C660 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C666 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C66C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C670 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C674 0240 0001                  		andi.w	#1,d0
0001C678 6700                       		beq.s	loc_1C078
0001C67A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C67E                            
0001C67E                            loc_1C078:
0001C67E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C688 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C68C 6000 0000                  		bra.w	LoadTiles
0001C690                            ; ===========================================================================
0001C690                            
0001C690                            loc_1C08A:
0001C690 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C694 6A00                       		bpl.s	loc_1C0C0
0001C696 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C69C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C6A2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C6A6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C6AA 0240 0001                  		andi.w	#1,d0
0001C6AE 6700                       		beq.s	loc_1C0AE
0001C6B0 43E9 0200                  		lea	$200(a1),a1
0001C6B4                            
0001C6B4                            loc_1C0AE:
0001C6B4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C6BE 323C 000F                  		move.w	#$F,d1
0001C6C2 6000 0000                  		bra.w	LoadTiles
0001C6C6                            ; ===========================================================================
0001C6C6                            
0001C6C6                            loc_1C0C0:
0001C6C6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C6CA 6A00                       		bpl.s	locret_1C10C
0001C6CC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C6D2 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C6D6 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C6DA 0240 0003                  		andi.w	#3,d0
0001C6DE 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C6E2 0800 0000                  		btst	#0,d0
0001C6E6 6600                       		bne.s	loc_1C0E8
0001C6E8 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C6EE                            
0001C6EE                            loc_1C0E8:
0001C6EE EF48                       		lsl.w	#7,d0
0001C6F0 3200                       		move.w	d0,d1
0001C6F2 D040                       		add.w	d0,d0
0001C6F4 D041                       		add.w	d1,d0
0001C6F6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C700 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C706 43F1 0000                  		lea	(a1,d0.w),a1
0001C70A 323C 000B                  		move.w	#$B,d1
0001C70E 6100 0000                  		bsr.w	LoadTiles
0001C712                            
0001C712                            locret_1C10C:
0001C712 4E75                       		rts	
0001C714                            ; ===========================================================================
0001C714 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C718                            ; ===========================================================================
0001C718                            ; ---------------------------------------------------------------------------
0001C718                            ; Animated pattern routine - Marble
0001C718                            ; ---------------------------------------------------------------------------
0001C718                            
0001C718                            AniArt_MZ:				; XREF: AniArt_Index
0001C718 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C71C 6A00                       		bpl.s	loc_1C150
0001C71E 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C724 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C72A 7000                       		moveq	#0,d0
0001C72C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C730 5200                       		addq.b	#1,d0
0001C732 0C00 0003                  		cmpi.b	#3,d0
0001C736 6600                       		bne.s	loc_1C134
0001C738 7000                       		moveq	#0,d0
0001C73A                            
0001C73A                            loc_1C134:
0001C73A 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C73E C0FC 0100                  		mulu.w	#$100,d0
0001C742 D2C0                       		adda.w	d0,a1
0001C744 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C74E 323C 0007                  		move.w	#7,d1
0001C752 6100 0000                  		bsr.w	LoadTiles
0001C756                            
0001C756                            loc_1C150:
0001C756 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C75A 6A00                       		bpl.s	loc_1C1AE
0001C75C 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C762 7000                       		moveq	#0,d0
0001C764 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C768 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C76E EE58                       		ror.w	#7,d0
0001C770 D8C0                       		adda.w	d0,a4
0001C772 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C77C 7600                       		moveq	#0,d3
0001C77E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C782 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C786 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C78A 343C 0003                  		move.w	#3,d2
0001C78E                            
0001C78E                            loc_1C188:
0001C78E 3003                       		move.w	d3,d0
0001C790 D040                       		add.w	d0,d0
0001C792 0240 001E                  		andi.w	#$1E,d0
0001C796 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C79C 3033 0000                  		move.w	(a3,d0.w),d0
0001C7A0 47F3 0000                  		lea	(a3,d0.w),a3
0001C7A4 224C                       		movea.l	a4,a1
0001C7A6 323C 001F                  		move.w	#$1F,d1
0001C7AA 4E93                       		jsr	(a3)
0001C7AC 5843                       		addq.w	#4,d3
0001C7AE 51CA FFDE                  		dbf	d2,loc_1C188
0001C7B2 4E75                       		rts	
0001C7B4                            ; ===========================================================================
0001C7B4                            
0001C7B4                            loc_1C1AE:
0001C7B4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C7B8 6A00 0000                  		bpl.w	locret_1C1EA
0001C7BC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C7C2 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C7C8 7000                       		moveq	#0,d0
0001C7CA 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C7CE 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C7D2 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C7D8 C0FC 00C0                  		mulu.w	#$C0,d0
0001C7DC D2C0                       		adda.w	d0,a1
0001C7DE 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C7E8 323C 0005                  		move.w	#5,d1
0001C7EC 6000 0000                  		bra.w	LoadTiles
0001C7F0                            ; ===========================================================================
0001C7F0                            
0001C7F0                            locret_1C1EA:
0001C7F0 4E75                       		rts	
0001C7F2                            ; ===========================================================================
0001C7F2                            ; ---------------------------------------------------------------------------
0001C7F2                            ; Animated pattern routine - Scrap Brain
0001C7F2                            ; ---------------------------------------------------------------------------
0001C7F2                            
0001C7F2                            AniArt_SBZ:				; XREF: AniArt_Index
0001C7F2 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C7F6 6700                       		beq.s	loc_1C1F8
0001C7F8 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C7FC 6000                       		bra.s	loc_1C250
0001C7FE                            ; ===========================================================================
0001C7FE                            
0001C7FE                            loc_1C1F8:
0001C7FE 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C802 6A00                       		bpl.s	loc_1C250
0001C804 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C80A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C810 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C81A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C81E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C822 0240 0007                  		andi.w	#7,d0
0001C826 6700                       		beq.s	loc_1C234
0001C828 5340                       		subq.w	#1,d0
0001C82A C0FC 0180                  		mulu.w	#$180,d0
0001C82E 43F1 0000                  		lea	(a1,d0.w),a1
0001C832 323C 000B                  		move.w	#$B,d1
0001C836 6000 0000                  		bra.w	LoadTiles
0001C83A                            ; ===========================================================================
0001C83A                            
0001C83A                            loc_1C234:
0001C83A 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C840                            
0001C840                            loc_1C23A:
0001C840 323C 0005                  		move.w	#5,d1
0001C844 6100 0000                  		bsr.w	LoadTiles
0001C848 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C84E 323C 0005                  		move.w	#5,d1
0001C852 6000 0000                  		bra.w	LoadTiles
0001C856                            ; ===========================================================================
0001C856                            
0001C856                            loc_1C250:
0001C856 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C85A 6700                       		beq.s	loc_1C25C
0001C85C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C860 6000                       		bra.s	locret_1C2A0
0001C862                            ; ===========================================================================
0001C862                            
0001C862                            loc_1C25C:
0001C862 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C866 6A00                       		bpl.s	locret_1C2A0
0001C868 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C86E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C874 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C87E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C882 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C886 0240 0007                  		andi.w	#7,d0
0001C88A 6700                       		beq.s	loc_1C298
0001C88C 5340                       		subq.w	#1,d0
0001C88E C0FC 0180                  		mulu.w	#$180,d0
0001C892 43F1 0000                  		lea	(a1,d0.w),a1
0001C896 323C 000B                  		move.w	#$B,d1
0001C89A 6000 0000                  		bra.w	LoadTiles
0001C89E                            ; ===========================================================================
0001C89E                            
0001C89E                            loc_1C298:
0001C89E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C8A4 609A                       		bra.s	loc_1C23A
0001C8A6                            ; ===========================================================================
0001C8A6                            
0001C8A6                            locret_1C2A0:
0001C8A6 4E75                       		rts	
0001C8A8                            ; ===========================================================================
0001C8A8                            ; ---------------------------------------------------------------------------
0001C8A8                            ; Animated pattern routine - ending sequence
0001C8A8                            ; ---------------------------------------------------------------------------
0001C8A8                            
0001C8A8                            AniArt_Ending:				; XREF: AniArt_Index
0001C8A8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8AC 6A00                       		bpl.s	loc_1C2F4
0001C8AE 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C8B4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C8BA 45F8 9400                  		lea	($FFFF9400).w,a2
0001C8BE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C8C2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8C6 0240 0001                  		andi.w	#1,d0
0001C8CA 6700                       		beq.s	loc_1C2CE
0001C8CC 43E9 0200                  		lea	$200(a1),a1
0001C8D0 45EA 0200                  		lea	$200(a2),a2
0001C8D4                            
0001C8D4                            loc_1C2CE:
0001C8D4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C8DE 323C 000F                  		move.w	#$F,d1
0001C8E2 6100 0000                  		bsr.w	LoadTiles
0001C8E6 224A                       		movea.l	a2,a1
0001C8E8 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C8F2 323C 000F                  		move.w	#$F,d1
0001C8F6 6000 0000                  		bra.w	LoadTiles
0001C8FA                            ; ===========================================================================
0001C8FA                            
0001C8FA                            loc_1C2F4:
0001C8FA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C8FE 6A00                       		bpl.s	loc_1C33C
0001C900 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C906 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C90A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C90E 0240 0007                  		andi.w	#7,d0
0001C912 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C916 EF48                       		lsl.w	#7,d0
0001C918 3200                       		move.w	d0,d1
0001C91A D040                       		add.w	d0,d0
0001C91C D041                       		add.w	d1,d0
0001C91E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C928 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C92E 43F1 0000                  		lea	(a1,d0.w),a1
0001C932 323C 000B                  		move.w	#$B,d1
0001C936 6000 0000                  		bra.w	LoadTiles
0001C93A                            ; ===========================================================================
0001C93A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C942                            ; ===========================================================================
0001C942                            
0001C942                            loc_1C33C:
0001C942 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C946 6A00                       		bpl.s	loc_1C37A
0001C948 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C94E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C952 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C956 0240 0003                  		andi.w	#3,d0
0001C95A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C95E E148                       		lsl.w	#8,d0
0001C960 D040                       		add.w	d0,d0
0001C962 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C96C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C970 43F1 0000                  		lea	(a1,d0.w),a1
0001C974 323C 000F                  		move.w	#$F,d1
0001C978 6000 0000                  		bra.w	LoadTiles
0001C97C                            ; ===========================================================================
0001C97C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C980                            ; ===========================================================================
0001C980                            
0001C980                            loc_1C37A:
0001C980 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C984 6A00                       		bpl.s	locret_1C3B4
0001C986 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C98C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C990 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C994 0240 0003                  		andi.w	#3,d0
0001C998 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C99C E148                       		lsl.w	#8,d0
0001C99E D040                       		add.w	d0,d0
0001C9A0 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C9AA 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C9AE 43F1 0000                  		lea	(a1,d0.w),a1
0001C9B2 323C 000F                  		move.w	#$F,d1
0001C9B6 6000 0000                  		bra.w	LoadTiles
0001C9BA                            ; ===========================================================================
0001C9BA                            
0001C9BA                            locret_1C3B4:
0001C9BA 4E75                       		rts	
0001C9BC                            ; ===========================================================================
0001C9BC                            
0001C9BC                            AniArt_none:				; XREF: AniArt_Index
0001C9BC 4E75                       		rts	
0001C9BE                            
0001C9BE                            ; ---------------------------------------------------------------------------
0001C9BE                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C9BE                            ; ---------------------------------------------------------------------------
0001C9BE                            
0001C9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9BE                            
0001C9BE                            
0001C9BE                            LoadTiles:
0001C9BE 2C99                       		move.l	(a1)+,(a6)
0001C9C0 2C99                       		move.l	(a1)+,(a6)
0001C9C2 2C99                       		move.l	(a1)+,(a6)
0001C9C4 2C99                       		move.l	(a1)+,(a6)
0001C9C6 2C99                       		move.l	(a1)+,(a6)
0001C9C8 2C99                       		move.l	(a1)+,(a6)
0001C9CA 2C99                       		move.l	(a1)+,(a6)
0001C9CC 2C99                       		move.l	(a1)+,(a6)
0001C9CE 51C9 FFEE                  		dbf	d1,LoadTiles
0001C9D2 4E75                       		rts	
0001C9D4                            ; End of function LoadTiles
0001C9D4                            
0001C9D4                            ; ===========================================================================
0001C9D4                            ; ---------------------------------------------------------------------------
0001C9D4                            ; Animated pattern routine - more Marble Zone
0001C9D4                            ; ---------------------------------------------------------------------------
0001C9D4 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C9D8 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C9DC 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C9E0 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C9E4 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C9E8 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C9EC 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C9F0 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C9F4                            ; ===========================================================================
0001C9F4                            
0001C9F4                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C9F4 2C91                       		move.l	(a1),(a6)
0001C9F6 43E9 0010                  		lea	$10(a1),a1
0001C9FA 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C9FE 4E75                       		rts	
0001CA00                            ; ===========================================================================
0001CA00                            
0001CA00                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CA00 2029 0002                  		move.l	2(a1),d0
0001CA04 1029 0001                  		move.b	1(a1),d0
0001CA08 E098                       		ror.l	#8,d0
0001CA0A 2C80                       		move.l	d0,(a6)
0001CA0C 43E9 0010                  		lea	$10(a1),a1
0001CA10 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CA14 4E75                       		rts	
0001CA16                            ; ===========================================================================
0001CA16                            
0001CA16                            loc_1C410:				; XREF: AniArt_MZextra
0001CA16 2CA9 0002                  		move.l	2(a1),(a6)
0001CA1A 43E9 0010                  		lea	$10(a1),a1
0001CA1E 51C9 FFF6                  		dbf	d1,loc_1C410
0001CA22 4E75                       		rts	
0001CA24                            ; ===========================================================================
0001CA24                            
0001CA24                            loc_1C41E:				; XREF: AniArt_MZextra
0001CA24 2029 0004                  		move.l	4(a1),d0
0001CA28 1029 0003                  		move.b	3(a1),d0
0001CA2C E098                       		ror.l	#8,d0
0001CA2E 2C80                       		move.l	d0,(a6)
0001CA30 43E9 0010                  		lea	$10(a1),a1
0001CA34 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CA38 4E75                       		rts	
0001CA3A                            ; ===========================================================================
0001CA3A                            
0001CA3A                            loc_1C434:				; XREF: AniArt_MZextra
0001CA3A 2CA9 0004                  		move.l	4(a1),(a6)
0001CA3E 43E9 0010                  		lea	$10(a1),a1
0001CA42 51C9 FFF6                  		dbf	d1,loc_1C434
0001CA46 4E75                       		rts	
0001CA48                            ; ===========================================================================
0001CA48                            
0001CA48                            loc_1C442:				; XREF: AniArt_MZextra
0001CA48 2029 0006                  		move.l	6(a1),d0
0001CA4C 1029 0005                  		move.b	5(a1),d0
0001CA50 E098                       		ror.l	#8,d0
0001CA52 2C80                       		move.l	d0,(a6)
0001CA54 43E9 0010                  		lea	$10(a1),a1
0001CA58 51C9 FFEE                  		dbf	d1,loc_1C442
0001CA5C 4E75                       		rts	
0001CA5E                            ; ===========================================================================
0001CA5E                            
0001CA5E                            loc_1C458:				; XREF: AniArt_MZextra
0001CA5E 2CA9 0006                  		move.l	6(a1),(a6)
0001CA62 43E9 0010                  		lea	$10(a1),a1
0001CA66 51C9 FFF6                  		dbf	d1,loc_1C458
0001CA6A 4E75                       		rts	
0001CA6C                            ; ===========================================================================
0001CA6C                            
0001CA6C                            loc_1C466:				; XREF: AniArt_MZextra
0001CA6C 2029 0008                  		move.l	8(a1),d0
0001CA70 1029 0007                  		move.b	7(a1),d0
0001CA74 E098                       		ror.l	#8,d0
0001CA76 2C80                       		move.l	d0,(a6)
0001CA78 43E9 0010                  		lea	$10(a1),a1
0001CA7C 51C9 FFEE                  		dbf	d1,loc_1C466
0001CA80 4E75                       		rts	
0001CA82                            ; ===========================================================================
0001CA82                            
0001CA82                            loc_1C47C:				; XREF: AniArt_MZextra
0001CA82 2CA9 0008                  		move.l	8(a1),(a6)
0001CA86 43E9 0010                  		lea	$10(a1),a1
0001CA8A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CA8E 4E75                       		rts	
0001CA90                            ; ===========================================================================
0001CA90                            
0001CA90                            loc_1C48A:				; XREF: AniArt_MZextra
0001CA90 2029 000A                  		move.l	$A(a1),d0
0001CA94 1029 0009                  		move.b	9(a1),d0
0001CA98 E098                       		ror.l	#8,d0
0001CA9A 2C80                       		move.l	d0,(a6)
0001CA9C 43E9 0010                  		lea	$10(a1),a1
0001CAA0 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CAA4 4E75                       		rts	
0001CAA6                            ; ===========================================================================
0001CAA6                            
0001CAA6                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CAA6 2CA9 000A                  		move.l	$A(a1),(a6)
0001CAAA 43E9 0010                  		lea	$10(a1),a1
0001CAAE 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CAB2 4E75                       		rts	
0001CAB4                            ; ===========================================================================
0001CAB4                            
0001CAB4                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CAB4 2029 000C                  		move.l	$C(a1),d0
0001CAB8 1029 000B                  		move.b	$B(a1),d0
0001CABC E098                       		ror.l	#8,d0
0001CABE 2C80                       		move.l	d0,(a6)
0001CAC0 43E9 0010                  		lea	$10(a1),a1
0001CAC4 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CAC8 4E75                       		rts	
0001CACA                            ; ===========================================================================
0001CACA                            
0001CACA                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CACA 2CA9 000C                  		move.l	$C(a1),(a6)
0001CACE 43E9 0010                  		lea	$10(a1),a1
0001CAD2 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CAD6 4E75                       		rts	
0001CAD8                            ; ===========================================================================
0001CAD8                            
0001CAD8                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CAD8 2029 000C                  		move.l	$C(a1),d0
0001CADC E198                       		rol.l	#8,d0
0001CADE 1011                       		move.b	0(a1),d0
0001CAE0 2C80                       		move.l	d0,(a6)
0001CAE2 43E9 0010                  		lea	$10(a1),a1
0001CAE6 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CAEA 4E75                       		rts	
0001CAEC                            ; ===========================================================================
0001CAEC                            
0001CAEC                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CAEC 3CA9 000E                  		move.w	$E(a1),(a6)
0001CAF0 3C91                       		move.w	0(a1),(a6)
0001CAF2 43E9 0010                  		lea	$10(a1),a1
0001CAF6 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CAFA 4E75                       		rts	
0001CAFC                            ; ===========================================================================
0001CAFC                            
0001CAFC                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CAFC 2011                       		move.l	0(a1),d0
0001CAFE 1029 000F                  		move.b	$F(a1),d0
0001CB02 E098                       		ror.l	#8,d0
0001CB04 2C80                       		move.l	d0,(a6)
0001CB06 43E9 0010                  		lea	$10(a1),a1
0001CB0A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CB0E 4E75                       		rts	
0001CB10                            
0001CB10                            ; ---------------------------------------------------------------------------
0001CB10                            ; Animated pattern routine - giant ring
0001CB10                            ; ---------------------------------------------------------------------------
0001CB10                            
0001CB10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB10                            
0001CB10                            
0001CB10                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CB10 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CB14 6600                       		bne.s	loc_1C518
0001CB16 4E75                       		rts	
0001CB18                            ; ===========================================================================
0001CB18                            
0001CB18                            loc_1C518:
0001CB18 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CB1E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CB24 7000                       		moveq	#0,d0
0001CB26 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CB2A 43F1 0000                  		lea	(a1,d0.w),a1
0001CB2E 0640 8000                  		addi.w	#$8000,d0
0001CB32 E588                       		lsl.l	#2,d0
0001CB34 E448                       		lsr.w	#2,d0
0001CB36 0040 4000                  		ori.w	#$4000,d0
0001CB3A 4840                       		swap	d0
0001CB3C 2D40 0004                  		move.l	d0,4(a6)
0001CB40 323C 000D                  		move.w	#$D,d1
0001CB44 6000 FE78                  		bra.w	LoadTiles
0001CB48                            ; End of function AniArt_GiantRing
0001CB48                            
0001CB48                            ; ===========================================================================
0001CB48                            ; ---------------------------------------------------------------------------
0001CB48                            ; Object 21 - SCORE, TIME, RINGS
0001CB48                            ; ---------------------------------------------------------------------------
0001CB48                            
0001CB48                            Obj21:					; XREF: Obj_Index
0001CB48 7000                       		moveq	#0,d0
0001CB4A 1028 0024                  		move.b	$24(a0),d0
0001CB4E 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CB52 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CB56                            ; ===========================================================================
0001CB56 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CB58 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CB5A                            ; ===========================================================================
0001CB5A                            
0001CB5A                            Obj21_Main:				; XREF: Obj21_Main
0001CB5A 5428 0024                  		addq.b	#2,$24(a0)
0001CB5E 317C 0090 0008             		move.w	#$90,8(a0)
0001CB64 317C 0108 000A             		move.w	#$108,$A(a0)
0001CB6A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CB72 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CB78 117C 0000 0001             		move.b	#0,1(a0)
0001CB7E 117C 0000 0018             		move.b	#0,$18(a0)
0001CB84                            
0001CB84                            Obj21_Flash:				; XREF: Obj21_Main
0001CB84 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CB88 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CB8A 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CB8E 4EF9 0000 DBA8             		jmp	DisplaySprite
0001CB94                            ; ===========================================================================
0001CB94                            
0001CB94                            Obj21_Flash2:
0001CB94 7000                       		moveq	#0,d0
0001CB96 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CB9C 6600                       		bne.s	Obj21_Display
0001CB9E 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CBA0 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CBA6 6600                       		bne.s	Obj21_Display	; if not, branch
0001CBA8 5440                       		addq.w	#2,d0		; make time counter flash red
0001CBAA                            
0001CBAA                            Obj21_Display:
0001CBAA 1140 001A                  		move.b	d0,$1A(a0)
0001CBAE 4EF9 0000 DBA8             		jmp	DisplaySprite
0001CBB4                            ; ===========================================================================
0001CBB4                            ; ---------------------------------------------------------------------------
0001CBB4                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBB4                            ; ---------------------------------------------------------------------------
0001CBB4                            Map_obj21:
0001CBB4                            	include "_maps\obj21.asm"
0001CBB4                            ; ---------------------------------------------------------------------------
0001CBB4                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBB4                            ; ---------------------------------------------------------------------------
0001CBB4 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CBB8 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CBBC 0A                         byte_1C5BC:	dc.b $A
0001CBBD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBC2 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBC7 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBCC 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBD1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBD6 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CBDB A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CBE0 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CBE5 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CBEA 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CBEF 00                         		dc.b 0
0001CBF0 0A                         byte_1C5F0:	dc.b $A
0001CBF1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBF6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBFB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC00 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CC05 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC0A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC0F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC14 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC19 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC1E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC23 00                         		dc.b 0
0001CC24 0A                         byte_1C624:	dc.b $A
0001CC25 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC2A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC2F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC34 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC39 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC3E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CC43 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CC48 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC4D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC52 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC57 00                         		dc.b 0
0001CC58 0A                         byte_1C658:	dc.b $A
0001CC59 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC5E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC63 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC68 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC6D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC72 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC77 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC7C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC81 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC86 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC8C 00                         		even
0001CC8C 00                         		even
0001CC8C                            
0001CC8C                            ; ---------------------------------------------------------------------------
0001CC8C                            ; Add points subroutine
0001CC8C                            ; ---------------------------------------------------------------------------
0001CC8C                            
0001CC8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC8C                            
0001CC8C                            
0001CC8C                            AddPoints:
0001CC8C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CC92 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CC96 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CC9A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CC9C 223C 000F 423F             		move.l	#999999,d1
0001CCA2 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CCA4 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CCA8 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CCAA 2481                       		move.l	d1,(a2)
0001CCAC                            
0001CCAC                            loc_1C6AC:
0001CCAC 2013                       		move.l	(a3),d0
0001CCAE B092                       		cmp.l	(a2),d0
0001CCB0 6500 0000                  		bcs.w	locret_1C6B6
0001CCB4 2480                       		move.l	d0,(a2)
0001CCB6                            
0001CCB6                            locret_1C6B6:
0001CCB6 4E75                       		rts	
0001CCB8                            ; End of function AddPoints
0001CCB8                            
0001CCB8                            ; ---------------------------------------------------------------------------
0001CCB8                            ; Subroutine to	update the HUD
0001CCB8                            ; ---------------------------------------------------------------------------
0001CCB8                            
0001CCB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCB8                            
0001CCB8                            
0001CCB8                            HudUpdate:
0001CCB8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CCBC 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CCC0 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CCC4 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CCC6 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CCCA 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CCD0 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CCD4 6100 0000                  		bsr.w	Hud_Score
0001CCD8                            
0001CCD8                            Hud_ChkRings:
0001CCD8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CCDC 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CCDE 6A00                       		bpl.s	loc_1C6E4
0001CCE0 6100 0000                  		bsr.w	Hud_LoadZero
0001CCE4                            
0001CCE4                            loc_1C6E4:
0001CCE4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CCE8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CCEE 7200                       		moveq	#0,d1
0001CCF0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CCF4 6100 0000                  		bsr.w	Hud_Rings
0001CCF8                            
0001CCF8                            Hud_ChkTime:
0001CCF8 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CCFC 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CCFE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CD02 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CD04 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CD08 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CD0E 6700                       		beq.s	TimeOver	; if yes, branch
0001CD10 5221                       		addq.b	#1,-(a1)
0001CD12 0C11 003C                  		cmpi.b	#60,(a1)
0001CD16 6500                       		bcs.s	Hud_ChkLives
0001CD18 12BC 0000                  		move.b	#0,(a1)
0001CD1C 5221                       		addq.b	#1,-(a1)
0001CD1E 0C11 003C                  		cmpi.b	#60,(a1)
0001CD22 6500                       		bcs.s	loc_1C734
0001CD24 12BC 0000                  		move.b	#0,(a1)
0001CD28 5221                       		addq.b	#1,-(a1)
0001CD2A 0C11 0009                  		cmpi.b	#9,(a1)
0001CD2E 6500                       		bcs.s	loc_1C734
0001CD30 12BC 0009                  		move.b	#9,(a1)
0001CD34                            
0001CD34                            loc_1C734:
0001CD34 203C 5E40 0003             		move.l	#$5E400003,d0
0001CD3A 7200                       		moveq	#0,d1
0001CD3C 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CD40 6100 0000                  		bsr.w	Hud_Mins
0001CD44 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CD4A 7200                       		moveq	#0,d1
0001CD4C 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CD50 6100 0000                  		bsr.w	Hud_Secs
0001CD54                            
0001CD54                            Hud_ChkLives:
0001CD54 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CD58 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CD5A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CD5E 6100 0000                  		bsr.w	Hud_Lives
0001CD62                            
0001CD62                            Hud_ChkBonus:
0001CD62 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CD66 6700                       		beq.s	Hud_End		; if not, branch
0001CD68 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CD6C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CD76 7200                       		moveq	#0,d1
0001CD78 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CD7C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD80 7200                       		moveq	#0,d1
0001CD82 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CD86 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD8A                            
0001CD8A                            Hud_End:
0001CD8A 4E75                       		rts	
0001CD8C                            ; ===========================================================================
0001CD8C                            
0001CD8C                            TimeOver:				; XREF: Hud_ChkTime
0001CD8C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CD90 41F8 D000                  		lea	($FFFFD000).w,a0
0001CD94 2448                       		movea.l	a0,a2
0001CD96 6100 E908                  		bsr.w	KillSonic
0001CD9A 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CDA0 4E75                       		rts	
0001CDA2                            ; ===========================================================================
0001CDA2                            
0001CDA2                            HudDebug:				; XREF: HudUpdate
0001CDA2 6100 0000                  		bsr.w	HudDb_XY
0001CDA6 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CDAA 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CDAC 6A00                       		bpl.s	HudDb_Rings
0001CDAE 6100 0000                  		bsr.w	Hud_LoadZero
0001CDB2                            
0001CDB2                            HudDb_Rings:
0001CDB2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CDB6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CDBC 7200                       		moveq	#0,d1
0001CDBE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CDC2 6100 0000                  		bsr.w	Hud_Rings
0001CDC6                            
0001CDC6                            HudDb_ObjCount:
0001CDC6 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CDCC 7200                       		moveq	#0,d1
0001CDCE 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CDD2 6100 0000                  		bsr.w	Hud_Secs
0001CDD6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CDDA 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CDDC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CDE0 6100 0000                  		bsr.w	Hud_Lives
0001CDE4                            
0001CDE4                            HudDb_ChkBonus:
0001CDE4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CDE8 6700                       		beq.s	HudDb_End	; if not, branch
0001CDEA 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CDEE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CDF8 7200                       		moveq	#0,d1
0001CDFA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CDFE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE02 7200                       		moveq	#0,d1
0001CE04 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CE08 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE0C                            
0001CE0C                            HudDb_End:
0001CE0C 4E75                       		rts	
0001CE0E                            ; End of function HudUpdate
0001CE0E                            
0001CE0E                            ; ---------------------------------------------------------------------------
0001CE0E                            ; Subroutine to	load "0" on the	HUD
0001CE0E                            ; ---------------------------------------------------------------------------
0001CE0E                            
0001CE0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE0E                            
0001CE0E                            
0001CE0E                            Hud_LoadZero:				; XREF: HudUpdate
0001CE0E 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CE18 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CE1C 343C 0002                  		move.w	#2,d2
0001CE20 6000                       		bra.s	loc_1C83E
0001CE22                            ; End of function Hud_LoadZero
0001CE22                            
0001CE22                            ; ---------------------------------------------------------------------------
0001CE22                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CE22                            ; ---------------------------------------------------------------------------
0001CE22                            
0001CE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE22                            
0001CE22                            
0001CE22                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CE22 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE28 6100 0000                  		bsr.w	Hud_Lives
0001CE2C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CE36 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CE3A 343C 000E                  		move.w	#$E,d2
0001CE3E                            
0001CE3E                            loc_1C83E:				; XREF: Hud_LoadZero
0001CE3E 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE42                            
0001CE42                            loc_1C842:
0001CE42 323C 000F                  		move.w	#$F,d1
0001CE46 101A                       		move.b	(a2)+,d0
0001CE48 6B00                       		bmi.s	loc_1C85E
0001CE4A 4880                       		ext.w	d0
0001CE4C EB48                       		lsl.w	#5,d0
0001CE4E 47F1 0000                  		lea	(a1,d0.w),a3
0001CE52                            
0001CE52                            loc_1C852:
0001CE52 2C9B                       		move.l	(a3)+,(a6)
0001CE54 51C9 FFFC                  		dbf	d1,loc_1C852
0001CE58                            
0001CE58                            loc_1C858:
0001CE58 51CA FFE8                  		dbf	d2,loc_1C842
0001CE5C                            
0001CE5C 4E75                       		rts	
0001CE5E                            ; ===========================================================================
0001CE5E                            
0001CE5E                            loc_1C85E:
0001CE5E 2CBC 0000 0000             		move.l	#0,(a6)
0001CE64 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CE68                            
0001CE68 60EE                       		bra.s	loc_1C858
0001CE6A                            ; End of function Hud_Base
0001CE6A                            
0001CE6A                            ; ===========================================================================
0001CE6A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CE76 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CE7A                            ; ---------------------------------------------------------------------------
0001CE7A                            ; Subroutine to	load debug mode	numbers	patterns
0001CE7A                            ; ---------------------------------------------------------------------------
0001CE7A                            
0001CE7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE7A                            
0001CE7A                            
0001CE7A                            HudDb_XY:				; XREF: HudDebug
0001CE7A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CE84 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CE88 4841                       		swap	d1
0001CE8A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CE8E 6100                       		bsr.s	HudDb_XY2
0001CE90 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CE94 4841                       		swap	d1
0001CE96 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CE9A                            ; End of function HudDb_XY
0001CE9A                            
0001CE9A                            
0001CE9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE9A                            
0001CE9A                            
0001CE9A                            HudDb_XY2:
0001CE9A 7C07                       		moveq	#7,d6
0001CE9C 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CEA2                            
0001CEA2                            HudDb_XYLoop:
0001CEA2 E959                       		rol.w	#4,d1
0001CEA4 3401                       		move.w	d1,d2
0001CEA6 0242 000F                  		andi.w	#$F,d2
0001CEAA 0C42 000A                  		cmpi.w	#$A,d2
0001CEAE 6500                       		bcs.s	loc_1C8B2
0001CEB0 5E42                       		addq.w	#7,d2
0001CEB2                            
0001CEB2                            loc_1C8B2:
0001CEB2 EB4A                       		lsl.w	#5,d2
0001CEB4 47F1 2000                  		lea	(a1,d2.w),a3
0001CEB8 2C9B                       		move.l	(a3)+,(a6)
0001CEBA 2C9B                       		move.l	(a3)+,(a6)
0001CEBC 2C9B                       		move.l	(a3)+,(a6)
0001CEBE 2C9B                       		move.l	(a3)+,(a6)
0001CEC0 2C9B                       		move.l	(a3)+,(a6)
0001CEC2 2C9B                       		move.l	(a3)+,(a6)
0001CEC4 2C9B                       		move.l	(a3)+,(a6)
0001CEC6 2C9B                       		move.l	(a3)+,(a6)
0001CEC8 4841                       		swap	d1
0001CECA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CECE                            
0001CECE 4E75                       		rts	
0001CED0                            ; End of function HudDb_XY2
0001CED0                            
0001CED0                            ; ---------------------------------------------------------------------------
0001CED0                            ; Subroutine to	load rings numbers patterns
0001CED0                            ; ---------------------------------------------------------------------------
0001CED0                            
0001CED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CED0                            
0001CED0                            
0001CED0                            Hud_Rings:				; XREF: HudUpdate
0001CED0 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CED6 7C02                       		moveq	#2,d6
0001CED8 6000                       		bra.s	Hud_LoadArt
0001CEDA                            ; End of function Hud_Rings
0001CEDA                            
0001CEDA                            ; ---------------------------------------------------------------------------
0001CEDA                            ; Subroutine to	load score numbers patterns
0001CEDA                            ; ---------------------------------------------------------------------------
0001CEDA                            
0001CEDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEDA                            
0001CEDA                            
0001CEDA                            Hud_Score:				; XREF: HudUpdate
0001CEDA 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CEE0 7C05                       		moveq	#5,d6
0001CEE2                            
0001CEE2                            Hud_LoadArt:
0001CEE2 7800                       		moveq	#0,d4
0001CEE4 43FA 0000                  		lea	Art_Hud(pc),a1
0001CEE8                            
0001CEE8                            Hud_ScoreLoop:
0001CEE8 7400                       		moveq	#0,d2
0001CEEA 261A                       		move.l	(a2)+,d3
0001CEEC                            
0001CEEC                            loc_1C8EC:
0001CEEC 9283                       		sub.l	d3,d1
0001CEEE 6500                       		bcs.s	loc_1C8F4
0001CEF0 5242                       		addq.w	#1,d2
0001CEF2 60F8                       		bra.s	loc_1C8EC
0001CEF4                            ; ===========================================================================
0001CEF4                            
0001CEF4                            loc_1C8F4:
0001CEF4 D283                       		add.l	d3,d1
0001CEF6 4A42                       		tst.w	d2
0001CEF8 6700                       		beq.s	loc_1C8FE
0001CEFA 383C 0001                  		move.w	#1,d4
0001CEFE                            
0001CEFE                            loc_1C8FE:
0001CEFE 4A44                       		tst.w	d4
0001CF00 6700                       		beq.s	loc_1C92C
0001CF02 ED4A                       		lsl.w	#6,d2
0001CF04 2D40 0004                  		move.l	d0,4(a6)
0001CF08 47F1 2000                  		lea	(a1,d2.w),a3
0001CF0C 2C9B                       		move.l	(a3)+,(a6)
0001CF0E 2C9B                       		move.l	(a3)+,(a6)
0001CF10 2C9B                       		move.l	(a3)+,(a6)
0001CF12 2C9B                       		move.l	(a3)+,(a6)
0001CF14 2C9B                       		move.l	(a3)+,(a6)
0001CF16 2C9B                       		move.l	(a3)+,(a6)
0001CF18 2C9B                       		move.l	(a3)+,(a6)
0001CF1A 2C9B                       		move.l	(a3)+,(a6)
0001CF1C 2C9B                       		move.l	(a3)+,(a6)
0001CF1E 2C9B                       		move.l	(a3)+,(a6)
0001CF20 2C9B                       		move.l	(a3)+,(a6)
0001CF22 2C9B                       		move.l	(a3)+,(a6)
0001CF24 2C9B                       		move.l	(a3)+,(a6)
0001CF26 2C9B                       		move.l	(a3)+,(a6)
0001CF28 2C9B                       		move.l	(a3)+,(a6)
0001CF2A 2C9B                       		move.l	(a3)+,(a6)
0001CF2C                            
0001CF2C                            loc_1C92C:
0001CF2C 0680 0040 0000             		addi.l	#$400000,d0
0001CF32 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CF36                            
0001CF36 4E75                       		rts	
0001CF38                            ; End of function Hud_Score
0001CF38                            
0001CF38                            ; ---------------------------------------------------------------------------
0001CF38                            ; Subroutine to	load countdown numbers on the continue screen
0001CF38                            ; ---------------------------------------------------------------------------
0001CF38                            
0001CF38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF38                            
0001CF38                            
0001CF38                            ContScrCounter:				; XREF: ContinueScreen
0001CF38 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CF42 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF48 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CF4E 7C01                       		moveq	#1,d6
0001CF50 7800                       		moveq	#0,d4
0001CF52 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CF56                            
0001CF56                            ContScr_Loop:
0001CF56 7400                       		moveq	#0,d2
0001CF58 261A                       		move.l	(a2)+,d3
0001CF5A                            
0001CF5A                            loc_1C95A:
0001CF5A 9283                       		sub.l	d3,d1
0001CF5C 6500                       		bcs.s	loc_1C962
0001CF5E 5242                       		addq.w	#1,d2
0001CF60 60F8                       		bra.s	loc_1C95A
0001CF62                            ; ===========================================================================
0001CF62                            
0001CF62                            loc_1C962:
0001CF62 D283                       		add.l	d3,d1
0001CF64 ED4A                       		lsl.w	#6,d2
0001CF66 47F1 2000                  		lea	(a1,d2.w),a3
0001CF6A 2C9B                       		move.l	(a3)+,(a6)
0001CF6C 2C9B                       		move.l	(a3)+,(a6)
0001CF6E 2C9B                       		move.l	(a3)+,(a6)
0001CF70 2C9B                       		move.l	(a3)+,(a6)
0001CF72 2C9B                       		move.l	(a3)+,(a6)
0001CF74 2C9B                       		move.l	(a3)+,(a6)
0001CF76 2C9B                       		move.l	(a3)+,(a6)
0001CF78 2C9B                       		move.l	(a3)+,(a6)
0001CF7A 2C9B                       		move.l	(a3)+,(a6)
0001CF7C 2C9B                       		move.l	(a3)+,(a6)
0001CF7E 2C9B                       		move.l	(a3)+,(a6)
0001CF80 2C9B                       		move.l	(a3)+,(a6)
0001CF82 2C9B                       		move.l	(a3)+,(a6)
0001CF84 2C9B                       		move.l	(a3)+,(a6)
0001CF86 2C9B                       		move.l	(a3)+,(a6)
0001CF88 2C9B                       		move.l	(a3)+,(a6)
0001CF8A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CF8E                            
0001CF8E 4E75                       		rts	
0001CF90                            ; End of function ContScrCounter
0001CF90                            
0001CF90                            ; ===========================================================================
0001CF90                            ; ---------------------------------------------------------------------------
0001CF90                            ; HUD counter sizes
0001CF90                            ; ---------------------------------------------------------------------------
0001CF90 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CF94 0000 2710                  Hud_10000:	dc.l 10000
0001CF98 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CF9C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CFA0 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CFA4 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CFA8                            
0001CFA8                            ; ---------------------------------------------------------------------------
0001CFA8                            ; Subroutine to	load time numbers patterns
0001CFA8                            ; ---------------------------------------------------------------------------
0001CFA8                            
0001CFA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFA8                            
0001CFA8                            
0001CFA8                            Hud_Mins:				; XREF: Hud_ChkTime
0001CFA8 45F9 0001 CFA4             		lea	(Hud_1).l,a2
0001CFAE 7C00                       		moveq	#0,d6
0001CFB0 6000                       		bra.s	loc_1C9BA
0001CFB2                            ; End of function Hud_Mins
0001CFB2                            
0001CFB2                            
0001CFB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFB2                            
0001CFB2                            
0001CFB2                            Hud_Secs:				; XREF: Hud_ChkTime
0001CFB2 45F9 0001 CFA0             		lea	(Hud_10).l,a2
0001CFB8 7C01                       		moveq	#1,d6
0001CFBA                            
0001CFBA                            loc_1C9BA:
0001CFBA 7800                       		moveq	#0,d4
0001CFBC 43FA 0000                  		lea	Art_Hud(pc),a1
0001CFC0                            
0001CFC0                            Hud_TimeLoop:
0001CFC0 7400                       		moveq	#0,d2
0001CFC2 261A                       		move.l	(a2)+,d3
0001CFC4                            
0001CFC4                            loc_1C9C4:
0001CFC4 9283                       		sub.l	d3,d1
0001CFC6 6500                       		bcs.s	loc_1C9CC
0001CFC8 5242                       		addq.w	#1,d2
0001CFCA 60F8                       		bra.s	loc_1C9C4
0001CFCC                            ; ===========================================================================
0001CFCC                            
0001CFCC                            loc_1C9CC:
0001CFCC D283                       		add.l	d3,d1
0001CFCE 4A42                       		tst.w	d2
0001CFD0 6700                       		beq.s	loc_1C9D6
0001CFD2 383C 0001                  		move.w	#1,d4
0001CFD6                            
0001CFD6                            loc_1C9D6:
0001CFD6 ED4A                       		lsl.w	#6,d2
0001CFD8 2D40 0004                  		move.l	d0,4(a6)
0001CFDC 47F1 2000                  		lea	(a1,d2.w),a3
0001CFE0 2C9B                       		move.l	(a3)+,(a6)
0001CFE2 2C9B                       		move.l	(a3)+,(a6)
0001CFE4 2C9B                       		move.l	(a3)+,(a6)
0001CFE6 2C9B                       		move.l	(a3)+,(a6)
0001CFE8 2C9B                       		move.l	(a3)+,(a6)
0001CFEA 2C9B                       		move.l	(a3)+,(a6)
0001CFEC 2C9B                       		move.l	(a3)+,(a6)
0001CFEE 2C9B                       		move.l	(a3)+,(a6)
0001CFF0 2C9B                       		move.l	(a3)+,(a6)
0001CFF2 2C9B                       		move.l	(a3)+,(a6)
0001CFF4 2C9B                       		move.l	(a3)+,(a6)
0001CFF6 2C9B                       		move.l	(a3)+,(a6)
0001CFF8 2C9B                       		move.l	(a3)+,(a6)
0001CFFA 2C9B                       		move.l	(a3)+,(a6)
0001CFFC 2C9B                       		move.l	(a3)+,(a6)
0001CFFE 2C9B                       		move.l	(a3)+,(a6)
0001D000 0680 0040 0000             		addi.l	#$400000,d0
0001D006 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D00A                            
0001D00A 4E75                       		rts	
0001D00C                            ; End of function Hud_Secs
0001D00C                            
0001D00C                            ; ---------------------------------------------------------------------------
0001D00C                            ; Subroutine to	load time/ring bonus numbers patterns
0001D00C                            ; ---------------------------------------------------------------------------
0001D00C                            
0001D00C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D00C                            
0001D00C                            
0001D00C                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D00C 45F9 0001 CF98             		lea	(Hud_1000).l,a2
0001D012 7C03                       		moveq	#3,d6
0001D014 7800                       		moveq	#0,d4
0001D016 43FA 0000                  		lea	Art_Hud(pc),a1
0001D01A                            
0001D01A                            Hud_BonusLoop:
0001D01A 7400                       		moveq	#0,d2
0001D01C 261A                       		move.l	(a2)+,d3
0001D01E                            
0001D01E                            loc_1CA1E:
0001D01E 9283                       		sub.l	d3,d1
0001D020 6500                       		bcs.s	loc_1CA26
0001D022 5242                       		addq.w	#1,d2
0001D024 60F8                       		bra.s	loc_1CA1E
0001D026                            ; ===========================================================================
0001D026                            
0001D026                            loc_1CA26:
0001D026 D283                       		add.l	d3,d1
0001D028 4A42                       		tst.w	d2
0001D02A 6700                       		beq.s	loc_1CA30
0001D02C 383C 0001                  		move.w	#1,d4
0001D030                            
0001D030                            loc_1CA30:
0001D030 4A44                       		tst.w	d4
0001D032 6700                       		beq.s	Hud_ClrBonus
0001D034 ED4A                       		lsl.w	#6,d2
0001D036 47F1 2000                  		lea	(a1,d2.w),a3
0001D03A 2C9B                       		move.l	(a3)+,(a6)
0001D03C 2C9B                       		move.l	(a3)+,(a6)
0001D03E 2C9B                       		move.l	(a3)+,(a6)
0001D040 2C9B                       		move.l	(a3)+,(a6)
0001D042 2C9B                       		move.l	(a3)+,(a6)
0001D044 2C9B                       		move.l	(a3)+,(a6)
0001D046 2C9B                       		move.l	(a3)+,(a6)
0001D048 2C9B                       		move.l	(a3)+,(a6)
0001D04A 2C9B                       		move.l	(a3)+,(a6)
0001D04C 2C9B                       		move.l	(a3)+,(a6)
0001D04E 2C9B                       		move.l	(a3)+,(a6)
0001D050 2C9B                       		move.l	(a3)+,(a6)
0001D052 2C9B                       		move.l	(a3)+,(a6)
0001D054 2C9B                       		move.l	(a3)+,(a6)
0001D056 2C9B                       		move.l	(a3)+,(a6)
0001D058 2C9B                       		move.l	(a3)+,(a6)
0001D05A                            
0001D05A                            loc_1CA5A:
0001D05A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D05E                            
0001D05E 4E75                       		rts	
0001D060                            ; ===========================================================================
0001D060                            
0001D060                            Hud_ClrBonus:
0001D060 7A0F                       		moveq	#$F,d5
0001D062                            
0001D062                            Hud_ClrBonusLoop:
0001D062 2CBC 0000 0000             		move.l	#0,(a6)
0001D068 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D06C                            
0001D06C 60EC                       		bra.s	loc_1CA5A
0001D06E                            ; End of function Hud_TimeRingBonus
0001D06E                            
0001D06E                            ; ---------------------------------------------------------------------------
0001D06E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D06E                            ; ---------------------------------------------------------------------------
0001D06E                            
0001D06E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D06E                            
0001D06E                            
0001D06E                            Hud_Lives:				; XREF: Hud_ChkLives
0001D06E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D074 7200                       		moveq	#0,d1
0001D076 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D07A 45F9 0001 CFA0             		lea	(Hud_10).l,a2
0001D080 7C01                       		moveq	#1,d6
0001D082 7800                       		moveq	#0,d4
0001D084 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D088                            
0001D088                            Hud_LivesLoop:
0001D088 2D40 0004                  		move.l	d0,4(a6)
0001D08C 7400                       		moveq	#0,d2
0001D08E 261A                       		move.l	(a2)+,d3
0001D090                            
0001D090                            loc_1CA90:
0001D090 9283                       		sub.l	d3,d1
0001D092 6500                       		bcs.s	loc_1CA98
0001D094 5242                       		addq.w	#1,d2
0001D096 60F8                       		bra.s	loc_1CA90
0001D098                            ; ===========================================================================
0001D098                            
0001D098                            loc_1CA98:
0001D098 D283                       		add.l	d3,d1
0001D09A 4A42                       		tst.w	d2
0001D09C 6700                       		beq.s	loc_1CAA2
0001D09E 383C 0001                  		move.w	#1,d4
0001D0A2                            
0001D0A2                            loc_1CAA2:
0001D0A2 4A44                       		tst.w	d4
0001D0A4 6700                       		beq.s	Hud_ClrLives
0001D0A6                            
0001D0A6                            loc_1CAA6:
0001D0A6 EB4A                       		lsl.w	#5,d2
0001D0A8 47F1 2000                  		lea	(a1,d2.w),a3
0001D0AC 2C9B                       		move.l	(a3)+,(a6)
0001D0AE 2C9B                       		move.l	(a3)+,(a6)
0001D0B0 2C9B                       		move.l	(a3)+,(a6)
0001D0B2 2C9B                       		move.l	(a3)+,(a6)
0001D0B4 2C9B                       		move.l	(a3)+,(a6)
0001D0B6 2C9B                       		move.l	(a3)+,(a6)
0001D0B8 2C9B                       		move.l	(a3)+,(a6)
0001D0BA 2C9B                       		move.l	(a3)+,(a6)
0001D0BC                            
0001D0BC                            loc_1CABC:
0001D0BC 0680 0040 0000             		addi.l	#$400000,d0
0001D0C2 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D0C6                            
0001D0C6 4E75                       		rts	
0001D0C8                            ; ===========================================================================
0001D0C8                            
0001D0C8                            Hud_ClrLives:
0001D0C8 4A46                       		tst.w	d6
0001D0CA 67DA                       		beq.s	loc_1CAA6
0001D0CC 7A07                       		moveq	#7,d5
0001D0CE                            
0001D0CE                            Hud_ClrLivesLoop:
0001D0CE 2CBC 0000 0000             		move.l	#0,(a6)
0001D0D4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D0D8 60E2                       		bra.s	loc_1CABC
0001D0DA                            ; End of function Hud_Lives
0001D0DA                            
0001D0DA                            ; ===========================================================================
0001D0DA                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D3DA                            		even
0001D3DA                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D51A                            		even
0001D51A                            ; ===========================================================================
0001D51A                            ; ---------------------------------------------------------------------------
0001D51A                            ; When debug mode is currently in use
0001D51A                            ; ---------------------------------------------------------------------------
0001D51A                            
0001D51A                            DebugMode:				; XREF: Obj01; Obj09
0001D51A 7000                       		moveq	#0,d0
0001D51C 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D520 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D524 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D528                            ; ===========================================================================
0001D528 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D52A 0000                       		dc.w Debug_Skip-Debug_Index
0001D52C                            ; ===========================================================================
0001D52C                            
0001D52C                            Debug_Main:				; XREF: Debug_Index
0001D52C 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D530 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D536 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D53C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D542 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D548 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D54E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D554 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D55A 117C 0000 001A             		move.b	#0,$1A(a0)
0001D560 117C 0000 001C             		move.b	#0,$1C(a0)
0001D566 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D56C 6600                       		bne.s	Debug_Zone	; if not, branch
0001D56E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D574 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D57A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D57C 6000                       		bra.s	Debug_UseList
0001D57E                            ; ===========================================================================
0001D57E                            
0001D57E                            Debug_Zone:
0001D57E 7000                       		moveq	#0,d0
0001D580 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D584                            
0001D584                            Debug_UseList:
0001D584 45F9 0000 0000             		lea	(DebugList).l,a2
0001D58A D040                       		add.w	d0,d0
0001D58C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D590 3C1A                       		move.w	(a2)+,d6
0001D592 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D596 6200                       		bhi.s	loc_1CF9E
0001D598 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D59E                            
0001D59E                            loc_1CF9E:
0001D59E 6100 0000                  		bsr.w	Debug_ShowItem
0001D5A2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5A8 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D5AE                            
0001D5AE                            Debug_Skip:				; XREF: Debug_Index
0001D5AE 7006                       		moveq	#6,d0
0001D5B0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D5B6 6700                       		beq.s	loc_1CFBE
0001D5B8 7000                       		moveq	#0,d0
0001D5BA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D5BE                            
0001D5BE                            loc_1CFBE:
0001D5BE 45F9 0000 0000             		lea	(DebugList).l,a2
0001D5C4 D040                       		add.w	d0,d0
0001D5C6 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5CA 3C1A                       		move.w	(a2)+,d6
0001D5CC 6100 0000                  		bsr.w	Debug_Control
0001D5D0 4EF9 0000 DBA8             		jmp	DisplaySprite
0001D5D6                            
0001D5D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5D6                            
0001D5D6                            
0001D5D6                            Debug_Control:
0001D5D6 7800                       		moveq	#0,d4
0001D5D8 323C 0001                  		move.w	#1,d1
0001D5DC 1838 F605                  		move.b	($FFFFF605).w,d4
0001D5E0 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D5E4 6600                       		bne.s	loc_1D018	; if yes, branch
0001D5E6 1038 F604                  		move.b	($FFFFF604).w,d0
0001D5EA 0240 000F                  		andi.w	#$F,d0
0001D5EE 6600                       		bne.s	loc_1D000
0001D5F0 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5F6 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D5FC 6000 0000                  		bra.w	Debug_BackItem
0001D600                            ; ===========================================================================
0001D600                            
0001D600                            loc_1D000:
0001D600 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D604 6600                       		bne.s	loc_1D01C
0001D606 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D60C 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D610 6600                       		bne.s	loc_1D018
0001D612 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D618                            
0001D618                            loc_1D018:
0001D618 1838 F604                  		move.b	($FFFFF604).w,d4
0001D61C                            
0001D61C                            loc_1D01C:
0001D61C 7200                       		moveq	#0,d1
0001D61E 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D622 5241                       		addq.w	#1,d1
0001D624 4841                       		swap	d1
0001D626 E881                       		asr.l	#4,d1
0001D628 2428 000C                  		move.l	$C(a0),d2
0001D62C 2628 0008                  		move.l	8(a0),d3
0001D630 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D634 6700                       		beq.s	loc_1D03C	; if not, branch
0001D636 9481                       		sub.l	d1,d2
0001D638 6400                       		bcc.s	loc_1D03C
0001D63A 7400                       		moveq	#0,d2
0001D63C                            
0001D63C                            loc_1D03C:
0001D63C 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D640 6700                       		beq.s	loc_1D052	; if not, branch
0001D642 D481                       		add.l	d1,d2
0001D644 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D64A 6500                       		bcs.s	loc_1D052
0001D64C 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D652                            
0001D652                            loc_1D052:
0001D652 0804 0002                  		btst	#2,d4
0001D656 6700                       		beq.s	loc_1D05E
0001D658 9681                       		sub.l	d1,d3
0001D65A 6400                       		bcc.s	loc_1D05E
0001D65C 7600                       		moveq	#0,d3
0001D65E                            
0001D65E                            loc_1D05E:
0001D65E 0804 0003                  		btst	#3,d4
0001D662 6700                       		beq.s	loc_1D066
0001D664 D681                       		add.l	d1,d3
0001D666                            
0001D666                            loc_1D066:
0001D666 2142 000C                  		move.l	d2,$C(a0)
0001D66A 2143 0008                  		move.l	d3,8(a0)
0001D66E                            
0001D66E                            Debug_BackItem:
0001D66E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D674 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D676 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D67C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D67E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D682 6400                       		bcc.s	Debug_NoLoop
0001D684 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D688 6000                       		bra.s	Debug_NoLoop
0001D68A                            ; ===========================================================================
0001D68A                            
0001D68A                            Debug_NextItem:
0001D68A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D690 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D692 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D696 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D69A 6200                       		bhi.s	Debug_NoLoop
0001D69C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D6A2                            
0001D6A2                            Debug_NoLoop:
0001D6A2 6000 0000                  		bra.w	Debug_ShowItem
0001D6A6                            ; ===========================================================================
0001D6A6                            
0001D6A6                            Debug_MakeItem:
0001D6A6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D6AC 6700                       		beq.s	Debug_Exit	; if not, branch
0001D6AE 4EB9 0000 E02E             		jsr	SingleObjLoad
0001D6B4 6600                       		bne.s	Debug_Exit
0001D6B6 3368 0008 0008             		move.w	8(a0),8(a1)
0001D6BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D6C2 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D6C6 1368 0001 0001             		move.b	1(a0),1(a1)
0001D6CC 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D6D2 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D6D8 7000                       		moveq	#0,d0
0001D6DA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D6DE E748                       		lsl.w	#3,d0
0001D6E0 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D6E6 4E75                       		rts	
0001D6E8                            ; ===========================================================================
0001D6E8                            
0001D6E8                            Debug_Exit:
0001D6E8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D6EE 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D6F0 7000                       		moveq	#0,d0
0001D6F2 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D6F6 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D6FE 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D704 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D708 3140 000A                  		move.w	d0,$A(a0)
0001D70C 3140 000E                  		move.w	d0,$E(a0)
0001D710 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D716 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D71C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D722 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D724 4278 F780                  		clr.w	($FFFFF780).w
0001D728 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D72E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D736 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D73C 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D742 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D748 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D74E                            
0001D74E                            Debug_DoNothing:
0001D74E 4E75                       		rts	
0001D750                            ; End of function Debug_Control
0001D750                            
0001D750                            
0001D750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D750                            
0001D750                            
0001D750                            Debug_ShowItem:				; XREF: Debug_Main
0001D750 7000                       		moveq	#0,d0
0001D752 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D756 E748                       		lsl.w	#3,d0
0001D758 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D75E 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D764 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D76A 4E75                       		rts	
0001D76C                            ; End of function Debug_ShowItem
0001D76C                            
0001D76C                            ; ===========================================================================
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C                            ; Debug	list pointers
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C                            DebugList:
0001D76C                            	include "_inc\Debug list pointers.asm"
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C                            ; Debug	list pointers
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C 0000                       	dc.w Debug_GHZ-DebugList
0001D76E 0000                       	dc.w Debug_LZ-DebugList
0001D770 0000                       	dc.w Debug_MZ-DebugList
0001D772 0000                       	dc.w Debug_SLZ-DebugList
0001D774 0000                       	dc.w Debug_SYZ-DebugList
0001D776 0000                       	dc.w Debug_SBZ-DebugList
0001D778 0000                       	dc.w Debug_Ending-DebugList
0001D778 0000                       	dc.w Debug_Ending-DebugList
0001D77A                            
0001D77A                            ; ---------------------------------------------------------------------------
0001D77A                            ; Debug	list - Green Hill
0001D77A                            ; ---------------------------------------------------------------------------
0001D77A                            Debug_GHZ:
0001D77A                            	include "_inc\Debug list - GHZ.asm"
0001D77A                            ; ---------------------------------------------------------------------------
0001D77A                            ; Debug	list - Green Hill
0001D77A                            ; ---------------------------------------------------------------------------
0001D77A 0010                       	dc.w $10			; number of items in list
0001D77C 2500 A3E0                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D780 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D784 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D788 0000 0680                  	dc.b 0,	0, 6, $80
0001D78C 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001D790 0000 0400                  	dc.b 0,	0, 4, 0
0001D794 2200 9E94                  	dc.l Map_obj22+$22000000
0001D798 0000 0444                  	dc.b 0,	0, 4, $44
0001D79C 2B00 B090                  	dc.l Map_obj2B+$2B000000
0001D7A0 0000 047B                  	dc.b 0,	0, 4, $7B
0001D7A4 3600 D590                  	dc.l Map_obj36+$36000000
0001D7A8 0000 051B                  	dc.b 0,	0, 5, $1B
0001D7AC 1800 8586                  	dc.l Map_obj18+$18000000
0001D7B0 0000 4000                  	dc.b 0,	0, $40,	0
0001D7B4 3B00 D6B6                  	dc.l Map_obj3B+$3B000000
0001D7B8 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D7BC 4000 FD42                  	dc.l Map_obj40+$40000000
0001D7C0 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D7C4 4100 E2BC                  	dc.l Map_obj41+$41000000
0001D7C8 0000 0523                  	dc.b 0,	0, 5, $23
0001D7CC 4200 E4E2                  	dc.l Map_obj42+$42000000
0001D7D0 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D7D4 4400 E7F0                  	dc.l Map_obj44+$44000000
0001D7D8 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D7DC 1900 85F4                  	dc.l Map_obj48+$19000000
0001D7E0 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D7E4 7901 76E2                  	dc.l Map_obj79+$79000000
0001D7E8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D7EC 4B00 A420                  	dc.l Map_obj4B+$4B000000
0001D7F0 0000 2400                  	dc.b 0,	0, $24,	0
0001D7F4 7D01 7832                  	dc.l Map_obj7D+$7D000000
0001D7F8 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D7FC                            	even
0001D7FC                            	even
0001D7FC                            
0001D7FC                            ; ---------------------------------------------------------------------------
0001D7FC                            ; Debug	list - Labyrinth
0001D7FC                            ; ---------------------------------------------------------------------------
0001D7FC                            Debug_LZ:
0001D7FC                            	include "_inc\Debug list - LZ.asm"
0001D7FC                            ; ---------------------------------------------------------------------------
0001D7FC                            ; Debug	list - Labyrinth
0001D7FC                            ; ---------------------------------------------------------------------------
0001D7FC 0019                       	dc.w $19
0001D7FE 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D802 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D806 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D80A 0000 0680                  	dc.b 0,	0, 6, $80
0001D80E 4100 E2BC                  	dc.l Map_obj41+$41000000
0001D812 0000 0523                  	dc.b 0,	0, 5, $23
0001D816 2C00 B136                  	dc.l Map_obj2C+$2C000000
0001D81A 0800 2486                  	dc.b 8,	0, $24,	$86
0001D81E 2D00 B32A                  	dc.l Map_obj2D+$2D000000
0001D822 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D826 1601 2516                  	dc.l Map_obj16+$16000000
0001D82A 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D82E 1601 2516                  	dc.l Map_obj16+$16000000
0001D832 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D836 3300 C7DC                  	dc.l Map_obj33+$33000000
0001D83A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D83E 3200 C39C                  	dc.l Map_obj32+$32000000
0001D842 0000 0513                  	dc.b 0,	0, 5, $13
0001D846 3600 D590                  	dc.l Map_obj36+$36000000
0001D84A 0000 051B                  	dc.b 0,	0, 5, $1B
0001D84E 5201 0638                  	dc.l Map_obj52a+$52000000
0001D852 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D856 6101 273E                  	dc.l Map_obj61+$61000000
0001D85A 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D85E 6101 273E                  	dc.l Map_obj61+$61000000
0001D862 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D866 6101 273E                  	dc.l Map_obj61+$61000000
0001D86A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D86E 6201 2892                  	dc.l Map_obj62+$62000000
0001D872 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D876 6101 273E                  	dc.l Map_obj61+$61000000
0001D87A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D87E 6101 273E                  	dc.l Map_obj61+$61000000
0001D882 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D886 6301 2BF4                  	dc.l Map_obj63+$63000000
0001D88A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D88E 6001 2460                  	dc.l Map_obj60+$60000000
0001D892 0000 0467                  	dc.b 0,	0, 4, $67
0001D896 6401 2F3A                  	dc.l Map_obj64+$64000000
0001D89A 8413 8348                  	dc.b $84, $13, $83, $48
0001D89E 6501 30C2                  	dc.l Map_obj65+$65000000
0001D8A2 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D8A6 6501 30C2                  	dc.l Map_obj65+$65000000
0001D8AA 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D8AE 0B01 18B0                  	dc.l Map_obj0B+$B000000
0001D8B2 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D8B6 0C01 1980                  	dc.l Map_obj0C+$C000000
0001D8BA 0200 4328                  	dc.b 2,	0, $43,	$28
0001D8BE 7901 76E2                  	dc.l Map_obj79+$79000000
0001D8C2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D8C6                            	even
0001D8C6                            	even
0001D8C6                            
0001D8C6                            ; ---------------------------------------------------------------------------
0001D8C6                            ; Debug	list - Marble
0001D8C6                            ; ---------------------------------------------------------------------------
0001D8C6                            Debug_MZ:
0001D8C6                            	include "_inc\Debug list - MZ.asm"
0001D8C6                            ; ---------------------------------------------------------------------------
0001D8C6                            ; Debug	list - Marble
0001D8C6                            ; ---------------------------------------------------------------------------
0001D8C6 0012                       	dc.w $12
0001D8C8 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D8CC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D8D0 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D8D4 0000 0680                  	dc.b 0,	0, 6, $80
0001D8D8 2200 9E94                  	dc.l Map_obj22+$22000000
0001D8DC 0000 0444                  	dc.b 0,	0, 4, $44
0001D8E0 3600 D590                  	dc.l Map_obj36+$36000000
0001D8E4 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8E8 4100 E2BC                  	dc.l Map_obj41+$41000000
0001D8EC 0000 0523                  	dc.b 0,	0, 5, $23
0001D8F0 1300 B86C                  	dc.l Map_obj14+$13000000
0001D8F4 0000 0345                  	dc.b 0,	0, 3, $45
0001D8F8 4600 EEA2                  	dc.l Map_obj46+$46000000
0001D8FC 0000 4000                  	dc.b 0,	0, $40,	0
0001D900 4C00 F7EE                  	dc.l Map_obj4C+$4C000000
0001D904 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D908 4E00 FAD2                  	dc.l Map_obj4E+$4E000000
0001D90C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D910 3300 C7DC                  	dc.l Map_obj33+$33000000
0001D914 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D918 5000 FED0                  	dc.l Map_obj50+$50000000
0001D91C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D920 5101 036C                  	dc.l Map_obj51+$51000000
0001D924 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D928 5201 05E2                  	dc.l Map_obj52+$52000000
0001D92C 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D930 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D934 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D938 5400 F7B4                  	dc.l Map_obj54+$54000000
0001D93C 0000 8680                  	dc.b 0,	0, $86,	$80
0001D940 5501 07D6                  	dc.l Map_obj55+$55000000
0001D944 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D948 7801 735C                  	dc.l Map_obj78+$78000000
0001D94C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D950 7901 76E2                  	dc.l Map_obj79+$79000000
0001D954 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D958                            	even
0001D958                            	even
0001D958                            
0001D958                            ; ---------------------------------------------------------------------------
0001D958                            ; Debug	list - Star Light
0001D958                            ; ---------------------------------------------------------------------------
0001D958                            Debug_SLZ:
0001D958                            	include "_inc\Debug list - SLZ.asm"
0001D958                            ; ---------------------------------------------------------------------------
0001D958                            ; Debug	list - Star Light
0001D958                            ; ---------------------------------------------------------------------------
0001D958 000F                       	dc.w $F
0001D95A 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D95E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D962 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D966 0000 0680                  	dc.b 0,	0, 6, $80
0001D96A 5901 12D8                  	dc.l Map_obj59+$59000000
0001D96E 0000 4000                  	dc.b 0,	0, $40,	0
0001D972 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D976 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D97A 1800 85E4                  	dc.l Map_obj18b+$18000000
0001D97E 0000 4000                  	dc.b 0,	0, $40,	0
0001D982 5A01 1412                  	dc.l Map_obj5A+$5A000000
0001D986 0000 4000                  	dc.b 0,	0, $40,	0
0001D98A 5B01 15CA                  	dc.l Map_obj5B+$5B000000
0001D98E 0000 4000                  	dc.b 0,	0, $40,	0
0001D992 5D01 1B9A                  	dc.l Map_obj5D+$5D000000
0001D996 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D99A 5E01 1F2C                  	dc.l Map_obj5E+$5E000000
0001D99E 0000 0374                  	dc.b 0,	0, 3, $74
0001D9A2 4100 E2BC                  	dc.l Map_obj41+$41000000
0001D9A6 0000 0523                  	dc.b 0,	0, 5, $23
0001D9AA 1300 B86C                  	dc.l Map_obj14+$13000000
0001D9AE 0000 0480                  	dc.b 0,	0, 4, $80
0001D9B2 1C00 8C9C                  	dc.l Map_obj1C+$1C000000
0001D9B6 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D9BA 5F01 21AA                  	dc.l Map_obj5F+$5F000000
0001D9BE 0000 0400                  	dc.b 0,	0, 4, 0
0001D9C2 6001 2460                  	dc.l Map_obj60+$60000000
0001D9C6 0000 2429                  	dc.b 0,	0, $24,	$29
0001D9CA 7901 76E2                  	dc.l Map_obj79+$79000000
0001D9CE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9D2                            	even
0001D9D2                            	even
0001D9D2                            
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2                            ; Debug	list - Spring Yard
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2                            Debug_SYZ:
0001D9D2                            	include "_inc\Debug list - SYZ.asm"
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2                            ; Debug	list - Spring Yard
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2 000F                       	dc.w $F
0001D9D4 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D9D8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9DC 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D9E0 0000 0680                  	dc.b 0,	0, 6, $80
0001D9E4 3600 D590                  	dc.l Map_obj36+$36000000
0001D9E8 0000 051B                  	dc.b 0,	0, 5, $1B
0001D9EC 4100 E2BC                  	dc.l Map_obj41+$41000000
0001D9F0 0000 0523                  	dc.b 0,	0, 5, $23
0001D9F4 4300 E742                  	dc.l Map_obj43+$43000000
0001D9F8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D9FC 1200 EF20                  	dc.l Map_obj12+$12000000
0001DA00 0000 0000                  	dc.b 0,	0, 0, 0
0001DA04 4700 F09C                  	dc.l Map_obj47+$47000000
0001DA08 0000 0380                  	dc.b 0,	0, 3, $80
0001DA0C 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001DA10 0000 0400                  	dc.b 0,	0, 4, 0
0001DA14 2200 9E94                  	dc.l Map_obj22+$22000000
0001DA18 0000 0444                  	dc.b 0,	0, 4, $44
0001DA1C 5000 FED0                  	dc.l Map_obj50+$50000000
0001DA20 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA24 1800 85D2                  	dc.l Map_obj18a+$18000000
0001DA28 0000 4000                  	dc.b 0,	0, $40,	0
0001DA2C 5601 0C98                  	dc.l Map_obj56+$56000000
0001DA30 0000 4000                  	dc.b 0,	0, $40,	0
0001DA34 3200 C39C                  	dc.l Map_obj32+$32000000
0001DA38 0000 0513                  	dc.b 0,	0, 5, $13
0001DA3C 7801 735C                  	dc.l Map_obj78+$78000000
0001DA40 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA44 7901 76E2                  	dc.l Map_obj79+$79000000
0001DA48 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA4C                            	even
0001DA4C                            	even
0001DA4C                            
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            ; Debug	list - Scrap Brain
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            Debug_SBZ:
0001DA4C                            	include "_inc\Debug list - SBZ.asm"
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            ; Debug	list - Scrap Brain
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C 001D                       	dc.w $1D
0001DA4E 2500 A3E0                  	dc.l Map_obj25+$25000000
0001DA52 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA56 2600 A9E6                  	dc.l Map_obj26+$26000000
0001DA5A 0000 0680                  	dc.b 0,	0, 6, $80
0001DA5E 5F01 21AA                  	dc.l Map_obj5F+$5F000000
0001DA62 0000 0400                  	dc.b 0,	0, 4, 0
0001DA66 6001 2460                  	dc.l Map_obj60+$60000000
0001DA6A 0000 0429                  	dc.b 0,	0, 4, $29
0001DA6E 7801 735C                  	dc.l Map_obj78+$78000000
0001DA72 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DA76 1501 1034                  	dc.l Map_obj15b+$15000000
0001DA7A 0702 4391                  	dc.b 7,	2, $43,	$91
0001DA7E 6701 5C70                  	dc.l Map_obj67+$67000000
0001DA82 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DA86 5201 05E2                  	dc.l Map_obj52+$52000000
0001DA8A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DA8E 3200 C39C                  	dc.l Map_obj32+$32000000
0001DA92 0000 0513                  	dc.b 0,	0, 5, $13
0001DA96 6901 5ECA                  	dc.l Map_obj69+$69000000
0001DA9A 0300 4492                  	dc.b 3,	0, $44,	$92
0001DA9E 6901 5F24                  	dc.l Map_obj69a+$69000000
0001DAA2 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DAA6 6A01 6182                  	dc.l Map_obj6A+$6A000000
0001DAAA 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DAAE 5300 8B8C                  	dc.l Map_obj53+$53000000
0001DAB2 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DAB6 5201 05E2                  	dc.l Map_obj52+$52000000
0001DABA 3903 4460                  	dc.b $39, 3, $44, $60
0001DABE 6B01 6552                  	dc.l Map_obj6B+$6B000000
0001DAC2 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DAC6 2A00 8E32                  	dc.l Map_obj2A+$2A000000
0001DACA 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DACE 6B01 6552                  	dc.l Map_obj6B+$6B000000
0001DAD2 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DAD6 6A01 6182                  	dc.l Map_obj6A+$6A000000
0001DADA 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DADE 6B01 6552                  	dc.l Map_obj6B+$6B000000
0001DAE2 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DAE6 6A01 6182                  	dc.l Map_obj6A+$6A000000
0001DAEA 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DAEE 6B01 6552                  	dc.l Map_obj6B+$6B000000
0001DAF2 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DAF6 6C01 6714                  	dc.l Map_obj6C+$6C000000
0001DAFA 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DAFE 6D00 EB92                  	dc.l Map_obj6D+$6D000000
0001DB02 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DB06 6D00 EB92                  	dc.l Map_obj6D+$6D000000
0001DB0A 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DB0E 6E01 67CA                  	dc.l Map_obj6E+$6E000000
0001DB12 0400 047E                  	dc.b 4,	0, 4, $7E
0001DB16 7001 6C20                  	dc.l Map_obj70+$70000000
0001DB1A 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DB1E 7101 1A40                  	dc.l Map_obj71+$71000000
0001DB22 1100 8680                  	dc.b $11, 0, $86, $80
0001DB26 1E00 92F0                  	dc.l Map_obj1E+$1E000000
0001DB2A 0400 2302                  	dc.b 4,	0, $23,	2
0001DB2E 7901 76E2                  	dc.l Map_obj79+$79000000
0001DB32 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB36                            	even
0001DB36                            	even
0001DB36                            
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36                            ; Debug	list - ending sequence / special stage
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36                            Debug_Ending:
0001DB36                            	include "_inc\Debug list - Ending and SS.asm"
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36                            ; Debug	list - ending sequence / special stage
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36 000D                       	dc.w $D
0001DB38 2500 A3E0                  	dc.l Map_obj25+$25000000
0001DB3C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB40 4700 F09C                  	dc.l Map_obj47+$47000000
0001DB44 0000 0380                  	dc.b 0,	0, 3, $80
0001DB48 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB4C 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DB50 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB54 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DB58 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB5C 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DB60 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB64 0D00 0553                  	dc.b $D, 0, 5, $53
0001DB68 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB6C 0E00 0553                  	dc.b $E, 0, 5, $53
0001DB70 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB74 0F00 0573                  	dc.b $F, 0, 5, $73
0001DB78 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB7C 1000 0573                  	dc.b $10, 0, 5,	$73
0001DB80 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB84 1100 0585                  	dc.b $11, 0, 5,	$85
0001DB88 2800 9922                  	dc.l Map_obj28b+$28000000
0001DB8C 1200 0593                  	dc.b $12, 0, 5,	$93
0001DB90 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB94 1300 0565                  	dc.b $13, 0, 5,	$65
0001DB98 2800 9922                  	dc.l Map_obj28b+$28000000
0001DB9C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DBA0                            	even
0001DBA0                            	even
0001DBA0                            
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0                            ; Main level load blocks
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0                            MainLoadBlocks:
0001DBA0                            	include "_inc\Main level load blocks.asm"
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0                            ; Main level load blocks
0001DBA0                            ;
0001DBA0                            ; ===FORMAT===
0001DBA0                            ; level	patterns + (1st	PLC num	* 10^6)
0001DBA0                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DBA0                            ; 256x256 mappings
0001DBA0                            ; blank, music (unused), pal index (unused), pal index
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DBA4 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DBA8 0000 0000                  	dc.l Blk256_GHZ
0001DBAC 0081 0404                  	dc.b 0,	$81, 4,	4
0001DBB0 0000 0000                  	dc.l Nem_LZ+$6000000
0001DBB4 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DBB8 0000 0000                  	dc.l Blk256_LZ
0001DBBC 0082 0505                  	dc.b 0,	$82, 5,	5
0001DBC0 0000 0000                  	dc.l Nem_MZ+$8000000
0001DBC4 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DBC8 0000 0000                  	dc.l Blk256_MZ
0001DBCC 0083 0606                  	dc.b 0,	$83, 6,	6
0001DBD0 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DBD4 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DBD8 0000 0000                  	dc.l Blk256_SLZ
0001DBDC 0084 0707                  	dc.b 0,	$84, 7,	7
0001DBE0 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DBE4 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DBE8 0000 0000                  	dc.l Blk256_SYZ
0001DBEC 0085 0808                  	dc.b 0,	$85, 8,	8
0001DBF0 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DBF4 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DBF8 0000 0000                  	dc.l Blk256_SBZ
0001DBFC 0086 0909                  	dc.b 0,	$86, 9,	9
0001DC00 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DC04 0000 0000                  	dc.l Blk16_GHZ
0001DC08 0000 0000                  	dc.l Blk256_GHZ
0001DC0C 0086 1313                  	dc.b 0,	$86, $13, $13
0001DC10                            	even
0001DC10                            	even
0001DC10                            
0001DC10                            ; ---------------------------------------------------------------------------
0001DC10                            ; Pattern load cues
0001DC10                            ; ---------------------------------------------------------------------------
0001DC10                            ArtLoadCues:
0001DC10                            	include "_inc\Pattern load cues.asm"
0001DC10                            ; ---------------------------------------------------------------------------
0001DC10                            ; Pattern load cues - index
0001DC10                            ; ---------------------------------------------------------------------------
0001DC10 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DC14 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DC18 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DC1C 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DC20 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DC24 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DC28 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DC2C 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DC30 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DC34 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DC38 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DC3C 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DC40 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DC44 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DC48 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DC4C 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DC50                            ; ---------------------------------------------------------------------------
0001DC50                            ; Pattern load cues - standard block 1
0001DC50                            ; ---------------------------------------------------------------------------
0001DC50 0004                       PLC_Main:	dc.w 4
0001DC52 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DC56 F400                       		dc.w $F400
0001DC58 0000 0000                  		dc.l Nem_Hud		; HUD
0001DC5C D940                       		dc.w $D940
0001DC5E 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DC62 FA80                       		dc.w $FA80
0001DC64 0000 0000                  		dc.l Nem_Ring		; rings
0001DC68 F640                       		dc.w $F640
0001DC6A 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DC6E F2E0                       		dc.w $F2E0
0001DC70                            ; ---------------------------------------------------------------------------
0001DC70                            ; Pattern load cues - standard block 2
0001DC70                            ; ---------------------------------------------------------------------------
0001DC70 0002                       PLC_Main2:	dc.w 2
0001DC72 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DC76 D000                       		dc.w $D000
0001DC78 0000 0000                  		dc.l Nem_Shield		; shield
0001DC7C A820                       		dc.w $A820
0001DC7E 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DC82 AB80                       		dc.w $AB80
0001DC84                            ; ---------------------------------------------------------------------------
0001DC84                            ; Pattern load cues - explosion
0001DC84                            ; ---------------------------------------------------------------------------
0001DC84 0000                       PLC_Explode:	dc.w 0
0001DC86 0000 0000                  		dc.l Nem_Explode	; explosion
0001DC8A B400                       		dc.w $B400
0001DC8C                            ; ---------------------------------------------------------------------------
0001DC8C                            ; Pattern load cues - game/time	over
0001DC8C                            ; ---------------------------------------------------------------------------
0001DC8C 0000                       PLC_GameOver:	dc.w 0
0001DC8E 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DC92 ABC0                       		dc.w $ABC0
0001DC94                            ; ---------------------------------------------------------------------------
0001DC94                            ; Pattern load cues - Green Hill
0001DC94                            ; ---------------------------------------------------------------------------
0001DC94 000B                       PLC_GHZ:	dc.w $B
0001DC96 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DC9A 0000                       		dc.w 0
0001DC9C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DCA0 39A0                       		dc.w $39A0
0001DCA2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DCA6 6B00                       		dc.w $6B00
0001DCA8 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DCAC 7A00                       		dc.w $7A00
0001DCAE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DCB2 8000                       		dc.w $8000
0001DCB4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DCB8 8880                       		dc.w $8880
0001DCBA 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DCBE 8F60                       		dc.w $8F60
0001DCC0 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DCC4 9360                       		dc.w $9360
0001DCC6 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DCCA 9E00                       		dc.w $9E00
0001DCCC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCD0 A360                       		dc.w $A360
0001DCD2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCD6 A460                       		dc.w $A460
0001DCD8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCDC A660                       		dc.w $A660
0001DCDE 0005                       PLC_GHZ2:	dc.w 5
0001DCE0 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DCE4 7000                       		dc.w $7000
0001DCE6 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DCEA 71C0                       		dc.w $71C0
0001DCEC 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DCF0 7300                       		dc.w $7300
0001DCF2 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DCF6 7540                       		dc.w $7540
0001DCF8 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DCFC A1E0                       		dc.w $A1E0
0001DCFE 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DD02 6980                       		dc.w $6980
0001DD04                            ; ---------------------------------------------------------------------------
0001DD04                            ; Pattern load cues - Labyrinth
0001DD04                            ; ---------------------------------------------------------------------------
0001DD04 000B                       PLC_LZ:		dc.w $B
0001DD06 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DD0A 0000                       		dc.w 0
0001DD0C 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DD10 3C00                       		dc.w $3C00
0001DD12 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DD16 3E00                       		dc.w $3E00
0001DD18 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DD1C 4B20                       		dc.w $4B20
0001DD1E 0000 0000                  		dc.l Nem_Water		; water	surface
0001DD22 6000                       		dc.w $6000
0001DD24 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DD28 6200                       		dc.w $6200
0001DD2A 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DD2E 6500                       		dc.w $6500
0001DD30 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DD34 6900                       		dc.w $6900
0001DD36 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DD3A 7780                       		dc.w $7780
0001DD3C 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DD40 7880                       		dc.w $7880
0001DD42 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DD46 7980                       		dc.w $7980
0001DD48 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DD4C 94C0                       		dc.w $94C0
0001DD4E 000C                       PLC_LZ2:	dc.w $C
0001DD50 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DD54 7BC0                       		dc.w $7BC0
0001DD56 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DD5A 7CC0                       		dc.w $7CC0
0001DD5C 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DD60 7EC0                       		dc.w $7EC0
0001DD62 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DD66 5D20                       		dc.w $5D20
0001DD68 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DD6C 8800                       		dc.w $8800
0001DD6E 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DD72 89E0                       		dc.w $89E0
0001DD74 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD78 8CE0                       		dc.w $8CE0
0001DD7A 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DD7E 90C0                       		dc.w $90C0
0001DD80 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD84 A1E0                       		dc.w $A1E0
0001DD86 0000 0000                  		dc.l Nem_Cork		; cork block
0001DD8A A000                       		dc.w $A000
0001DD8C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD90 A360                       		dc.w $A360
0001DD92 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DD96 A460                       		dc.w $A460
0001DD98 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DD9C A660                       		dc.w $A660
0001DD9E                            ; ---------------------------------------------------------------------------
0001DD9E                            ; Pattern load cues - Marble
0001DD9E                            ; ---------------------------------------------------------------------------
0001DD9E 0009                       PLC_MZ:		dc.w 9
0001DDA0 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DDA4 0000                       		dc.w 0
0001DDA6 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DDAA 6000                       		dc.w $6000
0001DDAC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DDB0 68A0                       		dc.w $68A0
0001DDB2 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DDB6 7000                       		dc.w $7000
0001DDB8 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DDBC 71C0                       		dc.w $71C0
0001DDBE 0000 0000                  		dc.l Nem_Lava		; lava
0001DDC2 7500                       		dc.w $7500
0001DDC4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DDC8 8880                       		dc.w $8880
0001DDCA 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DDCE 8F60                       		dc.w $8F60
0001DDD0 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DDD4 9700                       		dc.w $9700
0001DDD6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DDDA 9FE0                       		dc.w $9FE0
0001DDDC 0004                       PLC_MZ2:	dc.w 4
0001DDDE 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DDE2 A260                       		dc.w $A260
0001DDE4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDE8 A360                       		dc.w $A360
0001DDEA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDEE A460                       		dc.w $A460
0001DDF0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDF4 A660                       		dc.w $A660
0001DDF6 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DDFA 5700                       		dc.w $5700
0001DDFC                            ; ---------------------------------------------------------------------------
0001DDFC                            ; Pattern load cues - Star Light
0001DDFC                            ; ---------------------------------------------------------------------------
0001DDFC 0008                       PLC_SLZ:	dc.w 8
0001DDFE 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DE02 0000                       		dc.w 0
0001DE04 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DE08 8000                       		dc.w $8000
0001DE0A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DE0E 8520                       		dc.w $8520
0001DE10 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DE14 9000                       		dc.w $9000
0001DE16 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DE1A 9C00                       		dc.w $9C00
0001DE1C 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DE20 A260                       		dc.w $A260
0001DE22 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE26 A360                       		dc.w $A360
0001DE28 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE2C A460                       		dc.w $A460
0001DE2E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE32 A660                       		dc.w $A660
0001DE34 0005                       PLC_SLZ2:	dc.w 5
0001DE36 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DE3A 6E80                       		dc.w $6E80
0001DE3C 0000 0000                  		dc.l Nem_Fan		; fan
0001DE40 7400                       		dc.w $7400
0001DE42 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DE46 7980                       		dc.w $7980
0001DE48 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DE4C 7B80                       		dc.w $7B80
0001DE4E 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DE52 9B00                       		dc.w $9B00
0001DE54 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DE58 9E00                       		dc.w $9E00
0001DE5A                            ; ---------------------------------------------------------------------------
0001DE5A                            ; Pattern load cues - Spring Yard
0001DE5A                            ; ---------------------------------------------------------------------------
0001DE5A 0004                       PLC_SYZ:	dc.w 4
0001DE5C 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DE60 0000                       		dc.w 0
0001DE62 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE66 8000                       		dc.w $8000
0001DE68 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE6C 8880                       		dc.w $8880
0001DE6E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DE72 8F60                       		dc.w $8F60
0001DE74 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DE78 9700                       		dc.w $9700
0001DE7A 0007                       PLC_SYZ2:	dc.w 7
0001DE7C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE80 7000                       		dc.w $7000
0001DE82 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DE86 72C0                       		dc.w $72C0
0001DE88 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DE8C 7740                       		dc.w $7740
0001DE8E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DE92 9FE0                       		dc.w $9FE0
0001DE94 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DE98 A1E0                       		dc.w $A1E0
0001DE9A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE9E A360                       		dc.w $A360
0001DEA0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEA4 A460                       		dc.w $A460
0001DEA6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEAA A660                       		dc.w $A660
0001DEAC                            ; ---------------------------------------------------------------------------
0001DEAC                            ; Pattern load cues - Scrap Brain
0001DEAC                            ; ---------------------------------------------------------------------------
0001DEAC 000B                       PLC_SBZ:	dc.w $B
0001DEAE 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DEB2 0000                       		dc.w 0
0001DEB4 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DEB8 5800                       		dc.w $5800
0001DEBA 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DEBE 5D00                       		dc.w $5D00
0001DEC0 0000 0000                  		dc.l Nem_Girder		; girder
0001DEC4 5E00                       		dc.w $5E00
0001DEC6 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DECA 6040                       		dc.w $6040
0001DECC 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DED0 6880                       		dc.w $6880
0001DED2 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DED6 6900                       		dc.w $6900
0001DED8 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DEDC 7220                       		dc.w $7220
0001DEDE 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DEE2 76A0                       		dc.w $76A0
0001DEE4 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DEE8 7B20                       		dc.w $7B20
0001DEEA 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DEEE 7EA0                       		dc.w $7EA0
0001DEF0 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DEF4 9860                       		dc.w $9860
0001DEF6 000C                       PLC_SBZ2:	dc.w $C
0001DEF8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEFC 5600                       		dc.w $5600
0001DEFE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DF02 8000                       		dc.w $8000
0001DF04 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF08 8520                       		dc.w $8520
0001DF0A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DF0E 8C00                       		dc.w $8C00
0001DF10 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DF14 8DE0                       		dc.w $8DE0
0001DF16 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DF1A 8FC0                       		dc.w $8FC0
0001DF1C 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DF20 9240                       		dc.w $9240
0001DF22 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF26 7F20                       		dc.w $7F20
0001DF28 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DF2C 9BE0                       		dc.w $9BE0
0001DF2E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF32 A1E0                       		dc.w $A1E0
0001DF34 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF38 A360                       		dc.w $A360
0001DF3A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF3E A460                       		dc.w $A460
0001DF40 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF44 A660                       		dc.w $A660
0001DF46                            ; ---------------------------------------------------------------------------
0001DF46                            ; Pattern load cues - title card
0001DF46                            ; ---------------------------------------------------------------------------
0001DF46 0000                       PLC_TitleCard:	dc.w 0
0001DF48 0000 0000                  		dc.l Nem_TitleCard
0001DF4C B000                       		dc.w $B000
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E                            ; Pattern load cues - act 3 boss
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E 0005                       PLC_Boss:	dc.w 5
0001DF50 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF54 8000                       		dc.w $8000
0001DF56 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DF5A 8D80                       		dc.w $8D80
0001DF5C 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DF60 93A0                       		dc.w $93A0
0001DF62 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DF66 A300                       		dc.w $A300
0001DF68 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DF6C A300                       		dc.w $A300
0001DF6E 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF72 A540                       		dc.w $A540
0001DF74                            ; ---------------------------------------------------------------------------
0001DF74                            ; Pattern load cues - act 1/2 signpost
0001DF74                            ; ---------------------------------------------------------------------------
0001DF74 0002                       PLC_Signpost:	dc.w 2
0001DF76 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DF7A D000                       		dc.w $D000
0001DF7C 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DF80 96C0                       		dc.w $96C0
0001DF82 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DF86 8C40                       		dc.w $8C40
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88                            ; Pattern load cues - beta special stage warp effect
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88 0000                       PLC_Warp:	dc.w 0
0001DF8A 0000 0000                  		dc.l Nem_Warp
0001DF8E A820                       		dc.w $A820
0001DF90                            ; ---------------------------------------------------------------------------
0001DF90                            ; Pattern load cues - special stage
0001DF90                            ; ---------------------------------------------------------------------------
0001DF90 0010                       PLC_SpeStage:	dc.w $10
0001DF92 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DF96 0000                       		dc.w 0
0001DF98 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DF9C 0A20                       		dc.w $A20
0001DF9E 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DFA2 2840                       		dc.w $2840
0001DFA4 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DFA8 4760                       		dc.w $4760
0001DFAA 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DFAE 4A20                       		dc.w $4A20
0001DFB0 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DFB4 4C60                       		dc.w $4C60
0001DFB6 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DFBA 5E00                       		dc.w $5E00
0001DFBC 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DFC0 6E00                       		dc.w $6E00
0001DFC2 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DFC6 7E00                       		dc.w $7E00
0001DFC8 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DFCC 8E00                       		dc.w $8E00
0001DFCE 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DFD2 9E00                       		dc.w $9E00
0001DFD4 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DFD8 AE00                       		dc.w $AE00
0001DFDA 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DFDE BE00                       		dc.w $BE00
0001DFE0 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DFE4 EE00                       		dc.w $EE00
0001DFE6 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DFEA F2E0                       		dc.w $F2E0
0001DFEC 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DFF0 F400                       		dc.w $F400
0001DFF2 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DFF6 F520                       		dc.w $F520
0001DFF8 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DFFC F2E0                       		dc.w $F2E0
0001DFFE 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E002 F400                       		dc.w $F400
0001E004 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E008 F520                       		dc.w $F520
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A                            ; Pattern load cues - GHZ animals
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A 0001                       PLC_GHZAnimals:	dc.w 1
0001E00C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E010 B000                       		dc.w $B000
0001E012 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E016 B240                       		dc.w $B240
0001E018                            ; ---------------------------------------------------------------------------
0001E018                            ; Pattern load cues - LZ animals
0001E018                            ; ---------------------------------------------------------------------------
0001E018 0001                       PLC_LZAnimals:	dc.w 1
0001E01A 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E01E B000                       		dc.w $B000
0001E020 0000 0000                  		dc.l Nem_Seal		; seal
0001E024 B240                       		dc.w $B240
0001E026                            ; ---------------------------------------------------------------------------
0001E026                            ; Pattern load cues - MZ animals
0001E026                            ; ---------------------------------------------------------------------------
0001E026 0001                       PLC_MZAnimals:	dc.w 1
0001E028 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E02C B000                       		dc.w $B000
0001E02E 0000 0000                  		dc.l Nem_Seal		; seal
0001E032 B240                       		dc.w $B240
0001E034                            ; ---------------------------------------------------------------------------
0001E034                            ; Pattern load cues - SLZ animals
0001E034                            ; ---------------------------------------------------------------------------
0001E034 0001                       PLC_SLZAnimals:	dc.w 1
0001E036 0000 0000                  		dc.l Nem_Pig		; pig
0001E03A B000                       		dc.w $B000
0001E03C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E040 B240                       		dc.w $B240
0001E042                            ; ---------------------------------------------------------------------------
0001E042                            ; Pattern load cues - SYZ animals
0001E042                            ; ---------------------------------------------------------------------------
0001E042 0001                       PLC_SYZAnimals:	dc.w 1
0001E044 0000 0000                  		dc.l Nem_Pig		; pig
0001E048 B000                       		dc.w $B000
0001E04A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E04E B240                       		dc.w $B240
0001E050                            ; ---------------------------------------------------------------------------
0001E050                            ; Pattern load cues - SBZ animals
0001E050                            ; ---------------------------------------------------------------------------
0001E050 0001                       PLC_SBZAnimals:	dc.w 1
0001E052 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E056 B000                       		dc.w $B000
0001E058 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E05C B240                       		dc.w $B240
0001E05E                            ; ---------------------------------------------------------------------------
0001E05E                            ; Pattern load cues - special stage results screen
0001E05E                            ; ---------------------------------------------------------------------------
0001E05E 0001                       PLC_SpeStResult:dc.w 1
0001E060 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E064 A820                       		dc.w $A820
0001E066 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E06A AA20                       		dc.w $AA20
0001E06C                            ; ---------------------------------------------------------------------------
0001E06C                            ; Pattern load cues - ending sequence
0001E06C                            ; ---------------------------------------------------------------------------
0001E06C 000E                       PLC_Ending:	dc.w $E
0001E06E 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E072 0000                       		dc.w 0
0001E074 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E078 39A0                       		dc.w $39A0
0001E07A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E07E 6B00                       		dc.w $6B00
0001E080 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E084 7400                       		dc.w $7400
0001E086 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E08A 78A0                       		dc.w $78A0
0001E08C 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E090 7C20                       		dc.w $7C20
0001E092 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E096 A480                       		dc.w $A480
0001E098 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E09C AA60                       		dc.w $AA60
0001E09E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E0A2 ACA0                       		dc.w $ACA0
0001E0A4 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E0A8 AE60                       		dc.w $AE60
0001E0AA 0000 0000                  		dc.l Nem_Seal		; seal
0001E0AE B0A0                       		dc.w $B0A0
0001E0B0 0000 0000                  		dc.l Nem_Pig		; pig
0001E0B4 B260                       		dc.w $B260
0001E0B6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E0BA B4A0                       		dc.w $B4A0
0001E0BC 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E0C0 B660                       		dc.w $B660
0001E0C2 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E0C6 B8A0                       		dc.w $B8A0
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8 0002                       PLC_TryAgain:	dc.w 2
0001E0CA 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E0CE 78A0                       		dc.w $78A0
0001E0D0 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E0D4 7C20                       		dc.w $7C20
0001E0D6 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E0DA B400                       		dc.w $B400
0001E0DC                            ; ---------------------------------------------------------------------------
0001E0DC                            ; Pattern load cues - Eggman on SBZ 2
0001E0DC                            ; ---------------------------------------------------------------------------
0001E0DC 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E0DE 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E0E2 A300                       		dc.w $A300
0001E0E4 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E0E8 8000                       		dc.w $8000
0001E0EA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E0EE 9400                       		dc.w $9400
0001E0F0                            ; ---------------------------------------------------------------------------
0001E0F0                            ; Pattern load cues - final boss
0001E0F0                            ; ---------------------------------------------------------------------------
0001E0F0 0004                       PLC_FZBoss:	dc.w 4
0001E0F2 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E0F6 7400                       		dc.w $7400
0001E0F8 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E0FC 6000                       		dc.w $6000
0001E0FE 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E102 8000                       		dc.w $8000
0001E104 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E108 8E00                       		dc.w $8E00
0001E10A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E10E A540                       		dc.w $A540
0001E110                            		even
0001E110                            		even
0001E110                            
0001E110                            		incbin	misc\padding.bin
0001E1FE                            		even
0001E1FE                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E660                            		even
0001E660                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E758                            		even
0001E758                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E86C                            		even
0001E86C                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F878                            		even
0001F878                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022ACE 00                         		even
00022ACE                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022B02                            		even
00022B02                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022BC0                            		even
00022BC0                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00023068                            		even
00023068                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000230C6                            		even
000230C6                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00023CCC                            		even
00023CCC                            ; ---------------------------------------------------------------------------
00023CCC                            ; Sprite mappings - Sonic
00023CCC                            ; ---------------------------------------------------------------------------
00023CCC                            Map_Sonic:
00023CCC                            	include "_maps\Sonic.asm"
00023CCC                            Map_0dcc:
00023CCC 0000                       Map_0dcc_0: 	dc.w Map_0dcc_B6-Map_0dcc
00023CCE 0000                       Map_0dcc_2: 	dc.w Map_0dcc_B7-Map_0dcc
00023CD0 0000                       Map_0dcc_4: 	dc.w Map_0dcc_C2-Map_0dcc
00023CD2 0000                       Map_0dcc_6: 	dc.w Map_0dcc_D2-Map_0dcc
00023CD4 0000                       Map_0dcc_8: 	dc.w Map_0dcc_E2-Map_0dcc
00023CD6 0000                       Map_0dcc_A: 	dc.w Map_0dcc_F2-Map_0dcc
00023CD8 0000                       Map_0dcc_C: 	dc.w Map_0dcc_102-Map_0dcc
00023CDA 0000                       Map_0dcc_E: 	dc.w Map_0dcc_117-Map_0dcc
00023CDC 0000                       Map_0dcc_10: 	dc.w Map_0dcc_122-Map_0dcc
00023CDE 0000                       Map_0dcc_12: 	dc.w Map_0dcc_12D-Map_0dcc
00023CE0 0000                       Map_0dcc_14: 	dc.w Map_0dcc_142-Map_0dcc
00023CE2 0000                       Map_0dcc_16: 	dc.w Map_0dcc_14D-Map_0dcc
00023CE4 0000                       Map_0dcc_18: 	dc.w Map_0dcc_15D-Map_0dcc
00023CE6 0000                       Map_0dcc_1A: 	dc.w Map_0dcc_177-Map_0dcc
00023CE8 0000                       Map_0dcc_1C: 	dc.w Map_0dcc_196-Map_0dcc
00023CEA 0000                       Map_0dcc_1E: 	dc.w Map_0dcc_1AB-Map_0dcc
00023CEC 0000                       Map_0dcc_20: 	dc.w Map_0dcc_1C5-Map_0dcc
00023CEE 0000                       Map_0dcc_22: 	dc.w Map_0dcc_1DA-Map_0dcc
00023CF0 0000                       Map_0dcc_24: 	dc.w Map_0dcc_1F4-Map_0dcc
00023CF2 0000                       Map_0dcc_26: 	dc.w Map_0dcc_209-Map_0dcc
00023CF4 0000                       Map_0dcc_28: 	dc.w Map_0dcc_214-Map_0dcc
00023CF6 0000                       Map_0dcc_2A: 	dc.w Map_0dcc_21F-Map_0dcc
00023CF8 0000                       Map_0dcc_2C: 	dc.w Map_0dcc_234-Map_0dcc
00023CFA 0000                       Map_0dcc_2E: 	dc.w Map_0dcc_23F-Map_0dcc
00023CFC 0000                       Map_0dcc_30: 	dc.w Map_0dcc_24F-Map_0dcc
00023CFE 0000                       Map_0dcc_32: 	dc.w Map_0dcc_26E-Map_0dcc
00023D00 0000                       Map_0dcc_34: 	dc.w Map_0dcc_28D-Map_0dcc
00023D02 0000                       Map_0dcc_36: 	dc.w Map_0dcc_2A2-Map_0dcc
00023D04 0000                       Map_0dcc_38: 	dc.w Map_0dcc_2BC-Map_0dcc
00023D06 0000                       Map_0dcc_3A: 	dc.w Map_0dcc_2D1-Map_0dcc
00023D08 0000                       Map_0dcc_3C: 	dc.w Map_0dcc_2EB-Map_0dcc
00023D0A 0000                       Map_0dcc_3E: 	dc.w Map_0dcc_2F6-Map_0dcc
00023D0C 0000                       Map_0dcc_40: 	dc.w Map_0dcc_301-Map_0dcc
00023D0E 0000                       Map_0dcc_42: 	dc.w Map_0dcc_30C-Map_0dcc
00023D10 0000                       Map_0dcc_44: 	dc.w Map_0dcc_317-Map_0dcc
00023D12 0000                       Map_0dcc_46: 	dc.w Map_0dcc_32C-Map_0dcc
00023D14 0000                       Map_0dcc_48: 	dc.w Map_0dcc_33C-Map_0dcc
00023D16 0000                       Map_0dcc_4A: 	dc.w Map_0dcc_351-Map_0dcc
00023D18 0000                       Map_0dcc_4C: 	dc.w Map_0dcc_361-Map_0dcc
00023D1A 0000                       Map_0dcc_4E: 	dc.w Map_0dcc_36C-Map_0dcc
00023D1C 0000                       Map_0dcc_50: 	dc.w Map_0dcc_377-Map_0dcc
00023D1E 0000                       Map_0dcc_52: 	dc.w Map_0dcc_382-Map_0dcc
00023D20 0000                       Map_0dcc_54: 	dc.w Map_0dcc_38D-Map_0dcc
00023D22 0000                       Map_0dcc_56: 	dc.w Map_0dcc_3A2-Map_0dcc
00023D24 0000                       Map_0dcc_58: 	dc.w Map_0dcc_3AD-Map_0dcc
00023D26 0000                       Map_0dcc_5A: 	dc.w Map_0dcc_3C2-Map_0dcc
00023D28 0000                       Map_0dcc_5C: 	dc.w Map_0dcc_3CD-Map_0dcc
00023D2A 0000                       Map_0dcc_5E: 	dc.w Map_0dcc_3D3-Map_0dcc
00023D2C 0000                       Map_0dcc_60: 	dc.w Map_0dcc_3D9-Map_0dcc
00023D2E 0000                       Map_0dcc_62: 	dc.w Map_0dcc_3DF-Map_0dcc
00023D30 0000                       Map_0dcc_64: 	dc.w Map_0dcc_3E5-Map_0dcc
00023D32 0000                       Map_0dcc_66: 	dc.w Map_0dcc_3EB-Map_0dcc
00023D34 0000                       Map_0dcc_68: 	dc.w Map_0dcc_3F6-Map_0dcc
00023D36 0000                       Map_0dcc_6A: 	dc.w Map_0dcc_3FC-Map_0dcc
00023D38 0000                       Map_0dcc_6C: 	dc.w Map_0dcc_407-Map_0dcc
00023D3A 0000                       Map_0dcc_6E: 	dc.w Map_0dcc_40D-Map_0dcc
00023D3C 0000                       Map_0dcc_70: 	dc.w Map_0dcc_418-Map_0dcc
00023D3E 0000                       Map_0dcc_72: 	dc.w Map_0dcc_42D-Map_0dcc
00023D40 0000                       Map_0dcc_74: 	dc.w Map_0dcc_44C-Map_0dcc
00023D42 0000                       Map_0dcc_76: 	dc.w Map_0dcc_45C-Map_0dcc
00023D44 0000                       Map_0dcc_78: 	dc.w Map_0dcc_46C-Map_0dcc
00023D46 0000                       Map_0dcc_7A: 	dc.w Map_0dcc_47C-Map_0dcc
00023D48 0000                       Map_0dcc_7C: 	dc.w Map_0dcc_487-Map_0dcc
00023D4A 0000                       Map_0dcc_7E: 	dc.w Map_0dcc_497-Map_0dcc
00023D4C 0000                       Map_0dcc_80: 	dc.w Map_0dcc_4A7-Map_0dcc
00023D4E 0000                       Map_0dcc_82: 	dc.w Map_0dcc_4B7-Map_0dcc
00023D50 0000                       Map_0dcc_84: 	dc.w Map_0dcc_4CC-Map_0dcc
00023D52 0000                       Map_0dcc_86: 	dc.w Map_0dcc_4E1-Map_0dcc
00023D54 0000                       Map_0dcc_88: 	dc.w Map_0dcc_4FB-Map_0dcc
00023D56 0000                       Map_0dcc_8A: 	dc.w Map_0dcc_515-Map_0dcc
00023D58 0000                       Map_0dcc_8C: 	dc.w Map_0dcc_520-Map_0dcc
00023D5A 0000                       Map_0dcc_8E: 	dc.w Map_0dcc_530-Map_0dcc
00023D5C 0000                       Map_0dcc_90: 	dc.w Map_0dcc_53B-Map_0dcc
00023D5E 0000                       Map_0dcc_92: 	dc.w Map_0dcc_54B-Map_0dcc
00023D60 0000                       Map_0dcc_94: 	dc.w Map_0dcc_556-Map_0dcc
00023D62 0000                       Map_0dcc_96: 	dc.w Map_0dcc_566-Map_0dcc
00023D64 0000                       Map_0dcc_98: 	dc.w Map_0dcc_576-Map_0dcc
00023D66 0000                       Map_0dcc_9A: 	dc.w Map_0dcc_590-Map_0dcc
00023D68 0000                       Map_0dcc_9C: 	dc.w Map_0dcc_5AA-Map_0dcc
00023D6A 0000                       Map_0dcc_9E: 	dc.w Map_0dcc_5B5-Map_0dcc
00023D6C 0000                       Map_0dcc_A0: 	dc.w Map_0dcc_5C5-Map_0dcc
00023D6E 0000                       Map_0dcc_A2: 	dc.w Map_0dcc_5CB-Map_0dcc
00023D70 0000                       Map_0dcc_A4: 	dc.w Map_0dcc_5D1-Map_0dcc
00023D72 0000                       Map_0dcc_A6: 	dc.w Map_0dcc_5D7-Map_0dcc
00023D74 0000                       Map_0dcc_A8: 	dc.w Map_0dcc_5E7-Map_0dcc
00023D76 0000                       Map_0dcc_AA: 	dc.w Map_0dcc_5F7-Map_0dcc
00023D78 0000                       Map_0dcc_AC: 	dc.w Map_0dcc_607-Map_0dcc
00023D7A 0000                       Map_0dcc_AE: 	dc.w Map_0dcc_617-Map_0dcc
00023D7C 0000                       Map_0dcc_B0: 	dc.w Map_0dcc_622-Map_0dcc
00023D7E 0000                       Map_0dcc_B2: 	dc.w Map_0dcc_62D-Map_0dcc
00023D80 0000                       Map_0dcc_B4: 	dc.w Map_0dcc_63D-Map_0dcc
00023D82 00                         Map_0dcc_B6: 	dc.b $0
00023D83 02                         Map_0dcc_B7: 	dc.b $2
00023D84 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00023D89 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00023D8E 03                         Map_0dcc_C2: 	dc.b $3
00023D8F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023D94 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023D99 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023D9E 03                         Map_0dcc_D2: 	dc.b $3
00023D9F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023DA4 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023DA9 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DAE 03                         Map_0dcc_E2: 	dc.b $3
00023DAF EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023DB4 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023DB9 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DBE 03                         Map_0dcc_F2: 	dc.b $3
00023DBF EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023DC4 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00023DC9 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DCE 04                         Map_0dcc_102: 	dc.b $4
00023DCF EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00023DD4 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00023DD9 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00023DDE 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00023DE3 02                         Map_0dcc_117: 	dc.b $2
00023DE4 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00023DE9 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00023DEE 02                         Map_0dcc_122: 	dc.b $2
00023DEF ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00023DF4 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00023DF9 04                         Map_0dcc_12D: 	dc.b $4
00023DFA EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00023DFF FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00023E04 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00023E09 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00023E0E 02                         Map_0dcc_142: 	dc.b $2
00023E0F FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00023E14 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00023E19 03                         Map_0dcc_14D: 	dc.b $3
00023E1A ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00023E1F FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00023E24 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00023E29 05                         Map_0dcc_15D: 	dc.b $5
00023E2A EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023E2F EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00023E34 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00023E39 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00023E3E 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00023E43 06                         Map_0dcc_177: 	dc.b $6
00023E44 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023E49 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023E4E FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00023E53 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00023E58 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00023E5D F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00023E62 04                         Map_0dcc_196: 	dc.b $4
00023E63 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023E68 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023E6D FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00023E72 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00023E77 05                         Map_0dcc_1AB: 	dc.b $5
00023E78 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023E7D EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00023E82 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00023E87 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00023E8C 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00023E91 04                         Map_0dcc_1C5: 	dc.b $4
00023E92 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023E97 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023E9C FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00023EA1 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00023EA6 05                         Map_0dcc_1DA: 	dc.b $5
00023EA7 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023EAC ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023EB1 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00023EB6 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00023EBB 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00023EC0 04                         Map_0dcc_1F4: 	dc.b $4
00023EC1 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00023EC6 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00023ECB FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00023ED0 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00023ED5 02                         Map_0dcc_209: 	dc.b $2
00023ED6 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00023EDB EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00023EE0 02                         Map_0dcc_214: 	dc.b $2
00023EE1 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00023EE6 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00023EEB 04                         Map_0dcc_21F: 	dc.b $4
00023EEC F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00023EF1 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00023EF6 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00023EFB 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00023F00 02                         Map_0dcc_234: 	dc.b $2
00023F01 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00023F06 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00023F0B 03                         Map_0dcc_23F: 	dc.b $3
00023F0C F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00023F11 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00023F16 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00023F1B 06                         Map_0dcc_24F: 	dc.b $6
00023F1C FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023F21 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00023F26 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00023F2B F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00023F30 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00023F35 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00023F3A 06                         Map_0dcc_26E: 	dc.b $6
00023F3B FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023F40 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00023F45 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00023F4A F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00023F4F F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00023F54 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00023F59 04                         Map_0dcc_28D: 	dc.b $4
00023F5A FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023F5F F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00023F64 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00023F69 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023F6E 05                         Map_0dcc_2A2: 	dc.b $5
00023F6F FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023F74 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00023F79 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00023F7E F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00023F83 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00023F88 04                         Map_0dcc_2BC: 	dc.b $4
00023F89 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023F8E F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00023F93 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00023F98 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00023F9D 05                         Map_0dcc_2D1: 	dc.b $5
00023F9E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023FA3 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00023FA8 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00023FAD 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023FB2 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00023FB7 02                         Map_0dcc_2EB: 	dc.b $2
00023FB8 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FBD FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FC2 02                         Map_0dcc_2F6: 	dc.b $2
00023FC3 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FC8 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FCD 02                         Map_0dcc_301: 	dc.b $2
00023FCE EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FD3 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FD8 02                         Map_0dcc_30C: 	dc.b $2
00023FD9 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FDE FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FE3 04                         Map_0dcc_317: 	dc.b $4
00023FE4 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FE9 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023FEE FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023FF3 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023FF8 03                         Map_0dcc_32C: 	dc.b $3
00023FF9 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FFE EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024003 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024008 04                         Map_0dcc_33C: 	dc.b $4
00024009 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002400E EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024013 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024018 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
0002401D 03                         Map_0dcc_351: 	dc.b $3
0002401E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024023 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024028 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002402D 02                         Map_0dcc_361: 	dc.b $2
0002402E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024033 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024038 02                         Map_0dcc_36C: 	dc.b $2
00024039 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002403E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024043 02                         Map_0dcc_377: 	dc.b $2
00024044 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024049 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002404E 02                         Map_0dcc_382: 	dc.b $2
0002404F F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024054 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024059 04                         Map_0dcc_38D: 	dc.b $4
0002405A FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002405F F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024064 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024069 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002406E 02                         Map_0dcc_3A2: 	dc.b $2
0002406F F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024074 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024079 04                         Map_0dcc_3AD: 	dc.b $4
0002407A FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002407F F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024084 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024089 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002408E 02                         Map_0dcc_3C2: 	dc.b $2
0002408F F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024094 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024099 01                         Map_0dcc_3CD: 	dc.b $1
0002409A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002409F 01                         Map_0dcc_3D3: 	dc.b $1
000240A0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240A5 01                         Map_0dcc_3D9: 	dc.b $1
000240A6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240AB 01                         Map_0dcc_3DF: 	dc.b $1
000240AC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240B1 01                         Map_0dcc_3E5: 	dc.b $1
000240B2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240B7 02                         Map_0dcc_3EB: 	dc.b $2
000240B8 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000240BD F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000240C2 01                         Map_0dcc_3F6: 	dc.b $1
000240C3 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240C8 02                         Map_0dcc_3FC: 	dc.b $2
000240C9 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000240CE 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000240D3 01                         Map_0dcc_407: 	dc.b $1
000240D4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240D9 02                         Map_0dcc_40D: 	dc.b $2
000240DA ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000240DF FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000240E4 04                         Map_0dcc_418: 	dc.b $4
000240E5 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000240EA FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000240EF 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000240F4 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000240F9 06                         Map_0dcc_42D: 	dc.b $6
000240FA F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000240FF FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00024104 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00024109 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
0002410E FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00024113 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00024118 03                         Map_0dcc_44C: 	dc.b $3
00024119 EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
0002411E F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00024123 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00024128 03                         Map_0dcc_45C: 	dc.b $3
00024129 EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
0002412E 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00024133 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00024138 03                         Map_0dcc_46C: 	dc.b $3
00024139 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002413E FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00024143 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00024148 02                         Map_0dcc_47C: 	dc.b $2
00024149 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002414E F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00024153 03                         Map_0dcc_487: 	dc.b $3
00024154 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00024159 FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
0002415E 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00024163 03                         Map_0dcc_497: 	dc.b $3
00024164 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00024169 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
0002416E 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00024173 03                         Map_0dcc_4A7: 	dc.b $3
00024174 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00024179 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
0002417E 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00024183 04                         Map_0dcc_4B7: 	dc.b $4
00024184 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00024189 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002418E F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00024193 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00024198 04                         Map_0dcc_4CC: 	dc.b $4
00024199 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002419E 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000241A3 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000241A8 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000241AD 05                         Map_0dcc_4E1: 	dc.b $5
000241AE E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000241B3 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000241B8 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000241BD 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000241C2 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000241C7 05                         Map_0dcc_4FB: 	dc.b $5
000241C8 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000241CD E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000241D2 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000241D7 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000241DC 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000241E1 02                         Map_0dcc_515: 	dc.b $2
000241E2 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000241E7 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000241EC 03                         Map_0dcc_520: 	dc.b $3
000241ED EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000241F2 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000241F7 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000241FC 02                         Map_0dcc_530: 	dc.b $2
000241FD ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00024202 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00024207 03                         Map_0dcc_53B: 	dc.b $3
00024208 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002420D 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00024212 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00024217 02                         Map_0dcc_54B: 	dc.b $2
00024218 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002421D FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00024222 03                         Map_0dcc_556: 	dc.b $3
00024223 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024228 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
0002422D E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00024232 03                         Map_0dcc_566: 	dc.b $3
00024233 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024238 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002423D F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00024242 05                         Map_0dcc_576: 	dc.b $5
00024243 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024248 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002424D F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00024252 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00024257 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002425C 05                         Map_0dcc_590: 	dc.b $5
0002425D E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024262 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00024267 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002426C 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00024271 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00024276 02                         Map_0dcc_5AA: 	dc.b $2
00024277 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002427C F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00024281 03                         Map_0dcc_5B5: 	dc.b $3
00024282 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00024287 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002428C 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00024291 01                         Map_0dcc_5C5: 	dc.b $1
00024292 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00024297 01                         Map_0dcc_5CB: 	dc.b $1
00024298 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0002429D 01                         Map_0dcc_5D1: 	dc.b $1
0002429E F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000242A3 03                         Map_0dcc_5D7: 	dc.b $3
000242A4 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000242A9 FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
000242AE 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
000242B3 03                         Map_0dcc_5E7: 	dc.b $3
000242B4 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
000242B9 FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
000242BE 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000242C3 03                         Map_0dcc_5F7: 	dc.b $3
000242C4 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000242C9 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000242CE 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000242D3 03                         Map_0dcc_607: 	dc.b $3
000242D4 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000242D9 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000242DE 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000242E3 02                         Map_0dcc_617: 	dc.b $2
000242E4 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000242E9 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000242EE 02                         Map_0dcc_622: 	dc.b $2
000242EF F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000242F4 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000242F9 03                         Map_0dcc_62D: 	dc.b $3
000242FA ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000242FF 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00024304 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00024309 02                         Map_0dcc_63D: 	dc.b $2
0002430A F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
0002430F EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00024314                            	even
00024314                            	even
00024314                            
00024314                            ; ---------------------------------------------------------------------------
00024314                            ; Uncompressed graphics	loading	array for Sonic
00024314                            ; ---------------------------------------------------------------------------
00024314                            SonicDynPLC:
00024314                            	include "_inc\Sonic dynamic pattern load cues.asm"
00024314                            DPLC_cc21:
00024314 0000                       DPLC_cc21_0: 	dc.w DPLC_cc21_B6-DPLC_cc21
00024316 0000                       DPLC_cc21_2: 	dc.w DPLC_cc21_B7-DPLC_cc21
00024318 0000                       DPLC_cc21_4: 	dc.w DPLC_cc21_BC-DPLC_cc21
0002431A 0000                       DPLC_cc21_6: 	dc.w DPLC_cc21_C3-DPLC_cc21
0002431C 0000                       DPLC_cc21_8: 	dc.w DPLC_cc21_CA-DPLC_cc21
0002431E 0000                       DPLC_cc21_A: 	dc.w DPLC_cc21_D1-DPLC_cc21
00024320 0000                       DPLC_cc21_C: 	dc.w DPLC_cc21_D8-DPLC_cc21
00024322 0000                       DPLC_cc21_E: 	dc.w DPLC_cc21_E1-DPLC_cc21
00024324 0000                       DPLC_cc21_10: 	dc.w DPLC_cc21_E6-DPLC_cc21
00024326 0000                       DPLC_cc21_12: 	dc.w DPLC_cc21_EB-DPLC_cc21
00024328 0000                       DPLC_cc21_14: 	dc.w DPLC_cc21_F4-DPLC_cc21
0002432A 0000                       DPLC_cc21_16: 	dc.w DPLC_cc21_F9-DPLC_cc21
0002432C 0000                       DPLC_cc21_18: 	dc.w DPLC_cc21_100-DPLC_cc21
0002432E 0000                       DPLC_cc21_1A: 	dc.w DPLC_cc21_10B-DPLC_cc21
00024330 0000                       DPLC_cc21_1C: 	dc.w DPLC_cc21_118-DPLC_cc21
00024332 0000                       DPLC_cc21_1E: 	dc.w DPLC_cc21_121-DPLC_cc21
00024334 0000                       DPLC_cc21_20: 	dc.w DPLC_cc21_12C-DPLC_cc21
00024336 0000                       DPLC_cc21_22: 	dc.w DPLC_cc21_135-DPLC_cc21
00024338 0000                       DPLC_cc21_24: 	dc.w DPLC_cc21_140-DPLC_cc21
0002433A 0000                       DPLC_cc21_26: 	dc.w DPLC_cc21_149-DPLC_cc21
0002433C 0000                       DPLC_cc21_28: 	dc.w DPLC_cc21_14E-DPLC_cc21
0002433E 0000                       DPLC_cc21_2A: 	dc.w DPLC_cc21_153-DPLC_cc21
00024340 0000                       DPLC_cc21_2C: 	dc.w DPLC_cc21_15C-DPLC_cc21
00024342 0000                       DPLC_cc21_2E: 	dc.w DPLC_cc21_161-DPLC_cc21
00024344 0000                       DPLC_cc21_30: 	dc.w DPLC_cc21_168-DPLC_cc21
00024346 0000                       DPLC_cc21_32: 	dc.w DPLC_cc21_175-DPLC_cc21
00024348 0000                       DPLC_cc21_34: 	dc.w DPLC_cc21_182-DPLC_cc21
0002434A 0000                       DPLC_cc21_36: 	dc.w DPLC_cc21_18B-DPLC_cc21
0002434C 0000                       DPLC_cc21_38: 	dc.w DPLC_cc21_196-DPLC_cc21
0002434E 0000                       DPLC_cc21_3A: 	dc.w DPLC_cc21_19F-DPLC_cc21
00024350 0000                       DPLC_cc21_3C: 	dc.w DPLC_cc21_1AA-DPLC_cc21
00024352 0000                       DPLC_cc21_3E: 	dc.w DPLC_cc21_1AF-DPLC_cc21
00024354 0000                       DPLC_cc21_40: 	dc.w DPLC_cc21_1B4-DPLC_cc21
00024356 0000                       DPLC_cc21_42: 	dc.w DPLC_cc21_1B9-DPLC_cc21
00024358 0000                       DPLC_cc21_44: 	dc.w DPLC_cc21_1BE-DPLC_cc21
0002435A 0000                       DPLC_cc21_46: 	dc.w DPLC_cc21_1C7-DPLC_cc21
0002435C 0000                       DPLC_cc21_48: 	dc.w DPLC_cc21_1CE-DPLC_cc21
0002435E 0000                       DPLC_cc21_4A: 	dc.w DPLC_cc21_1D7-DPLC_cc21
00024360 0000                       DPLC_cc21_4C: 	dc.w DPLC_cc21_1DE-DPLC_cc21
00024362 0000                       DPLC_cc21_4E: 	dc.w DPLC_cc21_1E3-DPLC_cc21
00024364 0000                       DPLC_cc21_50: 	dc.w DPLC_cc21_1E8-DPLC_cc21
00024366 0000                       DPLC_cc21_52: 	dc.w DPLC_cc21_1ED-DPLC_cc21
00024368 0000                       DPLC_cc21_54: 	dc.w DPLC_cc21_1F2-DPLC_cc21
0002436A 0000                       DPLC_cc21_56: 	dc.w DPLC_cc21_1FB-DPLC_cc21
0002436C 0000                       DPLC_cc21_58: 	dc.w DPLC_cc21_200-DPLC_cc21
0002436E 0000                       DPLC_cc21_5A: 	dc.w DPLC_cc21_209-DPLC_cc21
00024370 0000                       DPLC_cc21_5C: 	dc.w DPLC_cc21_20E-DPLC_cc21
00024372 0000                       DPLC_cc21_5E: 	dc.w DPLC_cc21_211-DPLC_cc21
00024374 0000                       DPLC_cc21_60: 	dc.w DPLC_cc21_214-DPLC_cc21
00024376 0000                       DPLC_cc21_62: 	dc.w DPLC_cc21_217-DPLC_cc21
00024378 0000                       DPLC_cc21_64: 	dc.w DPLC_cc21_21A-DPLC_cc21
0002437A 0000                       DPLC_cc21_66: 	dc.w DPLC_cc21_21D-DPLC_cc21
0002437C 0000                       DPLC_cc21_68: 	dc.w DPLC_cc21_222-DPLC_cc21
0002437E 0000                       DPLC_cc21_6A: 	dc.w DPLC_cc21_225-DPLC_cc21
00024380 0000                       DPLC_cc21_6C: 	dc.w DPLC_cc21_22A-DPLC_cc21
00024382 0000                       DPLC_cc21_6E: 	dc.w DPLC_cc21_22D-DPLC_cc21
00024384 0000                       DPLC_cc21_70: 	dc.w DPLC_cc21_232-DPLC_cc21
00024386 0000                       DPLC_cc21_72: 	dc.w DPLC_cc21_23B-DPLC_cc21
00024388 0000                       DPLC_cc21_74: 	dc.w DPLC_cc21_240-DPLC_cc21
0002438A 0000                       DPLC_cc21_76: 	dc.w DPLC_cc21_247-DPLC_cc21
0002438C 0000                       DPLC_cc21_78: 	dc.w DPLC_cc21_24E-DPLC_cc21
0002438E 0000                       DPLC_cc21_7A: 	dc.w DPLC_cc21_255-DPLC_cc21
00024390 0000                       DPLC_cc21_7C: 	dc.w DPLC_cc21_258-DPLC_cc21
00024392 0000                       DPLC_cc21_7E: 	dc.w DPLC_cc21_25F-DPLC_cc21
00024394 0000                       DPLC_cc21_80: 	dc.w DPLC_cc21_266-DPLC_cc21
00024396 0000                       DPLC_cc21_82: 	dc.w DPLC_cc21_26D-DPLC_cc21
00024398 0000                       DPLC_cc21_84: 	dc.w DPLC_cc21_276-DPLC_cc21
0002439A 0000                       DPLC_cc21_86: 	dc.w DPLC_cc21_27F-DPLC_cc21
0002439C 0000                       DPLC_cc21_88: 	dc.w DPLC_cc21_28A-DPLC_cc21
0002439E 0000                       DPLC_cc21_8A: 	dc.w DPLC_cc21_295-DPLC_cc21
000243A0 0000                       DPLC_cc21_8C: 	dc.w DPLC_cc21_29A-DPLC_cc21
000243A2 0000                       DPLC_cc21_8E: 	dc.w DPLC_cc21_2A1-DPLC_cc21
000243A4 0000                       DPLC_cc21_90: 	dc.w DPLC_cc21_2A6-DPLC_cc21
000243A6 0000                       DPLC_cc21_92: 	dc.w DPLC_cc21_2AD-DPLC_cc21
000243A8 0000                       DPLC_cc21_94: 	dc.w DPLC_cc21_2B2-DPLC_cc21
000243AA 0000                       DPLC_cc21_96: 	dc.w DPLC_cc21_2B9-DPLC_cc21
000243AC 0000                       DPLC_cc21_98: 	dc.w DPLC_cc21_2C0-DPLC_cc21
000243AE 0000                       DPLC_cc21_9A: 	dc.w DPLC_cc21_2CB-DPLC_cc21
000243B0 0000                       DPLC_cc21_9C: 	dc.w DPLC_cc21_2D6-DPLC_cc21
000243B2 0000                       DPLC_cc21_9E: 	dc.w DPLC_cc21_2DB-DPLC_cc21
000243B4 0000                       DPLC_cc21_A0: 	dc.w DPLC_cc21_2E2-DPLC_cc21
000243B6 0000                       DPLC_cc21_A2: 	dc.w DPLC_cc21_2E5-DPLC_cc21
000243B8 0000                       DPLC_cc21_A4: 	dc.w DPLC_cc21_2E8-DPLC_cc21
000243BA 0000                       DPLC_cc21_A6: 	dc.w DPLC_cc21_2EB-DPLC_cc21
000243BC 0000                       DPLC_cc21_A8: 	dc.w DPLC_cc21_2F2-DPLC_cc21
000243BE 0000                       DPLC_cc21_AA: 	dc.w DPLC_cc21_2F9-DPLC_cc21
000243C0 0000                       DPLC_cc21_AC: 	dc.w DPLC_cc21_300-DPLC_cc21
000243C2 0000                       DPLC_cc21_AE: 	dc.w DPLC_cc21_307-DPLC_cc21
000243C4 0000                       DPLC_cc21_B0: 	dc.w DPLC_cc21_30C-DPLC_cc21
000243C6 0000                       DPLC_cc21_B2: 	dc.w DPLC_cc21_311-DPLC_cc21
000243C8 0000                       DPLC_cc21_B4: 	dc.w DPLC_cc21_316-DPLC_cc21
000243CA 00                         DPLC_cc21_B6: 	dc.b $0
000243CB 02                         DPLC_cc21_B7: 	dc.b $2
000243CC F000                       	dc.b $F0, $0
000243CE 1010                       	dc.b $10, $10
000243D0 03                         DPLC_cc21_BC: 	dc.b $3
000243D1 5012                       	dc.b $50, $12
000243D3 5018                       	dc.b $50, $18
000243D5 201E                       	dc.b $20, $1E
000243D7 03                         DPLC_cc21_C3: 	dc.b $3
000243D8 5021                       	dc.b $50, $21
000243DA 5018                       	dc.b $50, $18
000243DC 201E                       	dc.b $20, $1E
000243DE 03                         DPLC_cc21_CA: 	dc.b $3
000243DF 5021                       	dc.b $50, $21
000243E1 5018                       	dc.b $50, $18
000243E3 2027                       	dc.b $20, $27
000243E5 03                         DPLC_cc21_D1: 	dc.b $3
000243E6 802A                       	dc.b $80, $2A
000243E8 2033                       	dc.b $20, $33
000243EA 2036                       	dc.b $20, $36
000243EC 04                         DPLC_cc21_D8: 	dc.b $4
000243ED 7039                       	dc.b $70, $39
000243EF 5041                       	dc.b $50, $41
000243F1 5047                       	dc.b $50, $47
000243F3 104D                       	dc.b $10, $4D
000243F5 02                         DPLC_cc21_E1: 	dc.b $2
000243F6 7039                       	dc.b $70, $39
000243F8 B04F                       	dc.b $B0, $4F
000243FA 02                         DPLC_cc21_E6: 	dc.b $2
000243FB 505B                       	dc.b $50, $5B
000243FD 8061                       	dc.b $80, $61
000243FF 04                         DPLC_cc21_EB: 	dc.b $4
00024400 505B                       	dc.b $50, $5B
00024402 506A                       	dc.b $50, $6A
00024404 5070                       	dc.b $50, $70
00024406 1076                       	dc.b $10, $76
00024408 02                         DPLC_cc21_F4: 	dc.b $2
00024409 F51B                       	dc.b $F5, $1B
0002440B 152B                       	dc.b $15, $2B
0002440D 03                         DPLC_cc21_F9: 	dc.b $3
0002440E 7039                       	dc.b $70, $39
00024410 3079                       	dc.b $30, $79
00024412 507D                       	dc.b $50, $7D
00024414 05                         DPLC_cc21_100: 	dc.b $5
00024415 5083                       	dc.b $50, $83
00024417 5089                       	dc.b $50, $89
00024419 208F                       	dc.b $20, $8F
0002441B 5092                       	dc.b $50, $92
0002441D 0098                       	dc.b $0, $98
0002441F 06                         DPLC_cc21_10B: 	dc.b $6
00024420 5083                       	dc.b $50, $83
00024422 1099                       	dc.b $10, $99
00024424 309B                       	dc.b $30, $9B
00024426 509F                       	dc.b $50, $9F
00024428 30A5                       	dc.b $30, $A5
0002442A 00A9                       	dc.b $0, $A9
0002442C 04                         DPLC_cc21_118: 	dc.b $4
0002442D 50AA                       	dc.b $50, $AA
0002442F 10B0                       	dc.b $10, $B0
00024431 70B2                       	dc.b $70, $B2
00024433 20BA                       	dc.b $20, $BA
00024435 05                         DPLC_cc21_121: 	dc.b $5
00024436 50BD                       	dc.b $50, $BD
00024438 30C3                       	dc.b $30, $C3
0002443A 70C7                       	dc.b $70, $C7
0002443C 20CF                       	dc.b $20, $CF
0002443E 10D2                       	dc.b $10, $D2
00024440 04                         DPLC_cc21_12C: 	dc.b $4
00024441 50BD                       	dc.b $50, $BD
00024443 10D4                       	dc.b $10, $D4
00024445 70D6                       	dc.b $70, $D6
00024447 20DE                       	dc.b $20, $DE
00024449 05                         DPLC_cc21_135: 	dc.b $5
0002444A 5083                       	dc.b $50, $83
0002444C 1099                       	dc.b $10, $99
0002444E 008F                       	dc.b $0, $8F
00024450 70E1                       	dc.b $70, $E1
00024452 20E9                       	dc.b $20, $E9
00024454 04                         DPLC_cc21_140: 	dc.b $4
00024455 70EC                       	dc.b $70, $EC
00024457 50F4                       	dc.b $50, $F4
00024459 10FA                       	dc.b $10, $FA
0002445B 50FC                       	dc.b $50, $FC
0002445D 02                         DPLC_cc21_149: 	dc.b $2
0002445E 70EC                       	dc.b $70, $EC
00024460 B102                       	dc.b $B1, $2
00024462 02                         DPLC_cc21_14E: 	dc.b $2
00024463 510E                       	dc.b $51, $E
00024465 8114                       	dc.b $81, $14
00024467 04                         DPLC_cc21_153: 	dc.b $4
00024468 510E                       	dc.b $51, $E
0002446A 511D                       	dc.b $51, $1D
0002446C 1123                       	dc.b $11, $23
0002446E 5125                       	dc.b $51, $25
00024470 02                         DPLC_cc21_15C: 	dc.b $2
00024471 510E                       	dc.b $51, $E
00024473 B12B                       	dc.b $B1, $2B
00024475 03                         DPLC_cc21_161: 	dc.b $3
00024476 70EC                       	dc.b $70, $EC
00024478 0102                       	dc.b $1, $2
0002447A 8137                       	dc.b $81, $37
0002447C 06                         DPLC_cc21_168: 	dc.b $6
0002447D 5140                       	dc.b $51, $40
0002447F 1146                       	dc.b $11, $46
00024481 1148                       	dc.b $11, $48
00024483 814A                       	dc.b $81, $4A
00024485 0153                       	dc.b $1, $53
00024487 0154                       	dc.b $1, $54
00024489 06                         DPLC_cc21_175: 	dc.b $6
0002448A 5140                       	dc.b $51, $40
0002448C 2155                       	dc.b $21, $55
0002448E 1158                       	dc.b $11, $58
00024490 115A                       	dc.b $11, $5A
00024492 815C                       	dc.b $81, $5C
00024494 0153                       	dc.b $1, $53
00024496 04                         DPLC_cc21_182: 	dc.b $4
00024497 5165                       	dc.b $51, $65
00024499 116B                       	dc.b $11, $6B
0002449B 816D                       	dc.b $81, $6D
0002449D 1176                       	dc.b $11, $76
0002449F 05                         DPLC_cc21_18B: 	dc.b $5
000244A0 5178                       	dc.b $51, $78
000244A2 217E                       	dc.b $21, $7E
000244A4 1181                       	dc.b $11, $81
000244A6 7183                       	dc.b $71, $83
000244A8 218B                       	dc.b $21, $8B
000244AA 04                         DPLC_cc21_196: 	dc.b $4
000244AB 5178                       	dc.b $51, $78
000244AD 118E                       	dc.b $11, $8E
000244AF 8190                       	dc.b $81, $90
000244B1 1199                       	dc.b $11, $99
000244B3 05                         DPLC_cc21_19F: 	dc.b $5
000244B4 5140                       	dc.b $51, $40
000244B6 819B                       	dc.b $81, $9B
000244B8 115A                       	dc.b $11, $5A
000244BA 11A4                       	dc.b $11, $A4
000244BC 0153                       	dc.b $1, $53
000244BE 02                         DPLC_cc21_1AA: 	dc.b $2
000244BF 51A6                       	dc.b $51, $A6
000244C1 B1AC                       	dc.b $B1, $AC
000244C3 02                         DPLC_cc21_1AF: 	dc.b $2
000244C4 505B                       	dc.b $50, $5B
000244C6 B1B8                       	dc.b $B1, $B8
000244C8 02                         DPLC_cc21_1B4: 	dc.b $2
000244C9 51A6                       	dc.b $51, $A6
000244CB B1C4                       	dc.b $B1, $C4
000244CD 02                         DPLC_cc21_1B9: 	dc.b $2
000244CE 505B                       	dc.b $50, $5B
000244D0 B1D0                       	dc.b $B1, $D0
000244D2 04                         DPLC_cc21_1BE: 	dc.b $4
000244D3 51DC                       	dc.b $51, $DC
000244D5 11E2                       	dc.b $11, $E2
000244D7 B1E4                       	dc.b $B1, $E4
000244D9 01F0                       	dc.b $1, $F0
000244DB 03                         DPLC_cc21_1C7: 	dc.b $3
000244DC 51F1                       	dc.b $51, $F1
000244DE 11F7                       	dc.b $11, $F7
000244E0 B1F9                       	dc.b $B1, $F9
000244E2 04                         DPLC_cc21_1CE: 	dc.b $4
000244E3 51DC                       	dc.b $51, $DC
000244E5 1205                       	dc.b $12, $5
000244E7 B207                       	dc.b $B2, $7
000244E9 01F0                       	dc.b $1, $F0
000244EB 03                         DPLC_cc21_1D7: 	dc.b $3
000244EC 51F1                       	dc.b $51, $F1
000244EE 11F7                       	dc.b $11, $F7
000244F0 B213                       	dc.b $B2, $13
000244F2 02                         DPLC_cc21_1DE: 	dc.b $2
000244F3 521F                       	dc.b $52, $1F
000244F5 B225                       	dc.b $B2, $25
000244F7 02                         DPLC_cc21_1E3: 	dc.b $2
000244F8 510E                       	dc.b $51, $E
000244FA B231                       	dc.b $B2, $31
000244FC 02                         DPLC_cc21_1E8: 	dc.b $2
000244FD 521F                       	dc.b $52, $1F
000244FF B23D                       	dc.b $B2, $3D
00024501 02                         DPLC_cc21_1ED: 	dc.b $2
00024502 510E                       	dc.b $51, $E
00024504 B249                       	dc.b $B2, $49
00024506 04                         DPLC_cc21_1F2: 	dc.b $4
00024507 5255                       	dc.b $52, $55
00024509 125B                       	dc.b $12, $5B
0002450B B25D                       	dc.b $B2, $5D
0002450D 0269                       	dc.b $2, $69
0002450F 02                         DPLC_cc21_1FB: 	dc.b $2
00024510 726A                       	dc.b $72, $6A
00024512 B272                       	dc.b $B2, $72
00024514 04                         DPLC_cc21_200: 	dc.b $4
00024515 5255                       	dc.b $52, $55
00024517 127E                       	dc.b $12, $7E
00024519 B280                       	dc.b $B2, $80
0002451B 0269                       	dc.b $2, $69
0002451D 02                         DPLC_cc21_209: 	dc.b $2
0002451E 726A                       	dc.b $72, $6A
00024520 B28C                       	dc.b $B2, $8C
00024522 01                         DPLC_cc21_20E: 	dc.b $1
00024523 F298                       	dc.b $F2, $98
00024525 01                         DPLC_cc21_211: 	dc.b $1
00024526 F2A8                       	dc.b $F2, $A8
00024528 01                         DPLC_cc21_214: 	dc.b $1
00024529 F2B8                       	dc.b $F2, $B8
0002452B 01                         DPLC_cc21_217: 	dc.b $1
0002452C F2C8                       	dc.b $F2, $C8
0002452E 01                         DPLC_cc21_21A: 	dc.b $1
0002452F F2D8                       	dc.b $F2, $D8
00024531 02                         DPLC_cc21_21D: 	dc.b $2
00024532 B2E8                       	dc.b $B2, $E8
00024534 22F4                       	dc.b $22, $F4
00024536 01                         DPLC_cc21_222: 	dc.b $1
00024537 F2F7                       	dc.b $F2, $F7
00024539 02                         DPLC_cc21_225: 	dc.b $2
0002453A B307                       	dc.b $B3, $7
0002453C 2313                       	dc.b $23, $13
0002453E 01                         DPLC_cc21_22A: 	dc.b $1
0002453F F316                       	dc.b $F3, $16
00024541 02                         DPLC_cc21_22D: 	dc.b $2
00024542 5326                       	dc.b $53, $26
00024544 B32C                       	dc.b $B3, $2C
00024546 04                         DPLC_cc21_232: 	dc.b $4
00024547 5338                       	dc.b $53, $38
00024549 733E                       	dc.b $73, $3E
0002454B 1346                       	dc.b $13, $46
0002454D 0348                       	dc.b $3, $48
0002454F 02                         DPLC_cc21_23B: 	dc.b $2
00024550 D349                       	dc.b $D3, $49
00024552 3517                       	dc.b $35, $17
00024554 03                         DPLC_cc21_240: 	dc.b $3
00024555 2357                       	dc.b $23, $57
00024557 235A                       	dc.b $23, $5A
00024559 F35D                       	dc.b $F3, $5D
0002455B 03                         DPLC_cc21_247: 	dc.b $3
0002455C B36D                       	dc.b $B3, $6D
0002455E 7379                       	dc.b $73, $79
00024560 0078                       	dc.b $0, $78
00024562 03                         DPLC_cc21_24E: 	dc.b $3
00024563 7381                       	dc.b $73, $81
00024565 3389                       	dc.b $33, $89
00024567 238D                       	dc.b $23, $8D
00024569 01                         DPLC_cc21_255: 	dc.b $1
0002456A 8390                       	dc.b $83, $90
0002456C 03                         DPLC_cc21_258: 	dc.b $3
0002456D 7399                       	dc.b $73, $99
0002456F 03A1                       	dc.b $3, $A1
00024571 33A2                       	dc.b $33, $A2
00024573 03                         DPLC_cc21_25F: 	dc.b $3
00024574 73A6                       	dc.b $73, $A6
00024576 33AE                       	dc.b $33, $AE
00024578 23B2                       	dc.b $23, $B2
0002457A 03                         DPLC_cc21_266: 	dc.b $3
0002457B B3B5                       	dc.b $B3, $B5
0002457D 13C1                       	dc.b $13, $C1
0002457F 03C3                       	dc.b $3, $C3
00024581 04                         DPLC_cc21_26D: 	dc.b $4
00024582 B3C4                       	dc.b $B3, $C4
00024584 33D0                       	dc.b $33, $D0
00024586 03D4                       	dc.b $3, $D4
00024588 03D5                       	dc.b $3, $D5
0002458A 04                         DPLC_cc21_276: 	dc.b $4
0002458B B3D6                       	dc.b $B3, $D6
0002458D 33E2                       	dc.b $33, $E2
0002458F 03E6                       	dc.b $3, $E6
00024591 03E7                       	dc.b $3, $E7
00024593 05                         DPLC_cc21_27F: 	dc.b $5
00024594 83E8                       	dc.b $83, $E8
00024596 13F1                       	dc.b $13, $F1
00024598 53F3                       	dc.b $53, $F3
0002459A 13F9                       	dc.b $13, $F9
0002459C 03FB                       	dc.b $3, $FB
0002459E 05                         DPLC_cc21_28A: 	dc.b $5
0002459F 83FC                       	dc.b $83, $FC
000245A1 1405                       	dc.b $14, $5
000245A3 53F3                       	dc.b $53, $F3
000245A5 13F9                       	dc.b $13, $F9
000245A7 03FB                       	dc.b $3, $FB
000245A9 02                         DPLC_cc21_295: 	dc.b $2
000245AA 8407                       	dc.b $84, $7
000245AC 7410                       	dc.b $74, $10
000245AE 03                         DPLC_cc21_29A: 	dc.b $3
000245AF 8418                       	dc.b $84, $18
000245B1 2421                       	dc.b $24, $21
000245B3 1424                       	dc.b $14, $24
000245B5 02                         DPLC_cc21_2A1: 	dc.b $2
000245B6 8426                       	dc.b $84, $26
000245B8 742F                       	dc.b $74, $2F
000245BA 03                         DPLC_cc21_2A6: 	dc.b $3
000245BB 8418                       	dc.b $84, $18
000245BD 2437                       	dc.b $24, $37
000245BF 143A                       	dc.b $14, $3A
000245C1 02                         DPLC_cc21_2AD: 	dc.b $2
000245C2 543C                       	dc.b $54, $3C
000245C4 B442                       	dc.b $B4, $42
000245C6 03                         DPLC_cc21_2B2: 	dc.b $3
000245C7 844E                       	dc.b $84, $4E
000245C9 3457                       	dc.b $34, $57
000245CB 045B                       	dc.b $4, $5B
000245CD 03                         DPLC_cc21_2B9: 	dc.b $3
000245CE 745C                       	dc.b $74, $5C
000245D0 1464                       	dc.b $14, $64
000245D2 B466                       	dc.b $B4, $66
000245D4 05                         DPLC_cc21_2C0: 	dc.b $5
000245D5 7472                       	dc.b $74, $72
000245D7 147A                       	dc.b $14, $7A
000245D9 547C                       	dc.b $54, $7C
000245DB 3482                       	dc.b $34, $82
000245DD 0486                       	dc.b $4, $86
000245DF 05                         DPLC_cc21_2CB: 	dc.b $5
000245E0 7487                       	dc.b $74, $87
000245E2 147A                       	dc.b $14, $7A
000245E4 548F                       	dc.b $54, $8F
000245E6 3482                       	dc.b $34, $82
000245E8 0486                       	dc.b $4, $86
000245EA 02                         DPLC_cc21_2D6: 	dc.b $2
000245EB 2495                       	dc.b $24, $95
000245ED F498                       	dc.b $F4, $98
000245EF 03                         DPLC_cc21_2DB: 	dc.b $3
000245F0 24A8                       	dc.b $24, $A8
000245F2 B4AB                       	dc.b $B4, $AB
000245F4 24B7                       	dc.b $24, $B7
000245F6 01                         DPLC_cc21_2E2: 	dc.b $1
000245F7 B4BA                       	dc.b $B4, $BA
000245F9 01                         DPLC_cc21_2E5: 	dc.b $1
000245FA 54C6                       	dc.b $54, $C6
000245FC 01                         DPLC_cc21_2E8: 	dc.b $1
000245FD 14CC                       	dc.b $14, $CC
000245FF 03                         DPLC_cc21_2EB: 	dc.b $3
00024600 7381                       	dc.b $73, $81
00024602 3389                       	dc.b $33, $89
00024604 238D                       	dc.b $23, $8D
00024606 03                         DPLC_cc21_2F2: 	dc.b $3
00024607 7399                       	dc.b $73, $99
00024609 03A1                       	dc.b $3, $A1
0002460B 33A2                       	dc.b $33, $A2
0002460D 03                         DPLC_cc21_2F9: 	dc.b $3
0002460E B4CE                       	dc.b $B4, $CE
00024610 14DA                       	dc.b $14, $DA
00024612 34DC                       	dc.b $34, $DC
00024614 03                         DPLC_cc21_300: 	dc.b $3
00024615 54E0                       	dc.b $54, $E0
00024617 B4E6                       	dc.b $B4, $E6
00024619 1074                       	dc.b $10, $74
0002461B 02                         DPLC_cc21_307: 	dc.b $2
0002461C F4F2                       	dc.b $F4, $F2
0002461E 2502                       	dc.b $25, $2
00024620 02                         DPLC_cc21_30C: 	dc.b $2
00024621 F505                       	dc.b $F5, $5
00024623 1515                       	dc.b $15, $15
00024625 02                         DPLC_cc21_311: 	dc.b $2
00024626 F52D                       	dc.b $F5, $2D
00024628 253D                       	dc.b $25, $3D
0002462A 02                         DPLC_cc21_316: 	dc.b $2
0002462B F540                       	dc.b $F5, $40
0002462D 2550                       	dc.b $25, $50
00024630 00                         	even
00024630 00                         	even
00024630                            
00024630                            ; ---------------------------------------------------------------------------
00024630                            ; Uncompressed graphics	- Sonic
00024630                            ; ---------------------------------------------------------------------------
00024630                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002F090                            		even
0002F090                            ; ---------------------------------------------------------------------------
0002F090                            ; Compressed graphics - various
0002F090                            ; ---------------------------------------------------------------------------
0002F090                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002F194                            		even
0002F194                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002F1CE                            		even
0002F1CE                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002F364                            		even
0002F364                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002F4AC                            		even
0002F4AC                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F5B6                            		even
0002F5B6                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F608                            		even
0002F608                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002F850                            		even
0002F850                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002F9D6                            		even
0002F9D6                            ; ---------------------------------------------------------------------------
0002F9D6                            ; Sprite mappings - walls of the special stage
0002F9D6                            ; ---------------------------------------------------------------------------
0002F9D6                            Map_SSWalls:
0002F9D6                            	include "_maps\SSwalls.asm"
0002F9D6                            ; ---------------------------------------------------------------------------
0002F9D6                            ; Sprite mappings - walls of the special stage
0002F9D6                            ; ---------------------------------------------------------------------------
0002F9D6 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002F9DA 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002F9DE 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002F9E2 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002F9E6 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002F9EA 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002F9EE 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002F9F2 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002F9F6 01                         byte_2C584:	dc.b 1
0002F9F7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002F9FC 01                         byte_2C58A:	dc.b 1
0002F9FD F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002FA02 01                         byte_2C590:	dc.b 1
0002FA03 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002FA08 01                         byte_2C596:	dc.b 1
0002FA09 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002FA0E 01                         byte_2C59C:	dc.b 1
0002FA0F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002FA14 01                         byte_2C5A2:	dc.b 1
0002FA15 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002FA1A 01                         byte_2C5A8:	dc.b 1
0002FA1B F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002FA20 01                         byte_2C5AE:	dc.b 1
0002FA21 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002FA26 01                         byte_2C5B4:	dc.b 1
0002FA27 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002FA2C 01                         byte_2C5BA:	dc.b 1
0002FA2D F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002FA32 01                         byte_2C5C0:	dc.b 1
0002FA33 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002FA38 01                         byte_2C5C6:	dc.b 1
0002FA39 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002FA3E 01                         byte_2C5CC:	dc.b 1
0002FA3F F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002FA44 01                         byte_2C5D2:	dc.b 1
0002FA45 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002FA4A 01                         byte_2C5D8:	dc.b 1
0002FA4B F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002FA50 01                         byte_2C5DE:	dc.b 1
0002FA51 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002FA56                            		even
0002FA56                            		even
0002FA56                            ; ---------------------------------------------------------------------------
0002FA56                            ; Compressed graphics - special stage
0002FA56                            ; ---------------------------------------------------------------------------
0002FA56                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003038E                            		even
0003038E                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000304C2                            		even
000304C2                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00031152                            		even
00031152                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00031452                            		even
00031452                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00031946                            		even
00031946                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00031A34                            		even
00031A34                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00031B04                            		even
00031B04                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00031BFA                            		even
00031BFA                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00031C58                            		even
00031C58                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00031CEA                            		even
00031CEA                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00031DAC                            		even
00031DAC                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00031E7A                            		even
00031E7A                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00031F46                            		even
00031F46                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003200E                            		even
0003200E                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000320D8                            		even
000320D8                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000321A8                            		even
000321A8                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003239C                            		even
0003239C                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00032504                            		even
00032504                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000325B4                            		even
000325B4                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003268E                            		even
0003268E                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00032712                            		even
00032712                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00032890                            		even
00032890                            ; ---------------------------------------------------------------------------
00032890                            ; Compressed graphics - GHZ stuff
00032890                            ; ---------------------------------------------------------------------------
00032890                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000328DA                            		even
000328DA                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000329F4                            		even
000329F4                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00032AE0                            		even
00032AE0                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00032B28                            		even
00032B28                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00032CC6                            		even
00032CC6                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00032D42                            		even
00032D42                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00032F56                            		even
00032F56                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00033082                            		even
00033082                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000331B0                            		even
000331B0                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003324E                            		even
0003324E                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000332AE                            		even
000332AE                            ; ---------------------------------------------------------------------------
000332AE                            ; Compressed graphics - LZ stuff
000332AE                            ; ---------------------------------------------------------------------------
000332AE                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000333D2                            		even
000333D2                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00033BC6                            		even
00033BC6                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00033D46                            		even
00033D46                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00033EB0                            		even
00033EB0                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00034506                            		even
00034506                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000345BC                            		even
000345BC                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003465E                            		even
0003465E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000347BA                            		even
000347BA                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003481E                            		even
0003481E                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00034970                            		even
00034970                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00034E52                            		even
00034E52                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00034FC2                            		even
00034FC2                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003527A                            		even
0003527A                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000353B2                            		even
000353B2                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000354DC                            		even
000354DC                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000355EC                            		even
000355EC                            ; ---------------------------------------------------------------------------
000355EC                            ; Compressed graphics - MZ stuff
000355EC                            ; ---------------------------------------------------------------------------
000355EC                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003587A                            		even
0003587A                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00035938                            		even
00035938                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000359F0                            		even
000359F0                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00035A44                            		even
00035A44                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00035D22                            		even
00035D22                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00036638                            		even
00036638                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003679C                            		even
0003679C                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00036824                            		even
00036824                            ; ---------------------------------------------------------------------------
00036824                            ; Compressed graphics - SLZ stuff
00036824                            ; ---------------------------------------------------------------------------
00036824                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00036A60                            		even
00036A60                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00036BA6                            		even
00036BA6                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00036DEA                            		even
00036DEA                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00036E4C                            		even
00036E4C                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00036F2E                            		even
00036F2E                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00037110                            		even
00037110                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003721C                            		even
0003721C                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000372C0                            		even
000372C0                            ; ---------------------------------------------------------------------------
000372C0                            ; Compressed graphics - SYZ stuff
000372C0                            ; ---------------------------------------------------------------------------
000372C0                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003742A                            		even
0003742A                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003748C                            		even
0003748C                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003756E                            		even
0003756E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000377FC                            		even
000377FC                            ; ---------------------------------------------------------------------------
000377FC                            ; Compressed graphics - SBZ stuff
000377FC                            ; ---------------------------------------------------------------------------
000377FC                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00037850                            		even
00037850                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00037AEC                            		even
00037AEC                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00037CF0                            		even
00037CF0                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00037E8E                            		even
00037E8E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000381BE                            		even
000381BE                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003839C                            		even
0003839C                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
000383F4                            		even
000383F4                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000385BE 00                         		even
000385BE                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000386BC                            		even
000386BC                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00038848                            		even
00038848                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00038898                            		even
00038898                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000388F0                            		even
000388F0                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000389EC                            		even
000389EC                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00038B02                            		even
00038B02                            ; ---------------------------------------------------------------------------
00038B02                            ; Compressed graphics - enemies
00038B02                            ; ---------------------------------------------------------------------------
00038B02                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00038EC2                            		even
00038EC2                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003906C 00                         		even
0003906C                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003942E 00                         		even
0003942E                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00039616                            		even
00039616                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000397CE 00                         		even
000397CE                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00039A36                            		even
00039A36                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00039CC0                            		even
00039CC0                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003A1E4                            		even
0003A1E4                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003A3DA                            		even
0003A3DA                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003A9F8                            		even
0003A9F8                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003ADE0                            		even
0003ADE0                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003B0DC                            		even
0003B0DC                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003B324                            		even
0003B324                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003B5BC                            		even
0003B5BC                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003B79A                            		even
0003B79A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003B928                            		even
0003B928                            ; ---------------------------------------------------------------------------
0003B928                            ; Compressed graphics - various
0003B928                            ; ---------------------------------------------------------------------------
0003B928                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003BF36                            		even
0003BF36                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003C02C                            		even
0003C02C                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003C132                            		even
0003C132                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003C226                            		even
0003C226                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003C76A                            		even
0003C76A                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003CDD0                            		even
0003CDD0                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003CE80                            		even
0003CE80                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003D012                            		even
0003D012                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003D114                            		even
0003D114                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003D1F0                            		even
0003D1F0                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003D66C                            		even
0003D66C                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003D72C                            		even
0003D72C                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003D8A0                            		even
0003D8A0                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003DBA2                            		even
0003DBA2                            ; ---------------------------------------------------------------------------
0003DBA2                            ; Compressed graphics - continue screen
0003DBA2                            ; ---------------------------------------------------------------------------
0003DBA2                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003DE52                            		even
0003DE52                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003E08C                            		even
0003E08C                            ; ---------------------------------------------------------------------------
0003E08C                            ; Compressed graphics - animals
0003E08C                            ; ---------------------------------------------------------------------------
0003E08C                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003E1E4                            		even
0003E1E4                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003E340                            		even
0003E340                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003E4BC                            		even
0003E4BC                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003E5D8                            		even
0003E5D8                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003E70E                            		even
0003E70E                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003E848                            		even
0003E848                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003E9A4                            		even
0003E9A4                            ; ---------------------------------------------------------------------------
0003E9A4                            ; Compressed graphics - primary patterns and block mappings
0003E9A4                            ; ---------------------------------------------------------------------------
0003E9A4                            Blk16_GHZ:	incbin	map16\ghz.bin
0003F2B8                            		even
0003F2B8                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00040BC6                            		even
00040BC6                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00041F46                            		even
00041F46                            Blk256_GHZ:	incbin	map256\ghz.bin
00044244                            		even
00044244                            Blk16_LZ:	incbin	map16\lz.bin
0004450E                            		even
0004450E                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00045F9A                            		even
00045F9A                            Blk256_LZ:	incbin	map256\lz.bin
0004877E                            		even
0004877E                            Blk16_MZ:	incbin	map16\mz.bin
00048EDA                            		even
00048EDA                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004B762                            		even
0004B762                            Blk256_MZ:	incbin	map256\mz.bin
0004CEE6                            		even
0004CEE6                            Blk16_SLZ:	incbin	map16\slz.bin
0004D1CC                            		even
0004D1CC                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004E2EE                            		even
0004E2EE                            Blk256_SLZ:	incbin	map256\slz.bin
0004E4A8                            		even
0004E4A8                            Blk16_SYZ:	incbin	map16\syz.bin
0004F0CE                            		even
0004F0CE                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00053660                            		even
00053660                            Blk256_SYZ:	incbin	map256\syz.bin
000556BC                            		even
000556BC                            Blk16_SBZ:	incbin	map16\sbz.bin
00056556                            		even
00056556                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00058D02                            		even
00058D02                            Blk256_SBZ:	incbin	map256\sbz.bin
0005B752                            		even
0005B752                            ; ---------------------------------------------------------------------------
0005B752                            ; Compressed graphics - bosses and ending sequence
0005B752                            ; ---------------------------------------------------------------------------
0005B752                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005BF6C 00                         		even
0005BF6C                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005C256                            		even
0005C256                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005CADA                            		even
0005CADA                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005D830 00                         		even
0005D830                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005DF98                            		even
0005DF98                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005E518                            		even
0005E518                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005E638                            		even
0005E638                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005E836                            		even
0005E836                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005FA14                            		even
0005FA14                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00060358                            		even
00060358                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006072E                            		even
0006072E                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00060CBE                            		even
00060CBE                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00060F46                            		even
00060F46                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00061544                            		even
00061544                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000617CC                            		even
000617CC                            		incbin	misc\padding2.bin
000618D0                            		even
000618D0                            ; ---------------------------------------------------------------------------
000618D0                            ; Collision data
000618D0                            ; ---------------------------------------------------------------------------
000618D0                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000619D0                            		even
000619D0                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000629D0                            		even
000629D0                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000639D0                            		even
000639D0                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00063B88 00                         		even
00063B88                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00063C50                            		even
00063C50                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00063DE0                            		even
00063DE0                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00063FD4                            		even
00063FD4                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000641DA                            		even
000641DA                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00064432                            		even
00064432                            ; ---------------------------------------------------------------------------
00064432                            ; Special layouts
00064432                            ; ---------------------------------------------------------------------------
00064432                            SS_1:		incbin	sslayout\1.bin
000646AC                            		even
000646AC                            SS_2:		incbin	sslayout\2.bin
00064ABE                            		even
00064ABE                            SS_3:		incbin	sslayout\3.bin
00064E1A                            		even
00064E1A                            SS_4:		incbin	sslayout\4.bin
000652F4                            		even
000652F4                            SS_5:		incbin	sslayout\5.bin
000657C6                            		even
000657C6                            SS_6:		incbin	sslayout\6.bin
00065AD6                            		even
00065AD6                            ; ---------------------------------------------------------------------------
00065AD6                            ; Animated uncompressed graphics
00065AD6                            ; ---------------------------------------------------------------------------
00065AD6                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00065CD6                            		even
00065CD6                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
000660D6                            		even
000660D6                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00066556                            		even
00066556                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00066856                            		even
00066856                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00066E56                            		even
00066E56                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00067156                            		even
00067156                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00067BD6                            		even
00067BD6                            
00067BD6                            ; ---------------------------------------------------------------------------
00067BD6                            ; Level	layout index
00067BD6                            ; ---------------------------------------------------------------------------
00067BD6 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00067BDC 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00067BE2 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00067BE8 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00067BEE 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00067BF4 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00067BFA 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00067C00 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00067C06 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00067C0C 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00067C12 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00067C18 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00067C1E 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00067C24 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00067C2A 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00067C30 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00067C36 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00067C3C 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00067C42 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00067C48 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00067C4E 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00067C54 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00067C5A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00067C60 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00067C66 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00067C6C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00067C72 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00067C78 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00067C7E                            
00067C7E                            Level_GHZ1:	incbin	levels\ghz1.bin
00067D70                            		even
00067D70 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00067D74                            Level_GHZ2:	incbin	levels\ghz2.bin
00067E3C                            		even
00067E3C 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00067E40                            Level_GHZ3:	incbin	levels\ghz3.bin
00067F62                            		even
00067F62                            Level_GHZbg:	incbin	levels\ghzbg.bin
00067F84                            		even
00067F84 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00067F88 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00067F8C                            
00067F8C                            Level_LZ1:	incbin	levels\lz1.bin
0006808E                            		even
0006808E                            Level_LZbg:	incbin	levels\lzbg.bin
00068190                            		even
00068190 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00068194                            Level_LZ2:	incbin	levels\lz2.bin
0006822E                            		even
0006822E 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00068232                            Level_LZ3:	incbin	levels\lz3.bin
0006834C                            		even
0006834C 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00068350                            Level_SBZ3:	incbin	levels\sbz3.bin
0006840A                            		even
0006840A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006840E                            
0006840E                            Level_MZ1:	incbin	levels\mz1.bin
000684AC                            		even
000684AC                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00068526                            		even
00068526                            Level_MZ2:	incbin	levels\mz2.bin
000685CA                            		even
000685CA                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006865C                            		even
0006865C 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00068660                            Level_MZ3:	incbin	levels\mz3.bin
00068742                            		even
00068742                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000687E6 00                         		even
000687E6 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000687EA 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000687EE                            
000687EE                            Level_SLZ1:	incbin	levels\slz1.bin
00068900                            		even
00068900                            Level_SLZbg:	incbin	levels\slzbg.bin
0006891A                            		even
0006891A                            Level_SLZ2:	incbin	levels\slz2.bin
00068A0A                            		even
00068A0A                            Level_SLZ3:	incbin	levels\slz3.bin
00068B24                            		even
00068B24 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00068B28                            
00068B28                            Level_SYZ1:	incbin	levels\syz1.bin
00068BE4 00                         		even
00068BE4                            Level_SYZbg:	incbin	levels\syzbg.bin
00068C1E                            		even
00068C1E 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00068C22                            Level_SYZ2:	incbin	levels\syz2.bin
00068D26                            		even
00068D26 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00068D2A                            Level_SYZ3:	incbin	levels\syz3.bin
00068E84 00                         		even
00068E84 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00068E88 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00068E8C                            
00068E8C                            Level_SBZ1:	incbin	levels\sbz1.bin
00068FAE                            		even
00068FAE                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00068FEC                            		even
00068FEC                            Level_SBZ2:	incbin	levels\sbz2.bin
0006912E                            		even
0006912E                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00069298                            		even
00069298 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006929C 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000692A0                            Level_End:	incbin	levels\ending.bin
000692D0 00                         		even
000692D0 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000692D4                            
000692D4                            ; ---------------------------------------------------------------------------
000692D4                            ; Animated uncompressed giant ring graphics
000692D4                            ; ---------------------------------------------------------------------------
000692D4                            Art_BigRing:	incbin	artunc\bigring.bin
00069F14                            		even
00069F14                            
00069F14                            		incbin	misc\padding3.bin
00069FB0                            		even
00069FB0                            
00069FB0                            ; ---------------------------------------------------------------------------
00069FB0                            ; Sprite locations index
00069FB0                            ; ---------------------------------------------------------------------------
00069FB0 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FB4 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FB8 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FBC 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FC0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FC4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FC8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FCC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FD0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FD4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FD8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FDC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FE0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FE4 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FE8 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FEC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FF0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FF4 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FF8 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069FFC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A000 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A004 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A008 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A00C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A010 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A014 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A018 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A01C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A020 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006A024 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006A028 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006A02C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006A030 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006A034 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006A038 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006A03C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006A040 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006A046                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006A868                            		even
0006A868                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006A91C                            		even
0006A91C                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006B360                            		even
0006B360                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006B708                            		even
0006B708                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006BA3E                            		even
0006BA3E                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006BF8A                            		even
0006BF8A                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006C422                            		even
0006C422                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006C454                            		even
0006C454                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006C486                            		even
0006C486                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006C4B8                            		even
0006C4B8                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006C4EA                            		even
0006C4EA                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006C534                            		even
0006C534                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006C572                            		even
0006C572                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006C8DE                            		even
0006C8DE                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006CD88                            		even
0006CD88                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006D2FE                            		even
0006D2FE                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006D83E                            		even
0006D83E                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006DCA6                            		even
0006DCA6                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006E288                            		even
0006E288                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006E8FA                            		even
0006E8FA                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006EE64                            		even
0006EE64                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006F46A                            		even
0006F46A                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006FBA8                            		even
0006FBA8                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00070286                            		even
00070286                            ObjPos_FZ:	incbin	objpos\fz.bin
00070298                            		even
00070298                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000702CA                            		even
000702CA                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000702FC                            		even
000702FC                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007032E                            		even
0007032E                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00070360                            		even
00070360                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00070392                            		even
00070392                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000703CA                            		even
000703CA                            ObjPos_End:	incbin	objpos\ending.bin
00070526                            		even
00070526 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007052C                            ; ---------------------------------------------------------------------------
0007052C                            		incbin	misc\padding4.bin
00070B56                            		even
00070B56                            
00070B56 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00070B5A 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00070B5E 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00070B62 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00070B66 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00070B6A 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00070B6E                            ; ---------------------------------------------------------------------------
00070B6E                            ; PSG instruments used in music
00070B6E                            ; ---------------------------------------------------------------------------
00070B6E 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00070B7A 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00070B86 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00070B92                            PSG1:		incbin	sound\psg1.bin
00070BA9                            PSG2:		incbin	sound\psg2.bin
00070BB0                            PSG3:		incbin	sound\psg3.bin
00070BC1                            PSG4:		incbin	sound\psg4.bin
00070BCC                            PSG6:		incbin	sound\psg6.bin
00070BDB                            PSG5:		incbin	sound\psg5.bin
00070C05                            PSG7:		incbin	sound\psg7.bin
00070C21                            PSG8:		incbin	sound\psg8.bin
00070C49                            PSG9:		incbin	sound\psg9.bin
00070C5A                            
00070C5A 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00070C62                            ; ---------------------------------------------------------------------------
00070C62                            ; Music	Pointers
00070C62                            ; ---------------------------------------------------------------------------
00070C62 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00070C6A 0000 0000 0000 0000        		dc.l Music83, Music84
00070C72 0000 0000 0000 0000        		dc.l Music85, Music86
00070C7A 0000 0000 0000 0000        		dc.l Music87, Music88
00070C82 0000 0000 0000 0000        		dc.l Music89, Music8A
00070C8A 0000 0000 0000 0000        		dc.l Music8B, Music8C
00070C92 0000 0000 0000 0000        		dc.l Music8D, Music8E
00070C9A 0000 0000 0000 0000        		dc.l Music8F, Music90
00070CA2 0000 0000 0000 0000        		dc.l Music91, Music92
00070CAA 0000 0000 0000 0000        		dc.l Music93, Music94
00070CB2 0000 0000 0000 0000        		dc.l Music95, Music96
00070CBA 0000 0000 0000 0000        		dc.l Music97, Music98
00070CC2 0000 0000 0000 0000        		dc.l Music99, Music9A
00070CCA 0000 0000 0000 0000        		dc.l Music9B, Music9C
00070CD2 0000 0000 0000 0000        		dc.l Music9D, Music9E
00070CDA 0000 0000                  		dc.l Music9F
00070CDE                            ; ---------------------------------------------------------------------------
00070CDE                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00070CDE                            ; ---------------------------------------------------------------------------
00070CDE 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00070CEE 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00070CFE 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00070D0E 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00070D1E 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00070D2E 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00070D3E 9090 9090                  		dc.b $90, $90, $90, $90
00070D42                            
00070D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070D42                            
00070D42                            
00070D42                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00070D42 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00070D4A 4E71                       		nop	
00070D4C 4E71                       		nop	
00070D4E 4E71                       		nop	
00070D50                            
00070D50                            loc_71B5A:
00070D50 0839 0000 00A1 1100        		btst	#0,($A11100).l
00070D58 66F6                       		bne.s	loc_71B5A
00070D5A                            
00070D5A 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00070D62 6700                       		beq.s	loc_71B82
00070D64 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00070D6C 4E71                       		nop	
00070D6E 4E71                       		nop	
00070D70 4E71                       		nop	
00070D72 4E71                       		nop	
00070D74 4E71                       		nop	
00070D76 60CA                       		bra.s	sub_71B4C
00070D78                            ; ===========================================================================
00070D78                            
00070D78                            loc_71B82:
00070D78 4DF9 00FF F000             		lea	($FFF000).l,a6
00070D7E 422E 000E                  		clr.b	$E(a6)
00070D82 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00070D86 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00070D8A 532E 0001                  		subq.b	#1,1(a6)
00070D8E 6600                       		bne.s	loc_71B9E
00070D90 4EBA 0000                  		jsr	sub_7260C(pc)
00070D94                            
00070D94                            loc_71B9E:
00070D94 102E 0004                  		move.b	4(a6),d0
00070D98 6700                       		beq.s	loc_71BA8
00070D9A 4EBA 0000                  		jsr	sub_72504(pc)
00070D9E                            
00070D9E                            loc_71BA8:
00070D9E 4A2E 0024                  		tst.b	$24(a6)
00070DA2 6700                       		beq.s	loc_71BB2
00070DA4 4EBA 0000                  		jsr	sub_7267C(pc)
00070DA8                            
00070DA8                            loc_71BB2:
00070DA8 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00070DAC 6700                       		beq.s	loc_71BBC	; if not, branch
00070DAE 4EBA 0000                  		jsr	Sound_Play(pc)
00070DB2                            
00070DB2                            loc_71BBC:
00070DB2 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00070DB8 6700                       		beq.s	loc_71BC8
00070DBA 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00070DBE                            
00070DBE                            loc_71BC8:
00070DBE 4BEE 0040                  		lea	$40(a6),a5
00070DC2 4A15                       		tst.b	(a5)
00070DC4 6A00                       		bpl.s	loc_71BD4
00070DC6 4EBA 0000                  		jsr	sub_71C4E(pc)
00070DCA                            
00070DCA                            loc_71BD4:
00070DCA 422E 0008                  		clr.b	8(a6)
00070DCE 7E05                       		moveq	#5,d7
00070DD0                            
00070DD0                            loc_71BDA:
00070DD0 DAFC 0030                  		adda.w	#$30,a5
00070DD4 4A15                       		tst.b	(a5)
00070DD6 6A00                       		bpl.s	loc_71BE6
00070DD8 4EBA 0000                  		jsr	sub_71CCA(pc)
00070DDC                            
00070DDC                            loc_71BE6:
00070DDC 51CF FFF2                  		dbf	d7,loc_71BDA
00070DE0                            
00070DE0 7E02                       		moveq	#2,d7
00070DE2                            
00070DE2                            loc_71BEC:
00070DE2 DAFC 0030                  		adda.w	#$30,a5
00070DE6 4A15                       		tst.b	(a5)
00070DE8 6A00                       		bpl.s	loc_71BF8
00070DEA 4EBA 0000                  		jsr	sub_72850(pc)
00070DEE                            
00070DEE                            loc_71BF8:
00070DEE 51CF FFF2                  		dbf	d7,loc_71BEC
00070DF2                            
00070DF2 1D7C 0080 000E             		move.b	#$80,$E(a6)
00070DF8 7E02                       		moveq	#2,d7
00070DFA                            
00070DFA                            loc_71C04:
00070DFA DAFC 0030                  		adda.w	#$30,a5
00070DFE 4A15                       		tst.b	(a5)
00070E00 6A00                       		bpl.s	loc_71C10
00070E02 4EBA 0000                  		jsr	sub_71CCA(pc)
00070E06                            
00070E06                            loc_71C10:
00070E06 51CF FFF2                  		dbf	d7,loc_71C04
00070E0A                            
00070E0A 7E02                       		moveq	#2,d7
00070E0C                            
00070E0C                            loc_71C16:
00070E0C DAFC 0030                  		adda.w	#$30,a5
00070E10 4A15                       		tst.b	(a5)
00070E12 6A00                       		bpl.s	loc_71C22
00070E14 4EBA 0000                  		jsr	sub_72850(pc)
00070E18                            
00070E18                            loc_71C22:
00070E18 51CF FFF2                  		dbf	d7,loc_71C16
00070E1C 1D7C 0040 000E             		move.b	#$40,$E(a6)
00070E22 DAFC 0030                  		adda.w	#$30,a5
00070E26 4A15                       		tst.b	(a5)
00070E28 6A00                       		bpl.s	loc_71C38
00070E2A 4EBA 0000                  		jsr	sub_71CCA(pc)
00070E2E                            
00070E2E                            loc_71C38:
00070E2E DAFC 0030                  		adda.w	#$30,a5
00070E32 4A15                       		tst.b	(a5)
00070E34 6A00                       		bpl.s	loc_71C44
00070E36 4EBA 0000                  		jsr	sub_72850(pc)
00070E3A                            
00070E3A                            loc_71C44:
00070E3A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00070E42 4E75                       		rts	
00070E44                            ; End of function sub_71B4C
00070E44                            
00070E44                            
00070E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070E44                            
00070E44                            
00070E44                            sub_71C4E:				; XREF: sub_71B4C
00070E44 532D 000E                  		subq.b	#1,$E(a5)
00070E48 6600                       		bne.s	locret_71CAA
00070E4A 1D7C 0080 0008             		move.b	#$80,8(a6)
00070E50 286D 0004                  		movea.l	4(a5),a4
00070E54                            
00070E54                            loc_71C5E:
00070E54 7A00                       		moveq	#0,d5
00070E56 1A1C                       		move.b	(a4)+,d5
00070E58 0C05 00E0                  		cmpi.b	#-$20,d5
00070E5C 6500                       		bcs.s	loc_71C6E
00070E5E 4EBA 0000                  		jsr	sub_72A5A(pc)
00070E62 60F0                       		bra.s	loc_71C5E
00070E64                            ; ===========================================================================
00070E64                            
00070E64                            loc_71C6E:
00070E64 4A05                       		tst.b	d5
00070E66 6A00                       		bpl.s	loc_71C84
00070E68 1B45 0010                  		move.b	d5,$10(a5)
00070E6C 1A1C                       		move.b	(a4)+,d5
00070E6E 6A00                       		bpl.s	loc_71C84
00070E70 534C                       		subq.w	#1,a4
00070E72 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00070E78 6000                       		bra.s	loc_71C88
00070E7A                            ; ===========================================================================
00070E7A                            
00070E7A                            loc_71C84:
00070E7A 4EBA 0000                  		jsr	sub_71D40(pc)
00070E7E                            
00070E7E                            loc_71C88:
00070E7E 2B4C 0004                  		move.l	a4,4(a5)
00070E82 0815 0002                  		btst	#2,(a5)
00070E86 6600                       		bne.s	locret_71CAA
00070E88 7000                       		moveq	#0,d0
00070E8A 102D 0010                  		move.b	$10(a5),d0
00070E8E 0C00 0080                  		cmpi.b	#$80,d0
00070E92 6700                       		beq.s	locret_71CAA
00070E94 0800 0003                  		btst	#3,d0
00070E98 6600                       		bne.s	loc_71CAC
00070E9A 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00070EA0                            
00070EA0                            locret_71CAA:
00070EA0 4E75                       		rts	
00070EA2                            ; ===========================================================================
00070EA2                            
00070EA2                            loc_71CAC:
00070EA2 0400 0088                  		subi.b	#$88,d0
00070EA6 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00070EAA 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00070EB0 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00070EB8 4E75                       		rts	
00070EBA                            ; End of function sub_71C4E
00070EBA                            
00070EBA                            ; ===========================================================================
00070EBA 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00070EC0                            
00070EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070EC0                            
00070EC0                            
00070EC0                            sub_71CCA:				; XREF: sub_71B4C
00070EC0 532D 000E                  		subq.b	#1,$E(a5)
00070EC4 6600                       		bne.s	loc_71CE0
00070EC6 0895 0004                  		bclr	#4,(a5)
00070ECA 4EBA 0000                  		jsr	sub_71CEC(pc)
00070ECE 4EBA 0000                  		jsr	sub_71E18(pc)
00070ED2 6000 0000                  		bra.w	loc_726E2
00070ED6                            ; ===========================================================================
00070ED6                            
00070ED6                            loc_71CE0:
00070ED6 4EBA 0000                  		jsr	sub_71D9E(pc)
00070EDA 4EBA 0000                  		jsr	sub_71DC6(pc)
00070EDE 6000 0000                  		bra.w	loc_71E24
00070EE2                            ; End of function sub_71CCA
00070EE2                            
00070EE2                            
00070EE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070EE2                            
00070EE2                            
00070EE2                            sub_71CEC:				; XREF: sub_71CCA
00070EE2 286D 0004                  		movea.l	4(a5),a4
00070EE6 0895 0001                  		bclr	#1,(a5)
00070EEA                            
00070EEA                            loc_71CF4:
00070EEA 7A00                       		moveq	#0,d5
00070EEC 1A1C                       		move.b	(a4)+,d5
00070EEE 0C05 00E0                  		cmpi.b	#-$20,d5
00070EF2 6500                       		bcs.s	loc_71D04
00070EF4 4EBA 0000                  		jsr	sub_72A5A(pc)
00070EF8 60F0                       		bra.s	loc_71CF4
00070EFA                            ; ===========================================================================
00070EFA                            
00070EFA                            loc_71D04:
00070EFA 4EBA 0000                  		jsr	sub_726FE(pc)
00070EFE 4A05                       		tst.b	d5
00070F00 6A00                       		bpl.s	loc_71D1A
00070F02 4EBA 0000                  		jsr	sub_71D22(pc)
00070F06 1A1C                       		move.b	(a4)+,d5
00070F08 6A00                       		bpl.s	loc_71D1A
00070F0A 534C                       		subq.w	#1,a4
00070F0C 6000 0000                  		bra.w	sub_71D60
00070F10                            ; ===========================================================================
00070F10                            
00070F10                            loc_71D1A:
00070F10 4EBA 0000                  		jsr	sub_71D40(pc)
00070F14 6000 0000                  		bra.w	sub_71D60
00070F18                            ; End of function sub_71CEC
00070F18                            
00070F18                            
00070F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070F18                            
00070F18                            
00070F18                            sub_71D22:				; XREF: sub_71CEC
00070F18 0405 0080                  		subi.b	#$80,d5
00070F1C 6700                       		beq.s	loc_71D58
00070F1E DA2D 0008                  		add.b	8(a5),d5
00070F22 0245 007F                  		andi.w	#$7F,d5
00070F26 E34D                       		lsl.w	#1,d5
00070F28 41FA 0000                  		lea	word_72790(pc),a0
00070F2C 3C30 5000                  		move.w	(a0,d5.w),d6
00070F30 3B46 0010                  		move.w	d6,$10(a5)
00070F34 4E75                       		rts	
00070F36                            ; End of function sub_71D22
00070F36                            
00070F36                            
00070F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070F36                            
00070F36                            
00070F36                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00070F36 1005                       		move.b	d5,d0
00070F38 122D 0002                  		move.b	2(a5),d1
00070F3C                            
00070F3C                            loc_71D46:
00070F3C 5301                       		subq.b	#1,d1
00070F3E 6700                       		beq.s	loc_71D4E
00070F40 D005                       		add.b	d5,d0
00070F42 60F8                       		bra.s	loc_71D46
00070F44                            ; ===========================================================================
00070F44                            
00070F44                            loc_71D4E:
00070F44 1B40 000F                  		move.b	d0,$F(a5)
00070F48 1B40 000E                  		move.b	d0,$E(a5)
00070F4C 4E75                       		rts	
00070F4E                            ; End of function sub_71D40
00070F4E                            
00070F4E                            ; ===========================================================================
00070F4E                            
00070F4E                            loc_71D58:				; XREF: sub_71D22
00070F4E 08D5 0001                  		bset	#1,(a5)
00070F52 426D 0010                  		clr.w	$10(a5)
00070F56                            
00070F56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070F56                            
00070F56                            
00070F56                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00070F56 2B4C 0004                  		move.l	a4,4(a5)
00070F5A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00070F60 0815 0004                  		btst	#4,(a5)
00070F64 6600                       		bne.s	locret_71D9C
00070F66 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00070F6C 422D 000C                  		clr.b	$C(a5)
00070F70 0815 0003                  		btst	#3,(a5)
00070F74 6700                       		beq.s	locret_71D9C
00070F76 206D 0014                  		movea.l	$14(a5),a0
00070F7A 1B58 0018                  		move.b	(a0)+,$18(a5)
00070F7E 1B58 0019                  		move.b	(a0)+,$19(a5)
00070F82 1B58 001A                  		move.b	(a0)+,$1A(a5)
00070F86 1018                       		move.b	(a0)+,d0
00070F88 E208                       		lsr.b	#1,d0
00070F8A 1B40 001B                  		move.b	d0,$1B(a5)
00070F8E 426D 001C                  		clr.w	$1C(a5)
00070F92                            
00070F92                            locret_71D9C:
00070F92 4E75                       		rts	
00070F94                            ; End of function sub_71D60
00070F94                            
00070F94                            
00070F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070F94                            
00070F94                            
00070F94                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00070F94 4A2D 0012                  		tst.b	$12(a5)
00070F98 6700                       		beq.s	locret_71DC4
00070F9A 532D 0012                  		subq.b	#1,$12(a5)
00070F9E 6600                       		bne.s	locret_71DC4
00070FA0 08D5 0001                  		bset	#1,(a5)
00070FA4 4A2D 0001                  		tst.b	1(a5)
00070FA8 6B00 0000                  		bmi.w	loc_71DBE
00070FAC 4EBA 0000                  		jsr	sub_726FE(pc)
00070FB0 584F                       		addq.w	#4,sp
00070FB2 4E75                       		rts	
00070FB4                            ; ===========================================================================
00070FB4                            
00070FB4                            loc_71DBE:
00070FB4 4EBA 0000                  		jsr	sub_729A0(pc)
00070FB8 584F                       		addq.w	#4,sp
00070FBA                            
00070FBA                            locret_71DC4:
00070FBA 4E75                       		rts	
00070FBC                            ; End of function sub_71D9E
00070FBC                            
00070FBC                            
00070FBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070FBC                            
00070FBC                            
00070FBC                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00070FBC 584F                       		addq.w	#4,sp
00070FBE 0815 0003                  		btst	#3,(a5)
00070FC2 6700                       		beq.s	locret_71E16
00070FC4 4A2D 0018                  		tst.b	$18(a5)
00070FC8 6700                       		beq.s	loc_71DDA
00070FCA 532D 0018                  		subq.b	#1,$18(a5)
00070FCE 4E75                       		rts	
00070FD0                            ; ===========================================================================
00070FD0                            
00070FD0                            loc_71DDA:
00070FD0 532D 0019                  		subq.b	#1,$19(a5)
00070FD4 6700                       		beq.s	loc_71DE2
00070FD6 4E75                       		rts	
00070FD8                            ; ===========================================================================
00070FD8                            
00070FD8                            loc_71DE2:
00070FD8 206D 0014                  		movea.l	$14(a5),a0
00070FDC 1B68 0001 0019             		move.b	1(a0),$19(a5)
00070FE2 4A2D 001B                  		tst.b	$1B(a5)
00070FE6 6600                       		bne.s	loc_71DFE
00070FE8 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00070FEE 442D 001A                  		neg.b	$1A(a5)
00070FF2 4E75                       		rts	
00070FF4                            ; ===========================================================================
00070FF4                            
00070FF4                            loc_71DFE:
00070FF4 532D 001B                  		subq.b	#1,$1B(a5)
00070FF8 1C2D 001A                  		move.b	$1A(a5),d6
00070FFC 4886                       		ext.w	d6
00070FFE DC6D 001C                  		add.w	$1C(a5),d6
00071002 3B46 001C                  		move.w	d6,$1C(a5)
00071006 DC6D 0010                  		add.w	$10(a5),d6
0007100A 594F                       		subq.w	#4,sp
0007100C                            
0007100C                            locret_71E16:
0007100C 4E75                       		rts	
0007100E                            ; End of function sub_71DC6
0007100E                            
0007100E                            
0007100E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007100E                            
0007100E                            
0007100E                            sub_71E18:				; XREF: sub_71CCA
0007100E 0815 0001                  		btst	#1,(a5)
00071012 6600                       		bne.s	locret_71E48
00071014 3C2D 0010                  		move.w	$10(a5),d6
00071018 6700                       		beq.s	loc_71E4A
0007101A                            
0007101A                            loc_71E24:				; XREF: sub_71CCA
0007101A 102D 001E                  		move.b	$1E(a5),d0
0007101E 4880                       		ext.w	d0
00071020 DC40                       		add.w	d0,d6
00071022 0815 0002                  		btst	#2,(a5)
00071026 6600                       		bne.s	locret_71E48
00071028 3206                       		move.w	d6,d1
0007102A E049                       		lsr.w	#8,d1
0007102C 103C 00A4                  		move.b	#-$5C,d0
00071030 4EBA 0000                  		jsr	sub_72722(pc)
00071034 1206                       		move.b	d6,d1
00071036 103C 00A0                  		move.b	#-$60,d0
0007103A 4EBA 0000                  		jsr	sub_72722(pc)
0007103E                            
0007103E                            locret_71E48:
0007103E 4E75                       		rts	
00071040                            ; ===========================================================================
00071040                            
00071040                            loc_71E4A:
00071040 08D5 0001                  		bset	#1,(a5)
00071044 4E75                       		rts	
00071046                            ; End of function sub_71E18
00071046                            
00071046                            ; ===========================================================================
00071046                            
00071046                            loc_71E50:				; XREF: sub_71B4C
00071046 6B00                       		bmi.s	loc_71E94
00071048 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007104E 6700 0000                  		beq.w	loc_71EFE
00071052 1D7C 0002 0003             		move.b	#2,3(a6)
00071058 7602                       		moveq	#2,d3
0007105A 103C 00B4                  		move.b	#-$4C,d0
0007105E 7200                       		moveq	#0,d1
00071060                            
00071060                            loc_71E6A:
00071060 4EBA 0000                  		jsr	sub_7272E(pc)
00071064 4EBA 0000                  		jsr	sub_72764(pc)
00071068 5200                       		addq.b	#1,d0
0007106A 51CB FFF4                  		dbf	d3,loc_71E6A
0007106E                            
0007106E 7602                       		moveq	#2,d3
00071070 7028                       		moveq	#$28,d0
00071072                            
00071072                            loc_71E7C:
00071072 1203                       		move.b	d3,d1
00071074 4EBA 0000                  		jsr	sub_7272E(pc)
00071078 5801                       		addq.b	#4,d1
0007107A 4EBA 0000                  		jsr	sub_7272E(pc)
0007107E 51CB FFF2                  		dbf	d3,loc_71E7C
00071082                            
00071082 4EBA 0000                  		jsr	sub_729B6(pc)
00071086 6000 FDB2                  		bra.w	loc_71C44
0007108A                            ; ===========================================================================
0007108A                            
0007108A                            loc_71E94:				; XREF: loc_71E50
0007108A 422E 0003                  		clr.b	3(a6)
0007108E 7630                       		moveq	#$30,d3
00071090 4BEE 0040                  		lea	$40(a6),a5
00071094 7806                       		moveq	#6,d4
00071096                            
00071096                            loc_71EA0:
00071096 0815 0007                  		btst	#7,(a5)
0007109A 6700                       		beq.s	loc_71EB8
0007109C 0815 0002                  		btst	#2,(a5)
000710A0 6600                       		bne.s	loc_71EB8
000710A2 103C 00B4                  		move.b	#-$4C,d0
000710A6 122D 000A                  		move.b	$A(a5),d1
000710AA 4EBA 0000                  		jsr	sub_72722(pc)
000710AE                            
000710AE                            loc_71EB8:
000710AE DAC3                       		adda.w	d3,a5
000710B0 51CC FFE4                  		dbf	d4,loc_71EA0
000710B4                            
000710B4 4BEE 0220                  		lea	$220(a6),a5
000710B8 7802                       		moveq	#2,d4
000710BA                            
000710BA                            loc_71EC4:
000710BA 0815 0007                  		btst	#7,(a5)
000710BE 6700                       		beq.s	loc_71EDC
000710C0 0815 0002                  		btst	#2,(a5)
000710C4 6600                       		bne.s	loc_71EDC
000710C6 103C 00B4                  		move.b	#-$4C,d0
000710CA 122D 000A                  		move.b	$A(a5),d1
000710CE 4EBA 0000                  		jsr	sub_72722(pc)
000710D2                            
000710D2                            loc_71EDC:
000710D2 DAC3                       		adda.w	d3,a5
000710D4 51CC FFE4                  		dbf	d4,loc_71EC4
000710D8                            
000710D8 4BEE 0340                  		lea	$340(a6),a5
000710DC 0815 0007                  		btst	#7,(a5)
000710E0 6700                       		beq.s	loc_71EFE
000710E2 0815 0002                  		btst	#2,(a5)
000710E6 6600                       		bne.s	loc_71EFE
000710E8 103C 00B4                  		move.b	#-$4C,d0
000710EC 122D 000A                  		move.b	$A(a5),d1
000710F0 4EBA 0000                  		jsr	sub_72722(pc)
000710F4                            
000710F4                            loc_71EFE:
000710F4 6000 FD44                  		bra.w	loc_71C44
000710F8                            
000710F8                            ; ---------------------------------------------------------------------------
000710F8                            ; Subroutine to	play a sound or	music track
000710F8                            ; ---------------------------------------------------------------------------
000710F8                            
000710F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000710F8                            
000710F8                            
000710F8                            Sound_Play:				; XREF: sub_71B4C
000710F8 2079 0007 0B56             		movea.l	(Go_SoundTypes).l,a0
000710FE 43EE 000A                  		lea	$A(a6),a1	; load music track number
00071102 1616                       		move.b	0(a6),d3
00071104 7802                       		moveq	#2,d4
00071106                            
00071106                            loc_71F12:
00071106 1011                       		move.b	(a1),d0		; move track number to d0
00071108 1200                       		move.b	d0,d1
0007110A 4219                       		clr.b	(a1)+
0007110C 0400 0081                  		subi.b	#$81,d0
00071110 6500                       		bcs.s	loc_71F3E
00071112 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00071118 6700                       		beq.s	loc_71F2C
0007111A 1D41 000A                  		move.b	d1,$A(a6)
0007111E 6000                       		bra.s	loc_71F3E
00071120                            ; ===========================================================================
00071120                            
00071120                            loc_71F2C:
00071120 0240 007F                  		andi.w	#$7F,d0
00071124 1430 0000                  		move.b	(a0,d0.w),d2
00071128 B403                       		cmp.b	d3,d2
0007112A 6500                       		bcs.s	loc_71F3E
0007112C 1602                       		move.b	d2,d3
0007112E 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00071132                            
00071132                            loc_71F3E:
00071132 51CC FFD2                  		dbf	d4,loc_71F12
00071136                            
00071136 4A03                       		tst.b	d3
00071138 6B00                       		bmi.s	locret_71F4A
0007113A 1C83                       		move.b	d3,0(a6)
0007113C                            
0007113C                            locret_71F4A:
0007113C 4E75                       		rts	
0007113E                            ; End of function Sound_Play
0007113E                            
0007113E                            
0007113E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007113E                            
0007113E                            
0007113E                            Sound_ChkValue:				; XREF: sub_71B4C
0007113E 7E00                       		moveq	#0,d7
00071140 1E2E 0009                  		move.b	9(a6),d7
00071144 6700 0000                  		beq.w	Sound_E4
00071148 6A00                       		bpl.s	locret_71F8C
0007114A 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00071150 0C07 009F                  		cmpi.b	#$9F,d7
00071154 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00071158 0C07 00A0                  		cmpi.b	#$A0,d7
0007115C 6500 0000                  		bcs.w	locret_71F8C
00071160 0C07 00CF                  		cmpi.b	#$CF,d7
00071164 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00071168 0C07 00D0                  		cmpi.b	#$D0,d7
0007116C 6500 0000                  		bcs.w	locret_71F8C
00071170 0C07 00E0                  		cmpi.b	#$E0,d7
00071174 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00071178 0C07 00E5                  		cmpi.b	#$E5,d7
0007117C 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007117E                            
0007117E                            locret_71F8C:
0007117E 4E75                       		rts	
00071180                            ; ===========================================================================
00071180                            
00071180                            Sound_E0toE5				; XREF: Sound_ChkValue
00071180 0407 00E0                  		subi.b	#$E0,d7
00071184 E54F                       		lsl.w	#2,d7
00071186 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007118A                            ; ===========================================================================
0007118A                            
0007118A                            Sound_ExIndex:
0007118A 6000 0000                  		bra.w	Sound_E0
0007118E                            ; ===========================================================================
0007118E 6000 0000                  		bra.w	Sound_E1
00071192                            ; ===========================================================================
00071192 6000 0000                  		bra.w	Sound_E2
00071196                            ; ===========================================================================
00071196 6000 0000                  		bra.w	Sound_E3
0007119A                            ; ===========================================================================
0007119A 6000 0000                  		bra.w	Sound_E4
0007119E                            ; ===========================================================================
0007119E 6000 0000                  		bra.w	Sound_E5
000711A2                            ; ===========================================================================
000711A2                            ; ---------------------------------------------------------------------------
000711A2                            ; Play "Say-gaa" PCM sound
000711A2                            ; ---------------------------------------------------------------------------
000711A2                            
000711A2                            Sound_E1:				  
000711A2 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000711A8 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000711AE 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000711B6                            PlayPCM_Loop:	  
000711B6 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000711BC 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000711C0 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000711C4 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000711C6 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000711C8 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000711CC 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000711D2 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000711D6 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000711DC 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000711DE 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000711E0                            return_PlayPCM: 
000711E0 584F                       		addq.w	#4,sp 
000711E2 4E75                       		rts
000711E4                            		
000711E4                            ; ---------------------------------------------------------------------------
000711E4                            ; Play you are an idiot pcm sound
000711E4                            ; ---------------------------------------------------------------------------
000711E4                            
000711E4                            Sound_E5:  
000711E4 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000711EA 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
000711F0 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000711F8                            PlayPCM_LoopE5:	  
000711F8                            
000711F8 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000711FE                            		
000711FE 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00071202                            		
00071202 1038 FE24                  		move.b	($FFFFFE24).w,d0
00071206 0200 000F                  		andi.b	#$F,d0
0007120A 6700                       		beq.s	SfxE5SwapPalette
0007120C                            		
0007120C 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00071210 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00071214 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00071216 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00071218 60DE                       		bra.s	PlayPCM_LoopE5
0007121A                            		
0007121A                            SfxE5SwapPalette:
0007121A                            		
0007121A                            		
0007121A                            		
0007121A 4BF9 00C0 0004             		lea	($C00004).l,a5
00071220 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00071226                            		
00071226                            		
00071226 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007122C 6700                       		beq.s	@not_black
0007122E 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00071234 6000                       		bra.s	@merge
00071236                            	@not_black:
00071236 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007123C                            	@merge:
0007123C 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00071240 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00071244 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
0007124A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0007124E                            		
0007124E 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00071252 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00071256 60A0                       		bra.s	PlayPCM_LoopE5
00071258                            		
00071258                            ; ===========================================================================
00071258                            ; ---------------------------------------------------------------------------
00071258                            ; Play music track $81-$9F
00071258                            ; ---------------------------------------------------------------------------
00071258                            
00071258                            Sound_81to9F:				; XREF: Sound_ChkValue
00071258 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007125C 6600                       		bne.s	loc_72024	; if not, branch
0007125E 4A2E 0027                  		tst.b	$27(a6)
00071262 6600 0000                  		bne.w	loc_721B6
00071266 4BEE 0040                  		lea	$40(a6),a5
0007126A 7009                       		moveq	#9,d0
0007126C                            
0007126C                            loc_71FE6:
0007126C 0895 0002                  		bclr	#2,(a5)
00071270 DAFC 0030                  		adda.w	#$30,a5
00071274 51C8 FFF6                  		dbf	d0,loc_71FE6
00071278                            
00071278 4BEE 0220                  		lea	$220(a6),a5
0007127C 7005                       		moveq	#5,d0
0007127E                            
0007127E                            loc_71FF8:
0007127E 0895 0007                  		bclr	#7,(a5)
00071282 DAFC 0030                  		adda.w	#$30,a5
00071286 51C8 FFF6                  		dbf	d0,loc_71FF8
0007128A 4216                       		clr.b	0(a6)
0007128C 204E                       		movea.l	a6,a0
0007128E 43EE 03A0                  		lea	$3A0(a6),a1
00071292 303C 0087                  		move.w	#$87,d0
00071296                            
00071296                            loc_72012:
00071296 22D8                       		move.l	(a0)+,(a1)+
00071298 51C8 FFFC                  		dbf	d0,loc_72012
0007129C                            
0007129C 1D7C 0080 0027             		move.b	#$80,$27(a6)
000712A2 4216                       		clr.b	0(a6)
000712A4 6000                       		bra.s	loc_7202C
000712A6                            ; ===========================================================================
000712A6                            
000712A6                            loc_72024:
000712A6 422E 0027                  		clr.b	$27(a6)
000712AA 422E 0026                  		clr.b	$26(a6)
000712AE                            
000712AE                            loc_7202C:
000712AE 4EBA 0000                  		jsr	sub_725CA(pc)
000712B2 2879 0007 0B66             		movea.l	(off_719A0).l,a4
000712B8 0407 0081                  		subi.b	#$81,d7
000712BC 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000712C2 2879 0007 0B5E             		movea.l	(Go_MusicIndex).l,a4
000712C8 E54F                       		lsl.w	#2,d7
000712CA 2874 7000                  		movea.l	(a4,d7.w),a4
000712CE 7000                       		moveq	#0,d0
000712D0 3014                       		move.w	(a4),d0
000712D2 D08C                       		add.l	a4,d0
000712D4 2D40 0018                  		move.l	d0,$18(a6)
000712D8 102C 0005                  		move.b	5(a4),d0
000712DC 1D40 0028                  		move.b	d0,$28(a6)
000712E0 4A2E 002A                  		tst.b	$2A(a6)
000712E4 6700                       		beq.s	loc_72068
000712E6 102E 0029                  		move.b	$29(a6),d0
000712EA                            
000712EA                            loc_72068:
000712EA 1D40 0002                  		move.b	d0,2(a6)
000712EE 1D40 0001                  		move.b	d0,1(a6)
000712F2 7200                       		moveq	#0,d1
000712F4 264C                       		movea.l	a4,a3
000712F6 5C4C                       		addq.w	#6,a4
000712F8 7E00                       		moveq	#0,d7
000712FA 1E2B 0002                  		move.b	2(a3),d7
000712FE 6700 0000                  		beq.w	loc_72114
00071302 5307                       		subq.b	#1,d7
00071304 123C 00C0                  		move.b	#-$40,d1
00071308 182B 0004                  		move.b	4(a3),d4
0007130C 7C30                       		moveq	#$30,d6
0007130E 1A3C 0001                  		move.b	#1,d5
00071312 43EE 0040                  		lea	$40(a6),a1
00071316 45FA 0000                  		lea	byte_721BA(pc),a2
0007131A                            
0007131A                            loc_72098:
0007131A 08D1 0007                  		bset	#7,(a1)
0007131E 135A 0001                  		move.b	(a2)+,1(a1)
00071322 1344 0002                  		move.b	d4,2(a1)
00071326 1346 000D                  		move.b	d6,$D(a1)
0007132A 1341 000A                  		move.b	d1,$A(a1)
0007132E 1345 000E                  		move.b	d5,$E(a1)
00071332 7000                       		moveq	#0,d0
00071334 301C                       		move.w	(a4)+,d0
00071336 D08B                       		add.l	a3,d0
00071338 2340 0004                  		move.l	d0,4(a1)
0007133C 335C 0008                  		move.w	(a4)+,8(a1)
00071340 D2C6                       		adda.w	d6,a1
00071342 51CF FFD6                  		dbf	d7,loc_72098
00071346 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007134C 6600                       		bne.s	loc_720D8
0007134E 702B                       		moveq	#$2B,d0
00071350 7200                       		moveq	#0,d1
00071352 4EBA 0000                  		jsr	sub_7272E(pc)
00071356 6000 0000                  		bra.w	loc_72114
0007135A                            ; ===========================================================================
0007135A                            
0007135A                            loc_720D8:
0007135A 7028                       		moveq	#$28,d0
0007135C 7206                       		moveq	#6,d1
0007135E 4EBA 0000                  		jsr	sub_7272E(pc)
00071362 103C 0042                  		move.b	#$42,d0
00071366 727F                       		moveq	#$7F,d1
00071368 4EBA 0000                  		jsr	sub_72764(pc)
0007136C 103C 004A                  		move.b	#$4A,d0
00071370 727F                       		moveq	#$7F,d1
00071372 4EBA 0000                  		jsr	sub_72764(pc)
00071376 103C 0046                  		move.b	#$46,d0
0007137A 727F                       		moveq	#$7F,d1
0007137C 4EBA 0000                  		jsr	sub_72764(pc)
00071380 103C 004E                  		move.b	#$4E,d0
00071384 727F                       		moveq	#$7F,d1
00071386 4EBA 0000                  		jsr	sub_72764(pc)
0007138A 103C 00B6                  		move.b	#-$4A,d0
0007138E 123C 00C0                  		move.b	#-$40,d1
00071392 4EBA 0000                  		jsr	sub_72764(pc)
00071396                            
00071396                            loc_72114:
00071396 7E00                       		moveq	#0,d7
00071398 1E2B 0003                  		move.b	3(a3),d7
0007139C 6700                       		beq.s	loc_72154
0007139E 5307                       		subq.b	#1,d7
000713A0 43EE 0190                  		lea	$190(a6),a1
000713A4 45FA 0000                  		lea	byte_721C2(pc),a2
000713A8                            
000713A8                            loc_72126:
000713A8 08D1 0007                  		bset	#7,(a1)
000713AC 135A 0001                  		move.b	(a2)+,1(a1)
000713B0 1344 0002                  		move.b	d4,2(a1)
000713B4 1346 000D                  		move.b	d6,$D(a1)
000713B8 1345 000E                  		move.b	d5,$E(a1)
000713BC 7000                       		moveq	#0,d0
000713BE 301C                       		move.w	(a4)+,d0
000713C0 D08B                       		add.l	a3,d0
000713C2 2340 0004                  		move.l	d0,4(a1)
000713C6 335C 0008                  		move.w	(a4)+,8(a1)
000713CA 101C                       		move.b	(a4)+,d0
000713CC 135C 000B                  		move.b	(a4)+,$B(a1)
000713D0 D2C6                       		adda.w	d6,a1
000713D2 51CF FFD4                  		dbf	d7,loc_72126
000713D6                            
000713D6                            loc_72154:
000713D6 43EE 0220                  		lea	$220(a6),a1
000713DA 7E05                       		moveq	#5,d7
000713DC                            
000713DC                            loc_7215A:
000713DC 4A11                       		tst.b	(a1)
000713DE 6A00 0000                  		bpl.w	loc_7217C
000713E2 7000                       		moveq	#0,d0
000713E4 1029 0001                  		move.b	1(a1),d0
000713E8 6B00                       		bmi.s	loc_7216E
000713EA 5500                       		subq.b	#2,d0
000713EC E508                       		lsl.b	#2,d0
000713EE 6000                       		bra.s	loc_72170
000713F0                            ; ===========================================================================
000713F0                            
000713F0                            loc_7216E:
000713F0 E608                       		lsr.b	#3,d0
000713F2                            
000713F2                            loc_72170:
000713F2 41FA 0000                  		lea	dword_722CC(pc),a0
000713F6 2070 0000                  		movea.l	(a0,d0.w),a0
000713FA 08D0 0002                  		bset	#2,(a0)
000713FE                            
000713FE                            loc_7217C:
000713FE D2C6                       		adda.w	d6,a1
00071400 51CF FFDA                  		dbf	d7,loc_7215A
00071404                            
00071404 4A6E 0340                  		tst.w	$340(a6)
00071408 6A00                       		bpl.s	loc_7218E
0007140A 08EE 0002 0100             		bset	#2,$100(a6)
00071410                            
00071410                            loc_7218E:
00071410 4A6E 0370                  		tst.w	$370(a6)
00071414 6A00                       		bpl.s	loc_7219A
00071416 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007141C                            
0007141C                            loc_7219A:
0007141C 4BEE 0070                  		lea	$70(a6),a5
00071420 7805                       		moveq	#5,d4
00071422                            
00071422                            loc_721A0:
00071422 4EBA 0000                  		jsr	sub_726FE(pc)
00071426 DAC6                       		adda.w	d6,a5
00071428 51CC FFF8                  		dbf	d4,loc_721A0
0007142C 7802                       		moveq	#2,d4
0007142E                            
0007142E                            loc_721AC:
0007142E 4EBA 0000                  		jsr	sub_729A0(pc)
00071432 DAC6                       		adda.w	d6,a5
00071434 51CC FFF8                  		dbf	d4,loc_721AC
00071438                            
00071438                            loc_721B6:
00071438 584F                       		addq.w	#4,sp
0007143A 4E75                       		rts	
0007143C                            ; ===========================================================================
0007143C 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00071444                            		even
00071444 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00071448                            		even
00071448                            ; ===========================================================================
00071448                            ; ---------------------------------------------------------------------------
00071448                            ; Play normal sound effect
00071448                            ; ---------------------------------------------------------------------------
00071448                            
00071448                            Sound_A0toCF:				; XREF: Sound_ChkValue
00071448 4A2E 0027                  		tst.b	$27(a6)
0007144C 6600 0000                  		bne.w	loc_722C6
00071450 4A2E 0004                  		tst.b	4(a6)
00071454 6600 0000                  		bne.w	loc_722C6
00071458 4A2E 0024                  		tst.b	$24(a6)
0007145C 6600 0000                  		bne.w	loc_722C6
00071460 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00071464 6600                       		bne.s	Sound_notB5	; if not, branch
00071466 4A2E 002B                  		tst.b	$2B(a6)
0007146A 6600                       		bne.s	loc_721EE
0007146C 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00071470                            
00071470                            loc_721EE:
00071470 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00071476                            
00071476                            Sound_notB5:
00071476 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007147A 6600                       		bne.s	Sound_notA7	; if not, branch
0007147C 4A2E 002C                  		tst.b	$2C(a6)
00071480 6600 0000                  		bne.w	locret_722C4
00071484 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007148A                            
0007148A                            Sound_notA7:
0007148A 2079 0007 0B62             		movea.l	(Go_SoundIndex).l,a0
00071490 0407 00A0                  		subi.b	#$A0,d7
00071494 E54F                       		lsl.w	#2,d7
00071496 2670 7000                  		movea.l	(a0,d7.w),a3
0007149A 224B                       		movea.l	a3,a1
0007149C 7200                       		moveq	#0,d1
0007149E 3219                       		move.w	(a1)+,d1
000714A0 D28B                       		add.l	a3,d1
000714A2 1A19                       		move.b	(a1)+,d5
000714A4 1E19                       		move.b	(a1)+,d7
000714A6 5307                       		subq.b	#1,d7
000714A8 7C30                       		moveq	#$30,d6
000714AA                            
000714AA                            loc_72228:
000714AA 7600                       		moveq	#0,d3
000714AC 1629 0001                  		move.b	1(a1),d3
000714B0 1803                       		move.b	d3,d4
000714B2 6B00                       		bmi.s	loc_72244
000714B4 5543                       		subq.w	#2,d3
000714B6 E54B                       		lsl.w	#2,d3
000714B8 4BFA 0000                  		lea	dword_722CC(pc),a5
000714BC 2A75 3000                  		movea.l	(a5,d3.w),a5
000714C0 08D5 0002                  		bset	#2,(a5)
000714C4 6000                       		bra.s	loc_7226E
000714C6                            ; ===========================================================================
000714C6                            
000714C6                            loc_72244:
000714C6 E64B                       		lsr.w	#3,d3
000714C8 4BFA 0000                  		lea	dword_722CC(pc),a5
000714CC 2A75 3000                  		movea.l	(a5,d3.w),a5
000714D0 08D5 0002                  		bset	#2,(a5)
000714D4 0C04 00C0                  		cmpi.b	#$C0,d4
000714D8 6600                       		bne.s	loc_7226E
000714DA 1004                       		move.b	d4,d0
000714DC 0000 001F                  		ori.b	#$1F,d0
000714E0 13C0 00C0 0011             		move.b	d0,($C00011).l
000714E6 0840 0005                  		bchg	#5,d0
000714EA 13C0 00C0 0011             		move.b	d0,($C00011).l
000714F0                            
000714F0                            loc_7226E:
000714F0 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000714F4 244D                       		movea.l	a5,a2
000714F6 700B                       		moveq	#$B,d0
000714F8                            
000714F8                            loc_72276:
000714F8 429A                       		clr.l	(a2)+
000714FA 51C8 FFFC                  		dbf	d0,loc_72276
000714FE                            
000714FE 3A99                       		move.w	(a1)+,(a5)
00071500 1B45 0002                  		move.b	d5,2(a5)
00071504 7000                       		moveq	#0,d0
00071506 3019                       		move.w	(a1)+,d0
00071508 D08B                       		add.l	a3,d0
0007150A 2B40 0004                  		move.l	d0,4(a5)
0007150E 3B59 0008                  		move.w	(a1)+,8(a5)
00071512 1B7C 0001 000E             		move.b	#1,$E(a5)
00071518 1B46 000D                  		move.b	d6,$D(a5)
0007151C 4A04                       		tst.b	d4
0007151E 6B00                       		bmi.s	loc_722A8
00071520 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00071526 2B41 0020                  		move.l	d1,$20(a5)
0007152A                            
0007152A                            loc_722A8:
0007152A 51CF FF7E                  		dbf	d7,loc_72228
0007152E                            
0007152E 4A2E 0250                  		tst.b	$250(a6)
00071532 6A00                       		bpl.s	loc_722B8
00071534 08EE 0002 0340             		bset	#2,$340(a6)
0007153A                            
0007153A                            loc_722B8:
0007153A 4A2E 0310                  		tst.b	$310(a6)
0007153E 6A00                       		bpl.s	locret_722C4
00071540 08EE 0002 0370             		bset	#2,$370(a6)
00071546                            
00071546                            locret_722C4:
00071546 4E75                       		rts	
00071548                            ; ===========================================================================
00071548                            
00071548                            loc_722C6:
00071548 4216                       		clr.b	0(a6)
0007154A 4E75                       		rts	
0007154C                            ; ===========================================================================
0007154C 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00071550 0000 0000                  		dc.l 0
00071554 00FF F100                  		dc.l $FFF100
00071558 00FF F130                  		dc.l $FFF130
0007155C 00FF F190                  		dc.l $FFF190
00071560 00FF F1C0                  		dc.l $FFF1C0
00071564 00FF F1F0                  		dc.l $FFF1F0
00071568 00FF F1F0                  		dc.l $FFF1F0
0007156C 00FF F220                  dword_722EC:	dc.l $FFF220
00071570 0000 0000                  		dc.l 0
00071574 00FF F250                  		dc.l $FFF250
00071578 00FF F280                  		dc.l $FFF280
0007157C 00FF F2B0                  		dc.l $FFF2B0
00071580 00FF F2E0                  		dc.l $FFF2E0
00071584 00FF F310                  		dc.l $FFF310
00071588 00FF F310                  		dc.l $FFF310
0007158C                            ; ===========================================================================
0007158C                            ; ---------------------------------------------------------------------------
0007158C                            ; Play GHZ waterfall sound
0007158C                            ; ---------------------------------------------------------------------------
0007158C                            
0007158C                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007158C 4A2E 0027                  		tst.b	$27(a6)
00071590 6600 0000                  		bne.w	locret_723C6
00071594 4A2E 0004                  		tst.b	4(a6)
00071598 6600 0000                  		bne.w	locret_723C6
0007159C 4A2E 0024                  		tst.b	$24(a6)
000715A0 6600 0000                  		bne.w	locret_723C6
000715A4 2079 0007 0B5A             		movea.l	(Go_SoundD0).l,a0
000715AA 0407 00D0                  		subi.b	#$D0,d7
000715AE E54F                       		lsl.w	#2,d7
000715B0 2670 7000                  		movea.l	(a0,d7.w),a3
000715B4 224B                       		movea.l	a3,a1
000715B6 7000                       		moveq	#0,d0
000715B8 3019                       		move.w	(a1)+,d0
000715BA D08B                       		add.l	a3,d0
000715BC 2D40 0020                  		move.l	d0,$20(a6)
000715C0 1A19                       		move.b	(a1)+,d5
000715C2 1E19                       		move.b	(a1)+,d7
000715C4 5307                       		subq.b	#1,d7
000715C6 7C30                       		moveq	#$30,d6
000715C8                            
000715C8                            loc_72348:
000715C8 1829 0001                  		move.b	1(a1),d4
000715CC 6B00                       		bmi.s	loc_7235A
000715CE 08EE 0002 0100             		bset	#2,$100(a6)
000715D4 4BEE 0340                  		lea	$340(a6),a5
000715D8 6000                       		bra.s	loc_72364
000715DA                            ; ===========================================================================
000715DA                            
000715DA                            loc_7235A:
000715DA 08EE 0002 01F0             		bset	#2,$1F0(a6)
000715E0 4BEE 0370                  		lea	$370(a6),a5
000715E4                            
000715E4                            loc_72364:
000715E4 244D                       		movea.l	a5,a2
000715E6 700B                       		moveq	#$B,d0
000715E8                            
000715E8                            loc_72368:
000715E8 429A                       		clr.l	(a2)+
000715EA 51C8 FFFC                  		dbf	d0,loc_72368
000715EE                            
000715EE 3A99                       		move.w	(a1)+,(a5)
000715F0 1B45 0002                  		move.b	d5,2(a5)
000715F4 7000                       		moveq	#0,d0
000715F6 3019                       		move.w	(a1)+,d0
000715F8 D08B                       		add.l	a3,d0
000715FA 2B40 0004                  		move.l	d0,4(a5)
000715FE 3B59 0008                  		move.w	(a1)+,8(a5)
00071602 1B7C 0001 000E             		move.b	#1,$E(a5)
00071608 1B46 000D                  		move.b	d6,$D(a5)
0007160C 4A04                       		tst.b	d4
0007160E 6B00                       		bmi.s	loc_72396
00071610 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00071616                            
00071616                            loc_72396:
00071616 51CF FFB0                  		dbf	d7,loc_72348
0007161A                            
0007161A 4A2E 0250                  		tst.b	$250(a6)
0007161E 6A00                       		bpl.s	loc_723A6
00071620 08EE 0002 0340             		bset	#2,$340(a6)
00071626                            
00071626                            loc_723A6:
00071626 4A2E 0310                  		tst.b	$310(a6)
0007162A 6A00                       		bpl.s	locret_723C6
0007162C 08EE 0002 0370             		bset	#2,$370(a6)
00071632 0004 001F                  		ori.b	#$1F,d4
00071636 13C4 00C0 0011             		move.b	d4,($C00011).l
0007163C 0844 0005                  		bchg	#5,d4
00071640 13C4 00C0 0011             		move.b	d4,($C00011).l
00071646                            
00071646                            locret_723C6:
00071646 4E75                       		rts	
00071648                            ; End of function Sound_ChkValue
00071648                            
00071648                            ; ===========================================================================
00071648 00FF F100                  		dc.l $FFF100
0007164C 00FF F1F0                  		dc.l $FFF1F0
00071650 00FF F250                  		dc.l $FFF250
00071654 00FF F310                  		dc.l $FFF310
00071658 00FF F340                  		dc.l $FFF340
0007165C 00FF F370                  		dc.l $FFF370
00071660                            
00071660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071660                            
00071660                            
00071660                            Snd_FadeOut1:				; XREF: Sound_E0
00071660 4216                       		clr.b	0(a6)
00071662 4BEE 0220                  		lea	$220(a6),a5
00071666 7E05                       		moveq	#5,d7
00071668                            
00071668                            loc_723EA:
00071668 4A15                       		tst.b	(a5)
0007166A 6A00 0000                  		bpl.w	loc_72472
0007166E 0895 0007                  		bclr	#7,(a5)
00071672 7600                       		moveq	#0,d3
00071674 162D 0001                  		move.b	1(a5),d3
00071678 6B00                       		bmi.s	loc_7243C
0007167A 4EBA 0000                  		jsr	sub_726FE(pc)
0007167E 0C03 0004                  		cmpi.b	#4,d3
00071682 6600                       		bne.s	loc_72416
00071684 4A2E 0340                  		tst.b	$340(a6)
00071688 6A00                       		bpl.s	loc_72416
0007168A 4BEE 0340                  		lea	$340(a6),a5
0007168E 226E 0020                  		movea.l	$20(a6),a1
00071692 6000                       		bra.s	loc_72428
00071694                            ; ===========================================================================
00071694                            
00071694                            loc_72416:
00071694 5503                       		subq.b	#2,d3
00071696 E50B                       		lsl.b	#2,d3
00071698 41FA FEB2                  		lea	dword_722CC(pc),a0
0007169C 264D                       		movea.l	a5,a3
0007169E 2A70 3000                  		movea.l	(a0,d3.w),a5
000716A2 226E 0018                  		movea.l	$18(a6),a1
000716A6                            
000716A6                            loc_72428:
000716A6 0895 0002                  		bclr	#2,(a5)
000716AA 08D5 0001                  		bset	#1,(a5)
000716AE 102D 000B                  		move.b	$B(a5),d0
000716B2 4EBA 0000                  		jsr	sub_72C4E(pc)
000716B6 2A4B                       		movea.l	a3,a5
000716B8 6000                       		bra.s	loc_72472
000716BA                            ; ===========================================================================
000716BA                            
000716BA                            loc_7243C:
000716BA 4EBA 0000                  		jsr	sub_729A0(pc)
000716BE 41EE 0370                  		lea	$370(a6),a0
000716C2 0C03 00E0                  		cmpi.b	#$E0,d3
000716C6 6700                       		beq.s	loc_7245A
000716C8 0C03 00C0                  		cmpi.b	#$C0,d3
000716CC 6700                       		beq.s	loc_7245A
000716CE E60B                       		lsr.b	#3,d3
000716D0 41FA FE7A                  		lea	dword_722CC(pc),a0
000716D4 2070 3000                  		movea.l	(a0,d3.w),a0
000716D8                            
000716D8                            loc_7245A:
000716D8 0890 0002                  		bclr	#2,(a0)
000716DC 08D0 0001                  		bset	#1,(a0)
000716E0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000716E6 6600                       		bne.s	loc_72472
000716E8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000716F0                            
000716F0                            loc_72472:
000716F0 DAFC 0030                  		adda.w	#$30,a5
000716F4 51CF FF72                  		dbf	d7,loc_723EA
000716F8                            
000716F8 4E75                       		rts	
000716FA                            ; End of function Snd_FadeOut1
000716FA                            
000716FA                            
000716FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000716FA                            
000716FA                            
000716FA                            Snd_FadeOut2:				; XREF: Sound_E0
000716FA 4BEE 0340                  		lea	$340(a6),a5
000716FE 4A15                       		tst.b	(a5)
00071700 6A00                       		bpl.s	loc_724AE
00071702 0895 0007                  		bclr	#7,(a5)
00071706 0815 0002                  		btst	#2,(a5)
0007170A 6600                       		bne.s	loc_724AE
0007170C 4EBA 0000                  		jsr	loc_7270A(pc)
00071710 4BEE 0100                  		lea	$100(a6),a5
00071714 0895 0002                  		bclr	#2,(a5)
00071718 08D5 0001                  		bset	#1,(a5)
0007171C 4A15                       		tst.b	(a5)
0007171E 6A00                       		bpl.s	loc_724AE
00071720 226E 0018                  		movea.l	$18(a6),a1
00071724 102D 000B                  		move.b	$B(a5),d0
00071728 4EBA 0000                  		jsr	sub_72C4E(pc)
0007172C                            
0007172C                            loc_724AE:
0007172C 4BEE 0370                  		lea	$370(a6),a5
00071730 4A15                       		tst.b	(a5)
00071732 6A00                       		bpl.s	locret_724E4
00071734 0895 0007                  		bclr	#7,(a5)
00071738 0815 0002                  		btst	#2,(a5)
0007173C 6600                       		bne.s	locret_724E4
0007173E 4EBA 0000                  		jsr	loc_729A6(pc)
00071742 4BEE 01F0                  		lea	$1F0(a6),a5
00071746 0895 0002                  		bclr	#2,(a5)
0007174A 08D5 0001                  		bset	#1,(a5)
0007174E 4A15                       		tst.b	(a5)
00071750 6A00                       		bpl.s	locret_724E4
00071752 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00071758 6600                       		bne.s	locret_724E4
0007175A 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00071762                            
00071762                            locret_724E4:
00071762 4E75                       		rts	
00071764                            ; End of function Snd_FadeOut2
00071764                            
00071764                            ; ===========================================================================
00071764                            ; ---------------------------------------------------------------------------
00071764                            ; Fade out music
00071764                            ; ---------------------------------------------------------------------------
00071764                            
00071764                            Sound_E0:				; XREF: Sound_ExIndex
00071764 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00071768 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007176C 1D7C 0003 0006             		move.b	#3,6(a6)
00071772 1D7C 0028 0004             		move.b	#$28,4(a6)
00071778 422E 0040                  		clr.b	$40(a6)
0007177C 422E 002A                  		clr.b	$2A(a6)
00071780 4E75                       		rts	
00071782                            
00071782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071782                            
00071782                            
00071782                            sub_72504:				; XREF: sub_71B4C
00071782 102E 0006                  		move.b	6(a6),d0
00071786 6700                       		beq.s	loc_72510
00071788 532E 0006                  		subq.b	#1,6(a6)
0007178C 4E75                       		rts	
0007178E                            ; ===========================================================================
0007178E                            
0007178E                            loc_72510:
0007178E 532E 0004                  		subq.b	#1,4(a6)
00071792 6700 0000                  		beq.w	Sound_E4
00071796 1D7C 0003 0006             		move.b	#3,6(a6)
0007179C 4BEE 0070                  		lea	$70(a6),a5
000717A0 7E05                       		moveq	#5,d7
000717A2                            
000717A2                            loc_72524:
000717A2 4A15                       		tst.b	(a5)
000717A4 6A00                       		bpl.s	loc_72538
000717A6 522D 0009                  		addq.b	#1,9(a5)
000717AA 6A00                       		bpl.s	loc_72534
000717AC 0895 0007                  		bclr	#7,(a5)
000717B0 6000                       		bra.s	loc_72538
000717B2                            ; ===========================================================================
000717B2                            
000717B2                            loc_72534:
000717B2 4EBA 0000                  		jsr	sub_72CB4(pc)
000717B6                            
000717B6                            loc_72538:
000717B6 DAFC 0030                  		adda.w	#$30,a5
000717BA 51CF FFE6                  		dbf	d7,loc_72524
000717BE                            
000717BE 7E02                       		moveq	#2,d7
000717C0                            
000717C0                            loc_72542:
000717C0 4A15                       		tst.b	(a5)
000717C2 6A00                       		bpl.s	loc_72560
000717C4 522D 0009                  		addq.b	#1,9(a5)
000717C8 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000717CE 6500                       		bcs.s	loc_72558
000717D0 0895 0007                  		bclr	#7,(a5)
000717D4 6000                       		bra.s	loc_72560
000717D6                            ; ===========================================================================
000717D6                            
000717D6                            loc_72558:
000717D6 1C2D 0009                  		move.b	9(a5),d6
000717DA 4EBA 0000                  		jsr	sub_7296A(pc)
000717DE                            
000717DE                            loc_72560:
000717DE DAFC 0030                  		adda.w	#$30,a5
000717E2 51CF FFDC                  		dbf	d7,loc_72542
000717E6                            
000717E6 4E75                       		rts	
000717E8                            ; End of function sub_72504
000717E8                            
000717E8                            
000717E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000717E8                            
000717E8                            
000717E8                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000717E8 7602                       		moveq	#2,d3
000717EA 7028                       		moveq	#$28,d0
000717EC                            
000717EC                            loc_7256E:
000717EC 1203                       		move.b	d3,d1
000717EE 4EBA 0000                  		jsr	sub_7272E(pc)
000717F2 5801                       		addq.b	#4,d1
000717F4 4EBA 0000                  		jsr	sub_7272E(pc)
000717F8 51CB FFF2                  		dbf	d3,loc_7256E
000717FC                            
000717FC 7040                       		moveq	#$40,d0
000717FE 727F                       		moveq	#$7F,d1
00071800 7802                       		moveq	#2,d4
00071802                            
00071802                            loc_72584:
00071802 7603                       		moveq	#3,d3
00071804                            
00071804                            loc_72586:
00071804 4EBA 0000                  		jsr	sub_7272E(pc)
00071808 4EBA 0000                  		jsr	sub_72764(pc)
0007180C 5840                       		addq.w	#4,d0
0007180E 51CB FFF4                  		dbf	d3,loc_72586
00071812                            
00071812 0400 000F                  		subi.b	#$F,d0
00071816 51CC FFEA                  		dbf	d4,loc_72584
0007181A                            
0007181A 4E75                       		rts	
0007181C                            ; End of function sub_7256A
0007181C                            
0007181C                            ; ===========================================================================
0007181C                            ; ---------------------------------------------------------------------------
0007181C                            ; Stop music
0007181C                            ; ---------------------------------------------------------------------------
0007181C                            
0007181C                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007181C 702B                       		moveq	#$2B,d0
0007181E 123C 0080                  		move.b	#$80,d1
00071822 4EBA 0000                  		jsr	sub_7272E(pc)
00071826 7027                       		moveq	#$27,d0
00071828 7200                       		moveq	#0,d1
0007182A 4EBA 0000                  		jsr	sub_7272E(pc)
0007182E 204E                       		movea.l	a6,a0
00071830 303C 00E3                  		move.w	#$E3,d0
00071834                            
00071834                            loc_725B6:
00071834 4298                       		clr.l	(a0)+
00071836 51C8 FFFC                  		dbf	d0,loc_725B6
0007183A                            
0007183A 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00071840 4EBA FFA6                  		jsr	sub_7256A(pc)
00071844 6000 0000                  		bra.w	sub_729B6
00071848                            
00071848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071848                            
00071848                            
00071848                            sub_725CA:				; XREF: Sound_ChkValue
00071848 204E                       		movea.l	a6,a0
0007184A 1216                       		move.b	0(a6),d1
0007184C 142E 0027                  		move.b	$27(a6),d2
00071850 162E 002A                  		move.b	$2A(a6),d3
00071854 182E 0026                  		move.b	$26(a6),d4
00071858 3A2E 000A                  		move.w	$A(a6),d5
0007185C 303C 0087                  		move.w	#$87,d0
00071860                            
00071860                            loc_725E4:
00071860 4298                       		clr.l	(a0)+
00071862 51C8 FFFC                  		dbf	d0,loc_725E4
00071866                            
00071866 1C81                       		move.b	d1,0(a6)
00071868 1D42 0027                  		move.b	d2,$27(a6)
0007186C 1D43 002A                  		move.b	d3,$2A(a6)
00071870 1D44 0026                  		move.b	d4,$26(a6)
00071874 3D45 000A                  		move.w	d5,$A(a6)
00071878 1D7C 0080 0009             		move.b	#$80,9(a6)
0007187E 4EBA FF68                  		jsr	sub_7256A(pc)
00071882 6000 0000                  		bra.w	sub_729B6
00071886                            ; End of function sub_725CA
00071886                            
00071886                            
00071886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071886                            
00071886                            
00071886                            sub_7260C:				; XREF: sub_71B4C
00071886 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007188C 41EE 004E                  		lea	$4E(a6),a0
00071890 7030                       		moveq	#$30,d0
00071892 7209                       		moveq	#9,d1
00071894                            
00071894                            loc_7261A:
00071894 5210                       		addq.b	#1,(a0)
00071896 D0C0                       		adda.w	d0,a0
00071898 51C9 FFFA                  		dbf	d1,loc_7261A
0007189C                            
0007189C 4E75                       		rts	
0007189E                            ; End of function sub_7260C
0007189E                            
0007189E                            ; ===========================================================================
0007189E                            ; ---------------------------------------------------------------------------
0007189E                            ; Speed	up music
0007189E                            ; ---------------------------------------------------------------------------
0007189E                            
0007189E                            Sound_E2:				; XREF: Sound_ExIndex
0007189E 4A2E 0027                  		tst.b	$27(a6)
000718A2 6600                       		bne.s	loc_7263E
000718A4 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000718AA 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000718B0 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000718B6 4E75                       		rts	
000718B8                            ; ===========================================================================
000718B8                            
000718B8                            loc_7263E:
000718B8 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000718BE 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000718C4 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000718CA 4E75                       		rts	
000718CC                            ; ===========================================================================
000718CC                            ; ---------------------------------------------------------------------------
000718CC                            ; Change music back to normal speed
000718CC                            ; ---------------------------------------------------------------------------
000718CC                            
000718CC                            Sound_E3:				; XREF: Sound_ExIndex
000718CC 4A2E 0027                  		tst.b	$27(a6)
000718D0 6600                       		bne.s	loc_7266A
000718D2 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000718D8 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000718DE 422E 002A                  		clr.b	$2A(a6)
000718E2 4E75                       		rts	
000718E4                            ; ===========================================================================
000718E4                            
000718E4                            loc_7266A:
000718E4 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000718EA 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000718F0 422E 03CA                  		clr.b	$3CA(a6)
000718F4 4E75                       		rts	
000718F6                            
000718F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000718F6                            
000718F6                            
000718F6                            sub_7267C:				; XREF: sub_71B4C
000718F6 4A2E 0025                  		tst.b	$25(a6)
000718FA 6700                       		beq.s	loc_72688
000718FC 532E 0025                  		subq.b	#1,$25(a6)
00071900 4E75                       		rts	
00071902                            ; ===========================================================================
00071902                            
00071902                            loc_72688:
00071902 4A2E 0026                  		tst.b	$26(a6)
00071906 6700                       		beq.s	loc_726D6
00071908 532E 0026                  		subq.b	#1,$26(a6)
0007190C 1D7C 0002 0025             		move.b	#2,$25(a6)
00071912 4BEE 0070                  		lea	$70(a6),a5
00071916 7E05                       		moveq	#5,d7
00071918                            
00071918                            loc_7269E:
00071918 4A15                       		tst.b	(a5)
0007191A 6A00                       		bpl.s	loc_726AA
0007191C 532D 0009                  		subq.b	#1,9(a5)
00071920 4EBA 0000                  		jsr	sub_72CB4(pc)
00071924                            
00071924                            loc_726AA:
00071924 DAFC 0030                  		adda.w	#$30,a5
00071928 51CF FFEE                  		dbf	d7,loc_7269E
0007192C 7E02                       		moveq	#2,d7
0007192E                            
0007192E                            loc_726B4:
0007192E 4A15                       		tst.b	(a5)
00071930 6A00                       		bpl.s	loc_726CC
00071932 532D 0009                  		subq.b	#1,9(a5)
00071936 1C2D 0009                  		move.b	9(a5),d6
0007193A 0C06 0010                  		cmpi.b	#$10,d6
0007193E 6500                       		bcs.s	loc_726C8
00071940 7C0F                       		moveq	#$F,d6
00071942                            
00071942                            loc_726C8:
00071942 4EBA 0000                  		jsr	sub_7296A(pc)
00071946                            
00071946                            loc_726CC:
00071946 DAFC 0030                  		adda.w	#$30,a5
0007194A 51CF FFE2                  		dbf	d7,loc_726B4
0007194E 4E75                       		rts	
00071950                            ; ===========================================================================
00071950                            
00071950                            loc_726D6:
00071950 08AE 0002 0040             		bclr	#2,$40(a6)
00071956 422E 0024                  		clr.b	$24(a6)
0007195A 4E75                       		rts	
0007195C                            ; End of function sub_7267C
0007195C                            
0007195C                            ; ===========================================================================
0007195C                            
0007195C                            loc_726E2:				; XREF: sub_71CCA
0007195C 0815 0001                  		btst	#1,(a5)
00071960 6600                       		bne.s	locret_726FC
00071962 0815 0002                  		btst	#2,(a5)
00071966 6600                       		bne.s	locret_726FC
00071968 7028                       		moveq	#$28,d0
0007196A 122D 0001                  		move.b	1(a5),d1
0007196E 0001 00F0                  		ori.b	#-$10,d1
00071972 6000 0000                  		bra.w	sub_7272E
00071976                            ; ===========================================================================
00071976                            
00071976                            locret_726FC:
00071976 4E75                       		rts	
00071978                            
00071978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071978                            
00071978                            
00071978                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00071978 0815 0004                  		btst	#4,(a5)
0007197C 6600                       		bne.s	locret_72714
0007197E 0815 0002                  		btst	#2,(a5)
00071982 6600                       		bne.s	locret_72714
00071984                            
00071984                            loc_7270A:				; XREF: Snd_FadeOut2
00071984 7028                       		moveq	#$28,d0
00071986 122D 0001                  		move.b	1(a5),d1
0007198A 6000 0000                  		bra.w	sub_7272E
0007198E                            ; ===========================================================================
0007198E                            
0007198E                            locret_72714:
0007198E 4E75                       		rts	
00071990                            ; End of function sub_726FE
00071990                            
00071990                            ; ===========================================================================
00071990                            
00071990                            loc_72716:				; XREF: sub_72A5A
00071990 0815 0002                  		btst	#2,(a5)
00071994 6600                       		bne.s	locret_72720
00071996 6000 0000                  		bra.w	sub_72722
0007199A                            ; ===========================================================================
0007199A                            
0007199A                            locret_72720:
0007199A 4E75                       		rts	
0007199C                            
0007199C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007199C                            
0007199C                            
0007199C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007199C 082D 0002 0001             		btst	#2,1(a5)
000719A2 6600                       		bne.s	loc_7275A
000719A4 D02D 0001                  		add.b	1(a5),d0
000719A8                            ; End of function sub_72722
000719A8                            
000719A8                            
000719A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000719A8                            
000719A8                            
000719A8                            sub_7272E:				; XREF: loc_71E6A
000719A8 1439 00A0 4000             		move.b	($A04000).l,d2
000719AE 0802 0007                  		btst	#7,d2
000719B2 66F4                       		bne.s	sub_7272E
000719B4 13C0 00A0 4000             		move.b	d0,($A04000).l
000719BA 4E71                       		nop	
000719BC 4E71                       		nop	
000719BE 4E71                       		nop	
000719C0                            
000719C0                            loc_72746:
000719C0 1439 00A0 4000             		move.b	($A04000).l,d2
000719C6 0802 0007                  		btst	#7,d2
000719CA 66F4                       		bne.s	loc_72746
000719CC                            
000719CC 13C1 00A0 4001             		move.b	d1,($A04001).l
000719D2 4E75                       		rts	
000719D4                            ; End of function sub_7272E
000719D4                            
000719D4                            ; ===========================================================================
000719D4                            
000719D4                            loc_7275A:				; XREF: sub_72722
000719D4 142D 0001                  		move.b	1(a5),d2
000719D8 0882 0002                  		bclr	#2,d2
000719DC D002                       		add.b	d2,d0
000719DE                            
000719DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000719DE                            
000719DE                            
000719DE                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000719DE 1439 00A0 4000             		move.b	($A04000).l,d2
000719E4 0802 0007                  		btst	#7,d2
000719E8 66F4                       		bne.s	sub_72764
000719EA 13C0 00A0 4002             		move.b	d0,($A04002).l
000719F0 4E71                       		nop	
000719F2 4E71                       		nop	
000719F4 4E71                       		nop	
000719F6                            
000719F6                            loc_7277C:
000719F6 1439 00A0 4000             		move.b	($A04000).l,d2
000719FC 0802 0007                  		btst	#7,d2
00071A00 66F4                       		bne.s	loc_7277C
00071A02                            
00071A02 13C1 00A0 4003             		move.b	d1,($A04003).l
00071A08 4E75                       		rts	
00071A0A                            ; End of function sub_72764
00071A0A                            
00071A0A                            ; ===========================================================================
00071A0A 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00071A1C 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00071A2E 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00071A3E 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00071A4E 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00071A5E 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00071A6E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00071A7E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00071A8E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00071A9E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00071AAE 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00071ABE 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00071ACA                            
00071ACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071ACA                            
00071ACA                            
00071ACA                            sub_72850:				; XREF: sub_71B4C
00071ACA 532D 000E                  		subq.b	#1,$E(a5)
00071ACE 6600                       		bne.s	loc_72866
00071AD0 0895 0004                  		bclr	#4,(a5)
00071AD4 4EBA 0000                  		jsr	sub_72878(pc)
00071AD8 4EBA 0000                  		jsr	sub_728DC(pc)
00071ADC 6000 0000                  		bra.w	loc_7292E
00071AE0                            ; ===========================================================================
00071AE0                            
00071AE0                            loc_72866:
00071AE0 4EBA F4B2                  		jsr	sub_71D9E(pc)
00071AE4 4EBA 0000                  		jsr	sub_72926(pc)
00071AE8 4EBA F4D2                  		jsr	sub_71DC6(pc)
00071AEC 4EBA 0000                  		jsr	sub_728E2(pc)
00071AF0 4E75                       		rts	
00071AF2                            ; End of function sub_72850
00071AF2                            
00071AF2                            
00071AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071AF2                            
00071AF2                            
00071AF2                            sub_72878:				; XREF: sub_72850
00071AF2 0895 0001                  		bclr	#1,(a5)
00071AF6 286D 0004                  		movea.l	4(a5),a4
00071AFA                            
00071AFA                            loc_72880:
00071AFA 7A00                       		moveq	#0,d5
00071AFC 1A1C                       		move.b	(a4)+,d5
00071AFE 0C05 00E0                  		cmpi.b	#$E0,d5
00071B02 6500                       		bcs.s	loc_72890
00071B04 4EBA 0000                  		jsr	sub_72A5A(pc)
00071B08 60F0                       		bra.s	loc_72880
00071B0A                            ; ===========================================================================
00071B0A                            
00071B0A                            loc_72890:
00071B0A 4A05                       		tst.b	d5
00071B0C 6A00                       		bpl.s	loc_728A4
00071B0E 4EBA 0000                  		jsr	sub_728AC(pc)
00071B12 1A1C                       		move.b	(a4)+,d5
00071B14 4A05                       		tst.b	d5
00071B16 6A00                       		bpl.s	loc_728A4
00071B18 534C                       		subq.w	#1,a4
00071B1A 6000 F43A                  		bra.w	sub_71D60
00071B1E                            ; ===========================================================================
00071B1E                            
00071B1E                            loc_728A4:
00071B1E 4EBA F416                  		jsr	sub_71D40(pc)
00071B22 6000 F432                  		bra.w	sub_71D60
00071B26                            ; End of function sub_72878
00071B26                            
00071B26                            
00071B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071B26                            
00071B26                            
00071B26                            sub_728AC:				; XREF: sub_72878
00071B26 0405 0081                  		subi.b	#$81,d5
00071B2A 6500                       		bcs.s	loc_728CA
00071B2C DA2D 0008                  		add.b	8(a5),d5
00071B30 0245 007F                  		andi.w	#$7F,d5
00071B34 E34D                       		lsl.w	#1,d5
00071B36 41FA 0000                  		lea	word_729CE(pc),a0
00071B3A 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00071B40 6000 F414                  		bra.w	sub_71D60
00071B44                            ; ===========================================================================
00071B44                            
00071B44                            loc_728CA:
00071B44 08D5 0001                  		bset	#1,(a5)
00071B48 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00071B4E 4EBA F406                  		jsr	sub_71D60(pc)
00071B52 6000 0000                  		bra.w	sub_729A0
00071B56                            ; End of function sub_728AC
00071B56                            
00071B56                            
00071B56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071B56                            
00071B56                            
00071B56                            sub_728DC:				; XREF: sub_72850
00071B56 3C2D 0010                  		move.w	$10(a5),d6
00071B5A 6B00                       		bmi.s	loc_72920
00071B5C                            ; End of function sub_728DC
00071B5C                            
00071B5C                            
00071B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071B5C                            
00071B5C                            
00071B5C                            sub_728E2:				; XREF: sub_72850
00071B5C 102D 001E                  		move.b	$1E(a5),d0
00071B60 4880                       		ext.w	d0
00071B62 DC40                       		add.w	d0,d6
00071B64 0815 0002                  		btst	#2,(a5)
00071B68 6600                       		bne.s	locret_7291E
00071B6A 0815 0001                  		btst	#1,(a5)
00071B6E 6600                       		bne.s	locret_7291E
00071B70 102D 0001                  		move.b	1(a5),d0
00071B74 0C00 00E0                  		cmpi.b	#$E0,d0
00071B78 6600                       		bne.s	loc_72904
00071B7A 103C 00C0                  		move.b	#$C0,d0
00071B7E                            
00071B7E                            loc_72904:
00071B7E 3206                       		move.w	d6,d1
00071B80 0201 000F                  		andi.b	#$F,d1
00071B84 8001                       		or.b	d1,d0
00071B86 E84E                       		lsr.w	#4,d6
00071B88 0206 003F                  		andi.b	#$3F,d6
00071B8C 13C0 00C0 0011             		move.b	d0,($C00011).l
00071B92 13C6 00C0 0011             		move.b	d6,($C00011).l
00071B98                            
00071B98                            locret_7291E:
00071B98 4E75                       		rts	
00071B9A                            ; End of function sub_728E2
00071B9A                            
00071B9A                            ; ===========================================================================
00071B9A                            
00071B9A                            loc_72920:				; XREF: sub_728DC
00071B9A 08D5 0001                  		bset	#1,(a5)
00071B9E 4E75                       		rts	
00071BA0                            
00071BA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071BA0                            
00071BA0                            
00071BA0                            sub_72926:				; XREF: sub_72850
00071BA0 4A2D 000B                  		tst.b	$B(a5)
00071BA4 6700 0000                  		beq.w	locret_7298A
00071BA8                            
00071BA8                            loc_7292E:				; XREF: sub_72850
00071BA8 1C2D 0009                  		move.b	9(a5),d6
00071BAC 7000                       		moveq	#0,d0
00071BAE 102D 000B                  		move.b	$B(a5),d0
00071BB2 6700                       		beq.s	sub_7296A
00071BB4 2079 0007 0B6A             		movea.l	(Go_PSGIndex).l,a0
00071BBA 5340                       		subq.w	#1,d0
00071BBC E548                       		lsl.w	#2,d0
00071BBE 2070 0000                  		movea.l	(a0,d0.w),a0
00071BC2 102D 000C                  		move.b	$C(a5),d0
00071BC6 1030 0000                  		move.b	(a0,d0.w),d0
00071BCA 522D 000C                  		addq.b	#1,$C(a5)
00071BCE 0800 0007                  		btst	#7,d0
00071BD2 6700                       		beq.s	loc_72960
00071BD4 0C00 0080                  		cmpi.b	#$80,d0
00071BD8 6700                       		beq.s	loc_7299A
00071BDA                            
00071BDA                            loc_72960:
00071BDA DC40                       		add.w	d0,d6
00071BDC 0C06 0010                  		cmpi.b	#$10,d6
00071BE0 6500                       		bcs.s	sub_7296A
00071BE2 7C0F                       		moveq	#$F,d6
00071BE4                            ; End of function sub_72926
00071BE4                            
00071BE4                            
00071BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071BE4                            
00071BE4                            
00071BE4                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00071BE4 0815 0001                  		btst	#1,(a5)
00071BE8 6600                       		bne.s	locret_7298A
00071BEA 0815 0002                  		btst	#2,(a5)
00071BEE 6600                       		bne.s	locret_7298A
00071BF0 0815 0004                  		btst	#4,(a5)
00071BF4 6600                       		bne.s	loc_7298C
00071BF6                            
00071BF6                            loc_7297C:
00071BF6 8C2D 0001                  		or.b	1(a5),d6
00071BFA 0606 0010                  		addi.b	#$10,d6
00071BFE 13C6 00C0 0011             		move.b	d6,($C00011).l
00071C04                            
00071C04                            locret_7298A:
00071C04 4E75                       		rts	
00071C06                            ; ===========================================================================
00071C06                            
00071C06                            loc_7298C:
00071C06 4A2D 0013                  		tst.b	$13(a5)
00071C0A 67EA                       		beq.s	loc_7297C
00071C0C 4A2D 0012                  		tst.b	$12(a5)
00071C10 66E4                       		bne.s	loc_7297C
00071C12 4E75                       		rts	
00071C14                            ; End of function sub_7296A
00071C14                            
00071C14                            ; ===========================================================================
00071C14                            
00071C14                            loc_7299A:				; XREF: sub_72926
00071C14 532D 000C                  		subq.b	#1,$C(a5)
00071C18 4E75                       		rts	
00071C1A                            
00071C1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C1A                            
00071C1A                            
00071C1A                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00071C1A 0815 0002                  		btst	#2,(a5)
00071C1E 6600                       		bne.s	locret_729B4
00071C20                            
00071C20                            loc_729A6:				; XREF: Snd_FadeOut2
00071C20 102D 0001                  		move.b	1(a5),d0
00071C24 0000 001F                  		ori.b	#$1F,d0
00071C28 13C0 00C0 0011             		move.b	d0,($C00011).l
00071C2E                            
00071C2E                            locret_729B4:
00071C2E 4E75                       		rts	
00071C30                            ; End of function sub_729A0
00071C30                            
00071C30                            
00071C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C30                            
00071C30                            
00071C30                            sub_729B6:				; XREF: loc_71E7C
00071C30 41F9 00C0 0011             		lea	($C00011).l,a0
00071C36 10BC 009F                  		move.b	#$9F,(a0)
00071C3A 10BC 00BF                  		move.b	#$BF,(a0)
00071C3E 10BC 00DF                  		move.b	#$DF,(a0)
00071C42 10BC 00FF                  		move.b	#$FF,(a0)
00071C46 4E75                       		rts	
00071C48                            ; End of function sub_729B6
00071C48                            
00071C48                            ; ===========================================================================
00071C48 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00071C5A 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00071C6C 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00071C80 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00071C94 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00071CA8 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00071CBC 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00071CD0 0011 0000                  		dc.w $11, 0
00071CD4                            
00071CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071CD4                            
00071CD4                            
00071CD4                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00071CD4 0445 00E0                  		subi.w	#$E0,d5
00071CD8 E54D                       		lsl.w	#2,d5
00071CDA 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00071CDE                            ; End of function sub_72A5A
00071CDE                            
00071CDE                            ; ===========================================================================
00071CDE                            
00071CDE                            loc_72A64:
00071CDE 6000 0000                  		bra.w	loc_72ACC
00071CE2                            ; ===========================================================================
00071CE2 6000 0000                  		bra.w	loc_72AEC
00071CE6                            ; ===========================================================================
00071CE6 6000 0000                  		bra.w	loc_72AF2
00071CEA                            ; ===========================================================================
00071CEA 6000 0000                  		bra.w	loc_72AF8
00071CEE                            ; ===========================================================================
00071CEE 6000 0000                  		bra.w	loc_72B14
00071CF2                            ; ===========================================================================
00071CF2 6000 0000                  		bra.w	loc_72B9E
00071CF6                            ; ===========================================================================
00071CF6 6000 0000                  		bra.w	loc_72BA4
00071CFA                            ; ===========================================================================
00071CFA 6000 0000                  		bra.w	loc_72BAE
00071CFE                            ; ===========================================================================
00071CFE 6000 0000                  		bra.w	loc_72BB4
00071D02                            ; ===========================================================================
00071D02 6000 0000                  		bra.w	loc_72BBE
00071D06                            ; ===========================================================================
00071D06 6000 0000                  		bra.w	loc_72BC6
00071D0A                            ; ===========================================================================
00071D0A 6000 0000                  		bra.w	loc_72BD0
00071D0E                            ; ===========================================================================
00071D0E 6000 0000                  		bra.w	loc_72BE6
00071D12                            ; ===========================================================================
00071D12 6000 0000                  		bra.w	loc_72BEE
00071D16                            ; ===========================================================================
00071D16 6000 0000                  		bra.w	loc_72BF4
00071D1A                            ; ===========================================================================
00071D1A 6000 0000                  		bra.w	loc_72C26
00071D1E                            ; ===========================================================================
00071D1E 6000 0000                  		bra.w	loc_72D30
00071D22                            ; ===========================================================================
00071D22 6000 0000                  		bra.w	loc_72D52
00071D26                            ; ===========================================================================
00071D26 6000 0000                  		bra.w	loc_72D58
00071D2A                            ; ===========================================================================
00071D2A 6000 0000                  		bra.w	loc_72E06
00071D2E                            ; ===========================================================================
00071D2E 6000 0000                  		bra.w	loc_72E20
00071D32                            ; ===========================================================================
00071D32 6000 0000                  		bra.w	loc_72E26
00071D36                            ; ===========================================================================
00071D36 6000 0000                  		bra.w	loc_72E2C
00071D3A                            ; ===========================================================================
00071D3A 6000 0000                  		bra.w	loc_72E38
00071D3E                            ; ===========================================================================
00071D3E 6000 0000                  		bra.w	loc_72E52
00071D42                            ; ===========================================================================
00071D42 6000 0000                  		bra.w	loc_72E64
00071D46                            ; ===========================================================================
00071D46                            
00071D46                            loc_72ACC:				; XREF: loc_72A64
00071D46 121C                       		move.b	(a4)+,d1
00071D48 4A2D 0001                  		tst.b	1(a5)
00071D4C 6B00                       		bmi.s	locret_72AEA
00071D4E 102D 000A                  		move.b	$A(a5),d0
00071D52 0200 0037                  		andi.b	#$37,d0
00071D56 8200                       		or.b	d0,d1
00071D58 1B41 000A                  		move.b	d1,$A(a5)
00071D5C 103C 00B4                  		move.b	#$B4,d0
00071D60 6000 FC2E                  		bra.w	loc_72716
00071D64                            ; ===========================================================================
00071D64                            
00071D64                            locret_72AEA:
00071D64 4E75                       		rts	
00071D66                            ; ===========================================================================
00071D66                            
00071D66                            loc_72AEC:				; XREF: loc_72A64
00071D66 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00071D6A 4E75                       		rts	
00071D6C                            ; ===========================================================================
00071D6C                            
00071D6C                            loc_72AF2:				; XREF: loc_72A64
00071D6C 1D5C 0007                  		move.b	(a4)+,7(a6)
00071D70 4E75                       		rts	
00071D72                            ; ===========================================================================
00071D72                            
00071D72                            loc_72AF8:				; XREF: loc_72A64
00071D72 7000                       		moveq	#0,d0
00071D74 102D 000D                  		move.b	$D(a5),d0
00071D78 2875 0000                  		movea.l	(a5,d0.w),a4
00071D7C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00071D84 544C                       		addq.w	#2,a4
00071D86 5800                       		addq.b	#4,d0
00071D88 1B40 000D                  		move.b	d0,$D(a5)
00071D8C 4E75                       		rts	
00071D8E                            ; ===========================================================================
00071D8E                            
00071D8E                            loc_72B14:				; XREF: loc_72A64
00071D8E 204E                       		movea.l	a6,a0
00071D90 43EE 03A0                  		lea	$3A0(a6),a1
00071D94 303C 0087                  		move.w	#$87,d0
00071D98                            
00071D98                            loc_72B1E:
00071D98 20D9                       		move.l	(a1)+,(a0)+
00071D9A 51C8 FFFC                  		dbf	d0,loc_72B1E
00071D9E                            
00071D9E 08EE 0002 0040             		bset	#2,$40(a6)
00071DA4 264D                       		movea.l	a5,a3
00071DA6 1C3C 0028                  		move.b	#$28,d6
00071DAA 9C2E 0026                  		sub.b	$26(a6),d6
00071DAE 7E05                       		moveq	#5,d7
00071DB0 4BEE 0070                  		lea	$70(a6),a5
00071DB4                            
00071DB4                            loc_72B3A:
00071DB4 0815 0007                  		btst	#7,(a5)
00071DB8 6700                       		beq.s	loc_72B5C
00071DBA 08D5 0001                  		bset	#1,(a5)
00071DBE DD2D 0009                  		add.b	d6,9(a5)
00071DC2 0815 0002                  		btst	#2,(a5)
00071DC6 6600                       		bne.s	loc_72B5C
00071DC8 7000                       		moveq	#0,d0
00071DCA 102D 000B                  		move.b	$B(a5),d0
00071DCE 226E 0018                  		movea.l	$18(a6),a1
00071DD2 4EBA 0000                  		jsr	sub_72C4E(pc)
00071DD6                            
00071DD6                            loc_72B5C:
00071DD6 DAFC 0030                  		adda.w	#$30,a5
00071DDA 51CF FFD8                  		dbf	d7,loc_72B3A
00071DDE                            
00071DDE 7E02                       		moveq	#2,d7
00071DE0                            
00071DE0                            loc_72B66:
00071DE0 0815 0007                  		btst	#7,(a5)
00071DE4 6700                       		beq.s	loc_72B78
00071DE6 08D5 0001                  		bset	#1,(a5)
00071DEA 4EBA FE2E                  		jsr	sub_729A0(pc)
00071DEE DD2D 0009                  		add.b	d6,9(a5)
00071DF2                            
00071DF2                            loc_72B78:
00071DF2 DAFC 0030                  		adda.w	#$30,a5
00071DF6 51CF FFE8                  		dbf	d7,loc_72B66
00071DFA 2A4B                       		movea.l	a3,a5
00071DFC 1D7C 0080 0024             		move.b	#$80,$24(a6)
00071E02 1D7C 0028 0026             		move.b	#$28,$26(a6)
00071E08 422E 0027                  		clr.b	$27(a6)
00071E0C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00071E14 504F                       		addq.w	#8,sp
00071E16 4E75                       		rts	
00071E18                            ; ===========================================================================
00071E18                            
00071E18                            loc_72B9E:				; XREF: loc_72A64
00071E18 1B5C 0002                  		move.b	(a4)+,2(a5)
00071E1C 4E75                       		rts	
00071E1E                            ; ===========================================================================
00071E1E                            
00071E1E                            loc_72BA4:				; XREF: loc_72A64
00071E1E 101C                       		move.b	(a4)+,d0
00071E20 D12D 0009                  		add.b	d0,9(a5)
00071E24 6000 0000                  		bra.w	sub_72CB4
00071E28                            ; ===========================================================================
00071E28                            
00071E28                            loc_72BAE:				; XREF: loc_72A64
00071E28 08D5 0004                  		bset	#4,(a5)
00071E2C 4E75                       		rts	
00071E2E                            ; ===========================================================================
00071E2E                            
00071E2E                            loc_72BB4:				; XREF: loc_72A64
00071E2E 1B54 0012                  		move.b	(a4),$12(a5)
00071E32 1B5C 0013                  		move.b	(a4)+,$13(a5)
00071E36 4E75                       		rts	
00071E38                            ; ===========================================================================
00071E38                            
00071E38                            loc_72BBE:				; XREF: loc_72A64
00071E38 101C                       		move.b	(a4)+,d0
00071E3A D12D 0008                  		add.b	d0,8(a5)
00071E3E 4E75                       		rts	
00071E40                            ; ===========================================================================
00071E40                            
00071E40                            loc_72BC6:				; XREF: loc_72A64
00071E40 1D54 0002                  		move.b	(a4),2(a6)
00071E44 1D5C 0001                  		move.b	(a4)+,1(a6)
00071E48 4E75                       		rts	
00071E4A                            ; ===========================================================================
00071E4A                            
00071E4A                            loc_72BD0:				; XREF: loc_72A64
00071E4A 41EE 0040                  		lea	$40(a6),a0
00071E4E 101C                       		move.b	(a4)+,d0
00071E50 7230                       		moveq	#$30,d1
00071E52 7409                       		moveq	#9,d2
00071E54                            
00071E54                            loc_72BDA:
00071E54 1140 0002                  		move.b	d0,2(a0)
00071E58 D0C1                       		adda.w	d1,a0
00071E5A 51CA FFF8                  		dbf	d2,loc_72BDA
00071E5E                            
00071E5E 4E75                       		rts	
00071E60                            ; ===========================================================================
00071E60                            
00071E60                            loc_72BE6:				; XREF: loc_72A64
00071E60 101C                       		move.b	(a4)+,d0
00071E62 D12D 0009                  		add.b	d0,9(a5)
00071E66 4E75                       		rts	
00071E68                            ; ===========================================================================
00071E68                            
00071E68                            loc_72BEE:				; XREF: loc_72A64
00071E68 422E 002C                  		clr.b	$2C(a6)
00071E6C 4E75                       		rts	
00071E6E                            ; ===========================================================================
00071E6E                            
00071E6E                            loc_72BF4:				; XREF: loc_72A64
00071E6E 0895 0007                  		bclr	#7,(a5)
00071E72 0895 0004                  		bclr	#4,(a5)
00071E76 4EBA FB00                  		jsr	sub_726FE(pc)
00071E7A 4A2E 0250                  		tst.b	$250(a6)
00071E7E 6B00                       		bmi.s	loc_72C22
00071E80 264D                       		movea.l	a5,a3
00071E82 4BEE 0100                  		lea	$100(a6),a5
00071E86 226E 0018                  		movea.l	$18(a6),a1
00071E8A 0895 0002                  		bclr	#2,(a5)
00071E8E 08D5 0001                  		bset	#1,(a5)
00071E92 102D 000B                  		move.b	$B(a5),d0
00071E96 4EBA 0000                  		jsr	sub_72C4E(pc)
00071E9A 2A4B                       		movea.l	a3,a5
00071E9C                            
00071E9C                            loc_72C22:
00071E9C 504F                       		addq.w	#8,sp
00071E9E 4E75                       		rts	
00071EA0                            ; ===========================================================================
00071EA0                            
00071EA0                            loc_72C26:				; XREF: loc_72A64
00071EA0 7000                       		moveq	#0,d0
00071EA2 101C                       		move.b	(a4)+,d0
00071EA4 1B40 000B                  		move.b	d0,$B(a5)
00071EA8 0815 0002                  		btst	#2,(a5)
00071EAC 6600 0000                  		bne.w	locret_72CAA
00071EB0 226E 0018                  		movea.l	$18(a6),a1
00071EB4 4A2E 000E                  		tst.b	$E(a6)
00071EB8 6700                       		beq.s	sub_72C4E
00071EBA 226D 0020                  		movea.l	$20(a5),a1
00071EBE 4A2E 000E                  		tst.b	$E(a6)
00071EC2 6B00                       		bmi.s	sub_72C4E
00071EC4 226E 0020                  		movea.l	$20(a6),a1
00071EC8                            
00071EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071EC8                            
00071EC8                            
00071EC8                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00071EC8 5340                       		subq.w	#1,d0
00071ECA 6B00                       		bmi.s	loc_72C5C
00071ECC 323C 0019                  		move.w	#$19,d1
00071ED0                            
00071ED0                            loc_72C56:
00071ED0 D2C1                       		adda.w	d1,a1
00071ED2 51C8 FFFC                  		dbf	d0,loc_72C56
00071ED6                            
00071ED6                            loc_72C5C:
00071ED6 1219                       		move.b	(a1)+,d1
00071ED8 1B41 001F                  		move.b	d1,$1F(a5)
00071EDC 1801                       		move.b	d1,d4
00071EDE 103C 00B0                  		move.b	#$B0,d0
00071EE2 4EBA FAB8                  		jsr	sub_72722(pc)
00071EE6 45FA 0000                  		lea	byte_72D18(pc),a2
00071EEA 7613                       		moveq	#$13,d3
00071EEC                            
00071EEC                            loc_72C72:
00071EEC 101A                       		move.b	(a2)+,d0
00071EEE 1219                       		move.b	(a1)+,d1
00071EF0 4EBA FAAA                  		jsr	sub_72722(pc)
00071EF4 51CB FFF6                  		dbf	d3,loc_72C72
00071EF8 7A03                       		moveq	#3,d5
00071EFA 0244 0007                  		andi.w	#7,d4
00071EFE 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00071F02 162D 0009                  		move.b	9(a5),d3
00071F06                            
00071F06                            loc_72C8C:
00071F06 101A                       		move.b	(a2)+,d0
00071F08 1219                       		move.b	(a1)+,d1
00071F0A E20C                       		lsr.b	#1,d4
00071F0C 6400                       		bcc.s	loc_72C96
00071F0E D203                       		add.b	d3,d1
00071F10                            
00071F10                            loc_72C96:
00071F10 4EBA FA8A                  		jsr	sub_72722(pc)
00071F14 51CD FFF0                  		dbf	d5,loc_72C8C
00071F18 103C 00B4                  		move.b	#$B4,d0
00071F1C 122D 000A                  		move.b	$A(a5),d1
00071F20 4EBA FA7A                  		jsr	sub_72722(pc)
00071F24                            
00071F24                            locret_72CAA:
00071F24 4E75                       		rts	
00071F26                            ; End of function sub_72C4E
00071F26                            
00071F26                            ; ===========================================================================
00071F26 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00071F2E                            
00071F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071F2E                            
00071F2E                            
00071F2E                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00071F2E 0815 0002                  		btst	#2,(a5)
00071F32 6600                       		bne.s	locret_72D16
00071F34 7000                       		moveq	#0,d0
00071F36 102D 000B                  		move.b	$B(a5),d0
00071F3A 226E 0018                  		movea.l	$18(a6),a1
00071F3E 4A2E 000E                  		tst.b	$E(a6)
00071F42 6700                       		beq.s	loc_72CD8
00071F44 226E 0020                  		movea.l	$20(a6),a1
00071F48 4A2E 000E                  		tst.b	$E(a6)
00071F4C 6B00                       		bmi.s	loc_72CD8
00071F4E 226E 0020                  		movea.l	$20(a6),a1
00071F52                            
00071F52                            loc_72CD8:
00071F52 5340                       		subq.w	#1,d0
00071F54 6B00                       		bmi.s	loc_72CE6
00071F56 323C 0019                  		move.w	#$19,d1
00071F5A                            
00071F5A                            loc_72CE0:
00071F5A D2C1                       		adda.w	d1,a1
00071F5C 51C8 FFFC                  		dbf	d0,loc_72CE0
00071F60                            
00071F60                            loc_72CE6:
00071F60 D2FC 0015                  		adda.w	#$15,a1
00071F64 45FA 0000                  		lea	byte_72D2C(pc),a2
00071F68 102D 001F                  		move.b	$1F(a5),d0
00071F6C 0240 0007                  		andi.w	#7,d0
00071F70 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00071F74 162D 0009                  		move.b	9(a5),d3
00071F78 6B00                       		bmi.s	locret_72D16
00071F7A 7A03                       		moveq	#3,d5
00071F7C                            
00071F7C                            loc_72D02:
00071F7C 101A                       		move.b	(a2)+,d0
00071F7E 1219                       		move.b	(a1)+,d1
00071F80 E20C                       		lsr.b	#1,d4
00071F82 6400                       		bcc.s	loc_72D12
00071F84 D203                       		add.b	d3,d1
00071F86 6500                       		bcs.s	loc_72D12
00071F88 4EBA FA12                  		jsr	sub_72722(pc)
00071F8C                            
00071F8C                            loc_72D12:
00071F8C 51CD FFEE                  		dbf	d5,loc_72D02
00071F90                            
00071F90                            locret_72D16:
00071F90 4E75                       		rts	
00071F92                            ; End of function sub_72CB4
00071F92                            
00071F92                            ; ===========================================================================
00071F92 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00071F9C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00071FA6 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00071FAA                            ; ===========================================================================
00071FAA                            
00071FAA                            loc_72D30:				; XREF: loc_72A64
00071FAA 08D5 0003                  		bset	#3,(a5)
00071FAE 2B4C 0014                  		move.l	a4,$14(a5)
00071FB2 1B5C 0018                  		move.b	(a4)+,$18(a5)
00071FB6 1B5C 0019                  		move.b	(a4)+,$19(a5)
00071FBA 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00071FBE 101C                       		move.b	(a4)+,d0
00071FC0 E208                       		lsr.b	#1,d0
00071FC2 1B40 001B                  		move.b	d0,$1B(a5)
00071FC6 426D 001C                  		clr.w	$1C(a5)
00071FCA 4E75                       		rts	
00071FCC                            ; ===========================================================================
00071FCC                            
00071FCC                            loc_72D52:				; XREF: loc_72A64
00071FCC 08D5 0003                  		bset	#3,(a5)
00071FD0 4E75                       		rts	
00071FD2                            ; ===========================================================================
00071FD2                            
00071FD2                            loc_72D58:				; XREF: loc_72A64
00071FD2 0895 0007                  		bclr	#7,(a5)
00071FD6 0895 0004                  		bclr	#4,(a5)
00071FDA 4A2D 0001                  		tst.b	1(a5)
00071FDE 6B00                       		bmi.s	loc_72D74
00071FE0 4A2E 0008                  		tst.b	8(a6)
00071FE4 6B00 0000                  		bmi.w	loc_72E02
00071FE8 4EBA F98E                  		jsr	sub_726FE(pc)
00071FEC 6000                       		bra.s	loc_72D78
00071FEE                            ; ===========================================================================
00071FEE                            
00071FEE                            loc_72D74:
00071FEE 4EBA FC2A                  		jsr	sub_729A0(pc)
00071FF2                            
00071FF2                            loc_72D78:
00071FF2 4A2E 000E                  		tst.b	$E(a6)
00071FF6 6A00 0000                  		bpl.w	loc_72E02
00071FFA 4216                       		clr.b	0(a6)
00071FFC 7000                       		moveq	#0,d0
00071FFE 102D 0001                  		move.b	1(a5),d0
00072002 6B00                       		bmi.s	loc_72DCC
00072004 41FA F546                  		lea	dword_722CC(pc),a0
00072008 264D                       		movea.l	a5,a3
0007200A 0C00 0004                  		cmpi.b	#4,d0
0007200E 6600                       		bne.s	loc_72DA8
00072010 4A2E 0340                  		tst.b	$340(a6)
00072014 6A00                       		bpl.s	loc_72DA8
00072016 4BEE 0340                  		lea	$340(a6),a5
0007201A 226E 0020                  		movea.l	$20(a6),a1
0007201E 6000                       		bra.s	loc_72DB8
00072020                            ; ===========================================================================
00072020                            
00072020                            loc_72DA8:
00072020 5500                       		subq.b	#2,d0
00072022 E508                       		lsl.b	#2,d0
00072024 2A70 0000                  		movea.l	(a0,d0.w),a5
00072028 4A15                       		tst.b	(a5)
0007202A 6A00                       		bpl.s	loc_72DC8
0007202C 226E 0018                  		movea.l	$18(a6),a1
00072030                            
00072030                            loc_72DB8:
00072030 0895 0002                  		bclr	#2,(a5)
00072034 08D5 0001                  		bset	#1,(a5)
00072038 102D 000B                  		move.b	$B(a5),d0
0007203C 4EBA FE8A                  		jsr	sub_72C4E(pc)
00072040                            
00072040                            loc_72DC8:
00072040 2A4B                       		movea.l	a3,a5
00072042 6000                       		bra.s	loc_72E02
00072044                            ; ===========================================================================
00072044                            
00072044                            loc_72DCC:
00072044 41EE 0370                  		lea	$370(a6),a0
00072048 4A10                       		tst.b	(a0)
0007204A 6A00                       		bpl.s	loc_72DE0
0007204C 0C00 00E0                  		cmpi.b	#$E0,d0
00072050 6700                       		beq.s	loc_72DEA
00072052 0C00 00C0                  		cmpi.b	#$C0,d0
00072056 6700                       		beq.s	loc_72DEA
00072058                            
00072058                            loc_72DE0:
00072058 41FA F4F2                  		lea	dword_722CC(pc),a0
0007205C E608                       		lsr.b	#3,d0
0007205E 2070 0000                  		movea.l	(a0,d0.w),a0
00072062                            
00072062                            loc_72DEA:
00072062 0890 0002                  		bclr	#2,(a0)
00072066 08D0 0001                  		bset	#1,(a0)
0007206A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00072070 6600                       		bne.s	loc_72E02
00072072 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007207A                            
0007207A                            loc_72E02:
0007207A 504F                       		addq.w	#8,sp
0007207C 4E75                       		rts	
0007207E                            ; ===========================================================================
0007207E                            
0007207E                            loc_72E06:				; XREF: loc_72A64
0007207E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00072084 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00072088 0815 0002                  		btst	#2,(a5)
0007208C 6600                       		bne.s	locret_72E1E
0007208E 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00072096                            
00072096                            locret_72E1E:
00072096 4E75                       		rts	
00072098                            ; ===========================================================================
00072098                            
00072098                            loc_72E20:				; XREF: loc_72A64
00072098 0895 0003                  		bclr	#3,(a5)
0007209C 4E75                       		rts	
0007209E                            ; ===========================================================================
0007209E                            
0007209E                            loc_72E26:				; XREF: loc_72A64
0007209E 1B5C 000B                  		move.b	(a4)+,$B(a5)
000720A2 4E75                       		rts	
000720A4                            ; ===========================================================================
000720A4                            
000720A4                            loc_72E2C:				; XREF: loc_72A64
000720A4 101C                       		move.b	(a4)+,d0
000720A6 E148                       		lsl.w	#8,d0
000720A8 101C                       		move.b	(a4)+,d0
000720AA D8C0                       		adda.w	d0,a4
000720AC 534C                       		subq.w	#1,a4
000720AE 4E75                       		rts	
000720B0                            ; ===========================================================================
000720B0                            
000720B0                            loc_72E38:				; XREF: loc_72A64
000720B0 7000                       		moveq	#0,d0
000720B2 101C                       		move.b	(a4)+,d0
000720B4 121C                       		move.b	(a4)+,d1
000720B6 4A35 0024                  		tst.b	$24(a5,d0.w)
000720BA 6600                       		bne.s	loc_72E48
000720BC 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000720C0                            
000720C0                            loc_72E48:
000720C0 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000720C4 66DE                       		bne.s	loc_72E2C
000720C6 544C                       		addq.w	#2,a4
000720C8 4E75                       		rts	
000720CA                            ; ===========================================================================
000720CA                            
000720CA                            loc_72E52:				; XREF: loc_72A64
000720CA 7000                       		moveq	#0,d0
000720CC 102D 000D                  		move.b	$D(a5),d0
000720D0 5900                       		subq.b	#4,d0
000720D2 2B8C 0000                  		move.l	a4,(a5,d0.w)
000720D6 1B40 000D                  		move.b	d0,$D(a5)
000720DA 60C8                       		bra.s	loc_72E2C
000720DC                            ; ===========================================================================
000720DC                            
000720DC                            loc_72E64:				; XREF: loc_72A64
000720DC 103C 0088                  		move.b	#$88,d0
000720E0 123C 000F                  		move.b	#$F,d1
000720E4 4EBA F8C2                  		jsr	sub_7272E(pc)
000720E8 103C 008C                  		move.b	#$8C,d0
000720EC 123C 000F                  		move.b	#$F,d1
000720F0 6000 F8B6                  		bra.w	sub_7272E
000720F4                            ; ===========================================================================
000720F4                            Kos_Z80:	incbin	sound\z80_1.bin
000721A4 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000721A6 21                         		dc.b $21
000721A7 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000721A9                            		incbin	sound\z80_2.bin
00073854                            		even
00073854                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007A054                            		even
0007A054                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000838F2                            		even
000838F2                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00083E80                            		even
00083E80                            Music84:	include	sound\music84.asm ; Star Light Act 1
00083E80                            music84_Header:
00083E80 =00000001                  smpsHeaderStartSong = 1
00083E80 0000                       	smpsHeaderVoice     music84_Voices
00083E82 0603                       	smpsHeaderChan      $06, $03
00083E84 0205                       	smpsHeaderTempo     $02, $05
00083E86                            
00083E8A 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00083E8E 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00083E92 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00083E96 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00083E9A 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00083E9E 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00083EA4 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00083EAA 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00083EB0                            
00083EB0                            ; FM1 Data
00083EB0                            music84_FM1:
00083EB0 E0C0                       	smpsPan             panCenter, $00
00083EB4 E107                       	smpsAlterNote       $07
00083EB6 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00083EBA E106                       	smpsAlterNote       $06
00083EBC 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00083EC0 E10B                       	smpsAlterNote       $0B
00083EC2 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00083EC8 E10C                       	smpsAlterNote       $0C
00083ECA E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083ECD E10B                       	smpsAlterNote       $0B
00083ECF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083ED2 E109                       	smpsAlterNote       $09
00083ED4 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00083ED9 E108                       	smpsAlterNote       $08
00083EDB 8001                       	dc.b	nRst, $01
00083EDD E10B                       	smpsAlterNote       $0B
00083EDF 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00083EE5 E107                       	smpsAlterNote       $07
00083EE7 9B03                       	dc.b	nD2, $03
00083EE9                            
00083EE9                            music84_Jump04:
00083EE9 E107                       	smpsAlterNote       $07
00083EEB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083EEF E10B                       	smpsAlterNote       $0B
00083EF1 A202 8001                  	dc.b	nA2, $02, nRst, $01
00083EF5 E107                       	smpsAlterNote       $07
00083EF7 9B03                       	dc.b	nD2, $03
00083EF9 E11A                       	smpsAlterNote       $1A
00083EFB A301                       	dc.b	nBb2, $01
00083EFD E1F2                       	smpsAlterNote       $F2
00083EFF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083F02 E1FF                       	smpsAlterNote       $FF
00083F04 E701                       	dc.b	smpsNoAttack, $01
00083F06 E111                       	smpsAlterNote       $11
00083F08 E701                       	dc.b	smpsNoAttack, $01
00083F0A E106                       	smpsAlterNote       $06
00083F0C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083F0F E107                       	smpsAlterNote       $07
00083F11 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083F15 E108                       	smpsAlterNote       $08
00083F17 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00083F1F E109                       	smpsAlterNote       $09
00083F21 A003                       	dc.b	nG2, $03
00083F23 E10C                       	smpsAlterNote       $0C
00083F25 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083F29 E1FD                       	smpsAlterNote       $FD
00083F2B A401                       	dc.b	nB2, $01
00083F2D E109                       	smpsAlterNote       $09
00083F2F E701                       	dc.b	smpsNoAttack, $01
00083F31 E106                       	smpsAlterNote       $06
00083F33 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083F36 E109                       	smpsAlterNote       $09
00083F38 A007                       	dc.b	nG2, $07
00083F3A E108                       	smpsAlterNote       $08
00083F3C 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00083F40 E107                       	smpsAlterNote       $07
00083F42 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00083F48 E10B                       	smpsAlterNote       $0B
00083F4A A203 8001                  	dc.b	nA2, $03, nRst, $01
00083F4E E107                       	smpsAlterNote       $07
00083F50 9B03                       	dc.b	nD2, $03
00083F52 E11A                       	smpsAlterNote       $1A
00083F54 A301                       	dc.b	nBb2, $01
00083F56 E1F9                       	smpsAlterNote       $F9
00083F58 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083F5B E107                       	smpsAlterNote       $07
00083F5D E701                       	dc.b	smpsNoAttack, $01
00083F5F E111                       	smpsAlterNote       $11
00083F61 E701                       	dc.b	smpsNoAttack, $01
00083F63 E106                       	smpsAlterNote       $06
00083F65 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00083F6A E107                       	smpsAlterNote       $07
00083F6C 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00083F74 E1EC                       	smpsAlterNote       $EC
00083F76 A101                       	dc.b	nAb2, $01
00083F78 E108                       	smpsAlterNote       $08
00083F7A E701                       	dc.b	smpsNoAttack, $01
00083F7C E116                       	smpsAlterNote       $16
00083F7E E701                       	dc.b	smpsNoAttack, $01
00083F80 E1F5                       	smpsAlterNote       $F5
00083F82 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083F85 E10B                       	smpsAlterNote       $0B
00083F87 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083F8B E107                       	smpsAlterNote       $07
00083F8D 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00083F93 E109                       	smpsAlterNote       $09
00083F95 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00083F99 E10B                       	smpsAlterNote       $0B
00083F9B 9603                       	dc.b	nA1, $03
00083F9D E107                       	smpsAlterNote       $07
00083F9F 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00083FA5 E10B                       	smpsAlterNote       $0B
00083FA7 A203 8001                  	dc.b	nA2, $03, nRst, $01
00083FAB E107                       	smpsAlterNote       $07
00083FAD 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083FB1 E11A                       	smpsAlterNote       $1A
00083FB3 A301                       	dc.b	nBb2, $01
00083FB5 E1F9                       	smpsAlterNote       $F9
00083FB7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083FBA E107                       	smpsAlterNote       $07
00083FBC E701                       	dc.b	smpsNoAttack, $01
00083FBE E1FB                       	smpsAlterNote       $FB
00083FC0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083FC3 E106                       	smpsAlterNote       $06
00083FC5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083FC9 E107                       	smpsAlterNote       $07
00083FCB 9B03                       	dc.b	nD2, $03
00083FCD E108                       	smpsAlterNote       $08
00083FCF 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00083FD5 E109                       	smpsAlterNote       $09
00083FD7 A002 8001                  	dc.b	nG2, $02, nRst, $01
00083FDB E10C                       	smpsAlterNote       $0C
00083FDD A303                       	dc.b	nBb2, $03
00083FDF E1F0                       	smpsAlterNote       $F0
00083FE1 A401                       	dc.b	nB2, $01
00083FE3 E1FD                       	smpsAlterNote       $FD
00083FE5 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00083FEA E106                       	smpsAlterNote       $06
00083FEC 8001                       	dc.b	nRst, $01
00083FEE E109                       	smpsAlterNote       $09
00083FF0 A006 8001                  	dc.b	nG2, $06, nRst, $01
00083FF4 E108                       	smpsAlterNote       $08
00083FF6 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00083FFA E107                       	smpsAlterNote       $07
00083FFC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084002 E10B                       	smpsAlterNote       $0B
00084004 A203                       	dc.b	nA2, $03
00084006 E107                       	smpsAlterNote       $07
00084008 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008400C E1F2                       	smpsAlterNote       $F2
0008400E A401                       	dc.b	nB2, $01
00084010 E1FF                       	smpsAlterNote       $FF
00084012 E701                       	dc.b	smpsNoAttack, $01
00084014 E107                       	smpsAlterNote       $07
00084016 E701                       	dc.b	smpsNoAttack, $01
00084018 E1FB                       	smpsAlterNote       $FB
0008401A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008401D E106                       	smpsAlterNote       $06
0008401F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084023 E107                       	smpsAlterNote       $07
00084025 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008402F E117                       	smpsAlterNote       $17
00084031 A001                       	dc.b	nG2, $01
00084033 E1FA                       	smpsAlterNote       $FA
00084035 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00084038 E108                       	smpsAlterNote       $08
0008403A E701                       	dc.b	smpsNoAttack, $01
0008403C E1E7                       	smpsAlterNote       $E7
0008403E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084041 E103                       	smpsAlterNote       $03
00084043 E701                       	dc.b	smpsNoAttack, $01
00084045 E10B                       	smpsAlterNote       $0B
00084047 E702                       	dc.b	smpsNoAttack, $02
00084049 E107                       	smpsAlterNote       $07
0008404B 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00084053 E106                       	smpsAlterNote       $06
00084055 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008405B E10C                       	smpsAlterNote       $0C
0008405D 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00084063 E109                       	smpsAlterNote       $09
00084065 9E03                       	dc.b	nF2, $03
00084067 E10C                       	smpsAlterNote       $0C
00084069 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008406D E1EA                       	smpsAlterNote       $EA
0008406F A201                       	dc.b	nA2, $01
00084071 E106                       	smpsAlterNote       $06
00084073 E701                       	dc.b	smpsNoAttack, $01
00084075 E1E2                       	smpsAlterNote       $E2
00084077 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008407A E1F0                       	smpsAlterNote       $F0
0008407C E701                       	dc.b	smpsNoAttack, $01
0008407E E10C                       	smpsAlterNote       $0C
00084080 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008408C E116                       	smpsAlterNote       $16
0008408E 9C01                       	dc.b	nEb2, $01
00084090 E105                       	smpsAlterNote       $05
00084092 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00084095 E1F1                       	smpsAlterNote       $F1
00084097 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008409A E1FF                       	smpsAlterNote       $FF
0008409C E701                       	dc.b	smpsNoAttack, $01
0008409E E109                       	smpsAlterNote       $09
000840A0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000840A4 E10C                       	smpsAlterNote       $0C
000840A6 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000840B2 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000840B8 E109                       	smpsAlterNote       $09
000840BA 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000840BE E10C                       	smpsAlterNote       $0C
000840C0 9703                       	dc.b	nBb1, $03
000840C2 E11A                       	smpsAlterNote       $1A
000840C4 A101                       	dc.b	nAb2, $01
000840C6 E1FB                       	smpsAlterNote       $FB
000840C8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000840CB E10A                       	smpsAlterNote       $0A
000840CD E701                       	dc.b	smpsNoAttack, $01
000840CF E1E8                       	smpsAlterNote       $E8
000840D1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000840D4 E106                       	smpsAlterNote       $06
000840D6 E701                       	dc.b	smpsNoAttack, $01
000840D8 E10C                       	smpsAlterNote       $0C
000840DA E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000840E6 E1F9                       	smpsAlterNote       $F9
000840E8 9D01                       	dc.b	nE2, $01
000840EA E108                       	smpsAlterNote       $08
000840EC E701                       	dc.b	smpsNoAttack, $01
000840EE E1F6                       	smpsAlterNote       $F6
000840F0 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000840F3 E109                       	smpsAlterNote       $09
000840F5 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000840F9 E10C                       	smpsAlterNote       $0C
000840FB 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00084107 E108                       	smpsAlterNote       $08
00084109 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008410F E106                       	smpsAlterNote       $06
00084111 A403 8001                  	dc.b	nB2, $03, nRst, $01
00084115 E108                       	smpsAlterNote       $08
00084117 9D03                       	dc.b	nE2, $03
00084119 E1EB                       	smpsAlterNote       $EB
0008411B A801                       	dc.b	nEb3, $01
0008411D E109                       	smpsAlterNote       $09
0008411F E701                       	dc.b	smpsNoAttack, $01
00084121 E1FA                       	smpsAlterNote       $FA
00084123 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00084126 E108                       	smpsAlterNote       $08
00084128 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00084134 E1E9                       	smpsAlterNote       $E9
00084136 A301                       	dc.b	nBb2, $01
00084138 E107                       	smpsAlterNote       $07
0008413A E701                       	dc.b	smpsNoAttack, $01
0008413C E1F0                       	smpsAlterNote       $F0
0008413E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084141 E1F7                       	smpsAlterNote       $F7
00084143 E701                       	dc.b	smpsNoAttack, $01
00084145 E107                       	smpsAlterNote       $07
00084147 E701                       	dc.b	smpsNoAttack, $01
00084149 E106                       	smpsAlterNote       $06
0008414B E701                       	dc.b	smpsNoAttack, $01
0008414D E108                       	smpsAlterNote       $08
0008414F 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00084155 E106                       	smpsAlterNote       $06
00084157 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008415B E108                       	smpsAlterNote       $08
0008415D 9D03                       	dc.b	nE2, $03
0008415F E10B                       	smpsAlterNote       $0B
00084161 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00084169 E108                       	smpsAlterNote       $08
0008416B 9D03                       	dc.b	nE2, $03
0008416D E10B                       	smpsAlterNote       $0B
0008416F 9603 8001                  	dc.b	nA1, $03, nRst, $01
00084173 E113                       	smpsAlterNote       $13
00084175 A001                       	dc.b	nG2, $01
00084177 E118                       	smpsAlterNote       $18
00084179 E701                       	dc.b	smpsNoAttack, $01
0008417B E1E9                       	smpsAlterNote       $E9
0008417D E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00084180 E1F3                       	smpsAlterNote       $F3
00084182 E701                       	dc.b	smpsNoAttack, $01
00084184 E1FD                       	smpsAlterNote       $FD
00084186 E701                       	dc.b	smpsNoAttack, $01
00084188 E102                       	smpsAlterNote       $02
0008418A E701                       	dc.b	smpsNoAttack, $01
0008418C E107                       	smpsAlterNote       $07
0008418E 8001                       	dc.b	nRst, $01
00084190 E10B                       	smpsAlterNote       $0B
00084192 9603                       	dc.b	nA1, $03
00084194 E10C                       	smpsAlterNote       $0C
00084196 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008419C E10B                       	smpsAlterNote       $0B
0008419E 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000841AA 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000841B0 E107                       	smpsAlterNote       $07
000841B2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000841B8 E10B                       	smpsAlterNote       $0B
000841BA A203                       	dc.b	nA2, $03
000841BC E107                       	smpsAlterNote       $07
000841BE 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000841C2 E1F2                       	smpsAlterNote       $F2
000841C4 A401                       	dc.b	nB2, $01
000841C6 E1FF                       	smpsAlterNote       $FF
000841C8 E701                       	dc.b	smpsNoAttack, $01
000841CA E107                       	smpsAlterNote       $07
000841CC E701                       	dc.b	smpsNoAttack, $01
000841CE E1FB                       	smpsAlterNote       $FB
000841D0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000841D3 E106                       	smpsAlterNote       $06
000841D5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000841D9 E107                       	smpsAlterNote       $07
000841DB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000841DF E108                       	smpsAlterNote       $08
000841E1 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000841E7 E109                       	smpsAlterNote       $09
000841E9 A003 8001                  	dc.b	nG2, $03, nRst, $01
000841ED E10C                       	smpsAlterNote       $0C
000841EF A302 8001                  	dc.b	nBb2, $02, nRst, $01
000841F3 E1F0                       	smpsAlterNote       $F0
000841F5 A401                       	dc.b	nB2, $01
000841F7 E109                       	smpsAlterNote       $09
000841F9 E701                       	dc.b	smpsNoAttack, $01
000841FB E106                       	smpsAlterNote       $06
000841FD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084200 E109                       	smpsAlterNote       $09
00084202 A007                       	dc.b	nG2, $07
00084204 E108                       	smpsAlterNote       $08
00084206 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008420A E107                       	smpsAlterNote       $07
0008420C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084212 E10B                       	smpsAlterNote       $0B
00084214 A202 8001                  	dc.b	nA2, $02, nRst, $01
00084218 E107                       	smpsAlterNote       $07
0008421A 9B03                       	dc.b	nD2, $03
0008421C E11A                       	smpsAlterNote       $1A
0008421E A301                       	dc.b	nBb2, $01
00084220 E1F2                       	smpsAlterNote       $F2
00084222 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084225 E1FF                       	smpsAlterNote       $FF
00084227 E701                       	dc.b	smpsNoAttack, $01
00084229 E111                       	smpsAlterNote       $11
0008422B E701                       	dc.b	smpsNoAttack, $01
0008422D E106                       	smpsAlterNote       $06
0008422F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084232 E107                       	smpsAlterNote       $07
00084234 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00084240 E117                       	smpsAlterNote       $17
00084242 A001                       	dc.b	nG2, $01
00084244 E1FA                       	smpsAlterNote       $FA
00084246 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00084249 E116                       	smpsAlterNote       $16
0008424B E701                       	dc.b	smpsNoAttack, $01
0008424D E1F5                       	smpsAlterNote       $F5
0008424F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084252 E103                       	smpsAlterNote       $03
00084254 E701                       	dc.b	smpsNoAttack, $01
00084256 E10B                       	smpsAlterNote       $0B
00084258 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008425C E107                       	smpsAlterNote       $07
0008425E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084264 E109                       	smpsAlterNote       $09
00084266 9E03                       	dc.b	nF2, $03
00084268 E10B                       	smpsAlterNote       $0B
0008426A 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008426E E107                       	smpsAlterNote       $07
00084270 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00084276 E10B                       	smpsAlterNote       $0B
00084278 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008427C E107                       	smpsAlterNote       $07
0008427E 9B03                       	dc.b	nD2, $03
00084280 E11A                       	smpsAlterNote       $1A
00084282 A301                       	dc.b	nBb2, $01
00084284 E1F9                       	smpsAlterNote       $F9
00084286 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084289 E107                       	smpsAlterNote       $07
0008428B E701                       	dc.b	smpsNoAttack, $01
0008428D E111                       	smpsAlterNote       $11
0008428F E701                       	dc.b	smpsNoAttack, $01
00084291 E106                       	smpsAlterNote       $06
00084293 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00084298 E107                       	smpsAlterNote       $07
0008429A 9B03                       	dc.b	nD2, $03
0008429C E108                       	smpsAlterNote       $08
0008429E 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000842A4 E109                       	smpsAlterNote       $09
000842A6 A003                       	dc.b	nG2, $03
000842A8 E10C                       	smpsAlterNote       $0C
000842AA A303 8001                  	dc.b	nBb2, $03, nRst, $01
000842AE E1FD                       	smpsAlterNote       $FD
000842B0 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000842B5 E106                       	smpsAlterNote       $06
000842B7 8001                       	dc.b	nRst, $01
000842B9 E109                       	smpsAlterNote       $09
000842BB A006 8001                  	dc.b	nG2, $06, nRst, $01
000842BF E108                       	smpsAlterNote       $08
000842C1 9C03                       	dc.b	nEb2, $03
000842C3 E107                       	smpsAlterNote       $07
000842C5 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000842CB E10B                       	smpsAlterNote       $0B
000842CD A203 8001                  	dc.b	nA2, $03, nRst, $01
000842D1 E107                       	smpsAlterNote       $07
000842D3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000842D7 E11A                       	smpsAlterNote       $1A
000842D9 A301                       	dc.b	nBb2, $01
000842DB E1F9                       	smpsAlterNote       $F9
000842DD E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000842E0 E107                       	smpsAlterNote       $07
000842E2 E701                       	dc.b	smpsNoAttack, $01
000842E4 E1FB                       	smpsAlterNote       $FB
000842E6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000842E9 E106                       	smpsAlterNote       $06
000842EB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000842EF E107                       	smpsAlterNote       $07
000842F1 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000842F9 E1EC                       	smpsAlterNote       $EC
000842FB A101                       	dc.b	nAb2, $01
000842FD E108                       	smpsAlterNote       $08
000842FF E701                       	dc.b	smpsNoAttack, $01
00084301 E1E7                       	smpsAlterNote       $E7
00084303 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084306 E1F5                       	smpsAlterNote       $F5
00084308 E701                       	dc.b	smpsNoAttack, $01
0008430A E10B                       	smpsAlterNote       $0B
0008430C E702                       	dc.b	smpsNoAttack, $02
0008430E E107                       	smpsAlterNote       $07
00084310 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00084316 E106                       	smpsAlterNote       $06
00084318 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008431E E10C                       	smpsAlterNote       $0C
00084320 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00084328 E109                       	smpsAlterNote       $09
0008432A 9E03                       	dc.b	nF2, $03
0008432C E10C                       	smpsAlterNote       $0C
0008432E 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084332 E1EA                       	smpsAlterNote       $EA
00084334 A201                       	dc.b	nA2, $01
00084336 E106                       	smpsAlterNote       $06
00084338 E701                       	dc.b	smpsNoAttack, $01
0008433A E114                       	smpsAlterNote       $14
0008433C E701                       	dc.b	smpsNoAttack, $01
0008433E E1F0                       	smpsAlterNote       $F0
00084340 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084343 E10C                       	smpsAlterNote       $0C
00084345 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00084351 9703                       	dc.b	nBb1, $03
00084353 E116                       	smpsAlterNote       $16
00084355 9C01                       	dc.b	nEb2, $01
00084357 E105                       	smpsAlterNote       $05
00084359 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008435C E113                       	smpsAlterNote       $13
0008435E E701                       	dc.b	smpsNoAttack, $01
00084360 E1FF                       	smpsAlterNote       $FF
00084362 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084365 E109                       	smpsAlterNote       $09
00084367 E703                       	dc.b	smpsNoAttack, $03
00084369 E10C                       	smpsAlterNote       $0C
0008436B 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00084377 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008437F E109                       	smpsAlterNote       $09
00084381 9E03                       	dc.b	nF2, $03
00084383 E10C                       	smpsAlterNote       $0C
00084385 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084389 E1EC                       	smpsAlterNote       $EC
0008438B A201                       	dc.b	nA2, $01
0008438D E10A                       	smpsAlterNote       $0A
0008438F E701                       	dc.b	smpsNoAttack, $01
00084391 E1E8                       	smpsAlterNote       $E8
00084393 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084396 E1F7                       	smpsAlterNote       $F7
00084398 E701                       	dc.b	smpsNoAttack, $01
0008439A E10C                       	smpsAlterNote       $0C
0008439C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000843A8 E1EA                       	smpsAlterNote       $EA
000843AA 9D01                       	dc.b	nE2, $01
000843AC E108                       	smpsAlterNote       $08
000843AE E701                       	dc.b	smpsNoAttack, $01
000843B0 E1F6                       	smpsAlterNote       $F6
000843B2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000843B5 E105                       	smpsAlterNote       $05
000843B7 E701                       	dc.b	smpsNoAttack, $01
000843B9 E109                       	smpsAlterNote       $09
000843BB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000843BF E10C                       	smpsAlterNote       $0C
000843C1 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000843CD E108                       	smpsAlterNote       $08
000843CF 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000843D5 E106                       	smpsAlterNote       $06
000843D7 A403 8001                  	dc.b	nB2, $03, nRst, $01
000843DB E108                       	smpsAlterNote       $08
000843DD 9D03                       	dc.b	nE2, $03
000843DF E1EB                       	smpsAlterNote       $EB
000843E1 A801                       	dc.b	nEb3, $01
000843E3 E109                       	smpsAlterNote       $09
000843E5 E701                       	dc.b	smpsNoAttack, $01
000843E7 E1EB                       	smpsAlterNote       $EB
000843E9 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000843EC E108                       	smpsAlterNote       $08
000843EE E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000843FA E1E9                       	smpsAlterNote       $E9
000843FC A301                       	dc.b	nBb2, $01
000843FE E1F8                       	smpsAlterNote       $F8
00084400 E701                       	dc.b	smpsNoAttack, $01
00084402 E116                       	smpsAlterNote       $16
00084404 E701                       	dc.b	smpsNoAttack, $01
00084406 E1F7                       	smpsAlterNote       $F7
00084408 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008440B E107                       	smpsAlterNote       $07
0008440D E701                       	dc.b	smpsNoAttack, $01
0008440F E1EE                       	smpsAlterNote       $EE
00084411 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084414 E106                       	smpsAlterNote       $06
00084416 8001                       	dc.b	nRst, $01
00084418 E108                       	smpsAlterNote       $08
0008441A 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00084420 E106                       	smpsAlterNote       $06
00084422 A402 8001                  	dc.b	nB2, $02, nRst, $01
00084426 E108                       	smpsAlterNote       $08
00084428 9D03                       	dc.b	nE2, $03
0008442A E10B                       	smpsAlterNote       $0B
0008442C 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00084432 E108                       	smpsAlterNote       $08
00084434 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00084438 E10B                       	smpsAlterNote       $0B
0008443A 9603                       	dc.b	nA1, $03
0008443C E10E                       	smpsAlterNote       $0E
0008443E A001                       	dc.b	nG2, $01
00084440 E118                       	smpsAlterNote       $18
00084442 E701                       	dc.b	smpsNoAttack, $01
00084444 E1E9                       	smpsAlterNote       $E9
00084446 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00084449 E1EE                       	smpsAlterNote       $EE
0008444B E701                       	dc.b	smpsNoAttack, $01
0008444D E1F8                       	smpsAlterNote       $F8
0008444F E701                       	dc.b	smpsNoAttack, $01
00084451 E102                       	smpsAlterNote       $02
00084453 E701                       	dc.b	smpsNoAttack, $01
00084455 E107                       	smpsAlterNote       $07
00084457 8001                       	dc.b	nRst, $01
00084459 E10B                       	smpsAlterNote       $0B
0008445B 9603                       	dc.b	nA1, $03
0008445D E10C                       	smpsAlterNote       $0C
0008445F 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00084465 E10B                       	smpsAlterNote       $0B
00084467 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00084473 8001 9603                  	dc.b	nRst, $01, nA1, $03
00084477 E10C                       	smpsAlterNote       $0C
00084479 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00084485 8001                       	dc.b	nRst, $01
00084487 E10B                       	smpsAlterNote       $0B
00084489 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00084491 E107                       	smpsAlterNote       $07
00084493 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00084497 E10B                       	smpsAlterNote       $0B
00084499 9603                       	dc.b	nA1, $03
0008449B E109                       	smpsAlterNote       $09
0008449D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000844A1 E108                       	smpsAlterNote       $08
000844A3 9D06                       	dc.b	nE2, $06
000844A5 E107                       	smpsAlterNote       $07
000844A7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000844AB E106                       	smpsAlterNote       $06
000844AD 9903                       	dc.b	nC2, $03
000844AF E10C                       	smpsAlterNote       $0C
000844B1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000844B5 E10B                       	smpsAlterNote       $0B
000844B7 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000844C3 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000844CD E10C                       	smpsAlterNote       $0C
000844CF 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000844DB 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000844E7 8001                       	dc.b	nRst, $01
000844E9 E10B                       	smpsAlterNote       $0B
000844EB 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000844F7 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00084503 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008450F 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00084519 E10C                       	smpsAlterNote       $0C
0008451B 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00084527 E10B                       	smpsAlterNote       $0B
00084529 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00084531 E107                       	smpsAlterNote       $07
00084533 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00084537 E10B                       	smpsAlterNote       $0B
00084539 9603                       	dc.b	nA1, $03
0008453B E109                       	smpsAlterNote       $09
0008453D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00084541 E108                       	smpsAlterNote       $08
00084543 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00084547 E107                       	smpsAlterNote       $07
00084549 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008454D E106                       	smpsAlterNote       $06
0008454F 9903                       	dc.b	nC2, $03
00084551 E10C                       	smpsAlterNote       $0C
00084553 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084557 E10B                       	smpsAlterNote       $0B
00084559 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00084565 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008456F E10C                       	smpsAlterNote       $0C
00084571 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008457D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00084589 8001                       	dc.b	nRst, $01
0008458B E10B                       	smpsAlterNote       $0B
0008458D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00084599 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000845A3 E10C                       	smpsAlterNote       $0C
000845A5 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000845B1 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
000845BD E10B                       	smpsAlterNote       $0B
000845BF 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000845CB 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000845D5 E10C                       	smpsAlterNote       $0C
000845D7 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000845E3 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
000845EF E10B                       	smpsAlterNote       $0B
000845F1 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
000845FD 8001                       	dc.b	nRst, $01
000845FF E1EC                       	smpsAlterNote       $EC
00084601 A101                       	dc.b	nAb2, $01
00084603 E1FA                       	smpsAlterNote       $FA
00084605 E701                       	dc.b	smpsNoAttack, $01
00084607 E116                       	smpsAlterNote       $16
00084609 E701                       	dc.b	smpsNoAttack, $01
0008460B E1F5                       	smpsAlterNote       $F5
0008460D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084610 E10B                       	smpsAlterNote       $0B
00084612 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008461E 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008462A E107                       	smpsAlterNote       $07
0008462C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084632 E10B                       	smpsAlterNote       $0B
00084634 A203                       	dc.b	nA2, $03
00084636 E107                       	smpsAlterNote       $07
00084638 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008463C E1F3                       	smpsAlterNote       $F3
0008463E A401                       	dc.b	nB2, $01
00084640 E102                       	smpsAlterNote       $02
00084642 E701                       	dc.b	smpsNoAttack, $01
00084644 E109                       	smpsAlterNote       $09
00084646 E701                       	dc.b	smpsNoAttack, $01
00084648 E102                       	smpsAlterNote       $02
0008464A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008464D E106                       	smpsAlterNote       $06
0008464F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084653 E107                       	smpsAlterNote       $07
00084655 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084659 E108                       	smpsAlterNote       $08
0008465B 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00084661 E109                       	smpsAlterNote       $09
00084663 A003 8001                  	dc.b	nG2, $03, nRst, $01
00084667 E1F2                       	smpsAlterNote       $F2
00084669 A401                       	dc.b	nB2, $01
0008466B E1FF                       	smpsAlterNote       $FF
0008466D E701                       	dc.b	smpsNoAttack, $01
0008466F E111                       	smpsAlterNote       $11
00084671 E701                       	dc.b	smpsNoAttack, $01
00084673 E1FB                       	smpsAlterNote       $FB
00084675 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084678 E106                       	smpsAlterNote       $06
0008467A E702                       	dc.b	smpsNoAttack, $02
0008467C E109                       	smpsAlterNote       $09
0008467E A007                       	dc.b	nG2, $07
00084680 E108                       	smpsAlterNote       $08
00084682 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00084686 E107                       	smpsAlterNote       $07
00084688 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008468E E10B                       	smpsAlterNote       $0B
00084690 A202 8001                  	dc.b	nA2, $02, nRst, $01
00084694 E107                       	smpsAlterNote       $07
00084696 9B03                       	dc.b	nD2, $03
00084698 E11A                       	smpsAlterNote       $1A
0008469A A301                       	dc.b	nBb2, $01
0008469C E1F2                       	smpsAlterNote       $F2
0008469E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000846A1 E1FF                       	smpsAlterNote       $FF
000846A3 E701                       	dc.b	smpsNoAttack, $01
000846A5 E111                       	smpsAlterNote       $11
000846A7 E701                       	dc.b	smpsNoAttack, $01
000846A9 E106                       	smpsAlterNote       $06
000846AB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000846AE E107                       	smpsAlterNote       $07
000846B0 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000846BC E117                       	smpsAlterNote       $17
000846BE A001                       	dc.b	nG2, $01
000846C0 E1FA                       	smpsAlterNote       $FA
000846C2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000846C5 E116                       	smpsAlterNote       $16
000846C7 E701                       	dc.b	smpsNoAttack, $01
000846C9 E1F5                       	smpsAlterNote       $F5
000846CB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000846CE E103                       	smpsAlterNote       $03
000846D0 E701                       	dc.b	smpsNoAttack, $01
000846D2 E10B                       	smpsAlterNote       $0B
000846D4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000846D8 E107                       	smpsAlterNote       $07
000846DA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000846E0 E109                       	smpsAlterNote       $09
000846E2 9E03                       	dc.b	nF2, $03
000846E4 E10B                       	smpsAlterNote       $0B
000846E6 9603 8001                  	dc.b	nA1, $03, nRst, $01
000846EA E107                       	smpsAlterNote       $07
000846EC 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000846F2 E10B                       	smpsAlterNote       $0B
000846F4 A203 8001                  	dc.b	nA2, $03, nRst, $01
000846F8 E107                       	smpsAlterNote       $07
000846FA 9B03                       	dc.b	nD2, $03
000846FC E11A                       	smpsAlterNote       $1A
000846FE A301                       	dc.b	nBb2, $01
00084700 E1F9                       	smpsAlterNote       $F9
00084702 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084705 E1FF                       	smpsAlterNote       $FF
00084707 E701                       	dc.b	smpsNoAttack, $01
00084709 E111                       	smpsAlterNote       $11
0008470B E701                       	dc.b	smpsNoAttack, $01
0008470D E106                       	smpsAlterNote       $06
0008470F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084712 E107                       	smpsAlterNote       $07
00084714 9B03                       	dc.b	nD2, $03
00084716 E108                       	smpsAlterNote       $08
00084718 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008471E E109                       	smpsAlterNote       $09
00084720 A003                       	dc.b	nG2, $03
00084722 E1F0                       	smpsAlterNote       $F0
00084724 A501                       	dc.b	nC3, $01
00084726 E106                       	smpsAlterNote       $06
00084728 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008472C E109                       	smpsAlterNote       $09
0008472E A006 8001                  	dc.b	nG2, $06, nRst, $01
00084732 E108                       	smpsAlterNote       $08
00084734 9C03                       	dc.b	nEb2, $03
00084736 E107                       	smpsAlterNote       $07
00084738 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008473E E10B                       	smpsAlterNote       $0B
00084740 A203 8001                  	dc.b	nA2, $03, nRst, $01
00084744 E107                       	smpsAlterNote       $07
00084746 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008474A E11A                       	smpsAlterNote       $1A
0008474C A301                       	dc.b	nBb2, $01
0008474E E1F9                       	smpsAlterNote       $F9
00084750 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084753 E107                       	smpsAlterNote       $07
00084755 E701                       	dc.b	smpsNoAttack, $01
00084757 E1FB                       	smpsAlterNote       $FB
00084759 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008475C E106                       	smpsAlterNote       $06
0008475E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084762 E107                       	smpsAlterNote       $07
00084764 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008476C E1EC                       	smpsAlterNote       $EC
0008476E A101                       	dc.b	nAb2, $01
00084770 E108                       	smpsAlterNote       $08
00084772 E701                       	dc.b	smpsNoAttack, $01
00084774 E1E7                       	smpsAlterNote       $E7
00084776 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084779 E1F5                       	smpsAlterNote       $F5
0008477B E701                       	dc.b	smpsNoAttack, $01
0008477D E10B                       	smpsAlterNote       $0B
0008477F E702                       	dc.b	smpsNoAttack, $02
00084781 E107                       	smpsAlterNote       $07
00084783 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00084789 E106                       	smpsAlterNote       $06
0008478B 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00084791 E10C                       	smpsAlterNote       $0C
00084793 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008479B E109                       	smpsAlterNote       $09
0008479D 9E03                       	dc.b	nF2, $03
0008479F E10C                       	smpsAlterNote       $0C
000847A1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000847A5 E1EA                       	smpsAlterNote       $EA
000847A7 A201                       	dc.b	nA2, $01
000847A9 E106                       	smpsAlterNote       $06
000847AB E701                       	dc.b	smpsNoAttack, $01
000847AD E114                       	smpsAlterNote       $14
000847AF E701                       	dc.b	smpsNoAttack, $01
000847B1 E1F0                       	smpsAlterNote       $F0
000847B3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000847B6 E10C                       	smpsAlterNote       $0C
000847B8 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000847C4 9703                       	dc.b	nBb1, $03
000847C6 E116                       	smpsAlterNote       $16
000847C8 9C01                       	dc.b	nEb2, $01
000847CA E105                       	smpsAlterNote       $05
000847CC E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000847CF E113                       	smpsAlterNote       $13
000847D1 E701                       	dc.b	smpsNoAttack, $01
000847D3 E1FF                       	smpsAlterNote       $FF
000847D5 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000847D8 E109                       	smpsAlterNote       $09
000847DA E703                       	dc.b	smpsNoAttack, $03
000847DC E10C                       	smpsAlterNote       $0C
000847DE 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000847EA 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000847F2 E109                       	smpsAlterNote       $09
000847F4 9E03                       	dc.b	nF2, $03
000847F6 E10C                       	smpsAlterNote       $0C
000847F8 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000847FC E1EA                       	smpsAlterNote       $EA
000847FE A201                       	dc.b	nA2, $01
00084800 E106                       	smpsAlterNote       $06
00084802 E701                       	dc.b	smpsNoAttack, $01
00084804 E1E2                       	smpsAlterNote       $E2
00084806 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084809 E1F0                       	smpsAlterNote       $F0
0008480B E701                       	dc.b	smpsNoAttack, $01
0008480D E10C                       	smpsAlterNote       $0C
0008480F E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008481B E116                       	smpsAlterNote       $16
0008481D 9C01                       	dc.b	nEb2, $01
0008481F E105                       	smpsAlterNote       $05
00084821 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00084824 E1F1                       	smpsAlterNote       $F1
00084826 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084829 E1FF                       	smpsAlterNote       $FF
0008482B E701                       	dc.b	smpsNoAttack, $01
0008482D E109                       	smpsAlterNote       $09
0008482F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084833 E10C                       	smpsAlterNote       $0C
00084835 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00084841 E106                       	smpsAlterNote       $06
00084843 9903                       	dc.b	nC2, $03
00084845 E107                       	smpsAlterNote       $07
00084847 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008484B E109                       	smpsAlterNote       $09
0008484D 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00084853 E107                       	smpsAlterNote       $07
00084855 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084859 E108                       	smpsAlterNote       $08
0008485B 9D03                       	dc.b	nE2, $03
0008485D E10B                       	smpsAlterNote       $0B
0008485F 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00084865 E109                       	smpsAlterNote       $09
00084867 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008486D E10C                       	smpsAlterNote       $0C
0008486F 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00084875 E106                       	smpsAlterNote       $06
00084877 9903                       	dc.b	nC2, $03
00084879 E11A                       	smpsAlterNote       $1A
0008487B A301                       	dc.b	nBb2, $01
0008487D E1F9                       	smpsAlterNote       $F9
0008487F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084882 E1FF                       	smpsAlterNote       $FF
00084884 E701                       	dc.b	smpsNoAttack, $01
00084886 E111                       	smpsAlterNote       $11
00084888 E701                       	dc.b	smpsNoAttack, $01
0008488A E106                       	smpsAlterNote       $06
0008488C E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00084893 E109                       	smpsAlterNote       $09
00084895 A003                       	dc.b	nG2, $03
00084897 E106                       	smpsAlterNote       $06
00084899 9907                       	dc.b	nC2, $07
0008489B E107                       	smpsAlterNote       $07
0008489D 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
000848A5 E10B                       	smpsAlterNote       $0B
000848A7 A203                       	dc.b	nA2, $03
000848A9 E107                       	smpsAlterNote       $07
000848AB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000848AF E1F2                       	smpsAlterNote       $F2
000848B1 A401                       	dc.b	nB2, $01
000848B3 E1F9                       	smpsAlterNote       $F9
000848B5 E701                       	dc.b	smpsNoAttack, $01
000848B7 E107                       	smpsAlterNote       $07
000848B9 E701                       	dc.b	smpsNoAttack, $01
000848BB E1FB                       	smpsAlterNote       $FB
000848BD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000848C0 E106                       	smpsAlterNote       $06
000848C2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000848C6 E107                       	smpsAlterNote       $07
000848C8 9B03                       	dc.b	nD2, $03
000848CA E108                       	smpsAlterNote       $08
000848CC 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000848D2 E109                       	smpsAlterNote       $09
000848D4 A003 8001                  	dc.b	nG2, $03, nRst, $01
000848D8 E1F2                       	smpsAlterNote       $F2
000848DA A401                       	dc.b	nB2, $01
000848DC E1F9                       	smpsAlterNote       $F9
000848DE E701                       	dc.b	smpsNoAttack, $01
000848E0 E107                       	smpsAlterNote       $07
000848E2 E701                       	dc.b	smpsNoAttack, $01
000848E4 E1FB                       	smpsAlterNote       $FB
000848E6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000848E9 E106                       	smpsAlterNote       $06
000848EB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000848EF E108                       	smpsAlterNote       $08
000848F1 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
000848F5 E10C                       	smpsAlterNote       $0C
000848F7 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000848FB E107                       	smpsAlterNote       $07
000848FD 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084903 E10B                       	smpsAlterNote       $0B
00084905 A203                       	dc.b	nA2, $03
00084907 E107                       	smpsAlterNote       $07
00084909 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008490D E1F2                       	smpsAlterNote       $F2
0008490F A401                       	dc.b	nB2, $01
00084911 E1FF                       	smpsAlterNote       $FF
00084913 E701                       	dc.b	smpsNoAttack, $01
00084915 E107                       	smpsAlterNote       $07
00084917 E701                       	dc.b	smpsNoAttack, $01
00084919 E1FB                       	smpsAlterNote       $FB
0008491B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008491E E106                       	smpsAlterNote       $06
00084920 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084924 E107                       	smpsAlterNote       $07
00084926 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008492A E108                       	smpsAlterNote       $08
0008492C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00084932 E109                       	smpsAlterNote       $09
00084934 A003 8001                  	dc.b	nG2, $03, nRst, $01
00084938 E1F2                       	smpsAlterNote       $F2
0008493A A401                       	dc.b	nB2, $01
0008493C E1FF                       	smpsAlterNote       $FF
0008493E E701                       	dc.b	smpsNoAttack, $01
00084940 E111                       	smpsAlterNote       $11
00084942 E701                       	dc.b	smpsNoAttack, $01
00084944 E1FB                       	smpsAlterNote       $FB
00084946 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084949 E106                       	smpsAlterNote       $06
0008494B E702                       	dc.b	smpsNoAttack, $02
0008494D E108                       	smpsAlterNote       $08
0008494F 9C07                       	dc.b	nEb2, $07
00084951 E10C                       	smpsAlterNote       $0C
00084953 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00084957 E107                       	smpsAlterNote       $07
00084959 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008495F E10B                       	smpsAlterNote       $0B
00084961 A202 8001                  	dc.b	nA2, $02, nRst, $01
00084965 E107                       	smpsAlterNote       $07
00084967 9B03                       	dc.b	nD2, $03
00084969 E11A                       	smpsAlterNote       $1A
0008496B A301                       	dc.b	nBb2, $01
0008496D E1F2                       	smpsAlterNote       $F2
0008496F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084972 E1FF                       	smpsAlterNote       $FF
00084974 E701                       	dc.b	smpsNoAttack, $01
00084976 E111                       	smpsAlterNote       $11
00084978 E701                       	dc.b	smpsNoAttack, $01
0008497A E106                       	smpsAlterNote       $06
0008497C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008497F E107                       	smpsAlterNote       $07
00084981 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084985 E108                       	smpsAlterNote       $08
00084987 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008498F E109                       	smpsAlterNote       $09
00084991 A003                       	dc.b	nG2, $03
00084993 E11A                       	smpsAlterNote       $1A
00084995 A301                       	dc.b	nBb2, $01
00084997 E1F2                       	smpsAlterNote       $F2
00084999 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008499C E1FF                       	smpsAlterNote       $FF
0008499E E701                       	dc.b	smpsNoAttack, $01
000849A0 E111                       	smpsAlterNote       $11
000849A2 E701                       	dc.b	smpsNoAttack, $01
000849A4 E106                       	smpsAlterNote       $06
000849A6 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000849A9 E108                       	smpsAlterNote       $08
000849AB 9C07                       	dc.b	nEb2, $07
000849AD E10C                       	smpsAlterNote       $0C
000849AF A303 8001                  	dc.b	nBb2, $03, nRst, $01
000849B3 E107                       	smpsAlterNote       $07
000849B5 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000849C1 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000849CB E108                       	smpsAlterNote       $08
000849CD 9C06                       	dc.b	nEb2, $06
000849CF E10C                       	smpsAlterNote       $0C
000849D1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000849D5 E108                       	smpsAlterNote       $08
000849D7 9C03                       	dc.b	nEb2, $03
000849D9 E109                       	smpsAlterNote       $09
000849DB A003 8001                  	dc.b	nG2, $03, nRst, $01
000849DF E10C                       	smpsAlterNote       $0C
000849E1 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
000849E9 E107                       	smpsAlterNote       $07
000849EB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000849EF F6F4 F8                    	smpsJump            music84_Jump04
000849F2                            
000849F2                            ; FM2 Data
000849F2                            music84_FM2:
000849F2 E0C0                       	smpsPan             panCenter, $00
000849F6 E10B                       	smpsAlterNote       $0B
000849F8 C603 8007                  	dc.b	nA5, $03, nRst, $07
000849FC E109                       	smpsAlterNote       $09
000849FE C403 800B                  	dc.b	nG5, $03, nRst, $0B
00084A02 E108                       	smpsAlterNote       $08
00084A04 C103 8004                  	dc.b	nE5, $03, nRst, $04
00084A0A E080                       	smpsPan             panLeft, $00
00084A0C E10C                       	smpsAlterNote       $0C
00084A0E E6F9                       	smpsAlterVol        $F9
00084A10 C703                       	dc.b	nBb5, $03
00084A12 E10B                       	smpsAlterNote       $0B
00084A14 C603 8001                  	dc.b	nA5, $03, nRst, $01
00084A18 E109                       	smpsAlterNote       $09
00084A1A C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00084A20 E108                       	smpsAlterNote       $08
00084A22 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084A26 E106                       	smpsAlterNote       $06
00084A28 BD03                       	dc.b	nC5, $03
00084A2A E10B                       	smpsAlterNote       $0B
00084A2C BA03 8001                  	dc.b	nA4, $03, nRst, $01
00084A32 E0C0                       	smpsPan             panCenter, $00
00084A34 E107                       	smpsAlterNote       $07
00084A36 E606                       	smpsAlterVol        $06
00084A38 BF03                       	dc.b	nD5, $03
00084A3A                            
00084A3A                            music84_Jump03:
00084A3A E108                       	smpsAlterNote       $08
00084A3C C103 8001                  	dc.b	nE5, $03, nRst, $01
00084A40 E109                       	smpsAlterNote       $09
00084A42 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00084A48 E10B                       	smpsAlterNote       $0B
00084A4A C607                       	dc.b	nA5, $07
00084A4C E107                       	smpsAlterNote       $07
00084A4E BF03 8001                  	dc.b	nD5, $03, nRst, $01
00084A52 E106                       	smpsAlterNote       $06
00084A54 C90D                       	dc.b	nC6, $0D
00084A56 E100                       	smpsAlterNote       $00
00084A58 E701                       	dc.b	smpsNoAttack, $01
00084A5A E1FF                       	smpsAlterNote       $FF
00084A5C E701                       	dc.b	smpsNoAttack, $01
00084A5E E103                       	smpsAlterNote       $03
00084A60 E701                       	dc.b	smpsNoAttack, $01
00084A62 E109                       	smpsAlterNote       $09
00084A64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A68 E106                       	smpsAlterNote       $06
00084A6A E701                       	dc.b	smpsNoAttack, $01
00084A6C E100                       	smpsAlterNote       $00
00084A6E E701                       	dc.b	smpsNoAttack, $01
00084A70 E10C                       	smpsAlterNote       $0C
00084A72 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00084A76 E10B                       	smpsAlterNote       $0B
00084A78 C603                       	dc.b	nA5, $03
00084A7A E109                       	smpsAlterNote       $09
00084A7C C403 8001                  	dc.b	nG5, $03, nRst, $01
00084A80 E10B                       	smpsAlterNote       $0B
00084A82 C60D                       	dc.b	nA5, $0D
00084A84 E105                       	smpsAlterNote       $05
00084A86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A8A E10B                       	smpsAlterNote       $0B
00084A8C E701                       	dc.b	smpsNoAttack, $01
00084A8E E10E                       	smpsAlterNote       $0E
00084A90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A94 E108                       	smpsAlterNote       $08
00084A96 E701                       	dc.b	smpsNoAttack, $01
00084A98 E104                       	smpsAlterNote       $04
00084A9A E701                       	dc.b	smpsNoAttack, $01
00084A9C E105                       	smpsAlterNote       $05
00084A9E E701                       	dc.b	smpsNoAttack, $01
00084AA0 E10B                       	smpsAlterNote       $0B
00084AA2 E701                       	dc.b	smpsNoAttack, $01
00084AA4 E10F                       	smpsAlterNote       $0F
00084AA6 E701                       	dc.b	smpsNoAttack, $01
00084AA8 E10B                       	smpsAlterNote       $0B
00084AAA E701                       	dc.b	smpsNoAttack, $01
00084AAC E108                       	smpsAlterNote       $08
00084AAE E701                       	dc.b	smpsNoAttack, $01
00084AB0 E104                       	smpsAlterNote       $04
00084AB2 E701                       	dc.b	smpsNoAttack, $01
00084AB4 E108                       	smpsAlterNote       $08
00084AB6 E701                       	dc.b	smpsNoAttack, $01
00084AB8 E10E                       	smpsAlterNote       $0E
00084ABA E701                       	dc.b	smpsNoAttack, $01
00084ABC E10F                       	smpsAlterNote       $0F
00084ABE E701                       	dc.b	smpsNoAttack, $01
00084AC0 E10B                       	smpsAlterNote       $0B
00084AC2 E701                       	dc.b	smpsNoAttack, $01
00084AC4 E105                       	smpsAlterNote       $05
00084AC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ACA E108                       	smpsAlterNote       $08
00084ACC E701                       	dc.b	smpsNoAttack, $01
00084ACE E10E                       	smpsAlterNote       $0E
00084AD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AD4 E108                       	smpsAlterNote       $08
00084AD6 E701                       	dc.b	smpsNoAttack, $01
00084AD8 E105                       	smpsAlterNote       $05
00084ADA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ADE E10B                       	smpsAlterNote       $0B
00084AE0 E701                       	dc.b	smpsNoAttack, $01
00084AE2 E10F                       	smpsAlterNote       $0F
00084AE4 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00084AE8 E107                       	smpsAlterNote       $07
00084AEA BF03 8001                  	dc.b	nD5, $03, nRst, $01
00084AEE E108                       	smpsAlterNote       $08
00084AF0 C103                       	dc.b	nE5, $03
00084AF2 E109                       	smpsAlterNote       $09
00084AF4 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00084AFC E10B                       	smpsAlterNote       $0B
00084AFE C606 8001                  	dc.b	nA5, $06, nRst, $01
00084B02 E107                       	smpsAlterNote       $07
00084B04 BF03                       	dc.b	nD5, $03
00084B06 E106                       	smpsAlterNote       $06
00084B08 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00084B0C E107                       	smpsAlterNote       $07
00084B0E CB03                       	dc.b	nD6, $03
00084B10 E10C                       	smpsAlterNote       $0C
00084B12 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00084B16 E10B                       	smpsAlterNote       $0B
00084B18 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084B1C E109                       	smpsAlterNote       $09
00084B1E C404                       	dc.b	nG5, $04
00084B20 E10B                       	smpsAlterNote       $0B
00084B22 C60D                       	dc.b	nA5, $0D
00084B24 E108                       	smpsAlterNote       $08
00084B26 E701                       	dc.b	smpsNoAttack, $01
00084B28 E104                       	smpsAlterNote       $04
00084B2A E701                       	dc.b	smpsNoAttack, $01
00084B2C E108                       	smpsAlterNote       $08
00084B2E E701                       	dc.b	smpsNoAttack, $01
00084B30 E10B                       	smpsAlterNote       $0B
00084B32 E701                       	dc.b	smpsNoAttack, $01
00084B34 E10F                       	smpsAlterNote       $0F
00084B36 E701                       	dc.b	smpsNoAttack, $01
00084B38 E10B                       	smpsAlterNote       $0B
00084B3A E701                       	dc.b	smpsNoAttack, $01
00084B3C E105                       	smpsAlterNote       $05
00084B3E E701                       	dc.b	smpsNoAttack, $01
00084B40 E104                       	smpsAlterNote       $04
00084B42 E701                       	dc.b	smpsNoAttack, $01
00084B44 E108                       	smpsAlterNote       $08
00084B46 E701                       	dc.b	smpsNoAttack, $01
00084B48 E10E                       	smpsAlterNote       $0E
00084B4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B4E E10B                       	smpsAlterNote       $0B
00084B50 E701                       	dc.b	smpsNoAttack, $01
00084B52 E105                       	smpsAlterNote       $05
00084B54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B58 E10B                       	smpsAlterNote       $0B
00084B5A E701                       	dc.b	smpsNoAttack, $01
00084B5C E10E                       	smpsAlterNote       $0E
00084B5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B62 E108                       	smpsAlterNote       $08
00084B64 E701                       	dc.b	smpsNoAttack, $01
00084B66 E104                       	smpsAlterNote       $04
00084B68 E701                       	dc.b	smpsNoAttack, $01
00084B6A E105                       	smpsAlterNote       $05
00084B6C E701                       	dc.b	smpsNoAttack, $01
00084B6E E10B                       	smpsAlterNote       $0B
00084B70 E701                       	dc.b	smpsNoAttack, $01
00084B72 E10F                       	smpsAlterNote       $0F
00084B74 E701                       	dc.b	smpsNoAttack, $01
00084B76 E10B                       	smpsAlterNote       $0B
00084B78 E701                       	dc.b	smpsNoAttack, $01
00084B7A E108                       	smpsAlterNote       $08
00084B7C E701                       	dc.b	smpsNoAttack, $01
00084B7E E105                       	smpsAlterNote       $05
00084B80 8001                       	dc.b	nRst, $01
00084B82 E109                       	smpsAlterNote       $09
00084B84 C401                       	dc.b	nG5, $01
00084B86 E10B                       	smpsAlterNote       $0B
00084B88 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00084B91 E109                       	smpsAlterNote       $09
00084B93 C404 8001                  	dc.b	nG5, $04, nRst, $01
00084B97 E10B                       	smpsAlterNote       $0B
00084B99 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084B9D E107                       	smpsAlterNote       $07
00084B9F BF0D                       	dc.b	nD5, $0D
00084BA1 E101                       	smpsAlterNote       $01
00084BA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BA7 E104                       	smpsAlterNote       $04
00084BA9 E701                       	dc.b	smpsNoAttack, $01
00084BAB E10A                       	smpsAlterNote       $0A
00084BAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BB1 E104                       	smpsAlterNote       $04
00084BB3 E701                       	dc.b	smpsNoAttack, $01
00084BB5 E101                       	smpsAlterNote       $01
00084BB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BBB E107                       	smpsAlterNote       $07
00084BBD E701                       	dc.b	smpsNoAttack, $01
00084BBF E10B                       	smpsAlterNote       $0B
00084BC1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084BC5 E108                       	smpsAlterNote       $08
00084BC7 C101                       	dc.b	nE5, $01
00084BC9 E109                       	smpsAlterNote       $09
00084BCB E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00084BD0 E10B                       	smpsAlterNote       $0B
00084BD2 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00084BDA E108                       	smpsAlterNote       $08
00084BDC CD06                       	dc.b	nE6, $06
00084BDE E109                       	smpsAlterNote       $09
00084BE0 CE07                       	dc.b	nF6, $07
00084BE2 E108                       	smpsAlterNote       $08
00084BE4 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00084BE8 E106                       	smpsAlterNote       $06
00084BEA C903                       	dc.b	nC6, $03
00084BEC E109                       	smpsAlterNote       $09
00084BEE C403 8001                  	dc.b	nG5, $03, nRst, $01
00084BF2 E10C                       	smpsAlterNote       $0C
00084BF4 C70D                       	dc.b	nBb5, $0D
00084BF6 E106                       	smpsAlterNote       $06
00084BF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BFC E109                       	smpsAlterNote       $09
00084BFE E701                       	dc.b	smpsNoAttack, $01
00084C00 E10F                       	smpsAlterNote       $0F
00084C02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C06 E109                       	smpsAlterNote       $09
00084C08 E701                       	dc.b	smpsNoAttack, $01
00084C0A E106                       	smpsAlterNote       $06
00084C0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C10 E10C                       	smpsAlterNote       $0C
00084C12 E701                       	dc.b	smpsNoAttack, $01
00084C14 E110                       	smpsAlterNote       $10
00084C16 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084C1A E10B                       	smpsAlterNote       $0B
00084C1C C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00084C20 E105                       	smpsAlterNote       $05
00084C22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C26 E10B                       	smpsAlterNote       $0B
00084C28 E701                       	dc.b	smpsNoAttack, $01
00084C2A E10E                       	smpsAlterNote       $0E
00084C2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C30 E108                       	smpsAlterNote       $08
00084C32 E701                       	dc.b	smpsNoAttack, $01
00084C34 E104                       	smpsAlterNote       $04
00084C36 E701                       	dc.b	smpsNoAttack, $01
00084C38 E105                       	smpsAlterNote       $05
00084C3A E701                       	dc.b	smpsNoAttack, $01
00084C3C E10B                       	smpsAlterNote       $0B
00084C3E E701                       	dc.b	smpsNoAttack, $01
00084C40 E10F                       	smpsAlterNote       $0F
00084C42 E701                       	dc.b	smpsNoAttack, $01
00084C44 E10B                       	smpsAlterNote       $0B
00084C46 E701                       	dc.b	smpsNoAttack, $01
00084C48 E108                       	smpsAlterNote       $08
00084C4A E701                       	dc.b	smpsNoAttack, $01
00084C4C E104                       	smpsAlterNote       $04
00084C4E E701                       	dc.b	smpsNoAttack, $01
00084C50 E108                       	smpsAlterNote       $08
00084C52 E701                       	dc.b	smpsNoAttack, $01
00084C54 E10E                       	smpsAlterNote       $0E
00084C56 E701                       	dc.b	smpsNoAttack, $01
00084C58 E10F                       	smpsAlterNote       $0F
00084C5A E701                       	dc.b	smpsNoAttack, $01
00084C5C E10B                       	smpsAlterNote       $0B
00084C5E E701                       	dc.b	smpsNoAttack, $01
00084C60 E105                       	smpsAlterNote       $05
00084C62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C66 E108                       	smpsAlterNote       $08
00084C68 E701                       	dc.b	smpsNoAttack, $01
00084C6A E10E                       	smpsAlterNote       $0E
00084C6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C70 E108                       	smpsAlterNote       $08
00084C72 E701                       	dc.b	smpsNoAttack, $01
00084C74 E105                       	smpsAlterNote       $05
00084C76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C7A E10B                       	smpsAlterNote       $0B
00084C7C E701                       	dc.b	smpsNoAttack, $01
00084C7E E10F                       	smpsAlterNote       $0F
00084C80 E701                       	dc.b	smpsNoAttack, $01
00084C82 E10E                       	smpsAlterNote       $0E
00084C84 E701                       	dc.b	smpsNoAttack, $01
00084C86 E108                       	smpsAlterNote       $08
00084C88 E701                       	dc.b	smpsNoAttack, $01
00084C8A E104                       	smpsAlterNote       $04
00084C8C E701                       	dc.b	smpsNoAttack, $01
00084C8E E108                       	smpsAlterNote       $08
00084C90 E701                       	dc.b	smpsNoAttack, $01
00084C92 E10E                       	smpsAlterNote       $0E
00084C94 E701                       	dc.b	smpsNoAttack, $01
00084C96 E10F                       	smpsAlterNote       $0F
00084C98 E701                       	dc.b	smpsNoAttack, $01
00084C9A E10B                       	smpsAlterNote       $0B
00084C9C E701                       	dc.b	smpsNoAttack, $01
00084C9E E105                       	smpsAlterNote       $05
00084CA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CA4 E108                       	smpsAlterNote       $08
00084CA6 E701                       	dc.b	smpsNoAttack, $01
00084CA8 E10E                       	smpsAlterNote       $0E
00084CAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CAE E108                       	smpsAlterNote       $08
00084CB0 E701                       	dc.b	smpsNoAttack, $01
00084CB2 E105                       	smpsAlterNote       $05
00084CB4 E701                       	dc.b	smpsNoAttack, $01
00084CB6 E10B                       	smpsAlterNote       $0B
00084CB8 C60D                       	dc.b	nA5, $0D
00084CBA E108                       	smpsAlterNote       $08
00084CBC E701                       	dc.b	smpsNoAttack, $01
00084CBE E104                       	smpsAlterNote       $04
00084CC0 E701                       	dc.b	smpsNoAttack, $01
00084CC2 E105                       	smpsAlterNote       $05
00084CC4 E701                       	dc.b	smpsNoAttack, $01
00084CC6 E10B                       	smpsAlterNote       $0B
00084CC8 E701                       	dc.b	smpsNoAttack, $01
00084CCA E10F                       	smpsAlterNote       $0F
00084CCC E701                       	dc.b	smpsNoAttack, $01
00084CCE E10B                       	smpsAlterNote       $0B
00084CD0 E701                       	dc.b	smpsNoAttack, $01
00084CD2 E108                       	smpsAlterNote       $08
00084CD4 E701                       	dc.b	smpsNoAttack, $01
00084CD6 E104                       	smpsAlterNote       $04
00084CD8 E701                       	dc.b	smpsNoAttack, $01
00084CDA E108                       	smpsAlterNote       $08
00084CDC E701                       	dc.b	smpsNoAttack, $01
00084CDE E10E                       	smpsAlterNote       $0E
00084CE0 E701                       	dc.b	smpsNoAttack, $01
00084CE2 E10F                       	smpsAlterNote       $0F
00084CE4 E701                       	dc.b	smpsNoAttack, $01
00084CE8 E109                       	smpsAlterNote       $09
00084CEA E6FF                       	smpsAlterVol        $FF
00084CEC C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00084CF6 E108                       	smpsAlterNote       $08
00084CF8 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00084CFE E107                       	smpsAlterNote       $07
00084D00 E601                       	smpsAlterVol        $01
00084D02 BF03                       	dc.b	nD5, $03
00084D04 E108                       	smpsAlterNote       $08
00084D06 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084D0A E109                       	smpsAlterNote       $09
00084D0C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00084D12 E10B                       	smpsAlterNote       $0B
00084D14 C606 8001                  	dc.b	nA5, $06, nRst, $01
00084D18 E107                       	smpsAlterNote       $07
00084D1A BF02 8001                  	dc.b	nD5, $02, nRst, $01
00084D1E E106                       	smpsAlterNote       $06
00084D20 C90D                       	dc.b	nC6, $0D
00084D22 E103                       	smpsAlterNote       $03
00084D24 E701                       	dc.b	smpsNoAttack, $01
00084D26 E1FF                       	smpsAlterNote       $FF
00084D28 E701                       	dc.b	smpsNoAttack, $01
00084D2A E103                       	smpsAlterNote       $03
00084D2C E701                       	dc.b	smpsNoAttack, $01
00084D2E E109                       	smpsAlterNote       $09
00084D30 E701                       	dc.b	smpsNoAttack, $01
00084D32 E10A                       	smpsAlterNote       $0A
00084D34 E701                       	dc.b	smpsNoAttack, $01
00084D36 E106                       	smpsAlterNote       $06
00084D38 E701                       	dc.b	smpsNoAttack, $01
00084D3A E100                       	smpsAlterNote       $00
00084D3C E701                       	dc.b	smpsNoAttack, $01
00084D3E E10C                       	smpsAlterNote       $0C
00084D40 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00084D44 E10B                       	smpsAlterNote       $0B
00084D46 C603                       	dc.b	nA5, $03
00084D48 E109                       	smpsAlterNote       $09
00084D4A C403 8001                  	dc.b	nG5, $03, nRst, $01
00084D4E E10B                       	smpsAlterNote       $0B
00084D50 C60D                       	dc.b	nA5, $0D
00084D52 E105                       	smpsAlterNote       $05
00084D54 E701                       	dc.b	smpsNoAttack, $01
00084D56 E104                       	smpsAlterNote       $04
00084D58 E701                       	dc.b	smpsNoAttack, $01
00084D5A E108                       	smpsAlterNote       $08
00084D5C E701                       	dc.b	smpsNoAttack, $01
00084D5E E10E                       	smpsAlterNote       $0E
00084D60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D64 E10B                       	smpsAlterNote       $0B
00084D66 E701                       	dc.b	smpsNoAttack, $01
00084D68 E105                       	smpsAlterNote       $05
00084D6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D6E E10B                       	smpsAlterNote       $0B
00084D70 E701                       	dc.b	smpsNoAttack, $01
00084D72 E10E                       	smpsAlterNote       $0E
00084D74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D78 E108                       	smpsAlterNote       $08
00084D7A E701                       	dc.b	smpsNoAttack, $01
00084D7C E104                       	smpsAlterNote       $04
00084D7E E701                       	dc.b	smpsNoAttack, $01
00084D80 E105                       	smpsAlterNote       $05
00084D82 E701                       	dc.b	smpsNoAttack, $01
00084D84 E10B                       	smpsAlterNote       $0B
00084D86 E701                       	dc.b	smpsNoAttack, $01
00084D88 E10F                       	smpsAlterNote       $0F
00084D8A E701                       	dc.b	smpsNoAttack, $01
00084D8C E10B                       	smpsAlterNote       $0B
00084D8E E701                       	dc.b	smpsNoAttack, $01
00084D90 E108                       	smpsAlterNote       $08
00084D92 E701                       	dc.b	smpsNoAttack, $01
00084D94 E104                       	smpsAlterNote       $04
00084D96 E701                       	dc.b	smpsNoAttack, $01
00084D98 E108                       	smpsAlterNote       $08
00084D9A E701                       	dc.b	smpsNoAttack, $01
00084D9C E10E                       	smpsAlterNote       $0E
00084D9E E701                       	dc.b	smpsNoAttack, $01
00084DA0 E10F                       	smpsAlterNote       $0F
00084DA2 E701                       	dc.b	smpsNoAttack, $01
00084DA4 E10B                       	smpsAlterNote       $0B
00084DA6 E701                       	dc.b	smpsNoAttack, $01
00084DA8 E105                       	smpsAlterNote       $05
00084DAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DAE E108                       	smpsAlterNote       $08
00084DB0 E701                       	dc.b	smpsNoAttack, $01
00084DB2 E10E                       	smpsAlterNote       $0E
00084DB4 E701                       	dc.b	smpsNoAttack, $01
00084DB6 E10F                       	smpsAlterNote       $0F
00084DB8 800F                       	dc.b	nRst, $0F
00084DBA E107                       	smpsAlterNote       $07
00084DBC BF02 8001                  	dc.b	nD5, $02, nRst, $01
00084DC0 E108                       	smpsAlterNote       $08
00084DC2 C103                       	dc.b	nE5, $03
00084DC4 E109                       	smpsAlterNote       $09
00084DC6 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00084DCC E10B                       	smpsAlterNote       $0B
00084DCE C606 8001                  	dc.b	nA5, $06, nRst, $01
00084DD2 E107                       	smpsAlterNote       $07
00084DD4 BF03                       	dc.b	nD5, $03
00084DD6 E106                       	smpsAlterNote       $06
00084DD8 C90E                       	dc.b	nC6, $0E
00084DDA E107                       	smpsAlterNote       $07
00084DDC CB03 8001                  	dc.b	nD6, $03, nRst, $01
00084DE0 E10C                       	smpsAlterNote       $0C
00084DE2 C704                       	dc.b	nBb5, $04
00084DE4 E10B                       	smpsAlterNote       $0B
00084DE6 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084DEA E109                       	smpsAlterNote       $09
00084DEC C404                       	dc.b	nG5, $04
00084DEE E10B                       	smpsAlterNote       $0B
00084DF0 C60D                       	dc.b	nA5, $0D
00084DF2 E108                       	smpsAlterNote       $08
00084DF4 E701                       	dc.b	smpsNoAttack, $01
00084DF6 E105                       	smpsAlterNote       $05
00084DF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DFC E10B                       	smpsAlterNote       $0B
00084DFE E701                       	dc.b	smpsNoAttack, $01
00084E00 E10F                       	smpsAlterNote       $0F
00084E02 E701                       	dc.b	smpsNoAttack, $01
00084E04 E10E                       	smpsAlterNote       $0E
00084E06 E701                       	dc.b	smpsNoAttack, $01
00084E08 E108                       	smpsAlterNote       $08
00084E0A E701                       	dc.b	smpsNoAttack, $01
00084E0C E104                       	smpsAlterNote       $04
00084E0E E701                       	dc.b	smpsNoAttack, $01
00084E10 E108                       	smpsAlterNote       $08
00084E12 E701                       	dc.b	smpsNoAttack, $01
00084E14 E10B                       	smpsAlterNote       $0B
00084E16 E701                       	dc.b	smpsNoAttack, $01
00084E18 E10F                       	smpsAlterNote       $0F
00084E1A E701                       	dc.b	smpsNoAttack, $01
00084E1C E10B                       	smpsAlterNote       $0B
00084E1E E701                       	dc.b	smpsNoAttack, $01
00084E20 E105                       	smpsAlterNote       $05
00084E22 E701                       	dc.b	smpsNoAttack, $01
00084E24 E104                       	smpsAlterNote       $04
00084E26 E701                       	dc.b	smpsNoAttack, $01
00084E28 E108                       	smpsAlterNote       $08
00084E2A E701                       	dc.b	smpsNoAttack, $01
00084E2C E10E                       	smpsAlterNote       $0E
00084E2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E32 E10B                       	smpsAlterNote       $0B
00084E34 E701                       	dc.b	smpsNoAttack, $01
00084E36 E105                       	smpsAlterNote       $05
00084E38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E3C E10B                       	smpsAlterNote       $0B
00084E3E E701                       	dc.b	smpsNoAttack, $01
00084E40 E10E                       	smpsAlterNote       $0E
00084E42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E46 E108                       	smpsAlterNote       $08
00084E48 E701                       	dc.b	smpsNoAttack, $01
00084E4A E105                       	smpsAlterNote       $05
00084E4C 8001                       	dc.b	nRst, $01
00084E4E E109                       	smpsAlterNote       $09
00084E50 C402                       	dc.b	nG5, $02
00084E52 E10B                       	smpsAlterNote       $0B
00084E54 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00084E5D E109                       	smpsAlterNote       $09
00084E5F C404                       	dc.b	nG5, $04
00084E61 E10B                       	smpsAlterNote       $0B
00084E63 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084E67 E107                       	smpsAlterNote       $07
00084E69 BF0D                       	dc.b	nD5, $0D
00084E6B E101                       	smpsAlterNote       $01
00084E6D E701                       	dc.b	smpsNoAttack, $01
00084E6F E100                       	smpsAlterNote       $00
00084E71 E701                       	dc.b	smpsNoAttack, $01
00084E73 E104                       	smpsAlterNote       $04
00084E75 E701                       	dc.b	smpsNoAttack, $01
00084E77 E10A                       	smpsAlterNote       $0A
00084E79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E7D E107                       	smpsAlterNote       $07
00084E7F E701                       	dc.b	smpsNoAttack, $01
00084E81 E101                       	smpsAlterNote       $01
00084E83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E87 E107                       	smpsAlterNote       $07
00084E89 E701                       	dc.b	smpsNoAttack, $01
00084E8B E10A                       	smpsAlterNote       $0A
00084E8D E701                       	dc.b	smpsNoAttack, $01
00084E8F E10B                       	smpsAlterNote       $0B
00084E91 8001                       	dc.b	nRst, $01
00084E93 E108                       	smpsAlterNote       $08
00084E95 C101                       	dc.b	nE5, $01
00084E97 E109                       	smpsAlterNote       $09
00084E99 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00084E9E E10B                       	smpsAlterNote       $0B
00084EA0 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00084EA8 E108                       	smpsAlterNote       $08
00084EAA CD06 8001                  	dc.b	nE6, $06, nRst, $01
00084EAE E109                       	smpsAlterNote       $09
00084EB0 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00084EB4 E108                       	smpsAlterNote       $08
00084EB6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00084EBA E106                       	smpsAlterNote       $06
00084EBC C903                       	dc.b	nC6, $03
00084EBE E109                       	smpsAlterNote       $09
00084EC0 C403 8001                  	dc.b	nG5, $03, nRst, $01
00084EC4 E10C                       	smpsAlterNote       $0C
00084EC6 C70D                       	dc.b	nBb5, $0D
00084EC8 E109                       	smpsAlterNote       $09
00084ECA E701                       	dc.b	smpsNoAttack, $01
00084ECC E105                       	smpsAlterNote       $05
00084ECE E701                       	dc.b	smpsNoAttack, $01
00084ED0 E109                       	smpsAlterNote       $09
00084ED2 E701                       	dc.b	smpsNoAttack, $01
00084ED4 E10F                       	smpsAlterNote       $0F
00084ED6 E701                       	dc.b	smpsNoAttack, $01
00084ED8 E110                       	smpsAlterNote       $10
00084EDA E701                       	dc.b	smpsNoAttack, $01
00084EDC E10C                       	smpsAlterNote       $0C
00084EDE E701                       	dc.b	smpsNoAttack, $01
00084EE0 E106                       	smpsAlterNote       $06
00084EE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084EE6 E109                       	smpsAlterNote       $09
00084EE8 E701                       	dc.b	smpsNoAttack, $01
00084EEA E10F                       	smpsAlterNote       $0F
00084EEC E701                       	dc.b	smpsNoAttack, $01
00084EEE E110                       	smpsAlterNote       $10
00084EF0 8001                       	dc.b	nRst, $01
00084EF2 E10B                       	smpsAlterNote       $0B
00084EF4 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00084EFA E105                       	smpsAlterNote       $05
00084EFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F00 E108                       	smpsAlterNote       $08
00084F02 E701                       	dc.b	smpsNoAttack, $01
00084F04 E10E                       	smpsAlterNote       $0E
00084F06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F0A E108                       	smpsAlterNote       $08
00084F0C E701                       	dc.b	smpsNoAttack, $01
00084F0E E105                       	smpsAlterNote       $05
00084F10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F14 E10B                       	smpsAlterNote       $0B
00084F16 E701                       	dc.b	smpsNoAttack, $01
00084F18 E10F                       	smpsAlterNote       $0F
00084F1A E701                       	dc.b	smpsNoAttack, $01
00084F1C E10E                       	smpsAlterNote       $0E
00084F1E E701                       	dc.b	smpsNoAttack, $01
00084F20 E108                       	smpsAlterNote       $08
00084F22 E701                       	dc.b	smpsNoAttack, $01
00084F24 E104                       	smpsAlterNote       $04
00084F26 E701                       	dc.b	smpsNoAttack, $01
00084F28 E108                       	smpsAlterNote       $08
00084F2A E701                       	dc.b	smpsNoAttack, $01
00084F2C E10B                       	smpsAlterNote       $0B
00084F2E E701                       	dc.b	smpsNoAttack, $01
00084F30 E10F                       	smpsAlterNote       $0F
00084F32 E701                       	dc.b	smpsNoAttack, $01
00084F34 E10B                       	smpsAlterNote       $0B
00084F36 E701                       	dc.b	smpsNoAttack, $01
00084F38 E105                       	smpsAlterNote       $05
00084F3A E701                       	dc.b	smpsNoAttack, $01
00084F3C E104                       	smpsAlterNote       $04
00084F3E E701                       	dc.b	smpsNoAttack, $01
00084F40 E108                       	smpsAlterNote       $08
00084F42 E701                       	dc.b	smpsNoAttack, $01
00084F44 E10E                       	smpsAlterNote       $0E
00084F46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F4A E10B                       	smpsAlterNote       $0B
00084F4C E701                       	dc.b	smpsNoAttack, $01
00084F4E E105                       	smpsAlterNote       $05
00084F50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F54 E10B                       	smpsAlterNote       $0B
00084F56 E701                       	dc.b	smpsNoAttack, $01
00084F58 E10E                       	smpsAlterNote       $0E
00084F5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F5E E108                       	smpsAlterNote       $08
00084F60 E701                       	dc.b	smpsNoAttack, $01
00084F62 E104                       	smpsAlterNote       $04
00084F64 E701                       	dc.b	smpsNoAttack, $01
00084F66 E105                       	smpsAlterNote       $05
00084F68 E701                       	dc.b	smpsNoAttack, $01
00084F6A E10B                       	smpsAlterNote       $0B
00084F6C E701                       	dc.b	smpsNoAttack, $01
00084F6E E10F                       	smpsAlterNote       $0F
00084F70 E701                       	dc.b	smpsNoAttack, $01
00084F72 E10B                       	smpsAlterNote       $0B
00084F74 E701                       	dc.b	smpsNoAttack, $01
00084F76 E108                       	smpsAlterNote       $08
00084F78 E701                       	dc.b	smpsNoAttack, $01
00084F7A E104                       	smpsAlterNote       $04
00084F7C E701                       	dc.b	smpsNoAttack, $01
00084F7E E108                       	smpsAlterNote       $08
00084F80 E701                       	dc.b	smpsNoAttack, $01
00084F82 E10E                       	smpsAlterNote       $0E
00084F84 E701                       	dc.b	smpsNoAttack, $01
00084F86 E10F                       	smpsAlterNote       $0F
00084F88 E701                       	dc.b	smpsNoAttack, $01
00084F8A E10B                       	smpsAlterNote       $0B
00084F8C E701                       	dc.b	smpsNoAttack, $01
00084F8E E105                       	smpsAlterNote       $05
00084F90 E701                       	dc.b	smpsNoAttack, $01
00084F92 E10B                       	smpsAlterNote       $0B
00084F94 C60E                       	dc.b	nA5, $0E
00084F96 E105                       	smpsAlterNote       $05
00084F98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F9C E10B                       	smpsAlterNote       $0B
00084F9E E701                       	dc.b	smpsNoAttack, $01
00084FA0 E10E                       	smpsAlterNote       $0E
00084FA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FA6 E108                       	smpsAlterNote       $08
00084FA8 E701                       	dc.b	smpsNoAttack, $01
00084FAA E104                       	smpsAlterNote       $04
00084FAC E701                       	dc.b	smpsNoAttack, $01
00084FAE E105                       	smpsAlterNote       $05
00084FB0 E701                       	dc.b	smpsNoAttack, $01
00084FB2 E10B                       	smpsAlterNote       $0B
00084FB4 E701                       	dc.b	smpsNoAttack, $01
00084FB6 E10F                       	smpsAlterNote       $0F
00084FB8 E701                       	dc.b	smpsNoAttack, $01
00084FBA E10B                       	smpsAlterNote       $0B
00084FBC E701                       	dc.b	smpsNoAttack, $01
00084FBE E108                       	smpsAlterNote       $08
00084FC0 E701                       	dc.b	smpsNoAttack, $01
00084FC2 E104                       	smpsAlterNote       $04
00084FC4 E701                       	dc.b	smpsNoAttack, $01
00084FC6 E108                       	smpsAlterNote       $08
00084FC8 E701                       	dc.b	smpsNoAttack, $01
00084FCA E10E                       	smpsAlterNote       $0E
00084FCC E701                       	dc.b	smpsNoAttack, $01
00084FCE E10F                       	smpsAlterNote       $0F
00084FD0 E701                       	dc.b	smpsNoAttack, $01
00084FD2 E10B                       	smpsAlterNote       $0B
00084FD4 E701                       	dc.b	smpsNoAttack, $01
00084FD6 E105                       	smpsAlterNote       $05
00084FD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FDC E108                       	smpsAlterNote       $08
00084FDE E701                       	dc.b	smpsNoAttack, $01
00084FE0 E10E                       	smpsAlterNote       $0E
00084FE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FE6 E108                       	smpsAlterNote       $08
00084FE8 E701                       	dc.b	smpsNoAttack, $01
00084FEA E105                       	smpsAlterNote       $05
00084FEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FF0 E10B                       	smpsAlterNote       $0B
00084FF2 E701                       	dc.b	smpsNoAttack, $01
00084FF4 E10F                       	smpsAlterNote       $0F
00084FF6 E701                       	dc.b	smpsNoAttack, $01
00084FF8 E10E                       	smpsAlterNote       $0E
00084FFA E701                       	dc.b	smpsNoAttack, $01
00084FFC E108                       	smpsAlterNote       $08
00084FFE E701                       	dc.b	smpsNoAttack, $01
00085000 E104                       	smpsAlterNote       $04
00085002 E701                       	dc.b	smpsNoAttack, $01
00085004 E108                       	smpsAlterNote       $08
00085006 E701                       	dc.b	smpsNoAttack, $01
00085008 E10E                       	smpsAlterNote       $0E
0008500A E701                       	dc.b	smpsNoAttack, $01
0008500C E10F                       	smpsAlterNote       $0F
0008500E E701                       	dc.b	smpsNoAttack, $01
00085010 E10B                       	smpsAlterNote       $0B
00085012 E701                       	dc.b	smpsNoAttack, $01
00085014 E105                       	smpsAlterNote       $05
00085016 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008501A E108                       	smpsAlterNote       $08
0008501C E701                       	dc.b	smpsNoAttack, $01
0008501E E10E                       	smpsAlterNote       $0E
00085020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085024 E108                       	smpsAlterNote       $08
00085026 E701                       	dc.b	smpsNoAttack, $01
00085028 E105                       	smpsAlterNote       $05
0008502A E701                       	dc.b	smpsNoAttack, $01
0008502E E10B                       	smpsAlterNote       $0B
00085030 E6FD                       	smpsAlterVol        $FD
00085032 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085036 E109                       	smpsAlterNote       $09
00085038 C404                       	dc.b	nG5, $04
0008503A E10B                       	smpsAlterNote       $0B
0008503C C604 8001                  	dc.b	nA5, $04, nRst, $01
00085040 E107                       	smpsAlterNote       $07
00085042 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00085048 E10B                       	smpsAlterNote       $0B
0008504A C604                       	dc.b	nA5, $04
0008504C E109                       	smpsAlterNote       $09
0008504E C404 8001                  	dc.b	nG5, $04, nRst, $01
00085052 E10B                       	smpsAlterNote       $0B
00085054 C604                       	dc.b	nA5, $04
00085056 E108                       	smpsAlterNote       $08
00085058 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00085060 E106                       	smpsAlterNote       $06
00085062 C904 8001                  	dc.b	nC6, $04, nRst, $01
00085066 E10C                       	smpsAlterNote       $0C
00085068 C704                       	dc.b	nBb5, $04
0008506A E10B                       	smpsAlterNote       $0B
0008506C C604 8001                  	dc.b	nA5, $04, nRst, $01
00085070 E109                       	smpsAlterNote       $09
00085072 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008507C E10B                       	smpsAlterNote       $0B
0008507E C60D                       	dc.b	nA5, $0D
00085080 E108                       	smpsAlterNote       $08
00085082 E701                       	dc.b	smpsNoAttack, $01
00085084 E104                       	smpsAlterNote       $04
00085086 E701                       	dc.b	smpsNoAttack, $01
00085088 E108                       	smpsAlterNote       $08
0008508A E701                       	dc.b	smpsNoAttack, $01
0008508C E10E                       	smpsAlterNote       $0E
0008508E E701                       	dc.b	smpsNoAttack, $01
00085090 E10F                       	smpsAlterNote       $0F
00085092 E701                       	dc.b	smpsNoAttack, $01
00085094 E10B                       	smpsAlterNote       $0B
00085096 E701                       	dc.b	smpsNoAttack, $01
00085098 E105                       	smpsAlterNote       $05
0008509A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008509E E108                       	smpsAlterNote       $08
000850A0 E701                       	dc.b	smpsNoAttack, $01
000850A2 E10E                       	smpsAlterNote       $0E
000850A4 E701                       	dc.b	smpsNoAttack, $01
000850A6 E10F                       	smpsAlterNote       $0F
000850A8 8001                       	dc.b	nRst, $01
000850AA E109                       	smpsAlterNote       $09
000850AC C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000850B2 E108                       	smpsAlterNote       $08
000850B4 C10D                       	dc.b	nE5, $0D
000850B6 E102                       	smpsAlterNote       $02
000850B8 E701                       	dc.b	smpsNoAttack, $01
000850BA E101                       	smpsAlterNote       $01
000850BC E701                       	dc.b	smpsNoAttack, $01
000850BE E105                       	smpsAlterNote       $05
000850C0 E701                       	dc.b	smpsNoAttack, $01
000850C2 E10B                       	smpsAlterNote       $0B
000850C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850C8 E108                       	smpsAlterNote       $08
000850CA E701                       	dc.b	smpsNoAttack, $01
000850CC E102                       	smpsAlterNote       $02
000850CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850D2 E108                       	smpsAlterNote       $08
000850D4 E701                       	dc.b	smpsNoAttack, $01
000850D6 E10B                       	smpsAlterNote       $0B
000850D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850DC E105                       	smpsAlterNote       $05
000850DE E701                       	dc.b	smpsNoAttack, $01
000850E0 E101                       	smpsAlterNote       $01
000850E2 E701                       	dc.b	smpsNoAttack, $01
000850E4 E102                       	smpsAlterNote       $02
000850E6 E701                       	dc.b	smpsNoAttack, $01
000850E8 E108                       	smpsAlterNote       $08
000850EA E701                       	dc.b	smpsNoAttack, $01
000850EC E10C                       	smpsAlterNote       $0C
000850EE E701                       	dc.b	smpsNoAttack, $01
000850F0 E108                       	smpsAlterNote       $08
000850F2 E701                       	dc.b	smpsNoAttack, $01
000850F4 E105                       	smpsAlterNote       $05
000850F6 E701                       	dc.b	smpsNoAttack, $01
000850F8 E101                       	smpsAlterNote       $01
000850FA E701                       	dc.b	smpsNoAttack, $01
000850FC E105                       	smpsAlterNote       $05
000850FE E701                       	dc.b	smpsNoAttack, $01
00085100 E10B                       	smpsAlterNote       $0B
00085102 E701                       	dc.b	smpsNoAttack, $01
00085104 E10C                       	smpsAlterNote       $0C
00085106 E701                       	dc.b	smpsNoAttack, $01
00085108 E108                       	smpsAlterNote       $08
0008510A E701                       	dc.b	smpsNoAttack, $01
0008510C E102                       	smpsAlterNote       $02
0008510E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085112 E105                       	smpsAlterNote       $05
00085114 E701                       	dc.b	smpsNoAttack, $01
00085116 E10B                       	smpsAlterNote       $0B
00085118 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008511C E105                       	smpsAlterNote       $05
0008511E E701                       	dc.b	smpsNoAttack, $01
00085120 E102                       	smpsAlterNote       $02
00085122 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085126 E108                       	smpsAlterNote       $08
00085128 E701                       	dc.b	smpsNoAttack, $01
0008512A E10C                       	smpsAlterNote       $0C
0008512C E701                       	dc.b	smpsNoAttack, $01
0008512E E10B                       	smpsAlterNote       $0B
00085130 E701                       	dc.b	smpsNoAttack, $01
00085132 E105                       	smpsAlterNote       $05
00085134 E701                       	dc.b	smpsNoAttack, $01
00085136 E101                       	smpsAlterNote       $01
00085138 E701                       	dc.b	smpsNoAttack, $01
0008513A E105                       	smpsAlterNote       $05
0008513C E701                       	dc.b	smpsNoAttack, $01
0008513E E108                       	smpsAlterNote       $08
00085140 E701                       	dc.b	smpsNoAttack, $01
00085142 E10C                       	smpsAlterNote       $0C
00085144 E701                       	dc.b	smpsNoAttack, $01
00085146 E108                       	smpsAlterNote       $08
00085148 E701                       	dc.b	smpsNoAttack, $01
0008514A E102                       	smpsAlterNote       $02
0008514C E701                       	dc.b	smpsNoAttack, $01
0008514E E101                       	smpsAlterNote       $01
00085150 E701                       	dc.b	smpsNoAttack, $01
00085152 E105                       	smpsAlterNote       $05
00085154 E701                       	dc.b	smpsNoAttack, $01
00085156 E10B                       	smpsAlterNote       $0B
00085158 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008515C E108                       	smpsAlterNote       $08
0008515E E701                       	dc.b	smpsNoAttack, $01
00085160 E102                       	smpsAlterNote       $02
00085162 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085166 E108                       	smpsAlterNote       $08
00085168 E701                       	dc.b	smpsNoAttack, $01
0008516A E10B                       	smpsAlterNote       $0B
0008516C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085170 E105                       	smpsAlterNote       $05
00085172 E701                       	dc.b	smpsNoAttack, $01
00085174 E101                       	smpsAlterNote       $01
00085176 E701                       	dc.b	smpsNoAttack, $01
00085178 E102                       	smpsAlterNote       $02
0008517A E701                       	dc.b	smpsNoAttack, $01
0008517C E108                       	smpsAlterNote       $08
0008517E E701                       	dc.b	smpsNoAttack, $01
00085180 E10C                       	smpsAlterNote       $0C
00085182 E701                       	dc.b	smpsNoAttack, $01
00085184 E108                       	smpsAlterNote       $08
00085186 E701                       	dc.b	smpsNoAttack, $01
00085188 E105                       	smpsAlterNote       $05
0008518A E701                       	dc.b	smpsNoAttack, $01
0008518C E101                       	smpsAlterNote       $01
0008518E E701                       	dc.b	smpsNoAttack, $01
00085190 E105                       	smpsAlterNote       $05
00085192 E701                       	dc.b	smpsNoAttack, $01
00085194 E10B                       	smpsAlterNote       $0B
00085196 E701                       	dc.b	smpsNoAttack, $01
00085198 E10C                       	smpsAlterNote       $0C
0008519A E701                       	dc.b	smpsNoAttack, $01
0008519C E108                       	smpsAlterNote       $08
0008519E E701                       	dc.b	smpsNoAttack, $01
000851A0 E102                       	smpsAlterNote       $02
000851A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851A6 E105                       	smpsAlterNote       $05
000851A8 E701                       	dc.b	smpsNoAttack, $01
000851AA E10B                       	smpsAlterNote       $0B
000851AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851B0 E105                       	smpsAlterNote       $05
000851B2 E701                       	dc.b	smpsNoAttack, $01
000851B4 E101                       	smpsAlterNote       $01
000851B6 E701                       	dc.b	smpsNoAttack, $01
000851B8 E102                       	smpsAlterNote       $02
000851BA E701                       	dc.b	smpsNoAttack, $01
000851BC E108                       	smpsAlterNote       $08
000851BE E701                       	dc.b	smpsNoAttack, $01
000851C0 E10C                       	smpsAlterNote       $0C
000851C2 E701                       	dc.b	smpsNoAttack, $01
000851C4 E108                       	smpsAlterNote       $08
000851C6 E701                       	dc.b	smpsNoAttack, $01
000851C8 E105                       	smpsAlterNote       $05
000851CA E701                       	dc.b	smpsNoAttack, $01
000851CC E101                       	smpsAlterNote       $01
000851CE E701                       	dc.b	smpsNoAttack, $01
000851D0 E105                       	smpsAlterNote       $05
000851D2 E701                       	dc.b	smpsNoAttack, $01
000851D4 E10B                       	smpsAlterNote       $0B
000851D6 E701                       	dc.b	smpsNoAttack, $01
000851D8 E10C                       	smpsAlterNote       $0C
000851DA E701                       	dc.b	smpsNoAttack, $01
000851DC E108                       	smpsAlterNote       $08
000851DE E701                       	dc.b	smpsNoAttack, $01
000851E0 E102                       	smpsAlterNote       $02
000851E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851E6 E105                       	smpsAlterNote       $05
000851E8 E701                       	dc.b	smpsNoAttack, $01
000851EA E10B                       	smpsAlterNote       $0B
000851EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851F0 E105                       	smpsAlterNote       $05
000851F2 E701                       	dc.b	smpsNoAttack, $01
000851F4 E102                       	smpsAlterNote       $02
000851F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851FA E108                       	smpsAlterNote       $08
000851FC E701                       	dc.b	smpsNoAttack, $01
000851FE E10C                       	smpsAlterNote       $0C
00085200 E701                       	dc.b	smpsNoAttack, $01
00085202 E10B                       	smpsAlterNote       $0B
00085204 E701                       	dc.b	smpsNoAttack, $01
00085206 E105                       	smpsAlterNote       $05
00085208 E701                       	dc.b	smpsNoAttack, $01
0008520A E101                       	smpsAlterNote       $01
0008520C E701                       	dc.b	smpsNoAttack, $01
0008520E E105                       	smpsAlterNote       $05
00085210 E701                       	dc.b	smpsNoAttack, $01
00085212 E108                       	smpsAlterNote       $08
00085214 E701                       	dc.b	smpsNoAttack, $01
00085216 E10C                       	smpsAlterNote       $0C
00085218 E701                       	dc.b	smpsNoAttack, $01
0008521C E10B                       	smpsAlterNote       $0B
0008521E C604 8001                  	dc.b	nA5, $04, nRst, $01
00085222 E109                       	smpsAlterNote       $09
00085224 C404                       	dc.b	nG5, $04
00085226 E10B                       	smpsAlterNote       $0B
00085228 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008522C E107                       	smpsAlterNote       $07
0008522E BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00085234 E10B                       	smpsAlterNote       $0B
00085236 C604                       	dc.b	nA5, $04
00085238 E109                       	smpsAlterNote       $09
0008523A C404 8001                  	dc.b	nG5, $04, nRst, $01
0008523E E10B                       	smpsAlterNote       $0B
00085240 C604                       	dc.b	nA5, $04
00085242 E108                       	smpsAlterNote       $08
00085244 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008524A E106                       	smpsAlterNote       $06
0008524C C904 8001                  	dc.b	nC6, $04, nRst, $01
00085250 E10C                       	smpsAlterNote       $0C
00085252 C704                       	dc.b	nBb5, $04
00085254 E10B                       	smpsAlterNote       $0B
00085256 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008525A E109                       	smpsAlterNote       $09
0008525C C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00085266 E10B                       	smpsAlterNote       $0B
00085268 C60D                       	dc.b	nA5, $0D
0008526A E108                       	smpsAlterNote       $08
0008526C E701                       	dc.b	smpsNoAttack, $01
0008526E E104                       	smpsAlterNote       $04
00085270 E701                       	dc.b	smpsNoAttack, $01
00085272 E108                       	smpsAlterNote       $08
00085274 E701                       	dc.b	smpsNoAttack, $01
00085276 E10B                       	smpsAlterNote       $0B
00085278 E701                       	dc.b	smpsNoAttack, $01
0008527A E10F                       	smpsAlterNote       $0F
0008527C E701                       	dc.b	smpsNoAttack, $01
0008527E E10B                       	smpsAlterNote       $0B
00085280 E701                       	dc.b	smpsNoAttack, $01
00085282 E105                       	smpsAlterNote       $05
00085284 E701                       	dc.b	smpsNoAttack, $01
00085286 E104                       	smpsAlterNote       $04
00085288 E701                       	dc.b	smpsNoAttack, $01
0008528A E108                       	smpsAlterNote       $08
0008528C E701                       	dc.b	smpsNoAttack, $01
0008528E E10E                       	smpsAlterNote       $0E
00085290 E701                       	dc.b	smpsNoAttack, $01
00085292 E10F                       	smpsAlterNote       $0F
00085294 8001                       	dc.b	nRst, $01
00085296 E109                       	smpsAlterNote       $09
00085298 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008529E E108                       	smpsAlterNote       $08
000852A0 C10D                       	dc.b	nE5, $0D
000852A2 E105                       	smpsAlterNote       $05
000852A4 E701                       	dc.b	smpsNoAttack, $01
000852A6 E101                       	smpsAlterNote       $01
000852A8 E701                       	dc.b	smpsNoAttack, $01
000852AA E105                       	smpsAlterNote       $05
000852AC E701                       	dc.b	smpsNoAttack, $01
000852AE E10B                       	smpsAlterNote       $0B
000852B0 E701                       	dc.b	smpsNoAttack, $01
000852B2 E10C                       	smpsAlterNote       $0C
000852B4 E701                       	dc.b	smpsNoAttack, $01
000852B6 E108                       	smpsAlterNote       $08
000852B8 E701                       	dc.b	smpsNoAttack, $01
000852BA E102                       	smpsAlterNote       $02
000852BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852C0 E105                       	smpsAlterNote       $05
000852C2 E701                       	dc.b	smpsNoAttack, $01
000852C4 E10B                       	smpsAlterNote       $0B
000852C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852CA E105                       	smpsAlterNote       $05
000852CC E701                       	dc.b	smpsNoAttack, $01
000852CE E102                       	smpsAlterNote       $02
000852D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852D4 E108                       	smpsAlterNote       $08
000852D6 E701                       	dc.b	smpsNoAttack, $01
000852D8 E10C                       	smpsAlterNote       $0C
000852DA E701                       	dc.b	smpsNoAttack, $01
000852DC E10B                       	smpsAlterNote       $0B
000852DE E701                       	dc.b	smpsNoAttack, $01
000852E0 E105                       	smpsAlterNote       $05
000852E2 E701                       	dc.b	smpsNoAttack, $01
000852E4 E101                       	smpsAlterNote       $01
000852E6 E701                       	dc.b	smpsNoAttack, $01
000852E8 E105                       	smpsAlterNote       $05
000852EA E701                       	dc.b	smpsNoAttack, $01
000852EC E108                       	smpsAlterNote       $08
000852EE E701                       	dc.b	smpsNoAttack, $01
000852F0 E10C                       	smpsAlterNote       $0C
000852F2 E701                       	dc.b	smpsNoAttack, $01
000852F4 E108                       	smpsAlterNote       $08
000852F6 E701                       	dc.b	smpsNoAttack, $01
000852F8 E102                       	smpsAlterNote       $02
000852FA E701                       	dc.b	smpsNoAttack, $01
000852FC E101                       	smpsAlterNote       $01
000852FE E701                       	dc.b	smpsNoAttack, $01
00085300 E105                       	smpsAlterNote       $05
00085302 E701                       	dc.b	smpsNoAttack, $01
00085304 E10B                       	smpsAlterNote       $0B
00085306 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008530A E108                       	smpsAlterNote       $08
0008530C E701                       	dc.b	smpsNoAttack, $01
0008530E E102                       	smpsAlterNote       $02
00085310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085314 E108                       	smpsAlterNote       $08
00085316 E701                       	dc.b	smpsNoAttack, $01
00085318 E10B                       	smpsAlterNote       $0B
0008531A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008531E E105                       	smpsAlterNote       $05
00085320 E701                       	dc.b	smpsNoAttack, $01
00085322 E101                       	smpsAlterNote       $01
00085324 E701                       	dc.b	smpsNoAttack, $01
00085326 E102                       	smpsAlterNote       $02
00085328 E701                       	dc.b	smpsNoAttack, $01
0008532A E108                       	smpsAlterNote       $08
0008532C E701                       	dc.b	smpsNoAttack, $01
0008532E E10C                       	smpsAlterNote       $0C
00085330 E701                       	dc.b	smpsNoAttack, $01
00085332 E108                       	smpsAlterNote       $08
00085334 E701                       	dc.b	smpsNoAttack, $01
00085336 E105                       	smpsAlterNote       $05
00085338 E701                       	dc.b	smpsNoAttack, $01
0008533A E101                       	smpsAlterNote       $01
0008533C E701                       	dc.b	smpsNoAttack, $01
0008533E E105                       	smpsAlterNote       $05
00085340 E701                       	dc.b	smpsNoAttack, $01
00085342 E10B                       	smpsAlterNote       $0B
00085344 E701                       	dc.b	smpsNoAttack, $01
00085346 E10C                       	smpsAlterNote       $0C
00085348 E701                       	dc.b	smpsNoAttack, $01
0008534A E108                       	smpsAlterNote       $08
0008534C E701                       	dc.b	smpsNoAttack, $01
0008534E E102                       	smpsAlterNote       $02
00085350 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085354 E108                       	smpsAlterNote       $08
00085356 E701                       	dc.b	smpsNoAttack, $01
00085358 E10B                       	smpsAlterNote       $0B
0008535A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008535E E105                       	smpsAlterNote       $05
00085360 E701                       	dc.b	smpsNoAttack, $01
00085362 E101                       	smpsAlterNote       $01
00085364 E701                       	dc.b	smpsNoAttack, $01
00085366 E102                       	smpsAlterNote       $02
00085368 E701                       	dc.b	smpsNoAttack, $01
0008536A E108                       	smpsAlterNote       $08
0008536C E701                       	dc.b	smpsNoAttack, $01
0008536E E10C                       	smpsAlterNote       $0C
00085370 E701                       	dc.b	smpsNoAttack, $01
00085372 E108                       	smpsAlterNote       $08
00085374 E701                       	dc.b	smpsNoAttack, $01
00085376 E105                       	smpsAlterNote       $05
00085378 E701                       	dc.b	smpsNoAttack, $01
0008537A E101                       	smpsAlterNote       $01
0008537C E701                       	dc.b	smpsNoAttack, $01
0008537E E105                       	smpsAlterNote       $05
00085380 E701                       	dc.b	smpsNoAttack, $01
00085382 E10B                       	smpsAlterNote       $0B
00085384 E701                       	dc.b	smpsNoAttack, $01
00085386 E10C                       	smpsAlterNote       $0C
00085388 E701                       	dc.b	smpsNoAttack, $01
0008538A E108                       	smpsAlterNote       $08
0008538C E701                       	dc.b	smpsNoAttack, $01
0008538E E102                       	smpsAlterNote       $02
00085390 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085394 E105                       	smpsAlterNote       $05
00085396 E701                       	dc.b	smpsNoAttack, $01
00085398 E10B                       	smpsAlterNote       $0B
0008539A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008539E E105                       	smpsAlterNote       $05
000853A0 E701                       	dc.b	smpsNoAttack, $01
000853A2 E102                       	smpsAlterNote       $02
000853A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853A8 E108                       	smpsAlterNote       $08
000853AA E701                       	dc.b	smpsNoAttack, $01
000853AC E10C                       	smpsAlterNote       $0C
000853AE E701                       	dc.b	smpsNoAttack, $01
000853B0 E10B                       	smpsAlterNote       $0B
000853B2 E701                       	dc.b	smpsNoAttack, $01
000853B4 E105                       	smpsAlterNote       $05
000853B6 E701                       	dc.b	smpsNoAttack, $01
000853B8 E101                       	smpsAlterNote       $01
000853BA E701                       	dc.b	smpsNoAttack, $01
000853BC E105                       	smpsAlterNote       $05
000853BE E701                       	dc.b	smpsNoAttack, $01
000853C0 E108                       	smpsAlterNote       $08
000853C2 E701                       	dc.b	smpsNoAttack, $01
000853C4 E10C                       	smpsAlterNote       $0C
000853C6 E701                       	dc.b	smpsNoAttack, $01
000853C8 E108                       	smpsAlterNote       $08
000853CA E701                       	dc.b	smpsNoAttack, $01
000853CC E102                       	smpsAlterNote       $02
000853CE E701                       	dc.b	smpsNoAttack, $01
000853D0 E101                       	smpsAlterNote       $01
000853D2 E701                       	dc.b	smpsNoAttack, $01
000853D4 E105                       	smpsAlterNote       $05
000853D6 E701                       	dc.b	smpsNoAttack, $01
000853D8 E10B                       	smpsAlterNote       $0B
000853DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853DE E108                       	smpsAlterNote       $08
000853E0 E701                       	dc.b	smpsNoAttack, $01
000853E2 E102                       	smpsAlterNote       $02
000853E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853E8 E108                       	smpsAlterNote       $08
000853EA E701                       	dc.b	smpsNoAttack, $01
000853EC E10B                       	smpsAlterNote       $0B
000853EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853F2 E105                       	smpsAlterNote       $05
000853F4 E701                       	dc.b	smpsNoAttack, $01
000853F6 E102                       	smpsAlterNote       $02
000853F8 8001                       	dc.b	nRst, $01
000853FA E107                       	smpsAlterNote       $07
000853FC BF01 8001                  	dc.b	nD5, $01, nRst, $01
00085400 E108                       	smpsAlterNote       $08
00085402 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00085406 E102                       	smpsAlterNote       $02
00085408 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008540C E108                       	smpsAlterNote       $08
0008540E E701                       	dc.b	smpsNoAttack, $01
00085410 E10B                       	smpsAlterNote       $0B
00085412 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085416 E105                       	smpsAlterNote       $05
00085418 E701                       	dc.b	smpsNoAttack, $01
0008541A E101                       	smpsAlterNote       $01
0008541C E701                       	dc.b	smpsNoAttack, $01
0008541E E102                       	smpsAlterNote       $02
00085420 E701                       	dc.b	smpsNoAttack, $01
00085422 E108                       	smpsAlterNote       $08
00085424 E701                       	dc.b	smpsNoAttack, $01
00085426 E10C                       	smpsAlterNote       $0C
00085428 E701                       	dc.b	smpsNoAttack, $01
0008542A E108                       	smpsAlterNote       $08
0008542C E701                       	dc.b	smpsNoAttack, $01
0008542E E105                       	smpsAlterNote       $05
00085430 E701                       	dc.b	smpsNoAttack, $01
00085432 E101                       	smpsAlterNote       $01
00085434 E701                       	dc.b	smpsNoAttack, $01
00085436 E105                       	smpsAlterNote       $05
00085438 E701                       	dc.b	smpsNoAttack, $01
0008543A E10B                       	smpsAlterNote       $0B
0008543C E701                       	dc.b	smpsNoAttack, $01
0008543E E10C                       	smpsAlterNote       $0C
00085440 E701                       	dc.b	smpsNoAttack, $01
00085442 E108                       	smpsAlterNote       $08
00085444 E701                       	dc.b	smpsNoAttack, $01
00085446 E102                       	smpsAlterNote       $02
00085448 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008544C E105                       	smpsAlterNote       $05
0008544E E701                       	dc.b	smpsNoAttack, $01
00085450 E10B                       	smpsAlterNote       $0B
00085452 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085456 E105                       	smpsAlterNote       $05
00085458 E701                       	dc.b	smpsNoAttack, $01
0008545A E102                       	smpsAlterNote       $02
0008545C E701                       	dc.b	smpsNoAttack, $01
0008545E E109                       	smpsAlterNote       $09
00085460 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00085464 E108                       	smpsAlterNote       $08
00085466 C10D                       	dc.b	nE5, $0D
00085468 E105                       	smpsAlterNote       $05
0008546A E701                       	dc.b	smpsNoAttack, $01
0008546C E101                       	smpsAlterNote       $01
0008546E E701                       	dc.b	smpsNoAttack, $01
00085470 E102                       	smpsAlterNote       $02
00085472 E701                       	dc.b	smpsNoAttack, $01
00085474 E108                       	smpsAlterNote       $08
00085476 E701                       	dc.b	smpsNoAttack, $01
00085478 E10C                       	smpsAlterNote       $0C
0008547A E701                       	dc.b	smpsNoAttack, $01
0008547C E108                       	smpsAlterNote       $08
0008547E E701                       	dc.b	smpsNoAttack, $01
00085480 E105                       	smpsAlterNote       $05
00085482 E701                       	dc.b	smpsNoAttack, $01
00085484 E101                       	smpsAlterNote       $01
00085486 E701                       	dc.b	smpsNoAttack, $01
00085488 E105                       	smpsAlterNote       $05
0008548A E701                       	dc.b	smpsNoAttack, $01
0008548C E10B                       	smpsAlterNote       $0B
0008548E E701                       	dc.b	smpsNoAttack, $01
00085490 E10C                       	smpsAlterNote       $0C
00085492 E701                       	dc.b	smpsNoAttack, $01
00085494 E108                       	smpsAlterNote       $08
00085496 E701                       	dc.b	smpsNoAttack, $01
00085498 E102                       	smpsAlterNote       $02
0008549A E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
000854A2 E10B                       	smpsAlterNote       $0B
000854A4 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000854A8 E10C                       	smpsAlterNote       $0C
000854AA BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000854AE E10B                       	smpsAlterNote       $0B
000854B0 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000854B6 E107                       	smpsAlterNote       $07
000854B8 BF03                       	dc.b	nD5, $03
000854BA E108                       	smpsAlterNote       $08
000854BC C103 8001                  	dc.b	nE5, $03, nRst, $01
000854C0 E109                       	smpsAlterNote       $09
000854C2 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000854C8 E10B                       	smpsAlterNote       $0B
000854CA C606 8001                  	dc.b	nA5, $06, nRst, $01
000854CE E107                       	smpsAlterNote       $07
000854D0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000854D4 E106                       	smpsAlterNote       $06
000854D6 C90D                       	dc.b	nC6, $0D
000854D8 E103                       	smpsAlterNote       $03
000854DA E701                       	dc.b	smpsNoAttack, $01
000854DC E1FF                       	smpsAlterNote       $FF
000854DE E701                       	dc.b	smpsNoAttack, $01
000854E0 E103                       	smpsAlterNote       $03
000854E2 E701                       	dc.b	smpsNoAttack, $01
000854E4 E109                       	smpsAlterNote       $09
000854E6 E701                       	dc.b	smpsNoAttack, $01
000854E8 E10A                       	smpsAlterNote       $0A
000854EA E701                       	dc.b	smpsNoAttack, $01
000854EC E106                       	smpsAlterNote       $06
000854EE E701                       	dc.b	smpsNoAttack, $01
000854F0 E100                       	smpsAlterNote       $00
000854F2 E701                       	dc.b	smpsNoAttack, $01
000854F4 E10C                       	smpsAlterNote       $0C
000854F6 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000854FA E10B                       	smpsAlterNote       $0B
000854FC C603                       	dc.b	nA5, $03
000854FE E109                       	smpsAlterNote       $09
00085500 C403 8001                  	dc.b	nG5, $03, nRst, $01
00085504 E10B                       	smpsAlterNote       $0B
00085506 C60D                       	dc.b	nA5, $0D
00085508 E105                       	smpsAlterNote       $05
0008550A E701                       	dc.b	smpsNoAttack, $01
0008550C E104                       	smpsAlterNote       $04
0008550E E701                       	dc.b	smpsNoAttack, $01
00085510 E108                       	smpsAlterNote       $08
00085512 E701                       	dc.b	smpsNoAttack, $01
00085514 E10E                       	smpsAlterNote       $0E
00085516 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008551A E10B                       	smpsAlterNote       $0B
0008551C E701                       	dc.b	smpsNoAttack, $01
0008551E E105                       	smpsAlterNote       $05
00085520 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085524 E10B                       	smpsAlterNote       $0B
00085526 E701                       	dc.b	smpsNoAttack, $01
00085528 E10E                       	smpsAlterNote       $0E
0008552A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008552E E108                       	smpsAlterNote       $08
00085530 E701                       	dc.b	smpsNoAttack, $01
00085532 E104                       	smpsAlterNote       $04
00085534 E701                       	dc.b	smpsNoAttack, $01
00085536 E105                       	smpsAlterNote       $05
00085538 E701                       	dc.b	smpsNoAttack, $01
0008553A E10B                       	smpsAlterNote       $0B
0008553C E701                       	dc.b	smpsNoAttack, $01
0008553E E10F                       	smpsAlterNote       $0F
00085540 E701                       	dc.b	smpsNoAttack, $01
00085542 E10B                       	smpsAlterNote       $0B
00085544 E701                       	dc.b	smpsNoAttack, $01
00085546 E108                       	smpsAlterNote       $08
00085548 E701                       	dc.b	smpsNoAttack, $01
0008554A E104                       	smpsAlterNote       $04
0008554C E701                       	dc.b	smpsNoAttack, $01
0008554E E108                       	smpsAlterNote       $08
00085550 E701                       	dc.b	smpsNoAttack, $01
00085552 E10E                       	smpsAlterNote       $0E
00085554 E701                       	dc.b	smpsNoAttack, $01
00085556 E10F                       	smpsAlterNote       $0F
00085558 E701                       	dc.b	smpsNoAttack, $01
0008555A E10B                       	smpsAlterNote       $0B
0008555C E701                       	dc.b	smpsNoAttack, $01
0008555E E105                       	smpsAlterNote       $05
00085560 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085564 E108                       	smpsAlterNote       $08
00085566 E701                       	dc.b	smpsNoAttack, $01
00085568 E10E                       	smpsAlterNote       $0E
0008556A E701                       	dc.b	smpsNoAttack, $01
0008556C E10F                       	smpsAlterNote       $0F
0008556E 800F                       	dc.b	nRst, $0F
00085570 E107                       	smpsAlterNote       $07
00085572 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00085576 E108                       	smpsAlterNote       $08
00085578 C103                       	dc.b	nE5, $03
0008557A E109                       	smpsAlterNote       $09
0008557C C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00085582 E10B                       	smpsAlterNote       $0B
00085584 C607                       	dc.b	nA5, $07
00085586 E107                       	smpsAlterNote       $07
00085588 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008558C E106                       	smpsAlterNote       $06
0008558E C90D                       	dc.b	nC6, $0D
00085590 E107                       	smpsAlterNote       $07
00085592 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00085596 E10C                       	smpsAlterNote       $0C
00085598 C704                       	dc.b	nBb5, $04
0008559A E10B                       	smpsAlterNote       $0B
0008559C C604 8001                  	dc.b	nA5, $04, nRst, $01
000855A0 E109                       	smpsAlterNote       $09
000855A2 C404                       	dc.b	nG5, $04
000855A4 E10B                       	smpsAlterNote       $0B
000855A6 C60D                       	dc.b	nA5, $0D
000855A8 E108                       	smpsAlterNote       $08
000855AA E701                       	dc.b	smpsNoAttack, $01
000855AC E105                       	smpsAlterNote       $05
000855AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855B2 E10B                       	smpsAlterNote       $0B
000855B4 E701                       	dc.b	smpsNoAttack, $01
000855B6 E10F                       	smpsAlterNote       $0F
000855B8 E701                       	dc.b	smpsNoAttack, $01
000855BA E10E                       	smpsAlterNote       $0E
000855BC E701                       	dc.b	smpsNoAttack, $01
000855BE E108                       	smpsAlterNote       $08
000855C0 E701                       	dc.b	smpsNoAttack, $01
000855C2 E104                       	smpsAlterNote       $04
000855C4 E701                       	dc.b	smpsNoAttack, $01
000855C6 E108                       	smpsAlterNote       $08
000855C8 E701                       	dc.b	smpsNoAttack, $01
000855CA E10B                       	smpsAlterNote       $0B
000855CC E701                       	dc.b	smpsNoAttack, $01
000855CE E10F                       	smpsAlterNote       $0F
000855D0 E701                       	dc.b	smpsNoAttack, $01
000855D2 E10B                       	smpsAlterNote       $0B
000855D4 E701                       	dc.b	smpsNoAttack, $01
000855D6 E105                       	smpsAlterNote       $05
000855D8 E701                       	dc.b	smpsNoAttack, $01
000855DA E104                       	smpsAlterNote       $04
000855DC E701                       	dc.b	smpsNoAttack, $01
000855DE E108                       	smpsAlterNote       $08
000855E0 E701                       	dc.b	smpsNoAttack, $01
000855E2 E10E                       	smpsAlterNote       $0E
000855E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855E8 E10B                       	smpsAlterNote       $0B
000855EA E701                       	dc.b	smpsNoAttack, $01
000855EC E105                       	smpsAlterNote       $05
000855EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855F2 E10B                       	smpsAlterNote       $0B
000855F4 E701                       	dc.b	smpsNoAttack, $01
000855F6 E10E                       	smpsAlterNote       $0E
000855F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855FC E108                       	smpsAlterNote       $08
000855FE E701                       	dc.b	smpsNoAttack, $01
00085600 E105                       	smpsAlterNote       $05
00085602 8001                       	dc.b	nRst, $01
00085604 E109                       	smpsAlterNote       $09
00085606 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008560A E10B                       	smpsAlterNote       $0B
0008560C C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00085614 E109                       	smpsAlterNote       $09
00085616 C404                       	dc.b	nG5, $04
00085618 E10B                       	smpsAlterNote       $0B
0008561A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008561E E107                       	smpsAlterNote       $07
00085620 BF0D                       	dc.b	nD5, $0D
00085622 E101                       	smpsAlterNote       $01
00085624 E701                       	dc.b	smpsNoAttack, $01
00085626 E100                       	smpsAlterNote       $00
00085628 E701                       	dc.b	smpsNoAttack, $01
0008562A E104                       	smpsAlterNote       $04
0008562C E701                       	dc.b	smpsNoAttack, $01
0008562E E10A                       	smpsAlterNote       $0A
00085630 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085634 E107                       	smpsAlterNote       $07
00085636 E701                       	dc.b	smpsNoAttack, $01
00085638 E101                       	smpsAlterNote       $01
0008563A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008563E E107                       	smpsAlterNote       $07
00085640 E701                       	dc.b	smpsNoAttack, $01
00085642 E10A                       	smpsAlterNote       $0A
00085644 E701                       	dc.b	smpsNoAttack, $01
00085646 E10B                       	smpsAlterNote       $0B
00085648 8001                       	dc.b	nRst, $01
0008564A E108                       	smpsAlterNote       $08
0008564C 8001                       	dc.b	nRst, $01
0008564E E109                       	smpsAlterNote       $09
00085650 8001 C401                  	dc.b	nRst, $01, nG5, $01
00085654 E10B                       	smpsAlterNote       $0B
00085656 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008565E E108                       	smpsAlterNote       $08
00085660 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00085664 E109                       	smpsAlterNote       $09
00085666 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008566A E108                       	smpsAlterNote       $08
0008566C CD02 8001                  	dc.b	nE6, $02, nRst, $01
00085670 E106                       	smpsAlterNote       $06
00085672 C903                       	dc.b	nC6, $03
00085674 E109                       	smpsAlterNote       $09
00085676 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008567A E10C                       	smpsAlterNote       $0C
0008567C C70D                       	dc.b	nBb5, $0D
0008567E E109                       	smpsAlterNote       $09
00085680 E701                       	dc.b	smpsNoAttack, $01
00085682 E105                       	smpsAlterNote       $05
00085684 E701                       	dc.b	smpsNoAttack, $01
00085686 E109                       	smpsAlterNote       $09
00085688 E701                       	dc.b	smpsNoAttack, $01
0008568A E10F                       	smpsAlterNote       $0F
0008568C E701                       	dc.b	smpsNoAttack, $01
0008568E E110                       	smpsAlterNote       $10
00085690 E701                       	dc.b	smpsNoAttack, $01
00085692 E10C                       	smpsAlterNote       $0C
00085694 E701                       	dc.b	smpsNoAttack, $01
00085696 E106                       	smpsAlterNote       $06
00085698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008569C E109                       	smpsAlterNote       $09
0008569E E701                       	dc.b	smpsNoAttack, $01
000856A0 E10F                       	smpsAlterNote       $0F
000856A2 E701                       	dc.b	smpsNoAttack, $01
000856A4 E110                       	smpsAlterNote       $10
000856A6 8001                       	dc.b	nRst, $01
000856A8 E10B                       	smpsAlterNote       $0B
000856AA C606 8001                  	dc.b	nA5, $06, nRst, $01
000856AE E109                       	smpsAlterNote       $09
000856B0 C40D                       	dc.b	nG5, $0D
000856B2 E103                       	smpsAlterNote       $03
000856B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856B8 E106                       	smpsAlterNote       $06
000856BA E701                       	dc.b	smpsNoAttack, $01
000856BC E10C                       	smpsAlterNote       $0C
000856BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856C2 E106                       	smpsAlterNote       $06
000856C4 E701                       	dc.b	smpsNoAttack, $01
000856C6 E103                       	smpsAlterNote       $03
000856C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856CC E109                       	smpsAlterNote       $09
000856CE E701                       	dc.b	smpsNoAttack, $01
000856D0 E10D                       	smpsAlterNote       $0D
000856D2 E701                       	dc.b	smpsNoAttack, $01
000856D4 E10C                       	smpsAlterNote       $0C
000856D6 E701                       	dc.b	smpsNoAttack, $01
000856D8 E106                       	smpsAlterNote       $06
000856DA E701                       	dc.b	smpsNoAttack, $01
000856DC E102                       	smpsAlterNote       $02
000856DE E701                       	dc.b	smpsNoAttack, $01
000856E0 E103                       	smpsAlterNote       $03
000856E2 8001                       	dc.b	nRst, $01
000856E4 E10B                       	smpsAlterNote       $0B
000856E6 C60D                       	dc.b	nA5, $0D
000856E8 E108                       	smpsAlterNote       $08
000856EA E701                       	dc.b	smpsNoAttack, $01
000856EC E104                       	smpsAlterNote       $04
000856EE E701                       	dc.b	smpsNoAttack, $01
000856F0 E108                       	smpsAlterNote       $08
000856F2 E701                       	dc.b	smpsNoAttack, $01
000856F4 E10B                       	smpsAlterNote       $0B
000856F6 E701                       	dc.b	smpsNoAttack, $01
000856F8 E10F                       	smpsAlterNote       $0F
000856FA E701                       	dc.b	smpsNoAttack, $01
000856FC E10B                       	smpsAlterNote       $0B
000856FE E701                       	dc.b	smpsNoAttack, $01
00085700 E105                       	smpsAlterNote       $05
00085702 E701                       	dc.b	smpsNoAttack, $01
00085704 E104                       	smpsAlterNote       $04
00085706 E701                       	dc.b	smpsNoAttack, $01
00085708 E108                       	smpsAlterNote       $08
0008570A E701                       	dc.b	smpsNoAttack, $01
0008570C E10E                       	smpsAlterNote       $0E
0008570E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085712 E10B                       	smpsAlterNote       $0B
00085714 E701                       	dc.b	smpsNoAttack, $01
00085716 E105                       	smpsAlterNote       $05
00085718 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008571C E10C                       	smpsAlterNote       $0C
0008571E C70E                       	dc.b	nBb5, $0E
00085720 E106                       	smpsAlterNote       $06
00085722 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085726 E10C                       	smpsAlterNote       $0C
00085728 E701                       	dc.b	smpsNoAttack, $01
0008572A E10F                       	smpsAlterNote       $0F
0008572C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085730 E109                       	smpsAlterNote       $09
00085732 E701                       	dc.b	smpsNoAttack, $01
00085734 E105                       	smpsAlterNote       $05
00085736 E701                       	dc.b	smpsNoAttack, $01
00085738 E106                       	smpsAlterNote       $06
0008573A E701                       	dc.b	smpsNoAttack, $01
0008573C E10C                       	smpsAlterNote       $0C
0008573E E701                       	dc.b	smpsNoAttack, $01
00085740 E110                       	smpsAlterNote       $10
00085742 E701                       	dc.b	smpsNoAttack, $01
00085744 E10C                       	smpsAlterNote       $0C
00085746 E701                       	dc.b	smpsNoAttack, $01
00085748 E109                       	smpsAlterNote       $09
0008574A E701                       	dc.b	smpsNoAttack, $01
0008574C E105                       	smpsAlterNote       $05
0008574E E701                       	dc.b	smpsNoAttack, $01
00085750 E106                       	smpsAlterNote       $06
00085752 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00085756 E107                       	smpsAlterNote       $07
00085758 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008575D E108                       	smpsAlterNote       $08
0008575F CD0D                       	dc.b	nE6, $0D
00085761 E107                       	smpsAlterNote       $07
00085763 CB0D                       	dc.b	nD6, $0D
00085765 E104                       	smpsAlterNote       $04
00085767 E701                       	dc.b	smpsNoAttack, $01
00085769 E100                       	smpsAlterNote       $00
0008576B E701                       	dc.b	smpsNoAttack, $01
0008576D E101                       	smpsAlterNote       $01
0008576F E701                       	dc.b	smpsNoAttack, $01
00085771 E107                       	smpsAlterNote       $07
00085773 E701                       	dc.b	smpsNoAttack, $01
00085775 E10B                       	smpsAlterNote       $0B
00085777 E701                       	dc.b	smpsNoAttack, $01
00085779 E107                       	smpsAlterNote       $07
0008577B E701                       	dc.b	smpsNoAttack, $01
0008577D E104                       	smpsAlterNote       $04
0008577F E701                       	dc.b	smpsNoAttack, $01
00085781 E100                       	smpsAlterNote       $00
00085783 E701                       	dc.b	smpsNoAttack, $01
00085785 E104                       	smpsAlterNote       $04
00085787 E701                       	dc.b	smpsNoAttack, $01
00085789 E10A                       	smpsAlterNote       $0A
0008578B E701                       	dc.b	smpsNoAttack, $01
0008578D E10B                       	smpsAlterNote       $0B
0008578F E701                       	dc.b	smpsNoAttack, $01
00085791 E108                       	smpsAlterNote       $08
00085793 CC0D                       	dc.b	nEb6, $0D
00085795 E105                       	smpsAlterNote       $05
00085797 E701                       	dc.b	smpsNoAttack, $01
00085799 E101                       	smpsAlterNote       $01
0008579B E701                       	dc.b	smpsNoAttack, $01
0008579D E102                       	smpsAlterNote       $02
0008579F E701                       	dc.b	smpsNoAttack, $01
000857A1 E108                       	smpsAlterNote       $08
000857A3 E701                       	dc.b	smpsNoAttack, $01
000857A5 E106                       	smpsAlterNote       $06
000857A7 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000857B3 8001                       	dc.b	nRst, $01
000857B5 E107                       	smpsAlterNote       $07
000857B7 CB0D                       	dc.b	nD6, $0D
000857B9 E104                       	smpsAlterNote       $04
000857BB E701                       	dc.b	smpsNoAttack, $01
000857BD E100                       	smpsAlterNote       $00
000857BF E701                       	dc.b	smpsNoAttack, $01
000857C1 E104                       	smpsAlterNote       $04
000857C3 E701                       	dc.b	smpsNoAttack, $01
000857C5 E107                       	smpsAlterNote       $07
000857C7 E701                       	dc.b	smpsNoAttack, $01
000857C9 E10B                       	smpsAlterNote       $0B
000857CB E701                       	dc.b	smpsNoAttack, $01
000857CD E107                       	smpsAlterNote       $07
000857CF E701                       	dc.b	smpsNoAttack, $01
000857D1 E101                       	smpsAlterNote       $01
000857D3 E701                       	dc.b	smpsNoAttack, $01
000857D5 E100                       	smpsAlterNote       $00
000857D7 E701                       	dc.b	smpsNoAttack, $01
000857D9 E104                       	smpsAlterNote       $04
000857DB E701                       	dc.b	smpsNoAttack, $01
000857DD E10A                       	smpsAlterNote       $0A
000857DF E701                       	dc.b	smpsNoAttack, $01
000857E1 E10B                       	smpsAlterNote       $0B
000857E3 8001                       	dc.b	nRst, $01
000857E5 E109                       	smpsAlterNote       $09
000857E7 CE0A                       	dc.b	nF6, $0A
000857E9 E108                       	smpsAlterNote       $08
000857EB CC07                       	dc.b	nEb6, $07
000857ED E106                       	smpsAlterNote       $06
000857EF C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
000857FB E107                       	smpsAlterNote       $07
000857FD CB0D                       	dc.b	nD6, $0D
000857FF E101                       	smpsAlterNote       $01
00085801 E701                       	dc.b	smpsNoAttack, $01
00085803 E100                       	smpsAlterNote       $00
00085805 E701                       	dc.b	smpsNoAttack, $01
00085807 E104                       	smpsAlterNote       $04
00085809 E701                       	dc.b	smpsNoAttack, $01
0008580B E10A                       	smpsAlterNote       $0A
0008580D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085811 E107                       	smpsAlterNote       $07
00085813 E701                       	dc.b	smpsNoAttack, $01
00085815 E101                       	smpsAlterNote       $01
00085817 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008581B E107                       	smpsAlterNote       $07
0008581D E701                       	dc.b	smpsNoAttack, $01
0008581F E10A                       	smpsAlterNote       $0A
00085821 E701                       	dc.b	smpsNoAttack, $01
00085823 E10B                       	smpsAlterNote       $0B
00085825 8001                       	dc.b	nRst, $01
00085827 E108                       	smpsAlterNote       $08
00085829 CC0D                       	dc.b	nEb6, $0D
0008582B E102                       	smpsAlterNote       $02
0008582D E701                       	dc.b	smpsNoAttack, $01
0008582F E101                       	smpsAlterNote       $01
00085831 E701                       	dc.b	smpsNoAttack, $01
00085833 E105                       	smpsAlterNote       $05
00085835 E701                       	dc.b	smpsNoAttack, $01
00085837 E108                       	smpsAlterNote       $08
00085839 8001                       	dc.b	nRst, $01
0008583B E106                       	smpsAlterNote       $06
0008583D C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00085849 8001                       	dc.b	nRst, $01
0008584B E107                       	smpsAlterNote       $07
0008584D CB0D                       	dc.b	nD6, $0D
0008584F E101                       	smpsAlterNote       $01
00085851 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085855 E104                       	smpsAlterNote       $04
00085857 E701                       	dc.b	smpsNoAttack, $01
00085859 E10A                       	smpsAlterNote       $0A
0008585B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008585F E104                       	smpsAlterNote       $04
00085861 E701                       	dc.b	smpsNoAttack, $01
00085863 E101                       	smpsAlterNote       $01
00085865 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085869 E107                       	smpsAlterNote       $07
0008586B E701                       	dc.b	smpsNoAttack, $01
0008586D E10B                       	smpsAlterNote       $0B
0008586F E701                       	dc.b	smpsNoAttack, $01
00085871 E10A                       	smpsAlterNote       $0A
00085873 E701                       	dc.b	smpsNoAttack, $01
00085875 E104                       	smpsAlterNote       $04
00085877 E701                       	dc.b	smpsNoAttack, $01
00085879 E100                       	smpsAlterNote       $00
0008587B E701                       	dc.b	smpsNoAttack, $01
0008587D E101                       	smpsAlterNote       $01
0008587F 801C                       	dc.b	nRst, $1C
00085883 E107                       	smpsAlterNote       $07
00085885 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00085889 E603                       	smpsAlterVol        $03
0008588B F6F1 AD                    	smpsJump            music84_Jump03
0008588E                            
0008588E                            ; FM3 Data
0008588E                            music84_FM3:
0008588E E0C0                       	smpsPan             panCenter, $00
00085892 E109                       	smpsAlterNote       $09
00085894 C203 8007                  	dc.b	nF5, $03, nRst, $07
00085898 E108                       	smpsAlterNote       $08
0008589A C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008589E E10B                       	smpsAlterNote       $0B
000858A0 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000858A6 E040                       	smpsPan             panRight, $00
000858A8 E110                       	smpsAlterNote       $10
000858AA E6F9                       	smpsAlterVol        $F9
000858AC C702 8001                  	dc.b	nBb5, $02, nRst, $01
000858B0 E10F                       	smpsAlterNote       $0F
000858B2 C603                       	dc.b	nA5, $03
000858B4 E10D                       	smpsAlterNote       $0D
000858B6 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000858BC E10C                       	smpsAlterNote       $0C
000858BE C103 8001                  	dc.b	nE5, $03, nRst, $01
000858C2 E10A                       	smpsAlterNote       $0A
000858C4 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000858C8 E10F                       	smpsAlterNote       $0F
000858CA BA01 8001                  	dc.b	nA4, $01, nRst, $01
000858CE E0C0                       	smpsPan             panCenter, $00
000858D2 E109                       	smpsAlterNote       $09
000858D4 E609                       	smpsAlterVol        $09
000858D6 B603                       	dc.b	nF4, $03
000858D8                            
000858D8                            music84_Jump02:
000858D8 E70A                       	dc.b	smpsNoAttack, $0A
000858DA E103                       	smpsAlterNote       $03
000858DC E701                       	dc.b	smpsNoAttack, $01
000858DE E102                       	smpsAlterNote       $02
000858E0 E701                       	dc.b	smpsNoAttack, $01
000858E2 E106                       	smpsAlterNote       $06
000858E4 E701                       	dc.b	smpsNoAttack, $01
000858E6 E10C                       	smpsAlterNote       $0C
000858E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858EC E109                       	smpsAlterNote       $09
000858EE E701                       	dc.b	smpsNoAttack, $01
000858F0 E103                       	smpsAlterNote       $03
000858F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858F6 E109                       	smpsAlterNote       $09
000858F8 E701                       	dc.b	smpsNoAttack, $01
000858FA E10C                       	smpsAlterNote       $0C
000858FC E701                       	dc.b	smpsNoAttack, $01
000858FE E10D                       	smpsAlterNote       $0D
00085900 8001                       	dc.b	nRst, $01
00085902 E109                       	smpsAlterNote       $09
00085904 B80D                       	dc.b	nG4, $0D
00085906 E103                       	smpsAlterNote       $03
00085908 E701                       	dc.b	smpsNoAttack, $01
0008590A E102                       	smpsAlterNote       $02
0008590C E701                       	dc.b	smpsNoAttack, $01
0008590E E106                       	smpsAlterNote       $06
00085910 E701                       	dc.b	smpsNoAttack, $01
00085912 E10C                       	smpsAlterNote       $0C
00085914 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085918 E109                       	smpsAlterNote       $09
0008591A E701                       	dc.b	smpsNoAttack, $01
0008591C E103                       	smpsAlterNote       $03
0008591E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085922 E109                       	smpsAlterNote       $09
00085924 E701                       	dc.b	smpsNoAttack, $01
00085926 E10C                       	smpsAlterNote       $0C
00085928 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008592C E106                       	smpsAlterNote       $06
0008592E E701                       	dc.b	smpsNoAttack, $01
00085930 E102                       	smpsAlterNote       $02
00085932 E701                       	dc.b	smpsNoAttack, $01
00085934 E103                       	smpsAlterNote       $03
00085936 E701                       	dc.b	smpsNoAttack, $01
00085938 E109                       	smpsAlterNote       $09
0008593A E701                       	dc.b	smpsNoAttack, $01
0008593C E10D                       	smpsAlterNote       $0D
0008593E E701                       	dc.b	smpsNoAttack, $01
00085940 E109                       	smpsAlterNote       $09
00085942 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085946 E10B                       	smpsAlterNote       $0B
00085948 BA0D                       	dc.b	nA4, $0D
0008594A E105                       	smpsAlterNote       $05
0008594C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085950 E108                       	smpsAlterNote       $08
00085952 E701                       	dc.b	smpsNoAttack, $01
00085954 E10E                       	smpsAlterNote       $0E
00085956 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008595A E108                       	smpsAlterNote       $08
0008595C E701                       	dc.b	smpsNoAttack, $01
0008595E E104                       	smpsAlterNote       $04
00085960 E701                       	dc.b	smpsNoAttack, $01
00085962 E105                       	smpsAlterNote       $05
00085964 E701                       	dc.b	smpsNoAttack, $01
00085966 E10B                       	smpsAlterNote       $0B
00085968 E701                       	dc.b	smpsNoAttack, $01
0008596A E10F                       	smpsAlterNote       $0F
0008596C E701                       	dc.b	smpsNoAttack, $01
0008596E E10B                       	smpsAlterNote       $0B
00085970 E701                       	dc.b	smpsNoAttack, $01
00085972 E108                       	smpsAlterNote       $08
00085974 E701                       	dc.b	smpsNoAttack, $01
00085976 E104                       	smpsAlterNote       $04
00085978 E701                       	dc.b	smpsNoAttack, $01
0008597A E108                       	smpsAlterNote       $08
0008597C E701                       	dc.b	smpsNoAttack, $01
0008597E E10E                       	smpsAlterNote       $0E
00085980 E701                       	dc.b	smpsNoAttack, $01
00085982 E10F                       	smpsAlterNote       $0F
00085984 E701                       	dc.b	smpsNoAttack, $01
00085986 E10B                       	smpsAlterNote       $0B
00085988 E701                       	dc.b	smpsNoAttack, $01
0008598A E105                       	smpsAlterNote       $05
0008598C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085990 E108                       	smpsAlterNote       $08
00085992 E701                       	dc.b	smpsNoAttack, $01
00085994 E10E                       	smpsAlterNote       $0E
00085996 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008599A E108                       	smpsAlterNote       $08
0008599C E701                       	dc.b	smpsNoAttack, $01
0008599E E105                       	smpsAlterNote       $05
000859A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859A4 E10B                       	smpsAlterNote       $0B
000859A6 E701                       	dc.b	smpsNoAttack, $01
000859A8 E10F                       	smpsAlterNote       $0F
000859AA E701                       	dc.b	smpsNoAttack, $01
000859AC E10E                       	smpsAlterNote       $0E
000859AE E701                       	dc.b	smpsNoAttack, $01
000859B0 E108                       	smpsAlterNote       $08
000859B2 E701                       	dc.b	smpsNoAttack, $01
000859B4 E104                       	smpsAlterNote       $04
000859B6 E701                       	dc.b	smpsNoAttack, $01
000859B8 E105                       	smpsAlterNote       $05
000859BA 8001                       	dc.b	nRst, $01
000859BC E108                       	smpsAlterNote       $08
000859BE B50A                       	dc.b	nE4, $0A
000859C0 E109                       	smpsAlterNote       $09
000859C2 B60D                       	dc.b	nF4, $0D
000859C4 E106                       	smpsAlterNote       $06
000859C6 E701                       	dc.b	smpsNoAttack, $01
000859C8 E103                       	smpsAlterNote       $03
000859CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859CE E109                       	smpsAlterNote       $09
000859D0 E701                       	dc.b	smpsNoAttack, $01
000859D2 E10D                       	smpsAlterNote       $0D
000859D4 E701                       	dc.b	smpsNoAttack, $01
000859D6 E10C                       	smpsAlterNote       $0C
000859D8 E701                       	dc.b	smpsNoAttack, $01
000859DA E106                       	smpsAlterNote       $06
000859DC E701                       	dc.b	smpsNoAttack, $01
000859DE E102                       	smpsAlterNote       $02
000859E0 E701                       	dc.b	smpsNoAttack, $01
000859E2 E106                       	smpsAlterNote       $06
000859E4 E701                       	dc.b	smpsNoAttack, $01
000859E6 E109                       	smpsAlterNote       $09
000859E8 E701                       	dc.b	smpsNoAttack, $01
000859EA E10D                       	smpsAlterNote       $0D
000859EC E701                       	dc.b	smpsNoAttack, $01
000859EE E109                       	smpsAlterNote       $09
000859F0 B80D                       	dc.b	nG4, $0D
000859F2 E106                       	smpsAlterNote       $06
000859F4 E701                       	dc.b	smpsNoAttack, $01
000859F6 E103                       	smpsAlterNote       $03
000859F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859FC E109                       	smpsAlterNote       $09
000859FE E701                       	dc.b	smpsNoAttack, $01
00085A00 E10D                       	smpsAlterNote       $0D
00085A02 E701                       	dc.b	smpsNoAttack, $01
00085A04 E10C                       	smpsAlterNote       $0C
00085A06 E701                       	dc.b	smpsNoAttack, $01
00085A08 E106                       	smpsAlterNote       $06
00085A0A E701                       	dc.b	smpsNoAttack, $01
00085A0C E102                       	smpsAlterNote       $02
00085A0E E701                       	dc.b	smpsNoAttack, $01
00085A10 E106                       	smpsAlterNote       $06
00085A12 E701                       	dc.b	smpsNoAttack, $01
00085A14 E109                       	smpsAlterNote       $09
00085A16 E701                       	dc.b	smpsNoAttack, $01
00085A18 E10D                       	smpsAlterNote       $0D
00085A1A E701                       	dc.b	smpsNoAttack, $01
00085A1C E109                       	smpsAlterNote       $09
00085A1E E701                       	dc.b	smpsNoAttack, $01
00085A20 E103                       	smpsAlterNote       $03
00085A22 E701                       	dc.b	smpsNoAttack, $01
00085A24 E102                       	smpsAlterNote       $02
00085A26 E701                       	dc.b	smpsNoAttack, $01
00085A28 E106                       	smpsAlterNote       $06
00085A2A E701                       	dc.b	smpsNoAttack, $01
00085A2C E10C                       	smpsAlterNote       $0C
00085A2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A32 E109                       	smpsAlterNote       $09
00085A34 E701                       	dc.b	smpsNoAttack, $01
00085A36 E10B                       	smpsAlterNote       $0B
00085A38 BA0D                       	dc.b	nA4, $0D
00085A3A E108                       	smpsAlterNote       $08
00085A3C E701                       	dc.b	smpsNoAttack, $01
00085A3E E104                       	smpsAlterNote       $04
00085A40 E701                       	dc.b	smpsNoAttack, $01
00085A42 E108                       	smpsAlterNote       $08
00085A44 E701                       	dc.b	smpsNoAttack, $01
00085A46 E10B                       	smpsAlterNote       $0B
00085A48 E701                       	dc.b	smpsNoAttack, $01
00085A4A E10F                       	smpsAlterNote       $0F
00085A4C E701                       	dc.b	smpsNoAttack, $01
00085A4E E10B                       	smpsAlterNote       $0B
00085A50 E701                       	dc.b	smpsNoAttack, $01
00085A52 E105                       	smpsAlterNote       $05
00085A54 E701                       	dc.b	smpsNoAttack, $01
00085A56 E104                       	smpsAlterNote       $04
00085A58 E701                       	dc.b	smpsNoAttack, $01
00085A5A E108                       	smpsAlterNote       $08
00085A5C E701                       	dc.b	smpsNoAttack, $01
00085A5E E10E                       	smpsAlterNote       $0E
00085A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A64 E10B                       	smpsAlterNote       $0B
00085A66 E701                       	dc.b	smpsNoAttack, $01
00085A68 E105                       	smpsAlterNote       $05
00085A6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A6E E10B                       	smpsAlterNote       $0B
00085A70 E701                       	dc.b	smpsNoAttack, $01
00085A72 E10E                       	smpsAlterNote       $0E
00085A74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A78 E108                       	smpsAlterNote       $08
00085A7A E701                       	dc.b	smpsNoAttack, $01
00085A7C E104                       	smpsAlterNote       $04
00085A7E E701                       	dc.b	smpsNoAttack, $01
00085A80 E105                       	smpsAlterNote       $05
00085A82 E701                       	dc.b	smpsNoAttack, $01
00085A84 E10B                       	smpsAlterNote       $0B
00085A86 E701                       	dc.b	smpsNoAttack, $01
00085A88 E10F                       	smpsAlterNote       $0F
00085A8A E701                       	dc.b	smpsNoAttack, $01
00085A8C E10B                       	smpsAlterNote       $0B
00085A8E E701                       	dc.b	smpsNoAttack, $01
00085A90 E108                       	smpsAlterNote       $08
00085A92 E701                       	dc.b	smpsNoAttack, $01
00085A94 E105                       	smpsAlterNote       $05
00085A96 8001                       	dc.b	nRst, $01
00085A98 E109                       	smpsAlterNote       $09
00085A9A B609 8001                  	dc.b	nF4, $09, nRst, $01
00085A9E E108                       	smpsAlterNote       $08
00085AA0 B506 8001                  	dc.b	nE4, $06, nRst, $01
00085AA4 E107                       	smpsAlterNote       $07
00085AA6 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00085AAA E108                       	smpsAlterNote       $08
00085AAC B502 8001                  	dc.b	nE4, $02, nRst, $01
00085AB0 E109                       	smpsAlterNote       $09
00085AB2 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00085AB8 E10B                       	smpsAlterNote       $0B
00085ABA BA0D                       	dc.b	nA4, $0D
00085ABC E108                       	smpsAlterNote       $08
00085ABE E701                       	dc.b	smpsNoAttack, $01
00085AC0 E104                       	smpsAlterNote       $04
00085AC2 E701                       	dc.b	smpsNoAttack, $01
00085AC4 E108                       	smpsAlterNote       $08
00085AC6 E701                       	dc.b	smpsNoAttack, $01
00085AC8 E10E                       	smpsAlterNote       $0E
00085ACA E701                       	dc.b	smpsNoAttack, $01
00085ACC E10F                       	smpsAlterNote       $0F
00085ACE E701                       	dc.b	smpsNoAttack, $01
00085AD0 E10B                       	smpsAlterNote       $0B
00085AD2 E701                       	dc.b	smpsNoAttack, $01
00085AD4 E105                       	smpsAlterNote       $05
00085AD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085ADA E108                       	smpsAlterNote       $08
00085ADC E701                       	dc.b	smpsNoAttack, $01
00085ADE E10E                       	smpsAlterNote       $0E
00085AE0 E701                       	dc.b	smpsNoAttack, $01
00085AE2 E10F                       	smpsAlterNote       $0F
00085AE4 8001                       	dc.b	nRst, $01
00085AE6 E109                       	smpsAlterNote       $09
00085AE8 C20D                       	dc.b	nF5, $0D
00085AEA E103                       	smpsAlterNote       $03
00085AEC E701                       	dc.b	smpsNoAttack, $01
00085AEE E102                       	smpsAlterNote       $02
00085AF0 E701                       	dc.b	smpsNoAttack, $01
00085AF2 E106                       	smpsAlterNote       $06
00085AF4 E701                       	dc.b	smpsNoAttack, $01
00085AF6 E10C                       	smpsAlterNote       $0C
00085AF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AFC E109                       	smpsAlterNote       $09
00085AFE E701                       	dc.b	smpsNoAttack, $01
00085B00 E103                       	smpsAlterNote       $03
00085B02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B06 E109                       	smpsAlterNote       $09
00085B08 E701                       	dc.b	smpsNoAttack, $01
00085B0A E10C                       	smpsAlterNote       $0C
00085B0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B10 E106                       	smpsAlterNote       $06
00085B12 E701                       	dc.b	smpsNoAttack, $01
00085B14 E102                       	smpsAlterNote       $02
00085B16 E701                       	dc.b	smpsNoAttack, $01
00085B18 E103                       	smpsAlterNote       $03
00085B1A E701                       	dc.b	smpsNoAttack, $01
00085B1C E109                       	smpsAlterNote       $09
00085B1E E701                       	dc.b	smpsNoAttack, $01
00085B20 E10D                       	smpsAlterNote       $0D
00085B22 E701                       	dc.b	smpsNoAttack, $01
00085B24 E109                       	smpsAlterNote       $09
00085B26 E701                       	dc.b	smpsNoAttack, $01
00085B28 E106                       	smpsAlterNote       $06
00085B2A E701                       	dc.b	smpsNoAttack, $01
00085B2C E102                       	smpsAlterNote       $02
00085B2E E701                       	dc.b	smpsNoAttack, $01
00085B30 E106                       	smpsAlterNote       $06
00085B32 E701                       	dc.b	smpsNoAttack, $01
00085B34 E10C                       	smpsAlterNote       $0C
00085B36 E701                       	dc.b	smpsNoAttack, $01
00085B38 E10D                       	smpsAlterNote       $0D
00085B3A E701                       	dc.b	smpsNoAttack, $01
00085B3C E109                       	smpsAlterNote       $09
00085B3E E701                       	dc.b	smpsNoAttack, $01
00085B40 E103                       	smpsAlterNote       $03
00085B42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B46 E106                       	smpsAlterNote       $06
00085B48 E701                       	dc.b	smpsNoAttack, $01
00085B4A E10C                       	smpsAlterNote       $0C
00085B4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B50 E106                       	smpsAlterNote       $06
00085B52 E701                       	dc.b	smpsNoAttack, $01
00085B54 E103                       	smpsAlterNote       $03
00085B56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B5A E109                       	smpsAlterNote       $09
00085B5C E701                       	dc.b	smpsNoAttack, $01
00085B5E E10D                       	smpsAlterNote       $0D
00085B60 E701                       	dc.b	smpsNoAttack, $01
00085B62 E10C                       	smpsAlterNote       $0C
00085B64 E701                       	dc.b	smpsNoAttack, $01
00085B66 E106                       	smpsAlterNote       $06
00085B68 E701                       	dc.b	smpsNoAttack, $01
00085B6A E102                       	smpsAlterNote       $02
00085B6C E701                       	dc.b	smpsNoAttack, $01
00085B6E E106                       	smpsAlterNote       $06
00085B70 E701                       	dc.b	smpsNoAttack, $01
00085B72 E109                       	smpsAlterNote       $09
00085B74 E701                       	dc.b	smpsNoAttack, $01
00085B76 E10D                       	smpsAlterNote       $0D
00085B78 E701                       	dc.b	smpsNoAttack, $01
00085B7A E109                       	smpsAlterNote       $09
00085B7C E701                       	dc.b	smpsNoAttack, $01
00085B7E E103                       	smpsAlterNote       $03
00085B80 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085B84 E109                       	smpsAlterNote       $09
00085B86 C206                       	dc.b	nF5, $06
00085B88 E108                       	smpsAlterNote       $08
00085B8A C10E                       	dc.b	nE5, $0E
00085B8C E102                       	smpsAlterNote       $02
00085B8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B92 E108                       	smpsAlterNote       $08
00085B94 E701                       	dc.b	smpsNoAttack, $01
00085B96 E10B                       	smpsAlterNote       $0B
00085B98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B9C E105                       	smpsAlterNote       $05
00085B9E E701                       	dc.b	smpsNoAttack, $01
00085BA0 E101                       	smpsAlterNote       $01
00085BA2 E701                       	dc.b	smpsNoAttack, $01
00085BA4 E102                       	smpsAlterNote       $02
00085BA6 E701                       	dc.b	smpsNoAttack, $01
00085BA8 E108                       	smpsAlterNote       $08
00085BAA E701                       	dc.b	smpsNoAttack, $01
00085BAC E10C                       	smpsAlterNote       $0C
00085BAE E701                       	dc.b	smpsNoAttack, $01
00085BB0 E107                       	smpsAlterNote       $07
00085BB2 BF0E                       	dc.b	nD5, $0E
00085BB4 E101                       	smpsAlterNote       $01
00085BB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BBA E107                       	smpsAlterNote       $07
00085BBC E701                       	dc.b	smpsNoAttack, $01
00085BBE E10A                       	smpsAlterNote       $0A
00085BC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BC4 E104                       	smpsAlterNote       $04
00085BC6 E701                       	dc.b	smpsNoAttack, $01
00085BC8 E100                       	smpsAlterNote       $00
00085BCA E701                       	dc.b	smpsNoAttack, $01
00085BCC E104                       	smpsAlterNote       $04
00085BCE E701                       	dc.b	smpsNoAttack, $01
00085BD0 E107                       	smpsAlterNote       $07
00085BD2 E701                       	dc.b	smpsNoAttack, $01
00085BD4 E10B                       	smpsAlterNote       $0B
00085BD6 E701                       	dc.b	smpsNoAttack, $01
00085BD8 E107                       	smpsAlterNote       $07
00085BDA E701                       	dc.b	smpsNoAttack, $01
00085BDC E101                       	smpsAlterNote       $01
00085BDE E701                       	dc.b	smpsNoAttack, $01
00085BE0 E100                       	smpsAlterNote       $00
00085BE2 E701                       	dc.b	smpsNoAttack, $01
00085BE4 E104                       	smpsAlterNote       $04
00085BE6 E701                       	dc.b	smpsNoAttack, $01
00085BE8 E10A                       	smpsAlterNote       $0A
00085BEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BEE E107                       	smpsAlterNote       $07
00085BF0 E701                       	dc.b	smpsNoAttack, $01
00085BF2 E101                       	smpsAlterNote       $01
00085BF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BF8 E107                       	smpsAlterNote       $07
00085BFA E701                       	dc.b	smpsNoAttack, $01
00085BFC E10A                       	smpsAlterNote       $0A
00085BFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C02 E104                       	smpsAlterNote       $04
00085C04 E701                       	dc.b	smpsNoAttack, $01
00085C06 E100                       	smpsAlterNote       $00
00085C08 E701                       	dc.b	smpsNoAttack, $01
00085C0A E101                       	smpsAlterNote       $01
00085C0C E701                       	dc.b	smpsNoAttack, $01
00085C0E E107                       	smpsAlterNote       $07
00085C10 E701                       	dc.b	smpsNoAttack, $01
00085C12 E10B                       	smpsAlterNote       $0B
00085C14 E701                       	dc.b	smpsNoAttack, $01
00085C16 E107                       	smpsAlterNote       $07
00085C18 E701                       	dc.b	smpsNoAttack, $01
00085C1A E104                       	smpsAlterNote       $04
00085C1C E701                       	dc.b	smpsNoAttack, $01
00085C1E E100                       	smpsAlterNote       $00
00085C20 E701                       	dc.b	smpsNoAttack, $01
00085C22 E104                       	smpsAlterNote       $04
00085C24 E701                       	dc.b	smpsNoAttack, $01
00085C26 E10A                       	smpsAlterNote       $0A
00085C28 E701                       	dc.b	smpsNoAttack, $01
00085C2A E10B                       	smpsAlterNote       $0B
00085C2C E701                       	dc.b	smpsNoAttack, $01
00085C2E E107                       	smpsAlterNote       $07
00085C30 E701                       	dc.b	smpsNoAttack, $01
00085C32 E101                       	smpsAlterNote       $01
00085C34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C38 E104                       	smpsAlterNote       $04
00085C3A E701                       	dc.b	smpsNoAttack, $01
00085C3C E10A                       	smpsAlterNote       $0A
00085C3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C42 E104                       	smpsAlterNote       $04
00085C44 E701                       	dc.b	smpsNoAttack, $01
00085C46 E101                       	smpsAlterNote       $01
00085C48 E701                       	dc.b	smpsNoAttack, $01
00085C4C E107                       	smpsAlterNote       $07
00085C4E E6FF                       	smpsAlterVol        $FF
00085C50 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00085C5C 8004                       	dc.b	nRst, $04
00085C60 E109                       	smpsAlterNote       $09
00085C62 E602                       	smpsAlterVol        $02
00085C64 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00085C6A E108                       	smpsAlterNote       $08
00085C6C B502 8001                  	dc.b	nE4, $02, nRst, $01
00085C70 E109                       	smpsAlterNote       $09
00085C72 B60D                       	dc.b	nF4, $0D
00085C74 E106                       	smpsAlterNote       $06
00085C76 E701                       	dc.b	smpsNoAttack, $01
00085C78 E102                       	smpsAlterNote       $02
00085C7A E701                       	dc.b	smpsNoAttack, $01
00085C7C E106                       	smpsAlterNote       $06
00085C7E E701                       	dc.b	smpsNoAttack, $01
00085C80 E109                       	smpsAlterNote       $09
00085C82 E701                       	dc.b	smpsNoAttack, $01
00085C84 E10D                       	smpsAlterNote       $0D
00085C86 E701                       	dc.b	smpsNoAttack, $01
00085C88 E109                       	smpsAlterNote       $09
00085C8A E701                       	dc.b	smpsNoAttack, $01
00085C8C E103                       	smpsAlterNote       $03
00085C8E E701                       	dc.b	smpsNoAttack, $01
00085C90 E102                       	smpsAlterNote       $02
00085C92 E701                       	dc.b	smpsNoAttack, $01
00085C94 E106                       	smpsAlterNote       $06
00085C96 E701                       	dc.b	smpsNoAttack, $01
00085C98 E10C                       	smpsAlterNote       $0C
00085C9A E701                       	dc.b	smpsNoAttack, $01
00085C9C E10D                       	smpsAlterNote       $0D
00085C9E 8001                       	dc.b	nRst, $01
00085CA0 E109                       	smpsAlterNote       $09
00085CA2 B80D                       	dc.b	nG4, $0D
00085CA4 E106                       	smpsAlterNote       $06
00085CA6 E701                       	dc.b	smpsNoAttack, $01
00085CA8 E102                       	smpsAlterNote       $02
00085CAA E701                       	dc.b	smpsNoAttack, $01
00085CAC E106                       	smpsAlterNote       $06
00085CAE E701                       	dc.b	smpsNoAttack, $01
00085CB0 E10C                       	smpsAlterNote       $0C
00085CB2 E701                       	dc.b	smpsNoAttack, $01
00085CB4 E10D                       	smpsAlterNote       $0D
00085CB6 E701                       	dc.b	smpsNoAttack, $01
00085CB8 E109                       	smpsAlterNote       $09
00085CBA E701                       	dc.b	smpsNoAttack, $01
00085CBC E103                       	smpsAlterNote       $03
00085CBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CC2 E106                       	smpsAlterNote       $06
00085CC4 E701                       	dc.b	smpsNoAttack, $01
00085CC6 E10C                       	smpsAlterNote       $0C
00085CC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CCC E106                       	smpsAlterNote       $06
00085CCE E701                       	dc.b	smpsNoAttack, $01
00085CD0 E103                       	smpsAlterNote       $03
00085CD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CD6 E109                       	smpsAlterNote       $09
00085CD8 E701                       	dc.b	smpsNoAttack, $01
00085CDA E10D                       	smpsAlterNote       $0D
00085CDC E701                       	dc.b	smpsNoAttack, $01
00085CDE E10C                       	smpsAlterNote       $0C
00085CE0 E701                       	dc.b	smpsNoAttack, $01
00085CE2 E109                       	smpsAlterNote       $09
00085CE4 8001                       	dc.b	nRst, $01
00085CE6 E10B                       	smpsAlterNote       $0B
00085CE8 BA03                       	dc.b	nA4, $03
00085CEA E10C                       	smpsAlterNote       $0C
00085CEC BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00085CF0 E10B                       	smpsAlterNote       $0B
00085CF2 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00085CF8 E10C                       	smpsAlterNote       $0C
00085CFA C703 8001                  	dc.b	nBb5, $03, nRst, $01
00085CFE E10B                       	smpsAlterNote       $0B
00085D00 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00085D06 E10C                       	smpsAlterNote       $0C
00085D08 D303                       	dc.b	nBb6, $03
00085D0A E10B                       	smpsAlterNote       $0B
00085D0C D20D                       	dc.b	nA6, $0D
00085D0E E108                       	smpsAlterNote       $08
00085D10 E701                       	dc.b	smpsNoAttack, $01
00085D12 E104                       	smpsAlterNote       $04
00085D14 E701                       	dc.b	smpsNoAttack, $01
00085D16 E105                       	smpsAlterNote       $05
00085D18 E701                       	dc.b	smpsNoAttack, $01
00085D1A E10B                       	smpsAlterNote       $0B
00085D1C E701                       	dc.b	smpsNoAttack, $01
00085D1E E10F                       	smpsAlterNote       $0F
00085D20 E701                       	dc.b	smpsNoAttack, $01
00085D22 E10B                       	smpsAlterNote       $0B
00085D24 E701                       	dc.b	smpsNoAttack, $01
00085D26 E108                       	smpsAlterNote       $08
00085D28 E701                       	dc.b	smpsNoAttack, $01
00085D2A E104                       	smpsAlterNote       $04
00085D2C E701                       	dc.b	smpsNoAttack, $01
00085D2E E108                       	smpsAlterNote       $08
00085D30 E701                       	dc.b	smpsNoAttack, $01
00085D32 E10E                       	smpsAlterNote       $0E
00085D34 E701                       	dc.b	smpsNoAttack, $01
00085D36 E10F                       	smpsAlterNote       $0F
00085D38 E701                       	dc.b	smpsNoAttack, $01
00085D3A E10B                       	smpsAlterNote       $0B
00085D3C E701                       	dc.b	smpsNoAttack, $01
00085D3E E105                       	smpsAlterNote       $05
00085D40 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00085D46 E109                       	smpsAlterNote       $09
00085D48 CE07                       	dc.b	nF6, $07
00085D4A E108                       	smpsAlterNote       $08
00085D4C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00085D50 E109                       	smpsAlterNote       $09
00085D52 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00085D56 E108                       	smpsAlterNote       $08
00085D58 CC0D                       	dc.b	nEb6, $0D
00085D5A E102                       	smpsAlterNote       $02
00085D5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D60 E108                       	smpsAlterNote       $08
00085D62 E701                       	dc.b	smpsNoAttack, $01
00085D64 E10B                       	smpsAlterNote       $0B
00085D66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D6A E105                       	smpsAlterNote       $05
00085D6C E701                       	dc.b	smpsNoAttack, $01
00085D6E E101                       	smpsAlterNote       $01
00085D70 E701                       	dc.b	smpsNoAttack, $01
00085D72 E102                       	smpsAlterNote       $02
00085D74 E701                       	dc.b	smpsNoAttack, $01
00085D76 E108                       	smpsAlterNote       $08
00085D78 E701                       	dc.b	smpsNoAttack, $01
00085D7A E10C                       	smpsAlterNote       $0C
00085D7C E701                       	dc.b	smpsNoAttack, $01
00085D7E E108                       	smpsAlterNote       $08
00085D80 E701                       	dc.b	smpsNoAttack, $01
00085D82 E105                       	smpsAlterNote       $05
00085D84 E701                       	dc.b	smpsNoAttack, $01
00085D86 E101                       	smpsAlterNote       $01
00085D88 E701                       	dc.b	smpsNoAttack, $01
00085D8A E105                       	smpsAlterNote       $05
00085D8C E701                       	dc.b	smpsNoAttack, $01
00085D8E E10B                       	smpsAlterNote       $0B
00085D90 E701                       	dc.b	smpsNoAttack, $01
00085D92 E10C                       	smpsAlterNote       $0C
00085D94 E701                       	dc.b	smpsNoAttack, $01
00085D96 E108                       	smpsAlterNote       $08
00085D98 E701                       	dc.b	smpsNoAttack, $01
00085D9A E107                       	smpsAlterNote       $07
00085D9C CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00085DA6 E10B                       	smpsAlterNote       $0B
00085DA8 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00085DB2 E109                       	smpsAlterNote       $09
00085DB4 C203                       	dc.b	nF5, $03
00085DB6 E108                       	smpsAlterNote       $08
00085DB8 C103 8001                  	dc.b	nE5, $03, nRst, $01
00085DBC E109                       	smpsAlterNote       $09
00085DBE C20D                       	dc.b	nF5, $0D
00085DC0 E108                       	smpsAlterNote       $08
00085DC2 C10E                       	dc.b	nE5, $0E
00085DC4 E107                       	smpsAlterNote       $07
00085DC6 BF0D                       	dc.b	nD5, $0D
00085DC8 E104                       	smpsAlterNote       $04
00085DCA E701                       	dc.b	smpsNoAttack, $01
00085DCC E100                       	smpsAlterNote       $00
00085DCE E701                       	dc.b	smpsNoAttack, $01
00085DD0 E104                       	smpsAlterNote       $04
00085DD2 E701                       	dc.b	smpsNoAttack, $01
00085DD4 E107                       	smpsAlterNote       $07
00085DD6 E701                       	dc.b	smpsNoAttack, $01
00085DD8 E10B                       	smpsAlterNote       $0B
00085DDA E701                       	dc.b	smpsNoAttack, $01
00085DDC E107                       	smpsAlterNote       $07
00085DDE E701                       	dc.b	smpsNoAttack, $01
00085DE0 E101                       	smpsAlterNote       $01
00085DE2 E701                       	dc.b	smpsNoAttack, $01
00085DE4 E100                       	smpsAlterNote       $00
00085DE6 E701                       	dc.b	smpsNoAttack, $01
00085DE8 E104                       	smpsAlterNote       $04
00085DEA E701                       	dc.b	smpsNoAttack, $01
00085DEC E10A                       	smpsAlterNote       $0A
00085DEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DF2 E107                       	smpsAlterNote       $07
00085DF4 E701                       	dc.b	smpsNoAttack, $01
00085DF6 E101                       	smpsAlterNote       $01
00085DF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DFC E107                       	smpsAlterNote       $07
00085DFE E701                       	dc.b	smpsNoAttack, $01
00085E00 E10A                       	smpsAlterNote       $0A
00085E02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E06 E104                       	smpsAlterNote       $04
00085E08 E701                       	dc.b	smpsNoAttack, $01
00085E0A E100                       	smpsAlterNote       $00
00085E0C E701                       	dc.b	smpsNoAttack, $01
00085E0E E101                       	smpsAlterNote       $01
00085E10 E701                       	dc.b	smpsNoAttack, $01
00085E12 E107                       	smpsAlterNote       $07
00085E14 E701                       	dc.b	smpsNoAttack, $01
00085E16 E10B                       	smpsAlterNote       $0B
00085E18 E701                       	dc.b	smpsNoAttack, $01
00085E1A E107                       	smpsAlterNote       $07
00085E1C E701                       	dc.b	smpsNoAttack, $01
00085E1E E104                       	smpsAlterNote       $04
00085E20 E701                       	dc.b	smpsNoAttack, $01
00085E22 E100                       	smpsAlterNote       $00
00085E24 E701                       	dc.b	smpsNoAttack, $01
00085E26 E104                       	smpsAlterNote       $04
00085E28 E701                       	dc.b	smpsNoAttack, $01
00085E2A E10A                       	smpsAlterNote       $0A
00085E2C E701                       	dc.b	smpsNoAttack, $01
00085E2E E10B                       	smpsAlterNote       $0B
00085E30 E701                       	dc.b	smpsNoAttack, $01
00085E32 E107                       	smpsAlterNote       $07
00085E34 E701                       	dc.b	smpsNoAttack, $01
00085E36 E101                       	smpsAlterNote       $01
00085E38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E3C E104                       	smpsAlterNote       $04
00085E3E E701                       	dc.b	smpsNoAttack, $01
00085E40 E10A                       	smpsAlterNote       $0A
00085E42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E46 E104                       	smpsAlterNote       $04
00085E48 E701                       	dc.b	smpsNoAttack, $01
00085E4A E101                       	smpsAlterNote       $01
00085E4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E50 E107                       	smpsAlterNote       $07
00085E52 E701                       	dc.b	smpsNoAttack, $01
00085E54 E10B                       	smpsAlterNote       $0B
00085E56 E701                       	dc.b	smpsNoAttack, $01
00085E58 E10A                       	smpsAlterNote       $0A
00085E5A E701                       	dc.b	smpsNoAttack, $01
00085E5C E104                       	smpsAlterNote       $04
00085E5E E701                       	dc.b	smpsNoAttack, $01
00085E60 E100                       	smpsAlterNote       $00
00085E62 E701                       	dc.b	smpsNoAttack, $01
00085E64 E104                       	smpsAlterNote       $04
00085E66 E701                       	dc.b	smpsNoAttack, $01
00085E68 E107                       	smpsAlterNote       $07
00085E6A E701                       	dc.b	smpsNoAttack, $01
00085E6C E10B                       	smpsAlterNote       $0B
00085E6E E701                       	dc.b	smpsNoAttack, $01
00085E70 E107                       	smpsAlterNote       $07
00085E72 E701                       	dc.b	smpsNoAttack, $01
00085E74 E101                       	smpsAlterNote       $01
00085E76 E701                       	dc.b	smpsNoAttack, $01
00085E78 E100                       	smpsAlterNote       $00
00085E7A E701                       	dc.b	smpsNoAttack, $01
00085E7C E104                       	smpsAlterNote       $04
00085E7E E701                       	dc.b	smpsNoAttack, $01
00085E80 E10A                       	smpsAlterNote       $0A
00085E82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E86 E107                       	smpsAlterNote       $07
00085E88 E701                       	dc.b	smpsNoAttack, $01
00085E8A E101                       	smpsAlterNote       $01
00085E8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E90 E107                       	smpsAlterNote       $07
00085E92 E701                       	dc.b	smpsNoAttack, $01
00085E94 E10A                       	smpsAlterNote       $0A
00085E96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E9A E104                       	smpsAlterNote       $04
00085E9C E701                       	dc.b	smpsNoAttack, $01
00085E9E E100                       	smpsAlterNote       $00
00085EA0 E701                       	dc.b	smpsNoAttack, $01
00085EA2 E101                       	smpsAlterNote       $01
00085EA4 E701                       	dc.b	smpsNoAttack, $01
00085EA6 E107                       	smpsAlterNote       $07
00085EA8 E701                       	dc.b	smpsNoAttack, $01
00085EAA E10B                       	smpsAlterNote       $0B
00085EAC E701                       	dc.b	smpsNoAttack, $01
00085EAE E107                       	smpsAlterNote       $07
00085EB0 E701                       	dc.b	smpsNoAttack, $01
00085EB2 E104                       	smpsAlterNote       $04
00085EB4 E701                       	dc.b	smpsNoAttack, $01
00085EB6 E100                       	smpsAlterNote       $00
00085EB8 E701                       	dc.b	smpsNoAttack, $01
00085EBA E101                       	smpsAlterNote       $01
00085EBC 8001                       	dc.b	nRst, $01
00085EBE E109                       	smpsAlterNote       $09
00085EC0 C20D                       	dc.b	nF5, $0D
00085EC2 E106                       	smpsAlterNote       $06
00085EC4 E701                       	dc.b	smpsNoAttack, $01
00085EC6 E102                       	smpsAlterNote       $02
00085EC8 E701                       	dc.b	smpsNoAttack, $01
00085ECA E106                       	smpsAlterNote       $06
00085ECC E701                       	dc.b	smpsNoAttack, $01
00085ECE E10C                       	smpsAlterNote       $0C
00085ED0 E701                       	dc.b	smpsNoAttack, $01
00085ED2 E10D                       	smpsAlterNote       $0D
00085ED4 E701                       	dc.b	smpsNoAttack, $01
00085ED6 E109                       	smpsAlterNote       $09
00085ED8 E701                       	dc.b	smpsNoAttack, $01
00085EDA E103                       	smpsAlterNote       $03
00085EDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085EE0 E106                       	smpsAlterNote       $06
00085EE2 E701                       	dc.b	smpsNoAttack, $01
00085EE4 E10C                       	smpsAlterNote       $0C
00085EE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085EEA E106                       	smpsAlterNote       $06
00085EEC E701                       	dc.b	smpsNoAttack, $01
00085EEE E103                       	smpsAlterNote       $03
00085EF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085EF4 E109                       	smpsAlterNote       $09
00085EF6 E701                       	dc.b	smpsNoAttack, $01
00085EF8 E10D                       	smpsAlterNote       $0D
00085EFA E701                       	dc.b	smpsNoAttack, $01
00085EFC E10C                       	smpsAlterNote       $0C
00085EFE E701                       	dc.b	smpsNoAttack, $01
00085F00 E109                       	smpsAlterNote       $09
00085F02 8001                       	dc.b	nRst, $01
00085F04 E108                       	smpsAlterNote       $08
00085F06 C10D                       	dc.b	nE5, $0D
00085F08 E109                       	smpsAlterNote       $09
00085F0A C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00085F0E E108                       	smpsAlterNote       $08
00085F10 C10D                       	dc.b	nE5, $0D
00085F12 E102                       	smpsAlterNote       $02
00085F14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F18 E105                       	smpsAlterNote       $05
00085F1A E701                       	dc.b	smpsNoAttack, $01
00085F1C E108                       	smpsAlterNote       $08
00085F1E 8001                       	dc.b	nRst, $01
00085F20 E107                       	smpsAlterNote       $07
00085F22 BF0D                       	dc.b	nD5, $0D
00085F24 E108                       	smpsAlterNote       $08
00085F26 C107                       	dc.b	nE5, $07
00085F28 E109                       	smpsAlterNote       $09
00085F2A C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00085F30 E10B                       	smpsAlterNote       $0B
00085F32 C603                       	dc.b	nA5, $03
00085F34 E10C                       	smpsAlterNote       $0C
00085F36 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00085F3C E10B                       	smpsAlterNote       $0B
00085F3E C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00085F44 E109                       	smpsAlterNote       $09
00085F46 D003                       	dc.b	nG6, $03
00085F48 E108                       	smpsAlterNote       $08
00085F4A CD02 8001                  	dc.b	nE6, $02, nRst, $01
00085F4E E10B                       	smpsAlterNote       $0B
00085F50 C601 8001                  	dc.b	nA5, $01, nRst, $01
00085F54 E108                       	smpsAlterNote       $08
00085F56 C102                       	dc.b	nE5, $02
00085F5A E10C                       	smpsAlterNote       $0C
00085F5C E6FB                       	smpsAlterVol        $FB
00085F5E A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00085F6A 8001                       	dc.b	nRst, $01
00085F6C E10B                       	smpsAlterNote       $0B
00085F6E A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00085F76 E107                       	smpsAlterNote       $07
00085F78 A706 8001                  	dc.b	nD3, $06, nRst, $01
00085F7C E10B                       	smpsAlterNote       $0B
00085F7E A203                       	dc.b	nA2, $03
00085F80 E109                       	smpsAlterNote       $09
00085F82 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00085F86 E108                       	smpsAlterNote       $08
00085F88 A906                       	dc.b	nE3, $06
00085F8A E107                       	smpsAlterNote       $07
00085F8C A703 8001                  	dc.b	nD3, $03, nRst, $01
00085F90 E106                       	smpsAlterNote       $06
00085F92 A503                       	dc.b	nC3, $03
00085F94 E10C                       	smpsAlterNote       $0C
00085F96 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00085F9A E10B                       	smpsAlterNote       $0B
00085F9C A203 8004                  	dc.b	nA2, $03, nRst, $04
00085FA0 E11B                       	smpsAlterNote       $1B
00085FA2 C401                       	dc.b	nG5, $01
00085FA4 E1F4                       	smpsAlterNote       $F4
00085FA6 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00085FA9 E106                       	smpsAlterNote       $06
00085FAB E701                       	dc.b	smpsNoAttack, $01
00085FAD E10F                       	smpsAlterNote       $0F
00085FAF E701                       	dc.b	smpsNoAttack, $01
00085FB1 E1E4                       	smpsAlterNote       $E4
00085FB3 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00085FB6 E1F6                       	smpsAlterNote       $F6
00085FB8 E701                       	dc.b	smpsNoAttack, $01
00085FBA E108                       	smpsAlterNote       $08
00085FBC E701                       	dc.b	smpsNoAttack, $01
00085FBE E10B                       	smpsAlterNote       $0B
00085FC0 E706                       	dc.b	smpsNoAttack, $06
00085FC2 E105                       	smpsAlterNote       $05
00085FC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FC8 E108                       	smpsAlterNote       $08
00085FCA E701                       	dc.b	smpsNoAttack, $01
00085FCC E10E                       	smpsAlterNote       $0E
00085FCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FD2 E108                       	smpsAlterNote       $08
00085FD4 E701                       	dc.b	smpsNoAttack, $01
00085FD6 E105                       	smpsAlterNote       $05
00085FD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FDC E10B                       	smpsAlterNote       $0B
00085FDE E701                       	dc.b	smpsNoAttack, $01
00085FE0 E10F                       	smpsAlterNote       $0F
00085FE2 E701                       	dc.b	smpsNoAttack, $01
00085FE4 E10E                       	smpsAlterNote       $0E
00085FE6 E701                       	dc.b	smpsNoAttack, $01
00085FE8 E108                       	smpsAlterNote       $08
00085FEA E701                       	dc.b	smpsNoAttack, $01
00085FEC E104                       	smpsAlterNote       $04
00085FEE E701                       	dc.b	smpsNoAttack, $01
00085FF0 E108                       	smpsAlterNote       $08
00085FF2 E701                       	dc.b	smpsNoAttack, $01
00085FF4 E10B                       	smpsAlterNote       $0B
00085FF6 E701                       	dc.b	smpsNoAttack, $01
00085FF8 E10F                       	smpsAlterNote       $0F
00085FFA E701                       	dc.b	smpsNoAttack, $01
00085FFC E10B                       	smpsAlterNote       $0B
00085FFE E701                       	dc.b	smpsNoAttack, $01
00086000 E105                       	smpsAlterNote       $05
00086002 E701                       	dc.b	smpsNoAttack, $01
00086004 E104                       	smpsAlterNote       $04
00086006 E701                       	dc.b	smpsNoAttack, $01
00086008 E108                       	smpsAlterNote       $08
0008600A E701                       	dc.b	smpsNoAttack, $01
0008600C E10E                       	smpsAlterNote       $0E
0008600E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086012 E10B                       	smpsAlterNote       $0B
00086014 E701                       	dc.b	smpsNoAttack, $01
00086016 E105                       	smpsAlterNote       $05
00086018 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008601C E10B                       	smpsAlterNote       $0B
0008601E E701                       	dc.b	smpsNoAttack, $01
00086020 E10E                       	smpsAlterNote       $0E
00086022 E701                       	dc.b	smpsNoAttack, $01
00086024 E10F                       	smpsAlterNote       $0F
00086026 8001                       	dc.b	nRst, $01
00086028 E109                       	smpsAlterNote       $09
0008602A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00086030 E108                       	smpsAlterNote       $08
00086032 C101 8001                  	dc.b	nE5, $01, nRst, $01
00086036 E109                       	smpsAlterNote       $09
00086038 C202                       	dc.b	nF5, $02
0008603A E108                       	smpsAlterNote       $08
0008603C C102                       	dc.b	nE5, $02
0008603E E107                       	smpsAlterNote       $07
00086040 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00086044 E108                       	smpsAlterNote       $08
00086046 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008604A E107                       	smpsAlterNote       $07
0008604C BF02                       	dc.b	nD5, $02
0008604E E106                       	smpsAlterNote       $06
00086050 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00086054 E107                       	smpsAlterNote       $07
00086056 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008605A E106                       	smpsAlterNote       $06
0008605C BD02                       	dc.b	nC5, $02
0008605E E10C                       	smpsAlterNote       $0C
00086060 BB02                       	dc.b	nBb4, $02
00086062 E106                       	smpsAlterNote       $06
00086064 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00086068 E10C                       	smpsAlterNote       $0C
0008606A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008606E E10B                       	smpsAlterNote       $0B
00086070 BA02                       	dc.b	nA4, $02
00086072 E10C                       	smpsAlterNote       $0C
00086074 BB02                       	dc.b	nBb4, $02
00086076 E10B                       	smpsAlterNote       $0B
00086078 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00086082 E108                       	smpsAlterNote       $08
00086084 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008608C E107                       	smpsAlterNote       $07
0008608E BE02                       	dc.b	nCs5, $02
00086090 E10B                       	smpsAlterNote       $0B
00086092 BA02                       	dc.b	nA4, $02
00086094 E109                       	smpsAlterNote       $09
00086096 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008609A E108                       	smpsAlterNote       $08
0008609C B501 8001                  	dc.b	nE4, $01, nRst, $01
000860A0 E10B                       	smpsAlterNote       $0B
000860A2 AE02                       	dc.b	nA3, $02
000860A4 E10C                       	smpsAlterNote       $0C
000860A6 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000860B2 E10B                       	smpsAlterNote       $0B
000860B4 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000860BC E107                       	smpsAlterNote       $07
000860BE A706 8001                  	dc.b	nD3, $06, nRst, $01
000860C2 E10B                       	smpsAlterNote       $0B
000860C4 A203                       	dc.b	nA2, $03
000860C6 E109                       	smpsAlterNote       $09
000860C8 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000860CC E108                       	smpsAlterNote       $08
000860CE A906 8001                  	dc.b	nE3, $06, nRst, $01
000860D2 E107                       	smpsAlterNote       $07
000860D4 A702 8001                  	dc.b	nD3, $02, nRst, $01
000860D8 E106                       	smpsAlterNote       $06
000860DA A503                       	dc.b	nC3, $03
000860DC E10C                       	smpsAlterNote       $0C
000860DE A303 8001                  	dc.b	nBb2, $03, nRst, $01
000860E4 E107                       	smpsAlterNote       $07
000860E6 B20D                       	dc.b	nCs4, $0D
000860E8 E104                       	smpsAlterNote       $04
000860EA E701                       	dc.b	smpsNoAttack, $01
000860EC E100                       	smpsAlterNote       $00
000860EE E701                       	dc.b	smpsNoAttack, $01
000860F0 E104                       	smpsAlterNote       $04
000860F2 E701                       	dc.b	smpsNoAttack, $01
000860F4 E10A                       	smpsAlterNote       $0A
000860F6 E701                       	dc.b	smpsNoAttack, $01
000860F8 E10B                       	smpsAlterNote       $0B
000860FA E701                       	dc.b	smpsNoAttack, $01
000860FC E107                       	smpsAlterNote       $07
000860FE E701                       	dc.b	smpsNoAttack, $01
00086100 E101                       	smpsAlterNote       $01
00086102 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086106 E104                       	smpsAlterNote       $04
00086108 E701                       	dc.b	smpsNoAttack, $01
0008610A E10A                       	smpsAlterNote       $0A
0008610C E701                       	dc.b	smpsNoAttack, $01
0008610E E10B                       	smpsAlterNote       $0B
00086110 8001                       	dc.b	nRst, $01
00086112 E107                       	smpsAlterNote       $07
00086114 B30D                       	dc.b	nD4, $0D
00086116 E104                       	smpsAlterNote       $04
00086118 E701                       	dc.b	smpsNoAttack, $01
0008611A E100                       	smpsAlterNote       $00
0008611C E701                       	dc.b	smpsNoAttack, $01
0008611E E104                       	smpsAlterNote       $04
00086120 E701                       	dc.b	smpsNoAttack, $01
00086122 E10A                       	smpsAlterNote       $0A
00086124 E701                       	dc.b	smpsNoAttack, $01
00086126 E10B                       	smpsAlterNote       $0B
00086128 E701                       	dc.b	smpsNoAttack, $01
0008612A E107                       	smpsAlterNote       $07
0008612C E701                       	dc.b	smpsNoAttack, $01
0008612E E101                       	smpsAlterNote       $01
00086130 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086134 E104                       	smpsAlterNote       $04
00086136 E701                       	dc.b	smpsNoAttack, $01
00086138 E10A                       	smpsAlterNote       $0A
0008613A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008613E E104                       	smpsAlterNote       $04
00086140 E701                       	dc.b	smpsNoAttack, $01
00086142 E101                       	smpsAlterNote       $01
00086144 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086148 E107                       	smpsAlterNote       $07
0008614A E701                       	dc.b	smpsNoAttack, $01
0008614C E10B                       	smpsAlterNote       $0B
0008614E E701                       	dc.b	smpsNoAttack, $01
00086150 E10A                       	smpsAlterNote       $0A
00086152 E701                       	dc.b	smpsNoAttack, $01
00086154 E107                       	smpsAlterNote       $07
00086156 8001                       	dc.b	nRst, $01
00086158 E108                       	smpsAlterNote       $08
0008615A B50D                       	dc.b	nE4, $0D
0008615C E102                       	smpsAlterNote       $02
0008615E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086162 E105                       	smpsAlterNote       $05
00086164 E701                       	dc.b	smpsNoAttack, $01
00086166 E10B                       	smpsAlterNote       $0B
00086168 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008616C E105                       	smpsAlterNote       $05
0008616E E701                       	dc.b	smpsNoAttack, $01
00086170 E102                       	smpsAlterNote       $02
00086172 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086176 E108                       	smpsAlterNote       $08
00086178 E701                       	dc.b	smpsNoAttack, $01
0008617A E10C                       	smpsAlterNote       $0C
0008617C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086180 E107                       	smpsAlterNote       $07
00086182 B30D                       	dc.b	nD4, $0D
00086184 E101                       	smpsAlterNote       $01
00086186 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008618A E104                       	smpsAlterNote       $04
0008618C E701                       	dc.b	smpsNoAttack, $01
0008618E E10A                       	smpsAlterNote       $0A
00086190 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086194 E104                       	smpsAlterNote       $04
00086196 E701                       	dc.b	smpsNoAttack, $01
00086198 E101                       	smpsAlterNote       $01
0008619A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008619E E107                       	smpsAlterNote       $07
000861A0 E701                       	dc.b	smpsNoAttack, $01
000861A2 E10B                       	smpsAlterNote       $0B
000861A4 E701                       	dc.b	smpsNoAttack, $01
000861A6 E10A                       	smpsAlterNote       $0A
000861A8 E701                       	dc.b	smpsNoAttack, $01
000861AA E104                       	smpsAlterNote       $04
000861AC E701                       	dc.b	smpsNoAttack, $01
000861AE E100                       	smpsAlterNote       $00
000861B0 E701                       	dc.b	smpsNoAttack, $01
000861B2 E104                       	smpsAlterNote       $04
000861B4 E701                       	dc.b	smpsNoAttack, $01
000861B6 E107                       	smpsAlterNote       $07
000861B8 E701                       	dc.b	smpsNoAttack, $01
000861BA E10B                       	smpsAlterNote       $0B
000861BC E701                       	dc.b	smpsNoAttack, $01
000861BE E107                       	smpsAlterNote       $07
000861C0 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000861C4 E101                       	smpsAlterNote       $01
000861C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861CA E107                       	smpsAlterNote       $07
000861CC E701                       	dc.b	smpsNoAttack, $01
000861CE E10A                       	smpsAlterNote       $0A
000861D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861D4 E104                       	smpsAlterNote       $04
000861D6 E701                       	dc.b	smpsNoAttack, $01
000861D8 E100                       	smpsAlterNote       $00
000861DA E701                       	dc.b	smpsNoAttack, $01
000861DC E101                       	smpsAlterNote       $01
000861DE E701                       	dc.b	smpsNoAttack, $01
000861E0 E107                       	smpsAlterNote       $07
000861E2 E701                       	dc.b	smpsNoAttack, $01
000861E4 E10B                       	smpsAlterNote       $0B
000861E6 E701                       	dc.b	smpsNoAttack, $01
000861E8 E107                       	smpsAlterNote       $07
000861EA B30E                       	dc.b	nD4, $0E
000861EC E101                       	smpsAlterNote       $01
000861EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861F2 E107                       	smpsAlterNote       $07
000861F4 E701                       	dc.b	smpsNoAttack, $01
000861F6 E10A                       	smpsAlterNote       $0A
000861F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861FC E104                       	smpsAlterNote       $04
000861FE E701                       	dc.b	smpsNoAttack, $01
00086200 E100                       	smpsAlterNote       $00
00086202 E701                       	dc.b	smpsNoAttack, $01
00086204 E101                       	smpsAlterNote       $01
00086206 E701                       	dc.b	smpsNoAttack, $01
00086208 E107                       	smpsAlterNote       $07
0008620A E701                       	dc.b	smpsNoAttack, $01
0008620C E10B                       	smpsAlterNote       $0B
0008620E E701                       	dc.b	smpsNoAttack, $01
00086210 E107                       	smpsAlterNote       $07
00086212 E701                       	dc.b	smpsNoAttack, $01
00086214 E104                       	smpsAlterNote       $04
00086216 E701                       	dc.b	smpsNoAttack, $01
00086218 E100                       	smpsAlterNote       $00
0008621A E701                       	dc.b	smpsNoAttack, $01
0008621C E104                       	smpsAlterNote       $04
0008621E E701                       	dc.b	smpsNoAttack, $01
00086220 E10A                       	smpsAlterNote       $0A
00086222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086226 E107                       	smpsAlterNote       $07
00086228 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008622C E104                       	smpsAlterNote       $04
0008622E E701                       	dc.b	smpsNoAttack, $01
00086230 E100                       	smpsAlterNote       $00
00086232 E701                       	dc.b	smpsNoAttack, $01
00086234 E101                       	smpsAlterNote       $01
00086236 E701                       	dc.b	smpsNoAttack, $01
00086238 E107                       	smpsAlterNote       $07
0008623A E701                       	dc.b	smpsNoAttack, $01
0008623C E10B                       	smpsAlterNote       $0B
0008623E E701                       	dc.b	smpsNoAttack, $01
00086240 E107                       	smpsAlterNote       $07
00086242 E701                       	dc.b	smpsNoAttack, $01
00086244 E104                       	smpsAlterNote       $04
00086246 E701                       	dc.b	smpsNoAttack, $01
00086248 E100                       	smpsAlterNote       $00
0008624A E701                       	dc.b	smpsNoAttack, $01
0008624C E104                       	smpsAlterNote       $04
0008624E E701                       	dc.b	smpsNoAttack, $01
00086250 E10A                       	smpsAlterNote       $0A
00086252 E701                       	dc.b	smpsNoAttack, $01
00086254 E10B                       	smpsAlterNote       $0B
00086256 E701                       	dc.b	smpsNoAttack, $01
0008625A E6FF                       	smpsAlterVol        $FF
0008625C A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00086268 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00086270 E109                       	smpsAlterNote       $09
00086272 E601                       	smpsAlterVol        $01
00086274 B60D                       	dc.b	nF4, $0D
00086276 E106                       	smpsAlterNote       $06
00086278 E701                       	dc.b	smpsNoAttack, $01
0008627A E102                       	smpsAlterNote       $02
0008627C E701                       	dc.b	smpsNoAttack, $01
0008627E E106                       	smpsAlterNote       $06
00086280 E701                       	dc.b	smpsNoAttack, $01
00086282 E109                       	smpsAlterNote       $09
00086284 E701                       	dc.b	smpsNoAttack, $01
00086286 E10D                       	smpsAlterNote       $0D
00086288 E701                       	dc.b	smpsNoAttack, $01
0008628A E109                       	smpsAlterNote       $09
0008628C E701                       	dc.b	smpsNoAttack, $01
0008628E E103                       	smpsAlterNote       $03
00086290 E701                       	dc.b	smpsNoAttack, $01
00086292 E102                       	smpsAlterNote       $02
00086294 E701                       	dc.b	smpsNoAttack, $01
00086296 E106                       	smpsAlterNote       $06
00086298 E701                       	dc.b	smpsNoAttack, $01
0008629A E10C                       	smpsAlterNote       $0C
0008629C E701                       	dc.b	smpsNoAttack, $01
0008629E E10D                       	smpsAlterNote       $0D
000862A0 8001                       	dc.b	nRst, $01
000862A2 E109                       	smpsAlterNote       $09
000862A4 B80D                       	dc.b	nG4, $0D
000862A6 E106                       	smpsAlterNote       $06
000862A8 E701                       	dc.b	smpsNoAttack, $01
000862AA E102                       	smpsAlterNote       $02
000862AC E701                       	dc.b	smpsNoAttack, $01
000862AE E106                       	smpsAlterNote       $06
000862B0 E701                       	dc.b	smpsNoAttack, $01
000862B2 E109                       	smpsAlterNote       $09
000862B4 E701                       	dc.b	smpsNoAttack, $01
000862B6 E10D                       	smpsAlterNote       $0D
000862B8 E701                       	dc.b	smpsNoAttack, $01
000862BA E109                       	smpsAlterNote       $09
000862BC E701                       	dc.b	smpsNoAttack, $01
000862BE E103                       	smpsAlterNote       $03
000862C0 E701                       	dc.b	smpsNoAttack, $01
000862C2 E102                       	smpsAlterNote       $02
000862C4 E701                       	dc.b	smpsNoAttack, $01
000862C6 E106                       	smpsAlterNote       $06
000862C8 E701                       	dc.b	smpsNoAttack, $01
000862CA E10C                       	smpsAlterNote       $0C
000862CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862D0 E106                       	smpsAlterNote       $06
000862D2 E701                       	dc.b	smpsNoAttack, $01
000862D4 E103                       	smpsAlterNote       $03
000862D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862DA E109                       	smpsAlterNote       $09
000862DC E701                       	dc.b	smpsNoAttack, $01
000862DE E10D                       	smpsAlterNote       $0D
000862E0 E701                       	dc.b	smpsNoAttack, $01
000862E2 E10C                       	smpsAlterNote       $0C
000862E4 E701                       	dc.b	smpsNoAttack, $01
000862E6 E109                       	smpsAlterNote       $09
000862E8 8001                       	dc.b	nRst, $01
000862EA E10B                       	smpsAlterNote       $0B
000862EC BA0D                       	dc.b	nA4, $0D
000862EE E105                       	smpsAlterNote       $05
000862F0 E701                       	dc.b	smpsNoAttack, $01
000862F2 E104                       	smpsAlterNote       $04
000862F4 E701                       	dc.b	smpsNoAttack, $01
000862F6 E108                       	smpsAlterNote       $08
000862F8 E701                       	dc.b	smpsNoAttack, $01
000862FA E10E                       	smpsAlterNote       $0E
000862FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086300 E10B                       	smpsAlterNote       $0B
00086302 E701                       	dc.b	smpsNoAttack, $01
00086304 E105                       	smpsAlterNote       $05
00086306 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008630A E10B                       	smpsAlterNote       $0B
0008630C E701                       	dc.b	smpsNoAttack, $01
0008630E E10E                       	smpsAlterNote       $0E
00086310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086314 E108                       	smpsAlterNote       $08
00086316 E701                       	dc.b	smpsNoAttack, $01
00086318 E104                       	smpsAlterNote       $04
0008631A E701                       	dc.b	smpsNoAttack, $01
0008631C E105                       	smpsAlterNote       $05
0008631E E701                       	dc.b	smpsNoAttack, $01
00086320 E10B                       	smpsAlterNote       $0B
00086322 E701                       	dc.b	smpsNoAttack, $01
00086324 E10F                       	smpsAlterNote       $0F
00086326 E701                       	dc.b	smpsNoAttack, $01
00086328 E10B                       	smpsAlterNote       $0B
0008632A E701                       	dc.b	smpsNoAttack, $01
0008632C E108                       	smpsAlterNote       $08
0008632E E701                       	dc.b	smpsNoAttack, $01
00086330 E104                       	smpsAlterNote       $04
00086332 E701                       	dc.b	smpsNoAttack, $01
00086334 E108                       	smpsAlterNote       $08
00086336 E701                       	dc.b	smpsNoAttack, $01
00086338 E10E                       	smpsAlterNote       $0E
0008633A E701                       	dc.b	smpsNoAttack, $01
0008633C E10F                       	smpsAlterNote       $0F
0008633E E701                       	dc.b	smpsNoAttack, $01
00086340 E10B                       	smpsAlterNote       $0B
00086342 E701                       	dc.b	smpsNoAttack, $01
00086344 E105                       	smpsAlterNote       $05
00086346 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008634A E108                       	smpsAlterNote       $08
0008634C E701                       	dc.b	smpsNoAttack, $01
0008634E E10E                       	smpsAlterNote       $0E
00086350 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086354 E108                       	smpsAlterNote       $08
00086356 E701                       	dc.b	smpsNoAttack, $01
00086358 E105                       	smpsAlterNote       $05
0008635A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008635E E108                       	smpsAlterNote       $08
00086360 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00086364 E109                       	smpsAlterNote       $09
00086366 B60D                       	dc.b	nF4, $0D
00086368 E103                       	smpsAlterNote       $03
0008636A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008636E E106                       	smpsAlterNote       $06
00086370 E701                       	dc.b	smpsNoAttack, $01
00086372 E10C                       	smpsAlterNote       $0C
00086374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086378 E106                       	smpsAlterNote       $06
0008637A E701                       	dc.b	smpsNoAttack, $01
0008637C E103                       	smpsAlterNote       $03
0008637E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086382 E109                       	smpsAlterNote       $09
00086384 E701                       	dc.b	smpsNoAttack, $01
00086386 E10D                       	smpsAlterNote       $0D
00086388 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008638C E109                       	smpsAlterNote       $09
0008638E B80D                       	dc.b	nG4, $0D
00086390 E103                       	smpsAlterNote       $03
00086392 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086396 E109                       	smpsAlterNote       $09
00086398 E701                       	dc.b	smpsNoAttack, $01
0008639A E10C                       	smpsAlterNote       $0C
0008639C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863A0 E106                       	smpsAlterNote       $06
000863A2 E701                       	dc.b	smpsNoAttack, $01
000863A4 E102                       	smpsAlterNote       $02
000863A6 E701                       	dc.b	smpsNoAttack, $01
000863A8 E103                       	smpsAlterNote       $03
000863AA E701                       	dc.b	smpsNoAttack, $01
000863AC E109                       	smpsAlterNote       $09
000863AE E701                       	dc.b	smpsNoAttack, $01
000863B0 E10D                       	smpsAlterNote       $0D
000863B2 E701                       	dc.b	smpsNoAttack, $01
000863B4 E109                       	smpsAlterNote       $09
000863B6 E701                       	dc.b	smpsNoAttack, $01
000863B8 E106                       	smpsAlterNote       $06
000863BA E701                       	dc.b	smpsNoAttack, $01
000863BC E102                       	smpsAlterNote       $02
000863BE E701                       	dc.b	smpsNoAttack, $01
000863C0 E106                       	smpsAlterNote       $06
000863C2 E701                       	dc.b	smpsNoAttack, $01
000863C4 E10C                       	smpsAlterNote       $0C
000863C6 E701                       	dc.b	smpsNoAttack, $01
000863C8 E10D                       	smpsAlterNote       $0D
000863CA E701                       	dc.b	smpsNoAttack, $01
000863CC E109                       	smpsAlterNote       $09
000863CE E701                       	dc.b	smpsNoAttack, $01
000863D0 E10B                       	smpsAlterNote       $0B
000863D2 BA0D                       	dc.b	nA4, $0D
000863D4 E108                       	smpsAlterNote       $08
000863D6 E701                       	dc.b	smpsNoAttack, $01
000863D8 E105                       	smpsAlterNote       $05
000863DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863DE E10B                       	smpsAlterNote       $0B
000863E0 E701                       	dc.b	smpsNoAttack, $01
000863E2 E10F                       	smpsAlterNote       $0F
000863E4 E701                       	dc.b	smpsNoAttack, $01
000863E6 E10E                       	smpsAlterNote       $0E
000863E8 E701                       	dc.b	smpsNoAttack, $01
000863EA E108                       	smpsAlterNote       $08
000863EC E701                       	dc.b	smpsNoAttack, $01
000863EE E104                       	smpsAlterNote       $04
000863F0 E701                       	dc.b	smpsNoAttack, $01
000863F2 E108                       	smpsAlterNote       $08
000863F4 E701                       	dc.b	smpsNoAttack, $01
000863F6 E10B                       	smpsAlterNote       $0B
000863F8 E701                       	dc.b	smpsNoAttack, $01
000863FA E10F                       	smpsAlterNote       $0F
000863FC E701                       	dc.b	smpsNoAttack, $01
000863FE E10B                       	smpsAlterNote       $0B
00086400 E701                       	dc.b	smpsNoAttack, $01
00086402 E105                       	smpsAlterNote       $05
00086404 E701                       	dc.b	smpsNoAttack, $01
00086406 E104                       	smpsAlterNote       $04
00086408 E701                       	dc.b	smpsNoAttack, $01
0008640A E108                       	smpsAlterNote       $08
0008640C E701                       	dc.b	smpsNoAttack, $01
0008640E E10E                       	smpsAlterNote       $0E
00086410 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086414 E10B                       	smpsAlterNote       $0B
00086416 E701                       	dc.b	smpsNoAttack, $01
00086418 E105                       	smpsAlterNote       $05
0008641A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008641E E10B                       	smpsAlterNote       $0B
00086420 E701                       	dc.b	smpsNoAttack, $01
00086422 E10E                       	smpsAlterNote       $0E
00086424 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086428 E108                       	smpsAlterNote       $08
0008642A E701                       	dc.b	smpsNoAttack, $01
0008642C E105                       	smpsAlterNote       $05
0008642E 8001                       	dc.b	nRst, $01
00086430 E109                       	smpsAlterNote       $09
00086432 B60A                       	dc.b	nF4, $0A
00086434 E108                       	smpsAlterNote       $08
00086436 B507                       	dc.b	nE4, $07
00086438 E107                       	smpsAlterNote       $07
0008643A B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008643E E108                       	smpsAlterNote       $08
00086440 B503                       	dc.b	nE4, $03
00086442 E109                       	smpsAlterNote       $09
00086444 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008644C E10B                       	smpsAlterNote       $0B
0008644E BA0D                       	dc.b	nA4, $0D
00086450 E108                       	smpsAlterNote       $08
00086452 E701                       	dc.b	smpsNoAttack, $01
00086454 E104                       	smpsAlterNote       $04
00086456 E701                       	dc.b	smpsNoAttack, $01
00086458 E108                       	smpsAlterNote       $08
0008645A E701                       	dc.b	smpsNoAttack, $01
0008645C E10B                       	smpsAlterNote       $0B
0008645E E701                       	dc.b	smpsNoAttack, $01
00086460 E10F                       	smpsAlterNote       $0F
00086462 E701                       	dc.b	smpsNoAttack, $01
00086464 E10B                       	smpsAlterNote       $0B
00086466 E701                       	dc.b	smpsNoAttack, $01
00086468 E105                       	smpsAlterNote       $05
0008646A E701                       	dc.b	smpsNoAttack, $01
0008646C E104                       	smpsAlterNote       $04
0008646E E701                       	dc.b	smpsNoAttack, $01
00086470 E108                       	smpsAlterNote       $08
00086472 E701                       	dc.b	smpsNoAttack, $01
00086474 E10E                       	smpsAlterNote       $0E
00086476 E701                       	dc.b	smpsNoAttack, $01
00086478 E10F                       	smpsAlterNote       $0F
0008647A 8001                       	dc.b	nRst, $01
0008647C E109                       	smpsAlterNote       $09
0008647E C20D                       	dc.b	nF5, $0D
00086480 E106                       	smpsAlterNote       $06
00086482 E701                       	dc.b	smpsNoAttack, $01
00086484 E102                       	smpsAlterNote       $02
00086486 E701                       	dc.b	smpsNoAttack, $01
00086488 E106                       	smpsAlterNote       $06
0008648A E701                       	dc.b	smpsNoAttack, $01
0008648C E109                       	smpsAlterNote       $09
0008648E E701                       	dc.b	smpsNoAttack, $01
00086490 E10D                       	smpsAlterNote       $0D
00086492 E701                       	dc.b	smpsNoAttack, $01
00086494 E109                       	smpsAlterNote       $09
00086496 E701                       	dc.b	smpsNoAttack, $01
00086498 E103                       	smpsAlterNote       $03
0008649A E701                       	dc.b	smpsNoAttack, $01
0008649C E102                       	smpsAlterNote       $02
0008649E E701                       	dc.b	smpsNoAttack, $01
000864A0 E106                       	smpsAlterNote       $06
000864A2 E701                       	dc.b	smpsNoAttack, $01
000864A4 E10C                       	smpsAlterNote       $0C
000864A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864AA E109                       	smpsAlterNote       $09
000864AC E701                       	dc.b	smpsNoAttack, $01
000864AE E103                       	smpsAlterNote       $03
000864B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864B4 E109                       	smpsAlterNote       $09
000864B6 E701                       	dc.b	smpsNoAttack, $01
000864B8 E10C                       	smpsAlterNote       $0C
000864BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864BE E106                       	smpsAlterNote       $06
000864C0 E701                       	dc.b	smpsNoAttack, $01
000864C2 E102                       	smpsAlterNote       $02
000864C4 E701                       	dc.b	smpsNoAttack, $01
000864C6 E103                       	smpsAlterNote       $03
000864C8 E701                       	dc.b	smpsNoAttack, $01
000864CA E109                       	smpsAlterNote       $09
000864CC E701                       	dc.b	smpsNoAttack, $01
000864CE E10D                       	smpsAlterNote       $0D
000864D0 E701                       	dc.b	smpsNoAttack, $01
000864D2 E109                       	smpsAlterNote       $09
000864D4 E701                       	dc.b	smpsNoAttack, $01
000864D6 E106                       	smpsAlterNote       $06
000864D8 E701                       	dc.b	smpsNoAttack, $01
000864DA E102                       	smpsAlterNote       $02
000864DC E701                       	dc.b	smpsNoAttack, $01
000864DE E106                       	smpsAlterNote       $06
000864E0 E701                       	dc.b	smpsNoAttack, $01
000864E2 E10C                       	smpsAlterNote       $0C
000864E4 E701                       	dc.b	smpsNoAttack, $01
000864E6 E10D                       	smpsAlterNote       $0D
000864E8 E701                       	dc.b	smpsNoAttack, $01
000864EA E109                       	smpsAlterNote       $09
000864EC E701                       	dc.b	smpsNoAttack, $01
000864EE E103                       	smpsAlterNote       $03
000864F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864F4 E106                       	smpsAlterNote       $06
000864F6 E701                       	dc.b	smpsNoAttack, $01
000864F8 E10C                       	smpsAlterNote       $0C
000864FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864FE E106                       	smpsAlterNote       $06
00086500 E701                       	dc.b	smpsNoAttack, $01
00086502 E103                       	smpsAlterNote       $03
00086504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086508 E109                       	smpsAlterNote       $09
0008650A E701                       	dc.b	smpsNoAttack, $01
0008650C E10D                       	smpsAlterNote       $0D
0008650E E701                       	dc.b	smpsNoAttack, $01
00086510 E10C                       	smpsAlterNote       $0C
00086512 E701                       	dc.b	smpsNoAttack, $01
00086514 E106                       	smpsAlterNote       $06
00086516 E701                       	dc.b	smpsNoAttack, $01
00086518 E103                       	smpsAlterNote       $03
0008651A 8001                       	dc.b	nRst, $01
0008651C E109                       	smpsAlterNote       $09
0008651E C206 8001                  	dc.b	nF5, $06, nRst, $01
00086524 E10C                       	smpsAlterNote       $0C
00086526 E601                       	smpsAlterVol        $01
00086528 BB0D                       	dc.b	nBb4, $0D
0008652A E106                       	smpsAlterNote       $06
0008652C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086530 E109                       	smpsAlterNote       $09
00086532 E701                       	dc.b	smpsNoAttack, $01
00086534 E10F                       	smpsAlterNote       $0F
00086536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008653A E109                       	smpsAlterNote       $09
0008653C E701                       	dc.b	smpsNoAttack, $01
0008653E E106                       	smpsAlterNote       $06
00086540 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086544 E10C                       	smpsAlterNote       $0C
00086546 E701                       	dc.b	smpsNoAttack, $01
00086548 E110                       	smpsAlterNote       $10
0008654A E701                       	dc.b	smpsNoAttack, $01
0008654C E10F                       	smpsAlterNote       $0F
0008654E E701                       	dc.b	smpsNoAttack, $01
00086550 E109                       	smpsAlterNote       $09
00086552 E701                       	dc.b	smpsNoAttack, $01
00086554 E105                       	smpsAlterNote       $05
00086556 E701                       	dc.b	smpsNoAttack, $01
00086558 E106                       	smpsAlterNote       $06
0008655A 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008655E E103                       	smpsAlterNote       $03
00086560 E701                       	dc.b	smpsNoAttack, $01
00086562 E1FF                       	smpsAlterNote       $FF
00086564 E701                       	dc.b	smpsNoAttack, $01
00086566 E103                       	smpsAlterNote       $03
00086568 E701                       	dc.b	smpsNoAttack, $01
0008656A E106                       	smpsAlterNote       $06
0008656C E701                       	dc.b	smpsNoAttack, $01
0008656E E10A                       	smpsAlterNote       $0A
00086570 E701                       	dc.b	smpsNoAttack, $01
00086572 E106                       	smpsAlterNote       $06
00086574 E701                       	dc.b	smpsNoAttack, $01
00086576 E100                       	smpsAlterNote       $00
00086578 E701                       	dc.b	smpsNoAttack, $01
0008657A E1FF                       	smpsAlterNote       $FF
0008657C E701                       	dc.b	smpsNoAttack, $01
0008657E E103                       	smpsAlterNote       $03
00086580 E701                       	dc.b	smpsNoAttack, $01
00086582 E109                       	smpsAlterNote       $09
00086584 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086588 E106                       	smpsAlterNote       $06
0008658A E701                       	dc.b	smpsNoAttack, $01
0008658C E100                       	smpsAlterNote       $00
0008658E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086592 E107                       	smpsAlterNote       $07
00086594 BF0E                       	dc.b	nD5, $0E
00086596 E101                       	smpsAlterNote       $01
00086598 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008659C E107                       	smpsAlterNote       $07
0008659E E701                       	dc.b	smpsNoAttack, $01
000865A0 E10A                       	smpsAlterNote       $0A
000865A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865A6 E104                       	smpsAlterNote       $04
000865A8 E701                       	dc.b	smpsNoAttack, $01
000865AA E100                       	smpsAlterNote       $00
000865AC E701                       	dc.b	smpsNoAttack, $01
000865AE E101                       	smpsAlterNote       $01
000865B0 E701                       	dc.b	smpsNoAttack, $01
000865B2 E107                       	smpsAlterNote       $07
000865B4 E701                       	dc.b	smpsNoAttack, $01
000865B6 E10B                       	smpsAlterNote       $0B
000865B8 E701                       	dc.b	smpsNoAttack, $01
000865BA E107                       	smpsAlterNote       $07
000865BC E701                       	dc.b	smpsNoAttack, $01
000865BE E104                       	smpsAlterNote       $04
000865C0 E701                       	dc.b	smpsNoAttack, $01
000865C2 E100                       	smpsAlterNote       $00
000865C4 E701                       	dc.b	smpsNoAttack, $01
000865C6 E101                       	smpsAlterNote       $01
000865C8 8001                       	dc.b	nRst, $01
000865CA E108                       	smpsAlterNote       $08
000865CC C10C                       	dc.b	nE5, $0C
000865CE E109                       	smpsAlterNote       $09
000865D0 C201 8001                  	dc.b	nF5, $01, nRst, $01
000865D4 E10A                       	smpsAlterNote       $0A
000865D6 8001                       	dc.b	nRst, $01
000865D8 E109                       	smpsAlterNote       $09
000865DA C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000865DE E106                       	smpsAlterNote       $06
000865E0 E701                       	dc.b	smpsNoAttack, $01
000865E2 E102                       	smpsAlterNote       $02
000865E4 E701                       	dc.b	smpsNoAttack, $01
000865E6 E103                       	smpsAlterNote       $03
000865E8 E701                       	dc.b	smpsNoAttack, $01
000865EA E109                       	smpsAlterNote       $09
000865EC E701                       	dc.b	smpsNoAttack, $01
000865EE E10D                       	smpsAlterNote       $0D
000865F0 E701                       	dc.b	smpsNoAttack, $01
000865F2 E109                       	smpsAlterNote       $09
000865F4 E701                       	dc.b	smpsNoAttack, $01
000865F6 E106                       	smpsAlterNote       $06
000865F8 E701                       	dc.b	smpsNoAttack, $01
000865FA E102                       	smpsAlterNote       $02
000865FC E701                       	dc.b	smpsNoAttack, $01
000865FE E106                       	smpsAlterNote       $06
00086600 E701                       	dc.b	smpsNoAttack, $01
00086602 E10C                       	smpsAlterNote       $0C
00086604 E701                       	dc.b	smpsNoAttack, $01
00086606 E10D                       	smpsAlterNote       $0D
00086608 E701                       	dc.b	smpsNoAttack, $01
0008660A E109                       	smpsAlterNote       $09
0008660C C40D                       	dc.b	nG5, $0D
0008660E E106                       	smpsAlterNote       $06
00086610 E701                       	dc.b	smpsNoAttack, $01
00086612 E102                       	smpsAlterNote       $02
00086614 E701                       	dc.b	smpsNoAttack, $01
00086616 E103                       	smpsAlterNote       $03
00086618 E701                       	dc.b	smpsNoAttack, $01
0008661A E109                       	smpsAlterNote       $09
0008661C E701                       	dc.b	smpsNoAttack, $01
0008661E E108                       	smpsAlterNote       $08
00086620 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008662C E109                       	smpsAlterNote       $09
0008662E C20D                       	dc.b	nF5, $0D
00086630 E106                       	smpsAlterNote       $06
00086632 E701                       	dc.b	smpsNoAttack, $01
00086634 E102                       	smpsAlterNote       $02
00086636 E701                       	dc.b	smpsNoAttack, $01
00086638 E106                       	smpsAlterNote       $06
0008663A E701                       	dc.b	smpsNoAttack, $01
0008663C E109                       	smpsAlterNote       $09
0008663E E701                       	dc.b	smpsNoAttack, $01
00086640 E10D                       	smpsAlterNote       $0D
00086642 E701                       	dc.b	smpsNoAttack, $01
00086644 E109                       	smpsAlterNote       $09
00086646 E701                       	dc.b	smpsNoAttack, $01
00086648 E103                       	smpsAlterNote       $03
0008664A E701                       	dc.b	smpsNoAttack, $01
0008664C E102                       	smpsAlterNote       $02
0008664E E701                       	dc.b	smpsNoAttack, $01
00086650 E106                       	smpsAlterNote       $06
00086652 E701                       	dc.b	smpsNoAttack, $01
00086654 E10C                       	smpsAlterNote       $0C
00086656 E701                       	dc.b	smpsNoAttack, $01
00086658 E10D                       	smpsAlterNote       $0D
0008665A 8001                       	dc.b	nRst, $01
0008665C E112                       	smpsAlterNote       $12
0008665E C401                       	dc.b	nG5, $01
00086660 E1EB                       	smpsAlterNote       $EB
00086662 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00086665 E1FD                       	smpsAlterNote       $FD
00086667 E701                       	dc.b	smpsNoAttack, $01
00086669 E10F                       	smpsAlterNote       $0F
0008666B E701                       	dc.b	smpsNoAttack, $01
0008666D E118                       	smpsAlterNote       $18
0008666F E701                       	dc.b	smpsNoAttack, $01
00086671 E1ED                       	smpsAlterNote       $ED
00086673 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00086676 E1FF                       	smpsAlterNote       $FF
00086678 E701                       	dc.b	smpsNoAttack, $01
0008667A E10B                       	smpsAlterNote       $0B
0008667C E703                       	dc.b	smpsNoAttack, $03
0008667E E109                       	smpsAlterNote       $09
00086680 C407                       	dc.b	nG5, $07
00086682 E108                       	smpsAlterNote       $08
00086684 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00086690 E109                       	smpsAlterNote       $09
00086692 C20D                       	dc.b	nF5, $0D
00086694 E103                       	smpsAlterNote       $03
00086696 E701                       	dc.b	smpsNoAttack, $01
00086698 E102                       	smpsAlterNote       $02
0008669A E701                       	dc.b	smpsNoAttack, $01
0008669C E106                       	smpsAlterNote       $06
0008669E E701                       	dc.b	smpsNoAttack, $01
000866A0 E10C                       	smpsAlterNote       $0C
000866A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866A6 E109                       	smpsAlterNote       $09
000866A8 E701                       	dc.b	smpsNoAttack, $01
000866AA E103                       	smpsAlterNote       $03
000866AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866B0 E109                       	smpsAlterNote       $09
000866B2 E701                       	dc.b	smpsNoAttack, $01
000866B4 E10C                       	smpsAlterNote       $0C
000866B6 E701                       	dc.b	smpsNoAttack, $01
000866B8 E10D                       	smpsAlterNote       $0D
000866BA 8001                       	dc.b	nRst, $01
000866BC E10B                       	smpsAlterNote       $0B
000866BE C609 8001                  	dc.b	nA5, $09, nRst, $01
000866C2 E109                       	smpsAlterNote       $09
000866C4 B806 8001                  	dc.b	nG4, $06, nRst, $01
000866C8 E108                       	smpsAlterNote       $08
000866CA C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000866D6 8001                       	dc.b	nRst, $01
000866D8 E109                       	smpsAlterNote       $09
000866DA C20D                       	dc.b	nF5, $0D
000866DC E103                       	smpsAlterNote       $03
000866DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866E2 E106                       	smpsAlterNote       $06
000866E4 E701                       	dc.b	smpsNoAttack, $01
000866E6 E10C                       	smpsAlterNote       $0C
000866E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866EC E106                       	smpsAlterNote       $06
000866EE E701                       	dc.b	smpsNoAttack, $01
000866F0 E103                       	smpsAlterNote       $03
000866F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866F6 E109                       	smpsAlterNote       $09
000866F8 E701                       	dc.b	smpsNoAttack, $01
000866FA E10D                       	smpsAlterNote       $0D
000866FC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086702 E108                       	smpsAlterNote       $08
00086704 E6FF                       	smpsAlterVol        $FF
00086706 A806                       	dc.b	nEb3, $06
00086708 E10C                       	smpsAlterNote       $0C
0008670A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008670E E108                       	smpsAlterNote       $08
00086710 A803                       	dc.b	nEb3, $03
00086712 E109                       	smpsAlterNote       $09
00086714 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00086718 E10C                       	smpsAlterNote       $0C
0008671A AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00086724 E109                       	smpsAlterNote       $09
00086726 E602                       	smpsAlterVol        $02
00086728 B604                       	dc.b	nF4, $04
0008672A E602                       	smpsAlterVol        $02
0008672C F6F1 AA                    	smpsJump            music84_Jump02
0008672F                            
0008672F                            ; FM4 Data
0008672F                            music84_FM4:
00086731 E040                       	smpsPan             panRight, $00
00086733 8003                       	dc.b	nRst, $03
00086735 E10F                       	smpsAlterNote       $0F
00086737 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008673B E10D                       	smpsAlterNote       $0D
0008673D C403 800A                  	dc.b	nG5, $03, nRst, $0A
00086741 E10C                       	smpsAlterNote       $0C
00086743 C103 8004                  	dc.b	nE5, $03, nRst, $04
00086749 E6FE                       	smpsAlterVol        $FE
0008674B E110                       	smpsAlterNote       $10
0008674D C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086751 E10F                       	smpsAlterNote       $0F
00086753 C602 8001                  	dc.b	nA5, $02, nRst, $01
00086757 E10D                       	smpsAlterNote       $0D
00086759 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00086762 E10C                       	smpsAlterNote       $0C
00086764 C103                       	dc.b	nE5, $03
00086766 E10A                       	smpsAlterNote       $0A
00086768 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008676E 03                         	dc.b	$03
0008676F                            
0008676F                            music84_Jump01:
0008676F E10B                       	smpsAlterNote       $0B
00086771 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086775 E10C                       	smpsAlterNote       $0C
00086777 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008677B E10D                       	smpsAlterNote       $0D
0008677D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00086787 E10B                       	smpsAlterNote       $0B
00086789 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008678D E107                       	smpsAlterNote       $07
0008678F E701                       	dc.b	smpsNoAttack, $01
00086791 E103                       	smpsAlterNote       $03
00086793 E701                       	dc.b	smpsNoAttack, $01
00086795 E104                       	smpsAlterNote       $04
00086797 E701                       	dc.b	smpsNoAttack, $01
00086799 E10A                       	smpsAlterNote       $0A
0008679B E701                       	dc.b	smpsNoAttack, $01
0008679D E10E                       	smpsAlterNote       $0E
0008679F E701                       	dc.b	smpsNoAttack, $01
000867A1 E10A                       	smpsAlterNote       $0A
000867A3 E701                       	dc.b	smpsNoAttack, $01
000867A5 E107                       	smpsAlterNote       $07
000867A7 E701                       	dc.b	smpsNoAttack, $01
000867A9 E104                       	smpsAlterNote       $04
000867AB 8001                       	dc.b	nRst, $01
000867AD E110                       	smpsAlterNote       $10
000867AF C703                       	dc.b	nBb5, $03
000867B1 E10F                       	smpsAlterNote       $0F
000867B3 C603 8001                  	dc.b	nA5, $03, nRst, $01
000867B7 E10D                       	smpsAlterNote       $0D
000867B9 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
000867BF E10C                       	smpsAlterNote       $0C
000867C1 E701                       	dc.b	smpsNoAttack, $01
000867C3 E108                       	smpsAlterNote       $08
000867C5 E701                       	dc.b	smpsNoAttack, $01
000867C7 E10C                       	smpsAlterNote       $0C
000867C9 E701                       	dc.b	smpsNoAttack, $01
000867CB E10F                       	smpsAlterNote       $0F
000867CD E701                       	dc.b	smpsNoAttack, $01
000867CF E113                       	smpsAlterNote       $13
000867D1 E701                       	dc.b	smpsNoAttack, $01
000867D3 E10F                       	smpsAlterNote       $0F
000867D5 E701                       	dc.b	smpsNoAttack, $01
000867D7 E109                       	smpsAlterNote       $09
000867D9 E701                       	dc.b	smpsNoAttack, $01
000867DB E108                       	smpsAlterNote       $08
000867DD E701                       	dc.b	smpsNoAttack, $01
000867DF E10C                       	smpsAlterNote       $0C
000867E1 E701                       	dc.b	smpsNoAttack, $01
000867E3 E112                       	smpsAlterNote       $12
000867E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867E9 E10C                       	smpsAlterNote       $0C
000867EB E701                       	dc.b	smpsNoAttack, $01
000867ED E109                       	smpsAlterNote       $09
000867EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867F3 E10F                       	smpsAlterNote       $0F
000867F5 E701                       	dc.b	smpsNoAttack, $01
000867F7 E113                       	smpsAlterNote       $13
000867F9 E701                       	dc.b	smpsNoAttack, $01
000867FB E112                       	smpsAlterNote       $12
000867FD E701                       	dc.b	smpsNoAttack, $01
000867FF E10C                       	smpsAlterNote       $0C
00086801 E701                       	dc.b	smpsNoAttack, $01
00086803 E108                       	smpsAlterNote       $08
00086805 E701                       	dc.b	smpsNoAttack, $01
00086807 E10C                       	smpsAlterNote       $0C
00086809 E701                       	dc.b	smpsNoAttack, $01
0008680B E10F                       	smpsAlterNote       $0F
0008680D E701                       	dc.b	smpsNoAttack, $01
0008680F E113                       	smpsAlterNote       $13
00086811 E701                       	dc.b	smpsNoAttack, $01
00086813 E10F                       	smpsAlterNote       $0F
00086815 E701                       	dc.b	smpsNoAttack, $01
00086817 E109                       	smpsAlterNote       $09
00086819 E701                       	dc.b	smpsNoAttack, $01
0008681B E108                       	smpsAlterNote       $08
0008681D E701                       	dc.b	smpsNoAttack, $01
0008681F E10C                       	smpsAlterNote       $0C
00086821 E701                       	dc.b	smpsNoAttack, $01
00086823 E112                       	smpsAlterNote       $12
00086825 E701                       	dc.b	smpsNoAttack, $01
00086827 E113                       	smpsAlterNote       $13
00086829 800F                       	dc.b	nRst, $0F
0008682B E10B                       	smpsAlterNote       $0B
0008682D BF03                       	dc.b	nD5, $03
0008682F E10C                       	smpsAlterNote       $0C
00086831 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086835 E10D                       	smpsAlterNote       $0D
00086837 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008683F E10B                       	smpsAlterNote       $0B
00086841 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008684B E110                       	smpsAlterNote       $10
0008684D C704                       	dc.b	nBb5, $04
0008684F E10F                       	smpsAlterNote       $0F
00086851 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086855 E10D                       	smpsAlterNote       $0D
00086857 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008685D E109                       	smpsAlterNote       $09
0008685F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086863 E10F                       	smpsAlterNote       $0F
00086865 E701                       	dc.b	smpsNoAttack, $01
00086867 E112                       	smpsAlterNote       $12
00086869 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008686D E10C                       	smpsAlterNote       $0C
0008686F E701                       	dc.b	smpsNoAttack, $01
00086871 E108                       	smpsAlterNote       $08
00086873 E701                       	dc.b	smpsNoAttack, $01
00086875 E109                       	smpsAlterNote       $09
00086877 E701                       	dc.b	smpsNoAttack, $01
00086879 E10F                       	smpsAlterNote       $0F
0008687B E701                       	dc.b	smpsNoAttack, $01
0008687D E113                       	smpsAlterNote       $13
0008687F E701                       	dc.b	smpsNoAttack, $01
00086881 E10F                       	smpsAlterNote       $0F
00086883 E701                       	dc.b	smpsNoAttack, $01
00086885 E10C                       	smpsAlterNote       $0C
00086887 E701                       	dc.b	smpsNoAttack, $01
00086889 E108                       	smpsAlterNote       $08
0008688B E701                       	dc.b	smpsNoAttack, $01
0008688D E10C                       	smpsAlterNote       $0C
0008688F E701                       	dc.b	smpsNoAttack, $01
00086891 E112                       	smpsAlterNote       $12
00086893 E701                       	dc.b	smpsNoAttack, $01
00086895 E113                       	smpsAlterNote       $13
00086897 E701                       	dc.b	smpsNoAttack, $01
00086899 E10F                       	smpsAlterNote       $0F
0008689B E701                       	dc.b	smpsNoAttack, $01
0008689D E109                       	smpsAlterNote       $09
0008689F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868A3 E10C                       	smpsAlterNote       $0C
000868A5 E701                       	dc.b	smpsNoAttack, $01
000868A7 E112                       	smpsAlterNote       $12
000868A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868AD E10C                       	smpsAlterNote       $0C
000868AF E701                       	dc.b	smpsNoAttack, $01
000868B1 E109                       	smpsAlterNote       $09
000868B3 E701                       	dc.b	smpsNoAttack, $01
000868B5 E10D                       	smpsAlterNote       $0D
000868B7 C401 8001                  	dc.b	nG5, $01, nRst, $01
000868BB E10F                       	smpsAlterNote       $0F
000868BD C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
000868C7 E10D                       	smpsAlterNote       $0D
000868C9 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000868CF E10B                       	smpsAlterNote       $0B
000868D1 BF0D                       	dc.b	nD5, $0D
000868D3 E108                       	smpsAlterNote       $08
000868D5 E701                       	dc.b	smpsNoAttack, $01
000868D7 E104                       	smpsAlterNote       $04
000868D9 E701                       	dc.b	smpsNoAttack, $01
000868DB E108                       	smpsAlterNote       $08
000868DD E701                       	dc.b	smpsNoAttack, $01
000868DF E10B                       	smpsAlterNote       $0B
000868E1 E701                       	dc.b	smpsNoAttack, $01
000868E3 E10F                       	smpsAlterNote       $0F
000868E5 E701                       	dc.b	smpsNoAttack, $01
000868E7 E10B                       	smpsAlterNote       $0B
000868E9 E701                       	dc.b	smpsNoAttack, $01
000868EB E105                       	smpsAlterNote       $05
000868ED E701                       	dc.b	smpsNoAttack, $01
000868EF E104                       	smpsAlterNote       $04
000868F1 E701                       	dc.b	smpsNoAttack, $01
000868F3 E108                       	smpsAlterNote       $08
000868F5 E701                       	dc.b	smpsNoAttack, $01
000868F7 E10E                       	smpsAlterNote       $0E
000868F9 E701                       	dc.b	smpsNoAttack, $01
000868FB E10F                       	smpsAlterNote       $0F
000868FD 8001                       	dc.b	nRst, $01
000868FF E10C                       	smpsAlterNote       $0C
00086901 C101                       	dc.b	nE5, $01
00086903 E10D                       	smpsAlterNote       $0D
00086905 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008690B E10F                       	smpsAlterNote       $0F
0008690D C606 8001                  	dc.b	nA5, $06, nRst, $01
00086911 E10C                       	smpsAlterNote       $0C
00086913 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00086917 E10D                       	smpsAlterNote       $0D
00086919 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008691D E10C                       	smpsAlterNote       $0C
0008691F CD03                       	dc.b	nE6, $03
00086921 E10A                       	smpsAlterNote       $0A
00086923 C903 8001                  	dc.b	nC6, $03, nRst, $01
00086927 E10D                       	smpsAlterNote       $0D
00086929 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00086931 E109                       	smpsAlterNote       $09
00086933 E701                       	dc.b	smpsNoAttack, $01
00086935 E10D                       	smpsAlterNote       $0D
00086937 E701                       	dc.b	smpsNoAttack, $01
00086939 E110                       	smpsAlterNote       $10
0008693B E701                       	dc.b	smpsNoAttack, $01
0008693D E114                       	smpsAlterNote       $14
0008693F E701                       	dc.b	smpsNoAttack, $01
00086941 E110                       	smpsAlterNote       $10
00086943 E701                       	dc.b	smpsNoAttack, $01
00086945 E10A                       	smpsAlterNote       $0A
00086947 E701                       	dc.b	smpsNoAttack, $01
00086949 E109                       	smpsAlterNote       $09
0008694B E701                       	dc.b	smpsNoAttack, $01
0008694D E10D                       	smpsAlterNote       $0D
0008694F E701                       	dc.b	smpsNoAttack, $01
00086951 E113                       	smpsAlterNote       $13
00086953 E701                       	dc.b	smpsNoAttack, $01
00086955 E114                       	smpsAlterNote       $14
00086957 8001                       	dc.b	nRst, $01
00086959 E10F                       	smpsAlterNote       $0F
0008695B C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00086961 E10C                       	smpsAlterNote       $0C
00086963 E701                       	dc.b	smpsNoAttack, $01
00086965 E108                       	smpsAlterNote       $08
00086967 E701                       	dc.b	smpsNoAttack, $01
00086969 E10C                       	smpsAlterNote       $0C
0008696B E701                       	dc.b	smpsNoAttack, $01
0008696D E112                       	smpsAlterNote       $12
0008696F E701                       	dc.b	smpsNoAttack, $01
00086971 E113                       	smpsAlterNote       $13
00086973 E701                       	dc.b	smpsNoAttack, $01
00086975 E10F                       	smpsAlterNote       $0F
00086977 E701                       	dc.b	smpsNoAttack, $01
00086979 E109                       	smpsAlterNote       $09
0008697B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008697F E10C                       	smpsAlterNote       $0C
00086981 E701                       	dc.b	smpsNoAttack, $01
00086983 E112                       	smpsAlterNote       $12
00086985 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086989 E10C                       	smpsAlterNote       $0C
0008698B E701                       	dc.b	smpsNoAttack, $01
0008698D E109                       	smpsAlterNote       $09
0008698F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086993 E10F                       	smpsAlterNote       $0F
00086995 E701                       	dc.b	smpsNoAttack, $01
00086997 E113                       	smpsAlterNote       $13
00086999 E701                       	dc.b	smpsNoAttack, $01
0008699B E112                       	smpsAlterNote       $12
0008699D E701                       	dc.b	smpsNoAttack, $01
0008699F E10C                       	smpsAlterNote       $0C
000869A1 E701                       	dc.b	smpsNoAttack, $01
000869A3 E108                       	smpsAlterNote       $08
000869A5 E701                       	dc.b	smpsNoAttack, $01
000869A7 E10C                       	smpsAlterNote       $0C
000869A9 E701                       	dc.b	smpsNoAttack, $01
000869AB E10F                       	smpsAlterNote       $0F
000869AD E701                       	dc.b	smpsNoAttack, $01
000869AF E113                       	smpsAlterNote       $13
000869B1 E701                       	dc.b	smpsNoAttack, $01
000869B3 E10F                       	smpsAlterNote       $0F
000869B5 E701                       	dc.b	smpsNoAttack, $01
000869B7 E109                       	smpsAlterNote       $09
000869B9 E701                       	dc.b	smpsNoAttack, $01
000869BB E108                       	smpsAlterNote       $08
000869BD E701                       	dc.b	smpsNoAttack, $01
000869BF E10C                       	smpsAlterNote       $0C
000869C1 E701                       	dc.b	smpsNoAttack, $01
000869C3 E112                       	smpsAlterNote       $12
000869C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869C9 E10F                       	smpsAlterNote       $0F
000869CB E701                       	dc.b	smpsNoAttack, $01
000869CD E109                       	smpsAlterNote       $09
000869CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869D3 E10F                       	smpsAlterNote       $0F
000869D5 E701                       	dc.b	smpsNoAttack, $01
000869D7 E113                       	smpsAlterNote       $13
000869D9 E701                       	dc.b	smpsNoAttack, $01
000869DB E112                       	smpsAlterNote       $12
000869DD E701                       	dc.b	smpsNoAttack, $01
000869DF E10C                       	smpsAlterNote       $0C
000869E1 E701                       	dc.b	smpsNoAttack, $01
000869E3 E108                       	smpsAlterNote       $08
000869E5 E701                       	dc.b	smpsNoAttack, $01
000869E7 E10C                       	smpsAlterNote       $0C
000869E9 E701                       	dc.b	smpsNoAttack, $01
000869EB E10F                       	smpsAlterNote       $0F
000869ED E701                       	dc.b	smpsNoAttack, $01
000869EF E113                       	smpsAlterNote       $13
000869F1 E701                       	dc.b	smpsNoAttack, $01
000869F3 E10F                       	smpsAlterNote       $0F
000869F5 E701                       	dc.b	smpsNoAttack, $01
000869F7 E109                       	smpsAlterNote       $09
000869F9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000869FD E10F                       	smpsAlterNote       $0F
000869FF C60D                       	dc.b	nA5, $0D
00086A01 E109                       	smpsAlterNote       $09
00086A03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A07 E10C                       	smpsAlterNote       $0C
00086A09 E701                       	dc.b	smpsNoAttack, $01
00086A0B E112                       	smpsAlterNote       $12
00086A0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A11 E10C                       	smpsAlterNote       $0C
00086A13 E701                       	dc.b	smpsNoAttack, $01
00086A15 E109                       	smpsAlterNote       $09
00086A17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A1B E10F                       	smpsAlterNote       $0F
00086A1D E701                       	dc.b	smpsNoAttack, $01
00086A1F E113                       	smpsAlterNote       $13
00086A21 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086A27 E10D                       	smpsAlterNote       $0D
00086A29 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00086A31 E10C                       	smpsAlterNote       $0C
00086A33 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00086A39 E6FF                       	smpsAlterVol        $FF
00086A3B E10B                       	smpsAlterNote       $0B
00086A3D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086A41 E10C                       	smpsAlterNote       $0C
00086A43 C103                       	dc.b	nE5, $03
00086A45 E10D                       	smpsAlterNote       $0D
00086A47 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00086A51 E10B                       	smpsAlterNote       $0B
00086A53 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00086A57 E107                       	smpsAlterNote       $07
00086A59 E701                       	dc.b	smpsNoAttack, $01
00086A5B E104                       	smpsAlterNote       $04
00086A5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A61 E10A                       	smpsAlterNote       $0A
00086A63 E701                       	dc.b	smpsNoAttack, $01
00086A65 E10D                       	smpsAlterNote       $0D
00086A67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A6B E107                       	smpsAlterNote       $07
00086A6D E701                       	dc.b	smpsNoAttack, $01
00086A6F E104                       	smpsAlterNote       $04
00086A71 8001                       	dc.b	nRst, $01
00086A73 E110                       	smpsAlterNote       $10
00086A75 C703                       	dc.b	nBb5, $03
00086A77 E10F                       	smpsAlterNote       $0F
00086A79 C603 8001                  	dc.b	nA5, $03, nRst, $01
00086A7D E10D                       	smpsAlterNote       $0D
00086A7F C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00086A83 E10C                       	smpsAlterNote       $0C
00086A85 E701                       	dc.b	smpsNoAttack, $01
00086A87 E108                       	smpsAlterNote       $08
00086A89 E701                       	dc.b	smpsNoAttack, $01
00086A8B E109                       	smpsAlterNote       $09
00086A8D E701                       	dc.b	smpsNoAttack, $01
00086A8F E10F                       	smpsAlterNote       $0F
00086A91 E701                       	dc.b	smpsNoAttack, $01
00086A93 E113                       	smpsAlterNote       $13
00086A95 E701                       	dc.b	smpsNoAttack, $01
00086A97 E10F                       	smpsAlterNote       $0F
00086A99 E701                       	dc.b	smpsNoAttack, $01
00086A9B E10C                       	smpsAlterNote       $0C
00086A9D E701                       	dc.b	smpsNoAttack, $01
00086A9F E108                       	smpsAlterNote       $08
00086AA1 E701                       	dc.b	smpsNoAttack, $01
00086AA3 E10C                       	smpsAlterNote       $0C
00086AA5 E701                       	dc.b	smpsNoAttack, $01
00086AA7 E112                       	smpsAlterNote       $12
00086AA9 E701                       	dc.b	smpsNoAttack, $01
00086AAB E113                       	smpsAlterNote       $13
00086AAD E701                       	dc.b	smpsNoAttack, $01
00086AAF E10F                       	smpsAlterNote       $0F
00086AB1 E701                       	dc.b	smpsNoAttack, $01
00086AB3 E109                       	smpsAlterNote       $09
00086AB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AB9 E10C                       	smpsAlterNote       $0C
00086ABB E701                       	dc.b	smpsNoAttack, $01
00086ABD E112                       	smpsAlterNote       $12
00086ABF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AC3 E10C                       	smpsAlterNote       $0C
00086AC5 E701                       	dc.b	smpsNoAttack, $01
00086AC7 E109                       	smpsAlterNote       $09
00086AC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ACD E10F                       	smpsAlterNote       $0F
00086ACF E701                       	dc.b	smpsNoAttack, $01
00086AD1 E113                       	smpsAlterNote       $13
00086AD3 E701                       	dc.b	smpsNoAttack, $01
00086AD5 E112                       	smpsAlterNote       $12
00086AD7 E701                       	dc.b	smpsNoAttack, $01
00086AD9 E10C                       	smpsAlterNote       $0C
00086ADB E701                       	dc.b	smpsNoAttack, $01
00086ADD E108                       	smpsAlterNote       $08
00086ADF E701                       	dc.b	smpsNoAttack, $01
00086AE1 E10C                       	smpsAlterNote       $0C
00086AE3 E701                       	dc.b	smpsNoAttack, $01
00086AE5 E10F                       	smpsAlterNote       $0F
00086AE7 E701                       	dc.b	smpsNoAttack, $01
00086AE9 E113                       	smpsAlterNote       $13
00086AEB E701                       	dc.b	smpsNoAttack, $01
00086AED E10F                       	smpsAlterNote       $0F
00086AEF BA03 8001                  	dc.b	nA4, $03, nRst, $01
00086AF3 E110                       	smpsAlterNote       $10
00086AF5 BB03                       	dc.b	nBb4, $03
00086AF7 E10F                       	smpsAlterNote       $0F
00086AF9 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00086AFD E10B                       	smpsAlterNote       $0B
00086AFF BF03                       	dc.b	nD5, $03
00086B01 E10C                       	smpsAlterNote       $0C
00086B03 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086B07 E10D                       	smpsAlterNote       $0D
00086B09 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00086B13 E10B                       	smpsAlterNote       $0B
00086B15 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00086B21 E110                       	smpsAlterNote       $10
00086B23 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00086B27 E10F                       	smpsAlterNote       $0F
00086B29 C604                       	dc.b	nA5, $04
00086B2B E10D                       	smpsAlterNote       $0D
00086B2D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00086B33 E109                       	smpsAlterNote       $09
00086B35 E701                       	dc.b	smpsNoAttack, $01
00086B37 E108                       	smpsAlterNote       $08
00086B39 E701                       	dc.b	smpsNoAttack, $01
00086B3B E10C                       	smpsAlterNote       $0C
00086B3D E701                       	dc.b	smpsNoAttack, $01
00086B3F E112                       	smpsAlterNote       $12
00086B41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B45 E10F                       	smpsAlterNote       $0F
00086B47 E701                       	dc.b	smpsNoAttack, $01
00086B49 E109                       	smpsAlterNote       $09
00086B4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B4F E10F                       	smpsAlterNote       $0F
00086B51 E701                       	dc.b	smpsNoAttack, $01
00086B53 E112                       	smpsAlterNote       $12
00086B55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B59 E10C                       	smpsAlterNote       $0C
00086B5B E701                       	dc.b	smpsNoAttack, $01
00086B5D E108                       	smpsAlterNote       $08
00086B5F E701                       	dc.b	smpsNoAttack, $01
00086B61 E109                       	smpsAlterNote       $09
00086B63 E701                       	dc.b	smpsNoAttack, $01
00086B65 E10F                       	smpsAlterNote       $0F
00086B67 E701                       	dc.b	smpsNoAttack, $01
00086B69 E113                       	smpsAlterNote       $13
00086B6B E701                       	dc.b	smpsNoAttack, $01
00086B6D E10F                       	smpsAlterNote       $0F
00086B6F E701                       	dc.b	smpsNoAttack, $01
00086B71 E10C                       	smpsAlterNote       $0C
00086B73 E701                       	dc.b	smpsNoAttack, $01
00086B75 E108                       	smpsAlterNote       $08
00086B77 E701                       	dc.b	smpsNoAttack, $01
00086B79 E10C                       	smpsAlterNote       $0C
00086B7B E701                       	dc.b	smpsNoAttack, $01
00086B7D E112                       	smpsAlterNote       $12
00086B7F E701                       	dc.b	smpsNoAttack, $01
00086B81 E113                       	smpsAlterNote       $13
00086B83 E701                       	dc.b	smpsNoAttack, $01
00086B85 E10F                       	smpsAlterNote       $0F
00086B87 E701                       	dc.b	smpsNoAttack, $01
00086B89 E109                       	smpsAlterNote       $09
00086B8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B8F E10C                       	smpsAlterNote       $0C
00086B91 E701                       	dc.b	smpsNoAttack, $01
00086B93 E112                       	smpsAlterNote       $12
00086B95 E701                       	dc.b	smpsNoAttack, $01
00086B97 E113                       	smpsAlterNote       $13
00086B99 8001                       	dc.b	nRst, $01
00086B9B E10F                       	smpsAlterNote       $0F
00086B9D C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00086BA9 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00086BB1 E10D                       	smpsAlterNote       $0D
00086BB3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00086BB9 E10B                       	smpsAlterNote       $0B
00086BBB BF0D                       	dc.b	nD5, $0D
00086BBD E108                       	smpsAlterNote       $08
00086BBF E701                       	dc.b	smpsNoAttack, $01
00086BC1 E104                       	smpsAlterNote       $04
00086BC3 E701                       	dc.b	smpsNoAttack, $01
00086BC5 E105                       	smpsAlterNote       $05
00086BC7 E701                       	dc.b	smpsNoAttack, $01
00086BC9 E10B                       	smpsAlterNote       $0B
00086BCB E701                       	dc.b	smpsNoAttack, $01
00086BCD E10F                       	smpsAlterNote       $0F
00086BCF E701                       	dc.b	smpsNoAttack, $01
00086BD1 E10B                       	smpsAlterNote       $0B
00086BD3 E701                       	dc.b	smpsNoAttack, $01
00086BD5 E108                       	smpsAlterNote       $08
00086BD7 E701                       	dc.b	smpsNoAttack, $01
00086BD9 E104                       	smpsAlterNote       $04
00086BDB E701                       	dc.b	smpsNoAttack, $01
00086BDD E108                       	smpsAlterNote       $08
00086BDF E701                       	dc.b	smpsNoAttack, $01
00086BE1 E10E                       	smpsAlterNote       $0E
00086BE3 E701                       	dc.b	smpsNoAttack, $01
00086BE5 E10F                       	smpsAlterNote       $0F
00086BE7 E701                       	dc.b	smpsNoAttack, $01
00086BE9 E10C                       	smpsAlterNote       $0C
00086BEB C101                       	dc.b	nE5, $01
00086BED E10D                       	smpsAlterNote       $0D
00086BEF C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00086BF7 E10F                       	smpsAlterNote       $0F
00086BF9 C607                       	dc.b	nA5, $07
00086BFB E10C                       	smpsAlterNote       $0C
00086BFD CD07                       	dc.b	nE6, $07
00086BFF E10D                       	smpsAlterNote       $0D
00086C01 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00086C05 E10C                       	smpsAlterNote       $0C
00086C07 CD03                       	dc.b	nE6, $03
00086C09 E10A                       	smpsAlterNote       $0A
00086C0B C903 8001                  	dc.b	nC6, $03, nRst, $01
00086C0F E10D                       	smpsAlterNote       $0D
00086C11 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00086C17 E10A                       	smpsAlterNote       $0A
00086C19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C1D E110                       	smpsAlterNote       $10
00086C1F E701                       	dc.b	smpsNoAttack, $01
00086C21 E114                       	smpsAlterNote       $14
00086C23 E701                       	dc.b	smpsNoAttack, $01
00086C25 E113                       	smpsAlterNote       $13
00086C27 E701                       	dc.b	smpsNoAttack, $01
00086C29 E10D                       	smpsAlterNote       $0D
00086C2B E701                       	dc.b	smpsNoAttack, $01
00086C2D E109                       	smpsAlterNote       $09
00086C2F E701                       	dc.b	smpsNoAttack, $01
00086C31 E10D                       	smpsAlterNote       $0D
00086C33 E701                       	dc.b	smpsNoAttack, $01
00086C35 E110                       	smpsAlterNote       $10
00086C37 E701                       	dc.b	smpsNoAttack, $01
00086C39 E114                       	smpsAlterNote       $14
00086C3B E701                       	dc.b	smpsNoAttack, $01
00086C3D E10F                       	smpsAlterNote       $0F
00086C3F C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00086C43 E10C                       	smpsAlterNote       $0C
00086C45 E701                       	dc.b	smpsNoAttack, $01
00086C47 E108                       	smpsAlterNote       $08
00086C49 E701                       	dc.b	smpsNoAttack, $01
00086C4B E10C                       	smpsAlterNote       $0C
00086C4D E701                       	dc.b	smpsNoAttack, $01
00086C4F E10F                       	smpsAlterNote       $0F
00086C51 E701                       	dc.b	smpsNoAttack, $01
00086C53 E113                       	smpsAlterNote       $13
00086C55 E701                       	dc.b	smpsNoAttack, $01
00086C57 E10F                       	smpsAlterNote       $0F
00086C59 E701                       	dc.b	smpsNoAttack, $01
00086C5B E109                       	smpsAlterNote       $09
00086C5D E701                       	dc.b	smpsNoAttack, $01
00086C5F E108                       	smpsAlterNote       $08
00086C61 E701                       	dc.b	smpsNoAttack, $01
00086C63 E10C                       	smpsAlterNote       $0C
00086C65 E701                       	dc.b	smpsNoAttack, $01
00086C67 E112                       	smpsAlterNote       $12
00086C69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C6D E10F                       	smpsAlterNote       $0F
00086C6F E701                       	dc.b	smpsNoAttack, $01
00086C71 E109                       	smpsAlterNote       $09
00086C73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C77 E10F                       	smpsAlterNote       $0F
00086C79 E701                       	dc.b	smpsNoAttack, $01
00086C7B E112                       	smpsAlterNote       $12
00086C7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C81 E10C                       	smpsAlterNote       $0C
00086C83 E701                       	dc.b	smpsNoAttack, $01
00086C85 E108                       	smpsAlterNote       $08
00086C87 E701                       	dc.b	smpsNoAttack, $01
00086C89 E109                       	smpsAlterNote       $09
00086C8B E701                       	dc.b	smpsNoAttack, $01
00086C8D E10F                       	smpsAlterNote       $0F
00086C8F E701                       	dc.b	smpsNoAttack, $01
00086C91 E113                       	smpsAlterNote       $13
00086C93 E701                       	dc.b	smpsNoAttack, $01
00086C95 E10F                       	smpsAlterNote       $0F
00086C97 E701                       	dc.b	smpsNoAttack, $01
00086C99 E10C                       	smpsAlterNote       $0C
00086C9B E701                       	dc.b	smpsNoAttack, $01
00086C9D E108                       	smpsAlterNote       $08
00086C9F E701                       	dc.b	smpsNoAttack, $01
00086CA1 E10C                       	smpsAlterNote       $0C
00086CA3 E701                       	dc.b	smpsNoAttack, $01
00086CA5 E112                       	smpsAlterNote       $12
00086CA7 E701                       	dc.b	smpsNoAttack, $01
00086CA9 E113                       	smpsAlterNote       $13
00086CAB E701                       	dc.b	smpsNoAttack, $01
00086CAD E10F                       	smpsAlterNote       $0F
00086CAF E701                       	dc.b	smpsNoAttack, $01
00086CB1 E109                       	smpsAlterNote       $09
00086CB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CB7 E10C                       	smpsAlterNote       $0C
00086CB9 E701                       	dc.b	smpsNoAttack, $01
00086CBB E112                       	smpsAlterNote       $12
00086CBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CC1 E10C                       	smpsAlterNote       $0C
00086CC3 E701                       	dc.b	smpsNoAttack, $01
00086CC5 E109                       	smpsAlterNote       $09
00086CC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CCB E10F                       	smpsAlterNote       $0F
00086CCD E701                       	dc.b	smpsNoAttack, $01
00086CCF E113                       	smpsAlterNote       $13
00086CD1 E701                       	dc.b	smpsNoAttack, $01
00086CD3 E112                       	smpsAlterNote       $12
00086CD5 E701                       	dc.b	smpsNoAttack, $01
00086CD7 E10C                       	smpsAlterNote       $0C
00086CD9 E701                       	dc.b	smpsNoAttack, $01
00086CDB E109                       	smpsAlterNote       $09
00086CDD 8001                       	dc.b	nRst, $01
00086CDF E10F                       	smpsAlterNote       $0F
00086CE1 C60D                       	dc.b	nA5, $0D
00086CE3 E10C                       	smpsAlterNote       $0C
00086CE5 E701                       	dc.b	smpsNoAttack, $01
00086CE7 E108                       	smpsAlterNote       $08
00086CE9 E701                       	dc.b	smpsNoAttack, $01
00086CEB E10C                       	smpsAlterNote       $0C
00086CED E701                       	dc.b	smpsNoAttack, $01
00086CEF E112                       	smpsAlterNote       $12
00086CF1 E701                       	dc.b	smpsNoAttack, $01
00086CF3 E113                       	smpsAlterNote       $13
00086CF5 E701                       	dc.b	smpsNoAttack, $01
00086CF7 E10F                       	smpsAlterNote       $0F
00086CF9 E701                       	dc.b	smpsNoAttack, $01
00086CFB E109                       	smpsAlterNote       $09
00086CFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D01 E10C                       	smpsAlterNote       $0C
00086D03 E701                       	dc.b	smpsNoAttack, $01
00086D05 E112                       	smpsAlterNote       $12
00086D07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D0B E10C                       	smpsAlterNote       $0C
00086D0D E701                       	dc.b	smpsNoAttack, $01
00086D0F E109                       	smpsAlterNote       $09
00086D11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D15 E10F                       	smpsAlterNote       $0F
00086D17 E701                       	dc.b	smpsNoAttack, $01
00086D19 E113                       	smpsAlterNote       $13
00086D1B E701                       	dc.b	smpsNoAttack, $01
00086D1D E112                       	smpsAlterNote       $12
00086D1F E701                       	dc.b	smpsNoAttack, $01
00086D21 E10C                       	smpsAlterNote       $0C
00086D23 E701                       	dc.b	smpsNoAttack, $01
00086D25 E108                       	smpsAlterNote       $08
00086D27 E701                       	dc.b	smpsNoAttack, $01
00086D29 E10C                       	smpsAlterNote       $0C
00086D2B E701                       	dc.b	smpsNoAttack, $01
00086D2D E10F                       	smpsAlterNote       $0F
00086D2F E701                       	dc.b	smpsNoAttack, $01
00086D31 E113                       	smpsAlterNote       $13
00086D33 E701                       	dc.b	smpsNoAttack, $01
00086D35 E10F                       	smpsAlterNote       $0F
00086D37 E701                       	dc.b	smpsNoAttack, $01
00086D39 E109                       	smpsAlterNote       $09
00086D3B E701                       	dc.b	smpsNoAttack, $01
00086D3D E108                       	smpsAlterNote       $08
00086D3F E701                       	dc.b	smpsNoAttack, $01
00086D41 E10C                       	smpsAlterNote       $0C
00086D43 E701                       	dc.b	smpsNoAttack, $01
00086D45 E112                       	smpsAlterNote       $12
00086D47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D4B E10F                       	smpsAlterNote       $0F
00086D4D E701                       	dc.b	smpsNoAttack, $01
00086D4F E109                       	smpsAlterNote       $09
00086D51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D55 E10F                       	smpsAlterNote       $0F
00086D57 E701                       	dc.b	smpsNoAttack, $01
00086D59 E112                       	smpsAlterNote       $12
00086D5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D5F E10C                       	smpsAlterNote       $0C
00086D61 E701                       	dc.b	smpsNoAttack, $01
00086D63 E108                       	smpsAlterNote       $08
00086D65 E701                       	dc.b	smpsNoAttack, $01
00086D67 E10C                       	smpsAlterNote       $0C
00086D69 E701                       	dc.b	smpsNoAttack, $01
00086D6B E10F                       	smpsAlterNote       $0F
00086D6D E701                       	dc.b	smpsNoAttack, $01
00086D6F E113                       	smpsAlterNote       $13
00086D71 E701                       	dc.b	smpsNoAttack, $01
00086D73 E10F                       	smpsAlterNote       $0F
00086D75 E701                       	dc.b	smpsNoAttack, $01
00086D77 E109                       	smpsAlterNote       $09
00086D79 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086D7F E601                       	smpsAlterVol        $01
00086D81 E10F                       	smpsAlterNote       $0F
00086D83 C604                       	dc.b	nA5, $04
00086D85 E10D                       	smpsAlterNote       $0D
00086D87 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00086D8D E10B                       	smpsAlterNote       $0B
00086D8F BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00086D97 E10F                       	smpsAlterNote       $0F
00086D99 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086D9D E10D                       	smpsAlterNote       $0D
00086D9F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00086DA5 E10C                       	smpsAlterNote       $0C
00086DA7 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00086DAD E10A                       	smpsAlterNote       $0A
00086DAF C904 8001                  	dc.b	nC6, $04, nRst, $01
00086DB3 E110                       	smpsAlterNote       $10
00086DB5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00086DB9 E10F                       	smpsAlterNote       $0F
00086DBB C604                       	dc.b	nA5, $04
00086DBD E10D                       	smpsAlterNote       $0D
00086DBF C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00086DCB E109                       	smpsAlterNote       $09
00086DCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DD1 E10F                       	smpsAlterNote       $0F
00086DD3 E701                       	dc.b	smpsNoAttack, $01
00086DD5 E112                       	smpsAlterNote       $12
00086DD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DDB E10C                       	smpsAlterNote       $0C
00086DDD E701                       	dc.b	smpsNoAttack, $01
00086DDF E108                       	smpsAlterNote       $08
00086DE1 E701                       	dc.b	smpsNoAttack, $01
00086DE3 E10C                       	smpsAlterNote       $0C
00086DE5 E701                       	dc.b	smpsNoAttack, $01
00086DE7 E10F                       	smpsAlterNote       $0F
00086DE9 E701                       	dc.b	smpsNoAttack, $01
00086DEB E113                       	smpsAlterNote       $13
00086DED E701                       	dc.b	smpsNoAttack, $01
00086DEF E10D                       	smpsAlterNote       $0D
00086DF1 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00086DF7 E10C                       	smpsAlterNote       $0C
00086DF9 C10D                       	dc.b	nE5, $0D
00086DFB E109                       	smpsAlterNote       $09
00086DFD E701                       	dc.b	smpsNoAttack, $01
00086DFF E105                       	smpsAlterNote       $05
00086E01 E701                       	dc.b	smpsNoAttack, $01
00086E03 E106                       	smpsAlterNote       $06
00086E05 E701                       	dc.b	smpsNoAttack, $01
00086E07 E10C                       	smpsAlterNote       $0C
00086E09 E701                       	dc.b	smpsNoAttack, $01
00086E0B E110                       	smpsAlterNote       $10
00086E0D E701                       	dc.b	smpsNoAttack, $01
00086E0F E10C                       	smpsAlterNote       $0C
00086E11 E701                       	dc.b	smpsNoAttack, $01
00086E13 E109                       	smpsAlterNote       $09
00086E15 E701                       	dc.b	smpsNoAttack, $01
00086E17 E105                       	smpsAlterNote       $05
00086E19 E701                       	dc.b	smpsNoAttack, $01
00086E1B E109                       	smpsAlterNote       $09
00086E1D E701                       	dc.b	smpsNoAttack, $01
00086E1F E10F                       	smpsAlterNote       $0F
00086E21 E701                       	dc.b	smpsNoAttack, $01
00086E23 E110                       	smpsAlterNote       $10
00086E25 E701                       	dc.b	smpsNoAttack, $01
00086E27 E10C                       	smpsAlterNote       $0C
00086E29 E701                       	dc.b	smpsNoAttack, $01
00086E2B E106                       	smpsAlterNote       $06
00086E2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E31 E109                       	smpsAlterNote       $09
00086E33 E701                       	dc.b	smpsNoAttack, $01
00086E35 E10F                       	smpsAlterNote       $0F
00086E37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E3B E109                       	smpsAlterNote       $09
00086E3D E701                       	dc.b	smpsNoAttack, $01
00086E3F E106                       	smpsAlterNote       $06
00086E41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E45 E10C                       	smpsAlterNote       $0C
00086E47 E701                       	dc.b	smpsNoAttack, $01
00086E49 E110                       	smpsAlterNote       $10
00086E4B E701                       	dc.b	smpsNoAttack, $01
00086E4D E10F                       	smpsAlterNote       $0F
00086E4F E701                       	dc.b	smpsNoAttack, $01
00086E51 E109                       	smpsAlterNote       $09
00086E53 E701                       	dc.b	smpsNoAttack, $01
00086E55 E105                       	smpsAlterNote       $05
00086E57 E701                       	dc.b	smpsNoAttack, $01
00086E59 E109                       	smpsAlterNote       $09
00086E5B E701                       	dc.b	smpsNoAttack, $01
00086E5D E10C                       	smpsAlterNote       $0C
00086E5F E701                       	dc.b	smpsNoAttack, $01
00086E61 E110                       	smpsAlterNote       $10
00086E63 E701                       	dc.b	smpsNoAttack, $01
00086E65 E10C                       	smpsAlterNote       $0C
00086E67 E701                       	dc.b	smpsNoAttack, $01
00086E69 E106                       	smpsAlterNote       $06
00086E6B E701                       	dc.b	smpsNoAttack, $01
00086E6D E105                       	smpsAlterNote       $05
00086E6F E701                       	dc.b	smpsNoAttack, $01
00086E71 E109                       	smpsAlterNote       $09
00086E73 E701                       	dc.b	smpsNoAttack, $01
00086E75 E10F                       	smpsAlterNote       $0F
00086E77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E7B E10C                       	smpsAlterNote       $0C
00086E7D E701                       	dc.b	smpsNoAttack, $01
00086E7F E106                       	smpsAlterNote       $06
00086E81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E85 E10C                       	smpsAlterNote       $0C
00086E87 E701                       	dc.b	smpsNoAttack, $01
00086E89 E10F                       	smpsAlterNote       $0F
00086E8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E8F E109                       	smpsAlterNote       $09
00086E91 E701                       	dc.b	smpsNoAttack, $01
00086E93 E105                       	smpsAlterNote       $05
00086E95 E701                       	dc.b	smpsNoAttack, $01
00086E97 E106                       	smpsAlterNote       $06
00086E99 E701                       	dc.b	smpsNoAttack, $01
00086E9B E10C                       	smpsAlterNote       $0C
00086E9D E701                       	dc.b	smpsNoAttack, $01
00086E9F E110                       	smpsAlterNote       $10
00086EA1 E701                       	dc.b	smpsNoAttack, $01
00086EA3 E10C                       	smpsAlterNote       $0C
00086EA5 E701                       	dc.b	smpsNoAttack, $01
00086EA7 E109                       	smpsAlterNote       $09
00086EA9 E701                       	dc.b	smpsNoAttack, $01
00086EAB E105                       	smpsAlterNote       $05
00086EAD E701                       	dc.b	smpsNoAttack, $01
00086EAF E109                       	smpsAlterNote       $09
00086EB1 E701                       	dc.b	smpsNoAttack, $01
00086EB3 E10F                       	smpsAlterNote       $0F
00086EB5 E701                       	dc.b	smpsNoAttack, $01
00086EB7 E110                       	smpsAlterNote       $10
00086EB9 E701                       	dc.b	smpsNoAttack, $01
00086EBB E10C                       	smpsAlterNote       $0C
00086EBD E701                       	dc.b	smpsNoAttack, $01
00086EBF E106                       	smpsAlterNote       $06
00086EC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EC5 E109                       	smpsAlterNote       $09
00086EC7 E701                       	dc.b	smpsNoAttack, $01
00086EC9 E10F                       	smpsAlterNote       $0F
00086ECB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ECF E109                       	smpsAlterNote       $09
00086ED1 E701                       	dc.b	smpsNoAttack, $01
00086ED3 E106                       	smpsAlterNote       $06
00086ED5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ED9 E10C                       	smpsAlterNote       $0C
00086EDB E701                       	dc.b	smpsNoAttack, $01
00086EDD E110                       	smpsAlterNote       $10
00086EDF E701                       	dc.b	smpsNoAttack, $01
00086EE1 E10F                       	smpsAlterNote       $0F
00086EE3 E701                       	dc.b	smpsNoAttack, $01
00086EE5 E109                       	smpsAlterNote       $09
00086EE7 E701                       	dc.b	smpsNoAttack, $01
00086EE9 E105                       	smpsAlterNote       $05
00086EEB E701                       	dc.b	smpsNoAttack, $01
00086EED E109                       	smpsAlterNote       $09
00086EEF E701                       	dc.b	smpsNoAttack, $01
00086EF1 E10C                       	smpsAlterNote       $0C
00086EF3 E701                       	dc.b	smpsNoAttack, $01
00086EF5 E110                       	smpsAlterNote       $10
00086EF7 E701                       	dc.b	smpsNoAttack, $01
00086EF9 E10C                       	smpsAlterNote       $0C
00086EFB E701                       	dc.b	smpsNoAttack, $01
00086EFD E106                       	smpsAlterNote       $06
00086EFF E701                       	dc.b	smpsNoAttack, $01
00086F01 E105                       	smpsAlterNote       $05
00086F03 E701                       	dc.b	smpsNoAttack, $01
00086F05 E109                       	smpsAlterNote       $09
00086F07 E701                       	dc.b	smpsNoAttack, $01
00086F09 E10F                       	smpsAlterNote       $0F
00086F0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F0F E109                       	smpsAlterNote       $09
00086F11 E701                       	dc.b	smpsNoAttack, $01
00086F13 E106                       	smpsAlterNote       $06
00086F15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F19 E10C                       	smpsAlterNote       $0C
00086F1B E701                       	dc.b	smpsNoAttack, $01
00086F1D E110                       	smpsAlterNote       $10
00086F1F E701                       	dc.b	smpsNoAttack, $01
00086F21 E10F                       	smpsAlterNote       $0F
00086F23 E701                       	dc.b	smpsNoAttack, $01
00086F25 E109                       	smpsAlterNote       $09
00086F27 E701                       	dc.b	smpsNoAttack, $01
00086F29 E105                       	smpsAlterNote       $05
00086F2B E701                       	dc.b	smpsNoAttack, $01
00086F2D E109                       	smpsAlterNote       $09
00086F2F E701                       	dc.b	smpsNoAttack, $01
00086F31 E10C                       	smpsAlterNote       $0C
00086F33 E701                       	dc.b	smpsNoAttack, $01
00086F35 E110                       	smpsAlterNote       $10
00086F37 E701                       	dc.b	smpsNoAttack, $01
00086F39 E10C                       	smpsAlterNote       $0C
00086F3B E701                       	dc.b	smpsNoAttack, $01
00086F3D E106                       	smpsAlterNote       $06
00086F3F E701                       	dc.b	smpsNoAttack, $01
00086F41 E105                       	smpsAlterNote       $05
00086F43 E701                       	dc.b	smpsNoAttack, $01
00086F45 E109                       	smpsAlterNote       $09
00086F47 E701                       	dc.b	smpsNoAttack, $01
00086F49 E10F                       	smpsAlterNote       $0F
00086F4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F4F E10C                       	smpsAlterNote       $0C
00086F51 E701                       	dc.b	smpsNoAttack, $01
00086F53 E106                       	smpsAlterNote       $06
00086F55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F59 E10C                       	smpsAlterNote       $0C
00086F5B E701                       	dc.b	smpsNoAttack, $01
00086F5D E10F                       	smpsAlterNote       $0F
00086F5F E701                       	dc.b	smpsNoAttack, $01
00086F61 E110                       	smpsAlterNote       $10
00086F63 8001                       	dc.b	nRst, $01
00086F65 E10F                       	smpsAlterNote       $0F
00086F67 C604                       	dc.b	nA5, $04
00086F69 E10D                       	smpsAlterNote       $0D
00086F6B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00086F71 E10B                       	smpsAlterNote       $0B
00086F73 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00086F79 E10F                       	smpsAlterNote       $0F
00086F7B C604 8001                  	dc.b	nA5, $04, nRst, $01
00086F7F E10D                       	smpsAlterNote       $0D
00086F81 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00086F87 E10C                       	smpsAlterNote       $0C
00086F89 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
00086F8F E10A                       	smpsAlterNote       $0A
00086F91 C904                       	dc.b	nC6, $04
00086F93 E110                       	smpsAlterNote       $10
00086F95 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00086F99 E10F                       	smpsAlterNote       $0F
00086F9B C604                       	dc.b	nA5, $04
00086F9D E10D                       	smpsAlterNote       $0D
00086F9F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00086FAB E109                       	smpsAlterNote       $09
00086FAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FB1 E10F                       	smpsAlterNote       $0F
00086FB3 E701                       	dc.b	smpsNoAttack, $01
00086FB5 E112                       	smpsAlterNote       $12
00086FB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FBB E10C                       	smpsAlterNote       $0C
00086FBD E701                       	dc.b	smpsNoAttack, $01
00086FBF E108                       	smpsAlterNote       $08
00086FC1 E701                       	dc.b	smpsNoAttack, $01
00086FC3 E109                       	smpsAlterNote       $09
00086FC5 E701                       	dc.b	smpsNoAttack, $01
00086FC7 E10F                       	smpsAlterNote       $0F
00086FC9 E701                       	dc.b	smpsNoAttack, $01
00086FCB E113                       	smpsAlterNote       $13
00086FCD E701                       	dc.b	smpsNoAttack, $01
00086FCF E10D                       	smpsAlterNote       $0D
00086FD1 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00086FD7 E10C                       	smpsAlterNote       $0C
00086FD9 C10D                       	dc.b	nE5, $0D
00086FDB E109                       	smpsAlterNote       $09
00086FDD E701                       	dc.b	smpsNoAttack, $01
00086FDF E106                       	smpsAlterNote       $06
00086FE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FE5 E10C                       	smpsAlterNote       $0C
00086FE7 E701                       	dc.b	smpsNoAttack, $01
00086FE9 E110                       	smpsAlterNote       $10
00086FEB E701                       	dc.b	smpsNoAttack, $01
00086FED E10F                       	smpsAlterNote       $0F
00086FEF E701                       	dc.b	smpsNoAttack, $01
00086FF1 E109                       	smpsAlterNote       $09
00086FF3 E701                       	dc.b	smpsNoAttack, $01
00086FF5 E105                       	smpsAlterNote       $05
00086FF7 E701                       	dc.b	smpsNoAttack, $01
00086FF9 E109                       	smpsAlterNote       $09
00086FFB E701                       	dc.b	smpsNoAttack, $01
00086FFD E10C                       	smpsAlterNote       $0C
00086FFF E701                       	dc.b	smpsNoAttack, $01
00087001 E110                       	smpsAlterNote       $10
00087003 E701                       	dc.b	smpsNoAttack, $01
00087005 E10C                       	smpsAlterNote       $0C
00087007 E701                       	dc.b	smpsNoAttack, $01
00087009 E106                       	smpsAlterNote       $06
0008700B E701                       	dc.b	smpsNoAttack, $01
0008700D E105                       	smpsAlterNote       $05
0008700F E701                       	dc.b	smpsNoAttack, $01
00087011 E109                       	smpsAlterNote       $09
00087013 E701                       	dc.b	smpsNoAttack, $01
00087015 E10F                       	smpsAlterNote       $0F
00087017 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008701B E10C                       	smpsAlterNote       $0C
0008701D E701                       	dc.b	smpsNoAttack, $01
0008701F E106                       	smpsAlterNote       $06
00087021 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087025 E10C                       	smpsAlterNote       $0C
00087027 E701                       	dc.b	smpsNoAttack, $01
00087029 E10F                       	smpsAlterNote       $0F
0008702B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008702F E109                       	smpsAlterNote       $09
00087031 E701                       	dc.b	smpsNoAttack, $01
00087033 E105                       	smpsAlterNote       $05
00087035 E701                       	dc.b	smpsNoAttack, $01
00087037 E106                       	smpsAlterNote       $06
00087039 E701                       	dc.b	smpsNoAttack, $01
0008703B E10C                       	smpsAlterNote       $0C
0008703D E701                       	dc.b	smpsNoAttack, $01
0008703F E110                       	smpsAlterNote       $10
00087041 E701                       	dc.b	smpsNoAttack, $01
00087043 E10C                       	smpsAlterNote       $0C
00087045 E701                       	dc.b	smpsNoAttack, $01
00087047 E109                       	smpsAlterNote       $09
00087049 E701                       	dc.b	smpsNoAttack, $01
0008704B E105                       	smpsAlterNote       $05
0008704D E701                       	dc.b	smpsNoAttack, $01
0008704F E109                       	smpsAlterNote       $09
00087051 E701                       	dc.b	smpsNoAttack, $01
00087053 E10F                       	smpsAlterNote       $0F
00087055 E701                       	dc.b	smpsNoAttack, $01
00087057 E110                       	smpsAlterNote       $10
00087059 E701                       	dc.b	smpsNoAttack, $01
0008705B E10C                       	smpsAlterNote       $0C
0008705D E701                       	dc.b	smpsNoAttack, $01
0008705F E106                       	smpsAlterNote       $06
00087061 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087065 E109                       	smpsAlterNote       $09
00087067 E701                       	dc.b	smpsNoAttack, $01
00087069 E10F                       	smpsAlterNote       $0F
0008706B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008706F E109                       	smpsAlterNote       $09
00087071 E701                       	dc.b	smpsNoAttack, $01
00087073 E106                       	smpsAlterNote       $06
00087075 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087079 E10C                       	smpsAlterNote       $0C
0008707B E701                       	dc.b	smpsNoAttack, $01
0008707D E110                       	smpsAlterNote       $10
0008707F E701                       	dc.b	smpsNoAttack, $01
00087081 E10F                       	smpsAlterNote       $0F
00087083 E701                       	dc.b	smpsNoAttack, $01
00087085 E109                       	smpsAlterNote       $09
00087087 E701                       	dc.b	smpsNoAttack, $01
00087089 E105                       	smpsAlterNote       $05
0008708B E701                       	dc.b	smpsNoAttack, $01
0008708D E109                       	smpsAlterNote       $09
0008708F E701                       	dc.b	smpsNoAttack, $01
00087091 E10F                       	smpsAlterNote       $0F
00087093 E701                       	dc.b	smpsNoAttack, $01
00087095 E110                       	smpsAlterNote       $10
00087097 E701                       	dc.b	smpsNoAttack, $01
00087099 E10C                       	smpsAlterNote       $0C
0008709B E701                       	dc.b	smpsNoAttack, $01
0008709D E106                       	smpsAlterNote       $06
0008709F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870A3 E109                       	smpsAlterNote       $09
000870A5 E701                       	dc.b	smpsNoAttack, $01
000870A7 E10F                       	smpsAlterNote       $0F
000870A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870AD E109                       	smpsAlterNote       $09
000870AF E701                       	dc.b	smpsNoAttack, $01
000870B1 E106                       	smpsAlterNote       $06
000870B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870B7 E10C                       	smpsAlterNote       $0C
000870B9 E701                       	dc.b	smpsNoAttack, $01
000870BB E110                       	smpsAlterNote       $10
000870BD E701                       	dc.b	smpsNoAttack, $01
000870BF E10F                       	smpsAlterNote       $0F
000870C1 E701                       	dc.b	smpsNoAttack, $01
000870C3 E109                       	smpsAlterNote       $09
000870C5 E701                       	dc.b	smpsNoAttack, $01
000870C7 E105                       	smpsAlterNote       $05
000870C9 E701                       	dc.b	smpsNoAttack, $01
000870CB E109                       	smpsAlterNote       $09
000870CD E701                       	dc.b	smpsNoAttack, $01
000870CF E10C                       	smpsAlterNote       $0C
000870D1 E701                       	dc.b	smpsNoAttack, $01
000870D3 E110                       	smpsAlterNote       $10
000870D5 E701                       	dc.b	smpsNoAttack, $01
000870D7 E10C                       	smpsAlterNote       $0C
000870D9 E701                       	dc.b	smpsNoAttack, $01
000870DB E106                       	smpsAlterNote       $06
000870DD E701                       	dc.b	smpsNoAttack, $01
000870DF E105                       	smpsAlterNote       $05
000870E1 E701                       	dc.b	smpsNoAttack, $01
000870E3 E109                       	smpsAlterNote       $09
000870E5 E701                       	dc.b	smpsNoAttack, $01
000870E7 E10F                       	smpsAlterNote       $0F
000870E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870ED E10C                       	smpsAlterNote       $0C
000870EF E701                       	dc.b	smpsNoAttack, $01
000870F1 E106                       	smpsAlterNote       $06
000870F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870F7 E10C                       	smpsAlterNote       $0C
000870F9 E701                       	dc.b	smpsNoAttack, $01
000870FB E10F                       	smpsAlterNote       $0F
000870FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087101 E109                       	smpsAlterNote       $09
00087103 E701                       	dc.b	smpsNoAttack, $01
00087105 E105                       	smpsAlterNote       $05
00087107 E701                       	dc.b	smpsNoAttack, $01
00087109 E106                       	smpsAlterNote       $06
0008710B E701                       	dc.b	smpsNoAttack, $01
0008710D E10C                       	smpsAlterNote       $0C
0008710F E701                       	dc.b	smpsNoAttack, $01
00087111 E110                       	smpsAlterNote       $10
00087113 E701                       	dc.b	smpsNoAttack, $01
00087115 E10C                       	smpsAlterNote       $0C
00087117 E701                       	dc.b	smpsNoAttack, $01
00087119 E109                       	smpsAlterNote       $09
0008711B E701                       	dc.b	smpsNoAttack, $01
0008711D E105                       	smpsAlterNote       $05
0008711F E701                       	dc.b	smpsNoAttack, $01
00087121 E109                       	smpsAlterNote       $09
00087123 E701                       	dc.b	smpsNoAttack, $01
00087125 E10F                       	smpsAlterNote       $0F
00087127 E701                       	dc.b	smpsNoAttack, $01
00087129 E110                       	smpsAlterNote       $10
0008712B E701                       	dc.b	smpsNoAttack, $01
0008712D E10C                       	smpsAlterNote       $0C
0008712F E701                       	dc.b	smpsNoAttack, $01
00087131 E106                       	smpsAlterNote       $06
00087133 E701                       	dc.b	smpsNoAttack, $01
00087135 E10B                       	smpsAlterNote       $0B
00087137 BF02                       	dc.b	nD5, $02
00087139 E10C                       	smpsAlterNote       $0C
0008713B C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00087141 E109                       	smpsAlterNote       $09
00087143 E701                       	dc.b	smpsNoAttack, $01
00087145 E105                       	smpsAlterNote       $05
00087147 E701                       	dc.b	smpsNoAttack, $01
00087149 E109                       	smpsAlterNote       $09
0008714B E701                       	dc.b	smpsNoAttack, $01
0008714D E10F                       	smpsAlterNote       $0F
0008714F E701                       	dc.b	smpsNoAttack, $01
00087151 E110                       	smpsAlterNote       $10
00087153 E701                       	dc.b	smpsNoAttack, $01
00087155 E10C                       	smpsAlterNote       $0C
00087157 E701                       	dc.b	smpsNoAttack, $01
00087159 E106                       	smpsAlterNote       $06
0008715B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008715F E109                       	smpsAlterNote       $09
00087161 E701                       	dc.b	smpsNoAttack, $01
00087163 E10F                       	smpsAlterNote       $0F
00087165 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087169 E109                       	smpsAlterNote       $09
0008716B E701                       	dc.b	smpsNoAttack, $01
0008716D E106                       	smpsAlterNote       $06
0008716F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087173 E10C                       	smpsAlterNote       $0C
00087175 E701                       	dc.b	smpsNoAttack, $01
00087177 E110                       	smpsAlterNote       $10
00087179 E701                       	dc.b	smpsNoAttack, $01
0008717B E10F                       	smpsAlterNote       $0F
0008717D E701                       	dc.b	smpsNoAttack, $01
0008717F E109                       	smpsAlterNote       $09
00087181 E701                       	dc.b	smpsNoAttack, $01
00087183 E105                       	smpsAlterNote       $05
00087185 E701                       	dc.b	smpsNoAttack, $01
00087187 E109                       	smpsAlterNote       $09
00087189 E701                       	dc.b	smpsNoAttack, $01
0008718B E10C                       	smpsAlterNote       $0C
0008718D E701                       	dc.b	smpsNoAttack, $01
0008718F E110                       	smpsAlterNote       $10
00087191 E701                       	dc.b	smpsNoAttack, $01
00087193 E10C                       	smpsAlterNote       $0C
00087195 E701                       	dc.b	smpsNoAttack, $01
00087197 E106                       	smpsAlterNote       $06
00087199 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008719D E10D                       	smpsAlterNote       $0D
0008719F C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000871A7 E10C                       	smpsAlterNote       $0C
000871A9 C10D                       	dc.b	nE5, $0D
000871AB E106                       	smpsAlterNote       $06
000871AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871B1 E109                       	smpsAlterNote       $09
000871B3 E701                       	dc.b	smpsNoAttack, $01
000871B5 E10F                       	smpsAlterNote       $0F
000871B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871BB E109                       	smpsAlterNote       $09
000871BD E701                       	dc.b	smpsNoAttack, $01
000871BF E106                       	smpsAlterNote       $06
000871C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871C5 E10C                       	smpsAlterNote       $0C
000871C7 E701                       	dc.b	smpsNoAttack, $01
000871C9 E110                       	smpsAlterNote       $10
000871CB E701                       	dc.b	smpsNoAttack, $01
000871CD E10F                       	smpsAlterNote       $0F
000871CF E701                       	dc.b	smpsNoAttack, $01
000871D1 E109                       	smpsAlterNote       $09
000871D3 E701                       	dc.b	smpsNoAttack, $01
000871D5 E105                       	smpsAlterNote       $05
000871D7 E701                       	dc.b	smpsNoAttack, $01
000871D9 E106                       	smpsAlterNote       $06
000871DB 800F                       	dc.b	nRst, $0F
000871DF E6FF                       	smpsAlterVol        $FF
000871E1 E10F                       	smpsAlterNote       $0F
000871E3 BA01                       	dc.b	nA4, $01
000871E5 E110                       	smpsAlterNote       $10
000871E7 BB02                       	dc.b	nBb4, $02
000871E9 E10F                       	smpsAlterNote       $0F
000871EB BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000871F1 E10B                       	smpsAlterNote       $0B
000871F3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000871F7 E10C                       	smpsAlterNote       $0C
000871F9 C103                       	dc.b	nE5, $03
000871FB E10D                       	smpsAlterNote       $0D
000871FD C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00087207 E10B                       	smpsAlterNote       $0B
00087209 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008720D E104                       	smpsAlterNote       $04
0008720F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087213 E10A                       	smpsAlterNote       $0A
00087215 E701                       	dc.b	smpsNoAttack, $01
00087217 E10D                       	smpsAlterNote       $0D
00087219 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008721D E107                       	smpsAlterNote       $07
0008721F E701                       	dc.b	smpsNoAttack, $01
00087221 E104                       	smpsAlterNote       $04
00087223 8001                       	dc.b	nRst, $01
00087225 E110                       	smpsAlterNote       $10
00087227 C703                       	dc.b	nBb5, $03
00087229 E10F                       	smpsAlterNote       $0F
0008722B C603 8001                  	dc.b	nA5, $03, nRst, $01
0008722F E10D                       	smpsAlterNote       $0D
00087231 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00087235 E10C                       	smpsAlterNote       $0C
00087237 E701                       	dc.b	smpsNoAttack, $01
00087239 E108                       	smpsAlterNote       $08
0008723B E701                       	dc.b	smpsNoAttack, $01
0008723D E109                       	smpsAlterNote       $09
0008723F E701                       	dc.b	smpsNoAttack, $01
00087241 E10F                       	smpsAlterNote       $0F
00087243 E701                       	dc.b	smpsNoAttack, $01
00087245 E113                       	smpsAlterNote       $13
00087247 E701                       	dc.b	smpsNoAttack, $01
00087249 E10F                       	smpsAlterNote       $0F
0008724B E701                       	dc.b	smpsNoAttack, $01
0008724D E10C                       	smpsAlterNote       $0C
0008724F E701                       	dc.b	smpsNoAttack, $01
00087251 E108                       	smpsAlterNote       $08
00087253 E701                       	dc.b	smpsNoAttack, $01
00087255 E10C                       	smpsAlterNote       $0C
00087257 E701                       	dc.b	smpsNoAttack, $01
00087259 E112                       	smpsAlterNote       $12
0008725B E701                       	dc.b	smpsNoAttack, $01
0008725D E113                       	smpsAlterNote       $13
0008725F E701                       	dc.b	smpsNoAttack, $01
00087261 E10F                       	smpsAlterNote       $0F
00087263 E701                       	dc.b	smpsNoAttack, $01
00087265 E109                       	smpsAlterNote       $09
00087267 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008726B E10C                       	smpsAlterNote       $0C
0008726D E701                       	dc.b	smpsNoAttack, $01
0008726F E112                       	smpsAlterNote       $12
00087271 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087275 E10C                       	smpsAlterNote       $0C
00087277 E701                       	dc.b	smpsNoAttack, $01
00087279 E109                       	smpsAlterNote       $09
0008727B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008727F E10F                       	smpsAlterNote       $0F
00087281 E701                       	dc.b	smpsNoAttack, $01
00087283 E113                       	smpsAlterNote       $13
00087285 E701                       	dc.b	smpsNoAttack, $01
00087287 E112                       	smpsAlterNote       $12
00087289 E701                       	dc.b	smpsNoAttack, $01
0008728B E10C                       	smpsAlterNote       $0C
0008728D E701                       	dc.b	smpsNoAttack, $01
0008728F E108                       	smpsAlterNote       $08
00087291 E701                       	dc.b	smpsNoAttack, $01
00087293 E10C                       	smpsAlterNote       $0C
00087295 E701                       	dc.b	smpsNoAttack, $01
00087297 E10F                       	smpsAlterNote       $0F
00087299 E701                       	dc.b	smpsNoAttack, $01
0008729B E113                       	smpsAlterNote       $13
0008729D E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000872A1 E10B                       	smpsAlterNote       $0B
000872A3 BF03                       	dc.b	nD5, $03
000872A5 E10C                       	smpsAlterNote       $0C
000872A7 C103 8001                  	dc.b	nE5, $03, nRst, $01
000872AB E10D                       	smpsAlterNote       $0D
000872AD C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000872B7 E10B                       	smpsAlterNote       $0B
000872B9 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000872C5 E110                       	smpsAlterNote       $10
000872C7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000872CB E10F                       	smpsAlterNote       $0F
000872CD C604                       	dc.b	nA5, $04
000872CF E10D                       	smpsAlterNote       $0D
000872D1 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000872D7 E109                       	smpsAlterNote       $09
000872D9 E701                       	dc.b	smpsNoAttack, $01
000872DB E108                       	smpsAlterNote       $08
000872DD E701                       	dc.b	smpsNoAttack, $01
000872DF E10C                       	smpsAlterNote       $0C
000872E1 E701                       	dc.b	smpsNoAttack, $01
000872E3 E112                       	smpsAlterNote       $12
000872E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872E9 E10F                       	smpsAlterNote       $0F
000872EB E701                       	dc.b	smpsNoAttack, $01
000872ED E109                       	smpsAlterNote       $09
000872EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872F3 E10F                       	smpsAlterNote       $0F
000872F5 E701                       	dc.b	smpsNoAttack, $01
000872F7 E112                       	smpsAlterNote       $12
000872F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872FD E10C                       	smpsAlterNote       $0C
000872FF E701                       	dc.b	smpsNoAttack, $01
00087301 E108                       	smpsAlterNote       $08
00087303 E701                       	dc.b	smpsNoAttack, $01
00087305 E109                       	smpsAlterNote       $09
00087307 E701                       	dc.b	smpsNoAttack, $01
00087309 E10F                       	smpsAlterNote       $0F
0008730B E701                       	dc.b	smpsNoAttack, $01
0008730D E113                       	smpsAlterNote       $13
0008730F E701                       	dc.b	smpsNoAttack, $01
00087311 E10F                       	smpsAlterNote       $0F
00087313 E701                       	dc.b	smpsNoAttack, $01
00087315 E10C                       	smpsAlterNote       $0C
00087317 E701                       	dc.b	smpsNoAttack, $01
00087319 E108                       	smpsAlterNote       $08
0008731B E701                       	dc.b	smpsNoAttack, $01
0008731D E10C                       	smpsAlterNote       $0C
0008731F E701                       	dc.b	smpsNoAttack, $01
00087321 E112                       	smpsAlterNote       $12
00087323 E701                       	dc.b	smpsNoAttack, $01
00087325 E113                       	smpsAlterNote       $13
00087327 E701                       	dc.b	smpsNoAttack, $01
00087329 E10F                       	smpsAlterNote       $0F
0008732B E701                       	dc.b	smpsNoAttack, $01
0008732D E109                       	smpsAlterNote       $09
0008732F E701                       	dc.b	smpsNoAttack, $01
00087331 E10D                       	smpsAlterNote       $0D
00087333 C402                       	dc.b	nG5, $02
00087335 E10F                       	smpsAlterNote       $0F
00087337 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00087341 E10D                       	smpsAlterNote       $0D
00087343 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00087349 E10B                       	smpsAlterNote       $0B
0008734B BF0D                       	dc.b	nD5, $0D
0008734D E108                       	smpsAlterNote       $08
0008734F E701                       	dc.b	smpsNoAttack, $01
00087351 E104                       	smpsAlterNote       $04
00087353 E701                       	dc.b	smpsNoAttack, $01
00087355 E105                       	smpsAlterNote       $05
00087357 E701                       	dc.b	smpsNoAttack, $01
00087359 E10B                       	smpsAlterNote       $0B
0008735B E701                       	dc.b	smpsNoAttack, $01
0008735D E10F                       	smpsAlterNote       $0F
0008735F E701                       	dc.b	smpsNoAttack, $01
00087361 E10B                       	smpsAlterNote       $0B
00087363 E701                       	dc.b	smpsNoAttack, $01
00087365 E108                       	smpsAlterNote       $08
00087367 E701                       	dc.b	smpsNoAttack, $01
00087369 E104                       	smpsAlterNote       $04
0008736B E701                       	dc.b	smpsNoAttack, $01
0008736D E108                       	smpsAlterNote       $08
0008736F E701                       	dc.b	smpsNoAttack, $01
00087371 E10E                       	smpsAlterNote       $0E
00087373 E701                       	dc.b	smpsNoAttack, $01
00087375 E10F                       	smpsAlterNote       $0F
00087377 E701                       	dc.b	smpsNoAttack, $01
00087379 E10C                       	smpsAlterNote       $0C
0008737B C101                       	dc.b	nE5, $01
0008737D E10D                       	smpsAlterNote       $0D
0008737F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00087387 E10F                       	smpsAlterNote       $0F
00087389 C607                       	dc.b	nA5, $07
0008738B E10C                       	smpsAlterNote       $0C
0008738D CD07                       	dc.b	nE6, $07
0008738F E10D                       	smpsAlterNote       $0D
00087391 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00087395 E10C                       	smpsAlterNote       $0C
00087397 CD03                       	dc.b	nE6, $03
00087399 E10A                       	smpsAlterNote       $0A
0008739B C903 8001                  	dc.b	nC6, $03, nRst, $01
0008739F E10D                       	smpsAlterNote       $0D
000873A1 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000873A7 E10A                       	smpsAlterNote       $0A
000873A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873AD E110                       	smpsAlterNote       $10
000873AF E701                       	dc.b	smpsNoAttack, $01
000873B1 E114                       	smpsAlterNote       $14
000873B3 E701                       	dc.b	smpsNoAttack, $01
000873B5 E113                       	smpsAlterNote       $13
000873B7 E701                       	dc.b	smpsNoAttack, $01
000873B9 E10D                       	smpsAlterNote       $0D
000873BB E701                       	dc.b	smpsNoAttack, $01
000873BD E109                       	smpsAlterNote       $09
000873BF E701                       	dc.b	smpsNoAttack, $01
000873C1 E10D                       	smpsAlterNote       $0D
000873C3 E701                       	dc.b	smpsNoAttack, $01
000873C5 E110                       	smpsAlterNote       $10
000873C7 E701                       	dc.b	smpsNoAttack, $01
000873C9 E114                       	smpsAlterNote       $14
000873CB E701                       	dc.b	smpsNoAttack, $01
000873CD E10F                       	smpsAlterNote       $0F
000873CF C607                       	dc.b	nA5, $07
000873D1 E10D                       	smpsAlterNote       $0D
000873D3 C40D                       	dc.b	nG5, $0D
000873D5 E10A                       	smpsAlterNote       $0A
000873D7 E701                       	dc.b	smpsNoAttack, $01
000873D9 E106                       	smpsAlterNote       $06
000873DB E701                       	dc.b	smpsNoAttack, $01
000873DD E10A                       	smpsAlterNote       $0A
000873DF E701                       	dc.b	smpsNoAttack, $01
000873E1 E10D                       	smpsAlterNote       $0D
000873E3 E701                       	dc.b	smpsNoAttack, $01
000873E5 E111                       	smpsAlterNote       $11
000873E7 E701                       	dc.b	smpsNoAttack, $01
000873E9 E10D                       	smpsAlterNote       $0D
000873EB E701                       	dc.b	smpsNoAttack, $01
000873ED E107                       	smpsAlterNote       $07
000873EF E701                       	dc.b	smpsNoAttack, $01
000873F1 E106                       	smpsAlterNote       $06
000873F3 E701                       	dc.b	smpsNoAttack, $01
000873F5 E10A                       	smpsAlterNote       $0A
000873F7 E701                       	dc.b	smpsNoAttack, $01
000873F9 E110                       	smpsAlterNote       $10
000873FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873FF E10D                       	smpsAlterNote       $0D
00087401 E701                       	dc.b	smpsNoAttack, $01
00087403 E107                       	smpsAlterNote       $07
00087405 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087409 E10F                       	smpsAlterNote       $0F
0008740B C60E                       	dc.b	nA5, $0E
0008740D E109                       	smpsAlterNote       $09
0008740F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087413 E10F                       	smpsAlterNote       $0F
00087415 E701                       	dc.b	smpsNoAttack, $01
00087417 E112                       	smpsAlterNote       $12
00087419 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008741D E10C                       	smpsAlterNote       $0C
0008741F E701                       	dc.b	smpsNoAttack, $01
00087421 E108                       	smpsAlterNote       $08
00087423 E701                       	dc.b	smpsNoAttack, $01
00087425 E109                       	smpsAlterNote       $09
00087427 E701                       	dc.b	smpsNoAttack, $01
00087429 E10F                       	smpsAlterNote       $0F
0008742B E701                       	dc.b	smpsNoAttack, $01
0008742D E113                       	smpsAlterNote       $13
0008742F E701                       	dc.b	smpsNoAttack, $01
00087431 E10F                       	smpsAlterNote       $0F
00087433 E701                       	dc.b	smpsNoAttack, $01
00087435 E10C                       	smpsAlterNote       $0C
00087437 E701                       	dc.b	smpsNoAttack, $01
00087439 E108                       	smpsAlterNote       $08
0008743B E701                       	dc.b	smpsNoAttack, $01
0008743D E109                       	smpsAlterNote       $09
0008743F 8001                       	dc.b	nRst, $01
00087441 E110                       	smpsAlterNote       $10
00087443 C70D                       	dc.b	nBb5, $0D
00087445 E10D                       	smpsAlterNote       $0D
00087447 E701                       	dc.b	smpsNoAttack, $01
00087449 E109                       	smpsAlterNote       $09
0008744B E701                       	dc.b	smpsNoAttack, $01
0008744D E10D                       	smpsAlterNote       $0D
0008744F E701                       	dc.b	smpsNoAttack, $01
00087451 E113                       	smpsAlterNote       $13
00087453 E701                       	dc.b	smpsNoAttack, $01
00087455 E114                       	smpsAlterNote       $14
00087457 E701                       	dc.b	smpsNoAttack, $01
00087459 E110                       	smpsAlterNote       $10
0008745B E701                       	dc.b	smpsNoAttack, $01
0008745D E10A                       	smpsAlterNote       $0A
0008745F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087463 E10D                       	smpsAlterNote       $0D
00087465 E701                       	dc.b	smpsNoAttack, $01
00087467 E113                       	smpsAlterNote       $13
00087469 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008746D E10D                       	smpsAlterNote       $0D
0008746F E701                       	dc.b	smpsNoAttack, $01
00087471 E10A                       	smpsAlterNote       $0A
00087473 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008747D E10B                       	smpsAlterNote       $0B
0008747F 8001                       	dc.b	nRst, $01
00087481 E10C                       	smpsAlterNote       $0C
00087483 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00087487 E10B                       	smpsAlterNote       $0B
00087489 CB0D                       	dc.b	nD6, $0D
0008748B E105                       	smpsAlterNote       $05
0008748D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087491 E108                       	smpsAlterNote       $08
00087493 E701                       	dc.b	smpsNoAttack, $01
00087495 E10E                       	smpsAlterNote       $0E
00087497 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008749B E108                       	smpsAlterNote       $08
0008749D E701                       	dc.b	smpsNoAttack, $01
0008749F E105                       	smpsAlterNote       $05
000874A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874A5 E10B                       	smpsAlterNote       $0B
000874A7 E701                       	dc.b	smpsNoAttack, $01
000874A9 E10F                       	smpsAlterNote       $0F
000874AB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000874AF E10C                       	smpsAlterNote       $0C
000874B1 CC0D                       	dc.b	nEb6, $0D
000874B3 E106                       	smpsAlterNote       $06
000874B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874B9 E109                       	smpsAlterNote       $09
000874BB E701                       	dc.b	smpsNoAttack, $01
000874BD E10C                       	smpsAlterNote       $0C
000874BF 8001                       	dc.b	nRst, $01
000874C1 E10A                       	smpsAlterNote       $0A
000874C3 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000874CF CB0E                       	dc.b	nD6, $0E
000874D1 E105                       	smpsAlterNote       $05
000874D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874D7 E10B                       	smpsAlterNote       $0B
000874D9 E701                       	dc.b	smpsNoAttack, $01
000874DB E10E                       	smpsAlterNote       $0E
000874DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874E1 E108                       	smpsAlterNote       $08
000874E3 E701                       	dc.b	smpsNoAttack, $01
000874E5 E104                       	smpsAlterNote       $04
000874E7 E701                       	dc.b	smpsNoAttack, $01
000874E9 E105                       	smpsAlterNote       $05
000874EB E701                       	dc.b	smpsNoAttack, $01
000874ED E10B                       	smpsAlterNote       $0B
000874EF E701                       	dc.b	smpsNoAttack, $01
000874F1 E10F                       	smpsAlterNote       $0F
000874F3 E701                       	dc.b	smpsNoAttack, $01
000874F5 E10D                       	smpsAlterNote       $0D
000874F7 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
000874FB E10C                       	smpsAlterNote       $0C
000874FD CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00087501 E10A                       	smpsAlterNote       $0A
00087503 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008750F CB0D                       	dc.b	nD6, $0D
00087511 E108                       	smpsAlterNote       $08
00087513 E701                       	dc.b	smpsNoAttack, $01
00087515 E104                       	smpsAlterNote       $04
00087517 E701                       	dc.b	smpsNoAttack, $01
00087519 E105                       	smpsAlterNote       $05
0008751B E701                       	dc.b	smpsNoAttack, $01
0008751D E10B                       	smpsAlterNote       $0B
0008751F E701                       	dc.b	smpsNoAttack, $01
00087521 E10F                       	smpsAlterNote       $0F
00087523 E701                       	dc.b	smpsNoAttack, $01
00087525 E10B                       	smpsAlterNote       $0B
00087527 E701                       	dc.b	smpsNoAttack, $01
00087529 E108                       	smpsAlterNote       $08
0008752B E701                       	dc.b	smpsNoAttack, $01
0008752D E104                       	smpsAlterNote       $04
0008752F E701                       	dc.b	smpsNoAttack, $01
00087531 E108                       	smpsAlterNote       $08
00087533 E701                       	dc.b	smpsNoAttack, $01
00087535 E10E                       	smpsAlterNote       $0E
00087537 E701                       	dc.b	smpsNoAttack, $01
00087539 E10F                       	smpsAlterNote       $0F
0008753B E701                       	dc.b	smpsNoAttack, $01
0008753D E10C                       	smpsAlterNote       $0C
0008753F CC0D                       	dc.b	nEb6, $0D
00087541 E109                       	smpsAlterNote       $09
00087543 E701                       	dc.b	smpsNoAttack, $01
00087545 E105                       	smpsAlterNote       $05
00087547 E701                       	dc.b	smpsNoAttack, $01
00087549 E106                       	smpsAlterNote       $06
0008754B E701                       	dc.b	smpsNoAttack, $01
0008754D E10C                       	smpsAlterNote       $0C
0008754F E701                       	dc.b	smpsNoAttack, $01
00087551 E10A                       	smpsAlterNote       $0A
00087553 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008755F CB0D                       	dc.b	nD6, $0D
00087561 E108                       	smpsAlterNote       $08
00087563 E701                       	dc.b	smpsNoAttack, $01
00087565 E104                       	smpsAlterNote       $04
00087567 E701                       	dc.b	smpsNoAttack, $01
00087569 E108                       	smpsAlterNote       $08
0008756B E701                       	dc.b	smpsNoAttack, $01
0008756D E10B                       	smpsAlterNote       $0B
0008756F E701                       	dc.b	smpsNoAttack, $01
00087571 E10F                       	smpsAlterNote       $0F
00087573 E701                       	dc.b	smpsNoAttack, $01
00087575 E10B                       	smpsAlterNote       $0B
00087577 E701                       	dc.b	smpsNoAttack, $01
00087579 E105                       	smpsAlterNote       $05
0008757B E701                       	dc.b	smpsNoAttack, $01
0008757D E104                       	smpsAlterNote       $04
0008757F E701                       	dc.b	smpsNoAttack, $01
00087581 E108                       	smpsAlterNote       $08
00087583 E701                       	dc.b	smpsNoAttack, $01
00087585 E10E                       	smpsAlterNote       $0E
00087587 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008758B E10B                       	smpsAlterNote       $0B
0008758D E701                       	dc.b	smpsNoAttack, $01
0008758F E105                       	smpsAlterNote       $05
00087591 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00087599 03                         	dc.b	$03
0008759A E601                       	smpsAlterVol        $01
0008759C F6F1 D1                    	smpsJump            music84_Jump01
0008759F                            
0008759F                            ; FM5 Data
0008759F                            music84_FM5:
000875A1 E080                       	smpsPan             panLeft, $00
000875A3 8003                       	dc.b	nRst, $03
000875A5 E10D                       	smpsAlterNote       $0D
000875A7 C203 8008                  	dc.b	nF5, $03, nRst, $08
000875AB E10C                       	smpsAlterNote       $0C
000875AD C103 800A                  	dc.b	nE5, $03, nRst, $0A
000875B1 E10F                       	smpsAlterNote       $0F
000875B3 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000875B9 E6FE                       	smpsAlterVol        $FE
000875BB C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
000875C1 E10D                       	smpsAlterNote       $0D
000875C3 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000875C9 E10C                       	smpsAlterNote       $0C
000875CB C102 8001                  	dc.b	nE5, $02, nRst, $01
000875CF E10A                       	smpsAlterNote       $0A
000875D1 BD01 8001                  	dc.b	nC5, $01, nRst, $01
000875D7 03                         	dc.b	$03
000875D8                            
000875D8                            music84_Jump00:
000875D8 8004                       	dc.b	nRst, $04
000875DA E602                       	smpsAlterVol        $02
000875DC E10D                       	smpsAlterNote       $0D
000875DE B60D                       	dc.b	nF4, $0D
000875E0 E107                       	smpsAlterNote       $07
000875E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875E6 E10A                       	smpsAlterNote       $0A
000875E8 E701                       	dc.b	smpsNoAttack, $01
000875EA E110                       	smpsAlterNote       $10
000875EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875F0 E10A                       	smpsAlterNote       $0A
000875F2 E701                       	dc.b	smpsNoAttack, $01
000875F4 E107                       	smpsAlterNote       $07
000875F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875FA E10D                       	smpsAlterNote       $0D
000875FC E701                       	dc.b	smpsNoAttack, $01
000875FE E111                       	smpsAlterNote       $11
00087600 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087604 E10D                       	smpsAlterNote       $0D
00087606 B80D                       	dc.b	nG4, $0D
00087608 E107                       	smpsAlterNote       $07
0008760A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008760E E10A                       	smpsAlterNote       $0A
00087610 E701                       	dc.b	smpsNoAttack, $01
00087612 E110                       	smpsAlterNote       $10
00087614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087618 E10A                       	smpsAlterNote       $0A
0008761A E701                       	dc.b	smpsNoAttack, $01
0008761C E107                       	smpsAlterNote       $07
0008761E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087622 E10D                       	smpsAlterNote       $0D
00087624 E701                       	dc.b	smpsNoAttack, $01
00087626 E111                       	smpsAlterNote       $11
00087628 E701                       	dc.b	smpsNoAttack, $01
0008762A E110                       	smpsAlterNote       $10
0008762C E701                       	dc.b	smpsNoAttack, $01
0008762E E10A                       	smpsAlterNote       $0A
00087630 E701                       	dc.b	smpsNoAttack, $01
00087632 E106                       	smpsAlterNote       $06
00087634 E701                       	dc.b	smpsNoAttack, $01
00087636 E10A                       	smpsAlterNote       $0A
00087638 E701                       	dc.b	smpsNoAttack, $01
0008763A E10D                       	smpsAlterNote       $0D
0008763C E701                       	dc.b	smpsNoAttack, $01
0008763E E111                       	smpsAlterNote       $11
00087640 E701                       	dc.b	smpsNoAttack, $01
00087642 E10D                       	smpsAlterNote       $0D
00087644 E701                       	dc.b	smpsNoAttack, $01
00087646 E10F                       	smpsAlterNote       $0F
00087648 BA0E                       	dc.b	nA4, $0E
0008764A E109                       	smpsAlterNote       $09
0008764C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087650 E10F                       	smpsAlterNote       $0F
00087652 E701                       	dc.b	smpsNoAttack, $01
00087654 E112                       	smpsAlterNote       $12
00087656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008765A E10C                       	smpsAlterNote       $0C
0008765C E701                       	dc.b	smpsNoAttack, $01
0008765E E108                       	smpsAlterNote       $08
00087660 E701                       	dc.b	smpsNoAttack, $01
00087662 E109                       	smpsAlterNote       $09
00087664 E701                       	dc.b	smpsNoAttack, $01
00087666 E10F                       	smpsAlterNote       $0F
00087668 E701                       	dc.b	smpsNoAttack, $01
0008766A E113                       	smpsAlterNote       $13
0008766C E701                       	dc.b	smpsNoAttack, $01
0008766E E10F                       	smpsAlterNote       $0F
00087670 E701                       	dc.b	smpsNoAttack, $01
00087672 E109                       	smpsAlterNote       $09
00087674 E701                       	dc.b	smpsNoAttack, $01
00087676 E108                       	smpsAlterNote       $08
00087678 E701                       	dc.b	smpsNoAttack, $01
0008767A E10C                       	smpsAlterNote       $0C
0008767C E701                       	dc.b	smpsNoAttack, $01
0008767E E112                       	smpsAlterNote       $12
00087680 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087684 E10F                       	smpsAlterNote       $0F
00087686 E701                       	dc.b	smpsNoAttack, $01
00087688 E109                       	smpsAlterNote       $09
0008768A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008768E E10F                       	smpsAlterNote       $0F
00087690 E701                       	dc.b	smpsNoAttack, $01
00087692 E112                       	smpsAlterNote       $12
00087694 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087698 E10C                       	smpsAlterNote       $0C
0008769A E701                       	dc.b	smpsNoAttack, $01
0008769C E108                       	smpsAlterNote       $08
0008769E E701                       	dc.b	smpsNoAttack, $01
000876A0 E109                       	smpsAlterNote       $09
000876A2 E701                       	dc.b	smpsNoAttack, $01
000876A4 E10F                       	smpsAlterNote       $0F
000876A6 E701                       	dc.b	smpsNoAttack, $01
000876A8 E113                       	smpsAlterNote       $13
000876AA E701                       	dc.b	smpsNoAttack, $01
000876AC E10F                       	smpsAlterNote       $0F
000876AE E701                       	dc.b	smpsNoAttack, $01
000876B0 E10C                       	smpsAlterNote       $0C
000876B2 E701                       	dc.b	smpsNoAttack, $01
000876B4 E108                       	smpsAlterNote       $08
000876B6 E701                       	dc.b	smpsNoAttack, $01
000876B8 E109                       	smpsAlterNote       $09
000876BA 8001                       	dc.b	nRst, $01
000876BC E10C                       	smpsAlterNote       $0C
000876BE B50A                       	dc.b	nE4, $0A
000876C0 E10D                       	smpsAlterNote       $0D
000876C2 B60D                       	dc.b	nF4, $0D
000876C4 E10A                       	smpsAlterNote       $0A
000876C6 E701                       	dc.b	smpsNoAttack, $01
000876C8 E106                       	smpsAlterNote       $06
000876CA E701                       	dc.b	smpsNoAttack, $01
000876CC E107                       	smpsAlterNote       $07
000876CE E701                       	dc.b	smpsNoAttack, $01
000876D0 E10D                       	smpsAlterNote       $0D
000876D2 E701                       	dc.b	smpsNoAttack, $01
000876D4 E111                       	smpsAlterNote       $11
000876D6 E701                       	dc.b	smpsNoAttack, $01
000876D8 E10D                       	smpsAlterNote       $0D
000876DA E701                       	dc.b	smpsNoAttack, $01
000876DC E10A                       	smpsAlterNote       $0A
000876DE E701                       	dc.b	smpsNoAttack, $01
000876E0 E106                       	smpsAlterNote       $06
000876E2 E701                       	dc.b	smpsNoAttack, $01
000876E4 E10A                       	smpsAlterNote       $0A
000876E6 E701                       	dc.b	smpsNoAttack, $01
000876E8 E110                       	smpsAlterNote       $10
000876EA E701                       	dc.b	smpsNoAttack, $01
000876EC E111                       	smpsAlterNote       $11
000876EE E701                       	dc.b	smpsNoAttack, $01
000876F0 E10D                       	smpsAlterNote       $0D
000876F2 B80D                       	dc.b	nG4, $0D
000876F4 E10A                       	smpsAlterNote       $0A
000876F6 E701                       	dc.b	smpsNoAttack, $01
000876F8 E106                       	smpsAlterNote       $06
000876FA E701                       	dc.b	smpsNoAttack, $01
000876FC E107                       	smpsAlterNote       $07
000876FE E701                       	dc.b	smpsNoAttack, $01
00087700 E10D                       	smpsAlterNote       $0D
00087702 E701                       	dc.b	smpsNoAttack, $01
00087704 E111                       	smpsAlterNote       $11
00087706 E701                       	dc.b	smpsNoAttack, $01
00087708 E10D                       	smpsAlterNote       $0D
0008770A E701                       	dc.b	smpsNoAttack, $01
0008770C E10A                       	smpsAlterNote       $0A
0008770E E701                       	dc.b	smpsNoAttack, $01
00087710 E106                       	smpsAlterNote       $06
00087712 E701                       	dc.b	smpsNoAttack, $01
00087714 E10A                       	smpsAlterNote       $0A
00087716 E701                       	dc.b	smpsNoAttack, $01
00087718 E110                       	smpsAlterNote       $10
0008771A E701                       	dc.b	smpsNoAttack, $01
0008771C E111                       	smpsAlterNote       $11
0008771E E701                       	dc.b	smpsNoAttack, $01
00087720 E10D                       	smpsAlterNote       $0D
00087722 E701                       	dc.b	smpsNoAttack, $01
00087724 E107                       	smpsAlterNote       $07
00087726 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008772A E10A                       	smpsAlterNote       $0A
0008772C E701                       	dc.b	smpsNoAttack, $01
0008772E E110                       	smpsAlterNote       $10
00087730 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087734 E10D                       	smpsAlterNote       $0D
00087736 8001                       	dc.b	nRst, $01
00087738 E10F                       	smpsAlterNote       $0F
0008773A BA0D                       	dc.b	nA4, $0D
0008773C E10C                       	smpsAlterNote       $0C
0008773E E701                       	dc.b	smpsNoAttack, $01
00087740 E108                       	smpsAlterNote       $08
00087742 E701                       	dc.b	smpsNoAttack, $01
00087744 E10C                       	smpsAlterNote       $0C
00087746 E701                       	dc.b	smpsNoAttack, $01
00087748 E112                       	smpsAlterNote       $12
0008774A E701                       	dc.b	smpsNoAttack, $01
0008774C E113                       	smpsAlterNote       $13
0008774E E701                       	dc.b	smpsNoAttack, $01
00087750 E10F                       	smpsAlterNote       $0F
00087752 E701                       	dc.b	smpsNoAttack, $01
00087754 E109                       	smpsAlterNote       $09
00087756 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008775A E10C                       	smpsAlterNote       $0C
0008775C E701                       	dc.b	smpsNoAttack, $01
0008775E E112                       	smpsAlterNote       $12
00087760 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087764 E10C                       	smpsAlterNote       $0C
00087766 E701                       	dc.b	smpsNoAttack, $01
00087768 E109                       	smpsAlterNote       $09
0008776A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008776E E10F                       	smpsAlterNote       $0F
00087770 E701                       	dc.b	smpsNoAttack, $01
00087772 E113                       	smpsAlterNote       $13
00087774 E701                       	dc.b	smpsNoAttack, $01
00087776 E112                       	smpsAlterNote       $12
00087778 E701                       	dc.b	smpsNoAttack, $01
0008777A E10C                       	smpsAlterNote       $0C
0008777C E701                       	dc.b	smpsNoAttack, $01
0008777E E108                       	smpsAlterNote       $08
00087780 E701                       	dc.b	smpsNoAttack, $01
00087782 E10C                       	smpsAlterNote       $0C
00087784 E701                       	dc.b	smpsNoAttack, $01
00087786 E10F                       	smpsAlterNote       $0F
00087788 E701                       	dc.b	smpsNoAttack, $01
0008778A E113                       	smpsAlterNote       $13
0008778C E701                       	dc.b	smpsNoAttack, $01
0008778E E10F                       	smpsAlterNote       $0F
00087790 E701                       	dc.b	smpsNoAttack, $01
00087792 E109                       	smpsAlterNote       $09
00087794 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087798 E10D                       	smpsAlterNote       $0D
0008779A B609 8001                  	dc.b	nF4, $09, nRst, $01
0008779E E10C                       	smpsAlterNote       $0C
000877A0 B506 8001                  	dc.b	nE4, $06, nRst, $01
000877A4 E10B                       	smpsAlterNote       $0B
000877A6 B30D                       	dc.b	nD4, $0D
000877A8 E10C                       	smpsAlterNote       $0C
000877AA B503 8001                  	dc.b	nE4, $03, nRst, $01
000877AE E10D                       	smpsAlterNote       $0D
000877B0 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
000877B8 E109                       	smpsAlterNote       $09
000877BA E701                       	dc.b	smpsNoAttack, $01
000877BC E108                       	smpsAlterNote       $08
000877BE E701                       	dc.b	smpsNoAttack, $01
000877C0 E10C                       	smpsAlterNote       $0C
000877C2 E701                       	dc.b	smpsNoAttack, $01
000877C4 E112                       	smpsAlterNote       $12
000877C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877CA E10F                       	smpsAlterNote       $0F
000877CC E701                       	dc.b	smpsNoAttack, $01
000877CE E109                       	smpsAlterNote       $09
000877D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877D4 E10F                       	smpsAlterNote       $0F
000877D6 E701                       	dc.b	smpsNoAttack, $01
000877D8 E112                       	smpsAlterNote       $12
000877DA E701                       	dc.b	smpsNoAttack, $01
000877DC E113                       	smpsAlterNote       $13
000877DE 8001                       	dc.b	nRst, $01
000877E0 E10D                       	smpsAlterNote       $0D
000877E2 C20D                       	dc.b	nF5, $0D
000877E4 E107                       	smpsAlterNote       $07
000877E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877EA E10A                       	smpsAlterNote       $0A
000877EC E701                       	dc.b	smpsNoAttack, $01
000877EE E110                       	smpsAlterNote       $10
000877F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877F4 E10A                       	smpsAlterNote       $0A
000877F6 E701                       	dc.b	smpsNoAttack, $01
000877F8 E107                       	smpsAlterNote       $07
000877FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877FE E10D                       	smpsAlterNote       $0D
00087800 E701                       	dc.b	smpsNoAttack, $01
00087802 E111                       	smpsAlterNote       $11
00087804 E701                       	dc.b	smpsNoAttack, $01
00087806 E110                       	smpsAlterNote       $10
00087808 E701                       	dc.b	smpsNoAttack, $01
0008780A E10A                       	smpsAlterNote       $0A
0008780C E701                       	dc.b	smpsNoAttack, $01
0008780E E106                       	smpsAlterNote       $06
00087810 E701                       	dc.b	smpsNoAttack, $01
00087812 E10A                       	smpsAlterNote       $0A
00087814 E701                       	dc.b	smpsNoAttack, $01
00087816 E10D                       	smpsAlterNote       $0D
00087818 E701                       	dc.b	smpsNoAttack, $01
0008781A E111                       	smpsAlterNote       $11
0008781C E701                       	dc.b	smpsNoAttack, $01
0008781E E10D                       	smpsAlterNote       $0D
00087820 E701                       	dc.b	smpsNoAttack, $01
00087822 E107                       	smpsAlterNote       $07
00087824 E701                       	dc.b	smpsNoAttack, $01
00087826 E106                       	smpsAlterNote       $06
00087828 E701                       	dc.b	smpsNoAttack, $01
0008782A E10A                       	smpsAlterNote       $0A
0008782C E701                       	dc.b	smpsNoAttack, $01
0008782E E110                       	smpsAlterNote       $10
00087830 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087834 E10D                       	smpsAlterNote       $0D
00087836 E701                       	dc.b	smpsNoAttack, $01
00087838 E107                       	smpsAlterNote       $07
0008783A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008783E E10D                       	smpsAlterNote       $0D
00087840 E701                       	dc.b	smpsNoAttack, $01
00087842 E110                       	smpsAlterNote       $10
00087844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087848 E10A                       	smpsAlterNote       $0A
0008784A E701                       	dc.b	smpsNoAttack, $01
0008784C E106                       	smpsAlterNote       $06
0008784E E701                       	dc.b	smpsNoAttack, $01
00087850 E107                       	smpsAlterNote       $07
00087852 E701                       	dc.b	smpsNoAttack, $01
00087854 E10D                       	smpsAlterNote       $0D
00087856 E701                       	dc.b	smpsNoAttack, $01
00087858 E111                       	smpsAlterNote       $11
0008785A E701                       	dc.b	smpsNoAttack, $01
0008785C E10D                       	smpsAlterNote       $0D
0008785E E701                       	dc.b	smpsNoAttack, $01
00087860 E10A                       	smpsAlterNote       $0A
00087862 E701                       	dc.b	smpsNoAttack, $01
00087864 E106                       	smpsAlterNote       $06
00087866 E701                       	dc.b	smpsNoAttack, $01
00087868 E10A                       	smpsAlterNote       $0A
0008786A E701                       	dc.b	smpsNoAttack, $01
0008786C E110                       	smpsAlterNote       $10
0008786E E701                       	dc.b	smpsNoAttack, $01
00087870 E111                       	smpsAlterNote       $11
00087872 E701                       	dc.b	smpsNoAttack, $01
00087874 E10D                       	smpsAlterNote       $0D
00087876 E701                       	dc.b	smpsNoAttack, $01
00087878 E107                       	smpsAlterNote       $07
0008787A E701                       	dc.b	smpsNoAttack, $01
0008787C E10D                       	smpsAlterNote       $0D
0008787E C207                       	dc.b	nF5, $07
00087880 E10C                       	smpsAlterNote       $0C
00087882 C10D                       	dc.b	nE5, $0D
00087884 E109                       	smpsAlterNote       $09
00087886 E701                       	dc.b	smpsNoAttack, $01
00087888 E106                       	smpsAlterNote       $06
0008788A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008788E E10C                       	smpsAlterNote       $0C
00087890 E701                       	dc.b	smpsNoAttack, $01
00087892 E110                       	smpsAlterNote       $10
00087894 E701                       	dc.b	smpsNoAttack, $01
00087896 E10F                       	smpsAlterNote       $0F
00087898 E701                       	dc.b	smpsNoAttack, $01
0008789A E109                       	smpsAlterNote       $09
0008789C E701                       	dc.b	smpsNoAttack, $01
0008789E E105                       	smpsAlterNote       $05
000878A0 E701                       	dc.b	smpsNoAttack, $01
000878A2 E109                       	smpsAlterNote       $09
000878A4 E701                       	dc.b	smpsNoAttack, $01
000878A6 E10C                       	smpsAlterNote       $0C
000878A8 E701                       	dc.b	smpsNoAttack, $01
000878AA E110                       	smpsAlterNote       $10
000878AC E701                       	dc.b	smpsNoAttack, $01
000878AE E10B                       	smpsAlterNote       $0B
000878B0 BF0D                       	dc.b	nD5, $0D
000878B2 E108                       	smpsAlterNote       $08
000878B4 E701                       	dc.b	smpsNoAttack, $01
000878B6 E105                       	smpsAlterNote       $05
000878B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878BC E10B                       	smpsAlterNote       $0B
000878BE E701                       	dc.b	smpsNoAttack, $01
000878C0 E10F                       	smpsAlterNote       $0F
000878C2 E701                       	dc.b	smpsNoAttack, $01
000878C4 E10E                       	smpsAlterNote       $0E
000878C6 E701                       	dc.b	smpsNoAttack, $01
000878C8 E108                       	smpsAlterNote       $08
000878CA E701                       	dc.b	smpsNoAttack, $01
000878CC E104                       	smpsAlterNote       $04
000878CE E701                       	dc.b	smpsNoAttack, $01
000878D0 E108                       	smpsAlterNote       $08
000878D2 E701                       	dc.b	smpsNoAttack, $01
000878D4 E10E                       	smpsAlterNote       $0E
000878D6 E701                       	dc.b	smpsNoAttack, $01
000878D8 E10F                       	smpsAlterNote       $0F
000878DA E701                       	dc.b	smpsNoAttack, $01
000878DC E10B                       	smpsAlterNote       $0B
000878DE E701                       	dc.b	smpsNoAttack, $01
000878E0 E105                       	smpsAlterNote       $05
000878E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878E6 E108                       	smpsAlterNote       $08
000878E8 E701                       	dc.b	smpsNoAttack, $01
000878EA E10E                       	smpsAlterNote       $0E
000878EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878F0 E108                       	smpsAlterNote       $08
000878F2 E701                       	dc.b	smpsNoAttack, $01
000878F4 E105                       	smpsAlterNote       $05
000878F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878FA E10B                       	smpsAlterNote       $0B
000878FC E701                       	dc.b	smpsNoAttack, $01
000878FE E10F                       	smpsAlterNote       $0F
00087900 E701                       	dc.b	smpsNoAttack, $01
00087902 E10E                       	smpsAlterNote       $0E
00087904 E701                       	dc.b	smpsNoAttack, $01
00087906 E108                       	smpsAlterNote       $08
00087908 E701                       	dc.b	smpsNoAttack, $01
0008790A E104                       	smpsAlterNote       $04
0008790C E701                       	dc.b	smpsNoAttack, $01
0008790E E108                       	smpsAlterNote       $08
00087910 E701                       	dc.b	smpsNoAttack, $01
00087912 E10B                       	smpsAlterNote       $0B
00087914 E701                       	dc.b	smpsNoAttack, $01
00087916 E10F                       	smpsAlterNote       $0F
00087918 E701                       	dc.b	smpsNoAttack, $01
0008791A E10B                       	smpsAlterNote       $0B
0008791C E701                       	dc.b	smpsNoAttack, $01
0008791E E105                       	smpsAlterNote       $05
00087920 E701                       	dc.b	smpsNoAttack, $01
00087922 E104                       	smpsAlterNote       $04
00087924 E701                       	dc.b	smpsNoAttack, $01
00087926 E108                       	smpsAlterNote       $08
00087928 E701                       	dc.b	smpsNoAttack, $01
0008792A E10E                       	smpsAlterNote       $0E
0008792C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087930 E10B                       	smpsAlterNote       $0B
00087932 E701                       	dc.b	smpsNoAttack, $01
00087934 E105                       	smpsAlterNote       $05
00087936 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008793A E10B                       	smpsAlterNote       $0B
0008793C E701                       	dc.b	smpsNoAttack, $01
0008793E E10E                       	smpsAlterNote       $0E
00087940 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087944 E108                       	smpsAlterNote       $08
00087946 E701                       	dc.b	smpsNoAttack, $01
00087948 E105                       	smpsAlterNote       $05
0008794A 8001                       	dc.b	nRst, $01
0008794E E601                       	smpsAlterVol        $01
00087950 E10B                       	smpsAlterNote       $0B
00087952 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008795E 8004                       	dc.b	nRst, $04
00087962 E6FF                       	smpsAlterVol        $FF
00087964 E10D                       	smpsAlterNote       $0D
00087966 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008796E E10C                       	smpsAlterNote       $0C
00087970 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00087975 E10D                       	smpsAlterNote       $0D
00087977 B60D                       	dc.b	nF4, $0D
00087979 E10A                       	smpsAlterNote       $0A
0008797B E701                       	dc.b	smpsNoAttack, $01
0008797D E106                       	smpsAlterNote       $06
0008797F E701                       	dc.b	smpsNoAttack, $01
00087981 E10A                       	smpsAlterNote       $0A
00087983 E701                       	dc.b	smpsNoAttack, $01
00087985 E110                       	smpsAlterNote       $10
00087987 E701                       	dc.b	smpsNoAttack, $01
00087989 E111                       	smpsAlterNote       $11
0008798B E701                       	dc.b	smpsNoAttack, $01
0008798D E10D                       	smpsAlterNote       $0D
0008798F E701                       	dc.b	smpsNoAttack, $01
00087991 E107                       	smpsAlterNote       $07
00087993 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087997 E10A                       	smpsAlterNote       $0A
00087999 E701                       	dc.b	smpsNoAttack, $01
0008799B E110                       	smpsAlterNote       $10
0008799D E701                       	dc.b	smpsNoAttack, $01
0008799F E111                       	smpsAlterNote       $11
000879A1 8001                       	dc.b	nRst, $01
000879A3 E10D                       	smpsAlterNote       $0D
000879A5 B80D                       	dc.b	nG4, $0D
000879A7 E10A                       	smpsAlterNote       $0A
000879A9 E701                       	dc.b	smpsNoAttack, $01
000879AB E106                       	smpsAlterNote       $06
000879AD E701                       	dc.b	smpsNoAttack, $01
000879AF E10A                       	smpsAlterNote       $0A
000879B1 E701                       	dc.b	smpsNoAttack, $01
000879B3 E110                       	smpsAlterNote       $10
000879B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879B9 E10D                       	smpsAlterNote       $0D
000879BB E701                       	dc.b	smpsNoAttack, $01
000879BD E107                       	smpsAlterNote       $07
000879BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879C3 E10D                       	smpsAlterNote       $0D
000879C5 E701                       	dc.b	smpsNoAttack, $01
000879C7 E110                       	smpsAlterNote       $10
000879C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879CD E10A                       	smpsAlterNote       $0A
000879CF E701                       	dc.b	smpsNoAttack, $01
000879D1 E106                       	smpsAlterNote       $06
000879D3 E701                       	dc.b	smpsNoAttack, $01
000879D5 E107                       	smpsAlterNote       $07
000879D7 E701                       	dc.b	smpsNoAttack, $01
000879D9 E10D                       	smpsAlterNote       $0D
000879DB E701                       	dc.b	smpsNoAttack, $01
000879DD E111                       	smpsAlterNote       $11
000879DF E701                       	dc.b	smpsNoAttack, $01
000879E1 E10D                       	smpsAlterNote       $0D
000879E3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000879E7 E10F                       	smpsAlterNote       $0F
000879E9 BA02 8001                  	dc.b	nA4, $02, nRst, $01
000879ED E110                       	smpsAlterNote       $10
000879EF BB03                       	dc.b	nBb4, $03
000879F1 E10F                       	smpsAlterNote       $0F
000879F3 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
000879F9 E110                       	smpsAlterNote       $10
000879FB C703 8001                  	dc.b	nBb5, $03, nRst, $01
000879FF E10F                       	smpsAlterNote       $0F
00087A01 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00087A07 E110                       	smpsAlterNote       $10
00087A09 D302 8001                  	dc.b	nBb6, $02, nRst, $01
00087A0D E10F                       	smpsAlterNote       $0F
00087A0F D20D                       	dc.b	nA6, $0D
00087A11 E10C                       	smpsAlterNote       $0C
00087A13 E701                       	dc.b	smpsNoAttack, $01
00087A15 E108                       	smpsAlterNote       $08
00087A17 E701                       	dc.b	smpsNoAttack, $01
00087A19 E10C                       	smpsAlterNote       $0C
00087A1B E701                       	dc.b	smpsNoAttack, $01
00087A1D E10F                       	smpsAlterNote       $0F
00087A1F E701                       	dc.b	smpsNoAttack, $01
00087A21 E113                       	smpsAlterNote       $13
00087A23 E701                       	dc.b	smpsNoAttack, $01
00087A25 E10F                       	smpsAlterNote       $0F
00087A27 E701                       	dc.b	smpsNoAttack, $01
00087A29 E109                       	smpsAlterNote       $09
00087A2B E701                       	dc.b	smpsNoAttack, $01
00087A2D E108                       	smpsAlterNote       $08
00087A2F E701                       	dc.b	smpsNoAttack, $01
00087A31 E10C                       	smpsAlterNote       $0C
00087A33 E701                       	dc.b	smpsNoAttack, $01
00087A35 E112                       	smpsAlterNote       $12
00087A37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A3B E10F                       	smpsAlterNote       $0F
00087A3D E701                       	dc.b	smpsNoAttack, $01
00087A3F E109                       	smpsAlterNote       $09
00087A41 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00087A47 E10D                       	smpsAlterNote       $0D
00087A49 CE07                       	dc.b	nF6, $07
00087A4B E10C                       	smpsAlterNote       $0C
00087A4D CD06 8001                  	dc.b	nE6, $06, nRst, $01
00087A51 E10D                       	smpsAlterNote       $0D
00087A53 CE03                       	dc.b	nF6, $03
00087A55 E10C                       	smpsAlterNote       $0C
00087A57 CC0D                       	dc.b	nEb6, $0D
00087A59 E109                       	smpsAlterNote       $09
00087A5B E701                       	dc.b	smpsNoAttack, $01
00087A5D E106                       	smpsAlterNote       $06
00087A5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A63 E10C                       	smpsAlterNote       $0C
00087A65 E701                       	dc.b	smpsNoAttack, $01
00087A67 E110                       	smpsAlterNote       $10
00087A69 E701                       	dc.b	smpsNoAttack, $01
00087A6B E10F                       	smpsAlterNote       $0F
00087A6D E701                       	dc.b	smpsNoAttack, $01
00087A6F E109                       	smpsAlterNote       $09
00087A71 E701                       	dc.b	smpsNoAttack, $01
00087A73 E105                       	smpsAlterNote       $05
00087A75 E701                       	dc.b	smpsNoAttack, $01
00087A77 E109                       	smpsAlterNote       $09
00087A79 E701                       	dc.b	smpsNoAttack, $01
00087A7B E10C                       	smpsAlterNote       $0C
00087A7D E701                       	dc.b	smpsNoAttack, $01
00087A7F E110                       	smpsAlterNote       $10
00087A81 E701                       	dc.b	smpsNoAttack, $01
00087A83 E10C                       	smpsAlterNote       $0C
00087A85 E701                       	dc.b	smpsNoAttack, $01
00087A87 E106                       	smpsAlterNote       $06
00087A89 E701                       	dc.b	smpsNoAttack, $01
00087A8B E105                       	smpsAlterNote       $05
00087A8D E701                       	dc.b	smpsNoAttack, $01
00087A8F E109                       	smpsAlterNote       $09
00087A91 E701                       	dc.b	smpsNoAttack, $01
00087A93 E10F                       	smpsAlterNote       $0F
00087A95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A99 E10C                       	smpsAlterNote       $0C
00087A9B E701                       	dc.b	smpsNoAttack, $01
00087A9D E10B                       	smpsAlterNote       $0B
00087A9F CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00087AA9 E10F                       	smpsAlterNote       $0F
00087AAB C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00087AB5 E10D                       	smpsAlterNote       $0D
00087AB7 C203                       	dc.b	nF5, $03
00087AB9 E10C                       	smpsAlterNote       $0C
00087ABB C103 8001                  	dc.b	nE5, $03, nRst, $01
00087ABF E10D                       	smpsAlterNote       $0D
00087AC1 C20D                       	dc.b	nF5, $0D
00087AC3 E10C                       	smpsAlterNote       $0C
00087AC5 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00087AC9 E10B                       	smpsAlterNote       $0B
00087ACB BF0D                       	dc.b	nD5, $0D
00087ACD E108                       	smpsAlterNote       $08
00087ACF E701                       	dc.b	smpsNoAttack, $01
00087AD1 E104                       	smpsAlterNote       $04
00087AD3 E701                       	dc.b	smpsNoAttack, $01
00087AD5 E108                       	smpsAlterNote       $08
00087AD7 E701                       	dc.b	smpsNoAttack, $01
00087AD9 E10E                       	smpsAlterNote       $0E
00087ADB E701                       	dc.b	smpsNoAttack, $01
00087ADD E10F                       	smpsAlterNote       $0F
00087ADF E701                       	dc.b	smpsNoAttack, $01
00087AE1 E10B                       	smpsAlterNote       $0B
00087AE3 E701                       	dc.b	smpsNoAttack, $01
00087AE5 E105                       	smpsAlterNote       $05
00087AE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AEB E108                       	smpsAlterNote       $08
00087AED E701                       	dc.b	smpsNoAttack, $01
00087AEF E10E                       	smpsAlterNote       $0E
00087AF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AF5 E108                       	smpsAlterNote       $08
00087AF7 E701                       	dc.b	smpsNoAttack, $01
00087AF9 E105                       	smpsAlterNote       $05
00087AFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AFF E10B                       	smpsAlterNote       $0B
00087B01 E701                       	dc.b	smpsNoAttack, $01
00087B03 E10F                       	smpsAlterNote       $0F
00087B05 E701                       	dc.b	smpsNoAttack, $01
00087B07 E10E                       	smpsAlterNote       $0E
00087B09 E701                       	dc.b	smpsNoAttack, $01
00087B0B E108                       	smpsAlterNote       $08
00087B0D E701                       	dc.b	smpsNoAttack, $01
00087B0F E104                       	smpsAlterNote       $04
00087B11 E701                       	dc.b	smpsNoAttack, $01
00087B13 E108                       	smpsAlterNote       $08
00087B15 E701                       	dc.b	smpsNoAttack, $01
00087B17 E10B                       	smpsAlterNote       $0B
00087B19 E701                       	dc.b	smpsNoAttack, $01
00087B1B E10F                       	smpsAlterNote       $0F
00087B1D E701                       	dc.b	smpsNoAttack, $01
00087B1F E10B                       	smpsAlterNote       $0B
00087B21 E701                       	dc.b	smpsNoAttack, $01
00087B23 E105                       	smpsAlterNote       $05
00087B25 E701                       	dc.b	smpsNoAttack, $01
00087B27 E104                       	smpsAlterNote       $04
00087B29 E701                       	dc.b	smpsNoAttack, $01
00087B2B E108                       	smpsAlterNote       $08
00087B2D E701                       	dc.b	smpsNoAttack, $01
00087B2F E10E                       	smpsAlterNote       $0E
00087B31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B35 E10B                       	smpsAlterNote       $0B
00087B37 E701                       	dc.b	smpsNoAttack, $01
00087B39 E105                       	smpsAlterNote       $05
00087B3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B3F E10B                       	smpsAlterNote       $0B
00087B41 E701                       	dc.b	smpsNoAttack, $01
00087B43 E10E                       	smpsAlterNote       $0E
00087B45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B49 E108                       	smpsAlterNote       $08
00087B4B E701                       	dc.b	smpsNoAttack, $01
00087B4D E104                       	smpsAlterNote       $04
00087B4F E701                       	dc.b	smpsNoAttack, $01
00087B51 E105                       	smpsAlterNote       $05
00087B53 E701                       	dc.b	smpsNoAttack, $01
00087B55 E10B                       	smpsAlterNote       $0B
00087B57 E701                       	dc.b	smpsNoAttack, $01
00087B59 E10F                       	smpsAlterNote       $0F
00087B5B E701                       	dc.b	smpsNoAttack, $01
00087B5D E10B                       	smpsAlterNote       $0B
00087B5F E701                       	dc.b	smpsNoAttack, $01
00087B61 E108                       	smpsAlterNote       $08
00087B63 E701                       	dc.b	smpsNoAttack, $01
00087B65 E104                       	smpsAlterNote       $04
00087B67 E701                       	dc.b	smpsNoAttack, $01
00087B69 E108                       	smpsAlterNote       $08
00087B6B E701                       	dc.b	smpsNoAttack, $01
00087B6D E10E                       	smpsAlterNote       $0E
00087B6F E701                       	dc.b	smpsNoAttack, $01
00087B71 E10F                       	smpsAlterNote       $0F
00087B73 E701                       	dc.b	smpsNoAttack, $01
00087B75 E10B                       	smpsAlterNote       $0B
00087B77 E701                       	dc.b	smpsNoAttack, $01
00087B79 E105                       	smpsAlterNote       $05
00087B7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B7F E108                       	smpsAlterNote       $08
00087B81 E701                       	dc.b	smpsNoAttack, $01
00087B83 E10E                       	smpsAlterNote       $0E
00087B85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B89 E108                       	smpsAlterNote       $08
00087B8B E701                       	dc.b	smpsNoAttack, $01
00087B8D E105                       	smpsAlterNote       $05
00087B8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B93 E10B                       	smpsAlterNote       $0B
00087B95 E701                       	dc.b	smpsNoAttack, $01
00087B97 E10F                       	smpsAlterNote       $0F
00087B99 E701                       	dc.b	smpsNoAttack, $01
00087B9B E10E                       	smpsAlterNote       $0E
00087B9D E701                       	dc.b	smpsNoAttack, $01
00087B9F E108                       	smpsAlterNote       $08
00087BA1 E701                       	dc.b	smpsNoAttack, $01
00087BA3 E104                       	smpsAlterNote       $04
00087BA5 E701                       	dc.b	smpsNoAttack, $01
00087BA7 E108                       	smpsAlterNote       $08
00087BA9 E701                       	dc.b	smpsNoAttack, $01
00087BAB E10B                       	smpsAlterNote       $0B
00087BAD E701                       	dc.b	smpsNoAttack, $01
00087BAF E10F                       	smpsAlterNote       $0F
00087BB1 E701                       	dc.b	smpsNoAttack, $01
00087BB3 E10B                       	smpsAlterNote       $0B
00087BB5 E701                       	dc.b	smpsNoAttack, $01
00087BB7 E105                       	smpsAlterNote       $05
00087BB9 E701                       	dc.b	smpsNoAttack, $01
00087BBB E104                       	smpsAlterNote       $04
00087BBD E701                       	dc.b	smpsNoAttack, $01
00087BBF E105                       	smpsAlterNote       $05
00087BC1 8001                       	dc.b	nRst, $01
00087BC3 E10D                       	smpsAlterNote       $0D
00087BC5 C20D                       	dc.b	nF5, $0D
00087BC7 E107                       	smpsAlterNote       $07
00087BC9 E701                       	dc.b	smpsNoAttack, $01
00087BCB E106                       	smpsAlterNote       $06
00087BCD E701                       	dc.b	smpsNoAttack, $01
00087BCF E10A                       	smpsAlterNote       $0A
00087BD1 E701                       	dc.b	smpsNoAttack, $01
00087BD3 E110                       	smpsAlterNote       $10
00087BD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BD9 E10D                       	smpsAlterNote       $0D
00087BDB E701                       	dc.b	smpsNoAttack, $01
00087BDD E107                       	smpsAlterNote       $07
00087BDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BE3 E10D                       	smpsAlterNote       $0D
00087BE5 E701                       	dc.b	smpsNoAttack, $01
00087BE7 E110                       	smpsAlterNote       $10
00087BE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BED E10A                       	smpsAlterNote       $0A
00087BEF E701                       	dc.b	smpsNoAttack, $01
00087BF1 E106                       	smpsAlterNote       $06
00087BF3 E701                       	dc.b	smpsNoAttack, $01
00087BF5 E107                       	smpsAlterNote       $07
00087BF7 E701                       	dc.b	smpsNoAttack, $01
00087BF9 E10D                       	smpsAlterNote       $0D
00087BFB E701                       	dc.b	smpsNoAttack, $01
00087BFD E111                       	smpsAlterNote       $11
00087BFF E701                       	dc.b	smpsNoAttack, $01
00087C01 E10D                       	smpsAlterNote       $0D
00087C03 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087C07 E10C                       	smpsAlterNote       $0C
00087C09 C10D                       	dc.b	nE5, $0D
00087C0B E10D                       	smpsAlterNote       $0D
00087C0D C20A                       	dc.b	nF5, $0A
00087C0F E10C                       	smpsAlterNote       $0C
00087C11 C10E                       	dc.b	nE5, $0E
00087C13 E106                       	smpsAlterNote       $06
00087C15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C19 E10C                       	smpsAlterNote       $0C
00087C1B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087C1F E10B                       	smpsAlterNote       $0B
00087C21 BF0D                       	dc.b	nD5, $0D
00087C23 E10C                       	smpsAlterNote       $0C
00087C25 C107                       	dc.b	nE5, $07
00087C27 E10D                       	smpsAlterNote       $0D
00087C29 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00087C33 E110                       	smpsAlterNote       $10
00087C35 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00087C3B E10F                       	smpsAlterNote       $0F
00087C3D C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00087C45 E10D                       	smpsAlterNote       $0D
00087C47 D003                       	dc.b	nG6, $03
00087C4B E0C0                       	smpsPan             panCenter, $00
00087C4D E6FF                       	smpsAlterVol        $FF
00087C4F AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00087C5B 8001                       	dc.b	nRst, $01
00087C5D E10C                       	smpsAlterNote       $0C
00087C5F A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00087C69 E604                       	smpsAlterVol        $04
00087C6B E10B                       	smpsAlterNote       $0B
00087C6D B306 8001                  	dc.b	nD4, $06, nRst, $01
00087C71 E10F                       	smpsAlterNote       $0F
00087C73 AE03                       	dc.b	nA3, $03
00087C75 E10D                       	smpsAlterNote       $0D
00087C77 B603 8001                  	dc.b	nF4, $03, nRst, $01
00087C7B E10C                       	smpsAlterNote       $0C
00087C7D B506 8001                  	dc.b	nE4, $06, nRst, $01
00087C81 E10B                       	smpsAlterNote       $0B
00087C83 B302 8001                  	dc.b	nD4, $02, nRst, $01
00087C87 E10A                       	smpsAlterNote       $0A
00087C89 B103                       	dc.b	nC4, $03
00087C8B E110                       	smpsAlterNote       $10
00087C8D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00087C91 E10F                       	smpsAlterNote       $0F
00087C93 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00087C97 E080                       	smpsPan             panLeft, $00
00087C99 01                         	dc.b	$01
00087C9C E6FB                       	smpsAlterVol        $FB
00087C9E E1E4                       	smpsAlterNote       $E4
00087CA0 C501                       	dc.b	nAb5, $01
00087CA2 E1F4                       	smpsAlterNote       $F4
00087CA4 E701                       	dc.b	smpsNoAttack, $01
00087CA6 E104                       	smpsAlterNote       $04
00087CA8 E701                       	dc.b	smpsNoAttack, $01
00087CAA E114                       	smpsAlterNote       $14
00087CAC E701                       	dc.b	smpsNoAttack, $01
00087CAE E11C                       	smpsAlterNote       $1C
00087CB0 E701                       	dc.b	smpsNoAttack, $01
00087CB2 E1EF                       	smpsAlterNote       $EF
00087CB4 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00087CB7 E1FF                       	smpsAlterNote       $FF
00087CB9 E701                       	dc.b	smpsNoAttack, $01
00087CBB E10F                       	smpsAlterNote       $0F
00087CBD C606                       	dc.b	nA5, $06
00087CBF E109                       	smpsAlterNote       $09
00087CC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CC5 E10F                       	smpsAlterNote       $0F
00087CC7 E701                       	dc.b	smpsNoAttack, $01
00087CC9 E112                       	smpsAlterNote       $12
00087CCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CCF E10C                       	smpsAlterNote       $0C
00087CD1 E701                       	dc.b	smpsNoAttack, $01
00087CD3 E108                       	smpsAlterNote       $08
00087CD5 E701                       	dc.b	smpsNoAttack, $01
00087CD7 E109                       	smpsAlterNote       $09
00087CD9 E701                       	dc.b	smpsNoAttack, $01
00087CDB E10F                       	smpsAlterNote       $0F
00087CDD E701                       	dc.b	smpsNoAttack, $01
00087CDF E113                       	smpsAlterNote       $13
00087CE1 E701                       	dc.b	smpsNoAttack, $01
00087CE3 E10F                       	smpsAlterNote       $0F
00087CE5 E701                       	dc.b	smpsNoAttack, $01
00087CE7 E10C                       	smpsAlterNote       $0C
00087CE9 E701                       	dc.b	smpsNoAttack, $01
00087CEB E108                       	smpsAlterNote       $08
00087CED E701                       	dc.b	smpsNoAttack, $01
00087CEF E10C                       	smpsAlterNote       $0C
00087CF1 E701                       	dc.b	smpsNoAttack, $01
00087CF3 E112                       	smpsAlterNote       $12
00087CF5 E701                       	dc.b	smpsNoAttack, $01
00087CF7 E113                       	smpsAlterNote       $13
00087CF9 E701                       	dc.b	smpsNoAttack, $01
00087CFB E10F                       	smpsAlterNote       $0F
00087CFD E701                       	dc.b	smpsNoAttack, $01
00087CFF E109                       	smpsAlterNote       $09
00087D01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D05 E10C                       	smpsAlterNote       $0C
00087D07 E701                       	dc.b	smpsNoAttack, $01
00087D09 E112                       	smpsAlterNote       $12
00087D0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D0F E10C                       	smpsAlterNote       $0C
00087D11 E701                       	dc.b	smpsNoAttack, $01
00087D13 E109                       	smpsAlterNote       $09
00087D15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D19 E10F                       	smpsAlterNote       $0F
00087D1B E701                       	dc.b	smpsNoAttack, $01
00087D1D E113                       	smpsAlterNote       $13
00087D1F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087D23 E10D                       	smpsAlterNote       $0D
00087D25 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00087D2B E10C                       	smpsAlterNote       $0C
00087D2D C102 8001                  	dc.b	nE5, $02, nRst, $01
00087D31 E10D                       	smpsAlterNote       $0D
00087D33 C201 8001                  	dc.b	nF5, $01, nRst, $01
00087D37 E10C                       	smpsAlterNote       $0C
00087D39 C102                       	dc.b	nE5, $02
00087D3B E10B                       	smpsAlterNote       $0B
00087D3D BF02 8001                  	dc.b	nD5, $02, nRst, $01
00087D41 E10C                       	smpsAlterNote       $0C
00087D43 C101 8001                  	dc.b	nE5, $01, nRst, $01
00087D47 E10B                       	smpsAlterNote       $0B
00087D49 BF02                       	dc.b	nD5, $02
00087D4B E10A                       	smpsAlterNote       $0A
00087D4D BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00087D57 E110                       	smpsAlterNote       $10
00087D59 BB02                       	dc.b	nBb4, $02
00087D5B E10A                       	smpsAlterNote       $0A
00087D5D BD02 8001                  	dc.b	nC5, $02, nRst, $01
00087D61 E110                       	smpsAlterNote       $10
00087D63 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00087D67 E10F                       	smpsAlterNote       $0F
00087D69 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00087D6D E110                       	smpsAlterNote       $10
00087D6F BB02                       	dc.b	nBb4, $02
00087D71 E10F                       	smpsAlterNote       $0F
00087D73 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00087D7D E10C                       	smpsAlterNote       $0C
00087D7F B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00087D87 E10B                       	smpsAlterNote       $0B
00087D89 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00087D8D E10F                       	smpsAlterNote       $0F
00087D8F BA02                       	dc.b	nA4, $02
00087D93 E0C0                       	smpsPan             panCenter, $00
00087D95 E601                       	smpsAlterVol        $01
00087D97 E109                       	smpsAlterNote       $09
00087D99 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00087DA5 E108                       	smpsAlterNote       $08
00087DA7 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00087DAD E107                       	smpsAlterNote       $07
00087DAF B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00087DB5 E109                       	smpsAlterNote       $09
00087DB7 B603 8001                  	dc.b	nF4, $03, nRst, $01
00087DBB E108                       	smpsAlterNote       $08
00087DBD B506 8001                  	dc.b	nE4, $06, nRst, $01
00087DC1 E107                       	smpsAlterNote       $07
00087DC3 B302 8001                  	dc.b	nD4, $02, nRst, $01
00087DC7 E106                       	smpsAlterNote       $06
00087DC9 B103                       	dc.b	nC4, $03
00087DCB E10C                       	smpsAlterNote       $0C
00087DCD AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00087DD3 E080                       	smpsPan             panLeft, $00
00087DD5 07                         	dc.b	$07
00087DD6 E6FE                       	smpsAlterVol        $FE
00087DD8 E10B                       	smpsAlterNote       $0B
00087DDA B20D                       	dc.b	nCs4, $0D
00087DDC E105                       	smpsAlterNote       $05
00087DDE E701                       	dc.b	smpsNoAttack, $01
00087DE0 E104                       	smpsAlterNote       $04
00087DE2 E701                       	dc.b	smpsNoAttack, $01
00087DE4 E108                       	smpsAlterNote       $08
00087DE6 E701                       	dc.b	smpsNoAttack, $01
00087DE8 E10E                       	smpsAlterNote       $0E
00087DEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DEE E10B                       	smpsAlterNote       $0B
00087DF0 E701                       	dc.b	smpsNoAttack, $01
00087DF2 E105                       	smpsAlterNote       $05
00087DF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DF8 E10B                       	smpsAlterNote       $0B
00087DFA E701                       	dc.b	smpsNoAttack, $01
00087DFC E10E                       	smpsAlterNote       $0E
00087DFE E701                       	dc.b	smpsNoAttack, $01
00087E00 E10F                       	smpsAlterNote       $0F
00087E02 8001                       	dc.b	nRst, $01
00087E04 E10B                       	smpsAlterNote       $0B
00087E06 B30D                       	dc.b	nD4, $0D
00087E08 E105                       	smpsAlterNote       $05
00087E0A E701                       	dc.b	smpsNoAttack, $01
00087E0C E104                       	smpsAlterNote       $04
00087E0E E701                       	dc.b	smpsNoAttack, $01
00087E10 E108                       	smpsAlterNote       $08
00087E12 E701                       	dc.b	smpsNoAttack, $01
00087E14 E10E                       	smpsAlterNote       $0E
00087E16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E1A E10B                       	smpsAlterNote       $0B
00087E1C E701                       	dc.b	smpsNoAttack, $01
00087E1E E105                       	smpsAlterNote       $05
00087E20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E24 E10B                       	smpsAlterNote       $0B
00087E26 E701                       	dc.b	smpsNoAttack, $01
00087E28 E10E                       	smpsAlterNote       $0E
00087E2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E2E E108                       	smpsAlterNote       $08
00087E30 E701                       	dc.b	smpsNoAttack, $01
00087E32 E104                       	smpsAlterNote       $04
00087E34 E701                       	dc.b	smpsNoAttack, $01
00087E36 E105                       	smpsAlterNote       $05
00087E38 E701                       	dc.b	smpsNoAttack, $01
00087E3A E10B                       	smpsAlterNote       $0B
00087E3C E701                       	dc.b	smpsNoAttack, $01
00087E3E E10F                       	smpsAlterNote       $0F
00087E40 E701                       	dc.b	smpsNoAttack, $01
00087E42 E10B                       	smpsAlterNote       $0B
00087E44 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087E48 E10C                       	smpsAlterNote       $0C
00087E4A B50D                       	dc.b	nE4, $0D
00087E4C E106                       	smpsAlterNote       $06
00087E4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E52 E10C                       	smpsAlterNote       $0C
00087E54 E701                       	dc.b	smpsNoAttack, $01
00087E56 E10F                       	smpsAlterNote       $0F
00087E58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E5C E109                       	smpsAlterNote       $09
00087E5E E701                       	dc.b	smpsNoAttack, $01
00087E60 E105                       	smpsAlterNote       $05
00087E62 E701                       	dc.b	smpsNoAttack, $01
00087E64 E106                       	smpsAlterNote       $06
00087E66 E701                       	dc.b	smpsNoAttack, $01
00087E68 E10C                       	smpsAlterNote       $0C
00087E6A E701                       	dc.b	smpsNoAttack, $01
00087E6C E110                       	smpsAlterNote       $10
00087E6E E701                       	dc.b	smpsNoAttack, $01
00087E70 E10B                       	smpsAlterNote       $0B
00087E72 B30E                       	dc.b	nD4, $0E
00087E74 E105                       	smpsAlterNote       $05
00087E76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E7A E10B                       	smpsAlterNote       $0B
00087E7C E701                       	dc.b	smpsNoAttack, $01
00087E7E E10E                       	smpsAlterNote       $0E
00087E80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E84 E108                       	smpsAlterNote       $08
00087E86 E701                       	dc.b	smpsNoAttack, $01
00087E88 E104                       	smpsAlterNote       $04
00087E8A E701                       	dc.b	smpsNoAttack, $01
00087E8C E105                       	smpsAlterNote       $05
00087E8E E701                       	dc.b	smpsNoAttack, $01
00087E90 E10B                       	smpsAlterNote       $0B
00087E92 E701                       	dc.b	smpsNoAttack, $01
00087E94 E10F                       	smpsAlterNote       $0F
00087E96 E701                       	dc.b	smpsNoAttack, $01
00087E98 E10B                       	smpsAlterNote       $0B
00087E9A E701                       	dc.b	smpsNoAttack, $01
00087E9C E108                       	smpsAlterNote       $08
00087E9E E701                       	dc.b	smpsNoAttack, $01
00087EA0 E104                       	smpsAlterNote       $04
00087EA2 E701                       	dc.b	smpsNoAttack, $01
00087EA4 E108                       	smpsAlterNote       $08
00087EA6 E701                       	dc.b	smpsNoAttack, $01
00087EA8 E10E                       	smpsAlterNote       $0E
00087EAA E701                       	dc.b	smpsNoAttack, $01
00087EAC E10F                       	smpsAlterNote       $0F
00087EAE E701                       	dc.b	smpsNoAttack, $01
00087EB0 E10B                       	smpsAlterNote       $0B
00087EB2 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00087EB6 E108                       	smpsAlterNote       $08
00087EB8 E701                       	dc.b	smpsNoAttack, $01
00087EBA E105                       	smpsAlterNote       $05
00087EBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EC0 E10B                       	smpsAlterNote       $0B
00087EC2 E701                       	dc.b	smpsNoAttack, $01
00087EC4 E10F                       	smpsAlterNote       $0F
00087EC6 E701                       	dc.b	smpsNoAttack, $01
00087EC8 E10E                       	smpsAlterNote       $0E
00087ECA E701                       	dc.b	smpsNoAttack, $01
00087ECC E108                       	smpsAlterNote       $08
00087ECE E701                       	dc.b	smpsNoAttack, $01
00087ED0 E104                       	smpsAlterNote       $04
00087ED2 E701                       	dc.b	smpsNoAttack, $01
00087ED4 E108                       	smpsAlterNote       $08
00087ED6 E701                       	dc.b	smpsNoAttack, $01
00087ED8 E10B                       	smpsAlterNote       $0B
00087EDA E701                       	dc.b	smpsNoAttack, $01
00087EDC E10F                       	smpsAlterNote       $0F
00087EDE E701                       	dc.b	smpsNoAttack, $01
00087EE0 E10B                       	smpsAlterNote       $0B
00087EE2 B30D                       	dc.b	nD4, $0D
00087EE4 E108                       	smpsAlterNote       $08
00087EE6 E701                       	dc.b	smpsNoAttack, $01
00087EE8 E105                       	smpsAlterNote       $05
00087EEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EEE E10B                       	smpsAlterNote       $0B
00087EF0 E701                       	dc.b	smpsNoAttack, $01
00087EF2 E10F                       	smpsAlterNote       $0F
00087EF4 E701                       	dc.b	smpsNoAttack, $01
00087EF6 E10E                       	smpsAlterNote       $0E
00087EF8 E701                       	dc.b	smpsNoAttack, $01
00087EFA E108                       	smpsAlterNote       $08
00087EFC E701                       	dc.b	smpsNoAttack, $01
00087EFE E104                       	smpsAlterNote       $04
00087F00 E701                       	dc.b	smpsNoAttack, $01
00087F02 E108                       	smpsAlterNote       $08
00087F04 E701                       	dc.b	smpsNoAttack, $01
00087F06 E10B                       	smpsAlterNote       $0B
00087F08 E701                       	dc.b	smpsNoAttack, $01
00087F0A E10F                       	smpsAlterNote       $0F
00087F0C E701                       	dc.b	smpsNoAttack, $01
00087F0E E10B                       	smpsAlterNote       $0B
00087F10 E701                       	dc.b	smpsNoAttack, $01
00087F12 E105                       	smpsAlterNote       $05
00087F14 E701                       	dc.b	smpsNoAttack, $01
00087F16 E104                       	smpsAlterNote       $04
00087F18 E701                       	dc.b	smpsNoAttack, $01
00087F1A E108                       	smpsAlterNote       $08
00087F1C E701                       	dc.b	smpsNoAttack, $01
00087F1E E10E                       	smpsAlterNote       $0E
00087F20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F24 E10B                       	smpsAlterNote       $0B
00087F26 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00087F2A E108                       	smpsAlterNote       $08
00087F2C E701                       	dc.b	smpsNoAttack, $01
00087F2E E104                       	smpsAlterNote       $04
00087F30 E701                       	dc.b	smpsNoAttack, $01
00087F32 E108                       	smpsAlterNote       $08
00087F34 E701                       	dc.b	smpsNoAttack, $01
00087F36 E10B                       	smpsAlterNote       $0B
00087F38 E701                       	dc.b	smpsNoAttack, $01
00087F3C E0C0                       	smpsPan             panCenter, $00
00087F3E E601                       	smpsAlterVol        $01
00087F40 E108                       	smpsAlterNote       $08
00087F42 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00087F4E 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00087F56 E080                       	smpsPan             panLeft, $00
00087F58 07                         	dc.b	$07
00087F59 E6FF                       	smpsAlterVol        $FF
00087F5B E10D                       	smpsAlterNote       $0D
00087F5D B60D                       	dc.b	nF4, $0D
00087F5F E10A                       	smpsAlterNote       $0A
00087F61 E701                       	dc.b	smpsNoAttack, $01
00087F63 E106                       	smpsAlterNote       $06
00087F65 E701                       	dc.b	smpsNoAttack, $01
00087F67 E10A                       	smpsAlterNote       $0A
00087F69 E701                       	dc.b	smpsNoAttack, $01
00087F6B E110                       	smpsAlterNote       $10
00087F6D E701                       	dc.b	smpsNoAttack, $01
00087F6F E111                       	smpsAlterNote       $11
00087F71 E701                       	dc.b	smpsNoAttack, $01
00087F73 E10D                       	smpsAlterNote       $0D
00087F75 E701                       	dc.b	smpsNoAttack, $01
00087F77 E107                       	smpsAlterNote       $07
00087F79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F7D E10A                       	smpsAlterNote       $0A
00087F7F E701                       	dc.b	smpsNoAttack, $01
00087F81 E110                       	smpsAlterNote       $10
00087F83 E701                       	dc.b	smpsNoAttack, $01
00087F85 E111                       	smpsAlterNote       $11
00087F87 8001                       	dc.b	nRst, $01
00087F89 E10D                       	smpsAlterNote       $0D
00087F8B B80D                       	dc.b	nG4, $0D
00087F8D E10A                       	smpsAlterNote       $0A
00087F8F E701                       	dc.b	smpsNoAttack, $01
00087F91 E106                       	smpsAlterNote       $06
00087F93 E701                       	dc.b	smpsNoAttack, $01
00087F95 E10A                       	smpsAlterNote       $0A
00087F97 E701                       	dc.b	smpsNoAttack, $01
00087F99 E110                       	smpsAlterNote       $10
00087F9B E701                       	dc.b	smpsNoAttack, $01
00087F9D E111                       	smpsAlterNote       $11
00087F9F E701                       	dc.b	smpsNoAttack, $01
00087FA1 E10D                       	smpsAlterNote       $0D
00087FA3 E701                       	dc.b	smpsNoAttack, $01
00087FA5 E107                       	smpsAlterNote       $07
00087FA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FAB E10D                       	smpsAlterNote       $0D
00087FAD E701                       	dc.b	smpsNoAttack, $01
00087FAF E110                       	smpsAlterNote       $10
00087FB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FB5 E10A                       	smpsAlterNote       $0A
00087FB7 E701                       	dc.b	smpsNoAttack, $01
00087FB9 E106                       	smpsAlterNote       $06
00087FBB E701                       	dc.b	smpsNoAttack, $01
00087FBD E107                       	smpsAlterNote       $07
00087FBF E701                       	dc.b	smpsNoAttack, $01
00087FC1 E10D                       	smpsAlterNote       $0D
00087FC3 E701                       	dc.b	smpsNoAttack, $01
00087FC5 E111                       	smpsAlterNote       $11
00087FC7 E701                       	dc.b	smpsNoAttack, $01
00087FC9 E10D                       	smpsAlterNote       $0D
00087FCB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087FCF E10F                       	smpsAlterNote       $0F
00087FD1 BA0D                       	dc.b	nA4, $0D
00087FD3 E109                       	smpsAlterNote       $09
00087FD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FD9 E10C                       	smpsAlterNote       $0C
00087FDB E701                       	dc.b	smpsNoAttack, $01
00087FDD E112                       	smpsAlterNote       $12
00087FDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FE3 E10C                       	smpsAlterNote       $0C
00087FE5 E701                       	dc.b	smpsNoAttack, $01
00087FE7 E109                       	smpsAlterNote       $09
00087FE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FED E10F                       	smpsAlterNote       $0F
00087FEF E701                       	dc.b	smpsNoAttack, $01
00087FF1 E113                       	smpsAlterNote       $13
00087FF3 E701                       	dc.b	smpsNoAttack, $01
00087FF5 E112                       	smpsAlterNote       $12
00087FF7 E701                       	dc.b	smpsNoAttack, $01
00087FF9 E10C                       	smpsAlterNote       $0C
00087FFB E701                       	dc.b	smpsNoAttack, $01
00087FFD E108                       	smpsAlterNote       $08
00087FFF E701                       	dc.b	smpsNoAttack, $01
00088001 E10C                       	smpsAlterNote       $0C
00088003 E701                       	dc.b	smpsNoAttack, $01
00088005 E10F                       	smpsAlterNote       $0F
00088007 E701                       	dc.b	smpsNoAttack, $01
00088009 E113                       	smpsAlterNote       $13
0008800B E701                       	dc.b	smpsNoAttack, $01
0008800D E10F                       	smpsAlterNote       $0F
0008800F E701                       	dc.b	smpsNoAttack, $01
00088011 E109                       	smpsAlterNote       $09
00088013 E701                       	dc.b	smpsNoAttack, $01
00088015 E108                       	smpsAlterNote       $08
00088017 E701                       	dc.b	smpsNoAttack, $01
00088019 E10C                       	smpsAlterNote       $0C
0008801B E701                       	dc.b	smpsNoAttack, $01
0008801D E112                       	smpsAlterNote       $12
0008801F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088023 E10F                       	smpsAlterNote       $0F
00088025 E701                       	dc.b	smpsNoAttack, $01
00088027 E109                       	smpsAlterNote       $09
00088029 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008802D E10F                       	smpsAlterNote       $0F
0008802F E701                       	dc.b	smpsNoAttack, $01
00088031 E112                       	smpsAlterNote       $12
00088033 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088037 E10C                       	smpsAlterNote       $0C
00088039 E701                       	dc.b	smpsNoAttack, $01
0008803B E108                       	smpsAlterNote       $08
0008803D E701                       	dc.b	smpsNoAttack, $01
0008803F E109                       	smpsAlterNote       $09
00088041 E701                       	dc.b	smpsNoAttack, $01
00088043 E10C                       	smpsAlterNote       $0C
00088045 B50A                       	dc.b	nE4, $0A
00088047 E10D                       	smpsAlterNote       $0D
00088049 B60E                       	dc.b	nF4, $0E
0008804B E107                       	smpsAlterNote       $07
0008804D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088051 E10D                       	smpsAlterNote       $0D
00088053 E701                       	dc.b	smpsNoAttack, $01
00088055 E110                       	smpsAlterNote       $10
00088057 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008805B E10A                       	smpsAlterNote       $0A
0008805D E701                       	dc.b	smpsNoAttack, $01
0008805F E106                       	smpsAlterNote       $06
00088061 E701                       	dc.b	smpsNoAttack, $01
00088063 E107                       	smpsAlterNote       $07
00088065 E701                       	dc.b	smpsNoAttack, $01
00088067 E10D                       	smpsAlterNote       $0D
00088069 E701                       	dc.b	smpsNoAttack, $01
0008806B E111                       	smpsAlterNote       $11
0008806D E701                       	dc.b	smpsNoAttack, $01
0008806F E10D                       	smpsAlterNote       $0D
00088071 B80D                       	dc.b	nG4, $0D
00088073 E10A                       	smpsAlterNote       $0A
00088075 E701                       	dc.b	smpsNoAttack, $01
00088077 E107                       	smpsAlterNote       $07
00088079 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008807D E10D                       	smpsAlterNote       $0D
0008807F E701                       	dc.b	smpsNoAttack, $01
00088081 E111                       	smpsAlterNote       $11
00088083 E701                       	dc.b	smpsNoAttack, $01
00088085 E110                       	smpsAlterNote       $10
00088087 E701                       	dc.b	smpsNoAttack, $01
00088089 E10A                       	smpsAlterNote       $0A
0008808B E701                       	dc.b	smpsNoAttack, $01
0008808D E106                       	smpsAlterNote       $06
0008808F E701                       	dc.b	smpsNoAttack, $01
00088091 E10A                       	smpsAlterNote       $0A
00088093 E701                       	dc.b	smpsNoAttack, $01
00088095 E10D                       	smpsAlterNote       $0D
00088097 E701                       	dc.b	smpsNoAttack, $01
00088099 E111                       	smpsAlterNote       $11
0008809B E701                       	dc.b	smpsNoAttack, $01
0008809D E10D                       	smpsAlterNote       $0D
0008809F E701                       	dc.b	smpsNoAttack, $01
000880A1 E107                       	smpsAlterNote       $07
000880A3 E701                       	dc.b	smpsNoAttack, $01
000880A5 E106                       	smpsAlterNote       $06
000880A7 E701                       	dc.b	smpsNoAttack, $01
000880A9 E10A                       	smpsAlterNote       $0A
000880AB E701                       	dc.b	smpsNoAttack, $01
000880AD E110                       	smpsAlterNote       $10
000880AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880B3 E10D                       	smpsAlterNote       $0D
000880B5 E701                       	dc.b	smpsNoAttack, $01
000880B7 E10F                       	smpsAlterNote       $0F
000880B9 BA0D                       	dc.b	nA4, $0D
000880BB E10C                       	smpsAlterNote       $0C
000880BD E701                       	dc.b	smpsNoAttack, $01
000880BF E108                       	smpsAlterNote       $08
000880C1 E701                       	dc.b	smpsNoAttack, $01
000880C3 E109                       	smpsAlterNote       $09
000880C5 E701                       	dc.b	smpsNoAttack, $01
000880C7 E10F                       	smpsAlterNote       $0F
000880C9 E701                       	dc.b	smpsNoAttack, $01
000880CB E113                       	smpsAlterNote       $13
000880CD E701                       	dc.b	smpsNoAttack, $01
000880CF E10F                       	smpsAlterNote       $0F
000880D1 E701                       	dc.b	smpsNoAttack, $01
000880D3 E10C                       	smpsAlterNote       $0C
000880D5 E701                       	dc.b	smpsNoAttack, $01
000880D7 E108                       	smpsAlterNote       $08
000880D9 E701                       	dc.b	smpsNoAttack, $01
000880DB E10C                       	smpsAlterNote       $0C
000880DD E701                       	dc.b	smpsNoAttack, $01
000880DF E112                       	smpsAlterNote       $12
000880E1 E701                       	dc.b	smpsNoAttack, $01
000880E3 E113                       	smpsAlterNote       $13
000880E5 E701                       	dc.b	smpsNoAttack, $01
000880E7 E10F                       	smpsAlterNote       $0F
000880E9 E701                       	dc.b	smpsNoAttack, $01
000880EB E109                       	smpsAlterNote       $09
000880ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880F1 E10C                       	smpsAlterNote       $0C
000880F3 E701                       	dc.b	smpsNoAttack, $01
000880F5 E112                       	smpsAlterNote       $12
000880F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880FB E10C                       	smpsAlterNote       $0C
000880FD E701                       	dc.b	smpsNoAttack, $01
000880FF E109                       	smpsAlterNote       $09
00088101 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088105 E10F                       	smpsAlterNote       $0F
00088107 E701                       	dc.b	smpsNoAttack, $01
00088109 E113                       	smpsAlterNote       $13
0008810B E701                       	dc.b	smpsNoAttack, $01
0008810D E112                       	smpsAlterNote       $12
0008810F E701                       	dc.b	smpsNoAttack, $01
00088111 E10C                       	smpsAlterNote       $0C
00088113 E701                       	dc.b	smpsNoAttack, $01
00088115 E109                       	smpsAlterNote       $09
00088117 8001                       	dc.b	nRst, $01
00088119 E10D                       	smpsAlterNote       $0D
0008811B B60A                       	dc.b	nF4, $0A
0008811D E10C                       	smpsAlterNote       $0C
0008811F B506 8001                  	dc.b	nE4, $06, nRst, $01
00088123 E10B                       	smpsAlterNote       $0B
00088125 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00088129 E10C                       	smpsAlterNote       $0C
0008812B B503                       	dc.b	nE4, $03
0008812D E10D                       	smpsAlterNote       $0D
0008812F B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00088139 E10C                       	smpsAlterNote       $0C
0008813B E701                       	dc.b	smpsNoAttack, $01
0008813D E108                       	smpsAlterNote       $08
0008813F E701                       	dc.b	smpsNoAttack, $01
00088141 E10C                       	smpsAlterNote       $0C
00088143 E701                       	dc.b	smpsNoAttack, $01
00088145 E112                       	smpsAlterNote       $12
00088147 E701                       	dc.b	smpsNoAttack, $01
00088149 E113                       	smpsAlterNote       $13
0008814B E701                       	dc.b	smpsNoAttack, $01
0008814D E10F                       	smpsAlterNote       $0F
0008814F E701                       	dc.b	smpsNoAttack, $01
00088151 E109                       	smpsAlterNote       $09
00088153 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088157 E10C                       	smpsAlterNote       $0C
00088159 E701                       	dc.b	smpsNoAttack, $01
0008815B E112                       	smpsAlterNote       $12
0008815D E701                       	dc.b	smpsNoAttack, $01
0008815F E113                       	smpsAlterNote       $13
00088161 8001                       	dc.b	nRst, $01
00088163 E10D                       	smpsAlterNote       $0D
00088165 C20D                       	dc.b	nF5, $0D
00088167 E10A                       	smpsAlterNote       $0A
00088169 E701                       	dc.b	smpsNoAttack, $01
0008816B E106                       	smpsAlterNote       $06
0008816D E701                       	dc.b	smpsNoAttack, $01
0008816F E10A                       	smpsAlterNote       $0A
00088171 E701                       	dc.b	smpsNoAttack, $01
00088173 E110                       	smpsAlterNote       $10
00088175 E701                       	dc.b	smpsNoAttack, $01
00088177 E111                       	smpsAlterNote       $11
00088179 E701                       	dc.b	smpsNoAttack, $01
0008817B E10D                       	smpsAlterNote       $0D
0008817D E701                       	dc.b	smpsNoAttack, $01
0008817F E107                       	smpsAlterNote       $07
00088181 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088185 E10A                       	smpsAlterNote       $0A
00088187 E701                       	dc.b	smpsNoAttack, $01
00088189 E110                       	smpsAlterNote       $10
0008818B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008818F E10A                       	smpsAlterNote       $0A
00088191 E701                       	dc.b	smpsNoAttack, $01
00088193 E107                       	smpsAlterNote       $07
00088195 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088199 E10D                       	smpsAlterNote       $0D
0008819B E701                       	dc.b	smpsNoAttack, $01
0008819D E111                       	smpsAlterNote       $11
0008819F E701                       	dc.b	smpsNoAttack, $01
000881A1 E110                       	smpsAlterNote       $10
000881A3 E701                       	dc.b	smpsNoAttack, $01
000881A5 E10A                       	smpsAlterNote       $0A
000881A7 E701                       	dc.b	smpsNoAttack, $01
000881A9 E106                       	smpsAlterNote       $06
000881AB E701                       	dc.b	smpsNoAttack, $01
000881AD E10A                       	smpsAlterNote       $0A
000881AF E701                       	dc.b	smpsNoAttack, $01
000881B1 E10D                       	smpsAlterNote       $0D
000881B3 E701                       	dc.b	smpsNoAttack, $01
000881B5 E111                       	smpsAlterNote       $11
000881B7 E701                       	dc.b	smpsNoAttack, $01
000881B9 E10D                       	smpsAlterNote       $0D
000881BB E701                       	dc.b	smpsNoAttack, $01
000881BD E107                       	smpsAlterNote       $07
000881BF E701                       	dc.b	smpsNoAttack, $01
000881C1 E106                       	smpsAlterNote       $06
000881C3 E701                       	dc.b	smpsNoAttack, $01
000881C5 E10A                       	smpsAlterNote       $0A
000881C7 E701                       	dc.b	smpsNoAttack, $01
000881C9 E110                       	smpsAlterNote       $10
000881CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881CF E10D                       	smpsAlterNote       $0D
000881D1 E701                       	dc.b	smpsNoAttack, $01
000881D3 E107                       	smpsAlterNote       $07
000881D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881D9 E10D                       	smpsAlterNote       $0D
000881DB E701                       	dc.b	smpsNoAttack, $01
000881DD E110                       	smpsAlterNote       $10
000881DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881E3 E10A                       	smpsAlterNote       $0A
000881E5 E701                       	dc.b	smpsNoAttack, $01
000881E7 E106                       	smpsAlterNote       $06
000881E9 E701                       	dc.b	smpsNoAttack, $01
000881EB E107                       	smpsAlterNote       $07
000881ED E701                       	dc.b	smpsNoAttack, $01
000881EF E10D                       	smpsAlterNote       $0D
000881F1 E701                       	dc.b	smpsNoAttack, $01
000881F3 E111                       	smpsAlterNote       $11
000881F5 E701                       	dc.b	smpsNoAttack, $01
000881F7 E10D                       	smpsAlterNote       $0D
000881F9 E701                       	dc.b	smpsNoAttack, $01
000881FB E10A                       	smpsAlterNote       $0A
000881FD E701                       	dc.b	smpsNoAttack, $01
000881FF E107                       	smpsAlterNote       $07
00088201 8001                       	dc.b	nRst, $01
00088203 E10D                       	smpsAlterNote       $0D
00088205 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008820B E601                       	smpsAlterVol        $01
0008820D E110                       	smpsAlterNote       $10
0008820F BB0D                       	dc.b	nBb4, $0D
00088211 E10A                       	smpsAlterNote       $0A
00088213 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088217 E110                       	smpsAlterNote       $10
00088219 E701                       	dc.b	smpsNoAttack, $01
0008821B E113                       	smpsAlterNote       $13
0008821D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088221 E10D                       	smpsAlterNote       $0D
00088223 E701                       	dc.b	smpsNoAttack, $01
00088225 E109                       	smpsAlterNote       $09
00088227 E701                       	dc.b	smpsNoAttack, $01
00088229 E10A                       	smpsAlterNote       $0A
0008822B E701                       	dc.b	smpsNoAttack, $01
0008822D E110                       	smpsAlterNote       $10
0008822F E701                       	dc.b	smpsNoAttack, $01
00088231 E114                       	smpsAlterNote       $14
00088233 E701                       	dc.b	smpsNoAttack, $01
00088235 E110                       	smpsAlterNote       $10
00088237 E701                       	dc.b	smpsNoAttack, $01
00088239 E10D                       	smpsAlterNote       $0D
0008823B E701                       	dc.b	smpsNoAttack, $01
0008823D E109                       	smpsAlterNote       $09
0008823F E701                       	dc.b	smpsNoAttack, $01
00088241 E10A                       	smpsAlterNote       $0A
00088243 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00088247 E107                       	smpsAlterNote       $07
00088249 E701                       	dc.b	smpsNoAttack, $01
0008824B E103                       	smpsAlterNote       $03
0008824D E701                       	dc.b	smpsNoAttack, $01
0008824F E107                       	smpsAlterNote       $07
00088251 E701                       	dc.b	smpsNoAttack, $01
00088253 E10D                       	smpsAlterNote       $0D
00088255 E701                       	dc.b	smpsNoAttack, $01
00088257 E10E                       	smpsAlterNote       $0E
00088259 E701                       	dc.b	smpsNoAttack, $01
0008825B E10A                       	smpsAlterNote       $0A
0008825D E701                       	dc.b	smpsNoAttack, $01
0008825F E104                       	smpsAlterNote       $04
00088261 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088265 E107                       	smpsAlterNote       $07
00088267 E701                       	dc.b	smpsNoAttack, $01
00088269 E10D                       	smpsAlterNote       $0D
0008826B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008826F E107                       	smpsAlterNote       $07
00088271 E701                       	dc.b	smpsNoAttack, $01
00088273 E104                       	smpsAlterNote       $04
00088275 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088279 E10B                       	smpsAlterNote       $0B
0008827B BF0D                       	dc.b	nD5, $0D
0008827D E108                       	smpsAlterNote       $08
0008827F E701                       	dc.b	smpsNoAttack, $01
00088281 E105                       	smpsAlterNote       $05
00088283 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088287 E10B                       	smpsAlterNote       $0B
00088289 E701                       	dc.b	smpsNoAttack, $01
0008828B E10F                       	smpsAlterNote       $0F
0008828D E701                       	dc.b	smpsNoAttack, $01
0008828F E10E                       	smpsAlterNote       $0E
00088291 E701                       	dc.b	smpsNoAttack, $01
00088293 E108                       	smpsAlterNote       $08
00088295 E701                       	dc.b	smpsNoAttack, $01
00088297 E104                       	smpsAlterNote       $04
00088299 E701                       	dc.b	smpsNoAttack, $01
0008829B E108                       	smpsAlterNote       $08
0008829D E701                       	dc.b	smpsNoAttack, $01
0008829F E10B                       	smpsAlterNote       $0B
000882A1 E701                       	dc.b	smpsNoAttack, $01
000882A3 E10F                       	smpsAlterNote       $0F
000882A5 E701                       	dc.b	smpsNoAttack, $01
000882A7 E10B                       	smpsAlterNote       $0B
000882A9 E701                       	dc.b	smpsNoAttack, $01
000882AB E105                       	smpsAlterNote       $05
000882AD E701                       	dc.b	smpsNoAttack, $01
000882AF E104                       	smpsAlterNote       $04
000882B1 E701                       	dc.b	smpsNoAttack, $01
000882B3 E105                       	smpsAlterNote       $05
000882B5 8001                       	dc.b	nRst, $01
000882B7 E10C                       	smpsAlterNote       $0C
000882B9 C10C                       	dc.b	nE5, $0C
000882BB E10D                       	smpsAlterNote       $0D
000882BD C201                       	dc.b	nF5, $01
000882BF E10E                       	smpsAlterNote       $0E
000882C1 C301 8001                  	dc.b	nFs5, $01, nRst, $01
000882C5 E10D                       	smpsAlterNote       $0D
000882C7 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000882CB E10A                       	smpsAlterNote       $0A
000882CD E701                       	dc.b	smpsNoAttack, $01
000882CF E106                       	smpsAlterNote       $06
000882D1 E701                       	dc.b	smpsNoAttack, $01
000882D3 E10A                       	smpsAlterNote       $0A
000882D5 E701                       	dc.b	smpsNoAttack, $01
000882D7 E10D                       	smpsAlterNote       $0D
000882D9 E701                       	dc.b	smpsNoAttack, $01
000882DB E111                       	smpsAlterNote       $11
000882DD E701                       	dc.b	smpsNoAttack, $01
000882DF E10D                       	smpsAlterNote       $0D
000882E1 E701                       	dc.b	smpsNoAttack, $01
000882E3 E107                       	smpsAlterNote       $07
000882E5 E701                       	dc.b	smpsNoAttack, $01
000882E7 E106                       	smpsAlterNote       $06
000882E9 E701                       	dc.b	smpsNoAttack, $01
000882EB E10A                       	smpsAlterNote       $0A
000882ED E701                       	dc.b	smpsNoAttack, $01
000882EF E110                       	smpsAlterNote       $10
000882F1 E701                       	dc.b	smpsNoAttack, $01
000882F3 E111                       	smpsAlterNote       $11
000882F5 8001                       	dc.b	nRst, $01
000882F7 E10D                       	smpsAlterNote       $0D
000882F9 C40D                       	dc.b	nG5, $0D
000882FB E10A                       	smpsAlterNote       $0A
000882FD E701                       	dc.b	smpsNoAttack, $01
000882FF E106                       	smpsAlterNote       $06
00088301 E701                       	dc.b	smpsNoAttack, $01
00088303 E10A                       	smpsAlterNote       $0A
00088305 E701                       	dc.b	smpsNoAttack, $01
00088307 E10D                       	smpsAlterNote       $0D
00088309 E701                       	dc.b	smpsNoAttack, $01
0008830B E10C                       	smpsAlterNote       $0C
0008830D C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00088319 8001                       	dc.b	nRst, $01
0008831B E10D                       	smpsAlterNote       $0D
0008831D C20D                       	dc.b	nF5, $0D
0008831F E10A                       	smpsAlterNote       $0A
00088321 E701                       	dc.b	smpsNoAttack, $01
00088323 E106                       	smpsAlterNote       $06
00088325 E701                       	dc.b	smpsNoAttack, $01
00088327 E10A                       	smpsAlterNote       $0A
00088329 E701                       	dc.b	smpsNoAttack, $01
0008832B E110                       	smpsAlterNote       $10
0008832D E701                       	dc.b	smpsNoAttack, $01
0008832F E111                       	smpsAlterNote       $11
00088331 E701                       	dc.b	smpsNoAttack, $01
00088333 E10D                       	smpsAlterNote       $0D
00088335 E701                       	dc.b	smpsNoAttack, $01
00088337 E107                       	smpsAlterNote       $07
00088339 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008833D E10A                       	smpsAlterNote       $0A
0008833F E701                       	dc.b	smpsNoAttack, $01
00088341 E110                       	smpsAlterNote       $10
00088343 E701                       	dc.b	smpsNoAttack, $01
00088345 E111                       	smpsAlterNote       $11
00088347 8001                       	dc.b	nRst, $01
00088349 E10F                       	smpsAlterNote       $0F
0008834B C60A                       	dc.b	nA5, $0A
0008834D E10D                       	smpsAlterNote       $0D
0008834F C406 8001                  	dc.b	nG5, $06, nRst, $01
00088353 E10C                       	smpsAlterNote       $0C
00088355 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00088361 8001                       	dc.b	nRst, $01
00088363 E10D                       	smpsAlterNote       $0D
00088365 C20D                       	dc.b	nF5, $0D
00088367 E107                       	smpsAlterNote       $07
00088369 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008836D E10A                       	smpsAlterNote       $0A
0008836F E701                       	dc.b	smpsNoAttack, $01
00088371 E110                       	smpsAlterNote       $10
00088373 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088377 E10A                       	smpsAlterNote       $0A
00088379 E701                       	dc.b	smpsNoAttack, $01
0008837B E107                       	smpsAlterNote       $07
0008837D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088381 E10D                       	smpsAlterNote       $0D
00088383 E701                       	dc.b	smpsNoAttack, $01
00088385 E111                       	smpsAlterNote       $11
00088387 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008838B E10D                       	smpsAlterNote       $0D
0008838D C40D                       	dc.b	nG5, $0D
0008838F E107                       	smpsAlterNote       $07
00088391 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088395 E10A                       	smpsAlterNote       $0A
00088397 E701                       	dc.b	smpsNoAttack, $01
00088399 E10D                       	smpsAlterNote       $0D
0008839B 8001                       	dc.b	nRst, $01
0008839D E10C                       	smpsAlterNote       $0C
0008839F C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000883AB E10D                       	smpsAlterNote       $0D
000883AD C20E                       	dc.b	nF5, $0E
000883AF E107                       	smpsAlterNote       $07
000883B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883B5 E10D                       	smpsAlterNote       $0D
000883B7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000883BD E0C0                       	smpsPan             panCenter, $00
000883BF E603                       	smpsAlterVol        $03
000883C1 E108                       	smpsAlterNote       $08
000883C3 B406                       	dc.b	nEb4, $06
000883C5 E10C                       	smpsAlterNote       $0C
000883C7 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000883CB E108                       	smpsAlterNote       $08
000883CD B403                       	dc.b	nEb4, $03
000883CF E109                       	smpsAlterNote       $09
000883D1 B803 8001                  	dc.b	nG4, $03, nRst, $01
000883D5 E10C                       	smpsAlterNote       $0C
000883D7 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000883DF 03                         	dc.b	$03
000883E0 E6FD                       	smpsAlterVol        $FD
000883E2 F6F1 F4                    	smpsJump            music84_Jump00
000883E5                            
000883E5                            ; PSG1 Data
000883E5                            music84_PSG1:
000883E5 E1FD                       	smpsAlterNote       $FD
000883E7 EC04                       	smpsPSGAlterVol     $04
000883E9 9203                       	dc.b	nF1, $03
000883EB E1FE                       	smpsAlterNote       $FE
000883ED 9603                       	dc.b	nA1, $03
000883EF EC04                       	smpsPSGAlterVol     $04
000883F1 E701                       	dc.b	smpsNoAttack, $01
000883F3 E1FF                       	smpsAlterNote       $FF
000883F5 ECFC                       	smpsPSGAlterVol     $FC
000883F7 9B03                       	dc.b	nD2, $03
000883F9 E1FD                       	smpsAlterNote       $FD
000883FB 9403                       	dc.b	nG1, $03
000883FD EC04                       	smpsPSGAlterVol     $04
000883FF E701                       	dc.b	smpsNoAttack, $01
00088401 E1FE                       	smpsAlterNote       $FE
00088403 ECFC                       	smpsPSGAlterVol     $FC
00088405 9703                       	dc.b	nBb1, $03
00088407 E1FF                       	smpsAlterNote       $FF
00088409 9B03                       	dc.b	nD2, $03
0008840B EC04                       	smpsPSGAlterVol     $04
0008840D E701                       	dc.b	smpsNoAttack, $01
0008840F E1FE                       	smpsAlterNote       $FE
00088411 ECFC                       	smpsPSGAlterVol     $FC
00088413 A002                       	dc.b	nG2, $02
00088415 EC04                       	smpsPSGAlterVol     $04
00088417 E701                       	dc.b	smpsNoAttack, $01
00088419 E1FF                       	smpsAlterNote       $FF
0008841B ECFC                       	smpsPSGAlterVol     $FC
0008841D A203                       	dc.b	nA2, $03
0008841F EC0B                       	smpsPSGAlterVol     $0B
00088421 800A                       	dc.b	nRst, $0A
00088423 E105                       	smpsAlterNote       $05
00088425 01                         	dc.b	$01
00088426 E1FC                       	smpsAlterNote       $FC
00088428 01                         	dc.b	$01
00088429 E105                       	smpsAlterNote       $05
0008842B 01                         	dc.b	$01
0008842C E1FD                       	smpsAlterNote       $FD
0008842E 01                         	dc.b	$01
0008842F E105                       	smpsAlterNote       $05
00088431 01                         	dc.b	$01
00088432 E1FD                       	smpsAlterNote       $FD
00088434 01                         	dc.b	$01
00088435 E1FA                       	smpsAlterNote       $FA
00088437 01                         	dc.b	$01
00088438 E1FC                       	smpsAlterNote       $FC
0008843A 01                         	dc.b	$01
0008843B E105                       	smpsAlterNote       $05
0008843D 01                         	dc.b	$01
0008843E E108                       	smpsAlterNote       $08
00088440 0101                       	dc.b	$01, $01
00088442 E105                       	smpsAlterNote       $05
00088444 01                         	dc.b	$01
00088445 E1FA                       	smpsAlterNote       $FA
00088447 0101                       	dc.b	$01, $01
00088449 E1FD                       	smpsAlterNote       $FD
0008844B 01                         	dc.b	$01
0008844C E105                       	smpsAlterNote       $05
0008844E 01                         	dc.b	$01
0008844F E108                       	smpsAlterNote       $08
00088451 01                         	dc.b	$01
00088452 E105                       	smpsAlterNote       $05
00088454 01                         	dc.b	$01
00088455 E1FC                       	smpsAlterNote       $FC
00088457 01                         	dc.b	$01
00088458 E105                       	smpsAlterNote       $05
0008845A 01                         	dc.b	$01
0008845B E1FD                       	smpsAlterNote       $FD
0008845D 01                         	dc.b	$01
0008845E                            
0008845E                            music84_Jump07:
0008845E E105                       	smpsAlterNote       $05
00088460 8001                       	dc.b	nRst, $01
00088462 E1FD                       	smpsAlterNote       $FD
00088464 01                         	dc.b	$01
00088465 E1FA                       	smpsAlterNote       $FA
00088467 01                         	dc.b	$01
00088468 E1FC                       	smpsAlterNote       $FC
0008846A 01                         	dc.b	$01
0008846B E1FD                       	smpsAlterNote       $FD
0008846D ECF5                       	smpsPSGAlterVol     $F5
0008846F 9206                       	dc.b	nF1, $06
00088471 EC04                       	smpsPSGAlterVol     $04
00088473 E701                       	dc.b	smpsNoAttack, $01
00088475 EC07                       	smpsPSGAlterVol     $07
00088477 8003                       	dc.b	nRst, $03
00088479 ECF5                       	smpsPSGAlterVol     $F5
0008847B 9206                       	dc.b	nF1, $06
0008847D EC04                       	smpsPSGAlterVol     $04
0008847F E701                       	dc.b	smpsNoAttack, $01
00088481 EC07                       	smpsPSGAlterVol     $07
00088483 8006                       	dc.b	nRst, $06
00088485 E100                       	smpsAlterNote       $00
00088487 01                         	dc.b	$01
00088488 E104                       	smpsAlterNote       $04
0008848A 01                         	dc.b	$01
0008848B E100                       	smpsAlterNote       $00
0008848D 01                         	dc.b	$01
0008848E E1FB                       	smpsAlterNote       $FB
00088490 01                         	dc.b	$01
00088491 E1FD                       	smpsAlterNote       $FD
00088493 ECF5                       	smpsPSGAlterVol     $F5
00088495 9406                       	dc.b	nG1, $06
00088497 EC04                       	smpsPSGAlterVol     $04
00088499 E701                       	dc.b	smpsNoAttack, $01
0008849B EC07                       	smpsPSGAlterVol     $07
0008849D 8003                       	dc.b	nRst, $03
0008849F ECF5                       	smpsPSGAlterVol     $F5
000884A1 9407                       	dc.b	nG1, $07
000884A3 EC0B                       	smpsPSGAlterVol     $0B
000884A5 8006                       	dc.b	nRst, $06
000884A7 E100                       	smpsAlterNote       $00
000884A9 01                         	dc.b	$01
000884AA E103                       	smpsAlterNote       $03
000884AC 0101                       	dc.b	$01, $01
000884AE E1FD                       	smpsAlterNote       $FD
000884B0 01                         	dc.b	$01
000884B1 ECF5                       	smpsPSGAlterVol     $F5
000884B3 9207                       	dc.b	nF1, $07
000884B5 EC0B                       	smpsPSGAlterVol     $0B
000884B7 8004                       	dc.b	nRst, $04
000884B9 ECF5                       	smpsPSGAlterVol     $F5
000884BB 9206                       	dc.b	nF1, $06
000884BD EC04                       	smpsPSGAlterVol     $04
000884BF E701                       	dc.b	smpsNoAttack, $01
000884C1 EC07                       	smpsPSGAlterVol     $07
000884C3 8006                       	dc.b	nRst, $06
000884C5 E103                       	smpsAlterNote       $03
000884C7 01                         	dc.b	$01
000884C8 E104                       	smpsAlterNote       $04
000884CA 01                         	dc.b	$01
000884CB E100                       	smpsAlterNote       $00
000884CD 01                         	dc.b	$01
000884CE E1FA                       	smpsAlterNote       $FA
000884D0 01                         	dc.b	$01
000884D1 E1FD                       	smpsAlterNote       $FD
000884D3 ECF5                       	smpsPSGAlterVol     $F5
000884D5 9206                       	dc.b	nF1, $06
000884D7 EC04                       	smpsPSGAlterVol     $04
000884D9 E701                       	dc.b	smpsNoAttack, $01
000884DB EC07                       	smpsPSGAlterVol     $07
000884DD 8003                       	dc.b	nRst, $03
000884DF ECF5                       	smpsPSGAlterVol     $F5
000884E1 9106                       	dc.b	nE1, $06
000884E3 EC04                       	smpsPSGAlterVol     $04
000884E5 E701                       	dc.b	smpsNoAttack, $01
000884E7 EC07                       	smpsPSGAlterVol     $07
000884E9 8006                       	dc.b	nRst, $06
000884EB E100                       	smpsAlterNote       $00
000884ED 01                         	dc.b	$01
000884EE E104                       	smpsAlterNote       $04
000884F0 01                         	dc.b	$01
000884F1 E100                       	smpsAlterNote       $00
000884F3 01                         	dc.b	$01
000884F4 E1FD                       	smpsAlterNote       $FD
000884F6 01                         	dc.b	$01
000884F7 ECF5                       	smpsPSGAlterVol     $F5
000884F9 9206                       	dc.b	nF1, $06
000884FB EC04                       	smpsPSGAlterVol     $04
000884FD E701                       	dc.b	smpsNoAttack, $01
000884FF EC07                       	smpsPSGAlterVol     $07
00088501 8003                       	dc.b	nRst, $03
00088503 ECF5                       	smpsPSGAlterVol     $F5
00088505 9207                       	dc.b	nF1, $07
00088507 EC0B                       	smpsPSGAlterVol     $0B
00088509 8007                       	dc.b	nRst, $07
0008850B E103                       	smpsAlterNote       $03
0008850D 0101                       	dc.b	$01, $01
0008850F E1FD                       	smpsAlterNote       $FD
00088511 01                         	dc.b	$01
00088512 E1FB                       	smpsAlterNote       $FB
00088514 01                         	dc.b	$01
00088515 E1FD                       	smpsAlterNote       $FD
00088517 ECF5                       	smpsPSGAlterVol     $F5
00088519 9406                       	dc.b	nG1, $06
0008851B EC0B                       	smpsPSGAlterVol     $0B
0008851D 8004                       	dc.b	nRst, $04
0008851F ECF5                       	smpsPSGAlterVol     $F5
00088521 9406                       	dc.b	nG1, $06
00088523 EC04                       	smpsPSGAlterVol     $04
00088525 E701                       	dc.b	smpsNoAttack, $01
00088527 EC07                       	smpsPSGAlterVol     $07
00088529 8006                       	dc.b	nRst, $06
0008852B E100                       	smpsAlterNote       $00
0008852D 01                         	dc.b	$01
0008852E E104                       	smpsAlterNote       $04
00088530 01                         	dc.b	$01
00088531 E100                       	smpsAlterNote       $00
00088533 01                         	dc.b	$01
00088534 E1F9                       	smpsAlterNote       $F9
00088536 01                         	dc.b	$01
00088537 E1FD                       	smpsAlterNote       $FD
00088539 ECF5                       	smpsPSGAlterVol     $F5
0008853B 9206                       	dc.b	nF1, $06
0008853D EC04                       	smpsPSGAlterVol     $04
0008853F E701                       	dc.b	smpsNoAttack, $01
00088541 EC07                       	smpsPSGAlterVol     $07
00088543 8003                       	dc.b	nRst, $03
00088545 ECF5                       	smpsPSGAlterVol     $F5
00088547 9207                       	dc.b	nF1, $07
00088549 EC0B                       	smpsPSGAlterVol     $0B
0008854B 8006                       	dc.b	nRst, $06
0008854D E100                       	smpsAlterNote       $00
0008854F 01                         	dc.b	$01
00088550 E104                       	smpsAlterNote       $04
00088552 01                         	dc.b	$01
00088553 E103                       	smpsAlterNote       $03
00088555 01                         	dc.b	$01
00088556 E1FD                       	smpsAlterNote       $FD
00088558 01                         	dc.b	$01
00088559 ECF5                       	smpsPSGAlterVol     $F5
0008855B 9207                       	dc.b	nF1, $07
0008855D EC0B                       	smpsPSGAlterVol     $0B
0008855F 8004                       	dc.b	nRst, $04
00088561 ECF5                       	smpsPSGAlterVol     $F5
00088563 9206                       	dc.b	nF1, $06
00088565 EC0B                       	smpsPSGAlterVol     $0B
00088567 8007                       	dc.b	nRst, $07
00088569 E103                       	smpsAlterNote       $03
0008856B 0101                       	dc.b	$01, $01
0008856D E100                       	smpsAlterNote       $00
0008856F 01                         	dc.b	$01
00088570 E1FA                       	smpsAlterNote       $FA
00088572 01                         	dc.b	$01
00088573 E1FD                       	smpsAlterNote       $FD
00088575 ECF5                       	smpsPSGAlterVol     $F5
00088577 9206                       	dc.b	nF1, $06
00088579 EC04                       	smpsPSGAlterVol     $04
0008857B E701                       	dc.b	smpsNoAttack, $01
0008857D EC07                       	smpsPSGAlterVol     $07
0008857F 8003                       	dc.b	nRst, $03
00088581 ECF5                       	smpsPSGAlterVol     $F5
00088583 9206                       	dc.b	nF1, $06
00088585 EC04                       	smpsPSGAlterVol     $04
00088587 E701                       	dc.b	smpsNoAttack, $01
00088589 EC07                       	smpsPSGAlterVol     $07
0008858B 8006                       	dc.b	nRst, $06
0008858D E100                       	smpsAlterNote       $00
0008858F 01                         	dc.b	$01
00088590 E104                       	smpsAlterNote       $04
00088592 01                         	dc.b	$01
00088593 E100                       	smpsAlterNote       $00
00088595 01                         	dc.b	$01
00088596 E1FD                       	smpsAlterNote       $FD
00088598 01                         	dc.b	$01
00088599 ECF5                       	smpsPSGAlterVol     $F5
0008859B 9206                       	dc.b	nF1, $06
0008859D EC04                       	smpsPSGAlterVol     $04
0008859F E701                       	dc.b	smpsNoAttack, $01
000885A1 EC07                       	smpsPSGAlterVol     $07
000885A3 8003                       	dc.b	nRst, $03
000885A5 ECF5                       	smpsPSGAlterVol     $F5
000885A7 9207                       	dc.b	nF1, $07
000885A9 EC0B                       	smpsPSGAlterVol     $0B
000885AB 8007                       	dc.b	nRst, $07
000885AD E103                       	smpsAlterNote       $03
000885AF 0101                       	dc.b	$01, $01
000885B1 E1FD                       	smpsAlterNote       $FD
000885B3 01                         	dc.b	$01
000885B4 E1FA                       	smpsAlterNote       $FA
000885B6 01                         	dc.b	$01
000885B7 E1FD                       	smpsAlterNote       $FD
000885B9 ECF5                       	smpsPSGAlterVol     $F5
000885BB 9206                       	dc.b	nF1, $06
000885BD EC0B                       	smpsPSGAlterVol     $0B
000885BF 8004                       	dc.b	nRst, $04
000885C1 ECF5                       	smpsPSGAlterVol     $F5
000885C3 9206                       	dc.b	nF1, $06
000885C5 EC04                       	smpsPSGAlterVol     $04
000885C7 E701                       	dc.b	smpsNoAttack, $01
000885C9 EC07                       	smpsPSGAlterVol     $07
000885CB 8006                       	dc.b	nRst, $06
000885CD E103                       	smpsAlterNote       $03
000885CF 01                         	dc.b	$01
000885D0 E104                       	smpsAlterNote       $04
000885D2 01                         	dc.b	$01
000885D3 E100                       	smpsAlterNote       $00
000885D5 01                         	dc.b	$01
000885D6 E1FA                       	smpsAlterNote       $FA
000885D8 01                         	dc.b	$01
000885D9 E1FD                       	smpsAlterNote       $FD
000885DB ECF5                       	smpsPSGAlterVol     $F5
000885DD 9206                       	dc.b	nF1, $06
000885DF EC04                       	smpsPSGAlterVol     $04
000885E1 E701                       	dc.b	smpsNoAttack, $01
000885E3 EC07                       	smpsPSGAlterVol     $07
000885E5 8003                       	dc.b	nRst, $03
000885E7 ECF5                       	smpsPSGAlterVol     $F5
000885E9 9206                       	dc.b	nF1, $06
000885EB EC04                       	smpsPSGAlterVol     $04
000885ED E701                       	dc.b	smpsNoAttack, $01
000885EF EC07                       	smpsPSGAlterVol     $07
000885F1 8006                       	dc.b	nRst, $06
000885F3 E100                       	smpsAlterNote       $00
000885F5 01                         	dc.b	$01
000885F6 E104                       	smpsAlterNote       $04
000885F8 01                         	dc.b	$01
000885F9 E103                       	smpsAlterNote       $03
000885FB 01                         	dc.b	$01
000885FC E1FD                       	smpsAlterNote       $FD
000885FE 01                         	dc.b	$01
000885FF ECF5                       	smpsPSGAlterVol     $F5
00088601 9107                       	dc.b	nE1, $07
00088603 EC0B                       	smpsPSGAlterVol     $0B
00088605 8004                       	dc.b	nRst, $04
00088607 ECF5                       	smpsPSGAlterVol     $F5
00088609 9106                       	dc.b	nE1, $06
0008860B EC0B                       	smpsPSGAlterVol     $0B
0008860D 8007                       	dc.b	nRst, $07
0008860F E103                       	smpsAlterNote       $03
00088611 0101                       	dc.b	$01, $01
00088613 E100                       	smpsAlterNote       $00
00088615 01                         	dc.b	$01
00088616 E1FA                       	smpsAlterNote       $FA
00088618 01                         	dc.b	$01
00088619 E1FD                       	smpsAlterNote       $FD
0008861B ECF5                       	smpsPSGAlterVol     $F5
0008861D 9106                       	dc.b	nE1, $06
0008861F EC04                       	smpsPSGAlterVol     $04
00088621 E701                       	dc.b	smpsNoAttack, $01
00088623 EC07                       	smpsPSGAlterVol     $07
00088625 8003                       	dc.b	nRst, $03
00088627 ECF5                       	smpsPSGAlterVol     $F5
00088629 9106                       	dc.b	nE1, $06
0008862B EC04                       	smpsPSGAlterVol     $04
0008862D E701                       	dc.b	smpsNoAttack, $01
0008862F EC07                       	smpsPSGAlterVol     $07
00088631 8006                       	dc.b	nRst, $06
00088633 E100                       	smpsAlterNote       $00
00088635 01                         	dc.b	$01
00088636 E104                       	smpsAlterNote       $04
00088638 01                         	dc.b	$01
00088639 E100                       	smpsAlterNote       $00
0008863B 01                         	dc.b	$01
0008863C E1FA                       	smpsAlterNote       $FA
0008863E 01                         	dc.b	$01
0008863F E1FD                       	smpsAlterNote       $FD
00088641 ECF5                       	smpsPSGAlterVol     $F5
00088643 9106                       	dc.b	nE1, $06
00088645 EC04                       	smpsPSGAlterVol     $04
00088647 E701                       	dc.b	smpsNoAttack, $01
00088649 EC07                       	smpsPSGAlterVol     $07
0008864B 8003                       	dc.b	nRst, $03
0008864D ECF5                       	smpsPSGAlterVol     $F5
0008864F 9107 9106                  	dc.b	nE1, $07, nE1, $06
00088653 EC04                       	smpsPSGAlterVol     $04
00088655 E701                       	dc.b	smpsNoAttack, $01
00088657 ECFC                       	smpsPSGAlterVol     $FC
00088659 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008865D EC04                       	smpsPSGAlterVol     $04
0008865F E701                       	dc.b	smpsNoAttack, $01
00088661 ECFC                       	smpsPSGAlterVol     $FC
00088663 9106                       	dc.b	nE1, $06
00088665 EC04                       	smpsPSGAlterVol     $04
00088667 E701                       	dc.b	smpsNoAttack, $01
00088669 EC07                       	smpsPSGAlterVol     $07
0008866B 8006                       	dc.b	nRst, $06
0008866D E100                       	smpsAlterNote       $00
0008866F 01                         	dc.b	$01
00088670 E104                       	smpsAlterNote       $04
00088672 01                         	dc.b	$01
00088673 E100                       	smpsAlterNote       $00
00088675 01                         	dc.b	$01
00088676 E1FA                       	smpsAlterNote       $FA
00088678 01                         	dc.b	$01
00088679 E1F9                       	smpsAlterNote       $F9
0008867B 01                         	dc.b	$01
0008867C E1FD                       	smpsAlterNote       $FD
0008867E 01                         	dc.b	$01
0008867F E103                       	smpsAlterNote       $03
00088681 01                         	dc.b	$01
00088682 E104                       	smpsAlterNote       $04
00088684 01                         	dc.b	$01
00088685 E100                       	smpsAlterNote       $00
00088687 01                         	dc.b	$01
00088688 E1FA                       	smpsAlterNote       $FA
0008868A 0101                       	dc.b	$01, $01
0008868C E1FD                       	smpsAlterNote       $FD
0008868E ECF5                       	smpsPSGAlterVol     $F5
00088690 9206                       	dc.b	nF1, $06
00088692 EC04                       	smpsPSGAlterVol     $04
00088694 E701                       	dc.b	smpsNoAttack, $01
00088696 EC07                       	smpsPSGAlterVol     $07
00088698 8003                       	dc.b	nRst, $03
0008869A ECF5                       	smpsPSGAlterVol     $F5
0008869C 9206                       	dc.b	nF1, $06
0008869E EC04                       	smpsPSGAlterVol     $04
000886A0 E701                       	dc.b	smpsNoAttack, $01
000886A2 EC07                       	smpsPSGAlterVol     $07
000886A4 8006                       	dc.b	nRst, $06
000886A6 E100                       	smpsAlterNote       $00
000886A8 01                         	dc.b	$01
000886A9 E104                       	smpsAlterNote       $04
000886AB 01                         	dc.b	$01
000886AC E103                       	smpsAlterNote       $03
000886AE 01                         	dc.b	$01
000886AF E1FD                       	smpsAlterNote       $FD
000886B1 01                         	dc.b	$01
000886B2 ECF5                       	smpsPSGAlterVol     $F5
000886B4 9407                       	dc.b	nG1, $07
000886B6 EC0B                       	smpsPSGAlterVol     $0B
000886B8 8004                       	dc.b	nRst, $04
000886BA ECF5                       	smpsPSGAlterVol     $F5
000886BC 9406                       	dc.b	nG1, $06
000886BE EC0B                       	smpsPSGAlterVol     $0B
000886C0 8007                       	dc.b	nRst, $07
000886C2 E103                       	smpsAlterNote       $03
000886C4 0101                       	dc.b	$01, $01
000886C6 E1FD                       	smpsAlterNote       $FD
000886C8 01                         	dc.b	$01
000886C9 E1F9                       	smpsAlterNote       $F9
000886CB 01                         	dc.b	$01
000886CC E1FD                       	smpsAlterNote       $FD
000886CE ECF5                       	smpsPSGAlterVol     $F5
000886D0 9206                       	dc.b	nF1, $06
000886D2 EC04                       	smpsPSGAlterVol     $04
000886D4 E701                       	dc.b	smpsNoAttack, $01
000886D6 EC07                       	smpsPSGAlterVol     $07
000886D8 8003                       	dc.b	nRst, $03
000886DA ECF5                       	smpsPSGAlterVol     $F5
000886DC 9206                       	dc.b	nF1, $06
000886DE EC04                       	smpsPSGAlterVol     $04
000886E0 E701                       	dc.b	smpsNoAttack, $01
000886E2 EC07                       	smpsPSGAlterVol     $07
000886E4 8006                       	dc.b	nRst, $06
000886E6 E100                       	smpsAlterNote       $00
000886E8 01                         	dc.b	$01
000886E9 E104                       	smpsAlterNote       $04
000886EB 01                         	dc.b	$01
000886EC E100                       	smpsAlterNote       $00
000886EE 01                         	dc.b	$01
000886EF E1FA                       	smpsAlterNote       $FA
000886F1 01                         	dc.b	$01
000886F2 E1FD                       	smpsAlterNote       $FD
000886F4 ECF5                       	smpsPSGAlterVol     $F5
000886F6 9206                       	dc.b	nF1, $06
000886F8 EC04                       	smpsPSGAlterVol     $04
000886FA E701                       	dc.b	smpsNoAttack, $01
000886FC EC07                       	smpsPSGAlterVol     $07
000886FE 8003                       	dc.b	nRst, $03
00088700 ECF5                       	smpsPSGAlterVol     $F5
00088702 9107                       	dc.b	nE1, $07
00088704 EC0B                       	smpsPSGAlterVol     $0B
00088706 8006                       	dc.b	nRst, $06
00088708 E100                       	smpsAlterNote       $00
0008870A 01                         	dc.b	$01
0008870B E103                       	smpsAlterNote       $03
0008870D 0101                       	dc.b	$01, $01
0008870F E1FD                       	smpsAlterNote       $FD
00088711 01                         	dc.b	$01
00088712 ECF5                       	smpsPSGAlterVol     $F5
00088714 9207                       	dc.b	nF1, $07
00088716 EC0B                       	smpsPSGAlterVol     $0B
00088718 8004                       	dc.b	nRst, $04
0008871A ECF5                       	smpsPSGAlterVol     $F5
0008871C 9206                       	dc.b	nF1, $06
0008871E EC04                       	smpsPSGAlterVol     $04
00088720 E701                       	dc.b	smpsNoAttack, $01
00088722 EC07                       	smpsPSGAlterVol     $07
00088724 8006                       	dc.b	nRst, $06
00088726 E103                       	smpsAlterNote       $03
00088728 01                         	dc.b	$01
00088729 E104                       	smpsAlterNote       $04
0008872B 01                         	dc.b	$01
0008872C E100                       	smpsAlterNote       $00
0008872E 01                         	dc.b	$01
0008872F E1FB                       	smpsAlterNote       $FB
00088731 01                         	dc.b	$01
00088732 E1FD                       	smpsAlterNote       $FD
00088734 ECF5                       	smpsPSGAlterVol     $F5
00088736 9406                       	dc.b	nG1, $06
00088738 EC04                       	smpsPSGAlterVol     $04
0008873A E701                       	dc.b	smpsNoAttack, $01
0008873C EC07                       	smpsPSGAlterVol     $07
0008873E 8003                       	dc.b	nRst, $03
00088740 ECF5                       	smpsPSGAlterVol     $F5
00088742 9406                       	dc.b	nG1, $06
00088744 EC04                       	smpsPSGAlterVol     $04
00088746 E701                       	dc.b	smpsNoAttack, $01
00088748 EC07                       	smpsPSGAlterVol     $07
0008874A 8006                       	dc.b	nRst, $06
0008874C E100                       	smpsAlterNote       $00
0008874E 01                         	dc.b	$01
0008874F E104                       	smpsAlterNote       $04
00088751 01                         	dc.b	$01
00088752 E100                       	smpsAlterNote       $00
00088754 01                         	dc.b	$01
00088755 E1FD                       	smpsAlterNote       $FD
00088757 01                         	dc.b	$01
00088758 ECF5                       	smpsPSGAlterVol     $F5
0008875A 9206                       	dc.b	nF1, $06
0008875C EC04                       	smpsPSGAlterVol     $04
0008875E E701                       	dc.b	smpsNoAttack, $01
00088760 EC07                       	smpsPSGAlterVol     $07
00088762 8003                       	dc.b	nRst, $03
00088764 ECF5                       	smpsPSGAlterVol     $F5
00088766 9207                       	dc.b	nF1, $07
00088768 EC0B                       	smpsPSGAlterVol     $0B
0008876A 8007                       	dc.b	nRst, $07
0008876C E103                       	smpsAlterNote       $03
0008876E 0101                       	dc.b	$01, $01
00088770 E1FD                       	smpsAlterNote       $FD
00088772 01                         	dc.b	$01
00088773 E1FA                       	smpsAlterNote       $FA
00088775 01                         	dc.b	$01
00088776 E1FD                       	smpsAlterNote       $FD
00088778 ECF5                       	smpsPSGAlterVol     $F5
0008877A 9206                       	dc.b	nF1, $06
0008877C EC0B                       	smpsPSGAlterVol     $0B
0008877E 8004                       	dc.b	nRst, $04
00088780 ECF5                       	smpsPSGAlterVol     $F5
00088782 9206                       	dc.b	nF1, $06
00088784 EC04                       	smpsPSGAlterVol     $04
00088786 E701                       	dc.b	smpsNoAttack, $01
00088788 EC07                       	smpsPSGAlterVol     $07
0008878A 8006                       	dc.b	nRst, $06
0008878C E100                       	smpsAlterNote       $00
0008878E 01                         	dc.b	$01
0008878F E104                       	smpsAlterNote       $04
00088791 01                         	dc.b	$01
00088792 E100                       	smpsAlterNote       $00
00088794 01                         	dc.b	$01
00088795 E1FA                       	smpsAlterNote       $FA
00088797 01                         	dc.b	$01
00088798 E1FD                       	smpsAlterNote       $FD
0008879A ECF5                       	smpsPSGAlterVol     $F5
0008879C 9206                       	dc.b	nF1, $06
0008879E EC04                       	smpsPSGAlterVol     $04
000887A0 E704                       	dc.b	smpsNoAttack, $04
000887A2 ECFC                       	smpsPSGAlterVol     $FC
000887A4 9207                       	dc.b	nF1, $07
000887A6 EC0B                       	smpsPSGAlterVol     $0B
000887A8 8006                       	dc.b	nRst, $06
000887AA E100                       	smpsAlterNote       $00
000887AC 01                         	dc.b	$01
000887AD E104                       	smpsAlterNote       $04
000887AF 01                         	dc.b	$01
000887B0 E103                       	smpsAlterNote       $03
000887B2 01                         	dc.b	$01
000887B3 E1FD                       	smpsAlterNote       $FD
000887B5 01                         	dc.b	$01
000887B6 ECF5                       	smpsPSGAlterVol     $F5
000887B8 9207                       	dc.b	nF1, $07
000887BA EC0B                       	smpsPSGAlterVol     $0B
000887BC 8004                       	dc.b	nRst, $04
000887BE ECF5                       	smpsPSGAlterVol     $F5
000887C0 9206                       	dc.b	nF1, $06
000887C2 EC0B                       	smpsPSGAlterVol     $0B
000887C4 8007                       	dc.b	nRst, $07
000887C6 E103                       	smpsAlterNote       $03
000887C8 0101                       	dc.b	$01, $01
000887CA E100                       	smpsAlterNote       $00
000887CC 01                         	dc.b	$01
000887CD E1FA                       	smpsAlterNote       $FA
000887CF 01                         	dc.b	$01
000887D0 E1FD                       	smpsAlterNote       $FD
000887D2 ECF5                       	smpsPSGAlterVol     $F5
000887D4 9206                       	dc.b	nF1, $06
000887D6 EC04                       	smpsPSGAlterVol     $04
000887D8 E704                       	dc.b	smpsNoAttack, $04
000887DA ECFC                       	smpsPSGAlterVol     $FC
000887DC 9206                       	dc.b	nF1, $06
000887DE EC04                       	smpsPSGAlterVol     $04
000887E0 E701                       	dc.b	smpsNoAttack, $01
000887E2 EC07                       	smpsPSGAlterVol     $07
000887E4 8006                       	dc.b	nRst, $06
000887E6 E100                       	smpsAlterNote       $00
000887E8 01                         	dc.b	$01
000887E9 E104                       	smpsAlterNote       $04
000887EB 01                         	dc.b	$01
000887EC E100                       	smpsAlterNote       $00
000887EE 01                         	dc.b	$01
000887EF E1FD                       	smpsAlterNote       $FD
000887F1 01                         	dc.b	$01
000887F2 ECF5                       	smpsPSGAlterVol     $F5
000887F4 9206                       	dc.b	nF1, $06
000887F6 EC04                       	smpsPSGAlterVol     $04
000887F8 E701                       	dc.b	smpsNoAttack, $01
000887FA EC07                       	smpsPSGAlterVol     $07
000887FC 8003                       	dc.b	nRst, $03
000887FE ECF5                       	smpsPSGAlterVol     $F5
00088800 9207                       	dc.b	nF1, $07
00088802 EC0B                       	smpsPSGAlterVol     $0B
00088804 8007                       	dc.b	nRst, $07
00088806 E103                       	smpsAlterNote       $03
00088808 0101                       	dc.b	$01, $01
0008880A E1FD                       	smpsAlterNote       $FD
0008880C 01                         	dc.b	$01
0008880D E1FA                       	smpsAlterNote       $FA
0008880F 01                         	dc.b	$01
00088810 E1FD                       	smpsAlterNote       $FD
00088812 ECF5                       	smpsPSGAlterVol     $F5
00088814 9106                       	dc.b	nE1, $06
00088816 EC0B                       	smpsPSGAlterVol     $0B
00088818 8004                       	dc.b	nRst, $04
0008881A ECF5                       	smpsPSGAlterVol     $F5
0008881C 9106                       	dc.b	nE1, $06
0008881E EC04                       	smpsPSGAlterVol     $04
00088820 E701                       	dc.b	smpsNoAttack, $01
00088822 EC07                       	smpsPSGAlterVol     $07
00088824 8006                       	dc.b	nRst, $06
00088826 E100                       	smpsAlterNote       $00
00088828 01                         	dc.b	$01
00088829 E104                       	smpsAlterNote       $04
0008882B 01                         	dc.b	$01
0008882C E100                       	smpsAlterNote       $00
0008882E 01                         	dc.b	$01
0008882F E1FA                       	smpsAlterNote       $FA
00088831 01                         	dc.b	$01
00088832 E1FD                       	smpsAlterNote       $FD
00088834 ECF5                       	smpsPSGAlterVol     $F5
00088836 9106                       	dc.b	nE1, $06
00088838 EC04                       	smpsPSGAlterVol     $04
0008883A E701                       	dc.b	smpsNoAttack, $01
0008883C EC07                       	smpsPSGAlterVol     $07
0008883E 8003                       	dc.b	nRst, $03
00088840 ECF5                       	smpsPSGAlterVol     $F5
00088842 9106                       	dc.b	nE1, $06
00088844 EC04                       	smpsPSGAlterVol     $04
00088846 E701                       	dc.b	smpsNoAttack, $01
00088848 EC07                       	smpsPSGAlterVol     $07
0008884A 8006                       	dc.b	nRst, $06
0008884C E100                       	smpsAlterNote       $00
0008884E 01                         	dc.b	$01
0008884F E104                       	smpsAlterNote       $04
00088851 01                         	dc.b	$01
00088852 E103                       	smpsAlterNote       $03
00088854 01                         	dc.b	$01
00088855 E1FD                       	smpsAlterNote       $FD
00088857 01                         	dc.b	$01
00088858 ECF5                       	smpsPSGAlterVol     $F5
0008885A 9107                       	dc.b	nE1, $07
0008885C EC0B                       	smpsPSGAlterVol     $0B
0008885E 8004                       	dc.b	nRst, $04
00088860 ECF5                       	smpsPSGAlterVol     $F5
00088862 9106                       	dc.b	nE1, $06
00088864 EC0B                       	smpsPSGAlterVol     $0B
00088866 8007                       	dc.b	nRst, $07
00088868 E103                       	smpsAlterNote       $03
0008886A 0101                       	dc.b	$01, $01
0008886C E100                       	smpsAlterNote       $00
0008886E 01                         	dc.b	$01
0008886F E1FA                       	smpsAlterNote       $FA
00088871 01                         	dc.b	$01
00088872 E1FD                       	smpsAlterNote       $FD
00088874 ECF5                       	smpsPSGAlterVol     $F5
00088876 9106                       	dc.b	nE1, $06
00088878 EC04                       	smpsPSGAlterVol     $04
0008887A E701                       	dc.b	smpsNoAttack, $01
0008887C EC07                       	smpsPSGAlterVol     $07
0008887E 8003                       	dc.b	nRst, $03
00088880 ECF5                       	smpsPSGAlterVol     $F5
00088882 9106                       	dc.b	nE1, $06
00088884 EC04                       	smpsPSGAlterVol     $04
00088886 E701                       	dc.b	smpsNoAttack, $01
00088888 EC07                       	smpsPSGAlterVol     $07
0008888A 8003                       	dc.b	nRst, $03
0008888C ECF5                       	smpsPSGAlterVol     $F5
0008888E 9207                       	dc.b	nF1, $07
00088890 EC0B                       	smpsPSGAlterVol     $0B
00088892 8006                       	dc.b	nRst, $06
00088894 E100                       	smpsAlterNote       $00
00088896 01                         	dc.b	$01
00088897 E104                       	smpsAlterNote       $04
00088899 01                         	dc.b	$01
0008889A E103                       	smpsAlterNote       $03
0008889C 01                         	dc.b	$01
0008889D E1FD                       	smpsAlterNote       $FD
0008889F 01                         	dc.b	$01
000888A0 E1F9                       	smpsAlterNote       $F9
000888A2 01                         	dc.b	$01
000888A3 E1FD                       	smpsAlterNote       $FD
000888A5 01                         	dc.b	$01
000888A6 E100                       	smpsAlterNote       $00
000888A8 01                         	dc.b	$01
000888A9 E104                       	smpsAlterNote       $04
000888AB 01                         	dc.b	$01
000888AC E1FD                       	smpsAlterNote       $FD
000888AE ECF5                       	smpsPSGAlterVol     $F5
000888B0 9203 9203                  	dc.b	nF1, $03, nF1, $03
000888B4 EC04                       	smpsPSGAlterVol     $04
000888B6 E701                       	dc.b	smpsNoAttack, $01
000888B8 EC07                       	smpsPSGAlterVol     $07
000888BA 8009                       	dc.b	nRst, $09
000888BC E100                       	smpsAlterNote       $00
000888BE 01                         	dc.b	$01
000888BF E104                       	smpsAlterNote       $04
000888C1 01                         	dc.b	$01
000888C2 E103                       	smpsAlterNote       $03
000888C4 01                         	dc.b	$01
000888C5 E1FD                       	smpsAlterNote       $FD
000888C7 01                         	dc.b	$01
000888C8 E1F9                       	smpsAlterNote       $F9
000888CA 01                         	dc.b	$01
000888CB E1FD                       	smpsAlterNote       $FD
000888CD 01                         	dc.b	$01
000888CE E100                       	smpsAlterNote       $00
000888D0 01                         	dc.b	$01
000888D1 E104                       	smpsAlterNote       $04
000888D3 01                         	dc.b	$01
000888D4 E100                       	smpsAlterNote       $00
000888D6 01                         	dc.b	$01
000888D7 E1FA                       	smpsAlterNote       $FA
000888D9 01                         	dc.b	$01
000888DA E1F9                       	smpsAlterNote       $F9
000888DC 01                         	dc.b	$01
000888DD E1FD                       	smpsAlterNote       $FD
000888DF 01                         	dc.b	$01
000888E0 E103                       	smpsAlterNote       $03
000888E2 0101                       	dc.b	$01, $01
000888E4 E100                       	smpsAlterNote       $00
000888E6 01                         	dc.b	$01
000888E7 E1FD                       	smpsAlterNote       $FD
000888E9 ECF5                       	smpsPSGAlterVol     $F5
000888EB 9202                       	dc.b	nF1, $02
000888ED EC04                       	smpsPSGAlterVol     $04
000888EF E701                       	dc.b	smpsNoAttack, $01
000888F1 ECFC                       	smpsPSGAlterVol     $FC
000888F3 9106                       	dc.b	nE1, $06
000888F5 EC04                       	smpsPSGAlterVol     $04
000888F7 E701                       	dc.b	smpsNoAttack, $01
000888F9 EC07                       	smpsPSGAlterVol     $07
000888FB 8006                       	dc.b	nRst, $06
000888FD E100                       	smpsAlterNote       $00
000888FF 01                         	dc.b	$01
00088900 E104                       	smpsAlterNote       $04
00088902 01                         	dc.b	$01
00088903 E100                       	smpsAlterNote       $00
00088905 01                         	dc.b	$01
00088906 E1FD                       	smpsAlterNote       $FD
00088908 01                         	dc.b	$01
00088909 E1F9                       	smpsAlterNote       $F9
0008890B 01                         	dc.b	$01
0008890C E1FD                       	smpsAlterNote       $FD
0008890E 01                         	dc.b	$01
0008890F E103                       	smpsAlterNote       $03
00088911 01                         	dc.b	$01
00088912 E104                       	smpsAlterNote       $04
00088914 01                         	dc.b	$01
00088915 E1FD                       	smpsAlterNote       $FD
00088917 ECF5                       	smpsPSGAlterVol     $F5
00088919 9102                       	dc.b	nE1, $02
0008891B EC04                       	smpsPSGAlterVol     $04
0008891D E701                       	dc.b	smpsNoAttack, $01
0008891F ECFC                       	smpsPSGAlterVol     $FC
00088921 920D                       	dc.b	nF1, $0D
00088923 E100                       	smpsAlterNote       $00
00088925 E701                       	dc.b	smpsNoAttack, $01
00088927 E104                       	smpsAlterNote       $04
00088929 E701                       	dc.b	smpsNoAttack, $01
0008892B E100                       	smpsAlterNote       $00
0008892D E701                       	dc.b	smpsNoAttack, $01
0008892F E1FD                       	smpsAlterNote       $FD
00088931 E701                       	dc.b	smpsNoAttack, $01
00088933 E1F9                       	smpsAlterNote       $F9
00088935 E701                       	dc.b	smpsNoAttack, $01
00088937 E1FD                       	smpsAlterNote       $FD
00088939 E701                       	dc.b	smpsNoAttack, $01
0008893B E103                       	smpsAlterNote       $03
0008893D E701                       	dc.b	smpsNoAttack, $01
0008893F E104                       	smpsAlterNote       $04
00088941 E701                       	dc.b	smpsNoAttack, $01
00088943 E100                       	smpsAlterNote       $00
00088945 E701                       	dc.b	smpsNoAttack, $01
00088947 E1FA                       	smpsAlterNote       $FA
00088949 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008894D E1FD                       	smpsAlterNote       $FD
0008894F E701                       	dc.b	smpsNoAttack, $01
00088951 E103                       	smpsAlterNote       $03
00088953 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088957 E1FD                       	smpsAlterNote       $FD
00088959 E701                       	dc.b	smpsNoAttack, $01
0008895B E1F9                       	smpsAlterNote       $F9
0008895D E701                       	dc.b	smpsNoAttack, $01
0008895F E1FA                       	smpsAlterNote       $FA
00088961 E701                       	dc.b	smpsNoAttack, $01
00088963 E100                       	smpsAlterNote       $00
00088965 EC04                       	smpsPSGAlterVol     $04
00088967 E701                       	dc.b	smpsNoAttack, $01
00088969 EC07                       	smpsPSGAlterVol     $07
0008896B E104                       	smpsAlterNote       $04
0008896D 8001                       	dc.b	nRst, $01
0008896F E100                       	smpsAlterNote       $00
00088971 01                         	dc.b	$01
00088972 E1FD                       	smpsAlterNote       $FD
00088974 01                         	dc.b	$01
00088975 E1F9                       	smpsAlterNote       $F9
00088977 01                         	dc.b	$01
00088978 E1FD                       	smpsAlterNote       $FD
0008897A 01                         	dc.b	$01
0008897B E103                       	smpsAlterNote       $03
0008897D 01                         	dc.b	$01
0008897E E104                       	smpsAlterNote       $04
00088980 01                         	dc.b	$01
00088981 E1FD                       	smpsAlterNote       $FD
00088983 ECF5                       	smpsPSGAlterVol     $F5
00088985 9106                       	dc.b	nE1, $06
00088987 EC04                       	smpsPSGAlterVol     $04
00088989 E701                       	dc.b	smpsNoAttack, $01
0008898B EC07                       	smpsPSGAlterVol     $07
0008898D 8003                       	dc.b	nRst, $03
0008898F ECF5                       	smpsPSGAlterVol     $F5
00088991 9106                       	dc.b	nE1, $06
00088993 EC04                       	smpsPSGAlterVol     $04
00088995 E701                       	dc.b	smpsNoAttack, $01
00088997 EC07                       	smpsPSGAlterVol     $07
00088999 8006                       	dc.b	nRst, $06
0008899B E100                       	smpsAlterNote       $00
0008899D 01                         	dc.b	$01
0008899E E104                       	smpsAlterNote       $04
000889A0 01                         	dc.b	$01
000889A1 E100                       	smpsAlterNote       $00
000889A3 01                         	dc.b	$01
000889A4 E1FA                       	smpsAlterNote       $FA
000889A6 01                         	dc.b	$01
000889A7 E1FD                       	smpsAlterNote       $FD
000889A9 ECF5                       	smpsPSGAlterVol     $F5
000889AB 9206                       	dc.b	nF1, $06
000889AD EC04                       	smpsPSGAlterVol     $04
000889AF E701                       	dc.b	smpsNoAttack, $01
000889B1 EC07                       	smpsPSGAlterVol     $07
000889B3 8003                       	dc.b	nRst, $03
000889B5 ECF5                       	smpsPSGAlterVol     $F5
000889B7 9207                       	dc.b	nF1, $07
000889B9 EC0B                       	smpsPSGAlterVol     $0B
000889BB 8006                       	dc.b	nRst, $06
000889BD E100                       	smpsAlterNote       $00
000889BF 01                         	dc.b	$01
000889C0 E103                       	smpsAlterNote       $03
000889C2 0101                       	dc.b	$01, $01
000889C4 E1FD                       	smpsAlterNote       $FD
000889C6 01                         	dc.b	$01
000889C7 ECF5                       	smpsPSGAlterVol     $F5
000889C9 9107                       	dc.b	nE1, $07
000889CB EC0B                       	smpsPSGAlterVol     $0B
000889CD 8004                       	dc.b	nRst, $04
000889CF ECF5                       	smpsPSGAlterVol     $F5
000889D1 9106                       	dc.b	nE1, $06
000889D3 EC04                       	smpsPSGAlterVol     $04
000889D5 E701                       	dc.b	smpsNoAttack, $01
000889D7 EC07                       	smpsPSGAlterVol     $07
000889D9 8006                       	dc.b	nRst, $06
000889DB E103                       	smpsAlterNote       $03
000889DD 01                         	dc.b	$01
000889DE E104                       	smpsAlterNote       $04
000889E0 01                         	dc.b	$01
000889E1 E100                       	smpsAlterNote       $00
000889E3 01                         	dc.b	$01
000889E4 E1FA                       	smpsAlterNote       $FA
000889E6 01                         	dc.b	$01
000889E7 E1FD                       	smpsAlterNote       $FD
000889E9 ECF5                       	smpsPSGAlterVol     $F5
000889EB 9106                       	dc.b	nE1, $06
000889ED EC04                       	smpsPSGAlterVol     $04
000889EF E701                       	dc.b	smpsNoAttack, $01
000889F1 EC07                       	smpsPSGAlterVol     $07
000889F3 8003                       	dc.b	nRst, $03
000889F5 ECF5                       	smpsPSGAlterVol     $F5
000889F7 9106                       	dc.b	nE1, $06
000889F9 EC04                       	smpsPSGAlterVol     $04
000889FB E701                       	dc.b	smpsNoAttack, $01
000889FD EC07                       	smpsPSGAlterVol     $07
000889FF 8003                       	dc.b	nRst, $03
00088A01 ECF5                       	smpsPSGAlterVol     $F5
00088A03 9207                       	dc.b	nF1, $07
00088A05 EC0B                       	smpsPSGAlterVol     $0B
00088A07 8006                       	dc.b	nRst, $06
00088A09 E100                       	smpsAlterNote       $00
00088A0B 01                         	dc.b	$01
00088A0C E103                       	smpsAlterNote       $03
00088A0E 0101                       	dc.b	$01, $01
00088A10 E1FD                       	smpsAlterNote       $FD
00088A12 01                         	dc.b	$01
00088A13 E1F9                       	smpsAlterNote       $F9
00088A15 01                         	dc.b	$01
00088A16 E1FA                       	smpsAlterNote       $FA
00088A18 01                         	dc.b	$01
00088A19 E100                       	smpsAlterNote       $00
00088A1B 01                         	dc.b	$01
00088A1C E104                       	smpsAlterNote       $04
00088A1E 01                         	dc.b	$01
00088A1F E1FD                       	smpsAlterNote       $FD
00088A21 ECF5                       	smpsPSGAlterVol     $F5
00088A23 9203 9203                  	dc.b	nF1, $03, nF1, $03
00088A27 EC04                       	smpsPSGAlterVol     $04
00088A29 E701                       	dc.b	smpsNoAttack, $01
00088A2B EC07                       	smpsPSGAlterVol     $07
00088A2D 8009                       	dc.b	nRst, $09
00088A2F E100                       	smpsAlterNote       $00
00088A31 01                         	dc.b	$01
00088A32 E103                       	smpsAlterNote       $03
00088A34 0101                       	dc.b	$01, $01
00088A36 E1FD                       	smpsAlterNote       $FD
00088A38 01                         	dc.b	$01
00088A39 E1F9                       	smpsAlterNote       $F9
00088A3B 01                         	dc.b	$01
00088A3C E1FA                       	smpsAlterNote       $FA
00088A3E 01                         	dc.b	$01
00088A3F E100                       	smpsAlterNote       $00
00088A41 01                         	dc.b	$01
00088A42 E104                       	smpsAlterNote       $04
00088A44 01                         	dc.b	$01
00088A45 E100                       	smpsAlterNote       $00
00088A47 01                         	dc.b	$01
00088A48 E1FD                       	smpsAlterNote       $FD
00088A4A 01                         	dc.b	$01
00088A4B E1F9                       	smpsAlterNote       $F9
00088A4D 01                         	dc.b	$01
00088A4E E1FD                       	smpsAlterNote       $FD
00088A50 01                         	dc.b	$01
00088A51 E103                       	smpsAlterNote       $03
00088A53 01                         	dc.b	$01
00088A54 E104                       	smpsAlterNote       $04
00088A56 01                         	dc.b	$01
00088A57 E100                       	smpsAlterNote       $00
00088A59 01                         	dc.b	$01
00088A5A E1FD                       	smpsAlterNote       $FD
00088A5C ECF5                       	smpsPSGAlterVol     $F5
00088A5E 9203 9106                  	dc.b	nF1, $03, nE1, $06
00088A62 EC04                       	smpsPSGAlterVol     $04
00088A64 E701                       	dc.b	smpsNoAttack, $01
00088A66 EC07                       	smpsPSGAlterVol     $07
00088A68 8006                       	dc.b	nRst, $06
00088A6A E100                       	smpsAlterNote       $00
00088A6C 01                         	dc.b	$01
00088A6D E104                       	smpsAlterNote       $04
00088A6F 01                         	dc.b	$01
00088A70 E103                       	smpsAlterNote       $03
00088A72 01                         	dc.b	$01
00088A73 E1FD                       	smpsAlterNote       $FD
00088A75 01                         	dc.b	$01
00088A76 E1F9                       	smpsAlterNote       $F9
00088A78 01                         	dc.b	$01
00088A79 E1FD                       	smpsAlterNote       $FD
00088A7B 01                         	dc.b	$01
00088A7C E100                       	smpsAlterNote       $00
00088A7E 01                         	dc.b	$01
00088A7F E104                       	smpsAlterNote       $04
00088A81 01                         	dc.b	$01
00088A82 E1FD                       	smpsAlterNote       $FD
00088A84 ECF5                       	smpsPSGAlterVol     $F5
00088A86 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00088A8A E100                       	smpsAlterNote       $00
00088A8C E701                       	dc.b	smpsNoAttack, $01
00088A8E E104                       	smpsAlterNote       $04
00088A90 E701                       	dc.b	smpsNoAttack, $01
00088A92 E100                       	smpsAlterNote       $00
00088A94 E701                       	dc.b	smpsNoAttack, $01
00088A96 E1FD                       	smpsAlterNote       $FD
00088A98 E701                       	dc.b	smpsNoAttack, $01
00088A9A E1F9                       	smpsAlterNote       $F9
00088A9C E701                       	dc.b	smpsNoAttack, $01
00088A9E E1FD                       	smpsAlterNote       $FD
00088AA0 E701                       	dc.b	smpsNoAttack, $01
00088AA2 E103                       	smpsAlterNote       $03
00088AA4 E701                       	dc.b	smpsNoAttack, $01
00088AA6 E104                       	smpsAlterNote       $04
00088AA8 E701                       	dc.b	smpsNoAttack, $01
00088AAA E100                       	smpsAlterNote       $00
00088AAC E701                       	dc.b	smpsNoAttack, $01
00088AAE E1FA                       	smpsAlterNote       $FA
00088AB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AB4 E1FD                       	smpsAlterNote       $FD
00088AB6 E701                       	dc.b	smpsNoAttack, $01
00088AB8 E103                       	smpsAlterNote       $03
00088ABA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088ABE E100                       	smpsAlterNote       $00
00088AC0 E701                       	dc.b	smpsNoAttack, $01
00088AC2 E1FA                       	smpsAlterNote       $FA
00088AC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AC8 E100                       	smpsAlterNote       $00
00088ACA EC04                       	smpsPSGAlterVol     $04
00088ACC E701                       	dc.b	smpsNoAttack, $01
00088ACE EC07                       	smpsPSGAlterVol     $07
00088AD0 E104                       	smpsAlterNote       $04
00088AD2 8001                       	dc.b	nRst, $01
00088AD4 E103                       	smpsAlterNote       $03
00088AD6 01                         	dc.b	$01
00088AD7 E1FD                       	smpsAlterNote       $FD
00088AD9 01                         	dc.b	$01
00088ADA E1F9                       	smpsAlterNote       $F9
00088ADC 01                         	dc.b	$01
00088ADD E1FD                       	smpsAlterNote       $FD
00088ADF 01                         	dc.b	$01
00088AE0 E100                       	smpsAlterNote       $00
00088AE2 01                         	dc.b	$01
00088AE3 E104                       	smpsAlterNote       $04
00088AE5 01                         	dc.b	$01
00088AE6 E1FD                       	smpsAlterNote       $FD
00088AE8 ECF5                       	smpsPSGAlterVol     $F5
00088AEA 9106                       	dc.b	nE1, $06
00088AEC EC04                       	smpsPSGAlterVol     $04
00088AEE E701                       	dc.b	smpsNoAttack, $01
00088AF0 EC07                       	smpsPSGAlterVol     $07
00088AF2 8003                       	dc.b	nRst, $03
00088AF4 ECF5                       	smpsPSGAlterVol     $F5
00088AF6 9106                       	dc.b	nE1, $06
00088AF8 EC04                       	smpsPSGAlterVol     $04
00088AFA E701                       	dc.b	smpsNoAttack, $01
00088AFC EC07                       	smpsPSGAlterVol     $07
00088AFE 8006                       	dc.b	nRst, $06
00088B00 E100                       	smpsAlterNote       $00
00088B02 01                         	dc.b	$01
00088B03 E104                       	smpsAlterNote       $04
00088B05 01                         	dc.b	$01
00088B06 E100                       	smpsAlterNote       $00
00088B08 01                         	dc.b	$01
00088B09 E1FD                       	smpsAlterNote       $FD
00088B0B 01                         	dc.b	$01
00088B0C ECF5                       	smpsPSGAlterVol     $F5
00088B0E 9206                       	dc.b	nF1, $06
00088B10 EC04                       	smpsPSGAlterVol     $04
00088B12 E701                       	dc.b	smpsNoAttack, $01
00088B14 EC07                       	smpsPSGAlterVol     $07
00088B16 8003                       	dc.b	nRst, $03
00088B18 ECF5                       	smpsPSGAlterVol     $F5
00088B1A 9207                       	dc.b	nF1, $07
00088B1C EC0B                       	smpsPSGAlterVol     $0B
00088B1E 8007                       	dc.b	nRst, $07
00088B20 E103                       	smpsAlterNote       $03
00088B22 0101                       	dc.b	$01, $01
00088B24 E1FD                       	smpsAlterNote       $FD
00088B26 01                         	dc.b	$01
00088B27 E1FA                       	smpsAlterNote       $FA
00088B29 01                         	dc.b	$01
00088B2A E1FD                       	smpsAlterNote       $FD
00088B2C ECF5                       	smpsPSGAlterVol     $F5
00088B2E 9106                       	dc.b	nE1, $06
00088B30 EC0B                       	smpsPSGAlterVol     $0B
00088B32 8004                       	dc.b	nRst, $04
00088B34 ECF5                       	smpsPSGAlterVol     $F5
00088B36 9106                       	dc.b	nE1, $06
00088B38 EC04                       	smpsPSGAlterVol     $04
00088B3A E701                       	dc.b	smpsNoAttack, $01
00088B3C EC07                       	smpsPSGAlterVol     $07
00088B3E 8006                       	dc.b	nRst, $06
00088B40 E100                       	smpsAlterNote       $00
00088B42 01                         	dc.b	$01
00088B43 E104                       	smpsAlterNote       $04
00088B45 01                         	dc.b	$01
00088B46 E100                       	smpsAlterNote       $00
00088B48 01                         	dc.b	$01
00088B49 E1FA                       	smpsAlterNote       $FA
00088B4B 01                         	dc.b	$01
00088B4C E1FD                       	smpsAlterNote       $FD
00088B4E ECF5                       	smpsPSGAlterVol     $F5
00088B50 9206                       	dc.b	nF1, $06
00088B52 EC04                       	smpsPSGAlterVol     $04
00088B54 E701                       	dc.b	smpsNoAttack, $01
00088B56 EC07                       	smpsPSGAlterVol     $07
00088B58 8003                       	dc.b	nRst, $03
00088B5A ECF5                       	smpsPSGAlterVol     $F5
00088B5C 9206                       	dc.b	nF1, $06
00088B5E EC04                       	smpsPSGAlterVol     $04
00088B60 E701                       	dc.b	smpsNoAttack, $01
00088B62 EC07                       	smpsPSGAlterVol     $07
00088B64 8006                       	dc.b	nRst, $06
00088B66 E100                       	smpsAlterNote       $00
00088B68 01                         	dc.b	$01
00088B69 E104                       	smpsAlterNote       $04
00088B6B 01                         	dc.b	$01
00088B6C E103                       	smpsAlterNote       $03
00088B6E 01                         	dc.b	$01
00088B6F E1FD                       	smpsAlterNote       $FD
00088B71 01                         	dc.b	$01
00088B72 ECF5                       	smpsPSGAlterVol     $F5
00088B74 9107                       	dc.b	nE1, $07
00088B76 EC0B                       	smpsPSGAlterVol     $0B
00088B78 8004                       	dc.b	nRst, $04
00088B7A ECF5                       	smpsPSGAlterVol     $F5
00088B7C 9106                       	dc.b	nE1, $06
00088B7E EC0B                       	smpsPSGAlterVol     $0B
00088B80 8007                       	dc.b	nRst, $07
00088B82 E103                       	smpsAlterNote       $03
00088B84 0101                       	dc.b	$01, $01
00088B86 E100                       	smpsAlterNote       $00
00088B88 01                         	dc.b	$01
00088B89 E1FA                       	smpsAlterNote       $FA
00088B8B 01                         	dc.b	$01
00088B8C E1FD                       	smpsAlterNote       $FD
00088B8E ECF5                       	smpsPSGAlterVol     $F5
00088B90 9206                       	dc.b	nF1, $06
00088B92 EC04                       	smpsPSGAlterVol     $04
00088B94 E701                       	dc.b	smpsNoAttack, $01
00088B96 EC07                       	smpsPSGAlterVol     $07
00088B98 8003                       	dc.b	nRst, $03
00088B9A ECF5                       	smpsPSGAlterVol     $F5
00088B9C 9206                       	dc.b	nF1, $06
00088B9E EC04                       	smpsPSGAlterVol     $04
00088BA0 E701                       	dc.b	smpsNoAttack, $01
00088BA2 EC07                       	smpsPSGAlterVol     $07
00088BA4 8006                       	dc.b	nRst, $06
00088BA6 E100                       	smpsAlterNote       $00
00088BA8 01                         	dc.b	$01
00088BA9 E104                       	smpsAlterNote       $04
00088BAB 01                         	dc.b	$01
00088BAC E100                       	smpsAlterNote       $00
00088BAE 01                         	dc.b	$01
00088BAF E1FD                       	smpsAlterNote       $FD
00088BB1 01                         	dc.b	$01
00088BB2 ECF5                       	smpsPSGAlterVol     $F5
00088BB4 9106                       	dc.b	nE1, $06
00088BB6 EC04                       	smpsPSGAlterVol     $04
00088BB8 E701                       	dc.b	smpsNoAttack, $01
00088BBA EC07                       	smpsPSGAlterVol     $07
00088BBC 8003                       	dc.b	nRst, $03
00088BBE ECF5                       	smpsPSGAlterVol     $F5
00088BC0 9107 9106                  	dc.b	nE1, $07, nE1, $06
00088BC4 EC04                       	smpsPSGAlterVol     $04
00088BC6 E701                       	dc.b	smpsNoAttack, $01
00088BC8 ECFC                       	smpsPSGAlterVol     $FC
00088BCA 9103                       	dc.b	nE1, $03
00088BCC EC04                       	smpsPSGAlterVol     $04
00088BCE E701                       	dc.b	smpsNoAttack, $01
00088BD0 ECFC                       	smpsPSGAlterVol     $FC
00088BD2 9102                       	dc.b	nE1, $02
00088BD4 EC04                       	smpsPSGAlterVol     $04
00088BD6 E701                       	dc.b	smpsNoAttack, $01
00088BD8 ECFC                       	smpsPSGAlterVol     $FC
00088BDA 9103                       	dc.b	nE1, $03
00088BDC EC0B                       	smpsPSGAlterVol     $0B
00088BDE 800A                       	dc.b	nRst, $0A
00088BE0 E100                       	smpsAlterNote       $00
00088BE2 01                         	dc.b	$01
00088BE3 E104                       	smpsAlterNote       $04
00088BE5 01                         	dc.b	$01
00088BE6 E100                       	smpsAlterNote       $00
00088BE8 01                         	dc.b	$01
00088BE9 E1FA                       	smpsAlterNote       $FA
00088BEB 01                         	dc.b	$01
00088BEC E1F9                       	smpsAlterNote       $F9
00088BEE 01                         	dc.b	$01
00088BEF E1FD                       	smpsAlterNote       $FD
00088BF1 01                         	dc.b	$01
00088BF2 E103                       	smpsAlterNote       $03
00088BF4 0101                       	dc.b	$01, $01
00088BF6 E100                       	smpsAlterNote       $00
00088BF8 01                         	dc.b	$01
00088BF9 E1FA                       	smpsAlterNote       $FA
00088BFB 0101                       	dc.b	$01, $01
00088BFD E1FD                       	smpsAlterNote       $FD
00088BFF ECF5                       	smpsPSGAlterVol     $F5
00088C01 9206                       	dc.b	nF1, $06
00088C03 EC04                       	smpsPSGAlterVol     $04
00088C05 E704                       	dc.b	smpsNoAttack, $04
00088C07 ECFC                       	smpsPSGAlterVol     $FC
00088C09 9206                       	dc.b	nF1, $06
00088C0B EC04                       	smpsPSGAlterVol     $04
00088C0D E701                       	dc.b	smpsNoAttack, $01
00088C0F EC07                       	smpsPSGAlterVol     $07
00088C11 8006                       	dc.b	nRst, $06
00088C13 E100                       	smpsAlterNote       $00
00088C15 01                         	dc.b	$01
00088C16 E104                       	smpsAlterNote       $04
00088C18 01                         	dc.b	$01
00088C19 E103                       	smpsAlterNote       $03
00088C1B 01                         	dc.b	$01
00088C1C E1FD                       	smpsAlterNote       $FD
00088C1E 01                         	dc.b	$01
00088C1F ECF5                       	smpsPSGAlterVol     $F5
00088C21 9407                       	dc.b	nG1, $07
00088C23 EC0B                       	smpsPSGAlterVol     $0B
00088C25 8004                       	dc.b	nRst, $04
00088C27 ECF5                       	smpsPSGAlterVol     $F5
00088C29 9406                       	dc.b	nG1, $06
00088C2B EC0B                       	smpsPSGAlterVol     $0B
00088C2D 8007                       	dc.b	nRst, $07
00088C2F E103                       	smpsAlterNote       $03
00088C31 0101                       	dc.b	$01, $01
00088C33 E1FD                       	smpsAlterNote       $FD
00088C35 01                         	dc.b	$01
00088C36 E1F9                       	smpsAlterNote       $F9
00088C38 01                         	dc.b	$01
00088C39 E1FD                       	smpsAlterNote       $FD
00088C3B ECF5                       	smpsPSGAlterVol     $F5
00088C3D 9206                       	dc.b	nF1, $06
00088C3F EC04                       	smpsPSGAlterVol     $04
00088C41 E701                       	dc.b	smpsNoAttack, $01
00088C43 EC07                       	smpsPSGAlterVol     $07
00088C45 8003                       	dc.b	nRst, $03
00088C47 ECF5                       	smpsPSGAlterVol     $F5
00088C49 9206                       	dc.b	nF1, $06
00088C4B EC04                       	smpsPSGAlterVol     $04
00088C4D E701                       	dc.b	smpsNoAttack, $01
00088C4F EC07                       	smpsPSGAlterVol     $07
00088C51 8006                       	dc.b	nRst, $06
00088C53 E100                       	smpsAlterNote       $00
00088C55 01                         	dc.b	$01
00088C56 E104                       	smpsAlterNote       $04
00088C58 01                         	dc.b	$01
00088C59 E100                       	smpsAlterNote       $00
00088C5B 01                         	dc.b	$01
00088C5C E1FA                       	smpsAlterNote       $FA
00088C5E 01                         	dc.b	$01
00088C5F E1FD                       	smpsAlterNote       $FD
00088C61 ECF5                       	smpsPSGAlterVol     $F5
00088C63 9206                       	dc.b	nF1, $06
00088C65 EC04                       	smpsPSGAlterVol     $04
00088C67 E701                       	dc.b	smpsNoAttack, $01
00088C69 EC07                       	smpsPSGAlterVol     $07
00088C6B 8003                       	dc.b	nRst, $03
00088C6D ECF5                       	smpsPSGAlterVol     $F5
00088C6F 9107                       	dc.b	nE1, $07
00088C71 EC0B                       	smpsPSGAlterVol     $0B
00088C73 8006                       	dc.b	nRst, $06
00088C75 E100                       	smpsAlterNote       $00
00088C77 01                         	dc.b	$01
00088C78 E103                       	smpsAlterNote       $03
00088C7A 0101                       	dc.b	$01, $01
00088C7C E1FD                       	smpsAlterNote       $FD
00088C7E 01                         	dc.b	$01
00088C7F ECF5                       	smpsPSGAlterVol     $F5
00088C81 9207                       	dc.b	nF1, $07
00088C83 EC0B                       	smpsPSGAlterVol     $0B
00088C85 8004                       	dc.b	nRst, $04
00088C87 ECF5                       	smpsPSGAlterVol     $F5
00088C89 9206                       	dc.b	nF1, $06
00088C8B EC04                       	smpsPSGAlterVol     $04
00088C8D E701                       	dc.b	smpsNoAttack, $01
00088C8F EC07                       	smpsPSGAlterVol     $07
00088C91 8006                       	dc.b	nRst, $06
00088C93 E103                       	smpsAlterNote       $03
00088C95 01                         	dc.b	$01
00088C96 E104                       	smpsAlterNote       $04
00088C98 01                         	dc.b	$01
00088C99 E100                       	smpsAlterNote       $00
00088C9B 01                         	dc.b	$01
00088C9C E1FB                       	smpsAlterNote       $FB
00088C9E 01                         	dc.b	$01
00088C9F E1FD                       	smpsAlterNote       $FD
00088CA1 ECF5                       	smpsPSGAlterVol     $F5
00088CA3 9406                       	dc.b	nG1, $06
00088CA5 EC04                       	smpsPSGAlterVol     $04
00088CA7 E701                       	dc.b	smpsNoAttack, $01
00088CA9 EC07                       	smpsPSGAlterVol     $07
00088CAB 8003                       	dc.b	nRst, $03
00088CAD ECF5                       	smpsPSGAlterVol     $F5
00088CAF 9406                       	dc.b	nG1, $06
00088CB1 EC04                       	smpsPSGAlterVol     $04
00088CB3 E701                       	dc.b	smpsNoAttack, $01
00088CB5 EC07                       	smpsPSGAlterVol     $07
00088CB7 8006                       	dc.b	nRst, $06
00088CB9 E100                       	smpsAlterNote       $00
00088CBB 01                         	dc.b	$01
00088CBC E104                       	smpsAlterNote       $04
00088CBE 01                         	dc.b	$01
00088CBF E100                       	smpsAlterNote       $00
00088CC1 01                         	dc.b	$01
00088CC2 E1FD                       	smpsAlterNote       $FD
00088CC4 01                         	dc.b	$01
00088CC5 ECF5                       	smpsPSGAlterVol     $F5
00088CC7 9206                       	dc.b	nF1, $06
00088CC9 EC04                       	smpsPSGAlterVol     $04
00088CCB E701                       	dc.b	smpsNoAttack, $01
00088CCD EC07                       	smpsPSGAlterVol     $07
00088CCF 8003                       	dc.b	nRst, $03
00088CD1 ECF5                       	smpsPSGAlterVol     $F5
00088CD3 9207                       	dc.b	nF1, $07
00088CD5 EC0B                       	smpsPSGAlterVol     $0B
00088CD7 8007                       	dc.b	nRst, $07
00088CD9 E103                       	smpsAlterNote       $03
00088CDB 0101                       	dc.b	$01, $01
00088CDD E1FD                       	smpsAlterNote       $FD
00088CDF 01                         	dc.b	$01
00088CE0 E1FA                       	smpsAlterNote       $FA
00088CE2 01                         	dc.b	$01
00088CE3 E1FD                       	smpsAlterNote       $FD
00088CE5 ECF5                       	smpsPSGAlterVol     $F5
00088CE7 9206                       	dc.b	nF1, $06
00088CE9 EC0B                       	smpsPSGAlterVol     $0B
00088CEB 8004                       	dc.b	nRst, $04
00088CED ECF5                       	smpsPSGAlterVol     $F5
00088CEF 9206                       	dc.b	nF1, $06
00088CF1 EC04                       	smpsPSGAlterVol     $04
00088CF3 E701                       	dc.b	smpsNoAttack, $01
00088CF5 EC07                       	smpsPSGAlterVol     $07
00088CF7 8006                       	dc.b	nRst, $06
00088CF9 E100                       	smpsAlterNote       $00
00088CFB 01                         	dc.b	$01
00088CFC E104                       	smpsAlterNote       $04
00088CFE 01                         	dc.b	$01
00088CFF E100                       	smpsAlterNote       $00
00088D01 01                         	dc.b	$01
00088D02 E1FA                       	smpsAlterNote       $FA
00088D04 01                         	dc.b	$01
00088D05 E1FD                       	smpsAlterNote       $FD
00088D07 ECF5                       	smpsPSGAlterVol     $F5
00088D09 9206                       	dc.b	nF1, $06
00088D0B EC04                       	smpsPSGAlterVol     $04
00088D0D E701                       	dc.b	smpsNoAttack, $01
00088D0F EC07                       	smpsPSGAlterVol     $07
00088D11 8003                       	dc.b	nRst, $03
00088D13 ECF5                       	smpsPSGAlterVol     $F5
00088D15 9207                       	dc.b	nF1, $07
00088D17 EC0B                       	smpsPSGAlterVol     $0B
00088D19 8006                       	dc.b	nRst, $06
00088D1B E100                       	smpsAlterNote       $00
00088D1D 01                         	dc.b	$01
00088D1E E103                       	smpsAlterNote       $03
00088D20 0101                       	dc.b	$01, $01
00088D22 E1FD                       	smpsAlterNote       $FD
00088D24 01                         	dc.b	$01
00088D25 ECF5                       	smpsPSGAlterVol     $F5
00088D27 9207                       	dc.b	nF1, $07
00088D29 EC0B                       	smpsPSGAlterVol     $0B
00088D2B 8004                       	dc.b	nRst, $04
00088D2D ECF5                       	smpsPSGAlterVol     $F5
00088D2F 9206                       	dc.b	nF1, $06
00088D31 EC0B                       	smpsPSGAlterVol     $0B
00088D33 8007                       	dc.b	nRst, $07
00088D35 E103                       	smpsAlterNote       $03
00088D37 0101                       	dc.b	$01, $01
00088D39 E100                       	smpsAlterNote       $00
00088D3B 01                         	dc.b	$01
00088D3C E1FA                       	smpsAlterNote       $FA
00088D3E 01                         	dc.b	$01
00088D3F E1FD                       	smpsAlterNote       $FD
00088D41 ECF5                       	smpsPSGAlterVol     $F5
00088D43 9206                       	dc.b	nF1, $06
00088D45 EC04                       	smpsPSGAlterVol     $04
00088D47 E701                       	dc.b	smpsNoAttack, $01
00088D49 EC07                       	smpsPSGAlterVol     $07
00088D4B 8003                       	dc.b	nRst, $03
00088D4D ECF5                       	smpsPSGAlterVol     $F5
00088D4F 9206                       	dc.b	nF1, $06
00088D51 EC04                       	smpsPSGAlterVol     $04
00088D53 E701                       	dc.b	smpsNoAttack, $01
00088D55 EC07                       	smpsPSGAlterVol     $07
00088D57 8006                       	dc.b	nRst, $06
00088D59 E100                       	smpsAlterNote       $00
00088D5B 01                         	dc.b	$01
00088D5C E104                       	smpsAlterNote       $04
00088D5E 01                         	dc.b	$01
00088D5F E100                       	smpsAlterNote       $00
00088D61 01                         	dc.b	$01
00088D62 E1FD                       	smpsAlterNote       $FD
00088D64 01                         	dc.b	$01
00088D65 ECF5                       	smpsPSGAlterVol     $F5
00088D67 9206                       	dc.b	nF1, $06
00088D69 EC04                       	smpsPSGAlterVol     $04
00088D6B E701                       	dc.b	smpsNoAttack, $01
00088D6D EC07                       	smpsPSGAlterVol     $07
00088D6F 8003                       	dc.b	nRst, $03
00088D71 ECF5                       	smpsPSGAlterVol     $F5
00088D73 9207                       	dc.b	nF1, $07
00088D75 EC0B                       	smpsPSGAlterVol     $0B
00088D77 8007                       	dc.b	nRst, $07
00088D79 E104                       	smpsAlterNote       $04
00088D7B 0101                       	dc.b	$01, $01
00088D7D E1FB                       	smpsAlterNote       $FB
00088D7F 01                         	dc.b	$01
00088D80 E1F6                       	smpsAlterNote       $F6
00088D82 0101                       	dc.b	$01, $01
00088D84 E1FF                       	smpsAlterNote       $FF
00088D86 01                         	dc.b	$01
00088D87 E105                       	smpsAlterNote       $05
00088D89 01                         	dc.b	$01
00088D8A E104                       	smpsAlterNote       $04
00088D8C 01                         	dc.b	$01
00088D8D E1FB                       	smpsAlterNote       $FB
00088D8F 01                         	dc.b	$01
00088D90 E1F5                       	smpsAlterNote       $F5
00088D92 01                         	dc.b	$01
00088D93 E1FC                       	smpsAlterNote       $FC
00088D95 ECF5                       	smpsPSGAlterVol     $F5
00088D97 8B0E                       	dc.b	nBb0, $0E
00088D99 E102                       	smpsAlterNote       $02
00088D9B EC0B                       	smpsPSGAlterVol     $0B
00088D9D 8001                       	dc.b	nRst, $01
00088D9F E101                       	smpsAlterNote       $01
00088DA1 01                         	dc.b	$01
00088DA2 E1FC                       	smpsAlterNote       $FC
00088DA4 01                         	dc.b	$01
00088DA5 E1F9                       	smpsAlterNote       $F9
00088DA7 0101                       	dc.b	$01, $01
00088DA9 E1FF                       	smpsAlterNote       $FF
00088DAB 01                         	dc.b	$01
00088DAC E102                       	smpsAlterNote       $02
00088DAE 01                         	dc.b	$01
00088DAF E1FF                       	smpsAlterNote       $FF
00088DB1 01                         	dc.b	$01
00088DB2 E1FC                       	smpsAlterNote       $FC
00088DB4 01                         	dc.b	$01
00088DB5 E1F8                       	smpsAlterNote       $F8
00088DB7 01                         	dc.b	$01
00088DB8 E1FC                       	smpsAlterNote       $FC
00088DBA 01                         	dc.b	$01
00088DBB E101                       	smpsAlterNote       $01
00088DBD 01                         	dc.b	$01
00088DBE E102                       	smpsAlterNote       $02
00088DC0 01                         	dc.b	$01
00088DC1 E1FF                       	smpsAlterNote       $FF
00088DC3 01                         	dc.b	$01
00088DC4 E1FB                       	smpsAlterNote       $FB
00088DC6 ECF5                       	smpsPSGAlterVol     $F5
00088DC8 8D0D                       	dc.b	nC1, $0D
00088DCA E101                       	smpsAlterNote       $01
00088DCC EC0B                       	smpsPSGAlterVol     $0B
00088DCE 8001                       	dc.b	nRst, $01
00088DD0 E102                       	smpsAlterNote       $02
00088DD2 01                         	dc.b	$01
00088DD3 E1FF                       	smpsAlterNote       $FF
00088DD5 01                         	dc.b	$01
00088DD6 E1F9                       	smpsAlterNote       $F9
00088DD8 0101                       	dc.b	$01, $01
00088DDA E1FC                       	smpsAlterNote       $FC
00088DDC 01                         	dc.b	$01
00088DDD E101                       	smpsAlterNote       $01
00088DDF 0101                       	dc.b	$01, $01
00088DE1 E1FC                       	smpsAlterNote       $FC
00088DE3 01                         	dc.b	$01
00088DE4 E1F9                       	smpsAlterNote       $F9
00088DE6 0101                       	dc.b	$01, $01
00088DE8 E1FF                       	smpsAlterNote       $FF
00088DEA 01                         	dc.b	$01
00088DEB E102                       	smpsAlterNote       $02
00088DED 01                         	dc.b	$01
00088DEE E101                       	smpsAlterNote       $01
00088DF0 01                         	dc.b	$01
00088DF1 E1FC                       	smpsAlterNote       $FC
00088DF3 ECF5                       	smpsPSGAlterVol     $F5
00088DF5 8F0D                       	dc.b	nD1, $0D
00088DF7 E1FF                       	smpsAlterNote       $FF
00088DF9 EC04                       	smpsPSGAlterVol     $04
00088DFB E701                       	dc.b	smpsNoAttack, $01
00088DFD EC07                       	smpsPSGAlterVol     $07
00088DFF E103                       	smpsAlterNote       $03
00088E01 8001                       	dc.b	nRst, $01
00088E03 E102                       	smpsAlterNote       $02
00088E05 01                         	dc.b	$01
00088E06 E1FD                       	smpsAlterNote       $FD
00088E08 01                         	dc.b	$01
00088E09 E1F9                       	smpsAlterNote       $F9
00088E0B 01                         	dc.b	$01
00088E0C E1FD                       	smpsAlterNote       $FD
00088E0E 01                         	dc.b	$01
00088E0F E100                       	smpsAlterNote       $00
00088E11 01                         	dc.b	$01
00088E12 E103                       	smpsAlterNote       $03
00088E14 01                         	dc.b	$01
00088E15 E100                       	smpsAlterNote       $00
00088E17 01                         	dc.b	$01
00088E18 E1FA                       	smpsAlterNote       $FA
00088E1A 01                         	dc.b	$01
00088E1B E1F9                       	smpsAlterNote       $F9
00088E1D 01                         	dc.b	$01
00088E1E E1FD                       	smpsAlterNote       $FD
00088E20 01                         	dc.b	$01
00088E21 E102                       	smpsAlterNote       $02
00088E23 0101                       	dc.b	$01, $01
00088E25 E100                       	smpsAlterNote       $00
00088E27 01                         	dc.b	$01
00088E28 E1FD                       	smpsAlterNote       $FD
00088E2A ECF5                       	smpsPSGAlterVol     $F5
00088E2C 910D                       	dc.b	nE1, $0D
00088E2E E103                       	smpsAlterNote       $03
00088E30 EC0B                       	smpsPSGAlterVol     $0B
00088E32 8001 01                    	dc.b	nRst, $01, $01
00088E35 E100                       	smpsAlterNote       $00
00088E37 01                         	dc.b	$01
00088E38 E1FA                       	smpsAlterNote       $FA
00088E3A 0101                       	dc.b	$01, $01
00088E3C E100                       	smpsAlterNote       $00
00088E3E 01                         	dc.b	$01
00088E3F E103                       	smpsAlterNote       $03
00088E41 01                         	dc.b	$01
00088E42 E1FD                       	smpsAlterNote       $FD
00088E44 ECF5                       	smpsPSGAlterVol     $F5
00088E46 9206                       	dc.b	nF1, $06
00088E48 EC04                       	smpsPSGAlterVol     $04
00088E4A E701                       	dc.b	smpsNoAttack, $01
00088E4C EC07                       	smpsPSGAlterVol     $07
00088E4E 8003                       	dc.b	nRst, $03
00088E50 ECF5                       	smpsPSGAlterVol     $F5
00088E52 9207                       	dc.b	nF1, $07
00088E54 EC0B                       	smpsPSGAlterVol     $0B
00088E56 8006                       	dc.b	nRst, $06
00088E58 E100                       	smpsAlterNote       $00
00088E5A 01                         	dc.b	$01
00088E5B E103                       	smpsAlterNote       $03
00088E5D 0101                       	dc.b	$01, $01
00088E5F E1FD                       	smpsAlterNote       $FD
00088E61 01                         	dc.b	$01
00088E62 ECF5                       	smpsPSGAlterVol     $F5
00088E64 9407                       	dc.b	nG1, $07
00088E66 EC0B                       	smpsPSGAlterVol     $0B
00088E68 8004                       	dc.b	nRst, $04
00088E6A ECF5                       	smpsPSGAlterVol     $F5
00088E6C 9406                       	dc.b	nG1, $06
00088E6E EC04                       	smpsPSGAlterVol     $04
00088E70 E701                       	dc.b	smpsNoAttack, $01
00088E72 EC07                       	smpsPSGAlterVol     $07
00088E74 8006                       	dc.b	nRst, $06
00088E76 E103                       	smpsAlterNote       $03
00088E78 01                         	dc.b	$01
00088E79 E104                       	smpsAlterNote       $04
00088E7B 01                         	dc.b	$01
00088E7C E100                       	smpsAlterNote       $00
00088E7E 01                         	dc.b	$01
00088E7F E1F9                       	smpsAlterNote       $F9
00088E81 01                         	dc.b	$01
00088E82 E1FD                       	smpsAlterNote       $FD
00088E84 ECF5                       	smpsPSGAlterVol     $F5
00088E86 9206                       	dc.b	nF1, $06
00088E88 EC04                       	smpsPSGAlterVol     $04
00088E8A E701                       	dc.b	smpsNoAttack, $01
00088E8C EC07                       	smpsPSGAlterVol     $07
00088E8E 8003                       	dc.b	nRst, $03
00088E90 ECF5                       	smpsPSGAlterVol     $F5
00088E92 9206                       	dc.b	nF1, $06
00088E94 EC04                       	smpsPSGAlterVol     $04
00088E96 E701                       	dc.b	smpsNoAttack, $01
00088E98 EC07                       	smpsPSGAlterVol     $07
00088E9A 8006                       	dc.b	nRst, $06
00088E9C E100                       	smpsAlterNote       $00
00088E9E 01                         	dc.b	$01
00088E9F E104                       	smpsAlterNote       $04
00088EA1 01                         	dc.b	$01
00088EA2 E103                       	smpsAlterNote       $03
00088EA4 01                         	dc.b	$01
00088EA5 E1FD                       	smpsAlterNote       $FD
00088EA7 01                         	dc.b	$01
00088EA8 ECF5                       	smpsPSGAlterVol     $F5
00088EAA 9407                       	dc.b	nG1, $07
00088EAC EC0B                       	smpsPSGAlterVol     $0B
00088EAE 8004                       	dc.b	nRst, $04
00088EB0 ECF5                       	smpsPSGAlterVol     $F5
00088EB2 9406                       	dc.b	nG1, $06
00088EB4 EC0B                       	smpsPSGAlterVol     $0B
00088EB6 8007                       	dc.b	nRst, $07
00088EB8 E103                       	smpsAlterNote       $03
00088EBA 0101                       	dc.b	$01, $01
00088EBC E100                       	smpsAlterNote       $00
00088EBE 01                         	dc.b	$01
00088EBF E1F9                       	smpsAlterNote       $F9
00088EC1 01                         	dc.b	$01
00088EC2 E1FD                       	smpsAlterNote       $FD
00088EC4 ECF5                       	smpsPSGAlterVol     $F5
00088EC6 9206                       	dc.b	nF1, $06
00088EC8 EC04                       	smpsPSGAlterVol     $04
00088ECA E701                       	dc.b	smpsNoAttack, $01
00088ECC EC07                       	smpsPSGAlterVol     $07
00088ECE 8003                       	dc.b	nRst, $03
00088ED0 ECF5                       	smpsPSGAlterVol     $F5
00088ED2 9206                       	dc.b	nF1, $06
00088ED4 EC04                       	smpsPSGAlterVol     $04
00088ED6 E701                       	dc.b	smpsNoAttack, $01
00088ED8 EC07                       	smpsPSGAlterVol     $07
00088EDA 8006                       	dc.b	nRst, $06
00088EDC E100                       	smpsAlterNote       $00
00088EDE 01                         	dc.b	$01
00088EDF E104                       	smpsAlterNote       $04
00088EE1 01                         	dc.b	$01
00088EE2 E100                       	smpsAlterNote       $00
00088EE4 01                         	dc.b	$01
00088EE5 E1FB                       	smpsAlterNote       $FB
00088EE7 01                         	dc.b	$01
00088EE8 E1FD                       	smpsAlterNote       $FD
00088EEA ECF5                       	smpsPSGAlterVol     $F5
00088EEC 9406                       	dc.b	nG1, $06
00088EEE EC04                       	smpsPSGAlterVol     $04
00088EF0 E701                       	dc.b	smpsNoAttack, $01
00088EF2 EC07                       	smpsPSGAlterVol     $07
00088EF4 8003                       	dc.b	nRst, $03
00088EF6 ECF5                       	smpsPSGAlterVol     $F5
00088EF8 9407                       	dc.b	nG1, $07
00088EFA EC0B                       	smpsPSGAlterVol     $0B
00088EFC 8006                       	dc.b	nRst, $06
00088EFE E100                       	smpsAlterNote       $00
00088F00 01                         	dc.b	$01
00088F01 E103                       	smpsAlterNote       $03
00088F03 0101                       	dc.b	$01, $01
00088F05 E1FD                       	smpsAlterNote       $FD
00088F07 01                         	dc.b	$01
00088F08 ECF5                       	smpsPSGAlterVol     $F5
00088F0A 9207                       	dc.b	nF1, $07
00088F0C EC0B                       	smpsPSGAlterVol     $0B
00088F0E 8004                       	dc.b	nRst, $04
00088F10 ECF5                       	smpsPSGAlterVol     $F5
00088F12 9206                       	dc.b	nF1, $06
00088F14 EC04                       	smpsPSGAlterVol     $04
00088F16 E701                       	dc.b	smpsNoAttack, $01
00088F18 ECFC                       	smpsPSGAlterVol     $FC
00088F1A E1FC                       	smpsAlterNote       $FC
00088F1C 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00088F20 EC04                       	smpsPSGAlterVol     $04
00088F22 E701                       	dc.b	smpsNoAttack, $01
00088F24 ECFC                       	smpsPSGAlterVol     $FC
00088F26 9003                       	dc.b	nEb1, $03
00088F28 E1FD                       	smpsAlterNote       $FD
00088F2A 9403                       	dc.b	nG1, $03
00088F2C EC04                       	smpsPSGAlterVol     $04
00088F2E E701                       	dc.b	smpsNoAttack, $01
00088F30 E1FE                       	smpsAlterNote       $FE
00088F32 ECFC                       	smpsPSGAlterVol     $FC
00088F34 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00088F38 EC04                       	smpsPSGAlterVol     $04
00088F3A E701                       	dc.b	smpsNoAttack, $01
00088F3C EC07                       	smpsPSGAlterVol     $07
00088F3E 8009                       	dc.b	nRst, $09
00088F40 E100                       	smpsAlterNote       $00
00088F42 01                         	dc.b	$01
00088F43 F6F5 19                    	smpsJump            music84_Jump07
00088F46                            
00088F46                            ; PSG2 Data
00088F46                            music84_PSG2:
00088F46 E1FC                       	smpsAlterNote       $FC
00088F48 EC04                       	smpsPSGAlterVol     $04
00088F4A 8F03                       	dc.b	nD1, $03
00088F4C E1FD                       	smpsAlterNote       $FD
00088F4E 9203                       	dc.b	nF1, $03
00088F50 EC04                       	smpsPSGAlterVol     $04
00088F52 E701                       	dc.b	smpsNoAttack, $01
00088F54 E1FE                       	smpsAlterNote       $FE
00088F56 ECFC                       	smpsPSGAlterVol     $FC
00088F58 9603                       	dc.b	nA1, $03
00088F5A E1FD                       	smpsAlterNote       $FD
00088F5C 9103                       	dc.b	nE1, $03
00088F5E EC04                       	smpsPSGAlterVol     $04
00088F60 E701                       	dc.b	smpsNoAttack, $01
00088F62 ECFC                       	smpsPSGAlterVol     $FC
00088F64 9403                       	dc.b	nG1, $03
00088F66 E1FE                       	smpsAlterNote       $FE
00088F68 9703                       	dc.b	nBb1, $03
00088F6A EC04                       	smpsPSGAlterVol     $04
00088F6C E701                       	dc.b	smpsNoAttack, $01
00088F6E E1FF                       	smpsAlterNote       $FF
00088F70 ECFC                       	smpsPSGAlterVol     $FC
00088F72 9B02                       	dc.b	nD2, $02
00088F74 EC04                       	smpsPSGAlterVol     $04
00088F76 E701                       	dc.b	smpsNoAttack, $01
00088F78 ECFC                       	smpsPSGAlterVol     $FC
00088F7A E1FE                       	smpsAlterNote       $FE
00088F7C 9A03                       	dc.b	nCs2, $03
00088F7E EC0B                       	smpsPSGAlterVol     $0B
00088F80 800A                       	dc.b	nRst, $0A
00088F82 E102                       	smpsAlterNote       $02
00088F84 01                         	dc.b	$01
00088F85 E10A                       	smpsAlterNote       $0A
00088F87 01                         	dc.b	$01
00088F88 E102                       	smpsAlterNote       $02
00088F8A 01                         	dc.b	$01
00088F8B E1FC                       	smpsAlterNote       $FC
00088F8D 01                         	dc.b	$01
00088F8E E10A                       	smpsAlterNote       $0A
00088F90 01                         	dc.b	$01
00088F91 E1FC                       	smpsAlterNote       $FC
00088F93 01                         	dc.b	$01
00088F94 E108                       	smpsAlterNote       $08
00088F96 01                         	dc.b	$01
00088F97 E10A                       	smpsAlterNote       $0A
00088F99 01                         	dc.b	$01
00088F9A E102                       	smpsAlterNote       $02
00088F9C 01                         	dc.b	$01
00088F9D E1F7                       	smpsAlterNote       $F7
00088F9F 0101                       	dc.b	$01, $01
00088FA1 E102                       	smpsAlterNote       $02
00088FA3 01                         	dc.b	$01
00088FA4 E108                       	smpsAlterNote       $08
00088FA6 0101                       	dc.b	$01, $01
00088FA8 E1FC                       	smpsAlterNote       $FC
00088FAA 01                         	dc.b	$01
00088FAB E10A                       	smpsAlterNote       $0A
00088FAD 01                         	dc.b	$01
00088FAE E1F7                       	smpsAlterNote       $F7
00088FB0 01                         	dc.b	$01
00088FB1 E102                       	smpsAlterNote       $02
00088FB3 01                         	dc.b	$01
00088FB4 E10A                       	smpsAlterNote       $0A
00088FB6 01                         	dc.b	$01
00088FB7 E102                       	smpsAlterNote       $02
00088FB9 01                         	dc.b	$01
00088FBA E1FC                       	smpsAlterNote       $FC
00088FBC 01                         	dc.b	$01
00088FBD                            
00088FBD                            music84_Jump06:
00088FBD E10A                       	smpsAlterNote       $0A
00088FBF 8001                       	dc.b	nRst, $01
00088FC1 E1FC                       	smpsAlterNote       $FC
00088FC3 01                         	dc.b	$01
00088FC4 E108                       	smpsAlterNote       $08
00088FC6 01                         	dc.b	$01
00088FC7 E10A                       	smpsAlterNote       $0A
00088FC9 01                         	dc.b	$01
00088FCA E1FC                       	smpsAlterNote       $FC
00088FCC ECF5                       	smpsPSGAlterVol     $F5
00088FCE 8F06                       	dc.b	nD1, $06
00088FD0 EC04                       	smpsPSGAlterVol     $04
00088FD2 E701                       	dc.b	smpsNoAttack, $01
00088FD4 EC07                       	smpsPSGAlterVol     $07
00088FD6 8003                       	dc.b	nRst, $03
00088FD8 ECF5                       	smpsPSGAlterVol     $F5
00088FDA 8F06                       	dc.b	nD1, $06
00088FDC EC04                       	smpsPSGAlterVol     $04
00088FDE E701                       	dc.b	smpsNoAttack, $01
00088FE0 EC07                       	smpsPSGAlterVol     $07
00088FE2 8006                       	dc.b	nRst, $06
00088FE4 E1FF                       	smpsAlterNote       $FF
00088FE6 01                         	dc.b	$01
00088FE7 E102                       	smpsAlterNote       $02
00088FE9 01                         	dc.b	$01
00088FEA E1FF                       	smpsAlterNote       $FF
00088FEC 01                         	dc.b	$01
00088FED E1F9                       	smpsAlterNote       $F9
00088FEF 01                         	dc.b	$01
00088FF0 E1FC                       	smpsAlterNote       $FC
00088FF2 ECF5                       	smpsPSGAlterVol     $F5
00088FF4 9006                       	dc.b	nEb1, $06
00088FF6 EC04                       	smpsPSGAlterVol     $04
00088FF8 E701                       	dc.b	smpsNoAttack, $01
00088FFA EC07                       	smpsPSGAlterVol     $07
00088FFC 8003                       	dc.b	nRst, $03
00088FFE ECF5                       	smpsPSGAlterVol     $F5
00089000 9007                       	dc.b	nEb1, $07
00089002 EC0B                       	smpsPSGAlterVol     $0B
00089004 8006                       	dc.b	nRst, $06
00089006 E1FF                       	smpsAlterNote       $FF
00089008 01                         	dc.b	$01
00089009 E103                       	smpsAlterNote       $03
0008900B 0101                       	dc.b	$01, $01
0008900D E1FC                       	smpsAlterNote       $FC
0008900F 01                         	dc.b	$01
00089010 ECF5                       	smpsPSGAlterVol     $F5
00089012 8F07                       	dc.b	nD1, $07
00089014 EC0B                       	smpsPSGAlterVol     $0B
00089016 8004                       	dc.b	nRst, $04
00089018 ECF5                       	smpsPSGAlterVol     $F5
0008901A 8F06                       	dc.b	nD1, $06
0008901C EC04                       	smpsPSGAlterVol     $04
0008901E E701                       	dc.b	smpsNoAttack, $01
00089020 EC07                       	smpsPSGAlterVol     $07
00089022 8006                       	dc.b	nRst, $06
00089024 E102                       	smpsAlterNote       $02
00089026 01                         	dc.b	$01
00089027 E103                       	smpsAlterNote       $03
00089029 01                         	dc.b	$01
0008902A E1FF                       	smpsAlterNote       $FF
0008902C 01                         	dc.b	$01
0008902D E1F9                       	smpsAlterNote       $F9
0008902F 01                         	dc.b	$01
00089030 E1FC                       	smpsAlterNote       $FC
00089032 ECF5                       	smpsPSGAlterVol     $F5
00089034 8F06                       	dc.b	nD1, $06
00089036 EC04                       	smpsPSGAlterVol     $04
00089038 E701                       	dc.b	smpsNoAttack, $01
0008903A EC07                       	smpsPSGAlterVol     $07
0008903C 8003                       	dc.b	nRst, $03
0008903E ECF5                       	smpsPSGAlterVol     $F5
00089040 8F06                       	dc.b	nD1, $06
00089042 EC04                       	smpsPSGAlterVol     $04
00089044 E701                       	dc.b	smpsNoAttack, $01
00089046 EC07                       	smpsPSGAlterVol     $07
00089048 8006                       	dc.b	nRst, $06
0008904A E1FF                       	smpsAlterNote       $FF
0008904C 01                         	dc.b	$01
0008904D E103                       	smpsAlterNote       $03
0008904F 01                         	dc.b	$01
00089050 E1FF                       	smpsAlterNote       $FF
00089052 01                         	dc.b	$01
00089053 E1FC                       	smpsAlterNote       $FC
00089055 01                         	dc.b	$01
00089056 ECF5                       	smpsPSGAlterVol     $F5
00089058 8F06                       	dc.b	nD1, $06
0008905A EC04                       	smpsPSGAlterVol     $04
0008905C E701                       	dc.b	smpsNoAttack, $01
0008905E EC07                       	smpsPSGAlterVol     $07
00089060 8003                       	dc.b	nRst, $03
00089062 ECF5                       	smpsPSGAlterVol     $F5
00089064 8F07                       	dc.b	nD1, $07
00089066 EC0B                       	smpsPSGAlterVol     $0B
00089068 8007                       	dc.b	nRst, $07
0008906A E101                       	smpsAlterNote       $01
0008906C 0101                       	dc.b	$01, $01
0008906E E1FC                       	smpsAlterNote       $FC
00089070 01                         	dc.b	$01
00089071 E1F9                       	smpsAlterNote       $F9
00089073 01                         	dc.b	$01
00089074 E1FC                       	smpsAlterNote       $FC
00089076 ECF5                       	smpsPSGAlterVol     $F5
00089078 9006                       	dc.b	nEb1, $06
0008907A EC0B                       	smpsPSGAlterVol     $0B
0008907C 8004                       	dc.b	nRst, $04
0008907E ECF5                       	smpsPSGAlterVol     $F5
00089080 9006                       	dc.b	nEb1, $06
00089082 EC04                       	smpsPSGAlterVol     $04
00089084 E701                       	dc.b	smpsNoAttack, $01
00089086 EC07                       	smpsPSGAlterVol     $07
00089088 8006                       	dc.b	nRst, $06
0008908A E100                       	smpsAlterNote       $00
0008908C 01                         	dc.b	$01
0008908D E102                       	smpsAlterNote       $02
0008908F 01                         	dc.b	$01
00089090 E100                       	smpsAlterNote       $00
00089092 01                         	dc.b	$01
00089093 E1FD                       	smpsAlterNote       $FD
00089095 01                         	dc.b	$01
00089096 E1FF                       	smpsAlterNote       $FF
00089098 ECF5                       	smpsPSGAlterVol     $F5
0008909A 9B06                       	dc.b	nD2, $06
0008909C EC04                       	smpsPSGAlterVol     $04
0008909E E701                       	dc.b	smpsNoAttack, $01
000890A0 EC07                       	smpsPSGAlterVol     $07
000890A2 8003                       	dc.b	nRst, $03
000890A4 ECF5                       	smpsPSGAlterVol     $F5
000890A6 9B07                       	dc.b	nD2, $07
000890A8 EC0B                       	smpsPSGAlterVol     $0B
000890AA 8006                       	dc.b	nRst, $06
000890AC E102                       	smpsAlterNote       $02
000890AE 01                         	dc.b	$01
000890AF E106                       	smpsAlterNote       $06
000890B1 01                         	dc.b	$01
000890B2 E105                       	smpsAlterNote       $05
000890B4 01                         	dc.b	$01
000890B5 E1FF                       	smpsAlterNote       $FF
000890B7 01                         	dc.b	$01
000890B8 ECF5                       	smpsPSGAlterVol     $F5
000890BA 9B07                       	dc.b	nD2, $07
000890BC EC0B                       	smpsPSGAlterVol     $0B
000890BE 8004                       	dc.b	nRst, $04
000890C0 ECF5                       	smpsPSGAlterVol     $F5
000890C2 9B06                       	dc.b	nD2, $06
000890C4 EC0B                       	smpsPSGAlterVol     $0B
000890C6 8007                       	dc.b	nRst, $07
000890C8 E105                       	smpsAlterNote       $05
000890CA 0101                       	dc.b	$01, $01
000890CC E102                       	smpsAlterNote       $02
000890CE 01                         	dc.b	$01
000890CF E1FC                       	smpsAlterNote       $FC
000890D1 01                         	dc.b	$01
000890D2 E1FF                       	smpsAlterNote       $FF
000890D4 ECF5                       	smpsPSGAlterVol     $F5
000890D6 9B06                       	dc.b	nD2, $06
000890D8 EC04                       	smpsPSGAlterVol     $04
000890DA E701                       	dc.b	smpsNoAttack, $01
000890DC EC07                       	smpsPSGAlterVol     $07
000890DE 8003                       	dc.b	nRst, $03
000890E0 ECF5                       	smpsPSGAlterVol     $F5
000890E2 9B06                       	dc.b	nD2, $06
000890E4 EC04                       	smpsPSGAlterVol     $04
000890E6 E701                       	dc.b	smpsNoAttack, $01
000890E8 EC07                       	smpsPSGAlterVol     $07
000890EA 8006                       	dc.b	nRst, $06
000890EC E102                       	smpsAlterNote       $02
000890EE 01                         	dc.b	$01
000890EF E106                       	smpsAlterNote       $06
000890F1 01                         	dc.b	$01
000890F2 E102                       	smpsAlterNote       $02
000890F4 01                         	dc.b	$01
000890F5 E1FF                       	smpsAlterNote       $FF
000890F7 01                         	dc.b	$01
000890F8 ECF5                       	smpsPSGAlterVol     $F5
000890FA 9B06                       	dc.b	nD2, $06
000890FC EC04                       	smpsPSGAlterVol     $04
000890FE E701                       	dc.b	smpsNoAttack, $01
00089100 EC07                       	smpsPSGAlterVol     $07
00089102 8003                       	dc.b	nRst, $03
00089104 ECF5                       	smpsPSGAlterVol     $F5
00089106 9B07                       	dc.b	nD2, $07
00089108 EC0B                       	smpsPSGAlterVol     $0B
0008910A 8007                       	dc.b	nRst, $07
0008910C E105                       	smpsAlterNote       $05
0008910E 0101                       	dc.b	$01, $01
00089110 E1FF                       	smpsAlterNote       $FF
00089112 01                         	dc.b	$01
00089113 E1FC                       	smpsAlterNote       $FC
00089115 01                         	dc.b	$01
00089116 E1FF                       	smpsAlterNote       $FF
00089118 ECF5                       	smpsPSGAlterVol     $F5
0008911A 9B06                       	dc.b	nD2, $06
0008911C EC0B                       	smpsPSGAlterVol     $0B
0008911E 8004                       	dc.b	nRst, $04
00089120 ECF5                       	smpsPSGAlterVol     $F5
00089122 9B06                       	dc.b	nD2, $06
00089124 EC04                       	smpsPSGAlterVol     $04
00089126 E701                       	dc.b	smpsNoAttack, $01
00089128 EC07                       	smpsPSGAlterVol     $07
0008912A 8006                       	dc.b	nRst, $06
0008912C E105                       	smpsAlterNote       $05
0008912E 01                         	dc.b	$01
0008912F E106                       	smpsAlterNote       $06
00089131 01                         	dc.b	$01
00089132 E102                       	smpsAlterNote       $02
00089134 01                         	dc.b	$01
00089135 E1FC                       	smpsAlterNote       $FC
00089137 01                         	dc.b	$01
00089138 E1FF                       	smpsAlterNote       $FF
0008913A ECF5                       	smpsPSGAlterVol     $F5
0008913C 9B06                       	dc.b	nD2, $06
0008913E EC04                       	smpsPSGAlterVol     $04
00089140 E701                       	dc.b	smpsNoAttack, $01
00089142 EC07                       	smpsPSGAlterVol     $07
00089144 8003                       	dc.b	nRst, $03
00089146 ECF5                       	smpsPSGAlterVol     $F5
00089148 9B06                       	dc.b	nD2, $06
0008914A EC04                       	smpsPSGAlterVol     $04
0008914C E701                       	dc.b	smpsNoAttack, $01
0008914E EC07                       	smpsPSGAlterVol     $07
00089150 8006                       	dc.b	nRst, $06
00089152 E102                       	smpsAlterNote       $02
00089154 01                         	dc.b	$01
00089155 E106                       	smpsAlterNote       $06
00089157 01                         	dc.b	$01
00089158 E105                       	smpsAlterNote       $05
0008915A 01                         	dc.b	$01
0008915B E1FF                       	smpsAlterNote       $FF
0008915D 01                         	dc.b	$01
0008915E ECF5                       	smpsPSGAlterVol     $F5
00089160 9B07                       	dc.b	nD2, $07
00089162 EC0B                       	smpsPSGAlterVol     $0B
00089164 8004                       	dc.b	nRst, $04
00089166 ECF5                       	smpsPSGAlterVol     $F5
00089168 9B06                       	dc.b	nD2, $06
0008916A EC0B                       	smpsPSGAlterVol     $0B
0008916C 8007                       	dc.b	nRst, $07
0008916E E105                       	smpsAlterNote       $05
00089170 0101                       	dc.b	$01, $01
00089172 E102                       	smpsAlterNote       $02
00089174 01                         	dc.b	$01
00089175 E1FC                       	smpsAlterNote       $FC
00089177 01                         	dc.b	$01
00089178 E1FF                       	smpsAlterNote       $FF
0008917A ECF5                       	smpsPSGAlterVol     $F5
0008917C 9B06                       	dc.b	nD2, $06
0008917E EC04                       	smpsPSGAlterVol     $04
00089180 E701                       	dc.b	smpsNoAttack, $01
00089182 EC07                       	smpsPSGAlterVol     $07
00089184 8003                       	dc.b	nRst, $03
00089186 ECF5                       	smpsPSGAlterVol     $F5
00089188 9B06                       	dc.b	nD2, $06
0008918A EC04                       	smpsPSGAlterVol     $04
0008918C E701                       	dc.b	smpsNoAttack, $01
0008918E EC07                       	smpsPSGAlterVol     $07
00089190 8006                       	dc.b	nRst, $06
00089192 E102                       	smpsAlterNote       $02
00089194 01                         	dc.b	$01
00089195 E106                       	smpsAlterNote       $06
00089197 01                         	dc.b	$01
00089198 E102                       	smpsAlterNote       $02
0008919A 01                         	dc.b	$01
0008919B E1FF                       	smpsAlterNote       $FF
0008919D 01                         	dc.b	$01
0008919E ECF5                       	smpsPSGAlterVol     $F5
000891A0 9B06                       	dc.b	nD2, $06
000891A2 EC04                       	smpsPSGAlterVol     $04
000891A4 E701                       	dc.b	smpsNoAttack, $01
000891A6 EC07                       	smpsPSGAlterVol     $07
000891A8 8003                       	dc.b	nRst, $03
000891AA ECF5                       	smpsPSGAlterVol     $F5
000891AC 9B07                       	dc.b	nD2, $07
000891AE E1FE                       	smpsAlterNote       $FE
000891B0 9706                       	dc.b	nBb1, $06
000891B2 EC04                       	smpsPSGAlterVol     $04
000891B4 E701                       	dc.b	smpsNoAttack, $01
000891B6 ECFC                       	smpsPSGAlterVol     $FC
000891B8 9703                       	dc.b	nBb1, $03
000891BA EC04                       	smpsPSGAlterVol     $04
000891BC E701                       	dc.b	smpsNoAttack, $01
000891BE ECFC                       	smpsPSGAlterVol     $FC
000891C0 9702                       	dc.b	nBb1, $02
000891C2 EC04                       	smpsPSGAlterVol     $04
000891C4 E701                       	dc.b	smpsNoAttack, $01
000891C6 ECFC                       	smpsPSGAlterVol     $FC
000891C8 9606                       	dc.b	nA1, $06
000891CA EC04                       	smpsPSGAlterVol     $04
000891CC E701                       	dc.b	smpsNoAttack, $01
000891CE EC07                       	smpsPSGAlterVol     $07
000891D0 8006                       	dc.b	nRst, $06
000891D2 E101                       	smpsAlterNote       $01
000891D4 01                         	dc.b	$01
000891D5 E107                       	smpsAlterNote       $07
000891D7 01                         	dc.b	$01
000891D8 E101                       	smpsAlterNote       $01
000891DA 01                         	dc.b	$01
000891DB E1F8                       	smpsAlterNote       $F8
000891DD 01                         	dc.b	$01
000891DE E1F7                       	smpsAlterNote       $F7
000891E0 01                         	dc.b	$01
000891E1 E1FC                       	smpsAlterNote       $FC
000891E3 01                         	dc.b	$01
000891E4 E106                       	smpsAlterNote       $06
000891E6 01                         	dc.b	$01
000891E7 E107                       	smpsAlterNote       $07
000891E9 01                         	dc.b	$01
000891EA E101                       	smpsAlterNote       $01
000891EC 01                         	dc.b	$01
000891ED E1F8                       	smpsAlterNote       $F8
000891EF 0101                       	dc.b	$01, $01
000891F1 E1FC                       	smpsAlterNote       $FC
000891F3 ECF5                       	smpsPSGAlterVol     $F5
000891F5 8F06                       	dc.b	nD1, $06
000891F7 EC04                       	smpsPSGAlterVol     $04
000891F9 E701                       	dc.b	smpsNoAttack, $01
000891FB EC07                       	smpsPSGAlterVol     $07
000891FD 8003                       	dc.b	nRst, $03
000891FF ECF5                       	smpsPSGAlterVol     $F5
00089201 8F06                       	dc.b	nD1, $06
00089203 EC04                       	smpsPSGAlterVol     $04
00089205 E701                       	dc.b	smpsNoAttack, $01
00089207 EC07                       	smpsPSGAlterVol     $07
00089209 8006                       	dc.b	nRst, $06
0008920B E1FF                       	smpsAlterNote       $FF
0008920D 01                         	dc.b	$01
0008920E E102                       	smpsAlterNote       $02
00089210 01                         	dc.b	$01
00089211 E101                       	smpsAlterNote       $01
00089213 01                         	dc.b	$01
00089214 E1FC                       	smpsAlterNote       $FC
00089216 01                         	dc.b	$01
00089217 ECF5                       	smpsPSGAlterVol     $F5
00089219 9007                       	dc.b	nEb1, $07
0008921B EC0B                       	smpsPSGAlterVol     $0B
0008921D 8004                       	dc.b	nRst, $04
0008921F ECF5                       	smpsPSGAlterVol     $F5
00089221 9006                       	dc.b	nEb1, $06
00089223 EC0B                       	smpsPSGAlterVol     $0B
00089225 8007                       	dc.b	nRst, $07
00089227 E103                       	smpsAlterNote       $03
00089229 0101                       	dc.b	$01, $01
0008922B E1FC                       	smpsAlterNote       $FC
0008922D 01                         	dc.b	$01
0008922E E1F9                       	smpsAlterNote       $F9
00089230 01                         	dc.b	$01
00089231 E1FC                       	smpsAlterNote       $FC
00089233 ECF5                       	smpsPSGAlterVol     $F5
00089235 8F06                       	dc.b	nD1, $06
00089237 EC04                       	smpsPSGAlterVol     $04
00089239 E701                       	dc.b	smpsNoAttack, $01
0008923B EC07                       	smpsPSGAlterVol     $07
0008923D 8003                       	dc.b	nRst, $03
0008923F ECF5                       	smpsPSGAlterVol     $F5
00089241 8F06                       	dc.b	nD1, $06
00089243 EC04                       	smpsPSGAlterVol     $04
00089245 E701                       	dc.b	smpsNoAttack, $01
00089247 EC07                       	smpsPSGAlterVol     $07
00089249 8006                       	dc.b	nRst, $06
0008924B E1FF                       	smpsAlterNote       $FF
0008924D 01                         	dc.b	$01
0008924E E103                       	smpsAlterNote       $03
00089250 01                         	dc.b	$01
00089251 E1FF                       	smpsAlterNote       $FF
00089253 01                         	dc.b	$01
00089254 E1F9                       	smpsAlterNote       $F9
00089256 01                         	dc.b	$01
00089257 E1FC                       	smpsAlterNote       $FC
00089259 ECF5                       	smpsPSGAlterVol     $F5
0008925B 8F06                       	dc.b	nD1, $06
0008925D EC04                       	smpsPSGAlterVol     $04
0008925F E701                       	dc.b	smpsNoAttack, $01
00089261 EC07                       	smpsPSGAlterVol     $07
00089263 8003                       	dc.b	nRst, $03
00089265 ECF5                       	smpsPSGAlterVol     $F5
00089267 8F07                       	dc.b	nD1, $07
00089269 EC0B                       	smpsPSGAlterVol     $0B
0008926B 8006                       	dc.b	nRst, $06
0008926D E1FF                       	smpsAlterNote       $FF
0008926F 01                         	dc.b	$01
00089270 E102                       	smpsAlterNote       $02
00089272 0101                       	dc.b	$01, $01
00089274 E1FC                       	smpsAlterNote       $FC
00089276 01                         	dc.b	$01
00089277 ECF5                       	smpsPSGAlterVol     $F5
00089279 8F07                       	dc.b	nD1, $07
0008927B EC0B                       	smpsPSGAlterVol     $0B
0008927D 8004                       	dc.b	nRst, $04
0008927F ECF5                       	smpsPSGAlterVol     $F5
00089281 8F06                       	dc.b	nD1, $06
00089283 EC04                       	smpsPSGAlterVol     $04
00089285 E701                       	dc.b	smpsNoAttack, $01
00089287 EC07                       	smpsPSGAlterVol     $07
00089289 8006                       	dc.b	nRst, $06
0008928B E101                       	smpsAlterNote       $01
0008928D 01                         	dc.b	$01
0008928E E102                       	smpsAlterNote       $02
00089290 01                         	dc.b	$01
00089291 E1FF                       	smpsAlterNote       $FF
00089293 01                         	dc.b	$01
00089294 E1F9                       	smpsAlterNote       $F9
00089296 01                         	dc.b	$01
00089297 E1FC                       	smpsAlterNote       $FC
00089299 ECF5                       	smpsPSGAlterVol     $F5
0008929B 9006                       	dc.b	nEb1, $06
0008929D EC04                       	smpsPSGAlterVol     $04
0008929F E701                       	dc.b	smpsNoAttack, $01
000892A1 EC07                       	smpsPSGAlterVol     $07
000892A3 8003                       	dc.b	nRst, $03
000892A5 ECF5                       	smpsPSGAlterVol     $F5
000892A7 9006                       	dc.b	nEb1, $06
000892A9 EC04                       	smpsPSGAlterVol     $04
000892AB E701                       	dc.b	smpsNoAttack, $01
000892AD EC07                       	smpsPSGAlterVol     $07
000892AF 8006                       	dc.b	nRst, $06
000892B1 E100                       	smpsAlterNote       $00
000892B3 01                         	dc.b	$01
000892B4 E102                       	smpsAlterNote       $02
000892B6 01                         	dc.b	$01
000892B7 E100                       	smpsAlterNote       $00
000892B9 01                         	dc.b	$01
000892BA E1FF                       	smpsAlterNote       $FF
000892BC 01                         	dc.b	$01
000892BD ECF5                       	smpsPSGAlterVol     $F5
000892BF 9B06                       	dc.b	nD2, $06
000892C1 EC04                       	smpsPSGAlterVol     $04
000892C3 E701                       	dc.b	smpsNoAttack, $01
000892C5 EC07                       	smpsPSGAlterVol     $07
000892C7 8003                       	dc.b	nRst, $03
000892C9 ECF5                       	smpsPSGAlterVol     $F5
000892CB 9B07                       	dc.b	nD2, $07
000892CD EC0B                       	smpsPSGAlterVol     $0B
000892CF 8007                       	dc.b	nRst, $07
000892D1 E105                       	smpsAlterNote       $05
000892D3 0101                       	dc.b	$01, $01
000892D5 E1FF                       	smpsAlterNote       $FF
000892D7 01                         	dc.b	$01
000892D8 E1FC                       	smpsAlterNote       $FC
000892DA 01                         	dc.b	$01
000892DB E1FF                       	smpsAlterNote       $FF
000892DD ECF5                       	smpsPSGAlterVol     $F5
000892DF 9B06                       	dc.b	nD2, $06
000892E1 EC0B                       	smpsPSGAlterVol     $0B
000892E3 8004                       	dc.b	nRst, $04
000892E5 ECF5                       	smpsPSGAlterVol     $F5
000892E7 9B06                       	dc.b	nD2, $06
000892E9 EC04                       	smpsPSGAlterVol     $04
000892EB E701                       	dc.b	smpsNoAttack, $01
000892ED EC07                       	smpsPSGAlterVol     $07
000892EF 8006                       	dc.b	nRst, $06
000892F1 E102                       	smpsAlterNote       $02
000892F3 01                         	dc.b	$01
000892F4 E106                       	smpsAlterNote       $06
000892F6 01                         	dc.b	$01
000892F7 E102                       	smpsAlterNote       $02
000892F9 01                         	dc.b	$01
000892FA E1FC                       	smpsAlterNote       $FC
000892FC 01                         	dc.b	$01
000892FD E1FF                       	smpsAlterNote       $FF
000892FF ECF5                       	smpsPSGAlterVol     $F5
00089301 9B06                       	dc.b	nD2, $06
00089303 EC04                       	smpsPSGAlterVol     $04
00089305 E701                       	dc.b	smpsNoAttack, $01
00089307 EC07                       	smpsPSGAlterVol     $07
00089309 8003                       	dc.b	nRst, $03
0008930B ECF5                       	smpsPSGAlterVol     $F5
0008930D 9B07                       	dc.b	nD2, $07
0008930F EC0B                       	smpsPSGAlterVol     $0B
00089311 8006                       	dc.b	nRst, $06
00089313 E102                       	smpsAlterNote       $02
00089315 01                         	dc.b	$01
00089316 E105                       	smpsAlterNote       $05
00089318 0101                       	dc.b	$01, $01
0008931A E1FF                       	smpsAlterNote       $FF
0008931C 01                         	dc.b	$01
0008931D ECF5                       	smpsPSGAlterVol     $F5
0008931F 9B07                       	dc.b	nD2, $07
00089321 EC0B                       	smpsPSGAlterVol     $0B
00089323 8004                       	dc.b	nRst, $04
00089325 ECF5                       	smpsPSGAlterVol     $F5
00089327 9B06                       	dc.b	nD2, $06
00089329 EC0B                       	smpsPSGAlterVol     $0B
0008932B 8007                       	dc.b	nRst, $07
0008932D E105                       	smpsAlterNote       $05
0008932F 0101                       	dc.b	$01, $01
00089331 E102                       	smpsAlterNote       $02
00089333 01                         	dc.b	$01
00089334 E1FC                       	smpsAlterNote       $FC
00089336 01                         	dc.b	$01
00089337 E1FF                       	smpsAlterNote       $FF
00089339 ECF5                       	smpsPSGAlterVol     $F5
0008933B 9B06                       	dc.b	nD2, $06
0008933D EC04                       	smpsPSGAlterVol     $04
0008933F E701                       	dc.b	smpsNoAttack, $01
00089341 EC07                       	smpsPSGAlterVol     $07
00089343 8003                       	dc.b	nRst, $03
00089345 ECF5                       	smpsPSGAlterVol     $F5
00089347 9B06                       	dc.b	nD2, $06
00089349 EC04                       	smpsPSGAlterVol     $04
0008934B E701                       	dc.b	smpsNoAttack, $01
0008934D EC07                       	smpsPSGAlterVol     $07
0008934F 8006                       	dc.b	nRst, $06
00089351 E102                       	smpsAlterNote       $02
00089353 01                         	dc.b	$01
00089354 E106                       	smpsAlterNote       $06
00089356 01                         	dc.b	$01
00089357 E102                       	smpsAlterNote       $02
00089359 01                         	dc.b	$01
0008935A E1FF                       	smpsAlterNote       $FF
0008935C 01                         	dc.b	$01
0008935D ECF5                       	smpsPSGAlterVol     $F5
0008935F 9B06                       	dc.b	nD2, $06
00089361 EC04                       	smpsPSGAlterVol     $04
00089363 E701                       	dc.b	smpsNoAttack, $01
00089365 EC07                       	smpsPSGAlterVol     $07
00089367 8003                       	dc.b	nRst, $03
00089369 ECF5                       	smpsPSGAlterVol     $F5
0008936B 9B07                       	dc.b	nD2, $07
0008936D EC0B                       	smpsPSGAlterVol     $0B
0008936F 8007                       	dc.b	nRst, $07
00089371 E105                       	smpsAlterNote       $05
00089373 0101                       	dc.b	$01, $01
00089375 E1FF                       	smpsAlterNote       $FF
00089377 01                         	dc.b	$01
00089378 E1FC                       	smpsAlterNote       $FC
0008937A 01                         	dc.b	$01
0008937B E1FF                       	smpsAlterNote       $FF
0008937D ECF5                       	smpsPSGAlterVol     $F5
0008937F 9B06                       	dc.b	nD2, $06
00089381 EC0B                       	smpsPSGAlterVol     $0B
00089383 8004                       	dc.b	nRst, $04
00089385 ECF5                       	smpsPSGAlterVol     $F5
00089387 9B06                       	dc.b	nD2, $06
00089389 EC04                       	smpsPSGAlterVol     $04
0008938B E701                       	dc.b	smpsNoAttack, $01
0008938D EC07                       	smpsPSGAlterVol     $07
0008938F 8006                       	dc.b	nRst, $06
00089391 E102                       	smpsAlterNote       $02
00089393 01                         	dc.b	$01
00089394 E106                       	smpsAlterNote       $06
00089396 01                         	dc.b	$01
00089397 E102                       	smpsAlterNote       $02
00089399 01                         	dc.b	$01
0008939A E1FC                       	smpsAlterNote       $FC
0008939C 01                         	dc.b	$01
0008939D E1FF                       	smpsAlterNote       $FF
0008939F ECF5                       	smpsPSGAlterVol     $F5
000893A1 9B06                       	dc.b	nD2, $06
000893A3 EC04                       	smpsPSGAlterVol     $04
000893A5 E701                       	dc.b	smpsNoAttack, $01
000893A7 EC07                       	smpsPSGAlterVol     $07
000893A9 8003                       	dc.b	nRst, $03
000893AB ECF5                       	smpsPSGAlterVol     $F5
000893AD 9B06                       	dc.b	nD2, $06
000893AF EC04                       	smpsPSGAlterVol     $04
000893B1 E701                       	dc.b	smpsNoAttack, $01
000893B3 EC07                       	smpsPSGAlterVol     $07
000893B5 8006                       	dc.b	nRst, $06
000893B7 E102                       	smpsAlterNote       $02
000893B9 01                         	dc.b	$01
000893BA E106                       	smpsAlterNote       $06
000893BC 01                         	dc.b	$01
000893BD E105                       	smpsAlterNote       $05
000893BF 01                         	dc.b	$01
000893C0 E1FF                       	smpsAlterNote       $FF
000893C2 01                         	dc.b	$01
000893C3 ECF5                       	smpsPSGAlterVol     $F5
000893C5 9B07                       	dc.b	nD2, $07
000893C7 EC0B                       	smpsPSGAlterVol     $0B
000893C9 8004                       	dc.b	nRst, $04
000893CB ECF5                       	smpsPSGAlterVol     $F5
000893CD 9B06                       	dc.b	nD2, $06
000893CF EC0B                       	smpsPSGAlterVol     $0B
000893D1 8007                       	dc.b	nRst, $07
000893D3 E105                       	smpsAlterNote       $05
000893D5 0101                       	dc.b	$01, $01
000893D7 E101                       	smpsAlterNote       $01
000893D9 01                         	dc.b	$01
000893DA E1FB                       	smpsAlterNote       $FB
000893DC 01                         	dc.b	$01
000893DD E1FE                       	smpsAlterNote       $FE
000893DF ECF5                       	smpsPSGAlterVol     $F5
000893E1 9A06                       	dc.b	nCs2, $06
000893E3 EC04                       	smpsPSGAlterVol     $04
000893E5 E701                       	dc.b	smpsNoAttack, $01
000893E7 EC07                       	smpsPSGAlterVol     $07
000893E9 8003                       	dc.b	nRst, $03
000893EB ECF5                       	smpsPSGAlterVol     $F5
000893ED 9A06                       	dc.b	nCs2, $06
000893EF EC04                       	smpsPSGAlterVol     $04
000893F1 E701                       	dc.b	smpsNoAttack, $01
000893F3 EC07                       	smpsPSGAlterVol     $07
000893F5 8003                       	dc.b	nRst, $03
000893F7 E1FC                       	smpsAlterNote       $FC
000893F9 ECF5                       	smpsPSGAlterVol     $F5
000893FB 8F07                       	dc.b	nD1, $07
000893FD EC0B                       	smpsPSGAlterVol     $0B
000893FF 8006                       	dc.b	nRst, $06
00089401 E1FF                       	smpsAlterNote       $FF
00089403 01                         	dc.b	$01
00089404 E103                       	smpsAlterNote       $03
00089406 01                         	dc.b	$01
00089407 E102                       	smpsAlterNote       $02
00089409 01                         	dc.b	$01
0008940A E1FC                       	smpsAlterNote       $FC
0008940C 01                         	dc.b	$01
0008940D E1F8                       	smpsAlterNote       $F8
0008940F 01                         	dc.b	$01
00089410 E1FC                       	smpsAlterNote       $FC
00089412 01                         	dc.b	$01
00089413 E1FF                       	smpsAlterNote       $FF
00089415 01                         	dc.b	$01
00089416 E103                       	smpsAlterNote       $03
00089418 01                         	dc.b	$01
00089419 E1FC                       	smpsAlterNote       $FC
0008941B ECF5                       	smpsPSGAlterVol     $F5
0008941D 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00089421 EC04                       	smpsPSGAlterVol     $04
00089423 E701                       	dc.b	smpsNoAttack, $01
00089425 EC07                       	smpsPSGAlterVol     $07
00089427 8009                       	dc.b	nRst, $09
00089429 E1FF                       	smpsAlterNote       $FF
0008942B 01                         	dc.b	$01
0008942C E103                       	smpsAlterNote       $03
0008942E 01                         	dc.b	$01
0008942F E102                       	smpsAlterNote       $02
00089431 01                         	dc.b	$01
00089432 E1FC                       	smpsAlterNote       $FC
00089434 01                         	dc.b	$01
00089435 E1F8                       	smpsAlterNote       $F8
00089437 01                         	dc.b	$01
00089438 E1FC                       	smpsAlterNote       $FC
0008943A 01                         	dc.b	$01
0008943B E1FF                       	smpsAlterNote       $FF
0008943D 01                         	dc.b	$01
0008943E E103                       	smpsAlterNote       $03
00089440 01                         	dc.b	$01
00089441 E1FF                       	smpsAlterNote       $FF
00089443 01                         	dc.b	$01
00089444 E1F9                       	smpsAlterNote       $F9
00089446 01                         	dc.b	$01
00089447 E1F8                       	smpsAlterNote       $F8
00089449 01                         	dc.b	$01
0008944A E1FC                       	smpsAlterNote       $FC
0008944C 01                         	dc.b	$01
0008944D E102                       	smpsAlterNote       $02
0008944F 0101                       	dc.b	$01, $01
00089451 E1FF                       	smpsAlterNote       $FF
00089453 01                         	dc.b	$01
00089454 E1FC                       	smpsAlterNote       $FC
00089456 ECF5                       	smpsPSGAlterVol     $F5
00089458 8F02                       	dc.b	nD1, $02
0008945A EC04                       	smpsPSGAlterVol     $04
0008945C E701                       	dc.b	smpsNoAttack, $01
0008945E ECFC                       	smpsPSGAlterVol     $FC
00089460 E1FB                       	smpsAlterNote       $FB
00089462 8D06                       	dc.b	nC1, $06
00089464 EC04                       	smpsPSGAlterVol     $04
00089466 E701                       	dc.b	smpsNoAttack, $01
00089468 EC07                       	smpsPSGAlterVol     $07
0008946A 8006                       	dc.b	nRst, $06
0008946C E1FE                       	smpsAlterNote       $FE
0008946E 01                         	dc.b	$01
0008946F E102                       	smpsAlterNote       $02
00089471 01                         	dc.b	$01
00089472 E1FE                       	smpsAlterNote       $FE
00089474 01                         	dc.b	$01
00089475 E1FB                       	smpsAlterNote       $FB
00089477 01                         	dc.b	$01
00089478 E1F7                       	smpsAlterNote       $F7
0008947A 01                         	dc.b	$01
0008947B E1FB                       	smpsAlterNote       $FB
0008947D 01                         	dc.b	$01
0008947E E101                       	smpsAlterNote       $01
00089480 01                         	dc.b	$01
00089481 E102                       	smpsAlterNote       $02
00089483 01                         	dc.b	$01
00089484 E1FB                       	smpsAlterNote       $FB
00089486 ECF5                       	smpsPSGAlterVol     $F5
00089488 8D02                       	dc.b	nC1, $02
0008948A EC04                       	smpsPSGAlterVol     $04
0008948C E701                       	dc.b	smpsNoAttack, $01
0008948E E1FC                       	smpsAlterNote       $FC
00089490 ECFC                       	smpsPSGAlterVol     $FC
00089492 8F0D                       	dc.b	nD1, $0D
00089494 E1FF                       	smpsAlterNote       $FF
00089496 E701                       	dc.b	smpsNoAttack, $01
00089498 E103                       	smpsAlterNote       $03
0008949A E701                       	dc.b	smpsNoAttack, $01
0008949C E1FF                       	smpsAlterNote       $FF
0008949E E701                       	dc.b	smpsNoAttack, $01
000894A0 E1FC                       	smpsAlterNote       $FC
000894A2 E701                       	dc.b	smpsNoAttack, $01
000894A4 E1F8                       	smpsAlterNote       $F8
000894A6 E701                       	dc.b	smpsNoAttack, $01
000894A8 E1FC                       	smpsAlterNote       $FC
000894AA E701                       	dc.b	smpsNoAttack, $01
000894AC E102                       	smpsAlterNote       $02
000894AE E701                       	dc.b	smpsNoAttack, $01
000894B0 E103                       	smpsAlterNote       $03
000894B2 E701                       	dc.b	smpsNoAttack, $01
000894B4 E1FF                       	smpsAlterNote       $FF
000894B6 E701                       	dc.b	smpsNoAttack, $01
000894B8 E1F9                       	smpsAlterNote       $F9
000894BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894BE E1FC                       	smpsAlterNote       $FC
000894C0 E701                       	dc.b	smpsNoAttack, $01
000894C2 E102                       	smpsAlterNote       $02
000894C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894C8 E1FC                       	smpsAlterNote       $FC
000894CA E701                       	dc.b	smpsNoAttack, $01
000894CC E1F9                       	smpsAlterNote       $F9
000894CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894D2 E1FF                       	smpsAlterNote       $FF
000894D4 EC04                       	smpsPSGAlterVol     $04
000894D6 E701                       	dc.b	smpsNoAttack, $01
000894D8 EC07                       	smpsPSGAlterVol     $07
000894DA E103                       	smpsAlterNote       $03
000894DC 8001                       	dc.b	nRst, $01
000894DE E102                       	smpsAlterNote       $02
000894E0 01                         	dc.b	$01
000894E1 E1FB                       	smpsAlterNote       $FB
000894E3 01                         	dc.b	$01
000894E4 E1F7                       	smpsAlterNote       $F7
000894E6 01                         	dc.b	$01
000894E7 E1FB                       	smpsAlterNote       $FB
000894E9 01                         	dc.b	$01
000894EA E102                       	smpsAlterNote       $02
000894EC 01                         	dc.b	$01
000894ED E103                       	smpsAlterNote       $03
000894EF 01                         	dc.b	$01
000894F0 E1FB                       	smpsAlterNote       $FB
000894F2 ECF5                       	smpsPSGAlterVol     $F5
000894F4 8E06                       	dc.b	nCs1, $06
000894F6 EC04                       	smpsPSGAlterVol     $04
000894F8 E701                       	dc.b	smpsNoAttack, $01
000894FA EC07                       	smpsPSGAlterVol     $07
000894FC 8003                       	dc.b	nRst, $03
000894FE ECF5                       	smpsPSGAlterVol     $F5
00089500 8E06                       	dc.b	nCs1, $06
00089502 EC04                       	smpsPSGAlterVol     $04
00089504 E701                       	dc.b	smpsNoAttack, $01
00089506 EC07                       	smpsPSGAlterVol     $07
00089508 8006                       	dc.b	nRst, $06
0008950A E1FE                       	smpsAlterNote       $FE
0008950C 01                         	dc.b	$01
0008950D E102                       	smpsAlterNote       $02
0008950F 01                         	dc.b	$01
00089510 E1FE                       	smpsAlterNote       $FE
00089512 01                         	dc.b	$01
00089513 E1F9                       	smpsAlterNote       $F9
00089515 01                         	dc.b	$01
00089516 E1FC                       	smpsAlterNote       $FC
00089518 ECF5                       	smpsPSGAlterVol     $F5
0008951A 8F06                       	dc.b	nD1, $06
0008951C EC04                       	smpsPSGAlterVol     $04
0008951E E701                       	dc.b	smpsNoAttack, $01
00089520 EC07                       	smpsPSGAlterVol     $07
00089522 8003                       	dc.b	nRst, $03
00089524 ECF5                       	smpsPSGAlterVol     $F5
00089526 8F07                       	dc.b	nD1, $07
00089528 EC0B                       	smpsPSGAlterVol     $0B
0008952A 8006                       	dc.b	nRst, $06
0008952C E1FF                       	smpsAlterNote       $FF
0008952E 01                         	dc.b	$01
0008952F E102                       	smpsAlterNote       $02
00089531 0101                       	dc.b	$01, $01
00089533 E1FB                       	smpsAlterNote       $FB
00089535 01                         	dc.b	$01
00089536 ECF5                       	smpsPSGAlterVol     $F5
00089538 8E07                       	dc.b	nCs1, $07
0008953A EC0B                       	smpsPSGAlterVol     $0B
0008953C 8004                       	dc.b	nRst, $04
0008953E ECF5                       	smpsPSGAlterVol     $F5
00089540 8E06                       	dc.b	nCs1, $06
00089542 EC04                       	smpsPSGAlterVol     $04
00089544 E701                       	dc.b	smpsNoAttack, $01
00089546 EC07                       	smpsPSGAlterVol     $07
00089548 8006                       	dc.b	nRst, $06
0008954A E101                       	smpsAlterNote       $01
0008954C 01                         	dc.b	$01
0008954D E102                       	smpsAlterNote       $02
0008954F 01                         	dc.b	$01
00089550 E1FE                       	smpsAlterNote       $FE
00089552 01                         	dc.b	$01
00089553 E1F8                       	smpsAlterNote       $F8
00089555 01                         	dc.b	$01
00089556 E1FB                       	smpsAlterNote       $FB
00089558 ECF5                       	smpsPSGAlterVol     $F5
0008955A 8E06                       	dc.b	nCs1, $06
0008955C EC04                       	smpsPSGAlterVol     $04
0008955E E701                       	dc.b	smpsNoAttack, $01
00089560 EC07                       	smpsPSGAlterVol     $07
00089562 8003                       	dc.b	nRst, $03
00089564 ECF5                       	smpsPSGAlterVol     $F5
00089566 8E06                       	dc.b	nCs1, $06
00089568 EC04                       	smpsPSGAlterVol     $04
0008956A E701                       	dc.b	smpsNoAttack, $01
0008956C EC07                       	smpsPSGAlterVol     $07
0008956E 8004                       	dc.b	nRst, $04
00089570 E1FC                       	smpsAlterNote       $FC
00089572 ECF5                       	smpsPSGAlterVol     $F5
00089574 8F06                       	dc.b	nD1, $06
00089576 EC0B                       	smpsPSGAlterVol     $0B
00089578 8006                       	dc.b	nRst, $06
0008957A E1FF                       	smpsAlterNote       $FF
0008957C 01                         	dc.b	$01
0008957D E102                       	smpsAlterNote       $02
0008957F 0101                       	dc.b	$01, $01
00089581 E1FC                       	smpsAlterNote       $FC
00089583 01                         	dc.b	$01
00089584 E1F8                       	smpsAlterNote       $F8
00089586 01                         	dc.b	$01
00089587 E1F9                       	smpsAlterNote       $F9
00089589 01                         	dc.b	$01
0008958A E1FF                       	smpsAlterNote       $FF
0008958C 01                         	dc.b	$01
0008958D E103                       	smpsAlterNote       $03
0008958F 01                         	dc.b	$01
00089590 E1FC                       	smpsAlterNote       $FC
00089592 ECF5                       	smpsPSGAlterVol     $F5
00089594 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00089598 EC04                       	smpsPSGAlterVol     $04
0008959A E701                       	dc.b	smpsNoAttack, $01
0008959C EC07                       	smpsPSGAlterVol     $07
0008959E 8009                       	dc.b	nRst, $09
000895A0 E1FF                       	smpsAlterNote       $FF
000895A2 01                         	dc.b	$01
000895A3 E102                       	smpsAlterNote       $02
000895A5 0101                       	dc.b	$01, $01
000895A7 E1FC                       	smpsAlterNote       $FC
000895A9 01                         	dc.b	$01
000895AA E1F8                       	smpsAlterNote       $F8
000895AC 01                         	dc.b	$01
000895AD E1F9                       	smpsAlterNote       $F9
000895AF 01                         	dc.b	$01
000895B0 E1FF                       	smpsAlterNote       $FF
000895B2 01                         	dc.b	$01
000895B3 E103                       	smpsAlterNote       $03
000895B5 01                         	dc.b	$01
000895B6 E1FF                       	smpsAlterNote       $FF
000895B8 01                         	dc.b	$01
000895B9 E1FC                       	smpsAlterNote       $FC
000895BB 01                         	dc.b	$01
000895BC E1F8                       	smpsAlterNote       $F8
000895BE 01                         	dc.b	$01
000895BF E1FC                       	smpsAlterNote       $FC
000895C1 01                         	dc.b	$01
000895C2 E102                       	smpsAlterNote       $02
000895C4 01                         	dc.b	$01
000895C5 E103                       	smpsAlterNote       $03
000895C7 01                         	dc.b	$01
000895C8 E1FF                       	smpsAlterNote       $FF
000895CA 01                         	dc.b	$01
000895CB E1FC                       	smpsAlterNote       $FC
000895CD ECF5                       	smpsPSGAlterVol     $F5
000895CF 8F03                       	dc.b	nD1, $03
000895D1 E1FB                       	smpsAlterNote       $FB
000895D3 8D06                       	dc.b	nC1, $06
000895D5 EC04                       	smpsPSGAlterVol     $04
000895D7 E701                       	dc.b	smpsNoAttack, $01
000895D9 EC07                       	smpsPSGAlterVol     $07
000895DB 8006                       	dc.b	nRst, $06
000895DD E1FE                       	smpsAlterNote       $FE
000895DF 01                         	dc.b	$01
000895E0 E102                       	smpsAlterNote       $02
000895E2 01                         	dc.b	$01
000895E3 E101                       	smpsAlterNote       $01
000895E5 01                         	dc.b	$01
000895E6 E1FB                       	smpsAlterNote       $FB
000895E8 01                         	dc.b	$01
000895E9 E1F7                       	smpsAlterNote       $F7
000895EB 01                         	dc.b	$01
000895EC E1FB                       	smpsAlterNote       $FB
000895EE 01                         	dc.b	$01
000895EF E1FE                       	smpsAlterNote       $FE
000895F1 01                         	dc.b	$01
000895F2 E102                       	smpsAlterNote       $02
000895F4 01                         	dc.b	$01
000895F5 E1FB                       	smpsAlterNote       $FB
000895F7 ECF5                       	smpsPSGAlterVol     $F5
000895F9 8D03                       	dc.b	nC1, $03
000895FB E1FC                       	smpsAlterNote       $FC
000895FD 8F0D                       	dc.b	nD1, $0D
000895FF E1FF                       	smpsAlterNote       $FF
00089601 E701                       	dc.b	smpsNoAttack, $01
00089603 E103                       	smpsAlterNote       $03
00089605 E701                       	dc.b	smpsNoAttack, $01
00089607 E1FF                       	smpsAlterNote       $FF
00089609 E701                       	dc.b	smpsNoAttack, $01
0008960B E1FC                       	smpsAlterNote       $FC
0008960D E701                       	dc.b	smpsNoAttack, $01
0008960F E1F8                       	smpsAlterNote       $F8
00089611 E701                       	dc.b	smpsNoAttack, $01
00089613 E1FC                       	smpsAlterNote       $FC
00089615 E701                       	dc.b	smpsNoAttack, $01
00089617 E102                       	smpsAlterNote       $02
00089619 E701                       	dc.b	smpsNoAttack, $01
0008961B E103                       	smpsAlterNote       $03
0008961D E701                       	dc.b	smpsNoAttack, $01
0008961F E1FF                       	smpsAlterNote       $FF
00089621 E701                       	dc.b	smpsNoAttack, $01
00089623 E1F9                       	smpsAlterNote       $F9
00089625 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089629 E1FC                       	smpsAlterNote       $FC
0008962B E701                       	dc.b	smpsNoAttack, $01
0008962D E102                       	smpsAlterNote       $02
0008962F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089633 E1FF                       	smpsAlterNote       $FF
00089635 E701                       	dc.b	smpsNoAttack, $01
00089637 E1F9                       	smpsAlterNote       $F9
00089639 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008963D E1FF                       	smpsAlterNote       $FF
0008963F EC04                       	smpsPSGAlterVol     $04
00089641 E701                       	dc.b	smpsNoAttack, $01
00089643 EC07                       	smpsPSGAlterVol     $07
00089645 E103                       	smpsAlterNote       $03
00089647 8001                       	dc.b	nRst, $01
00089649 E102                       	smpsAlterNote       $02
0008964B 01                         	dc.b	$01
0008964C E1FB                       	smpsAlterNote       $FB
0008964E 01                         	dc.b	$01
0008964F E1F7                       	smpsAlterNote       $F7
00089651 01                         	dc.b	$01
00089652 E1FB                       	smpsAlterNote       $FB
00089654 01                         	dc.b	$01
00089655 E1FF                       	smpsAlterNote       $FF
00089657 01                         	dc.b	$01
00089658 E103                       	smpsAlterNote       $03
0008965A 01                         	dc.b	$01
0008965B E1FB                       	smpsAlterNote       $FB
0008965D ECF5                       	smpsPSGAlterVol     $F5
0008965F 8E06                       	dc.b	nCs1, $06
00089661 EC04                       	smpsPSGAlterVol     $04
00089663 E701                       	dc.b	smpsNoAttack, $01
00089665 EC07                       	smpsPSGAlterVol     $07
00089667 8003                       	dc.b	nRst, $03
00089669 ECF5                       	smpsPSGAlterVol     $F5
0008966B 8E06                       	dc.b	nCs1, $06
0008966D EC04                       	smpsPSGAlterVol     $04
0008966F E701                       	dc.b	smpsNoAttack, $01
00089671 EC07                       	smpsPSGAlterVol     $07
00089673 8006                       	dc.b	nRst, $06
00089675 E1FE                       	smpsAlterNote       $FE
00089677 01                         	dc.b	$01
00089678 E102                       	smpsAlterNote       $02
0008967A 01                         	dc.b	$01
0008967B E1FE                       	smpsAlterNote       $FE
0008967D 01                         	dc.b	$01
0008967E E1FC                       	smpsAlterNote       $FC
00089680 01                         	dc.b	$01
00089681 ECF5                       	smpsPSGAlterVol     $F5
00089683 8F06                       	dc.b	nD1, $06
00089685 EC04                       	smpsPSGAlterVol     $04
00089687 E701                       	dc.b	smpsNoAttack, $01
00089689 EC07                       	smpsPSGAlterVol     $07
0008968B 8003                       	dc.b	nRst, $03
0008968D ECF5                       	smpsPSGAlterVol     $F5
0008968F 8F07                       	dc.b	nD1, $07
00089691 EC0B                       	smpsPSGAlterVol     $0B
00089693 8007                       	dc.b	nRst, $07
00089695 E102                       	smpsAlterNote       $02
00089697 0101                       	dc.b	$01, $01
00089699 E1FB                       	smpsAlterNote       $FB
0008969B 01                         	dc.b	$01
0008969C E1F8                       	smpsAlterNote       $F8
0008969E 01                         	dc.b	$01
0008969F E1FB                       	smpsAlterNote       $FB
000896A1 ECF5                       	smpsPSGAlterVol     $F5
000896A3 8E06                       	dc.b	nCs1, $06
000896A5 EC0B                       	smpsPSGAlterVol     $0B
000896A7 8004                       	dc.b	nRst, $04
000896A9 ECF5                       	smpsPSGAlterVol     $F5
000896AB 8E06                       	dc.b	nCs1, $06
000896AD EC04                       	smpsPSGAlterVol     $04
000896AF E701                       	dc.b	smpsNoAttack, $01
000896B1 EC07                       	smpsPSGAlterVol     $07
000896B3 8006                       	dc.b	nRst, $06
000896B5 E1FE                       	smpsAlterNote       $FE
000896B7 01                         	dc.b	$01
000896B8 E102                       	smpsAlterNote       $02
000896BA 01                         	dc.b	$01
000896BB E1FE                       	smpsAlterNote       $FE
000896BD 01                         	dc.b	$01
000896BE E1F9                       	smpsAlterNote       $F9
000896C0 01                         	dc.b	$01
000896C1 E1FC                       	smpsAlterNote       $FC
000896C3 ECF5                       	smpsPSGAlterVol     $F5
000896C5 8F06                       	dc.b	nD1, $06
000896C7 EC04                       	smpsPSGAlterVol     $04
000896C9 E701                       	dc.b	smpsNoAttack, $01
000896CB EC07                       	smpsPSGAlterVol     $07
000896CD 8003                       	dc.b	nRst, $03
000896CF ECF5                       	smpsPSGAlterVol     $F5
000896D1 8F06                       	dc.b	nD1, $06
000896D3 EC04                       	smpsPSGAlterVol     $04
000896D5 E701                       	dc.b	smpsNoAttack, $01
000896D7 EC07                       	smpsPSGAlterVol     $07
000896D9 8006                       	dc.b	nRst, $06
000896DB E1FF                       	smpsAlterNote       $FF
000896DD 01                         	dc.b	$01
000896DE E103                       	smpsAlterNote       $03
000896E0 01                         	dc.b	$01
000896E1 E102                       	smpsAlterNote       $02
000896E3 01                         	dc.b	$01
000896E4 E1FB                       	smpsAlterNote       $FB
000896E6 01                         	dc.b	$01
000896E7 ECF5                       	smpsPSGAlterVol     $F5
000896E9 8E07                       	dc.b	nCs1, $07
000896EB EC0B                       	smpsPSGAlterVol     $0B
000896ED 8004                       	dc.b	nRst, $04
000896EF ECF5                       	smpsPSGAlterVol     $F5
000896F1 8E06                       	dc.b	nCs1, $06
000896F3 EC0B                       	smpsPSGAlterVol     $0B
000896F5 8007                       	dc.b	nRst, $07
000896F7 E101                       	smpsAlterNote       $01
000896F9 0101                       	dc.b	$01, $01
000896FB E1FE                       	smpsAlterNote       $FE
000896FD 01                         	dc.b	$01
000896FE E1F9                       	smpsAlterNote       $F9
00089700 01                         	dc.b	$01
00089701 E1FC                       	smpsAlterNote       $FC
00089703 ECF5                       	smpsPSGAlterVol     $F5
00089705 8F06                       	dc.b	nD1, $06
00089707 EC04                       	smpsPSGAlterVol     $04
00089709 E701                       	dc.b	smpsNoAttack, $01
0008970B EC07                       	smpsPSGAlterVol     $07
0008970D 8003                       	dc.b	nRst, $03
0008970F ECF5                       	smpsPSGAlterVol     $F5
00089711 8F06                       	dc.b	nD1, $06
00089713 EC04                       	smpsPSGAlterVol     $04
00089715 E701                       	dc.b	smpsNoAttack, $01
00089717 EC07                       	smpsPSGAlterVol     $07
00089719 8006                       	dc.b	nRst, $06
0008971B E1FF                       	smpsAlterNote       $FF
0008971D 01                         	dc.b	$01
0008971E E103                       	smpsAlterNote       $03
00089720 01                         	dc.b	$01
00089721 E1FF                       	smpsAlterNote       $FF
00089723 01                         	dc.b	$01
00089724 E1FB                       	smpsAlterNote       $FB
00089726 01                         	dc.b	$01
00089727 ECF5                       	smpsPSGAlterVol     $F5
00089729 8E06                       	dc.b	nCs1, $06
0008972B EC04                       	smpsPSGAlterVol     $04
0008972D E701                       	dc.b	smpsNoAttack, $01
0008972F EC07                       	smpsPSGAlterVol     $07
00089731 8003                       	dc.b	nRst, $03
00089733 ECF5                       	smpsPSGAlterVol     $F5
00089735 8E07                       	dc.b	nCs1, $07
00089737 E1FF                       	smpsAlterNote       $FF
00089739 9B06                       	dc.b	nD2, $06
0008973B EC04                       	smpsPSGAlterVol     $04
0008973D E701                       	dc.b	smpsNoAttack, $01
0008973F ECFC                       	smpsPSGAlterVol     $FC
00089741 9B03                       	dc.b	nD2, $03
00089743 EC04                       	smpsPSGAlterVol     $04
00089745 E701                       	dc.b	smpsNoAttack, $01
00089747 ECFC                       	smpsPSGAlterVol     $FC
00089749 9B02                       	dc.b	nD2, $02
0008974B EC04                       	smpsPSGAlterVol     $04
0008974D E701                       	dc.b	smpsNoAttack, $01
0008974F ECFC                       	smpsPSGAlterVol     $FC
00089751 E1FE                       	smpsAlterNote       $FE
00089753 9A03                       	dc.b	nCs2, $03
00089755 EC0B                       	smpsPSGAlterVol     $0B
00089757 800A                       	dc.b	nRst, $0A
00089759 E102                       	smpsAlterNote       $02
0008975B 01                         	dc.b	$01
0008975C E10A                       	smpsAlterNote       $0A
0008975E 01                         	dc.b	$01
0008975F E102                       	smpsAlterNote       $02
00089761 01                         	dc.b	$01
00089762 E1F7                       	smpsAlterNote       $F7
00089764 01                         	dc.b	$01
00089765 E10A                       	smpsAlterNote       $0A
00089767 01                         	dc.b	$01
00089768 E1FC                       	smpsAlterNote       $FC
0008976A 01                         	dc.b	$01
0008976B E108                       	smpsAlterNote       $08
0008976D 0101                       	dc.b	$01, $01
0008976F E102                       	smpsAlterNote       $02
00089771 01                         	dc.b	$01
00089772 E1F7                       	smpsAlterNote       $F7
00089774 0101                       	dc.b	$01, $01
00089776 E1FC                       	smpsAlterNote       $FC
00089778 ECF5                       	smpsPSGAlterVol     $F5
0008977A 8F06                       	dc.b	nD1, $06
0008977C EC04                       	smpsPSGAlterVol     $04
0008977E E701                       	dc.b	smpsNoAttack, $01
00089780 EC07                       	smpsPSGAlterVol     $07
00089782 8003                       	dc.b	nRst, $03
00089784 ECF5                       	smpsPSGAlterVol     $F5
00089786 8F06                       	dc.b	nD1, $06
00089788 EC04                       	smpsPSGAlterVol     $04
0008978A E701                       	dc.b	smpsNoAttack, $01
0008978C EC07                       	smpsPSGAlterVol     $07
0008978E 8006                       	dc.b	nRst, $06
00089790 E1FF                       	smpsAlterNote       $FF
00089792 01                         	dc.b	$01
00089793 E102                       	smpsAlterNote       $02
00089795 01                         	dc.b	$01
00089796 E101                       	smpsAlterNote       $01
00089798 01                         	dc.b	$01
00089799 E1FC                       	smpsAlterNote       $FC
0008979B 01                         	dc.b	$01
0008979C ECF5                       	smpsPSGAlterVol     $F5
0008979E 9007                       	dc.b	nEb1, $07
000897A0 EC0B                       	smpsPSGAlterVol     $0B
000897A2 8004                       	dc.b	nRst, $04
000897A4 ECF5                       	smpsPSGAlterVol     $F5
000897A6 9006                       	dc.b	nEb1, $06
000897A8 EC0B                       	smpsPSGAlterVol     $0B
000897AA 8007                       	dc.b	nRst, $07
000897AC E103                       	smpsAlterNote       $03
000897AE 0101                       	dc.b	$01, $01
000897B0 E1FF                       	smpsAlterNote       $FF
000897B2 01                         	dc.b	$01
000897B3 E1F9                       	smpsAlterNote       $F9
000897B5 01                         	dc.b	$01
000897B6 E1FC                       	smpsAlterNote       $FC
000897B8 ECF5                       	smpsPSGAlterVol     $F5
000897BA 8F06                       	dc.b	nD1, $06
000897BC EC04                       	smpsPSGAlterVol     $04
000897BE E701                       	dc.b	smpsNoAttack, $01
000897C0 EC07                       	smpsPSGAlterVol     $07
000897C2 8003                       	dc.b	nRst, $03
000897C4 ECF5                       	smpsPSGAlterVol     $F5
000897C6 8F06                       	dc.b	nD1, $06
000897C8 EC04                       	smpsPSGAlterVol     $04
000897CA E701                       	dc.b	smpsNoAttack, $01
000897CC EC07                       	smpsPSGAlterVol     $07
000897CE 8006                       	dc.b	nRst, $06
000897D0 E1FF                       	smpsAlterNote       $FF
000897D2 01                         	dc.b	$01
000897D3 E103                       	smpsAlterNote       $03
000897D5 01                         	dc.b	$01
000897D6 E1FF                       	smpsAlterNote       $FF
000897D8 01                         	dc.b	$01
000897D9 E1F9                       	smpsAlterNote       $F9
000897DB 01                         	dc.b	$01
000897DC E1FC                       	smpsAlterNote       $FC
000897DE ECF5                       	smpsPSGAlterVol     $F5
000897E0 8F06                       	dc.b	nD1, $06
000897E2 EC04                       	smpsPSGAlterVol     $04
000897E4 E701                       	dc.b	smpsNoAttack, $01
000897E6 EC07                       	smpsPSGAlterVol     $07
000897E8 8003                       	dc.b	nRst, $03
000897EA ECF5                       	smpsPSGAlterVol     $F5
000897EC 8F07                       	dc.b	nD1, $07
000897EE EC0B                       	smpsPSGAlterVol     $0B
000897F0 8006                       	dc.b	nRst, $06
000897F2 E1FF                       	smpsAlterNote       $FF
000897F4 01                         	dc.b	$01
000897F5 E102                       	smpsAlterNote       $02
000897F7 0101                       	dc.b	$01, $01
000897F9 E1FC                       	smpsAlterNote       $FC
000897FB 01                         	dc.b	$01
000897FC ECF5                       	smpsPSGAlterVol     $F5
000897FE 8F07                       	dc.b	nD1, $07
00089800 EC0B                       	smpsPSGAlterVol     $0B
00089802 8004                       	dc.b	nRst, $04
00089804 ECF5                       	smpsPSGAlterVol     $F5
00089806 8F06                       	dc.b	nD1, $06
00089808 EC04                       	smpsPSGAlterVol     $04
0008980A E701                       	dc.b	smpsNoAttack, $01
0008980C EC07                       	smpsPSGAlterVol     $07
0008980E 8006                       	dc.b	nRst, $06
00089810 E101                       	smpsAlterNote       $01
00089812 01                         	dc.b	$01
00089813 E102                       	smpsAlterNote       $02
00089815 01                         	dc.b	$01
00089816 E1FF                       	smpsAlterNote       $FF
00089818 01                         	dc.b	$01
00089819 E1F9                       	smpsAlterNote       $F9
0008981B 01                         	dc.b	$01
0008981C E1FC                       	smpsAlterNote       $FC
0008981E ECF5                       	smpsPSGAlterVol     $F5
00089820 9006                       	dc.b	nEb1, $06
00089822 EC04                       	smpsPSGAlterVol     $04
00089824 E701                       	dc.b	smpsNoAttack, $01
00089826 EC07                       	smpsPSGAlterVol     $07
00089828 8003                       	dc.b	nRst, $03
0008982A ECF5                       	smpsPSGAlterVol     $F5
0008982C 9006                       	dc.b	nEb1, $06
0008982E EC04                       	smpsPSGAlterVol     $04
00089830 E701                       	dc.b	smpsNoAttack, $01
00089832 EC07                       	smpsPSGAlterVol     $07
00089834 8006                       	dc.b	nRst, $06
00089836 E100                       	smpsAlterNote       $00
00089838 01                         	dc.b	$01
00089839 E102                       	smpsAlterNote       $02
0008983B 01                         	dc.b	$01
0008983C E100                       	smpsAlterNote       $00
0008983E 01                         	dc.b	$01
0008983F E1FF                       	smpsAlterNote       $FF
00089841 01                         	dc.b	$01
00089842 ECF5                       	smpsPSGAlterVol     $F5
00089844 9B06                       	dc.b	nD2, $06
00089846 EC04                       	smpsPSGAlterVol     $04
00089848 E701                       	dc.b	smpsNoAttack, $01
0008984A EC07                       	smpsPSGAlterVol     $07
0008984C 8003                       	dc.b	nRst, $03
0008984E ECF5                       	smpsPSGAlterVol     $F5
00089850 9B07                       	dc.b	nD2, $07
00089852 EC0B                       	smpsPSGAlterVol     $0B
00089854 8007                       	dc.b	nRst, $07
00089856 E105                       	smpsAlterNote       $05
00089858 0101                       	dc.b	$01, $01
0008985A E1FF                       	smpsAlterNote       $FF
0008985C 01                         	dc.b	$01
0008985D E1FC                       	smpsAlterNote       $FC
0008985F 01                         	dc.b	$01
00089860 E1FF                       	smpsAlterNote       $FF
00089862 ECF5                       	smpsPSGAlterVol     $F5
00089864 9B06                       	dc.b	nD2, $06
00089866 EC0B                       	smpsPSGAlterVol     $0B
00089868 8004                       	dc.b	nRst, $04
0008986A ECF5                       	smpsPSGAlterVol     $F5
0008986C 9B06                       	dc.b	nD2, $06
0008986E EC04                       	smpsPSGAlterVol     $04
00089870 E701                       	dc.b	smpsNoAttack, $01
00089872 EC07                       	smpsPSGAlterVol     $07
00089874 8006                       	dc.b	nRst, $06
00089876 E102                       	smpsAlterNote       $02
00089878 01                         	dc.b	$01
00089879 E106                       	smpsAlterNote       $06
0008987B 01                         	dc.b	$01
0008987C E102                       	smpsAlterNote       $02
0008987E 01                         	dc.b	$01
0008987F E1FC                       	smpsAlterNote       $FC
00089881 01                         	dc.b	$01
00089882 E1FF                       	smpsAlterNote       $FF
00089884 ECF5                       	smpsPSGAlterVol     $F5
00089886 9B06                       	dc.b	nD2, $06
00089888 EC04                       	smpsPSGAlterVol     $04
0008988A E701                       	dc.b	smpsNoAttack, $01
0008988C EC07                       	smpsPSGAlterVol     $07
0008988E 8003                       	dc.b	nRst, $03
00089890 ECF5                       	smpsPSGAlterVol     $F5
00089892 9B07                       	dc.b	nD2, $07
00089894 EC0B                       	smpsPSGAlterVol     $0B
00089896 8006                       	dc.b	nRst, $06
00089898 E102                       	smpsAlterNote       $02
0008989A 01                         	dc.b	$01
0008989B E105                       	smpsAlterNote       $05
0008989D 0101                       	dc.b	$01, $01
0008989F E1FF                       	smpsAlterNote       $FF
000898A1 01                         	dc.b	$01
000898A2 ECF5                       	smpsPSGAlterVol     $F5
000898A4 9B07                       	dc.b	nD2, $07
000898A6 EC0B                       	smpsPSGAlterVol     $0B
000898A8 8004                       	dc.b	nRst, $04
000898AA ECF5                       	smpsPSGAlterVol     $F5
000898AC 9B06                       	dc.b	nD2, $06
000898AE EC04                       	smpsPSGAlterVol     $04
000898B0 E701                       	dc.b	smpsNoAttack, $01
000898B2 EC07                       	smpsPSGAlterVol     $07
000898B4 8006                       	dc.b	nRst, $06
000898B6 E105                       	smpsAlterNote       $05
000898B8 0101                       	dc.b	$01, $01
000898BA E102                       	smpsAlterNote       $02
000898BC 01                         	dc.b	$01
000898BD E1FC                       	smpsAlterNote       $FC
000898BF 01                         	dc.b	$01
000898C0 E1FF                       	smpsAlterNote       $FF
000898C2 ECF5                       	smpsPSGAlterVol     $F5
000898C4 9B06                       	dc.b	nD2, $06
000898C6 EC04                       	smpsPSGAlterVol     $04
000898C8 E701                       	dc.b	smpsNoAttack, $01
000898CA EC07                       	smpsPSGAlterVol     $07
000898CC 8003                       	dc.b	nRst, $03
000898CE ECF5                       	smpsPSGAlterVol     $F5
000898D0 9B06                       	dc.b	nD2, $06
000898D2 EC04                       	smpsPSGAlterVol     $04
000898D4 E701                       	dc.b	smpsNoAttack, $01
000898D6 EC07                       	smpsPSGAlterVol     $07
000898D8 8006                       	dc.b	nRst, $06
000898DA E102                       	smpsAlterNote       $02
000898DC 01                         	dc.b	$01
000898DD E106                       	smpsAlterNote       $06
000898DF 01                         	dc.b	$01
000898E0 E102                       	smpsAlterNote       $02
000898E2 01                         	dc.b	$01
000898E3 E1FF                       	smpsAlterNote       $FF
000898E5 01                         	dc.b	$01
000898E6 ECF5                       	smpsPSGAlterVol     $F5
000898E8 9B06                       	dc.b	nD2, $06
000898EA EC04                       	smpsPSGAlterVol     $04
000898EC E701                       	dc.b	smpsNoAttack, $01
000898EE EC07                       	smpsPSGAlterVol     $07
000898F0 8003                       	dc.b	nRst, $03
000898F2 ECF5                       	smpsPSGAlterVol     $F5
000898F4 9B07                       	dc.b	nD2, $07
000898F6 EC0B                       	smpsPSGAlterVol     $0B
000898F8 8007                       	dc.b	nRst, $07
000898FA E107                       	smpsAlterNote       $07
000898FC 0101                       	dc.b	$01, $01
000898FE E1FE                       	smpsAlterNote       $FE
00089900 01                         	dc.b	$01
00089901 E1FA                       	smpsAlterNote       $FA
00089903 0101                       	dc.b	$01, $01
00089905 E103                       	smpsAlterNote       $03
00089907 01                         	dc.b	$01
00089908 E109                       	smpsAlterNote       $09
0008990A 01                         	dc.b	$01
0008990B E107                       	smpsAlterNote       $07
0008990D 01                         	dc.b	$01
0008990E E1FE                       	smpsAlterNote       $FE
00089910 01                         	dc.b	$01
00089911 E108                       	smpsAlterNote       $08
00089913 01                         	dc.b	$01
00089914 E1FD                       	smpsAlterNote       $FD
00089916 ECF5                       	smpsPSGAlterVol     $F5
00089918 940E                       	dc.b	nG1, $0E
0008991A E103                       	smpsAlterNote       $03
0008991C EC0B                       	smpsPSGAlterVol     $0B
0008991E 8001 01                    	dc.b	nRst, $01, $01
00089921 E1FD                       	smpsAlterNote       $FD
00089923 01                         	dc.b	$01
00089924 E1FB                       	smpsAlterNote       $FB
00089926 0101                       	dc.b	$01, $01
00089928 E100                       	smpsAlterNote       $00
0008992A 01                         	dc.b	$01
0008992B E103                       	smpsAlterNote       $03
0008992D 01                         	dc.b	$01
0008992E E100                       	smpsAlterNote       $00
00089930 01                         	dc.b	$01
00089931 E1FD                       	smpsAlterNote       $FD
00089933 01                         	dc.b	$01
00089934 E1FA                       	smpsAlterNote       $FA
00089936 01                         	dc.b	$01
00089937 E1FD                       	smpsAlterNote       $FD
00089939 01                         	dc.b	$01
0008993A E103                       	smpsAlterNote       $03
0008993C 0101                       	dc.b	$01, $01
0008993E E100                       	smpsAlterNote       $00
00089940 01                         	dc.b	$01
00089941 E1FE                       	smpsAlterNote       $FE
00089943 ECF5                       	smpsPSGAlterVol     $F5
00089945 960D                       	dc.b	nA1, $0D
00089947 E104                       	smpsAlterNote       $04
00089949 EC0B                       	smpsPSGAlterVol     $0B
0008994B 8001 01                    	dc.b	nRst, $01, $01
0008994E E101                       	smpsAlterNote       $01
00089950 01                         	dc.b	$01
00089951 E1FB                       	smpsAlterNote       $FB
00089953 0101                       	dc.b	$01, $01
00089955 E1FE                       	smpsAlterNote       $FE
00089957 01                         	dc.b	$01
00089958 E104                       	smpsAlterNote       $04
0008995A 0101                       	dc.b	$01, $01
0008995C E1FE                       	smpsAlterNote       $FE
0008995E 01                         	dc.b	$01
0008995F E1FB                       	smpsAlterNote       $FB
00089961 0101                       	dc.b	$01, $01
00089963 E101                       	smpsAlterNote       $01
00089965 01                         	dc.b	$01
00089966 E104                       	smpsAlterNote       $04
00089968 0101                       	dc.b	$01, $01
0008996A E1FE                       	smpsAlterNote       $FE
0008996C ECF5                       	smpsPSGAlterVol     $F5
0008996E 970D                       	dc.b	nBb1, $0D
00089970 E101                       	smpsAlterNote       $01
00089972 EC04                       	smpsPSGAlterVol     $04
00089974 E701                       	dc.b	smpsNoAttack, $01
00089976 EC07                       	smpsPSGAlterVol     $07
00089978 E104                       	smpsAlterNote       $04
0008997A 8001                       	dc.b	nRst, $01
0008997C E103                       	smpsAlterNote       $03
0008997E 01                         	dc.b	$01
0008997F E1FE                       	smpsAlterNote       $FE
00089981 01                         	dc.b	$01
00089982 E1FA                       	smpsAlterNote       $FA
00089984 01                         	dc.b	$01
00089985 E1FE                       	smpsAlterNote       $FE
00089987 01                         	dc.b	$01
00089988 E101                       	smpsAlterNote       $01
0008998A 01                         	dc.b	$01
0008998B E104                       	smpsAlterNote       $04
0008998D 01                         	dc.b	$01
0008998E E101                       	smpsAlterNote       $01
00089990 01                         	dc.b	$01
00089991 E1FB                       	smpsAlterNote       $FB
00089993 01                         	dc.b	$01
00089994 E1FA                       	smpsAlterNote       $FA
00089996 01                         	dc.b	$01
00089997 E1FE                       	smpsAlterNote       $FE
00089999 01                         	dc.b	$01
0008999A E103                       	smpsAlterNote       $03
0008999C 0101                       	dc.b	$01, $01
0008999E E101                       	smpsAlterNote       $01
000899A0 01                         	dc.b	$01
000899A1 E1FE                       	smpsAlterNote       $FE
000899A3 ECF5                       	smpsPSGAlterVol     $F5
000899A5 990D                       	dc.b	nC2, $0D
000899A7 E104                       	smpsAlterNote       $04
000899A9 EC0B                       	smpsPSGAlterVol     $0B
000899AB 8001 01                    	dc.b	nRst, $01, $01
000899AE E102                       	smpsAlterNote       $02
000899B0 01                         	dc.b	$01
000899B1 E1FC                       	smpsAlterNote       $FC
000899B3 0101                       	dc.b	$01, $01
000899B5 E102                       	smpsAlterNote       $02
000899B7 01                         	dc.b	$01
000899B8 E104                       	smpsAlterNote       $04
000899BA 01                         	dc.b	$01
000899BB E1FF                       	smpsAlterNote       $FF
000899BD ECF5                       	smpsPSGAlterVol     $F5
000899BF 9B06                       	dc.b	nD2, $06
000899C1 EC04                       	smpsPSGAlterVol     $04
000899C3 E701                       	dc.b	smpsNoAttack, $01
000899C5 EC07                       	smpsPSGAlterVol     $07
000899C7 8003                       	dc.b	nRst, $03
000899C9 ECF5                       	smpsPSGAlterVol     $F5
000899CB 9B07                       	dc.b	nD2, $07
000899CD EC0B                       	smpsPSGAlterVol     $0B
000899CF 8006                       	dc.b	nRst, $06
000899D1 E101                       	smpsAlterNote       $01
000899D3 01                         	dc.b	$01
000899D4 E104                       	smpsAlterNote       $04
000899D6 0101                       	dc.b	$01, $01
000899D8 E1FE                       	smpsAlterNote       $FE
000899DA 01                         	dc.b	$01
000899DB E1FC                       	smpsAlterNote       $FC
000899DD 01                         	dc.b	$01
000899DE E1FE                       	smpsAlterNote       $FE
000899E0 ECF5                       	smpsPSGAlterVol     $F5
000899E2 9C06                       	dc.b	nEb2, $06
000899E4 EC0B                       	smpsPSGAlterVol     $0B
000899E6 8004                       	dc.b	nRst, $04
000899E8 ECF5                       	smpsPSGAlterVol     $F5
000899EA 9C06                       	dc.b	nEb2, $06
000899EC EC04                       	smpsPSGAlterVol     $04
000899EE E701                       	dc.b	smpsNoAttack, $01
000899F0 EC07                       	smpsPSGAlterVol     $07
000899F2 8006                       	dc.b	nRst, $06
000899F4 E105                       	smpsAlterNote       $05
000899F6 01                         	dc.b	$01
000899F7 E106                       	smpsAlterNote       $06
000899F9 01                         	dc.b	$01
000899FA E102                       	smpsAlterNote       $02
000899FC 01                         	dc.b	$01
000899FD E1FB                       	smpsAlterNote       $FB
000899FF 01                         	dc.b	$01
00089A00 E1FF                       	smpsAlterNote       $FF
00089A02 ECF5                       	smpsPSGAlterVol     $F5
00089A04 9B06                       	dc.b	nD2, $06
00089A06 EC04                       	smpsPSGAlterVol     $04
00089A08 E701                       	dc.b	smpsNoAttack, $01
00089A0A EC07                       	smpsPSGAlterVol     $07
00089A0C 8003                       	dc.b	nRst, $03
00089A0E ECF5                       	smpsPSGAlterVol     $F5
00089A10 9B06                       	dc.b	nD2, $06
00089A12 EC04                       	smpsPSGAlterVol     $04
00089A14 E701                       	dc.b	smpsNoAttack, $01
00089A16 EC07                       	smpsPSGAlterVol     $07
00089A18 8006                       	dc.b	nRst, $06
00089A1A E101                       	smpsAlterNote       $01
00089A1C 01                         	dc.b	$01
00089A1D E105                       	smpsAlterNote       $05
00089A1F 01                         	dc.b	$01
00089A20 E104                       	smpsAlterNote       $04
00089A22 01                         	dc.b	$01
00089A23 E1FE                       	smpsAlterNote       $FE
00089A25 01                         	dc.b	$01
00089A26 ECF5                       	smpsPSGAlterVol     $F5
00089A28 9C07                       	dc.b	nEb2, $07
00089A2A EC0B                       	smpsPSGAlterVol     $0B
00089A2C 8004                       	dc.b	nRst, $04
00089A2E ECF5                       	smpsPSGAlterVol     $F5
00089A30 9C06                       	dc.b	nEb2, $06
00089A32 EC0B                       	smpsPSGAlterVol     $0B
00089A34 8007                       	dc.b	nRst, $07
00089A36 E105                       	smpsAlterNote       $05
00089A38 0101                       	dc.b	$01, $01
00089A3A E102                       	smpsAlterNote       $02
00089A3C 01                         	dc.b	$01
00089A3D E1FB                       	smpsAlterNote       $FB
00089A3F 01                         	dc.b	$01
00089A40 E1FF                       	smpsAlterNote       $FF
00089A42 ECF5                       	smpsPSGAlterVol     $F5
00089A44 9B06                       	dc.b	nD2, $06
00089A46 EC04                       	smpsPSGAlterVol     $04
00089A48 E701                       	dc.b	smpsNoAttack, $01
00089A4A EC07                       	smpsPSGAlterVol     $07
00089A4C 8003                       	dc.b	nRst, $03
00089A4E ECF5                       	smpsPSGAlterVol     $F5
00089A50 9B06                       	dc.b	nD2, $06
00089A52 EC04                       	smpsPSGAlterVol     $04
00089A54 E701                       	dc.b	smpsNoAttack, $01
00089A56 EC07                       	smpsPSGAlterVol     $07
00089A58 8006                       	dc.b	nRst, $06
00089A5A E101                       	smpsAlterNote       $01
00089A5C 01                         	dc.b	$01
00089A5D E105                       	smpsAlterNote       $05
00089A5F 01                         	dc.b	$01
00089A60 E101                       	smpsAlterNote       $01
00089A62 01                         	dc.b	$01
00089A63 E1FC                       	smpsAlterNote       $FC
00089A65 01                         	dc.b	$01
00089A66 E1FE                       	smpsAlterNote       $FE
00089A68 ECF5                       	smpsPSGAlterVol     $F5
00089A6A 9C06                       	dc.b	nEb2, $06
00089A6C EC04                       	smpsPSGAlterVol     $04
00089A6E E701                       	dc.b	smpsNoAttack, $01
00089A70 EC07                       	smpsPSGAlterVol     $07
00089A72 8003                       	dc.b	nRst, $03
00089A74 ECF5                       	smpsPSGAlterVol     $F5
00089A76 9C07                       	dc.b	nEb2, $07
00089A78 EC0B                       	smpsPSGAlterVol     $0B
00089A7A 8006                       	dc.b	nRst, $06
00089A7C E102                       	smpsAlterNote       $02
00089A7E 01                         	dc.b	$01
00089A7F E105                       	smpsAlterNote       $05
00089A81 0101                       	dc.b	$01, $01
00089A83 E1FF                       	smpsAlterNote       $FF
00089A85 01                         	dc.b	$01
00089A86 ECF5                       	smpsPSGAlterVol     $F5
00089A88 9B07                       	dc.b	nD2, $07
00089A8A EC0B                       	smpsPSGAlterVol     $0B
00089A8C 8004                       	dc.b	nRst, $04
00089A8E ECF5                       	smpsPSGAlterVol     $F5
00089A90 9B06                       	dc.b	nD2, $06
00089A92 EC04                       	smpsPSGAlterVol     $04
00089A94 E701                       	dc.b	smpsNoAttack, $01
00089A96 EC07                       	smpsPSGAlterVol     $07
00089A98 8002                       	dc.b	nRst, $02
00089A9A E1FC                       	smpsAlterNote       $FC
00089A9C ECF5                       	smpsPSGAlterVol     $F5
00089A9E 9006                       	dc.b	nEb1, $06
00089AA0 EC04                       	smpsPSGAlterVol     $04
00089AA2 E701                       	dc.b	smpsNoAttack, $01
00089AA4 ECFC                       	smpsPSGAlterVol     $FC
00089AA6 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00089AAA EC04                       	smpsPSGAlterVol     $04
00089AAC E701                       	dc.b	smpsNoAttack, $01
00089AAE E1FD                       	smpsAlterNote       $FD
00089AB0 ECFC                       	smpsPSGAlterVol     $FC
00089AB2 9402                       	dc.b	nG1, $02
00089AB4 EC04                       	smpsPSGAlterVol     $04
00089AB6 E701                       	dc.b	smpsNoAttack, $01
00089AB8 E1FE                       	smpsAlterNote       $FE
00089ABA ECFC                       	smpsPSGAlterVol     $FC
00089ABC 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00089AC0 EC04                       	smpsPSGAlterVol     $04
00089AC2 E701                       	dc.b	smpsNoAttack, $01
00089AC4 EC07                       	smpsPSGAlterVol     $07
00089AC6 8008                       	dc.b	nRst, $08
00089AC8 F6F4 F3                    	smpsJump            music84_Jump06
00089ACB                            
00089ACB                            ; PSG3 Data
00089ACB                            music84_PSG3:
00089ACB F500                       	smpsPSGvoice        $00
00089ACD E1FF                       	smpsAlterNote       $FF
00089ACF EC0F                       	smpsPSGAlterVol     $0F
00089AD1 803A                       	dc.b	nRst, $3A
00089AD3                            
00089AD3                            music84_Jump05:
00089AD3 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00089ADF 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00089AE9 F6FF E8                    	smpsJump            music84_Jump05
00089AEC                            
00089AEC                            ; DAC Data
00089AEC                            music84_DAC:
00089AEC E0C0                       	smpsPan             panCenter, $00
00089AEE 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00089AFA 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00089B06 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00089B12 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00089B1E 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00089B2A 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00089B36 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00089B42 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00089B4E 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00089B5A 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00089B66 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00089B72 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00089B7E 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00089B8A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00089B96 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00089BA2 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00089BAE 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00089BBA 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00089BC6 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00089BD2 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00089BDE 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00089BEA 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00089BF6 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00089C02 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00089C0E 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00089C1A 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00089C26 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00089C32 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00089C3E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00089C4A 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00089C56 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00089C62 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00089C6E 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00089C7A 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00089C86 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00089C92 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00089C9E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00089CAA 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00089CB6 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00089CC2 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00089CCE 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00089CDA 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00089CE6 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00089CF2 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00089CFE 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00089D0A 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00089D16 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00089D22 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00089D2E 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00089D3A 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00089D46 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00089D52 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00089D5E 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00089D6A 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00089D76 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00089D82 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00089D8E 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00089D9A 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00089DA6 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00089DB2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00089DBE 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00089DCA 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00089DD6 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00089DE2 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00089DEE 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00089DFA 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00089E06 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00089E12 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00089E1E 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00089E2A 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00089E36 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00089E42 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00089E4E 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00089E5A 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00089E66 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00089E72 E0C0                       	smpsPan             panCenter, $00
00089E74 F2                         	smpsStop
00089E75                            
00089E75                            music84_Voices:
00089E75                            ;	Voice $00
00089E75                            ;	$3D
00089E75                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00089E75                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00089E75                            	smpsVcAlgorithm     $05
00089E75                            	smpsVcFeedback      $07
00089E75                            	smpsVcUnusedBits    $00
00089E75                            	smpsVcDetune        $05, $04, $03, $04
00089E75                            	smpsVcCoarseFreq    $01, $01, $01, $01
00089E75                            	smpsVcRateScale     $00, $00, $00, $00
00089E75                            	smpsVcAttackRate    $11, $11, $11, $11
00089E75                            	smpsVcAmpMod        $00, $00, $00, $00
00089E75                            	smpsVcDecayRate1    $00, $00, $00, $0A
00089E75                            	smpsVcDecayRate2    $00, $00, $00, $0B
00089E75                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00089E75                            	smpsVcReleaseRate   $08, $08, $08, $07
00089E75 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00089E8E                            
00089E8E                            ;	Voice $01
00089E8E                            ;	$04
00089E8E                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00089E8E                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00089E8E                            	smpsVcAlgorithm     $04
00089E8E                            	smpsVcFeedback      $00
00089E8E                            	smpsVcUnusedBits    $00
00089E8E                            	smpsVcDetune        $04, $03, $04, $05
00089E8E                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00089E8E                            	smpsVcRateScale     $00, $01, $00, $01
00089E8E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00089E8E                            	smpsVcAmpMod        $00, $00, $00, $00
00089E8E                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00089E8E                            	smpsVcDecayRate2    $05, $00, $05, $00
00089E8E                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00089E8E                            	smpsVcReleaseRate   $06, $06, $06, $06
00089E8E 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00089EA7                            
00089EA7                            ;	Voice $02
00089EA7                            ;	$30
00089EA7                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00089EA7                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00089EA7                            	smpsVcAlgorithm     $00
00089EA7                            	smpsVcFeedback      $06
00089EA7                            	smpsVcUnusedBits    $00
00089EA7                            	smpsVcDetune        $04, $02, $00, $06
00089EA7                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00089EA7                            	smpsVcRateScale     $00, $00, $00, $00
00089EA7                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00089EA7                            	smpsVcAmpMod        $00, $00, $00, $00
00089EA7                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00089EA7                            	smpsVcDecayRate2    $01, $01, $01, $01
00089EA7                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00089EA7                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00089EA7 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00089EC0                            
00089EC0                            ;	Voice $03
00089EC0                            ;	$3A
00089EC0                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00089EC0                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00089EC0                            	smpsVcAlgorithm     $02
00089EC0                            	smpsVcFeedback      $07
00089EC0                            	smpsVcUnusedBits    $00
00089EC0                            	smpsVcDetune        $04, $06, $02, $00
00089EC0                            	smpsVcCoarseFreq    $01, $01, $01, $01
00089EC0                            	smpsVcRateScale     $00, $00, $00, $00
00089EC0                            	smpsVcAttackRate    $18, $19, $14, $14
00089EC0                            	smpsVcAmpMod        $00, $00, $00, $00
00089EC0                            	smpsVcDecayRate1    $09, $0D, $09, $09
00089EC0                            	smpsVcDecayRate2    $00, $00, $00, $00
00089EC0                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00089EC0                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00089EC0 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00089ED9                            
00089ED9                            ;	Voice $04
00089ED9                            ;	$3C
00089ED9                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00089ED9                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00089ED9                            	smpsVcAlgorithm     $04
00089ED9                            	smpsVcFeedback      $07
00089ED9                            	smpsVcUnusedBits    $00
00089ED9                            	smpsVcDetune        $07, $00, $00, $03
00089ED9                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00089ED9                            	smpsVcRateScale     $00, $00, $00, $00
00089ED9                            	smpsVcAttackRate    $10, $1F, $10, $1F
00089ED9                            	smpsVcAmpMod        $00, $00, $00, $00
00089ED9                            	smpsVcDecayRate1    $00, $00, $00, $00
00089ED9                            	smpsVcDecayRate2    $00, $00, $00, $00
00089ED9                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00089ED9                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00089ED9 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00089EF2                            
00089EF2                            ;	Voice $05
00089EF2                            ;	$38
00089EF2                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00089EF2                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00089EF2                            	smpsVcAlgorithm     $00
00089EF2                            	smpsVcFeedback      $07
00089EF2                            	smpsVcUnusedBits    $00
00089EF2                            	smpsVcDetune        $04, $06, $02, $00
00089EF2                            	smpsVcCoarseFreq    $01, $01, $01, $00
00089EF2                            	smpsVcRateScale     $00, $00, $00, $00
00089EF2                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00089EF2                            	smpsVcAmpMod        $00, $00, $00, $00
00089EF2                            	smpsVcDecayRate1    $00, $03, $00, $17
00089EF2                            	smpsVcDecayRate2    $00, $08, $08, $0B
00089EF2                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00089EF2                            	smpsVcReleaseRate   $08, $05, $05, $05
00089EF2 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00089F0B                            
00089F0B                            
00089F0C 00                         		even
00089F0C                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0008E11C                            		even
0008E11C                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00091C74 00                         		even
00091C74                            Music87:	include	sound\music87.asm; Invincibility
00091C74                            triple_Header:
00091C74 =00000001                  smpsHeaderStartSong = 1
00091C74 0000                       	smpsHeaderVoice     triple_Voices
00091C76 0501                       	smpsHeaderChan      $05, $01
00091C78 0200                       	smpsHeaderTempo     $02, $00
00091C7A                            
00091C7E 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00091C82 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00091C86 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00091C8A 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00091C8E 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00091C94                            
00091C94                            ; DAC Data
00091C94                            triple_DAC:
00091C94 E0C0                       	smpsPan             panCenter, $00
00091C96 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00091C9C                            
00091C9C                            triple_Loop01:
00091C9C 8282 82                    	dc.b	dSnare, dSnare, dSnare
00091C9F                            
00091C9F                            triple_Loop00:
00091C9F 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00091CAB 06                         	dc.b	$06
00091CAC F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00091CB1 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00091CBD 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00091CC4 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00091CC9 0303 1B                    	dc.b	$03, $03, $1B
00091CCC E0C0                       	smpsPan             panCenter, $00
00091CCE F6FF C4                    	smpsJump triple_DAC
00091CD1                            
00091CD1                            ; FM1 Data
00091CD1                            triple_FM1:
00091CD1 E0C0                       	smpsPan             panCenter, $00
00091CD5 8018                       	dc.b	nRst, $18
00091CD7                            
00091CD7                            triple_Loop0B:
00091CD7 AC06 B8                    	dc.b	nG3, $06, nG4
00091CDA F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00091CDF                            
00091CDF                            triple_Loop0C:
00091CDF A7B3                       	dc.b	nD3, nD4
00091CE1 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00091CE6                            
00091CE6                            triple_Loop0D:
00091CE6 A9B5                       	dc.b	nE3, nE4
00091CE8 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00091CED A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00091CF5 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00091CFA A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00091D06 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00091D12 AD                         	dc.b	nAb3
00091D13 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00091D18 8018                       	dc.b	nRst, $18
00091D1A E0C0                       	smpsPan             panCenter, $00
00091D1E F6FF B1                    	smpsJump triple_FM1
00091D21                            
00091D21                            ; FM2 Data
00091D21                            triple_FM2:
00091D21 E0C0                       	smpsPan             panCenter, $00
00091D25 8018                       	dc.b	nRst, $18
00091D27                            
00091D27                            triple_Loop07:
00091D27 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00091D33 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00091D3F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00091D44 8003                       	dc.b	nRst, $03
00091D46                            
00091D46                            triple_Loop08:
00091D46 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00091D4C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00091D51 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00091D57                            
00091D57                            triple_Loop09:
00091D57 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00091D63 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00091D6F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00091D74 8003                       	dc.b	nRst, $03
00091D76                            
00091D76                            triple_Loop0A:
00091D76 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00091D7C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00091D81 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00091D87 E0C0                       	smpsPan             panCenter, $00
00091D8B F6FF 94                    	smpsJump triple_FM2
00091D8E                            
00091D8E                            ; FM3 Data
00091D8E                            triple_FM3:
00091D8E E0C0                       	smpsPan             panCenter, $00
00091D92 8018                       	dc.b	nRst, $18
00091D94                            
00091D94                            triple_Loop06:
00091D94 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00091D9B F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00091DA0 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00091DAC BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00091DB8 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00091DBB F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00091DC0 8018                       	dc.b	nRst, $18
00091DC2 E0C0                       	smpsPan             panCenter, $00
00091DC6 F6FF C6                    	smpsJump triple_FM3
00091DC9                            
00091DC9                            ; FM4 Data
00091DC9                            triple_FM4:
00091DC9 E103                       	smpsAlterNote       $03
00091DCD E0C0                       	smpsPan             panCenter, $00
00091DCF 8018                       	dc.b	nRst, $18
00091DD1                            
00091DD1                            triple_Loop02:
00091DD1 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00091DDD C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00091DE9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00091DEE 8003                       	dc.b	nRst, $03
00091DF0                            
00091DF0                            triple_Loop03:
00091DF0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00091DF6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00091DFB B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00091E01                            
00091E01                            triple_Loop04:
00091E01 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00091E0D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00091E19 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00091E1E 8003                       	dc.b	nRst, $03
00091E20                            
00091E20                            triple_Loop05:
00091E20 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00091E26 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00091E2B B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00091E31 E0C0                       	smpsPan             panCenter, $00
00091E33 F6FF 94                    	smpsJump triple_FM4
00091E36                            
00091E36                            ; PSG1 Data
00091E36                            triple_PSG1:
00091E36 8018                       	dc.b	nRst, $18
00091E38                            
00091E38                            triple_Loop0E:
00091E38 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00091E44 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00091E50 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00091E5C 9402 8004                  	dc.b	nG1, $02, nRst, $04
00091E60 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00091E65 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00091E71 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00091E7D 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00091E89 9402 8007                  	dc.b	nG1, $02, nRst, $07
00091E8D                            
00091E8D                            triple_Loop0F:
00091E8D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00091E93 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00091E98 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00091E9E                            
00091E9E                            triple_Loop10:
00091E9E A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00091EAA 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00091EB6 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00091EC2 9402 8004                  	dc.b	nG1, $02, nRst, $04
00091EC6 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00091ECB A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00091ED7 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00091EE3 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00091EEF 9402 8007                  	dc.b	nG1, $02, nRst, $07
00091EF3                            
00091EF3                            triple_Loop11:
00091EF3 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00091EF9 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00091EFE 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00091F04 F500                       	smpsPSGvoice        $00
00091F06 F6FF 2E                    	smpsJump triple_PSG1
00091F09                            
00091F09                            triple_Voices:
00091F09                            ;	Voice $00
00091F09                            ;	$3A
00091F09                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00091F09                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00091F09                            	smpsVcAlgorithm     $02
00091F09                            	smpsVcFeedback      $07
00091F09                            	smpsVcUnusedBits    $00
00091F09                            	smpsVcDetune        $00, $00, $00, $00
00091F09                            	smpsVcCoarseFreq    $01, $01, $07, $01
00091F09                            	smpsVcRateScale     $01, $02, $02, $02
00091F09                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00091F09                            	smpsVcAmpMod        $00, $00, $00, $00
00091F09                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00091F09                            	smpsVcDecayRate2    $00, $00, $00, $00
00091F09                            	smpsVcDecayLevel    $00, $01, $0F, $01
00091F09                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00091F09 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00091F22                            
00091F22                            ;	Voice $01
00091F22                            ;	$20
00091F22                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00091F22                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00091F22                            	smpsVcAlgorithm     $00
00091F22                            	smpsVcFeedback      $04
00091F22                            	smpsVcUnusedBits    $00
00091F22                            	smpsVcDetune        $00, $00, $03, $07
00091F22                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00091F22                            	smpsVcRateScale     $03, $03, $03, $02
00091F22                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00091F22                            	smpsVcAmpMod        $00, $00, $00, $00
00091F22                            	smpsVcDecayRate1    $04, $04, $0A, $10
00091F22                            	smpsVcDecayRate2    $08, $08, $08, $0F
00091F22                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00091F22                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00091F22 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00091F22 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00091F3C 00                         		even
00091F3C                            Music88:	incbin	sound\music88.bin; Extra Life
0009202A                            		even
0009202A                            Music89:	incbin	sound\music89.bin; Special Stage
00095EF2 00                         		even
00095EF2                            Music8A:	incbin	sound\music8A.bin; Title Screen
000960BC                            		even
000960BC                            Music8B:	incbin	sound\music8B.bin; Ending Theme
00096356                            		even
00096356                            Music8C:	incbin	sound\music8C.bin; VS Boss
00096572                            		even
00096572                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009678E                            		even
0009678E                            Music8E:	incbin	sound\fle.bin ;		Act Clear
00096BFC 00                         		even
00096BFC                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009723C 00                         		even
0009723C                            Music90:	incbin	sound\music90.bin ; Continue
0009739A                            		even
0009739A                            Music91:	incbin	sound\music91.bin ; Credits
00098668                            		even
00098668                            Music92:	incbin	sound\music92.bin ; Drowning
00098792                            		even
00098792                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
00098862                            		even
00098862                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009889C 00                         		even
0009889C                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000988D6 00                         		even
000988D6                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
00098910 00                         		even
00098910                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009894A 00                         		even
0009894A                            Music98:	incbin	sound\music98.bin ; Marble Act 2
00098984 00                         		even
00098984                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000989BE 00                         		even
000989BE                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000989F8 00                         		even
000989F8                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
00098A32 00                         		even
00098A32                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
00098A6C 00                         		even
00098A6C                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
00098AA6 00                         		even
00098AA6                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
00098F96                            		even
00098F96                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
00098FD0 00                         		even
00098FD0                            ; ---------------------------------------------------------------------------
00098FD0                            ; Sound	effect pointers
00098FD0                            ; ---------------------------------------------------------------------------
00098FD0 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00098FDC 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00098FE8 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00098FF4 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00099000 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009900C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00099018 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00099024 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00099030 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0009903C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00099048 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00099054 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00099060 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0009906C 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00099078 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00099084 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00099090 0000 0000                  SoundD0Index:	dc.l SoundD0
00099094                            SoundA0:	incbin	sound\soundA0.bin
000990AA                            		even
000990AA                            SoundA1:	incbin	sound\soundA1.bin
000990D4                            		even
000990D4                            SoundA2:	incbin	sound\soundA2.bin
000990F4                            		even
000990F4                            SoundA3:	incbin	sound\soundA3.bin
00099126                            		even
00099126                            SoundA4:	incbin	sound\soundA4.bin
0009915C                            		even
0009915C                            SoundA5:	incbin	sound\soundA5.bin
00099188                            		even
00099188                            SoundA6:	incbin	sound\soundA6.bin
000991B8                            		even
000991B8                            SoundA7:	incbin	sound\soundA7.bin
000991E8                            		even
000991E8                            SoundA8:	incbin	sound\soundA8.bin
0009921C                            		even
0009921C                            SoundA9:	incbin	sound\soundA9.bin
0009922E                            		even
0009922E                            SoundAA:	incbin	sound\soundAA.bin
00099270                            		even
00099270                            SoundAB:	incbin	sound\soundAB.bin
00099290                            		even
00099290                            SoundAC:	incbin	sound\soundAC.bin
000992C4                            		even
000992C4                            SoundAD:	incbin	sound\soundAD.bin
000992FA                            		even
000992FA                            SoundAE:	incbin	sound\soundAE.bin
00099344                            		even
00099344                            SoundAF:	incbin	sound\soundAF.bin
00099372                            		even
00099372                            SoundB0:	incbin	sound\soundB0.bin
000993A4                            		even
000993A4                            SoundB1:	incbin	sound\soundB1.bin
000993D0                            		even
000993D0                            SoundB2:	incbin	sound\soundB2.bin
00099420                            		even
00099420                            SoundB3:	incbin	sound\soundB3.bin
0009946A                            		even
0009946A                            SoundB4:	include	sound\soundB4.asm
0009946A                            SndB4_Bumper_Header:
0009946A =00000001                  smpsHeaderStartSong = 1
0009946A 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
0009946C 01                         	smpsHeaderTempoSFX  $01
0009946D 03                         	smpsHeaderChanSFX   $03
0009946E                            
00099480                            
00099480                            ; FM5 Data
00099480                            SndB4_Bumper_FM5:
00099482 F600 00                    	smpsJump            SndB4_Bumper_Jump00
00099485                            
00099485                            ; FM4 Data
00099485                            SndB4_Bumper_FM4:
00099485 F2                         	smpsStop
00099486                            
00099486                            SndB4_Bumper_Jump00:
00099486 A020                       	dc.b	nG2, $20
00099488 F2                         	smpsStop
00099489                            
00099489                            ; FM3 Data
00099489                            SndB4_Bumper_FM3:
00099489 F2                         	smpsStop
0009948A                            
0009948A                            SndB4_Bumper_Voices:
0009948A                            ;	Voice $00
0009948A                            ;	$32
0009948A                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
0009948A                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
0009948A                            	smpsVcAlgorithm     $02
0009948A                            	smpsVcFeedback      $06
0009948A                            	smpsVcUnusedBits    $00
0009948A                            	smpsVcDetune        $07, $07, $02, $00
0009948A                            	smpsVcCoarseFreq    $00, $00, $00, $04
0009948A                            	smpsVcRateScale     $00, $00, $00, $00
0009948A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009948A                            	smpsVcAmpMod        $00, $00, $00, $00
0009948A                            	smpsVcDecayRate1    $08, $00, $00, $09
0009948A                            	smpsVcDecayRate2    $0B, $00, $00, $09
0009948A                            	smpsVcDecayLevel    $00, $00, $00, $00
0009948A                            	smpsVcReleaseRate   $0F, $00, $00, $00
0009948A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009948A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000994A4 00                         		even
000994A4                            SoundB5:	incbin	sound\soundB5.bin
000994D2                            		even
000994D2                            SoundB6:	incbin	sound\soundB6.bin
000994F0                            		even
000994F0                            SoundB7:	incbin	sound\soundB7.bin
0009952C                            		even
0009952C                            SoundB8:	incbin	sound\soundB8.bin
0009954A                            		even
0009954A                            SoundB9:	incbin	sound\soundB9.bin
000995AE                            		even
000995AE                            SoundBA:	incbin	sound\soundBA.bin
000995D6                            		even
000995D6                            SoundBB:	incbin	sound\soundBB.bin
00099602                            		even
00099602                            SoundBC:	incbin	sound\soundBC.bin
00099644                            		even
00099644                            SoundBD:	incbin	sound\soundBD.bin
00099698                            		even
00099698                            SoundBE:	incbin	sound\soundBE.bin
000996D2                            		even
000996D2                            SoundBF:	incbin	sound\soundBF.bin
00099744                            		even
00099744                            SoundC0:	incbin	sound\soundC0.bin
00099772                            		even
00099772                            SoundC1:	incbin	sound\soundC1.bin
000997CC                            		even
000997CC                            SoundC2:	incbin	sound\soundC2.bin
000997F6                            		even
000997F6                            SoundC3:	incbin	sound\soundC3.bin
00099870                            		even
00099870                            SoundC4:	incbin	sound\soundC4.bin
00099898                            		even
00099898                            SoundC5:	incbin	sound\soundC5.bin
00099900                            		even
00099900                            SoundC6:	incbin	sound\soundC6.bin
00099942                            		even
00099942                            SoundC7:	incbin	sound\soundC7.bin
00099970                            		even
00099970                            SoundC8:	incbin	sound\soundC8.bin
00099982                            		even
00099982                            SoundC9:	incbin	sound\soundC9.bin
000999B0                            		even
000999B0                            SoundCA:	incbin	sound\soundCA.bin
000999DE                            		even
000999DE                            SoundCB:	incbin	sound\soundCB.bin
00099A2A                            		even
00099A2A                            SoundCC:	incbin	sound\C9.ssf
00099A58                            		even
00099A58                            SoundCD:	incbin	sound\soundCD.bin
00099A66                            		even
00099A66                            SoundCE:	incbin	sound\soundCE.bin
00099A94                            		even
00099A94                            SoundCF:	incbin	sound\soundCF.bin
00099ACC                            		even
00099ACC                            SoundD0:	incbin	sound\soundD0.bin
00099B06                            		even
00099B06                            SegaPCM:	incbin	sound\segapcm.bin
000B3C5C                            SegaPCM_end:	even
000B3C5C                            
000B3C5C                            IdiotPCM:	incbin	sound\youare.bin
000BDD2E 00                         IdiotPCM_end:	even
000BDD2E                            
000BDD2E                            ; end of 'ROM'
000BDD2E                            EndOfRom:
000BDD2E                            
000BDD2E                            
